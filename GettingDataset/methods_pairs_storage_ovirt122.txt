2434
#method_before
@Override
public NetworkView getEntity() {
    return (NetworkView) ((super.getEntity() instanceof NetworkView) ? super.getEntity() : null);
}
#method_after
@Override
public NetworkView getEntity() {
    return (NetworkView) super.getEntity();
}
#end_block

#method_before
@Override
protected void syncSearch() {
    if (getEntity() == null) {
        return;
    }
    AsyncQuery asyncQuery = new AsyncQuery();
    asyncQuery.setModel(this);
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        @SuppressWarnings("unchecked")
        public void onSuccess(Object model, Object returnValue) {
            NetworkExternalSubnetListModel.this.setItems((List<ExternalSubnet>) returnValue);
        }
    };
    AsyncDataProvider.getExternalSubnetsByNetworkId(asyncQuery, getEntity().getId());
}
#method_after
@Override
protected void syncSearch() {
    if (getEntity() == null) {
        return;
    }
    super.syncSearch(VdcQueryType.GetExternalSubnetsOnProviderByNetwork, new IdQueryParameters(getEntity().getId()));
}
#end_block

#method_before
@Override
protected void entityPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.entityPropertyChanged(sender, e);
    if (e.PropertyName.equals("name")) {
        // $NON-NLS-1$
        getSearchCommand().execute();
    }
}
#method_after
@Override
protected void entityPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.entityPropertyChanged(sender, e);
    if (e.propertyName.equals("name")) {
        // $NON-NLS-1$
        getSearchCommand().execute();
    }
}
#end_block

#method_before
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command == getRemoveCommand()) {
        remove();
    } else if ("Cancel".equals(command.getName())) {
        // $NON-NLS-1$
        cancel();
    }
}
#method_after
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command == getRemoveCommand()) {
        remove();
    }
}
#end_block

#method_before
private void onRemove() {
    if (getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (ExternalSubnet subnet : getSubnets()) {
        VdcActionParametersBase parameters = new ExternalSubnetParameters(subnet);
        list.add(parameters);
    }
    startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.RemoveSubnetFromProvider, list, false, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            stopProgress();
            cancel();
        }
    }, null);
}
#method_after
private void onRemove() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (ExternalSubnet subnet : getSubnets()) {
        VdcActionParametersBase parameters = new ExternalSubnetParameters(subnet);
        list.add(parameters);
    }
    startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.RemoveSubnetFromProvider, list, false, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            stopProgress();
            sourceListModel.getSearchCommand().execute();
            cancel();
        }
    }, null);
}
#end_block

#method_before
public List<ExternalSubnet> getSubnets() {
    return subnets;
}
#method_after
private List<ExternalSubnet> getSubnets() {
    return subnets;
}
#end_block

#method_before
private void cancel() {
    sourceListModel.setWindow(null);
    sourceListModel.setConfirmWindow(null);
    sourceListModel.getSearchCommand().execute();
}
#method_after
private void cancel() {
    sourceListModel.setWindow(null);
}
#end_block

#method_before
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (// $NON-NLS-1$
    "Cancel".equals(command.getName())) {
        cancel();
    } else if (// $NON-NLS-1$
    "OnRemove".equals(command.getName())) {
        onRemove();
    }
}
#method_after
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if ("Cancel".equals(command.getName())) {
        // $NON-NLS-1$
        cancel();
    } else if ("OnRemove".equals(command.getName())) {
        // $NON-NLS-1$
        onRemove();
    }
}
#end_block

#method_before
@Override
public EventResult masterDomainNotOperational(Guid storageDomainId, Guid storagePoolId, boolean isReconstructToInactiveDomains) {
    VdcActionParametersBase parameters = new ReconstructMasterParameters(storagePoolId, storageDomainId, true, isReconstructToInactiveDomains);
    boolean isSucceeded = Backend.getInstance().runInternalAction(VdcActionType.ReconstructMasterDomain, parameters, ExecutionHandler.createInternalJobContext()).getSucceeded();
    return new EventResult(isSucceeded, EventType.RECONSTRUCT);
}
#method_after
@Override
public EventResult masterDomainNotOperational(Guid storageDomainId, Guid storagePoolId, boolean isReconstructToInactiveDomains, boolean canReconstructToCurrentMaster) {
    VdcActionParametersBase parameters = new ReconstructMasterParameters(storagePoolId, storageDomainId, true, isReconstructToInactiveDomains, canReconstructToCurrentMaster);
    boolean isSucceeded = Backend.getInstance().runInternalAction(VdcActionType.ReconstructMasterDomain, parameters, ExecutionHandler.createInternalJobContext()).getSucceeded();
    return new EventResult(isSucceeded, EventType.RECONSTRUCT);
}
#end_block

#method_before
@Override
public void processOnVmStop(Guid vmId) {
    VmPoolHandler.ProcessVmPoolOnStopVm(vmId, null);
}
#method_after
@Override
public void processOnVmStop(Guid vmId) {
    VmPoolHandler.processVmPoolOnStopVm(vmId, null);
}
#end_block

#method_before
@Override
public void vdsNotResponding(final VDS vds, final boolean executeSshSoftFencing) {
    ExecutionHandler.updateSpecificActionJobCompleted(vds.getId(), VdcActionType.MaintenanceVds, false);
    ThreadPoolUtil.execute(new Runnable() {

        @Override
        public void run() {
            log.infoFormat("ResourceManager::vdsNotResponding entered for Host {0}, {1}", vds.getId(), vds.getHostName());
            boolean shouldExecRealFencing = true;
            if (executeSshSoftFencing) {
                VdcReturnValueBase retVal = Backend.getInstance().runInternalAction(VdcActionType.SshSoftFencing, new VdsActionParameters(vds.getId()), ExecutionHandler.createInternalJobContext());
                // if SSH Soft Fencing command execution was successful, do not execute
                // standard fencing immediately, but wait to see if it helped
                shouldExecRealFencing = !retVal.getSucceeded();
            }
            if (MonitoringStrategyFactory.getMonitoringStrategyForVds(vds).isPowerManagementSupported() && shouldExecRealFencing) {
                Backend.getInstance().runInternalAction(VdcActionType.VdsNotRespondingTreatment, new FenceVdsActionParameters(vds.getId(), FenceActionType.Restart), ExecutionHandler.createInternalJobContext());
            }
        }
    });
}
#method_after
@Override
public void vdsNotResponding(final VDS vds, final boolean executeSshSoftFencing) {
    ExecutionHandler.updateSpecificActionJobCompleted(vds.getId(), VdcActionType.MaintenanceVds, false);
    ThreadPoolUtil.execute(new Runnable() {

        @Override
        public void run() {
            log.infoFormat("ResourceManager::vdsNotResponding entered for Host {0}, {1}", vds.getId(), vds.getHostName());
            boolean shouldExecRealFencing = true;
            if (executeSshSoftFencing) {
                VdcReturnValueBase retVal = Backend.getInstance().runInternalAction(VdcActionType.SshSoftFencing, new VdsActionParameters(vds.getId()), ExecutionHandler.createInternalJobContext());
                // if SSH Soft Fencing command execution was successful, do not execute
                // standard fencing immediately, but wait to see if it helped
                shouldExecRealFencing = !retVal.getSucceeded();
            }
            if (MonitoringStrategyFactory.getMonitoringStrategyForVds(vds).isPowerManagementSupported() && shouldExecRealFencing) {
                Backend.getInstance().runInternalAction(VdcActionType.VdsNotRespondingTreatment, new FenceVdsActionParameters(vds.getId(), FenceActionType.Restart), ExecutionHandler.createInternalJobContext());
            }
            moveBricksToUnknown(vds);
        }
    });
}
#end_block

#method_before
@Override
public boolean vdsUpEvent(final VDS vds) {
    HostStoragePoolParametersBase params = new HostStoragePoolParametersBase(vds);
    boolean isSucceeded = Backend.getInstance().runInternalAction(VdcActionType.InitVdsOnUp, params).getSucceeded();
    if (isSucceeded) {
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                try {
                    // migrate vms that its their default vds and failback
                    // is on
                    List<VmStatic> vmsToMigrate = DbFacade.getInstance().getVmStaticDao().getAllWithFailbackByVds(vds.getId());
                    if (vmsToMigrate.size() > 0) {
                        ArrayList<VdcActionParametersBase> vmToServerParametersList = new ArrayList(LinqUtils.foreach(vmsToMigrate, new Function<VmStatic, VdcActionParametersBase>() {

                            @Override
                            public VdcActionParametersBase eval(VmStatic vm) {
                                MigrateVmToServerParameters parameters = new MigrateVmToServerParameters(false, vm.getId(), vds.getId());
                                parameters.setShouldBeLogged(false);
                                return parameters;
                            }
                        }));
                        ExecutionContext executionContext = new ExecutionContext();
                        executionContext.setMonitored(true);
                        Backend.getInstance().runInternalMultipleActions(VdcActionType.MigrateVmToServer, vmToServerParametersList, executionContext);
                    }
                } catch (RuntimeException e) {
                    log.errorFormat("Failed to initialize Vds on up. Error: {0}", e);
                }
            }
        });
    }
    return isSucceeded;
}
#method_after
@Override
public boolean vdsUpEvent(final VDS vds) {
    HostStoragePoolParametersBase params = new HostStoragePoolParametersBase(vds);
    boolean isSucceeded = Backend.getInstance().runInternalAction(VdcActionType.InitVdsOnUp, params).getSucceeded();
    if (isSucceeded) {
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                try {
                    // migrate vms that its their default vds and failback
                    // is on
                    List<VmStatic> vmsToMigrate = DbFacade.getInstance().getVmStaticDao().getAllWithFailbackByVds(vds.getId());
                    if (vmsToMigrate.size() > 0) {
                        ArrayList<VdcActionParametersBase> vmToServerParametersList = new ArrayList<VdcActionParametersBase>(LinqUtils.foreach(vmsToMigrate, new Function<VmStatic, VdcActionParametersBase>() {

                            @Override
                            public VdcActionParametersBase eval(VmStatic vm) {
                                MigrateVmToServerParameters parameters = new MigrateVmToServerParameters(false, vm.getId(), vds.getId());
                                parameters.setShouldBeLogged(false);
                                return parameters;
                            }
                        }));
                        ExecutionContext executionContext = new ExecutionContext();
                        executionContext.setMonitored(true);
                        Backend.getInstance().runInternalMultipleActions(VdcActionType.MigrateVmToServer, vmToServerParametersList, executionContext);
                    }
                } catch (RuntimeException e) {
                    log.errorFormat("Failed to initialize Vds on up. Error: {0}", e);
                }
            }
        });
    }
    return isSucceeded;
}
#end_block

#method_before
@Override
public void processOnClientIpChange(final VDS vds, final Guid vmId) {
    final VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(vmId);
    // (this happened when user close the console to spice/vnc)
    if (StringUtils.isEmpty(vmDynamic.getClientIp())) {
        vmDynamic.setConsoleCurrentUserName(null);
        DbFacade.getInstance().getVmDynamicDao().update(vmDynamic);
    }
}
#method_after
@Override
public void processOnClientIpChange(final VDS vds, final Guid vmId) {
    final VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(vmId);
    final AuditLogableBase event = new AuditLogableBase();
    event.setVmId(vmId);
    event.setUserName(vmDynamic.getConsoleCurrentUserName());
    // (this happened when user close the console to spice/vnc)
    if (StringUtils.isEmpty(vmDynamic.getClientIp())) {
        vmDynamic.setConsoleCurrentUserName(null);
        DbFacade.getInstance().getVmDynamicDao().update(vmDynamic);
        AuditLogDirector.log(event, AuditLogType.VM_CONSOLE_DISCONNECTED);
    } else {
        AuditLogDirector.log(event, AuditLogType.VM_CONSOLE_CONNECTED);
    }
}
#end_block

#method_before
@Override
public void processOnVmPoweringUp(Guid vds_id, Guid vmid, String display_ip, int display_port) {
    IVdsAsyncCommand command = Backend.getInstance().getResourceManager().GetAsyncCommandForVm(vmid);
    if (command != null) {
        command.onPowerringUp();
        if (command.getAutoStart() && command.getAutoStartVdsId() != null) {
            try {
                String otp64 = Ticketing.GenerateOTP();
                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmTicket, new SetVmTicketVDSCommandParameters(vds_id, vmid, otp64, 60, "", Guid.Empty));
                log.infoFormat("VdsEventListener.ProcessOnVmPoweringUp - Auto start logic, starting spice to vm - {0} ", vmid);
                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.StartSpice, new StartSpiceVDSCommandParameters(command.getAutoStartVdsId(), display_ip, display_port, otp64));
            } catch (RuntimeException ex) {
                log.errorFormat("VdsEventListener.ProcessOnVmPoweringUp - failed to start spice on VM - {0} - {1} - {2}", vmid, ex.getMessage(), ex.getStackTrace());
            }
        }
    }
}
#method_after
@Override
public void processOnVmPoweringUp(Guid vds_id, Guid vmid, String display_ip, int display_port) {
    IVdsAsyncCommand command = Backend.getInstance().getResourceManager().GetAsyncCommandForVm(vmid);
    /*
         * XXX: command is null after successful migration, because runningSucceeded removes the
         *      MigrateVmCommand instance from the async cache too early.
         *      See the order of succeededToRunVm and processOnVmPoweringUp
         *      in VdsUpdateRunTimeInfo.afterRefreshTreatment
         */
    if (command != null) {
        command.onPowerringUp();
        if (command.getAutoStart() && command.getAutoStartVdsId() != null) {
            try {
                String otp64 = Ticketing.generateOTP();
                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmTicket, new SetVmTicketVDSCommandParameters(vds_id, vmid, otp64, 60, "", Guid.Empty));
                log.infoFormat("VdsEventListener.ProcessOnVmPoweringUp - Auto start logic, starting spice to vm - {0} ", vmid);
                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.StartSpice, new StartSpiceVDSCommandParameters(command.getAutoStartVdsId(), display_ip, display_port, otp64));
            } catch (RuntimeException ex) {
                log.errorFormat("VdsEventListener.ProcessOnVmPoweringUp - failed to start spice on VM - {0} - {1} - {2}", vmid, ex.getMessage(), ex.getStackTrace());
            }
        }
    }
}
#end_block

#method_before
@Override
public void storagePoolUpEvent(StoragePool storagePool) {
    AsyncTaskManager.getInstance().AddStoragePoolExistingTasks(storagePool);
}
#method_after
@Override
public void storagePoolUpEvent(StoragePool storagePool) {
    AsyncTaskManager.getInstance().addStoragePoolExistingTasks(storagePool);
}
#end_block

#method_before
public void addVmsToRun(List<Guid> vmIds) {
    final DateTime now = DateTime.getNow();
    LinkedList<Pair<Guid, DateTime>> vmsToAdd = new LinkedList<>();
    for (Guid vmId : vmIds) {
        vmsToAdd.add(new Pair<>(vmId, now));
    }
    autoStartVmsToRun.addAll(vmsToAdd);
}
#method_after
public void addVmsToRun(List<Guid> vmIds) {
    ArrayList<AutoStartVmToRestart> vmsToAdd = new ArrayList<>(vmIds.size());
    for (Guid vmId : vmIds) {
        vmsToAdd.add(new AutoStartVmToRestart(vmId));
    }
    autoStartVmsToRestart.addAll(vmsToAdd);
}
#end_block

#method_before
@OnTimerMethodAnnotation("startFailedAutoStartVms")
public void startFailedAutoStartVms() {
    LinkedList<Pair<Guid, DateTime>> idsToRemove = new LinkedList<>();
    final DateTime now = DateTime.getNow();
    final DateTime nextTimeOfRetryToRun = now.AddSeconds(RETRY_TO_RUN_HA_VM_INTERVAL);
    for (Pair<Guid, DateTime> vmIdAndDateTime : autoStartVmsToRun) {
        // if it is not the time to rerun this VM yet, skip for now
        if (now.compareTo(vmIdAndDateTime.getSecond()) < 0) {
            continue;
        }
        Guid vmId = vmIdAndDateTime.getFirst();
        EngineLock runVmLock = createLockForRunVmCommand(vmId);
        if (!getLockManager().acquireLock(runVmLock).getFirst()) {
            log.infoFormat("Could not acquire lock for running HA VM {0}", vmId);
            continue;
        }
        if (!runVm(vmId, runVmLock) && getVmDynamicDao().get(vmId).getStatus() == VMStatus.Down) {
            AuditLogableBase event = new AuditLogableBase();
            event.setVmId(vmId);
            AuditLogDirector.log(event, AuditLogType.HA_VM_RESTART_FAILED);
            vmIdAndDateTime.setSecond(nextTimeOfRetryToRun);
            continue;
        }
        // the VM reached status which is different from Down, therefore we can remove it from
        // the set and from now on errors will be detected by VdsUpdateRuntimeInfo
        idsToRemove.add(vmIdAndDateTime);
    }
    autoStartVmsToRun.removeAll(idsToRemove);
}
#method_after
@OnTimerMethodAnnotation("startFailedAutoStartVms")
public void startFailedAutoStartVms() {
    LinkedList<AutoStartVmToRestart> vmsToRemove = new LinkedList<>();
    final DateTime iterationStartTime = DateTime.getNow();
    final Date nextTimeOfRetryToRun = iterationStartTime.addSeconds(RETRY_TO_RUN_HA_VM_INTERVAL);
    for (AutoStartVmToRestart autoStartVmToRestart : autoStartVmsToRestart) {
        // (we'll try again in the next iteration)
        if (!autoStartVmToRestart.isTimeToRun(iterationStartTime)) {
            continue;
        }
        Guid vmId = autoStartVmToRestart.getVmId();
        EngineLock runVmLock = createEngineLockForRunVm(vmId);
        // acquired, skip for now  and we'll try again in the next iteration
        if (!acquireLock(runVmLock)) {
            log.debugFormat("Could not acquire lock for running HA VM {0}", vmId);
            continue;
        }
        if (!isVmNeedsToBeAutoStarted(vmId)) {
            // if the VM doesn't need to be auto started anymore, release the lock and
            // remove the VM from the collection of VMs that should be auto started
            releaseLock(runVmLock);
            vmsToRemove.add(autoStartVmToRestart);
            continue;
        }
        if (runVm(vmId, runVmLock)) {
            // the VM reached WaitForLunch, so from now on this job is not responsible
            // to auto start it, future failures will be detected by the monitoring
            vmsToRemove.add(autoStartVmToRestart);
        } else {
            logFailedAttemptToRestartHighlyAvailableVm(vmId);
            if (!autoStartVmToRestart.scheduleNextTimeToRun(nextTimeOfRetryToRun)) {
                // if we could not schedule the next time to run the VM, it means
                // that we reached the maximum number of tried so don't try anymore
                vmsToRemove.add(autoStartVmToRestart);
                logFailureToRestartHighlyAvailableVm(vmId);
            }
        }
    }
    autoStartVmsToRestart.removeAll(vmsToRemove);
}
#end_block

#method_before
private void saveDataToDb() {
    if (_saveVdsDynamic) {
        _vdsManager.UpdateDynamicData(_vds.getDynamicData());
    }
    if (_saveVdsStatistics) {
        VdsStatistics stat = _vds.getStatisticsData();
        _vdsManager.UpdateStatisticsData(stat);
        checkVdsMemoryThreshold(stat);
        checkVdsCpuThreshold(stat);
        checkVdsNetworkThreshold(stat);
        checkVdsSwapThreshold(stat);
        final List<VdsNetworkStatistics> statistics = new LinkedList<VdsNetworkStatistics>();
        for (VdsNetworkInterface iface : _vds.getInterfaces()) {
            statistics.add(iface.getStatistics());
        }
        if (!statistics.isEmpty()) {
            TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics);
                    return null;
                }
            });
        }
    }
    getDbFacade().getVmDynamicDao().updateAllInBatch(_vmDynamicToSave.values());
    getDbFacade().getVmStatisticsDao().updateAllInBatch(_vmStatisticsToSave.values());
    final List<VmNetworkStatistics> allVmInterfaceStatistics = new LinkedList<VmNetworkStatistics>();
    for (List<VmNetworkInterface> list : _vmInterfaceStatisticsToSave.values()) {
        for (VmNetworkInterface iface : list) {
            allVmInterfaceStatistics.add(iface.getStatistics());
        }
    }
    getDbFacade().getVmNetworkStatisticsDao().updateAllInBatch(allVmInterfaceStatistics);
    getDbFacade().getDiskImageDynamicDao().updateAllInBatch(_vmDiskImageDynamicToSave.values());
    saveVmDevicesToDb();
    saveVmGuestAgentNetworkDevices();
    getVdsEventListener().addExternallyManagedVms(_externalVmsToAdd);
}
#method_after
private void saveDataToDb() {
    if (_saveVdsDynamic) {
        _vdsManager.updateDynamicData(_vds.getDynamicData());
    }
    if (_saveVdsStatistics) {
        VdsStatistics stat = _vds.getStatisticsData();
        _vdsManager.updateStatisticsData(stat);
        checkVdsMemoryThreshold(stat);
        checkVdsCpuThreshold(stat);
        checkVdsNetworkThreshold(stat);
        checkVdsSwapThreshold(stat);
        final List<VdsNetworkStatistics> statistics = new LinkedList<VdsNetworkStatistics>();
        for (VdsNetworkInterface iface : _vds.getInterfaces()) {
            statistics.add(iface.getStatistics());
        }
        if (!statistics.isEmpty()) {
            TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics);
                    return null;
                }
            });
        }
    }
    getDbFacade().getVmDynamicDao().updateAllInBatch(_vmDynamicToSave.values());
    getDbFacade().getVmStatisticsDao().updateAllInBatch(_vmStatisticsToSave.values());
    final List<VmNetworkStatistics> allVmInterfaceStatistics = new LinkedList<VmNetworkStatistics>();
    for (List<VmNetworkInterface> list : _vmInterfaceStatisticsToSave.values()) {
        for (VmNetworkInterface iface : list) {
            allVmInterfaceStatistics.add(iface.getStatistics());
        }
    }
    getDbFacade().getVmNetworkStatisticsDao().updateAllInBatch(allVmInterfaceStatistics);
    getDbFacade().getDiskImageDynamicDao().updateAllInBatch(_vmDiskImageDynamicToSave.values());
    saveVmDevicesToDb();
    saveVmGuestAgentNetworkDevices();
    getVdsEventListener().addExternallyManagedVms(_externalVmsToAdd);
}
#end_block

#method_before
private void checkVdsMemoryThreshold(VdsStatistics stat) {
    Integer minAvailableThreshold = Config.GetValue(ConfigValues.LogPhysicalMemoryThresholdInMB);
    Integer maxUsedPercentageThreshold = Config.GetValue(ConfigValues.LogMaxPhysicalMemoryUsedThresholdInPercentage);
    if (stat.getMemFree() == null || stat.getusage_mem_percent() == null) {
        return;
    }
    AuditLogType valueToLog = stat.getMemFree() < minAvailableThreshold ? AuditLogType.VDS_LOW_MEM : AuditLogType.VDS_HIGH_MEM_USE;
    if ((stat.getMemFree() < minAvailableThreshold && Version.v3_2.compareTo(_vds.getVersion()) <= 0) || stat.getusage_mem_percent() > maxUsedPercentageThreshold) {
        AuditLogableBase logable = new AuditLogableBase(stat.getId());
        logable.addCustomValue("HostName", _vds.getName());
        logable.addCustomValue("AvailableMemory", stat.getMemFree().toString());
        logable.addCustomValue("UsedMemory", stat.getusage_mem_percent().toString());
        logable.addCustomValue("Threshold", stat.getMemFree() < minAvailableThreshold ? minAvailableThreshold.toString() : maxUsedPercentageThreshold.toString());
        auditLog(logable, valueToLog);
    }
}
#method_after
private void checkVdsMemoryThreshold(VdsStatistics stat) {
    Integer minAvailableThreshold = Config.getValue(ConfigValues.LogPhysicalMemoryThresholdInMB);
    Integer maxUsedPercentageThreshold = Config.getValue(ConfigValues.LogMaxPhysicalMemoryUsedThresholdInPercentage);
    if (stat.getMemFree() == null || stat.getusage_mem_percent() == null) {
        return;
    }
    AuditLogType valueToLog = stat.getMemFree() < minAvailableThreshold ? AuditLogType.VDS_LOW_MEM : AuditLogType.VDS_HIGH_MEM_USE;
    if ((stat.getMemFree() < minAvailableThreshold && Version.v3_2.compareTo(_vds.getVersion()) <= 0) || stat.getusage_mem_percent() > maxUsedPercentageThreshold) {
        AuditLogableBase logable = new AuditLogableBase(stat.getId());
        logable.addCustomValue("HostName", _vds.getName());
        logable.addCustomValue("AvailableMemory", stat.getMemFree().toString());
        logable.addCustomValue("UsedMemory", stat.getusage_mem_percent().toString());
        logable.addCustomValue("Threshold", stat.getMemFree() < minAvailableThreshold ? minAvailableThreshold.toString() : maxUsedPercentageThreshold.toString());
        auditLog(logable, valueToLog);
    }
}
#end_block

#method_before
private void checkVdsCpuThreshold(VdsStatistics stat) {
    Integer maxUsedPercentageThreshold = Config.GetValue(ConfigValues.LogMaxCpuUsedThresholdInPercentage);
    if (stat.getusage_cpu_percent() != null && stat.getusage_cpu_percent() > maxUsedPercentageThreshold) {
        AuditLogableBase logable = new AuditLogableBase(stat.getId());
        logable.addCustomValue("HostName", _vds.getName());
        logable.addCustomValue("UsedCpu", stat.getusage_cpu_percent().toString());
        logable.addCustomValue("Threshold", maxUsedPercentageThreshold.toString());
        auditLog(logable, AuditLogType.VDS_HIGH_CPU_USE);
    }
}
#method_after
private void checkVdsCpuThreshold(VdsStatistics stat) {
    Integer maxUsedPercentageThreshold = Config.getValue(ConfigValues.LogMaxCpuUsedThresholdInPercentage);
    if (stat.getusage_cpu_percent() != null && stat.getusage_cpu_percent() > maxUsedPercentageThreshold) {
        AuditLogableBase logable = new AuditLogableBase(stat.getId());
        logable.addCustomValue("HostName", _vds.getName());
        logable.addCustomValue("UsedCpu", stat.getusage_cpu_percent().toString());
        logable.addCustomValue("Threshold", maxUsedPercentageThreshold.toString());
        auditLog(logable, AuditLogType.VDS_HIGH_CPU_USE);
    }
}
#end_block

#method_before
private void checkVdsNetworkThreshold(VdsStatistics stat) {
    Integer maxUsedPercentageThreshold = Config.GetValue(ConfigValues.LogMaxNetworkUsedThresholdInPercentage);
    if (stat.getusage_network_percent() != null && stat.getusage_network_percent() > maxUsedPercentageThreshold) {
        AuditLogableBase logable = new AuditLogableBase(stat.getId());
        logable.addCustomValue("HostName", _vds.getName());
        logable.addCustomValue("UsedNetwork", stat.getusage_network_percent().toString());
        logable.addCustomValue("Threshold", maxUsedPercentageThreshold.toString());
        auditLog(logable, AuditLogType.VDS_HIGH_NETWORK_USE);
    }
}
#method_after
private void checkVdsNetworkThreshold(VdsStatistics stat) {
    Integer maxUsedPercentageThreshold = Config.getValue(ConfigValues.LogMaxNetworkUsedThresholdInPercentage);
    if (stat.getusage_network_percent() != null && stat.getusage_network_percent() > maxUsedPercentageThreshold) {
        AuditLogableBase logable = new AuditLogableBase(stat.getId());
        logable.addCustomValue("HostName", _vds.getName());
        logable.addCustomValue("UsedNetwork", stat.getusage_network_percent().toString());
        logable.addCustomValue("Threshold", maxUsedPercentageThreshold.toString());
        auditLog(logable, AuditLogType.VDS_HIGH_NETWORK_USE);
    }
}
#end_block

#method_before
private void checkVdsSwapThreshold(VdsStatistics stat) {
    Integer minAvailableThreshold = Config.GetValue(ConfigValues.LogPhysicalMemoryThresholdInMB);
    Integer maxUsedPercentageThreshold = Config.GetValue(ConfigValues.LogMaxPhysicalMemoryUsedThresholdInPercentage);
    if (stat.getswap_total() == null || stat.getswap_free() == null || stat.getswap_total() == 0) {
        return;
    }
    Long swapUsedPercent = (stat.getswap_total() - stat.getswap_free()) / stat.getswap_total();
    AuditLogType valueToLog = stat.getswap_free() < minAvailableThreshold ? AuditLogType.VDS_LOW_SWAP : AuditLogType.VDS_HIGH_SWAP_USE;
    if (stat.getswap_free() < minAvailableThreshold || swapUsedPercent > maxUsedPercentageThreshold) {
        AuditLogableBase logable = new AuditLogableBase(stat.getId());
        logable.addCustomValue("HostName", _vds.getName());
        logable.addCustomValue("UsedSwap", swapUsedPercent.toString());
        logable.addCustomValue("AvailableSwapMemory", stat.getswap_free().toString());
        logable.addCustomValue("Threshold", stat.getswap_free() < minAvailableThreshold ? minAvailableThreshold.toString() : maxUsedPercentageThreshold.toString());
        auditLog(logable, valueToLog);
    }
}
#method_after
private void checkVdsSwapThreshold(VdsStatistics stat) {
    Integer minAvailableThreshold = Config.getValue(ConfigValues.LogPhysicalMemoryThresholdInMB);
    Integer maxUsedPercentageThreshold = Config.getValue(ConfigValues.LogMaxPhysicalMemoryUsedThresholdInPercentage);
    if (stat.getswap_total() == null || stat.getswap_free() == null || stat.getswap_total() == 0) {
        return;
    }
    Long swapUsedPercent = (stat.getswap_total() - stat.getswap_free()) / stat.getswap_total();
    AuditLogType valueToLog = stat.getswap_free() < minAvailableThreshold ? AuditLogType.VDS_LOW_SWAP : AuditLogType.VDS_HIGH_SWAP_USE;
    if (stat.getswap_free() < minAvailableThreshold || swapUsedPercent > maxUsedPercentageThreshold) {
        AuditLogableBase logable = new AuditLogableBase(stat.getId());
        logable.addCustomValue("HostName", _vds.getName());
        logable.addCustomValue("UsedSwap", swapUsedPercent.toString());
        logable.addCustomValue("AvailableSwapMemory", stat.getswap_free().toString());
        logable.addCustomValue("Threshold", stat.getswap_free() < minAvailableThreshold ? minAvailableThreshold.toString() : maxUsedPercentageThreshold.toString());
        auditLog(logable, valueToLog);
    }
}
#end_block

#method_before
private void refreshVdsStats() {
    if (Config.<Boolean>GetValue(ConfigValues.DebugTimerLogging)) {
        log.debugFormat("vdsManager::refreshVdsStats entered, vds = {0} : {1}", _vds.getId(), _vds.getName());
    }
    // get statistics data, images checks and vm_count data (dynamic)
    GetStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase> vdsBrokerCommand = new GetStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    vdsBrokerCommand.execute();
    if (!vdsBrokerCommand.getVDSReturnValue().getSucceeded() && vdsBrokerCommand.getVDSReturnValue().getExceptionObject() != null) {
        VDSNetworkException ex = (VDSNetworkException) ((vdsBrokerCommand.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException) ? vdsBrokerCommand.getVDSReturnValue().getExceptionObject() : null);
        if (ex != null) {
            if (_vdsManager.handleNetworkException(ex, _vds)) {
                _saveVdsDynamic = true;
            }
            log.errorFormat("vds::refreshVdsStats Failed getVdsStats,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), ExceptionUtils.getMessage(ex));
        } else {
            log.errorFormat("vds::refreshVdsStats Failed getVdsStats,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), vdsBrokerCommand.getVDSReturnValue().getExceptionString());
        }
        throw vdsBrokerCommand.getVDSReturnValue().getExceptionObject();
    }
    // save also dynamic because vm_count data and image_check getting with
    // statistics data
    // TODO: omer- one day remove dynamic save when possible please check if vdsDynamic changed before save
    _saveVdsDynamic = true;
    _saveVdsStatistics = true;
    alertIfLowDiskSpaceOnHost();
    checkVdsInterfaces();
    if (Config.<Boolean>GetValue(ConfigValues.DebugTimerLogging)) {
        log.debugFormat("vds::refreshVdsStats\n{0}", toString());
    }
}
#method_after
private void refreshVdsStats() {
    if (Config.<Boolean>getValue(ConfigValues.DebugTimerLogging)) {
        log.debugFormat("vdsManager::refreshVdsStats entered, vds = {0} : {1}", _vds.getId(), _vds.getName());
    }
    // get statistics data, images checks and vm_count data (dynamic)
    GetStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase> vdsBrokerCommand = new GetStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    vdsBrokerCommand.execute();
    ResourceManager.getInstance().getEventListener().updateSchedulingStats(_vds);
    if (!vdsBrokerCommand.getVDSReturnValue().getSucceeded() && vdsBrokerCommand.getVDSReturnValue().getExceptionObject() != null) {
        VDSNetworkException ex = (VDSNetworkException) ((vdsBrokerCommand.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException) ? vdsBrokerCommand.getVDSReturnValue().getExceptionObject() : null);
        if (ex != null) {
            if (_vdsManager.handleNetworkException(ex, _vds)) {
                _saveVdsDynamic = true;
            }
            log.errorFormat("vds::refreshVdsStats Failed getVdsStats,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), ExceptionUtils.getMessage(ex));
        } else {
            log.errorFormat("vds::refreshVdsStats Failed getVdsStats,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), vdsBrokerCommand.getVDSReturnValue().getExceptionString());
        }
        throw vdsBrokerCommand.getVDSReturnValue().getExceptionObject();
    }
    // save also dynamic because vm_count data and image_check getting with
    // statistics data
    // TODO: omer- one day remove dynamic save when possible please check if vdsDynamic changed before save
    _saveVdsDynamic = true;
    _saveVdsStatistics = true;
    alertIfLowDiskSpaceOnHost();
    checkVdsInterfaces();
    if (Config.<Boolean>getValue(ConfigValues.DebugTimerLogging)) {
        log.debugFormat("vds::refreshVdsStats\n{0}", toString());
    }
}
#end_block

#method_before
private void alertIfLowDiskSpaceOnHost() {
    Map<String, Long> disksUsage = _vds.getLocalDisksUsage();
    if (disksUsage == null || disksUsage.isEmpty()) {
        return;
    }
    List<String> disksWithLowSpace = new ArrayList<String>();
    List<String> disksWithCriticallyLowSpace = new ArrayList<String>();
    final int lowSpaceCriticalThreshold = Config.<Integer>GetValue(ConfigValues.VdsLocalDisksCriticallyLowFreeSpace);
    final int lowSpaceThreshold = Config.<Integer>GetValue(ConfigValues.VdsLocalDisksLowFreeSpace);
    for (Entry<String, Long> diskUsage : disksUsage.entrySet()) {
        if (diskUsage.getValue() != null) {
            if (diskUsage.getValue() <= lowSpaceCriticalThreshold) {
                disksWithCriticallyLowSpace.add(diskUsage.getKey());
            } else if (diskUsage.getValue() <= lowSpaceThreshold) {
                disksWithLowSpace.add(diskUsage.getKey());
            }
        }
    }
    logLowDiskSpaceOnHostDisks(disksWithLowSpace, lowSpaceThreshold, AuditLogType.VDS_LOW_DISK_SPACE);
    logLowDiskSpaceOnHostDisks(disksWithCriticallyLowSpace, lowSpaceCriticalThreshold, AuditLogType.VDS_LOW_DISK_SPACE_ERROR);
}
#method_after
private void alertIfLowDiskSpaceOnHost() {
    Map<String, Long> disksUsage = _vds.getLocalDisksUsage();
    if (disksUsage == null || disksUsage.isEmpty()) {
        return;
    }
    List<String> disksWithLowSpace = new ArrayList<String>();
    List<String> disksWithCriticallyLowSpace = new ArrayList<String>();
    final int lowSpaceCriticalThreshold = Config.<Integer>getValue(ConfigValues.VdsLocalDisksCriticallyLowFreeSpace);
    final int lowSpaceThreshold = Config.<Integer>getValue(ConfigValues.VdsLocalDisksLowFreeSpace);
    for (Entry<String, Long> diskUsage : disksUsage.entrySet()) {
        if (diskUsage.getValue() != null) {
            if (diskUsage.getValue() <= lowSpaceCriticalThreshold) {
                disksWithCriticallyLowSpace.add(diskUsage.getKey());
            } else if (diskUsage.getValue() <= lowSpaceThreshold) {
                disksWithLowSpace.add(diskUsage.getKey());
            }
        }
    }
    logLowDiskSpaceOnHostDisks(disksWithLowSpace, lowSpaceThreshold, AuditLogType.VDS_LOW_DISK_SPACE);
    logLowDiskSpaceOnHostDisks(disksWithCriticallyLowSpace, lowSpaceCriticalThreshold, AuditLogType.VDS_LOW_DISK_SPACE_ERROR);
}
#end_block

#method_before
// Check if one of the Host interfaces is down, we set the host to non-operational
private void checkVdsInterfaces() {
    if (_vds.getStatus() != VDSStatus.Up) {
        return;
    }
    List<String> networks = new ArrayList<String>();
    List<String> brokenNics = new ArrayList<String>();
    try {
        Pair<List<String>, List<String>> problematicNics = determineProblematicNics(_vds.getInterfaces(), getDbFacade().getNetworkDao().getAllForCluster(_vds.getVdsGroupId()));
        brokenNics.addAll(problematicNics.getFirst());
        networks.addAll(problematicNics.getSecond());
    } catch (Exception e) {
        log.error(String.format("Failure on checkInterfaces on update runtimeinfo for vds: %s", _vds.getName()), e);
    } finally {
        if (!brokenNics.isEmpty()) {
            // we give 1 minutes to a nic to get up in case the nic get the ip from DHCP server
            if (!hostDownTimes.containsKey(_vds.getId())) {
                hostDownTimes.put(_vds.getId(), System.currentTimeMillis());
                return;
            }
            // if less then 1 minutes, still waiting for DHCP
            int delay = Config.<Integer>GetValue(ConfigValues.NicDHCPDelayGraceInMS) * 1000;
            if (System.currentTimeMillis() < hostDownTimes.get(_vds.getId()) + delay) {
                return;
            }
            // if we could retreive it within the timeout, remove from map (for future checks) and set the host to
            // non-operational
            hostDownTimes.remove(_vds.getId());
            try {
                StringBuilder sNics = new StringBuilder();
                StringBuilder sNetworks = new StringBuilder();
                for (String nic : brokenNics) {
                    sNics.append(nic).append(", ");
                }
                for (String net : networks) {
                    sNetworks.append(net).append(", ");
                }
                String message = String.format("Host '%s' moved to Non-Operational state because interface/s '%s' are down which needed by network/s '%s' in the current cluster", _vds.getName(), sNics.toString(), sNetworks.toString());
                _vdsManager.setStatus(VDSStatus.NonOperational, _vds);
                log.info(message);
                AuditLogableBase logable = new AuditLogableBase(_vds.getId());
                logable.addCustomValue("Networks", StringUtils.stripEnd(sNetworks.toString(), ", "));
                logable.addCustomValue("Interfaces", StringUtils.stripEnd(sNics.toString(), ", "));
                auditLog(logable, AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN);
            } catch (Exception e) {
                log.error(String.format("checkInterface: Failure on moving host: %s to non-operational.", _vds.getName()), e);
            }
        } else {
            // no nics are down, remove from list if exists
            hostDownTimes.remove(_vds.getId());
        }
    }
}
#method_after
// Check if one of the Host interfaces is down, we set the host to non-operational
private void checkVdsInterfaces() {
    if (_vds.getStatus() != VDSStatus.Up) {
        return;
    }
    List<String> networks = new ArrayList<String>();
    List<String> brokenNics = new ArrayList<String>();
    try {
        Pair<List<String>, List<String>> problematicNics = determineProblematicNics(_vds.getInterfaces(), getDbFacade().getNetworkDao().getAllForCluster(_vds.getVdsGroupId()));
        brokenNics.addAll(problematicNics.getFirst());
        networks.addAll(problematicNics.getSecond());
    } catch (Exception e) {
        log.error(String.format("Failure on checkInterfaces on update runtimeinfo for vds: %s", _vds.getName()), e);
    } finally {
        if (!brokenNics.isEmpty()) {
            // we give 1 minutes to a nic to get up in case the nic get the ip from DHCP server
            if (!hostDownTimes.containsKey(_vds.getId())) {
                hostDownTimes.put(_vds.getId(), System.currentTimeMillis());
                return;
            }
            // if less then 1 minutes, still waiting for DHCP
            int delay = Config.<Integer>getValue(ConfigValues.NicDHCPDelayGraceInMS) * 1000;
            if (System.currentTimeMillis() < hostDownTimes.get(_vds.getId()) + delay) {
                return;
            }
            // if we could retreive it within the timeout, remove from map (for future checks) and set the host to
            // non-operational
            hostDownTimes.remove(_vds.getId());
            try {
                StringBuilder sNics = new StringBuilder();
                StringBuilder sNetworks = new StringBuilder();
                for (String nic : brokenNics) {
                    sNics.append(nic).append(", ");
                }
                for (String net : networks) {
                    sNetworks.append(net).append(", ");
                }
                String message = String.format("Host '%s' moved to Non-Operational state because interface/s '%s' are down which needed by network/s '%s' in the current cluster", _vds.getName(), sNics.toString(), sNetworks.toString());
                _vdsManager.setStatus(VDSStatus.NonOperational, _vds);
                log.info(message);
                AuditLogableBase logable = new AuditLogableBase(_vds.getId());
                logable.addCustomValue("Networks", StringUtils.stripEnd(sNetworks.toString(), ", "));
                logable.addCustomValue("Interfaces", StringUtils.stripEnd(sNics.toString(), ", "));
                auditLog(logable, AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN);
            } catch (Exception e) {
                log.error(String.format("checkInterface: Failure on moving host: %s to non-operational.", _vds.getName()), e);
            }
        } else {
            // no nics are down, remove from list if exists
            hostDownTimes.remove(_vds.getId());
        }
    }
}
#end_block

#method_before
private void refreshVmStats() {
    if (Config.<Boolean>GetValue(ConfigValues.DebugTimerLogging)) {
        log.debug("vds::refreshVmList entered");
    }
    VdsBrokerCommand<VdsIdAndVdsVDSCommandParametersBase> command;
    if (!_vdsManager.getRefreshStatistics()) {
        command = new ListVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    } else {
        command = new GetAllVmStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    }
    _runningVms = (Map<Guid, VmInternalData>) command.executeWithReturnValue();
    if (command.getVDSReturnValue().getSucceeded()) {
        List<VM> running = checkVmsStatusChanged();
        proceedWatchdogEvents();
        proceedBalloonCheck();
        proceedDownVms();
        proceedGuaranteedMemoryCheck();
        processExternallyManagedVms();
        // update repository and check if there are any vm in cache that not
        // in vdsm
        updateRepository(running);
        // Going over all returned VMs and updting the data structures
        // accordingly
        // checking the db for incoherent vm status;
        // setVmStatusDownForVmNotFound();
        refreshCommitedMemory();
        // Handle VM devices were changed (for 3.1 cluster and above)
        if (!VmDeviceCommonUtils.isOldClusterVersion(_vds.getVdsGroupCompatibilityVersion())) {
            handleVmDeviceChange();
        }
        prepareGuestAgentNetworkDevicesForUpdate();
    } else if (command.getVDSReturnValue().getExceptionObject() != null) {
        if (command.getVDSReturnValue().getExceptionObject() instanceof VDSErrorException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), command.getVDSReturnValue().getExceptionString());
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException) {
            _saveVdsDynamic = _vdsManager.handleNetworkException((VDSNetworkException) command.getVDSReturnValue().getExceptionObject(), _vds);
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSProtocolException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), command.getVDSReturnValue().getExceptionString());
        }
        throw command.getVDSReturnValue().getExceptionObject();
    } else {
        log.error("GetCapabilitiesVDSCommand failed with no exception!");
    }
}
#method_after
private void refreshVmStats() {
    if (Config.<Boolean>getValue(ConfigValues.DebugTimerLogging)) {
        log.debug("vds::refreshVmList entered");
    }
    VdsBrokerCommand<VdsIdAndVdsVDSCommandParametersBase> command;
    if (!_vdsManager.getRefreshStatistics()) {
        command = new ListVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    } else {
        command = new GetAllVmStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    }
    _runningVms = (Map<Guid, VmInternalData>) command.executeWithReturnValue();
    if (command.getVDSReturnValue().getSucceeded()) {
        List<VM> running = checkVmsStatusChanged();
        proceedWatchdogEvents();
        proceedBalloonCheck();
        proceedDownVms();
        proceedGuaranteedMemoryCheck();
        processExternallyManagedVms();
        // update repository and check if there are any vm in cache that not
        // in vdsm
        updateRepository(running);
        // Going over all returned VMs and updting the data structures
        // accordingly
        // checking the db for incoherent vm status;
        // setVmStatusDownForVmNotFound();
        refreshCommitedMemory();
        // Handle VM devices were changed (for 3.1 cluster and above)
        if (!VmDeviceCommonUtils.isOldClusterVersion(_vds.getVdsGroupCompatibilityVersion())) {
            handleVmDeviceChange();
        }
        prepareGuestAgentNetworkDevicesForUpdate();
    } else if (command.getVDSReturnValue().getExceptionObject() != null) {
        if (command.getVDSReturnValue().getExceptionObject() instanceof VDSErrorException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), command.getVDSReturnValue().getExceptionString());
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException) {
            _saveVdsDynamic = _vdsManager.handleNetworkException((VDSNetworkException) command.getVDSReturnValue().getExceptionObject(), _vds);
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSProtocolException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), command.getVDSReturnValue().getExceptionString());
        }
        throw command.getVDSReturnValue().getExceptionObject();
    } else {
        log.error("GetCapabilitiesVDSCommand failed with no exception!");
    }
}
#end_block

#method_before
private boolean devicePluggable(VmDevice device) {
    return (VmDeviceType.DISK.getName().equals(device.getDevice()) && VmDeviceGeneralType.DISK == device.getType()) || (VmDeviceType.BRIDGE.getName().equals(device.getDevice()) && VmDeviceGeneralType.INTERFACE == device.getType());
}
#method_after
private boolean devicePluggable(VmDevice device) {
    return VmDeviceCommonUtils.isDisk(device) || VmDeviceCommonUtils.isBridge(device);
}
#end_block

#method_before
private Guid addNewVmDevice(Guid vmId, Map device) {
    Guid newDeviceId = Guid.Empty;
    String typeName = (String) device.get(VdsProperties.Type);
    String deviceName = (String) device.get(VdsProperties.Device);
    // do not allow null or empty device or type values
    if (StringUtils.isEmpty(typeName) || StringUtils.isEmpty(deviceName)) {
        log.errorFormat("Empty or NULL values were passed for a VM {0} device, Device is skipped", vmId);
    } else {
        String address = ((Map<String, String>) device.get(VdsProperties.Address)).toString();
        String alias = StringUtils.defaultString((String) device.get(VdsProperties.Alias));
        Object o = device.get(VdsProperties.SpecParams);
        newDeviceId = Guid.newGuid();
        VmDeviceId id = new VmDeviceId(newDeviceId, vmId);
        VmDevice newDevice = new VmDevice(id, VmDeviceGeneralType.forValue(typeName), deviceName, address, 0, o == null ? new HashMap<String, Object>() : (Map<String, Object>) o, false, true, false, alias, null, null);
        newVmDevices.add(newDevice);
        log.debugFormat("New device was marked for adding to VM {0} Devices : {1}", vmId, newDevice);
    }
    return newDeviceId;
}
#method_after
private Guid addNewVmDevice(Guid vmId, Map device) {
    Guid newDeviceId = Guid.Empty;
    String typeName = (String) device.get(VdsProperties.Type);
    String deviceName = (String) device.get(VdsProperties.Device);
    // do not allow null or empty device or type values
    if (StringUtils.isEmpty(typeName) || StringUtils.isEmpty(deviceName)) {
        log.errorFormat("Empty or NULL values were passed for a VM {0} device, Device is skipped", vmId);
    } else {
        String address = ((Map<String, String>) device.get(VdsProperties.Address)).toString();
        String alias = StringUtils.defaultString((String) device.get(VdsProperties.Alias));
        Object o = device.get(VdsProperties.SpecParams);
        newDeviceId = Guid.newGuid();
        VmDeviceId id = new VmDeviceId(newDeviceId, vmId);
        VmDevice newDevice = new VmDevice(id, VmDeviceGeneralType.forValue(typeName), deviceName, address, 0, o == null ? new HashMap<String, Object>() : (Map<String, Object>) o, false, true, Boolean.getBoolean((String) device.get(VdsProperties.ReadOnly)), alias, null, null);
        newVmDevices.add(newDevice);
        log.debugFormat("New device was marked for adding to VM {0} Devices : {1}", vmId, newDevice);
    }
    return newDeviceId;
}
#end_block

#method_before
private void proceedBalloonCheck() {
    if (isBalloonActiveOnHost()) {
        for (VmInternalData vmInternalData : _runningVms.values()) {
            VmBalloonInfo balloonInfo = vmInternalData.getVmStatistics().getVmBalloonInfo();
            Guid vmId = vmInternalData.getVmDynamic().getId();
            if (_vmDict.get(vmId) == null) {
                // if vm is unknown - continue
                continue;
            }
            if (isBalloonDeviceActiveOnVm(vmInternalData) && (balloonInfo.getCurrentMemory().intValue() == balloonInfo.getBalloonMaxMemory().intValue() || balloonInfo.getCurrentMemory().intValue() != balloonInfo.getBalloonTargetMemory().intValue())) {
                vmBalloonDriverIsRequestedAndUnavailable(vmId);
            } else {
                vmBalloonDriverIsNotRequestedOrAvailable(vmId);
            }
            if (vmInternalData.getVmStatistics().getusage_mem_percent() != null && // guest agent is down
            vmInternalData.getVmStatistics().getusage_mem_percent() == 0 && balloonInfo.getCurrentMemory().intValue() != balloonInfo.getBalloonMaxMemory().intValue()) {
                guestAgentIsDownAndBalloonInfalted(vmId);
            } else {
                guestAgentIsUpOrBalloonDeflated(vmId);
            }
        }
    }
}
#method_after
private void proceedBalloonCheck() {
    if (isBalloonActiveOnHost()) {
        for (VmInternalData vmInternalData : _runningVms.values()) {
            VmBalloonInfo balloonInfo = vmInternalData.getVmStatistics().getVmBalloonInfo();
            Guid vmId = vmInternalData.getVmDynamic().getId();
            if (_vmDict.get(vmId) == null) {
                // if vm is unknown - continue
                continue;
            }
            if (isBalloonDeviceActiveOnVm(vmInternalData) && (Objects.equals(balloonInfo.getCurrentMemory(), balloonInfo.getBalloonMaxMemory()) || !Objects.equals(balloonInfo.getCurrentMemory(), balloonInfo.getBalloonTargetMemory()))) {
                vmBalloonDriverIsRequestedAndUnavailable(vmId);
            } else {
                vmBalloonDriverIsNotRequestedOrAvailable(vmId);
            }
            if (vmInternalData.getVmStatistics().getusage_mem_percent() != null && // guest agent is down
            vmInternalData.getVmStatistics().getusage_mem_percent() == 0 && // check if the device is present
            balloonInfo.isBalloonDeviceEnabled() && !Objects.equals(balloonInfo.getCurrentMemory(), balloonInfo.getBalloonMaxMemory())) {
                guestAgentIsDownAndBalloonInfalted(vmId);
            } else {
                guestAgentIsUpOrBalloonDeflated(vmId);
            }
        }
    }
}
#end_block

#method_before
// add the vm to the list of vms with uncontrolled inflated balloon or increment its counter
private void guestAgentIsDownAndBalloonInfalted(Guid vmId) {
    Integer currentVal = vmsWithUncontrolledBalloon.get(vmId);
    if (currentVal == null) {
        vmsWithUncontrolledBalloon.put(vmId, 1);
    } else {
        vmsWithUncontrolledBalloon.put(vmId, currentVal + 1);
        if (currentVal >= Config.<Integer>GetValue(ConfigValues.IterationsWithBalloonProblem)) {
            AuditLogableBase auditLogable = new AuditLogableBase();
            auditLogable.setVmId(vmId);
            AuditLogDirector.log(auditLogable, AuditLogType.VM_BALLOON_DRIVER_UNCONTROLLED);
            vmsWithUncontrolledBalloon.put(vmId, 0);
        }
    }
}
#method_after
// add the vm to the list of vms with uncontrolled inflated balloon or increment its counter
private void guestAgentIsDownAndBalloonInfalted(Guid vmId) {
    Integer currentVal = vmsWithUncontrolledBalloon.get(vmId);
    if (currentVal == null) {
        vmsWithUncontrolledBalloon.put(vmId, 1);
    } else {
        vmsWithUncontrolledBalloon.put(vmId, currentVal + 1);
        if (currentVal >= Config.<Integer>getValue(ConfigValues.IterationsWithBalloonProblem)) {
            AuditLogableBase auditLogable = new AuditLogableBase();
            auditLogable.setVmId(vmId);
            AuditLogDirector.log(auditLogable, AuditLogType.VM_BALLOON_DRIVER_UNCONTROLLED);
            vmsWithUncontrolledBalloon.put(vmId, 0);
        }
    }
}
#end_block

#method_before
// add the vm to the list of vms with balloon driver problem or increment its counter
private void vmBalloonDriverIsRequestedAndUnavailable(Guid vmId) {
    Integer currentVal = vmsWithBalloonDriverProblem.get(vmId);
    if (currentVal == null) {
        vmsWithBalloonDriverProblem.put(vmId, 1);
    } else {
        vmsWithBalloonDriverProblem.put(vmId, currentVal + 1);
        if (currentVal >= Config.<Integer>GetValue(ConfigValues.IterationsWithBalloonProblem)) {
            AuditLogableBase auditLogable = new AuditLogableBase();
            auditLogable.setVmId(vmId);
            AuditLogDirector.log(auditLogable, AuditLogType.VM_BALLOON_DRIVER_ERROR);
            vmsWithBalloonDriverProblem.put(vmId, 0);
        }
    }
}
#method_after
// add the vm to the list of vms with balloon driver problem or increment its counter
private void vmBalloonDriverIsRequestedAndUnavailable(Guid vmId) {
    Integer currentVal = vmsWithBalloonDriverProblem.get(vmId);
    if (currentVal == null) {
        vmsWithBalloonDriverProblem.put(vmId, 1);
    } else {
        vmsWithBalloonDriverProblem.put(vmId, currentVal + 1);
        if (currentVal >= Config.<Integer>getValue(ConfigValues.IterationsWithBalloonProblem)) {
            AuditLogableBase auditLogable = new AuditLogableBase();
            auditLogable.setVmId(vmId);
            AuditLogDirector.log(auditLogable, AuditLogType.VM_BALLOON_DRIVER_ERROR);
            vmsWithBalloonDriverProblem.put(vmId, 0);
        }
    }
}
#end_block

#method_before
private void removeVmsFromCache(List<VM> running) {
    Guid vmGuid;
    for (VM vmToRemove : _vmDict.values()) {
        if (running.contains(vmToRemove)) {
            continue;
        }
        proceedVmBeforeDeletion(vmToRemove, null);
        boolean isInMigration = false;
        if (vmToRemove.getStatus() == VMStatus.MigratingFrom) {
            isInMigration = true;
            handOverVM(vmToRemove);
        } else {
            clearVm(vmToRemove, VmExitStatus.Error, String.format("Could not find VM %s on host, assuming it went down unexpectedly", vmToRemove.getName()));
        }
        log.infoFormat("vm {0} running in db and not running in vds - add to rerun treatment. vds {1}", vmToRemove.getName(), _vds.getName());
        vmGuid = vmToRemove.getId();
        if (!isInMigration && !_vmsToRerun.contains(vmGuid) && ResourceManager.getInstance().IsVmInAsyncRunningList(vmGuid)) {
            _vmsToRerun.add(vmGuid);
        } else // or reported from vdsm with error code
        if (vmToRemove.isAutoStartup() && !_autoVmsToRun.contains(vmGuid) && (!_runningVms.containsKey(vmGuid) || (_runningVms.containsKey(vmGuid) && _runningVms.get(vmGuid).getVmDynamic().getExitStatus() != VmExitStatus.Normal))) {
            _autoVmsToRun.add(vmGuid);
        }
    }
}
#method_after
private void removeVmsFromCache(List<VM> running) {
    Guid vmGuid;
    for (VM vmToRemove : _vmDict.values()) {
        if (running.contains(vmToRemove)) {
            continue;
        }
        proceedVmBeforeDeletion(vmToRemove, null);
        boolean isInMigration = false;
        if (vmToRemove.getStatus() == VMStatus.MigratingFrom) {
            isInMigration = true;
            handOverVM(vmToRemove);
        } else {
            clearVm(vmToRemove, VmExitStatus.Error, String.format("Could not find VM %s on host, assuming it went down unexpectedly", vmToRemove.getName()));
        }
        log.infoFormat("VM {0} ({1}) is running in db and not running in VDS {2}", vmToRemove.getName(), vmToRemove.getId(), _vds.getName());
        vmGuid = vmToRemove.getId();
        if (!isInMigration && !_vmsToRerun.contains(vmGuid) && ResourceManager.getInstance().IsVmInAsyncRunningList(vmGuid)) {
            _vmsToRerun.add(vmGuid);
            log.infoFormat("add VM {0} to rerun treatment", vmToRemove.getName());
        } else // or reported from vdsm with error code
        if (vmToRemove.isAutoStartup() && !_autoVmsToRun.contains(vmGuid) && (!_runningVms.containsKey(vmGuid) || (_runningVms.containsKey(vmGuid) && _runningVms.get(vmGuid).getVmDynamic().getExitStatus() != VmExitStatus.Normal))) {
            _autoVmsToRun.add(vmGuid);
            log.infoFormat("add VM {0} to HA rerun treatment", vmToRemove.getName());
        }
    }
}
#end_block

#method_before
private void refreshCommitedMemory() {
    Integer memCommited = _vds.getGuestOverhead();
    int vmsCoresCount = 0;
    for (VM vm : _vmDict.values()) {
        memCommited += vm.getVmMemSizeMb();
        memCommited += _vds.getGuestOverhead();
        vmsCoresCount += vm.getNumOfCpus();
    }
    if (memCommited == null || !memCommited.equals(_vds.getMemCommited())) {
        _vds.setMemCommited(memCommited);
        _saveVdsDynamic = true;
    }
    if (_vds.getVmsCoresCount() == null || !_vds.getVmsCoresCount().equals(vmsCoresCount)) {
        _vds.setVmsCoresCount(vmsCoresCount);
        _saveVdsDynamic = true;
    }
    if (_vds.getPendingVcpusCount() != 0 && !runningVmsInTransition) {
        _vds.setPendingVcpusCount(0);
        _saveVdsDynamic = true;
    }
    if (_vds.getPendingVmemSize() != 0 && !runningVmsInTransition) {
        // set also vmem size to 0
        _vds.setPendingVmemSize(0);
        _saveVdsDynamic = true;
    }
}
#method_after
private void refreshCommitedMemory() {
    Integer memCommited = _vds.getGuestOverhead();
    int vmsCoresCount = 0;
    for (VM vm : _vmDict.values()) {
        memCommited += vm.getVmMemSizeMb();
        memCommited += _vds.getGuestOverhead();
        vmsCoresCount += vm.getNumOfCpus();
    }
    if (memCommited == null || !memCommited.equals(_vds.getMemCommited())) {
        _vds.setMemCommited(memCommited);
        _saveVdsDynamic = true;
    }
    if (_vds.getVmsCoresCount() == null || !_vds.getVmsCoresCount().equals(vmsCoresCount)) {
        _vds.setVmsCoresCount(vmsCoresCount);
        _saveVdsDynamic = true;
    }
}
#end_block

#method_before
private boolean updateVmRunTimeInfo(RefObject<VM> vmToUpdate, VmDynamic vmNewDynamicData) {
    boolean returnValue = false;
    if (vmToUpdate.argvalue == null) {
        vmToUpdate.argvalue = getDbFacade().getVmDao().get(vmNewDynamicData.getId());
        // if vm exists in db update info
        if (vmToUpdate.argvalue != null) {
            // TODO: This is done to keep consistency with VmDAO.getById(Guid).
            // It should probably be removed, but some research is required.
            vmToUpdate.argvalue.setInterfaces(getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vmToUpdate.argvalue.getId()));
            _vmDict.put(vmToUpdate.argvalue.getId(), vmToUpdate.argvalue);
            if (vmNewDynamicData.getStatus() == VMStatus.Up) {
                if (!_succededToRunVms.contains(vmToUpdate.argvalue.getId())) {
                    _succededToRunVms.add(vmToUpdate.argvalue.getId());
                }
            }
        }
    }
    if (vmToUpdate.argvalue != null) {
        // check if dynamic data changed - update cache and DB
        List<String> props = ObjectIdentityChecker.GetChangedFields(vmToUpdate.argvalue.getDynamicData(), vmNewDynamicData);
        // dont check fields:
        props.remove("vmHost");
        props.remove("runOnVds");
        props.remove("disks");
        props.remove("bootSequence");
        props.remove("lastVdsRunOn");
        props.remove("hibernationVolHandle");
        props.remove("exitMessage");
        props.remove("lastStartTime");
        props.remove("consoleUserId");
        props.remove("consoleCurrentUserName");
        props.remove("runOnce");
        props.remove("cpuName");
        if (vmNewDynamicData.getStatus() != VMStatus.Up) {
            props.remove("appList");
            vmNewDynamicData.setAppList(vmToUpdate.argvalue.getAppList());
        } else if (props.contains("status") && vmToUpdate.argvalue.getDynamicData().getStatus() == VMStatus.PreparingForHibernate) {
            vmNewDynamicData.setStatus(VMStatus.PreparingForHibernate);
            props.remove("status");
        }
        // if anything else changed
        if (props.size() > 0) {
            vmToUpdate.argvalue.updateRunTimeDynamicData(vmNewDynamicData, _vds.getId(), _vds.getName());
            returnValue = true;
        }
    } else {
        // line.
        if (Config.<Boolean>GetValue(ConfigValues.DebugTimerLogging)) {
            log.info("VDS::UpdateVmRunTimeInfo Error: found VM on a VDS that is not in the database!");
        }
    }
    return returnValue;
}
#method_after
private boolean updateVmRunTimeInfo(RefObject<VM> vmToUpdate, VmDynamic vmNewDynamicData) {
    boolean returnValue = false;
    if (vmToUpdate.argvalue == null) {
        vmToUpdate.argvalue = getDbFacade().getVmDao().get(vmNewDynamicData.getId());
        // if vm exists in db update info
        if (vmToUpdate.argvalue != null) {
            // TODO: This is done to keep consistency with VmDAO.getById(Guid).
            // It should probably be removed, but some research is required.
            vmToUpdate.argvalue.setInterfaces(getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vmToUpdate.argvalue.getId()));
            _vmDict.put(vmToUpdate.argvalue.getId(), vmToUpdate.argvalue);
            if (vmNewDynamicData.getStatus() == VMStatus.Up) {
                if (!_succededToRunVms.contains(vmToUpdate.argvalue.getId())) {
                    _succededToRunVms.add(vmToUpdate.argvalue.getId());
                }
            }
        }
    }
    if (vmToUpdate.argvalue != null) {
        // check if dynamic data changed - update cache and DB
        List<String> props = ObjectIdentityChecker.GetChangedFields(vmToUpdate.argvalue.getDynamicData(), vmNewDynamicData);
        // dont check fields:
        props.remove("vmHost");
        props.remove("runOnVds");
        props.remove("disks");
        props.remove("bootSequence");
        props.remove("lastVdsRunOn");
        props.remove("hibernationVolHandle");
        props.remove("exitMessage");
        props.remove("lastStartTime");
        props.remove("consoleUserId");
        props.remove("consoleCurrentUserName");
        props.remove("runOnce");
        props.remove("cpuName");
        if (vmNewDynamicData.getStatus() != VMStatus.Up) {
            props.remove("appList");
            vmNewDynamicData.setAppList(vmToUpdate.argvalue.getAppList());
        } else if (props.contains("status") && vmToUpdate.argvalue.getDynamicData().getStatus() == VMStatus.PreparingForHibernate) {
            vmNewDynamicData.setStatus(VMStatus.PreparingForHibernate);
            props.remove("status");
        }
        // if anything else changed
        if (props.size() > 0) {
            vmToUpdate.argvalue.updateRunTimeDynamicData(vmNewDynamicData, _vds.getId(), _vds.getName());
            returnValue = true;
        }
    } else {
        // line.
        if (Config.<Boolean>getValue(ConfigValues.DebugTimerLogging)) {
            log.info("VDS::UpdateVmRunTimeInfo Error: found VM on a VDS that is not in the database!");
        }
    }
    return returnValue;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VdcReturnValueBase result = getBackend().runAction(VdcActionType.PersistentSetupNetworks, new AddNetworksByLabelParametersBuilder().buildParameters(getNic(), getLabel()));
    if (result.getSucceeded()) {
        getReturnValue().setActionReturnValue(getLabel());
    } else {
        propagateFailure(result);
    }
    setSucceeded(result.getSucceeded());
}
#method_after
@Override
protected void executeCommand() {
    VdcReturnValueBase result = getBackend().runInternalAction(VdcActionType.PersistentSetupNetworks, new AddNetworksByLabelParametersBuilder().buildParameters(getNic(), getLabel()));
    if (result.getSucceeded()) {
        getReturnValue().setActionReturnValue(getLabel());
    } else {
        propagateFailure(result);
    }
    setSucceeded(result.getSucceeded());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getNic() == null) {
        return failCanDoAction(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS);
    }
    if (getNic().getLabels() != null && getNic().getLabels().contains(getParameters().getLabel())) {
        return failCanDoAction(VdcBllMessages.INTERFACE_ALREADY_LABELED);
    }
    if (StringUtils.isNotEmpty(getNic().getBondName()) || NetworkUtils.isVlan(getNic())) {
        return failCanDoAction(VdcBllMessages.IMPROPER_INTERFACE_IS_LABELED);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getNic() == null) {
        return failCanDoAction(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST);
    }
    if (getNic().getLabels() != null && getNic().getLabels().contains(getParameters().getLabel())) {
        return failCanDoAction(VdcBllMessages.INTERFACE_ALREADY_LABELED);
    }
    if (!ValidationUtils.validateInputs(getValidationGroups(), getNic()).isEmpty()) {
        return failCanDoAction(VdcBllMessages.IMPROPER_INTERFACE_IS_LABELED);
    }
    return true;
}
#end_block

#method_before
public SetupNetworksParameters buildParameters(VdsNetworkInterface nic, String label) {
    SetupNetworksParameters parameters = createSetupNetworksParameters(nic.getVdsId());
    List<Network> labeledNetworks = getNetworkDAO().getAllByLabelForCluster(label, getVds().getVdsGroupId());
    Set<Network> networkToAdd = getNetworksToConfigure(parameters.getInterfaces(), labeledNetworks);
    VdsNetworkInterface nicToConfigure = getNicToConfigure(parameters.getInterfaces(), nic.getId());
    // add label to nic to be passed to setup-networks
    labelConfiguredNic(label, nicToConfigure);
    // configure networks on the nic
    parameters.getInterfaces().addAll(configureNetworks(nicToConfigure, networkToAdd));
    return parameters;
}
#method_after
public SetupNetworksParameters buildParameters(VdsNetworkInterface nic, String label) {
    SetupNetworksParameters parameters = createSetupNetworksParameters(nic.getVdsId());
    List<Network> labeledNetworks = getNetworkDAO().getAllByLabelForCluster(label, getVds().getVdsGroupId());
    Set<Network> networkToAdd = getNetworksToConfigure(parameters.getInterfaces(), labeledNetworks);
    VdsNetworkInterface nicToConfigure = getNicToConfigure(parameters.getInterfaces(), nic.getId());
    if (nicToConfigure == null) {
        throw new VdcBLLException(VdcBllErrors.LABELED_NETWORK_INTERFACE_NOT_FOUND);
    }
    // add label to nic to be passed to setup-networks
    labelConfiguredNic(label, nicToConfigure);
    // configure networks on the nic
    parameters.getInterfaces().addAll(configureNetworks(nicToConfigure, networkToAdd));
    return parameters;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VdcReturnValueBase result = getBackend().runAction(VdcActionType.PersistentSetupNetworks, new RemoveNetworksByLabelParametersBuilder().buildParameters(getNic(), getLabel()));
    if (!result.getSucceeded()) {
        propagateFailure(result);
    }
    setSucceeded(result.getSucceeded());
}
#method_after
@Override
protected void executeCommand() {
    VdcReturnValueBase result = getBackend().runInternalAction(VdcActionType.PersistentSetupNetworks, new RemoveNetworksByLabelParametersBuilder().buildParameters(getNic(), getLabel()));
    if (!result.getSucceeded()) {
        propagateFailure(result);
    }
    setSucceeded(result.getSucceeded());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getNic() == null) {
        return failCanDoAction(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS);
    }
    if (getNic().getLabels() == null || !getNic().getLabels().contains(getParameters().getLabel())) {
        return failCanDoAction(VdcBllMessages.INTERFACE_NOT_LABELED);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getNic() == null) {
        return failCanDoAction(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST);
    }
    if (getNic().getLabels() == null || !getNic().getLabels().contains(getParameters().getLabel())) {
        return failCanDoAction(VdcBllMessages.INTERFACE_NOT_LABELED);
    }
    return true;
}
#end_block

#method_before
public SetupNetworksParameters buildParameters(VdsNetworkInterface nic, String label) {
    SetupNetworksParameters parameters = createSetupNetworksParameters(nic.getVdsId());
    List<Network> labeledNetworks = getNetworkDAO().getAllByLabelForCluster(label, getVds().getVdsGroupId());
    VdsNetworkInterface nicToConfigure = getNicToConfigure(parameters.getInterfaces(), nic.getId());
    Set<VdsNetworkInterface> nicsToRemove = getNicsToRemove(parameters.getInterfaces(), labeledNetworks, nicToConfigure);
    // remove the label from the nic to be passed to setup-networks
    unlabelConfiguredNic(label, nicToConfigure);
    // remove the networks from all of the nics
    parameters.getInterfaces().removeAll(nicsToRemove);
    return parameters;
}
#method_after
public SetupNetworksParameters buildParameters(VdsNetworkInterface nic, String label) {
    SetupNetworksParameters parameters = createSetupNetworksParameters(nic.getVdsId());
    List<Network> labeledNetworks = getNetworkDAO().getAllByLabelForCluster(label, getVds().getVdsGroupId());
    VdsNetworkInterface nicToConfigure = getNicToConfigure(parameters.getInterfaces(), nic.getId());
    if (nicToConfigure == null) {
        throw new VdcBLLException(VdcBllErrors.LABELED_NETWORK_INTERFACE_NOT_FOUND);
    }
    Set<VdsNetworkInterface> nicsToRemove = getNicsToRemove(parameters.getInterfaces(), labeledNetworks, nicToConfigure);
    // remove the label from the nic to be passed to setup-networks
    unlabelConfiguredNic(label, nicToConfigure);
    // remove the networks from all of the nics
    parameters.getInterfaces().removeAll(nicsToRemove);
    return parameters;
}
#end_block

#method_before
private void unlabelConfiguredNic(String label, VdsNetworkInterface nicToConfigure) {
    getNic().getLabels().remove(getLabel());
}
#method_after
private void unlabelConfiguredNic(String label, VdsNetworkInterface nicToConfigure) {
    if (nicToConfigure.getLabels() != null) {
        nicToConfigure.getLabels().remove(getLabel());
    }
}
#end_block

#method_before
@Override
public String add(Network network) {
    NetworkForCreate networkForCreate = new NetworkForCreate();
    networkForCreate.setAdminStateUp(true);
    networkForCreate.setName(network.getName());
    if (network.getLabel() != null) {
        networkForCreate.setProviderPhysicalNetwork(network.getLabel());
        if (network.getVlanId() == null) {
            networkForCreate.setProviderNetworkType(FLAT_NETWORK);
        } else {
            networkForCreate.setProviderNetworkType(VLAN_NETWORK);
            networkForCreate.setProviderSegmentationId(network.getVlanId());
        }
    }
    if (!provider.isRequiringAuthentication()) {
        networkForCreate.setTenantId(DEVICE_OWNER);
    }
    try {
        com.woorea.openstack.quantum.model.Network createdNetwork = getClient().networks().create(networkForCreate).execute();
        return createdNetwork.getId();
    } catch (RuntimeException e) {
        throw new VdcBLLException(VdcBllErrors.PROVIDER_FAILURE, e);
    }
}
#method_after
@Override
public String add(Network network) {
    NetworkForCreate networkForCreate = new NetworkForCreate();
    networkForCreate.setAdminStateUp(true);
    networkForCreate.setName(network.getName());
    if (network.getLabel() != null) {
        networkForCreate.setProviderPhysicalNetwork(network.getLabel());
        if (NetworkUtils.isVlan(network)) {
            networkForCreate.setProviderNetworkType(VLAN_NETWORK);
            networkForCreate.setProviderSegmentationId(network.getVlanId());
        } else {
            networkForCreate.setProviderNetworkType(FLAT_NETWORK);
        }
    }
    if (!provider.isRequiringAuthentication()) {
        networkForCreate.setTenantId(DEVICE_OWNER);
    }
    try {
        com.woorea.openstack.quantum.model.Network createdNetwork = getClient().networks().create(networkForCreate).execute();
        return createdNetwork.getId();
    } catch (RuntimeException e) {
        throw new VdcBLLException(VdcBllErrors.PROVIDER_FAILURE, e);
    }
}
#end_block

#method_before
@Override
public Map<String, String> allocate(Network network, VnicProfile vnicProfile, VmNic nic) {
    try {
        Port port = locatePort(nic);
        List<String> securityGroups = getSecurityGroups(vnicProfile);
        if (port == null) {
            com.woorea.openstack.quantum.model.Network externalNetwork = getClient().networks().show(network.getProvidedBy().getExternalId()).execute();
            Port portForCreate = new Port();
            portForCreate.setAdminStateUp(true);
            portForCreate.setName(nic.getName());
            portForCreate.setTenantId(externalNetwork.getTenantId());
            portForCreate.setMacAddress(nic.getMacAddress());
            portForCreate.setNetworkId(externalNetwork.getId());
            portForCreate.setDeviceOwner(DEVICE_OWNER);
            portForCreate.setDeviceId(nic.getId().toString());
            portForCreate.setSecurityGroups(securityGroups);
            port = getClient().ports().create(portForCreate).execute();
        } else if (securityGroupsChanged(port.getSecurityGroups(), securityGroups)) {
            Port portForUpdate = new Port();
            portForUpdate.setId(port.getId());
            portForUpdate.setSecurityGroups(securityGroups);
            port = getClient().ports().update(portForUpdate).execute();
        }
        Map<String, String> runtimeProperties = new HashMap<>();
        runtimeProperties.put("vnic_id", port.getId());
        runtimeProperties.put("provider_type", provider.getType().name());
        runtimeProperties.put("plugin_type", provider.getAdditionalProperties().getPluginType());
        return runtimeProperties;
    } catch (RuntimeException e) {
        throw new VdcBLLException(VdcBllErrors.PROVIDER_FAILURE, e);
    }
}
#method_after
@Override
public Map<String, String> allocate(Network network, VnicProfile vnicProfile, VmNic nic) {
    try {
        Port port = locatePort(nic);
        List<String> securityGroups = getSecurityGroups(vnicProfile);
        if (port == null) {
            com.woorea.openstack.quantum.model.Network externalNetwork = getClient().networks().show(network.getProvidedBy().getExternalId()).execute();
            Port portForCreate = new Port();
            portForCreate.setAdminStateUp(true);
            portForCreate.setName(nic.getName());
            portForCreate.setTenantId(externalNetwork.getTenantId());
            portForCreate.setMacAddress(nic.getMacAddress());
            portForCreate.setNetworkId(externalNetwork.getId());
            portForCreate.setDeviceOwner(DEVICE_OWNER);
            portForCreate.setDeviceId(nic.getId().toString());
            portForCreate.setSecurityGroups(securityGroups);
            port = getClient().ports().create(portForCreate).execute();
        } else if (securityGroupsChanged(port.getSecurityGroups(), securityGroups)) {
            Port portForUpdate = new PortForUpdate();
            portForUpdate.setId(port.getId());
            portForUpdate.setSecurityGroups(securityGroups);
            port = getClient().ports().update(portForUpdate).execute();
        }
        Map<String, String> runtimeProperties = new HashMap<>();
        runtimeProperties.put("vnic_id", port.getId());
        runtimeProperties.put("provider_type", provider.getType().name());
        runtimeProperties.put("plugin_type", provider.getAdditionalProperties().getPluginType());
        if (port.getSecurityGroups() != null && !port.getSecurityGroups().isEmpty()) {
            runtimeProperties.put("security_groups", StringUtils.join(port.getSecurityGroups(), ','));
        }
        return runtimeProperties;
    } catch (RuntimeException e) {
        throw new VdcBLLException(VdcBllErrors.PROVIDER_FAILURE, e);
    }
}
#end_block

#method_before
private boolean securityGroupsChanged(List<String> existingSecurityGroups, List<String> desiredSecurityGroups) {
    return !CollectionUtils.isEqualCollection(existingSecurityGroups == null ? Collections.emptyList() : existingSecurityGroups, desiredSecurityGroups);
}
#method_after
private boolean securityGroupsChanged(List<String> existingSecurityGroups, List<String> desiredSecurityGroups) {
    existingSecurityGroups = existingSecurityGroups == null ? NO_SECURITY_GROUPS : existingSecurityGroups;
    return (desiredSecurityGroups == DEFAULT_SECURITY_GROUP && existingSecurityGroups.isEmpty()) || (desiredSecurityGroups != DEFAULT_SECURITY_GROUP && !CollectionUtils.isEqualCollection(existingSecurityGroups, desiredSecurityGroups));
}
#end_block

#method_before
private List<String> getSecurityGroups(VnicProfile vnicProfile) {
    Map<String, String> customProperties = vnicProfile.getCustomProperties();
    if (customProperties.containsKey(SECURITY_GROUPS_PROPERTY)) {
        return Arrays.asList(customProperties.get(SECURITY_GROUPS_PROPERTY).split(",\\w*"));
    }
    return Collections.emptyList();
}
#method_after
private List<String> getSecurityGroups(VnicProfile vnicProfile) {
    Map<String, String> customProperties = vnicProfile.getCustomProperties();
    if (customProperties.containsKey(SECURITY_GROUPS_PROPERTY)) {
        String securityGroupsString = customProperties.get(SECURITY_GROUPS_PROPERTY);
        if (StringUtils.isEmpty(securityGroupsString)) {
            return NO_SECURITY_GROUPS;
        }
        return Arrays.asList(securityGroupsString.split(",\\w*"));
    }
    return DEFAULT_SECURITY_GROUP;
}
#end_block

#method_before
@Override
public String getName() {
    return this.name;
}
#method_after
@Override
public String getName() {
    return name;
}
#end_block

#method_before
@Override
public NetworkView getEntity() {
    return (NetworkView) ((super.getEntity() instanceof NetworkView) ? super.getEntity() : null);
}
#method_after
@Override
public NetworkView getEntity() {
    return (NetworkView) super.getEntity();
}
#end_block

#method_before
@Override
protected void syncSearch() {
    if (getEntity() == null) {
        return;
    }
    AsyncQuery asyncQuery = new AsyncQuery();
    asyncQuery.setModel(this);
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        @SuppressWarnings("unchecked")
        public void onSuccess(Object model, Object returnValue) {
            NetworkExternalSubnetListModel.this.setItems((List<ExternalSubnet>) returnValue);
        }
    };
    AsyncDataProvider.getExternalSubnetsByNetworkId(asyncQuery, getEntity().getId());
}
#method_after
@Override
protected void syncSearch() {
    if (getEntity() == null) {
        return;
    }
    super.syncSearch(VdcQueryType.GetExternalSubnetsOnProviderByNetwork, new IdQueryParameters(getEntity().getId()));
}
#end_block

#method_before
@Override
protected void updateDetailsAvailability() {
    super.updateDetailsAvailability();
    NetworkView network = (NetworkView) getSelectedItem();
    networkExternalSubnetListModel.setIsAvailable(network.isExternal());
}
#method_after
@Override
protected void updateDetailsAvailability() {
    super.updateDetailsAvailability();
    NetworkView network = (NetworkView) getSelectedItem();
    networkExternalSubnetListModel.setIsAvailable(network != null && network.isExternal());
}
#end_block

#method_before
private void refreshVdsRunTimeInfo() {
    boolean isVdsUpOrGoingToMaintenance = _vds.getStatus() == VDSStatus.Up || _vds.getStatus() == VDSStatus.PreparingForMaintenance || _vds.getStatus() == VDSStatus.Error || _vds.getStatus() == VDSStatus.NonOperational;
    try {
        if (isVdsUpOrGoingToMaintenance) {
            // check if its time for statistics refresh
            if (_vdsManager.getRefreshStatistics() || _vds.getStatus() == VDSStatus.PreparingForMaintenance) {
                refreshVdsStats();
                ResourceManager.getInstance().getEventListener().updateSchedulingStats(_vds);
            } else {
            /**
             * TODO: Omer if vds team will not implement events to 4.2 please call here to refreshVdsStats -
             * refresh dynamic data
             */
            }
        } else {
            // refresh dynamic data
            final AtomicBoolean processHardwareNeededAtomic = new AtomicBoolean();
            VDSStatus refreshReturnStatus = _vdsManager.refreshCapabilities(processHardwareNeededAtomic, _vds);
            processHardwareCapsNeeded = processHardwareNeededAtomic.get();
            refreshedCapabilities = true;
            if (refreshReturnStatus != VDSStatus.NonOperational) {
                _vdsManager.setStatus(VDSStatus.Up, _vds);
            }
            _saveVdsDynamic = true;
        }
        beforeFirstRefreshTreatment(isVdsUpOrGoingToMaintenance);
        refreshVmStats();
    } catch (VDSRecoveringException e) {
        // move vds to maintenance
        if (_vds.getStatus() != VDSStatus.PreparingForMaintenance) {
            throw e;
        }
    }
    moveVDSToMaintenanceIfNeeded();
}
#method_after
private void refreshVdsRunTimeInfo() {
    boolean isVdsUpOrGoingToMaintenance = _vds.getStatus() == VDSStatus.Up || _vds.getStatus() == VDSStatus.PreparingForMaintenance || _vds.getStatus() == VDSStatus.Error || _vds.getStatus() == VDSStatus.NonOperational;
    try {
        if (isVdsUpOrGoingToMaintenance) {
            // check if its time for statistics refresh
            if (_vdsManager.getRefreshStatistics() || _vds.getStatus() == VDSStatus.PreparingForMaintenance) {
                refreshVdsStats();
            } else {
            /**
             * TODO: Omer if vds team will not implement events to 4.2 please call here to refreshVdsStats -
             * refresh dynamic data
             */
            }
        } else {
            // refresh dynamic data
            final AtomicBoolean processHardwareNeededAtomic = new AtomicBoolean();
            VDSStatus refreshReturnStatus = _vdsManager.refreshCapabilities(processHardwareNeededAtomic, _vds);
            processHardwareCapsNeeded = processHardwareNeededAtomic.get();
            refreshedCapabilities = true;
            if (refreshReturnStatus != VDSStatus.NonOperational) {
                _vdsManager.setStatus(VDSStatus.Up, _vds);
            }
            _saveVdsDynamic = true;
        }
        beforeFirstRefreshTreatment(isVdsUpOrGoingToMaintenance);
        refreshVmStats();
    } catch (VDSRecoveringException e) {
        // move vds to maintenance
        if (_vds.getStatus() != VDSStatus.PreparingForMaintenance) {
            throw e;
        }
    }
    moveVDSToMaintenanceIfNeeded();
}
#end_block

#method_before
private void refreshVdsStats() {
    if (Config.<Boolean>getValue(ConfigValues.DebugTimerLogging)) {
        log.debugFormat("vdsManager::refreshVdsStats entered, vds = {0} : {1}", _vds.getId(), _vds.getName());
    }
    // get statistics data, images checks and vm_count data (dynamic)
    GetStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase> vdsBrokerCommand = new GetStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    vdsBrokerCommand.execute();
    if (!vdsBrokerCommand.getVDSReturnValue().getSucceeded() && vdsBrokerCommand.getVDSReturnValue().getExceptionObject() != null) {
        VDSNetworkException ex = (VDSNetworkException) ((vdsBrokerCommand.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException) ? vdsBrokerCommand.getVDSReturnValue().getExceptionObject() : null);
        if (ex != null) {
            if (_vdsManager.handleNetworkException(ex, _vds)) {
                _saveVdsDynamic = true;
            }
            log.errorFormat("vds::refreshVdsStats Failed getVdsStats,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), ExceptionUtils.getMessage(ex));
        } else {
            log.errorFormat("vds::refreshVdsStats Failed getVdsStats,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), vdsBrokerCommand.getVDSReturnValue().getExceptionString());
        }
        throw vdsBrokerCommand.getVDSReturnValue().getExceptionObject();
    }
    // save also dynamic because vm_count data and image_check getting with
    // statistics data
    // TODO: omer- one day remove dynamic save when possible please check if vdsDynamic changed before save
    _saveVdsDynamic = true;
    _saveVdsStatistics = true;
    alertIfLowDiskSpaceOnHost();
    checkVdsInterfaces();
    if (Config.<Boolean>getValue(ConfigValues.DebugTimerLogging)) {
        log.debugFormat("vds::refreshVdsStats\n{0}", toString());
    }
}
#method_after
private void refreshVdsStats() {
    if (Config.<Boolean>getValue(ConfigValues.DebugTimerLogging)) {
        log.debugFormat("vdsManager::refreshVdsStats entered, vds = {0} : {1}", _vds.getId(), _vds.getName());
    }
    // get statistics data, images checks and vm_count data (dynamic)
    GetStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase> vdsBrokerCommand = new GetStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    vdsBrokerCommand.execute();
    ResourceManager.getInstance().getEventListener().updateSchedulingStats(_vds);
    if (!vdsBrokerCommand.getVDSReturnValue().getSucceeded() && vdsBrokerCommand.getVDSReturnValue().getExceptionObject() != null) {
        VDSNetworkException ex = (VDSNetworkException) ((vdsBrokerCommand.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException) ? vdsBrokerCommand.getVDSReturnValue().getExceptionObject() : null);
        if (ex != null) {
            if (_vdsManager.handleNetworkException(ex, _vds)) {
                _saveVdsDynamic = true;
            }
            log.errorFormat("vds::refreshVdsStats Failed getVdsStats,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), ExceptionUtils.getMessage(ex));
        } else {
            log.errorFormat("vds::refreshVdsStats Failed getVdsStats,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getName(), vdsBrokerCommand.getVDSReturnValue().getExceptionString());
        }
        throw vdsBrokerCommand.getVDSReturnValue().getExceptionObject();
    }
    // save also dynamic because vm_count data and image_check getting with
    // statistics data
    // TODO: omer- one day remove dynamic save when possible please check if vdsDynamic changed before save
    _saveVdsDynamic = true;
    _saveVdsStatistics = true;
    alertIfLowDiskSpaceOnHost();
    checkVdsInterfaces();
    if (Config.<Boolean>getValue(ConfigValues.DebugTimerLogging)) {
        log.debugFormat("vds::refreshVdsStats\n{0}", toString());
    }
}
#end_block

#method_before
@Override
public EventResult masterDomainNotOperational(Guid storageDomainId, Guid storagePoolId, boolean isReconstructToInactiveDomains) {
    VdcActionParametersBase parameters = new ReconstructMasterParameters(storagePoolId, storageDomainId, true, isReconstructToInactiveDomains);
    boolean isSucceeded = Backend.getInstance().runInternalAction(VdcActionType.ReconstructMasterDomain, parameters, ExecutionHandler.createInternalJobContext()).getSucceeded();
    return new EventResult(isSucceeded, EventType.RECONSTRUCT);
}
#method_after
@Override
public EventResult masterDomainNotOperational(Guid storageDomainId, Guid storagePoolId, boolean isReconstructToInactiveDomains, boolean canReconstructToCurrentMaster) {
    VdcActionParametersBase parameters = new ReconstructMasterParameters(storagePoolId, storageDomainId, true, isReconstructToInactiveDomains, canReconstructToCurrentMaster);
    boolean isSucceeded = Backend.getInstance().runInternalAction(VdcActionType.ReconstructMasterDomain, parameters, ExecutionHandler.createInternalJobContext()).getSucceeded();
    return new EventResult(isSucceeded, EventType.RECONSTRUCT);
}
#end_block

#method_before
@Override
public void processOnClientIpChange(final VDS vds, final Guid vmId) {
    final VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(vmId);
    // (this happened when user close the console to spice/vnc)
    if (StringUtils.isEmpty(vmDynamic.getClientIp())) {
        vmDynamic.setConsoleCurrentUserName(null);
        DbFacade.getInstance().getVmDynamicDao().update(vmDynamic);
    }
}
#method_after
@Override
public void processOnClientIpChange(final VDS vds, final Guid vmId) {
    final VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(vmId);
    final AuditLogableBase event = new AuditLogableBase();
    event.setVmId(vmId);
    event.setUserName(vmDynamic.getConsoleCurrentUserName());
    // (this happened when user close the console to spice/vnc)
    if (StringUtils.isEmpty(vmDynamic.getClientIp())) {
        vmDynamic.setConsoleCurrentUserName(null);
        DbFacade.getInstance().getVmDynamicDao().update(vmDynamic);
        AuditLogDirector.log(event, AuditLogType.VM_CONSOLE_DISCONNECTED);
    } else {
        AuditLogDirector.log(event, AuditLogType.VM_CONSOLE_CONNECTED);
    }
}
#end_block

#method_before
@Override
public void processOnVmPoweringUp(Guid vds_id, Guid vmid, String display_ip, int display_port) {
    IVdsAsyncCommand command = Backend.getInstance().getResourceManager().GetAsyncCommandForVm(vmid);
    if (command != null) {
        command.onPowerringUp();
        if (command.getAutoStart() && command.getAutoStartVdsId() != null) {
            try {
                String otp64 = Ticketing.generateOTP();
                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmTicket, new SetVmTicketVDSCommandParameters(vds_id, vmid, otp64, 60, "", Guid.Empty));
                log.infoFormat("VdsEventListener.ProcessOnVmPoweringUp - Auto start logic, starting spice to vm - {0} ", vmid);
                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.StartSpice, new StartSpiceVDSCommandParameters(command.getAutoStartVdsId(), display_ip, display_port, otp64));
            } catch (RuntimeException ex) {
                log.errorFormat("VdsEventListener.ProcessOnVmPoweringUp - failed to start spice on VM - {0} - {1} - {2}", vmid, ex.getMessage(), ex.getStackTrace());
            }
        }
    }
}
#method_after
@Override
public void processOnVmPoweringUp(Guid vds_id, Guid vmid, String display_ip, int display_port) {
    IVdsAsyncCommand command = Backend.getInstance().getResourceManager().GetAsyncCommandForVm(vmid);
    /*
         * XXX: command is null after successful migration, because runningSucceeded removes the
         *      MigrateVmCommand instance from the async cache too early.
         *      See the order of succeededToRunVm and processOnVmPoweringUp
         *      in VdsUpdateRunTimeInfo.afterRefreshTreatment
         */
    if (command != null) {
        command.onPowerringUp();
        if (command.getAutoStart() && command.getAutoStartVdsId() != null) {
            try {
                String otp64 = Ticketing.generateOTP();
                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmTicket, new SetVmTicketVDSCommandParameters(vds_id, vmid, otp64, 60, "", Guid.Empty));
                log.infoFormat("VdsEventListener.ProcessOnVmPoweringUp - Auto start logic, starting spice to vm - {0} ", vmid);
                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.StartSpice, new StartSpiceVDSCommandParameters(command.getAutoStartVdsId(), display_ip, display_port, otp64));
            } catch (RuntimeException ex) {
                log.errorFormat("VdsEventListener.ProcessOnVmPoweringUp - failed to start spice on VM - {0} - {1} - {2}", vmid, ex.getMessage(), ex.getStackTrace());
            }
        }
    }
}
#end_block

#method_before
@Override
public void runFailedAutoStartVM(Guid vmId) {
    // We will reuse this because we can generate more than one event:
    final AuditLogableBase event = new AuditLogableBase();
    event.setVmId(vmId);
    // Alert that the virtual machine failed:
    AuditLogDirector.log(event, AuditLogType.HA_VM_FAILED);
    log.infoFormat("Highly Available VM went down. Attempting to restart. VM Name: {0}, VM Id:{1}", event.getVmName(), vmId);
    // Try to start it again:
    final VdcReturnValueBase result = Backend.getInstance().runInternalAction(VdcActionType.RunVm, new RunVmParams(vmId), ExecutionHandler.createInternalJobContext());
    // Alert if the restart fails:
    if (!result.getSucceeded()) {
        AuditLogDirector.log(event, AuditLogType.HA_VM_RESTART_FAILED);
    }
}
#method_after
@Override
public void runFailedAutoStartVM(Guid vmId) {
    // Alert that the virtual machine failed:
    final AuditLogableBase event = new AuditLogableBase();
    event.setVmId(vmId);
    AuditLogDirector.log(event, AuditLogType.HA_VM_FAILED);
    log.infoFormat("Highly Available VM went down. Attempting to restart. VM Name: {0}, VM Id:{1}", event.getVmName(), vmId);
    AutoStartVmsRunner.getInstance().addVmToRun(vmId);
}
#end_block

#method_before
public int getAnonymousHugePages() {
    return this.mVdsDynamic.getAnonymousHugePages();
}
#method_after
public int getAnonymousHugePages() {
    return this.mVdsStatistics.getAnonymousHugePages();
}
#end_block

#method_before
public void setAnonymousHugePages(int value) {
    this.mVdsDynamic.setAnonymousHugePages(value);
}
#method_after
public void setAnonymousHugePages(int value) {
    this.mVdsStatistics.setAnonymousHugePages(value);
}
#end_block

#method_before
public VDSStatus refreshCapabilities(AtomicBoolean processHardwareCapsNeeded, VDS vds) {
    log.debug("GetCapabilitiesVDSCommand started method");
    VDS oldVDS = vds.clone();
    GetCapabilitiesVDSCommand<VdsIdAndVdsVDSCommandParametersBase> vdsBrokerCommand = new GetCapabilitiesVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(vds));
    vdsBrokerCommand.execute();
    if (vdsBrokerCommand.getVDSReturnValue().getSucceeded()) {
        // Verify version capabilities
        HashSet<Version> hostVersions = null;
        Version clusterCompatibility = vds.getVdsGroupCompatibilityVersion();
        if (FeatureSupported.hardwareInfo(clusterCompatibility) && // host and an exception will be raised by VDSM.
        (hostVersions = vds.getSupportedClusterVersionsSet()) != null && hostVersions.contains(clusterCompatibility)) {
            VDSReturnValue ret = ResourceManager.getInstance().runVdsCommand(VDSCommandType.GetHardwareInfo, new VdsIdAndVdsVDSCommandParametersBase(vds));
            if (!ret.getSucceeded()) {
                AuditLogableBase logable = new AuditLogableBase(vds.getId());
                logable.updateCallStackFromThrowable(ret.getExceptionObject());
                AuditLogDirector.log(logable, AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO);
            }
        }
        VDSStatus returnStatus = vds.getStatus();
        NonOperationalReason nonOperationalReason = CollectVdsNetworkDataVDSCommand.persistAndEnforceNetworkCompliance(vds, false, null);
        if (nonOperationalReason != NonOperationalReason.NONE) {
            setIsSetNonOperationalExecuted(true);
            if (returnStatus != VDSStatus.NonOperational) {
                if (log.isDebugEnabled()) {
                    log.debugFormat("refreshCapabilities:GetCapabilitiesVDSCommand vds {0} networks do not match its cluster networks, vds will be moved to NonOperational", vds.getStaticData().getId());
                }
                vds.setStatus(VDSStatus.NonOperational);
                vds.setNonOperationalReason(nonOperationalReason);
                returnStatus = vds.getStatus();
            }
        }
        // We process the software capabilities.
        VDSStatus oldStatus = vds.getStatus();
        monitoringStrategy.processSoftwareCapabilities(vds);
        returnStatus = vds.getStatus();
        if (returnStatus != oldStatus && returnStatus == VDSStatus.NonOperational) {
            setIsSetNonOperationalExecuted(true);
        }
        processHardwareCapsNeeded.set(monitoringStrategy.processHardwareCapabilitiesNeeded(oldVDS, vds));
        return returnStatus;
    } else if (vdsBrokerCommand.getVDSReturnValue().getExceptionObject() != null) {
        // handleNetworkException
        if (vdsBrokerCommand.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException && handleNetworkException((VDSNetworkException) vdsBrokerCommand.getVDSReturnValue().getExceptionObject(), vds)) {
            updateDynamicData(vds.getDynamicData());
            updateStatisticsData(vds.getStatisticsData());
        }
        throw vdsBrokerCommand.getVDSReturnValue().getExceptionObject();
    } else {
        log.errorFormat("refreshCapabilities:GetCapabilitiesVDSCommand failed with no exception!");
        throw new RuntimeException(vdsBrokerCommand.getVDSReturnValue().getExceptionString());
    }
}
#method_after
public VDSStatus refreshCapabilities(AtomicBoolean processHardwareCapsNeeded, VDS vds) {
    log.debug("GetCapabilitiesVDSCommand started method");
    VDS oldVDS = vds.clone();
    GetCapabilitiesVDSCommand<VdsIdAndVdsVDSCommandParametersBase> vdsBrokerCommand = new GetCapabilitiesVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(vds));
    vdsBrokerCommand.execute();
    if (vdsBrokerCommand.getVDSReturnValue().getSucceeded()) {
        // Verify version capabilities
        HashSet<Version> hostVersions = null;
        Version clusterCompatibility = vds.getVdsGroupCompatibilityVersion();
        if (FeatureSupported.hardwareInfo(clusterCompatibility) && // host and an exception will be raised by VDSM.
        (hostVersions = vds.getSupportedClusterVersionsSet()) != null && hostVersions.contains(clusterCompatibility)) {
            VDSReturnValue ret = ResourceManager.getInstance().runVdsCommand(VDSCommandType.GetHardwareInfo, new VdsIdAndVdsVDSCommandParametersBase(vds));
            if (!ret.getSucceeded()) {
                AuditLogableBase logable = new AuditLogableBase(vds.getId());
                logable.updateCallStackFromThrowable(ret.getExceptionObject());
                AuditLogDirector.log(logable, AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO);
            }
        }
        VDSStatus returnStatus = vds.getStatus();
        NonOperationalReason nonOperationalReason = CollectVdsNetworkDataVDSCommand.persistAndEnforceNetworkCompliance(vds);
        if (nonOperationalReason != NonOperationalReason.NONE) {
            setIsSetNonOperationalExecuted(true);
            if (returnStatus != VDSStatus.NonOperational) {
                if (log.isDebugEnabled()) {
                    log.debugFormat("refreshCapabilities:GetCapabilitiesVDSCommand vds {0} networks do not match its cluster networks, vds will be moved to NonOperational", vds.getStaticData().getId());
                }
                vds.setStatus(VDSStatus.NonOperational);
                vds.setNonOperationalReason(nonOperationalReason);
                returnStatus = vds.getStatus();
            }
        }
        // We process the software capabilities.
        VDSStatus oldStatus = vds.getStatus();
        monitoringStrategy.processSoftwareCapabilities(vds);
        returnStatus = vds.getStatus();
        if (returnStatus != oldStatus && returnStatus == VDSStatus.NonOperational) {
            setIsSetNonOperationalExecuted(true);
        }
        processHardwareCapsNeeded.set(monitoringStrategy.processHardwareCapabilitiesNeeded(oldVDS, vds));
        return returnStatus;
    } else if (vdsBrokerCommand.getVDSReturnValue().getExceptionObject() != null) {
        // handleNetworkException
        if (vdsBrokerCommand.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException && handleNetworkException((VDSNetworkException) vdsBrokerCommand.getVDSReturnValue().getExceptionObject(), vds)) {
            updateDynamicData(vds.getDynamicData());
            updateStatisticsData(vds.getStatisticsData());
        }
        throw vdsBrokerCommand.getVDSReturnValue().getExceptionObject();
    } else {
        log.errorFormat("refreshCapabilities:GetCapabilitiesVDSCommand failed with no exception!");
        throw new RuntimeException(vdsBrokerCommand.getVDSReturnValue().getExceptionString());
    }
}
#end_block

#method_before
public static NonOperationalReason persistAndEnforceNetworkCompliance(VDS vds, boolean skipManagementNetwork, Map<String, VdsNetworkInterface> nicsByName) {
    persistTopology(vds, nicsByName);
    if (vds.getStatus() != VDSStatus.Maintenance) {
        List<Network> clusterNetworks = DbFacade.getInstance().getNetworkDao().getAllForCluster(vds.getVdsGroupId());
        if (skipManagementNetwork) {
            skipManagementNetworkCheck(vds.getInterfaces(), clusterNetworks);
        }
        Map<String, String> customLogValues;
        // here we check if the vds networks match it's cluster networks
        String networks = getMissingOperationalClusterNetworks(vds, clusterNetworks);
        if (networks.length() > 0) {
            customLogValues = new HashMap<String, String>();
            customLogValues.put("Networks", networks);
            setNonOperationl(vds, NonOperationalReason.NETWORK_UNREACHABLE, customLogValues);
            return NonOperationalReason.NETWORK_UNREACHABLE;
        }
        // Check that VM networks are implemented above a bridge.
        networks = getVmNetworksImplementedAsBridgeless(vds, clusterNetworks);
        if (networks.length() > 0) {
            customLogValues = new HashMap<String, String>();
            customLogValues.put("Networks", networks);
            setNonOperationl(vds, NonOperationalReason.VM_NETWORK_IS_BRIDGELESS, customLogValues);
            return NonOperationalReason.VM_NETWORK_IS_BRIDGELESS;
        }
        logUnsynchronizedNetworks(vds, Entities.entitiesByName(clusterNetworks));
    }
    return NonOperationalReason.NONE;
}
#method_after
public static NonOperationalReason persistAndEnforceNetworkCompliance(VDS host) {
    return persistAndEnforceNetworkCompliance(host, false, null);
}
#end_block

#method_before
private static void persistTopology(VDS vds, Map<String, VdsNetworkInterface> nicsByName) {
    InterfaceDao interfaceDAO = DbFacade.getInstance().getInterfaceDao();
    List<VdsNetworkInterface> dbIfaces = interfaceDAO.getAllInterfacesForVds(vds.getId());
    List<String> updatedIfaces = new ArrayList<String>();
    List<VdsNetworkInterface> dbIfacesToBatch = new ArrayList<>();
    // First we check what interfaces need to update/delete
    for (VdsNetworkInterface dbIface : dbIfaces) {
        boolean found = false;
        for (VdsNetworkInterface vdsIface : vds.getInterfaces()) {
            if (dbIface.getName().equals(vdsIface.getName())) {
                // we preserve only the ID from the Database
                // everything else is what we got from getVdsCapabilities
                vdsIface.setId(dbIface.getId());
                dbIfacesToBatch.add(vdsIface);
                updatedIfaces.add(vdsIface.getName());
                found = true;
                break;
            }
        }
        if (!found) {
            interfaceDAO.removeInterfaceFromVds(dbIface.getId());
            interfaceDAO.removeStatisticsForVds(dbIface.getId());
        }
    }
    if (nicsByName != null) {
        updateInterfacesWithUserConfiguration(dbIfacesToBatch, nicsByName);
        updateInterfacesWithUserConfiguration(vds.getInterfaces(), nicsByName);
    }
    if (!dbIfacesToBatch.isEmpty()) {
        interfaceDAO.massUpdateInterfacesForVds(dbIfacesToBatch);
    }
    // now all that left is add the interfaces that not exists in the Database
    for (VdsNetworkInterface vdsIface : vds.getInterfaces()) {
        if (!updatedIfaces.contains(vdsIface.getName())) {
            interfaceDAO.saveInterfaceForVds(vdsIface);
            interfaceDAO.saveStatisticsForVds(vdsIface.getStatistics());
        }
    }
}
#method_after
private static void persistTopology(VDS vds, Map<String, VdsNetworkInterface> nicsByName) {
    InterfaceDao interfaceDAO = DbFacade.getInstance().getInterfaceDao();
    List<VdsNetworkInterface> dbIfaces = interfaceDAO.getAllInterfacesForVds(vds.getId());
    List<String> updatedIfaces = new ArrayList<String>();
    List<VdsNetworkInterface> dbIfacesToBatch = new ArrayList<>();
    // First we check what interfaces need to update/delete
    for (VdsNetworkInterface dbIface : dbIfaces) {
        boolean found = false;
        for (VdsNetworkInterface vdsIface : vds.getInterfaces()) {
            if (dbIface.getName().equals(vdsIface.getName())) {
                // we preserve only the ID and the labels from the Database
                // everything else is what we got from getVdsCapabilities
                vdsIface.setId(dbIface.getId());
                vdsIface.setLabels(dbIface.getLabels());
                dbIfacesToBatch.add(vdsIface);
                updatedIfaces.add(vdsIface.getName());
                found = true;
                break;
            }
        }
        if (!found) {
            interfaceDAO.removeInterfaceFromVds(dbIface.getId());
            interfaceDAO.removeStatisticsForVds(dbIface.getId());
        }
    }
    if (nicsByName != null) {
        updateInterfacesWithUserConfiguration(dbIfacesToBatch, nicsByName);
        updateInterfacesWithUserConfiguration(vds.getInterfaces(), nicsByName);
    }
    if (!dbIfacesToBatch.isEmpty()) {
        interfaceDAO.massUpdateInterfacesForVds(dbIfacesToBatch);
    }
    // now all that left is add the interfaces that not exists in the Database
    for (VdsNetworkInterface vdsIface : vds.getInterfaces()) {
        if (!updatedIfaces.contains(vdsIface.getName())) {
            interfaceDAO.saveInterfaceForVds(vdsIface);
            interfaceDAO.saveStatisticsForVds(vdsIface.getStatistics());
        }
    }
}
#end_block

#method_before
@Override
public List<VdsNetworkInterface> getAllInterfacesByDataCenterId(Guid dataCenterId) {
    return getCallsHandler().executeReadList("GetInterfacesByDataCenterId", vdsNetworkInterfaceRowMapper, getCustomMapSqlParameterSource().addValue("data_center_id", dataCenterId));
}
#method_after
private List<VdsNetworkInterface> getAllInterfacesByDataCenterId(Guid dataCenterId) {
    return getCallsHandler().executeReadList("GetInterfacesByDataCenterId", vdsNetworkInterfaceRowMapper, getCustomMapSqlParameterSource().addValue("data_center_id", dataCenterId));
}
#end_block

#method_before
public void testGetAllNetworkLabelsForDataCenter() {
    Set<String> result = dao.getAllNetworkLabelsForDataCenter(FixturesTool.DATA_CENTER);
    assertNotNull(result);
    assertFalse(result.isEmpty());
}
#method_after
@Test
public void testGetAllNetworkLabelsForDataCenter() {
    Set<String> result = dao.getAllNetworkLabelsForDataCenter(FixturesTool.DATA_CENTER);
    assertNotNull(result);
    assertFalse(result.isEmpty());
}
#end_block

#method_before
@Override
public String add(Network network) {
    NetworkForCreate networkForCreate = new NetworkForCreate();
    networkForCreate.setAdminStateUp(true);
    networkForCreate.setName(network.getName());
    if (network.getLabel() != null) {
        networkForCreate.setProviderPhysicalNetwork(network.getLabel());
        if (network.getVlanId() == null) {
            networkForCreate.setProviderNetworkType(FLAT_NETWORK);
        } else {
            networkForCreate.setProviderNetworkType(VLAN_NETWORK);
            networkForCreate.setProviderSegmentationId(network.getVlanId());
        }
    }
    if (!provider.isRequiringAuthentication()) {
        networkForCreate.setTenantId(DEVICE_OWNER);
    }
    try {
        com.woorea.openstack.quantum.model.Network createdNetwork = getClient().networks().create(networkForCreate).execute();
        return createdNetwork.getId();
    } catch (RuntimeException e) {
        throw new VdcBLLException(VdcBllErrors.PROVIDER_FAILURE, e);
    }
}
#method_after
@Override
public String add(Network network) {
    NetworkForCreate networkForCreate = new NetworkForCreate();
    networkForCreate.setAdminStateUp(true);
    networkForCreate.setName(network.getName());
    if (network.getLabel() != null) {
        networkForCreate.setProviderPhysicalNetwork(network.getLabel());
        if (NetworkUtils.isVlan(network)) {
            networkForCreate.setProviderNetworkType(VLAN_NETWORK);
            networkForCreate.setProviderSegmentationId(network.getVlanId());
        } else {
            networkForCreate.setProviderNetworkType(FLAT_NETWORK);
        }
    }
    if (!provider.isRequiringAuthentication()) {
        networkForCreate.setTenantId(DEVICE_OWNER);
    }
    try {
        com.woorea.openstack.quantum.model.Network createdNetwork = getClient().networks().create(networkForCreate).execute();
        return createdNetwork.getId();
    } catch (RuntimeException e) {
        throw new VdcBLLException(VdcBllErrors.PROVIDER_FAILURE, e);
    }
}
#end_block

#method_before
@Override
public Map<String, String> allocate(Network network, VnicProfile vnicProfile, VmNic nic) {
    try {
        Port port = locatePort(nic);
        List<String> securityGroups = getSecurityGroups(vnicProfile);
        if (port == null) {
            com.woorea.openstack.quantum.model.Network externalNetwork = getClient().networks().show(network.getProvidedBy().getExternalId()).execute();
            Port portForCreate = new Port();
            portForCreate.setAdminStateUp(true);
            portForCreate.setName(nic.getName());
            portForCreate.setTenantId(externalNetwork.getTenantId());
            portForCreate.setMacAddress(nic.getMacAddress());
            portForCreate.setNetworkId(externalNetwork.getId());
            portForCreate.setDeviceOwner(DEVICE_OWNER);
            portForCreate.setDeviceId(nic.getId().toString());
            portForCreate.setSecurityGroups(securityGroups);
            port = getClient().ports().create(portForCreate).execute();
        } else if (securityGroupsChanged(port.getSecurityGroups(), securityGroups)) {
            Port portForUpdate = new Port();
            portForUpdate.setId(port.getId());
            portForUpdate.setSecurityGroups(securityGroups);
            port = getClient().ports().update(portForUpdate).execute();
        }
        Map<String, String> runtimeProperties = new HashMap<>();
        runtimeProperties.put("vnic_id", port.getId());
        runtimeProperties.put("provider_type", provider.getType().name());
        runtimeProperties.put("plugin_type", provider.getAdditionalProperties().getPluginType());
        return runtimeProperties;
    } catch (RuntimeException e) {
        throw new VdcBLLException(VdcBllErrors.PROVIDER_FAILURE, e);
    }
}
#method_after
@Override
public Map<String, String> allocate(Network network, VnicProfile vnicProfile, VmNic nic) {
    try {
        Port port = locatePort(nic);
        List<String> securityGroups = getSecurityGroups(vnicProfile);
        if (port == null) {
            com.woorea.openstack.quantum.model.Network externalNetwork = getClient().networks().show(network.getProvidedBy().getExternalId()).execute();
            Port portForCreate = new Port();
            portForCreate.setAdminStateUp(true);
            portForCreate.setName(nic.getName());
            portForCreate.setTenantId(externalNetwork.getTenantId());
            portForCreate.setMacAddress(nic.getMacAddress());
            portForCreate.setNetworkId(externalNetwork.getId());
            portForCreate.setDeviceOwner(DEVICE_OWNER);
            portForCreate.setDeviceId(nic.getId().toString());
            portForCreate.setSecurityGroups(securityGroups);
            port = getClient().ports().create(portForCreate).execute();
        } else if (securityGroupsChanged(port.getSecurityGroups(), securityGroups)) {
            Port portForUpdate = new PortForUpdate();
            portForUpdate.setId(port.getId());
            portForUpdate.setSecurityGroups(securityGroups);
            port = getClient().ports().update(portForUpdate).execute();
        }
        Map<String, String> runtimeProperties = new HashMap<>();
        runtimeProperties.put("vnic_id", port.getId());
        runtimeProperties.put("provider_type", provider.getType().name());
        runtimeProperties.put("plugin_type", provider.getAdditionalProperties().getPluginType());
        if (port.getSecurityGroups() != null && !port.getSecurityGroups().isEmpty()) {
            runtimeProperties.put("security_groups", StringUtils.join(port.getSecurityGroups(), ','));
        }
        return runtimeProperties;
    } catch (RuntimeException e) {
        throw new VdcBLLException(VdcBllErrors.PROVIDER_FAILURE, e);
    }
}
#end_block

#method_before
private boolean securityGroupsChanged(List<String> existingSecurityGroups, List<String> desiredSecurityGroups) {
    return !CollectionUtils.isEqualCollection(existingSecurityGroups == null ? Collections.emptyList() : existingSecurityGroups, desiredSecurityGroups);
}
#method_after
private boolean securityGroupsChanged(List<String> existingSecurityGroups, List<String> desiredSecurityGroups) {
    existingSecurityGroups = existingSecurityGroups == null ? NO_SECURITY_GROUPS : existingSecurityGroups;
    return (desiredSecurityGroups == DEFAULT_SECURITY_GROUP && existingSecurityGroups.isEmpty()) || (desiredSecurityGroups != DEFAULT_SECURITY_GROUP && !CollectionUtils.isEqualCollection(existingSecurityGroups, desiredSecurityGroups));
}
#end_block

#method_before
private List<String> getSecurityGroups(VnicProfile vnicProfile) {
    Map<String, String> customProperties = vnicProfile.getCustomProperties();
    if (customProperties.containsKey(SECURITY_GROUPS_PROPERTY)) {
        return Arrays.asList(customProperties.get(SECURITY_GROUPS_PROPERTY).split(",\\w*"));
    }
    return Collections.emptyList();
}
#method_after
private List<String> getSecurityGroups(VnicProfile vnicProfile) {
    Map<String, String> customProperties = vnicProfile.getCustomProperties();
    if (customProperties.containsKey(SECURITY_GROUPS_PROPERTY)) {
        String securityGroupsString = customProperties.get(SECURITY_GROUPS_PROPERTY);
        if (StringUtils.isEmpty(securityGroupsString)) {
            return NO_SECURITY_GROUPS;
        }
        return Arrays.asList(securityGroupsString.split(",\\w*"));
    }
    return DEFAULT_SECURITY_GROUP;
}
#end_block

#method_before
private void statelessVmTreatment() {
    warnIfNotAllDisksPermitSnapshots();
    if (isStatelessSnapshotExistsForVm()) {
        log.errorFormat("VM {0} ({1}) already contains stateless snapshot, removing it", getVm().getName(), getVm().getId());
        removeVmStatlessImages();
    } else {
        log.infoFormat("Creating stateless snapshot for VM {0} ({1})", getVm().getName(), getVm().getId());
        CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters();
        VdcReturnValueBase vdcReturnValue = getBackend().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation());
        // setting lock to null in order not to release lock twice
        setLock(null);
        setSucceeded(vdcReturnValue.getSucceeded());
        if (vdcReturnValue.getSucceeded()) {
            getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList());
            // save RunVmParams so we'll know how to run
            // the stateless VM in the endAction part.
            VmHandler.updateDisksFromDb(getVm());
        } else {
            if (areDisksLocked(vdcReturnValue)) {
                throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
            }
            getReturnValue().setFault(vdcReturnValue.getFault());
            log.errorFormat("Failed to create stateless snapshot for VM {0} ({1})", getVm().getName(), getVm().getId());
        }
    }
}
#method_after
private void statelessVmTreatment() {
    warnIfNotAllDisksPermitSnapshots();
    if (isStatelessSnapshotExistsForVm()) {
        log.errorFormat("VM {0} ({1}) already contains stateless snapshot, removing it", getVm().getName(), getVm().getId());
        removeVmStatlessImages();
    } else {
        log.infoFormat("Creating stateless snapshot for VM {0} ({1})", getVm().getName(), getVm().getId());
        CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters();
        VdcReturnValueBase vdcReturnValue = getBackend().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation());
        // setting lock to null in order not to release lock twice
        setLock(null);
        setSucceeded(vdcReturnValue.getSucceeded());
        if (vdcReturnValue.getSucceeded()) {
            getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList());
        } else {
            if (areDisksLocked(vdcReturnValue)) {
                throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
            }
            getReturnValue().setFault(vdcReturnValue.getFault());
            log.errorFormat("Failed to create stateless snapshot for VM {0} ({1})", getVm().getName(), getVm().getId());
        }
    }
}
#end_block

#method_before
protected void refreshLunsInfo(List<LUNs> lunsFromVgInfo, List<LUNs> lunsFromDb) {
    for (LUNs lunFromVgInfo : lunsFromVgInfo) {
        // Update LUN
        LUNs lunFromDB = getLunDao().get(lunFromVgInfo.getLUN_id());
        if (lunFromDB == null) {
            getLunDao().save(lunFromVgInfo);
            log.infoFormat("New LUN discovered, ID: {0}", lunFromVgInfo.getLUN_id());
        } else if (lunFromDB.getDeviceSize() != lunFromVgInfo.getDeviceSize()) {
            getLunDao().updateLUNsDeviceSize(lunFromVgInfo.getLUN_id(), lunFromVgInfo.getDeviceSize());
            log.infoFormat("Updated LUN device size, ID: {0}", lunFromVgInfo.getLUN_id());
        }
        // Update lun connections map
        for (StorageServerConnections connection : lunFromVgInfo.getLunConnections()) {
            StorageServerConnections connectionFromDb = getStorageServerConnectionDAO().getForIqn(connection.getiqn());
            if (connectionFromDb == null) {
                // Shouldn't happen
                continue;
            }
            LUN_storage_server_connection_map lunConnection = new LUN_storage_server_connection_map(lunFromVgInfo.getLUN_id(), connectionFromDb.getid());
            if (getStorageServerConnectionLunMapDao().get(lunConnection.getId()) == null) {
                getStorageServerConnectionLunMapDao().save(lunConnection);
            }
        }
    }
    // Cleanup LUNs from DB
    for (LUNs lunFromDb : lunsFromDb) {
        if (!isDummyLun(lunFromDb) && !containsLun(lunsFromVgInfo, lunFromDb)) {
            getLunDao().remove(lunFromDb.getLUN_id());
            log.infoFormat("Removed LUN ID: {0}", lunFromDb.getLUN_id());
        }
    }
}
#method_after
protected void refreshLunsInfo(List<LUNs> lunsFromVgInfo, List<LUNs> lunsFromDb) {
    for (LUNs lunFromVgInfo : lunsFromVgInfo) {
        // Update LUN
        LUNs lunFromDB = getLunDao().get(lunFromVgInfo.getLUN_id());
        if (lunFromDB == null) {
            getLunDao().save(lunFromVgInfo);
            log.infoFormat("New LUN discovered, ID: {0}", lunFromVgInfo.getLUN_id());
        } else if (lunFromDB.getDeviceSize() != lunFromVgInfo.getDeviceSize()) {
            getLunDao().updateLUNsDeviceSize(lunFromVgInfo.getLUN_id(), lunFromVgInfo.getDeviceSize());
            log.infoFormat("Updated LUN device size - ID: {0}, previous size: {1}, new size: {2}.", lunFromVgInfo.getLUN_id(), lunFromDB.getDeviceSize(), lunFromVgInfo.getDeviceSize());
        }
        // Update lun connections map
        for (StorageServerConnections connection : lunFromVgInfo.getLunConnections()) {
            StorageServerConnections connectionFromDb = getStorageServerConnectionDAO().getForIqn(connection.getiqn());
            if (connectionFromDb == null) {
                // Shouldn't happen
                continue;
            }
            LUN_storage_server_connection_map lunConnection = new LUN_storage_server_connection_map(lunFromVgInfo.getLUN_id(), connectionFromDb.getid());
            if (getStorageServerConnectionLunMapDao().get(lunConnection.getId()) == null) {
                getStorageServerConnectionLunMapDao().save(lunConnection);
            }
        }
    }
    // Cleanup LUNs from DB
    for (LUNs lunFromDb : lunsFromDb) {
        if (!isDummyLun(lunFromDb) && !containsLun(lunsFromVgInfo, lunFromDb)) {
            getLunDao().remove(lunFromDb.getLUN_id());
            log.infoFormat("Removed LUN ID: {0}", lunFromDb.getLUN_id());
        }
    }
}
#end_block

#method_before
@Test
public void lunsMismatchDeviceSize() {
    Guid pvID = Guid.newGuid();
    Guid lunID = Guid.newGuid();
    LUNs lunFromVG = new LUNs();
    lunFromVG.setLUN_id(lunID.toString());
    lunFromVG.setphysical_volume_id(pvID.toString());
    lunFromVG.setDeviceSize(20);
    LUNs lunFromDB = new LUNs();
    lunFromDB.setLUN_id(lunID.toString());
    lunFromDB.setphysical_volume_id(pvID.toString());
    lunFromDB.setDeviceSize(10);
    List<LUNs> lunsFromVgInfo = Collections.singletonList(lunFromVG);
    List<LUNs> lunsFromDb = Collections.singletonList(lunFromDB);
    boolean isMismatch = command.isLunsInfoMismatch(lunsFromVgInfo, lunsFromDb);
    assertTrue(isMismatch);
}
#method_after
@Test
public void lunsMismatchDeviceSize() {
    Guid pvID = Guid.newGuid();
    Guid lunID = Guid.newGuid();
    LUNs lunFromVG = new LUNs();
    lunFromVG.setLUN_id(lunID.toString());
    lunFromVG.setphysical_volume_id(pvID.toString());
    lunFromVG.setDeviceSize(20);
    LUNs lunFromDB = new LUNs();
    lunFromDB.setLUN_id(lunID.toString());
    lunFromDB.setphysical_volume_id(pvID.toString());
    lunFromDB.setDeviceSize(10);
    List<LUNs> lunsFromVgInfo = Collections.singletonList(lunFromVG);
    List<LUNs> lunsFromDb = Collections.singletonList(lunFromDB);
    assertTrue(command.isLunsInfoMismatch(lunsFromVgInfo, lunsFromDb));
}
#end_block

#method_before
@Test
public void testUpdateLUNsDeviceSize() {
    int testDeviceSize = 20;
    dao.updateLUNsDeviceSize(existingLUN.getLUN_id(), testDeviceSize);
    LUNs dbLun = dao.get(existingLUN.getLUN_id());
    assertEquals("LUNs volume group id wasn't updated", testDeviceSize, dbLun.getDeviceSize());
}
#method_after
@Test
public void testUpdateLUNsDeviceSize() {
    int testDeviceSize = 20;
    dao.updateLUNsDeviceSize(existingLUN.getLUN_id(), testDeviceSize);
    LUNs dbLun = dao.get(existingLUN.getLUN_id());
    assertEquals("LUN device size wasn't updated", testDeviceSize, dbLun.getDeviceSize());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (onlyPermittedFieldsChanged()) {
        return true;
    }
    NetworkValidator validatorNew = new NetworkValidator(getNetwork());
    UpdateNetworkValidator validatorOld = new UpdateNetworkValidator(getOldNetwork());
    return validate(validatorNew.dataCenterExists()) && validate(validatorNew.vmNetworkSetCorrectly()) && validate(validatorNew.stpForVmNetworkOnly()) && validate(validatorNew.mtuValid()) && validate(validatorNew.networkPrefixValid()) && validate(validatorNew.vlanIdNotUsed()) && validate(validatorOld.networkIsSet()) && validate(validatorOld.notRenamingManagementNetwork(getNetwork())) && validate(validatorNew.networkNameNotUsed()) && validate(validatorOld.networkNotUsedByRunningVms()) && validate(validatorOld.nonVmNetworkNotUsedByVms(getNetwork())) && validate(validatorOld.nonVmNetworkNotUsedByTemplates(getNetwork())) && validate(validatorOld.notRenamingUsedNetwork(getNetworkName())) && (oldAndNewNetworkIsNotExternal() || validate(validatorOld.externalNetworkDetailsUnchanged(getNetwork())));
}
#method_after
@Override
protected boolean canDoAction() {
    if (onlyPermittedFieldsChanged()) {
        return true;
    }
    NetworkValidator validatorNew = new NetworkValidator(getNetwork());
    UpdateNetworkValidator validatorOld = new UpdateNetworkValidator(getOldNetwork());
    return validate(validatorNew.dataCenterExists()) && validate(validatorNew.vmNetworkSetCorrectly()) && validate(validatorNew.stpForVmNetworkOnly()) && validate(validatorNew.mtuValid()) && validate(validatorNew.networkPrefixValid()) && validate(validatorNew.vlanIdNotUsed()) && validate(validatorOld.networkIsSet()) && validate(validatorOld.notRenamingManagementNetwork(getNetwork())) && validate(validatorNew.networkNameNotUsed()) && validate(validatorOld.networkNotUsedByRunningVms()) && validate(validatorOld.nonVmNetworkNotUsedByVms(getNetwork())) && validate(validatorOld.nonVmNetworkNotUsedByTemplates(getNetwork())) && validate(validatorOld.notRenamingUsedNetwork(getNetworkName())) && validate(validatorOld.notRenamingLabel(getNetwork().getLabel())) && (oldAndNewNetworkIsNotExternal() || validate(validatorOld.externalNetworkDetailsUnchanged(getNetwork())));
}
#end_block

#method_before
private ArrayList<VdcActionParametersBase> buildParameters(Network network, Network oldNetwork) {
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    List<VdsNetworkInterface> nics = getDbFacade().getInterfaceDao().getVdsInterfacesByNetworkId(network.getId());
    // sync network on nics if the label wasn't changed
    if (!labelChanged()) {
        createSyncNetworkParameters(parameters, nics);
        return parameters;
    }
    // add network to labeled interfaces and sync network on the rest
    if (labelAdded()) {
        List<VdsNetworkInterface> labeledNics = getLabeledNics(network);
        Map<Guid, VdsNetworkInterface> hostToNic = mapHostToNic(nics);
        List<VdsNetworkInterface> nicsForAdd = new ArrayList<>();
        Set<VdsNetworkInterface> nicsForSync = new HashSet<>();
        // nics to add network
        for (VdsNetworkInterface labeledNic : labeledNics) {
            VdsNetworkInterface nic = hostToNic.get(labeledNic.getVdsId());
            // add network to labeled nic if network not configured on host
            if (nic == null) {
                nicsForAdd.add(labeledNic);
            } else {
                // sync the network
                nicsForSync.add(nic);
            }
        }
        // add the unlabeled nics to be synced
        for (VdsNetworkInterface nic : nics) {
            if (!nicsForSync.contains(nic)) {
                nicsForSync.add(nic);
            }
        }
        parameters.addAll(createAddNetworkParameters(nicsForAdd));
        createSyncNetworkParameters(parameters, nicsForSync);
        return parameters;
    }
    // remove network from labeled interfaces
    if (labelRemoved()) {
        List<VdsNetworkInterface> labeledNics = getLabeledNics(oldNetwork);
        Map<Guid, VdsNetworkInterface> hostToNic = mapHostToNic(nics);
        List<VdsNetworkInterface> nicsForRemove = new ArrayList<>();
        Set<VdsNetworkInterface> nicsForSync = new HashSet<>();
        // nics to remove the network from
        for (VdsNetworkInterface labeledNic : labeledNics) {
            VdsNetworkInterface nic = hostToNic.get(labeledNic.getVdsId());
            // sync the network if not labeled
            if (nic == null) {
                nicsForSync.add(nic);
            } else {
                // remove the network from labeled nic
                nicsForRemove.add(labeledNic);
            }
        }
        // add the unlabeled nics to be synced
        for (VdsNetworkInterface nic : nics) {
            if (!nicsForSync.contains(nic)) {
                nicsForSync.add(nic);
            }
        }
        parameters.addAll(createRemoveNetworkParameters(nicsForRemove));
        createSyncNetworkParameters(parameters, nicsForSync);
        return parameters;
    }
    return parameters;
}
#method_after
private ArrayList<VdcActionParametersBase> buildParameters(Network network, Network oldNetwork) {
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    List<VdsNetworkInterface> nics = getDbFacade().getInterfaceDao().getVdsInterfacesByNetworkId(network.getId());
    // sync network on nics if the label wasn't changed
    if (!labelChanged()) {
        createSyncNetworkParameters(parameters, nics);
        return parameters;
    }
    // add network to labeled interfaces and sync network on the rest
    if (labelAdded()) {
        List<VdsNetworkInterface> labeledNics = getLabeledNics(network);
        Map<Guid, VdsNetworkInterface> hostToNic = mapHostToNic(nics);
        List<VdsNetworkInterface> nicsForAdd = new ArrayList<>();
        Set<VdsNetworkInterface> nicsForSync = new HashSet<>();
        // nics to add network
        for (VdsNetworkInterface labeledNic : labeledNics) {
            VdsNetworkInterface nic = hostToNic.get(labeledNic.getVdsId());
            // add network to labeled nic if network not configured on host
            if (nic == null) {
                nicsForAdd.add(labeledNic);
            } else {
                // sync the network
                nicsForSync.add(nic);
            }
        }
        // add the unlabeled nics to be synced
        for (VdsNetworkInterface nic : nics) {
            if (!nicsForSync.contains(nic)) {
                nicsForSync.add(nic);
            }
        }
        parameters.addAll(createAddNetworkParameters(nicsForAdd));
        createSyncNetworkParameters(parameters, nicsForSync);
        return parameters;
    }
    // remove network from labeled interfaces
    if (labelRemoved()) {
        List<VdsNetworkInterface> labeledNics = getLabeledNics(oldNetwork);
        Map<Guid, VdsNetworkInterface> hostToNic = mapHostToNic(nics);
        List<VdsNetworkInterface> nicsForRemove = new ArrayList<>();
        Set<VdsNetworkInterface> nicsForSync = new HashSet<>();
        // nics to remove the network from
        for (VdsNetworkInterface labeledNic : labeledNics) {
            VdsNetworkInterface nic = hostToNic.get(labeledNic.getVdsId());
            // remove the network from labeled nic
            if (nic != null) {
                nicsForRemove.add(labeledNic);
            }
        }
        // add the unlabeled nics to be synced
        for (VdsNetworkInterface nic : nics) {
            if (!nicsForSync.contains(nic)) {
                nicsForSync.add(nic);
            }
        }
        parameters.addAll(createRemoveNetworkParameters(nicsForRemove));
        createSyncNetworkParameters(parameters, nicsForSync);
        return parameters;
    }
    return parameters;
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getDisksAllocationModel().setIsVolumeFormatAvailable(false);
    getModel().getDisksAllocationModel().setIsAliasChangable(true);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(false);
    AsyncDataProvider.getDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            final List<StoragePool> dataCenters = new ArrayList<StoragePool>();
            for (StoragePool a : (ArrayList<StoragePool>) returnValue) {
                if (a.getstatus() == StoragePoolStatus.Up) {
                    dataCenters.add(a);
                }
            }
            AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                @Override
                public void onSuccess(Object target, Object returnValue) {
                    UnitVmModel model = (UnitVmModel) target;
                    model.setDataCentersAndClusters(model, dataCenters, (List<VDSGroup>) returnValue, null);
                    initCdImage();
                    getPoolModelBehaviorInitializedEvent().raise(this, EventArgs.Empty);
                }
            }, getModel().getHash()), true, false);
        }
    }, getModel().getHash()), true, false);
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getDisksAllocationModel().setIsVolumeFormatAvailable(false);
    getModel().getDisksAllocationModel().setIsAliasChangable(true);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(false);
    AsyncDataProvider.getDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final List<StoragePool> dataCenters = new ArrayList<StoragePool>();
            for (StoragePool a : (ArrayList<StoragePool>) returnValue) {
                if (a.getStatus() == StoragePoolStatus.Up) {
                    dataCenters.add(a);
                }
            }
            if (!dataCenters.isEmpty()) {
                postDataCentersLoaded(dataCenters);
            } else {
                getModel().disableEditing(ConstantsManager.getInstance().getConstants().notAvailableWithNoUpDC());
            }
        }
    }, getModel().getHash()), true, false);
    getModel().getSpiceProxyEnabled().setEntity(false);
    getModel().getSpiceProxy().setIsChangable(false);
    getModel().getSpiceProxyEnabled().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            getModel().getSpiceProxy().setIsChangable(getModel().getSpiceProxyEnabled().getEntity());
        }
    });
}
#end_block

#method_before
protected void setupWindowModelFrom(VmBase vmBase) {
    if (vmBase != null) {
        updateQuotaByCluster(vmBase.getQuotaId(), vmBase.getQuotaName());
        // Copy VM parameters from template.
        getModel().getOSType().setSelectedItem(vmBase.getOsId());
        getModel().getTotalCPUCores().setEntity(Integer.toString(vmBase.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(vmBase.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(vmBase.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(vmBase.getSingleQxlPci());
        getModel().getDomain().setSelectedItem(vmBase.getDomain());
        getModel().getMemSize().setEntity(vmBase.getMemSizeMb());
        getModel().setBootSequence(vmBase.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(vmBase.isAutoStartup());
        getModel().getIsDeleteProtected().setEntity(vmBase.isDeleteProtected());
        getModel().getIsRunAndPause().setEntity(false);
        boolean hasCd = !StringHelper.isNullOrEmpty(vmBase.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(vmBase.getIsoPath());
        }
        updateTimeZone(vmBase.getTimeZone());
        updateConsoleDevice(vmBase.getId());
        // Update domain list
        updateDomain();
        // Update display protocol selected item
        EntityModel displayProtocol = null;
        boolean isFirst = true;
        for (Object item : getModel().getDisplayProtocol().getItems()) {
            EntityModel a = (EntityModel) item;
            if (isFirst) {
                displayProtocol = a;
                isFirst = false;
            }
            DisplayType dt = (DisplayType) a.getEntity();
            if (dt == extractDisplayType(vmBase)) {
                displayProtocol = a;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(vmBase.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(vmBase.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(vmBase.isSmartcardEnabled());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(vmBase.getKernelUrl());
        getModel().getKernel_parameters().setEntity(vmBase.getKernelParams());
        getModel().getInitrd_path().setEntity(vmBase.getInitrdUrl());
        if (!vmBase.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().setIsBlankTemplate(false);
            initDisks();
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().setDisks(null);
        }
        getModel().getProvisioning().setEntity(false);
        initPriority(vmBase.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (vmBase.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(vmBase.getMinAllocatedMem());
        }
        initSoundCard(vmBase.getId());
    }
}
#method_after
protected void setupWindowModelFrom(VmBase vmBase) {
    if (vmBase != null) {
        updateQuotaByCluster(vmBase.getQuotaId(), vmBase.getQuotaName());
        // Copy VM parameters from template.
        getModel().getOSType().setSelectedItem(vmBase.getOsId());
        getModel().getTotalCPUCores().setEntity(Integer.toString(vmBase.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(vmBase.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(vmBase.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(vmBase.getSingleQxlPci());
        getModel().getDomain().setSelectedItem(vmBase.getDomain());
        getModel().getMemSize().setEntity(vmBase.getMemSizeMb());
        getModel().setBootSequence(vmBase.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(vmBase.isAutoStartup());
        getModel().getIsDeleteProtected().setEntity(vmBase.isDeleteProtected());
        getModel().selectSsoMethod(vmBase.getSsoMethod());
        getModel().getIsRunAndPause().setEntity(false);
        boolean hasCd = !StringHelper.isNullOrEmpty(vmBase.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(vmBase.getIsoPath());
        }
        updateTimeZone(vmBase.getTimeZone());
        updateConsoleDevice(vmBase.getId());
        updateVirtioScsiEnabled(vmBase.getId());
        // Update domain list
        updateDomain();
        // Update display protocol selected item
        EntityModel<DisplayType> displayProtocol = null;
        boolean isFirst = true;
        for (EntityModel<DisplayType> item : getModel().getDisplayProtocol().getItems()) {
            if (isFirst) {
                displayProtocol = item;
                isFirst = false;
            }
            DisplayType dt = item.getEntity();
            if (dt == extractDisplayType(vmBase)) {
                displayProtocol = item;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(vmBase.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(vmBase.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(vmBase.isSmartcardEnabled());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(vmBase.getKernelUrl());
        getModel().getKernel_parameters().setEntity(vmBase.getKernelParams());
        getModel().getInitrd_path().setEntity(vmBase.getInitrdUrl());
        if (!vmBase.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().setIsBlankTemplate(false);
            initDisks();
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().setDisks(null);
        }
        getModel().getProvisioning().setEntity(false);
        initPriority(vmBase.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (vmBase.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(vmBase.getMinAllocatedMem());
        }
        initSoundCard(vmBase.getId());
        getModel().getAllowConsoleReconnect().setEntity(vmBase.isAllowConsoleReconnect());
    }
}
#end_block

#method_before
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateMinAllocatedMemory();
    updateNumOfSockets();
    if ((VmTemplate) getModel().getTemplate().getSelectedItem() != null) {
        VmTemplate template = (VmTemplate) getModel().getTemplate().getSelectedItem();
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    }
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateTemplate();
}
#method_after
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateMinAllocatedMemory();
    updateNumOfSockets();
    updateOSValues();
    if (getModel().getTemplate().getSelectedItem() != null) {
        VmTemplate template = getModel().getTemplate().getSelectedItem();
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    }
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateVirtioScsiAvailability();
    updateTemplate();
}
#end_block

#method_before
@Override
public void updateMinAllocatedMemory() {
    VDSGroup cluster = (VDSGroup) getModel().getSelectedCluster();
    if (cluster == null) {
        return;
    }
    double overCommitFactor = 100.0 / cluster.getmax_vds_memory_over_commit();
    getModel().getMinAllocatedMemory().setEntity((int) ((Integer) getModel().getMemSize().getEntity() * overCommitFactor));
}
#method_after
@Override
public void updateMinAllocatedMemory() {
    VDSGroup cluster = (VDSGroup) getModel().getSelectedCluster();
    if (cluster == null) {
        return;
    }
    double overCommitFactor = 100.0 / cluster.getmax_vds_memory_over_commit();
    getModel().getMinAllocatedMemory().setEntity((int) (getModel().getMemSize().getEntity() * overCommitFactor));
}
#end_block

#method_before
private void updateTemplate() {
    StoragePool dataCenter = getModel().getSelectedDataCenter();
    if (dataCenter == null) {
        return;
    }
    final VDSGroup selectedCluster = getModel().getSelectedCluster();
    AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target1, Object returnValue1) {
            ArrayList<VmTemplate> loadedTemplates = (ArrayList<VmTemplate>) returnValue1;
            ArrayList<VmTemplate> templates = new ArrayList<VmTemplate>();
            for (VmTemplate template : loadedTemplates) {
                if (!template.getId().equals(Guid.Empty)) {
                    templates.add(template);
                }
            }
            ArrayList<VmTemplate> filteredTemplates = AsyncDataProvider.filterTemplatesByArchitecture(templates, selectedCluster.getArchitecture());
            getModel().getTemplate().setItems(filteredTemplates);
            setupSelectedTemplate(getModel().getTemplate(), filteredTemplates);
        }
    }), dataCenter.getId());
}
#method_after
private void updateTemplate() {
    final DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getModel().getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = getModel().getSelectedDataCenter();
    if (dataCenter == null) {
        return;
    }
    AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target1, Object returnValue1) {
            ArrayList<VmTemplate> loadedTemplates = (ArrayList<VmTemplate>) returnValue1;
            ArrayList<VmTemplate> templates = new ArrayList<VmTemplate>();
            for (VmTemplate template : loadedTemplates) {
                if (!template.getId().equals(Guid.Empty)) {
                    templates.add(template);
                }
            }
            ArrayList<VmTemplate> filteredTemplates = AsyncDataProvider.filterTemplatesByArchitecture(templates, dataCenterWithCluster.getCluster().getArchitecture());
            getModel().getTemplate().setItems(filteredTemplates);
            setupSelectedTemplate(getModel().getTemplate(), filteredTemplates);
        }
    }), dataCenter.getId());
}
#end_block

#method_before
private void postInitTemplate(ArrayList<VmTemplate> templates) {
    // If there was some template selected before, try select it again.
    VmTemplate oldTemplate = (VmTemplate) getModel().getTemplate().getSelectedItem();
    getModel().getTemplate().setItems(templates);
    getModel().getTemplate().setSelectedItem(Linq.firstOrDefault(templates, oldTemplate != null ? new Linq.TemplatePredicate(oldTemplate.getId()) : new Linq.TemplatePredicate(Guid.Empty)));
}
#method_after
private void postInitTemplate(ArrayList<VmTemplate> templates) {
    // If there was some template selected before, try select it again.
    VmTemplate oldTemplate = getModel().getTemplate().getSelectedItem();
    getModel().getTemplate().setItems(templates);
    getModel().getTemplate().setSelectedItem(Linq.firstOrDefault(templates, oldTemplate != null ? new Linq.TemplatePredicate(oldTemplate.getId()) : new Linq.TemplatePredicate(Guid.Empty)));
}
#end_block

#method_before
@Override
public boolean validate() {
    boolean isNew = getModel().getIsNew();
    int maxAllowedVms = getMaxVmsInPool();
    int assignedVms = getModel().getAssignedVms().asConvertible().integer();
    getModel().getNumOfDesktops().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation(4), new IntegerValidation(isNew ? 1 : 0, isNew ? maxAllowedVms : maxAllowedVms - assignedVms) });
    getModel().getPrestartedVms().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, assignedVms) });
    getModel().getMaxAssignedVmsPerUser().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, Short.MAX_VALUE) });
    getModel().setIsGeneralTabValid(getModel().getIsGeneralTabValid() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid() && getModel().getMaxAssignedVmsPerUser().getIsValid());
    getModel().setIsPoolTabValid(true);
    return super.validate() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid() && getModel().getMaxAssignedVmsPerUser().getIsValid();
}
#method_after
@Override
public boolean validate() {
    boolean isNew = getModel().getIsNew();
    int maxAllowedVms = getMaxVmsInPool();
    int assignedVms = getModel().getAssignedVms().asConvertible().integer();
    getModel().getNumOfDesktops().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation(4), new IntegerValidation(isNew ? 1 : 0, isNew ? maxAllowedVms : maxAllowedVms - assignedVms) });
    getModel().getPrestartedVms().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, assignedVms) });
    getModel().getMaxAssignedVmsPerUser().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, Short.MAX_VALUE) });
    getModel().setIsGeneralTabValid(getModel().getIsGeneralTabValid() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid() && getModel().getMaxAssignedVmsPerUser().getIsValid());
    getModel().setIsPoolTabValid(true);
    if (getModel().getSpiceProxyEnabled().getEntity()) {
        getModel().getSpiceProxy().validateEntity(new IValidation[] { new HostWithProtocolAndPortAddressValidation() });
    } else {
        getModel().getSpiceProxy().setIsValid(true);
    }
    return super.validate() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid() && getModel().getMaxAssignedVmsPerUser().getIsValid() && getModel().getSpiceProxy().getIsValid();
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    AsyncDataProvider.getDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final ArrayList<StoragePool> dataCenters = new ArrayList<StoragePool>();
            for (StoragePool a : (ArrayList<StoragePool>) returnValue) {
                if (a.getstatus() == StoragePoolStatus.Up) {
                    dataCenters.add(a);
                }
            }
            AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                @Override
                public void onSuccess(Object target, Object returnValue) {
                    UnitVmModel model = (UnitVmModel) target;
                    model.setDataCentersAndClusters(model, dataCenters, (List<VDSGroup>) returnValue, null);
                    initCdImage();
                }
            }, getModel().getHash()), true, false);
        }
    }, getModel().getHash()), true, false);
    initPriority(0);
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    AsyncDataProvider.getDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final ArrayList<StoragePool> dataCenters = new ArrayList<StoragePool>();
            for (StoragePool a : (ArrayList<StoragePool>) returnValue) {
                if (a.getStatus() == StoragePoolStatus.Up) {
                    dataCenters.add(a);
                }
            }
            if (!dataCenters.isEmpty()) {
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        model.setDataCentersAndClusters(model, dataCenters, (List<VDSGroup>) returnValue, null);
                        initCdImage();
                    }
                }, getModel().getHash()), true, false);
            } else {
                getModel().disableEditing(ConstantsManager.getInstance().getConstants().notAvailableWithNoUpDC());
            }
        }
    }, getModel().getHash()), true, false);
    initPriority(0);
}
#end_block

#method_before
@Override
public void template_SelectedItemChanged() {
    VmTemplate template = (VmTemplate) getModel().getTemplate().getSelectedItem();
    if (template != null) {
        // Copy VM parameters from template.
        getModel().getOSType().setSelectedItem(template.getOsId());
        getModel().getTotalCPUCores().setEntity(Integer.toString(template.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(template.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(template.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(template.getSingleQxlPci());
        getModel().getDomain().setSelectedItem(template.getDomain());
        getModel().getMemSize().setEntity(template.getMemSizeMb());
        getModel().setBootSequence(template.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(template.isAutoStartup());
        updateHostPinning(template.getMigrationSupport());
        doChangeDefautlHost(template.getDedicatedVmForVds());
        getModel().getIsDeleteProtected().setEntity(template.isDeleteProtected());
        getModel().getIsStateless().setEntity(template.isStateless());
        getModel().getAllowConsoleReconnect().setEntity(template.isAllowConsoleReconnect());
        boolean hasCd = !StringHelper.isNullOrEmpty(template.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(template.getIsoPath());
        }
        updateConsoleDevice(template.getId());
        updateTimeZone(template.getTimeZone());
        // Update domain list
        updateDomain();
        // Update display protocol selected item
        EntityModel displayProtocol = null;
        boolean isFirst = true;
        for (Object item : getModel().getDisplayProtocol().getItems()) {
            EntityModel a = (EntityModel) item;
            if (isFirst) {
                displayProtocol = a;
                isFirst = false;
            }
            DisplayType dt = (DisplayType) a.getEntity();
            if (dt == template.getDefaultDisplayType()) {
                displayProtocol = a;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(template.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(template.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(template.isSmartcardEnabled());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(template.getKernelUrl());
        getModel().getKernel_parameters().setEntity(template.getKernelParams());
        getModel().getInitrd_path().setEntity(template.getInitrdUrl());
        if (!template.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().getProvisioning().setIsChangable(true);
            getModel().getVmType().setSelectedItem(template.getVmType());
            getModel().setIsBlankTemplate(false);
            getModel().getCopyPermissions().setIsAvailable(true);
            initDisks();
            initSoundCard(template.getId());
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().getProvisioning().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().getCopyPermissions().setIsAvailable(false);
            getModel().setDisks(null);
        }
        initPriority(template.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (template.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(template.getMinAllocatedMem());
        }
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
        updateNetworkInterfacesByTemplate(template);
    }
}
#method_after
@Override
public void template_SelectedItemChanged() {
    VmTemplate template = getModel().getTemplate().getSelectedItem();
    if (template != null) {
        // If this a blank template, use the proper value for the default OS
        if (template.getId().equals(Guid.Empty)) {
            List<Integer> osIds = (List<Integer>) getModel().getOSType().getItems();
            if (!osIds.isEmpty()) {
                getModel().getOSType().setSelectedItem(Collections.min(osIds));
            }
        } else {
            getModel().getOSType().setSelectedItem(template.getOsId());
        }
        getModel().getTotalCPUCores().setEntity(Integer.toString(template.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(template.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(template.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(template.getSingleQxlPci());
        getModel().getDomain().setSelectedItem(template.getDomain());
        getModel().getMemSize().setEntity(template.getMemSizeMb());
        getModel().setBootSequence(template.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(template.isAutoStartup());
        updateHostPinning(template.getMigrationSupport());
        doChangeDefautlHost(template.getDedicatedVmForVds());
        getModel().getIsDeleteProtected().setEntity(template.isDeleteProtected());
        getModel().selectSsoMethod(template.getSsoMethod());
        getModel().getIsStateless().setEntity(template.isStateless());
        boolean hasCd = !StringHelper.isNullOrEmpty(template.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(template.getIsoPath());
        }
        updateConsoleDevice(template.getId());
        updateVirtioScsiEnabled(template.getId());
        updateTimeZone(template.getTimeZone());
        // Update domain list
        updateDomain();
        // Update display protocol selected item
        EntityModel<DisplayType> displayProtocol = null;
        boolean isFirst = true;
        for (EntityModel<DisplayType> item : getModel().getDisplayProtocol().getItems()) {
            if (isFirst) {
                displayProtocol = item;
                isFirst = false;
            }
            DisplayType dt = item.getEntity();
            if (dt == template.getDefaultDisplayType()) {
                displayProtocol = item;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(template.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(template.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(template.isSmartcardEnabled());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(template.getKernelUrl());
        getModel().getKernel_parameters().setEntity(template.getKernelParams());
        getModel().getInitrd_path().setEntity(template.getInitrdUrl());
        if (!template.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().getProvisioning().setIsChangable(true);
            getModel().getVmType().setSelectedItem(template.getVmType());
            getModel().setIsBlankTemplate(false);
            getModel().getCopyPermissions().setIsAvailable(true);
            getModel().getAllowConsoleReconnect().setEntity(template.isAllowConsoleReconnect());
            initDisks();
            initSoundCard(template.getId());
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().getProvisioning().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().getCopyPermissions().setIsAvailable(false);
            getModel().setDisks(null);
        }
        initPriority(template.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (template.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(template.getMinAllocatedMem());
        }
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
        updateNetworkInterfacesByTemplate(template);
    }
}
#end_block

#method_before
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateMinAllocatedMemory();
    updateNumOfSockets();
    if (getModel().getTemplate().getSelectedItem() != null) {
        VmTemplate template = (VmTemplate) getModel().getTemplate().getSelectedItem();
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    }
    updateCpuPinningVisibility();
    updateTemplate();
    initNetworkInterfaces(networkBehavior, null);
    updateMemoryBalloon();
    updateCpuSharesAvailability();
}
#method_after
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateMinAllocatedMemory();
    updateNumOfSockets();
    if (getModel().getTemplate().getSelectedItem() != null) {
        VmTemplate template = getModel().getTemplate().getSelectedItem();
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    }
    updateCpuPinningVisibility();
    updateTemplate();
    updateNetworkInterfaces(networkBehavior, null);
    updateOSValues();
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateVirtioScsiAvailability();
}
#end_block

#method_before
private void updateNetworkInterfacesByTemplate(VmTemplate template) {
    AsyncQuery query = new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue == null) {
                return;
            }
            List<VmNetworkInterface> nics = (List<VmNetworkInterface>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initNetworkInterfaces(networkBehavior, nics);
        }
    });
    Frontend.RunQuery(VdcQueryType.GetTemplateInterfacesByTemplateId, new IdQueryParameters(template.getId()), query);
}
#method_after
private void updateNetworkInterfacesByTemplate(VmTemplate template) {
    AsyncQuery query = new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue == null) {
                return;
            }
            List<VmNetworkInterface> nics = (List<VmNetworkInterface>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            updateNetworkInterfaces(networkBehavior, nics);
        }
    });
    Frontend.getInstance().runQuery(VdcQueryType.GetTemplateInterfacesByTemplateId, new IdQueryParameters(template.getId()), query);
}
#end_block

#method_before
@Override
public void provisioning_SelectedItemChanged() {
    boolean provisioning = (Boolean) getModel().getProvisioning().getEntity();
    getModel().getProvisioningThin_IsSelected().setEntity(!provisioning);
    getModel().getProvisioningClone_IsSelected().setEntity(provisioning);
    getModel().getDisksAllocationModel().setIsVolumeFormatAvailable(true);
    getModel().getDisksAllocationModel().setIsVolumeFormatChangable(provisioning);
    getModel().getDisksAllocationModel().setIsAliasChangable(true);
    initStorageDomains();
}
#method_after
@Override
public void provisioning_SelectedItemChanged() {
    boolean provisioning = getModel().getProvisioning().getEntity();
    getModel().getProvisioningThin_IsSelected().setEntity(!provisioning);
    getModel().getProvisioningClone_IsSelected().setEntity(provisioning);
    getModel().getDisksAllocationModel().setIsVolumeFormatAvailable(true);
    getModel().getDisksAllocationModel().setIsVolumeFormatChangable(provisioning);
    getModel().getDisksAllocationModel().setIsAliasChangable(true);
    initStorageDomains();
}
#end_block

#method_before
@Override
public void updateMinAllocatedMemory() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getModel().getDataCenterWithClustersList().getSelectedItem();
    VDSGroup cluster = dataCenterWithCluster == null ? null : dataCenterWithCluster.getCluster();
    if (cluster == null) {
        return;
    }
    double overCommitFactor = 100.0 / cluster.getmax_vds_memory_over_commit();
    getModel().getMinAllocatedMemory().setEntity((int) ((Integer) getModel().getMemSize().getEntity() * overCommitFactor));
}
#method_after
@Override
public void updateMinAllocatedMemory() {
    DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem();
    VDSGroup cluster = dataCenterWithCluster == null ? null : dataCenterWithCluster.getCluster();
    if (cluster == null) {
        return;
    }
    double overCommitFactor = 100.0 / cluster.getmax_vds_memory_over_commit();
    getModel().getMinAllocatedMemory().setEntity((int) (getModel().getMemSize().getEntity() * overCommitFactor));
}
#end_block

#method_before
private void updateTemplate() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getModel().getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter == null) {
        return;
    }
    final VDSGroup selectedCluster = getModel().getSelectedCluster();
    // Filter according to system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        StorageDomain storage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(new Object[] { this, storage }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target1, Object returnValue1) {
                Object[] array1 = (Object[]) target1;
                NewVmModelBehavior behavior1 = (NewVmModelBehavior) array1[0];
                StorageDomain storage1 = (StorageDomain) array1[1];
                AsyncDataProvider.getTemplateListByStorage(new AsyncQuery(new Object[] { behavior1, returnValue1 }, new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target2, Object returnValue2) {
                        Object[] array2 = (Object[]) target2;
                        NewVmModelBehavior behavior2 = (NewVmModelBehavior) array2[0];
                        ArrayList<VmTemplate> templatesByDataCenter = (ArrayList<VmTemplate>) array2[1];
                        ArrayList<VmTemplate> templatesByStorage = (ArrayList<VmTemplate>) returnValue2;
                        VmTemplate blankTemplate = Linq.firstOrDefault(templatesByDataCenter, new Linq.TemplatePredicate(Guid.Empty));
                        if (blankTemplate != null) {
                            templatesByStorage.add(0, blankTemplate);
                        }
                        ArrayList<VmTemplate> templateList = AsyncDataProvider.filterTemplatesByArchitecture(templatesByStorage, selectedCluster.getArchitecture());
                        behavior2.postInitTemplate(templateList);
                    }
                }), storage1.getId());
            }
        }, getModel().getHash()), dataCenter.getId());
    } else {
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                NewVmModelBehavior behavior = (NewVmModelBehavior) target;
                ArrayList<VmTemplate> templates = (ArrayList<VmTemplate>) returnValue;
                behavior.postInitTemplate(AsyncDataProvider.filterTemplatesByArchitecture(templates, selectedCluster.getArchitecture()));
            }
        }, getModel().getHash()), dataCenter.getId());
    }
}
#method_after
private void updateTemplate() {
    final DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getModel().getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter == null) {
        return;
    }
    // Filter according to system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        StorageDomain storage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(new Object[] { this, storage }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target1, Object returnValue1) {
                Object[] array1 = (Object[]) target1;
                NewVmModelBehavior behavior1 = (NewVmModelBehavior) array1[0];
                StorageDomain storage1 = (StorageDomain) array1[1];
                AsyncDataProvider.getTemplateListByStorage(new AsyncQuery(new Object[] { behavior1, returnValue1 }, new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target2, Object returnValue2) {
                        Object[] array2 = (Object[]) target2;
                        NewVmModelBehavior behavior2 = (NewVmModelBehavior) array2[0];
                        ArrayList<VmTemplate> templatesByDataCenter = (ArrayList<VmTemplate>) array2[1];
                        ArrayList<VmTemplate> templatesByStorage = (ArrayList<VmTemplate>) returnValue2;
                        VmTemplate blankTemplate = Linq.firstOrDefault(templatesByDataCenter, new Linq.TemplatePredicate(Guid.Empty));
                        if (blankTemplate != null) {
                            templatesByStorage.add(0, blankTemplate);
                        }
                        ArrayList<VmTemplate> templateList = AsyncDataProvider.filterTemplatesByArchitecture(templatesByStorage, dataCenterWithCluster.getCluster().getArchitecture());
                        behavior2.postInitTemplate(templateList);
                    }
                }), storage1.getId());
            }
        }, getModel().getHash()), dataCenter.getId());
    } else {
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                NewVmModelBehavior behavior = (NewVmModelBehavior) target;
                ArrayList<VmTemplate> templates = (ArrayList<VmTemplate>) returnValue;
                behavior.postInitTemplate(AsyncDataProvider.filterTemplatesByArchitecture(templates, dataCenterWithCluster.getCluster().getArchitecture()));
            }
        }, getModel().getHash()), dataCenter.getId());
    }
}
#end_block

#method_before
private void postInitTemplate(ArrayList<VmTemplate> templates) {
    // If there was some template selected before, try select it again.
    VmTemplate oldTemplate = (VmTemplate) getModel().getTemplate().getSelectedItem();
    getModel().getTemplate().setItems(templates);
    getModel().getTemplate().setSelectedItem(Linq.firstOrDefault(templates, oldTemplate != null ? new Linq.TemplatePredicate(oldTemplate.getId()) : new Linq.TemplatePredicate(Guid.Empty)));
    updateIsDisksAvailable();
}
#method_after
private void postInitTemplate(ArrayList<VmTemplate> templates) {
    // If there was some template selected before, try select it again.
    VmTemplate oldTemplate = getModel().getTemplate().getSelectedItem();
    getModel().getTemplate().setItems(templates);
    getModel().getTemplate().setSelectedItem(Linq.firstOrDefault(templates, oldTemplate != null ? new Linq.TemplatePredicate(oldTemplate.getId()) : new Linq.TemplatePredicate(Guid.Empty)));
    updateIsDisksAvailable();
}
#end_block

#method_before
public void initCdImage() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getModel().getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null || dataCenterWithCluster.getDataCenter() == null) {
        return;
    }
    updateUserCdImage(dataCenterWithCluster.getDataCenter().getId());
}
#method_after
public void initCdImage() {
    DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null || dataCenterWithCluster.getDataCenter() == null) {
        return;
    }
    updateUserCdImage(dataCenterWithCluster.getDataCenter().getId());
}
#end_block

#method_before
@Override
public void updateIsDisksAvailable() {
    getModel().setIsDisksAvailable(getModel().getDisks() != null && getModel().getProvisioning().getIsChangable());
}
#method_after
@Override
public void updateIsDisksAvailable() {
    getModel().setIsDisksAvailable(getModel().getDisks() != null && !getModel().getDisks().isEmpty() && getModel().getProvisioning().getIsChangable());
}
#end_block

#method_before
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.RunQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#method_after
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY);
        }
    });
    callback.setHandleFailure(true);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#end_block

#method_before
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
}
#method_after
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
    initDisplayTypes();
    initNicHotplugSupportMap();
    initDiskHotpluggableInterfacesMap();
    initOsArchitecture();
}
#end_block

#method_before
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#method_after
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#end_block

#method_before
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#method_after
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#end_block

#method_before
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#method_after
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#end_block

#method_before
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#method_after
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#end_block

#method_before
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#method_after
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#end_block

#method_before
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#method_after
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#end_block

#method_before
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#method_after
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#end_block

#method_before
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#method_after
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#end_block

#method_before
public static ArrayList<VmTemplate> filterTemplatesByArchitecture(List<VmTemplate> list, ArchitectureType architecture) {
    ArrayList<VmTemplate> filteredList = new ArrayList<VmTemplate>();
    for (VmTemplate template : list) {
        if (template.getArchitecture().equals(architecture) || template.getArchitecture().equals(ArchitectureType.undefined)) {
            filteredList.add(template);
        }
    }
    return filteredList;
}
#method_after
public static ArrayList<VmTemplate> filterTemplatesByArchitecture(List<VmTemplate> list, ArchitectureType architecture) {
    ArrayList<VmTemplate> filteredList = new ArrayList<VmTemplate>();
    for (VmTemplate template : list) {
        if (template.getId().equals(Guid.Empty) || template.getClusterArch().equals(architecture)) {
            filteredList.add(template);
        }
    }
    return filteredList;
}
#end_block

#method_before
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.RunQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#method_after
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#end_block

#method_before
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#method_after
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#end_block

#method_before
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#method_after
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#end_block

#method_before
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#method_after
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#end_block

#method_before
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#method_after
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#method_after
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#method_after
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#end_block

#method_before
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.Model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#method_after
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#end_block

#method_before
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.RunQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#method_after
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#end_block

#method_before
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#method_after
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#end_block

#method_before
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#method_after
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#end_block

#method_before
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.RunQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#method_after
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#method_after
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#end_block

#method_before
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<permissions>) source : new ArrayList<permissions>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#method_after
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Permissions>) source : new ArrayList<Permissions>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#end_block

#method_before
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#method_after
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#end_block

#method_before
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#method_after
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#end_block

#method_before
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.RunQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#method_after
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#end_block

#method_before
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#method_after
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#end_block

#method_before
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#method_after
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#end_block

#method_before
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#method_after
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#end_block

#method_before
public static void getPmOptions(AsyncQuery aQuery, String pmType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.Data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.RunQuery(VdcQueryType.GetAgentFenceOptions, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getPmOptions(AsyncQuery aQuery, String pmType, String version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.getInstance().runQuery(VdcQueryType.GetAgentFenceOptions, new GetAgentFenceOptionsQueryParameters(version), aQuery);
}
#end_block

#method_before
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.RunQuery(VdcQueryType.Search, sp, aQuery);
}
#method_after
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#end_block

#method_before
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#method_after
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#end_block

#method_before
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#method_after
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#end_block

#method_before
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#method_after
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#end_block

#method_before
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                tags tag = (tags) source;
                tags root = new tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new tags();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                Tags tag = (Tags) source;
                Tags root = new Tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new Tags();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<tags> ret = new ArrayList<tags>();
                for (tags tags : (ArrayList<tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new tags();
        }
    };
}
#method_after
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<Tags> ret = new ArrayList<Tags>();
                for (Tags tags : (ArrayList<Tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new Tags();
        }
    };
}
#end_block

#method_before
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#method_after
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#end_block

#method_before
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.RunQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#method_after
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.getInstance().runQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#end_block

#method_before
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#method_after
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.getInstance().runQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#end_block

#method_before
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#method_after
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#end_block

#method_before
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#method_after
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#end_block

#method_before
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#end_block

#method_before
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#method_after
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#end_block

#method_before
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.RunQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#method_after
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#end_block

#method_before
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#method_after
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#end_block

#method_before
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.RunQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#method_after
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.getInstance().runQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#end_block

#method_before
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#method_after
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getInterfaceOptionsForEditNetwork(final AsyncQuery asyncQuery, final ArrayList<VdsNetworkInterface> interfaceList, final VdsNetworkInterface originalInterface, Network networkToEdit, final Guid vdsID, final StringBuilder defaultInterfaceName) {
    final ArrayList<VdsNetworkInterface> ifacesOptions = new ArrayList<VdsNetworkInterface>();
    for (VdsNetworkInterface i : interfaceList) {
        if (StringHelper.isNullOrEmpty(i.getNetworkName()) && StringHelper.isNullOrEmpty(i.getBondName())) {
            ifacesOptions.add(i);
        }
    }
    if (// no vlan:
    originalInterface.getVlanId() == null) {
        // Filter out the Interfaces that have child vlan Interfaces
        getAllChildVlanInterfaces(vdsID, ifacesOptions, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void executed(FrontendMultipleQueryAsyncResult result) {
                ArrayList<VdsNetworkInterface> ifacesOptionsTemp = new ArrayList<VdsNetworkInterface>();
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                for (int i = 0; i < returnValueList.size(); i++) {
                    VdcQueryReturnValue returnValue = returnValueList.get(i);
                    if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
                        ArrayList<VdsNetworkInterface> childVlanInterfaces = (ArrayList<VdsNetworkInterface>) (returnValue.getReturnValue());
                        if (childVlanInterfaces.size() == 0) {
                            ifacesOptionsTemp.add(ifacesOptions.get(i));
                        }
                    }
                }
                ifacesOptions.clear();
                ifacesOptions.addAll(ifacesOptionsTemp);
                if (originalInterface.getBonded() != null && originalInterface.getBonded()) {
                    // (note that choosing one of them will break the bond):
                    for (VdsNetworkInterface i : interfaceList) {
                        if (StringHelper.stringsEqual(i.getBondName(), originalInterface.getName())) {
                            ifacesOptions.add(i);
                        }
                    }
                }
                // add the original interface as an option and set it as the default option:
                ifacesOptions.add(originalInterface);
                defaultInterfaceName.append(originalInterface.getName());
                asyncQuery.asyncCallback.onSuccess(asyncQuery.Model, ifacesOptions);
            }
        });
    } else // vlan:
    {
        getVlanParentInterface(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                final VdsNetworkInterface vlanParent = (VdsNetworkInterface) returnValue;
                if (vlanParent != null && vlanParent.getBonded() != null && vlanParent.getBonded()) {
                    interfaceHasSiblingVlanInterfaces(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model, Object returnValue) {
                            Boolean interfaceHasSiblingVlanInterfaces = (Boolean) returnValue;
                            if (!interfaceHasSiblingVlanInterfaces) {
                                // vlanParent.name).ToList());
                                for (VdsNetworkInterface i : interfaceList) {
                                    if (StringHelper.stringsEqual(i.getBondName(), vlanParent.getName())) {
                                        ifacesOptions.add(i);
                                    }
                                }
                            }
                            // the vlanParent should already be in ifacesOptions
                            // (since it has no network_name or bond_name).
                            defaultInterfaceName.append(vlanParent.getName());
                            asyncQuery.asyncCallback.onSuccess(asyncQuery.Model, ifacesOptions);
                        }
                    }));
                } else {
                    // (since it has no network_name or bond_name).
                    if (vlanParent != null)
                        defaultInterfaceName.append(vlanParent.getName());
                    asyncQuery.asyncCallback.onSuccess(asyncQuery.Model, ifacesOptions);
                }
            }
        }));
    }
}
#method_after
public static void getInterfaceOptionsForEditNetwork(final AsyncQuery asyncQuery, final ArrayList<VdsNetworkInterface> interfaceList, final VdsNetworkInterface originalInterface, Network networkToEdit, final Guid vdsID, final StringBuilder defaultInterfaceName) {
    final ArrayList<VdsNetworkInterface> ifacesOptions = new ArrayList<VdsNetworkInterface>();
    for (VdsNetworkInterface i : interfaceList) {
        if (StringHelper.isNullOrEmpty(i.getNetworkName()) && StringHelper.isNullOrEmpty(i.getBondName())) {
            ifacesOptions.add(i);
        }
    }
    if (// no vlan:
    originalInterface.getVlanId() == null) {
        // Filter out the Interfaces that have child vlan Interfaces
        getAllChildVlanInterfaces(vdsID, ifacesOptions, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void executed(FrontendMultipleQueryAsyncResult result) {
                ArrayList<VdsNetworkInterface> ifacesOptionsTemp = new ArrayList<VdsNetworkInterface>();
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                for (int i = 0; i < returnValueList.size(); i++) {
                    VdcQueryReturnValue returnValue = returnValueList.get(i);
                    if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
                        ArrayList<VdsNetworkInterface> childVlanInterfaces = (ArrayList<VdsNetworkInterface>) (returnValue.getReturnValue());
                        if (childVlanInterfaces.size() == 0) {
                            ifacesOptionsTemp.add(ifacesOptions.get(i));
                        }
                    }
                }
                ifacesOptions.clear();
                ifacesOptions.addAll(ifacesOptionsTemp);
                if (originalInterface.getBonded() != null && originalInterface.getBonded()) {
                    // (note that choosing one of them will break the bond):
                    for (VdsNetworkInterface i : interfaceList) {
                        if (StringHelper.stringsEqual(i.getBondName(), originalInterface.getName())) {
                            ifacesOptions.add(i);
                        }
                    }
                }
                // add the original interface as an option and set it as the default option:
                ifacesOptions.add(originalInterface);
                defaultInterfaceName.append(originalInterface.getName());
                asyncQuery.asyncCallback.onSuccess(asyncQuery.model, ifacesOptions);
            }
        });
    } else // vlan:
    {
        getVlanParentInterface(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                final VdsNetworkInterface vlanParent = (VdsNetworkInterface) returnValue;
                if (vlanParent != null && vlanParent.getBonded() != null && vlanParent.getBonded()) {
                    interfaceHasSiblingVlanInterfaces(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model, Object returnValue) {
                            Boolean interfaceHasSiblingVlanInterfaces = (Boolean) returnValue;
                            if (!interfaceHasSiblingVlanInterfaces) {
                                // vlanParent.name).ToList());
                                for (VdsNetworkInterface i : interfaceList) {
                                    if (StringHelper.stringsEqual(i.getBondName(), vlanParent.getName())) {
                                        ifacesOptions.add(i);
                                    }
                                }
                            }
                            // the vlanParent should already be in ifacesOptions
                            // (since it has no network_name or bond_name).
                            defaultInterfaceName.append(vlanParent.getName());
                            asyncQuery.asyncCallback.onSuccess(asyncQuery.model, ifacesOptions);
                        }
                    }));
                } else {
                    // (since it has no network_name or bond_name).
                    if (vlanParent != null)
                        defaultInterfaceName.append(vlanParent.getName());
                    asyncQuery.asyncCallback.onSuccess(asyncQuery.model, ifacesOptions);
                }
            }
        }));
    }
}
#end_block

#method_before
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.RunMultipleQueries(queryTypeList, parametersList, callback);
}
#method_after
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.getInstance().runMultipleQueries(queryTypeList, parametersList, callback);
}
#end_block

#method_before
public static void fillTagsRecursive(tags tagToFill, List<tags> children) {
    ArrayList<tags> list = new ArrayList<tags>();
    for (tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#method_after
public static void fillTagsRecursive(Tags tagToFill, List<Tags> children) {
    ArrayList<Tags> list = new ArrayList<Tags>();
    for (Tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#end_block

#method_before
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.GetNotificationEvents();
}
#method_after
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.getNotificationEvents();
}
#end_block

#method_before
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#method_after
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#end_block

#method_before
public static ArrayList<DiskInterface> getDiskInterfaceList(Version clusterVersion) {
    ArrayList<DiskInterface> diskInterfaces = new ArrayList<DiskInterface>(Arrays.asList(new DiskInterface[] { DiskInterface.IDE, DiskInterface.VirtIO }));
    boolean isVirtIOScsiEnabled = clusterVersion != null ? (Boolean) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VirtIoScsiEnabled, clusterVersion.getValue()) : true;
    if (isVirtIOScsiEnabled) {
        diskInterfaces.add(DiskInterface.VirtIO_SCSI);
    }
    return diskInterfaces;
}
#method_after
public static void getDiskInterfaceList(int osId, Version clusterVersion, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> interfaces = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<DiskInterface> interfaceTypes = new ArrayList<DiskInterface>();
            for (String diskIfs : interfaces) {
                try {
                    interfaceTypes.add(DiskInterface.valueOf(diskIfs));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetDiskInterfaces, osId, clusterVersion), asyncQuery);
}
#end_block

#method_before
public static String getNewNicName(ArrayList<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#method_after
public static String getNewNicName(List<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#end_block

#method_before
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#method_after
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#end_block

#method_before
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#method_after
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#end_block

#method_before
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#method_after
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            // Initialize specific UI dependencies for search
            SimpleDependecyInjector.getInstance().bind(new OsValueAutoCompleter(uniqueOsNames));
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#end_block

#method_before
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#method_after
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#end_block

#method_before
public static void hasSpiceSupport(int osId, Version version, AsyncQuery callback) {
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.HasSpiceSupport, osId, version), callback);
}
#method_after
public static boolean hasSpiceSupport(int osId, Version version) {
    return getDisplayTypes(osId, version).contains(DisplayType.qxl);
}
#end_block

#method_before
public static List<Integer> getOsIds() {
    return osIds;
}
#method_after
public static List<Integer> getOsIds(ArchitectureType architectureType) {
    List<Integer> osIds = new ArrayList<Integer>();
    for (Entry<Integer, ArchitectureType> entry : osArchitectures.entrySet()) {
        if (entry.getValue() == architectureType) {
            osIds.add(entry.getKey());
        }
    }
    Collections.sort(osIds, new Comparator<Integer>() {

        @Override
        public int compare(Integer o1, Integer o2) {
            return osNames.get(o1).compareTo(osNames.get(o2));
        }
    });
    return osIds;
}
#end_block

#method_before
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#method_after
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#end_block

#method_before
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#method_after
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#method_after
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#end_block

#method_before
public ArrayList<VdcActionParametersBase> buildParameters(List<VdsNetworkInterface> nics) {
    Set<Guid> nonUpdateableHosts = new HashSet<>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    boolean vlanNetwork = NetworkUtils.isVlan(network);
    for (VdsNetworkInterface nic : nics) {
        SetupNetworksParameters setupNetworkParams = createSetupNetworksParameters(nic.getVdsId());
        VdsNetworkInterface nicToConfigure = getNicToConfigure(setupNetworkParams.getInterfaces(), nic.getId());
        if (nicToConfigure == null) {
            continue;
        }
        if (network.getName().equals(nicToConfigure.getNetworkName())) {
            nicToConfigure.setNetworkName(null);
        } else if (vlanNetwork) {
            VdsNetworkInterface vlan = getVlanDevice(setupNetworkParams, nicToConfigure);
            if (vlan == null) {
                nonUpdateableHosts.add(nic.getVdsId());
            } else {
                setupNetworkParams.getInterfaces().remove(vlan);
            }
        } else {
            // if a network is assigned to nic other than the labeled one
            nonUpdateableHosts.add(nic.getVdsId());
            continue;
        }
        parameters.add(setupNetworkParams);
    }
    reportNonUpdateableHosts(nonUpdateableHosts);
    return parameters;
}
#method_after
public ArrayList<VdcActionParametersBase> buildParameters(List<VdsNetworkInterface> nics) {
    Set<Guid> nonUpdateableHosts = new HashSet<>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    boolean vlanNetwork = NetworkUtils.isVlan(network);
    for (VdsNetworkInterface nic : nics) {
        SetupNetworksParameters setupNetworkParams = createSetupNetworksParameters(nic.getVdsId());
        VdsNetworkInterface nicToConfigure = getNicToConfigure(setupNetworkParams.getInterfaces(), nic.getId());
        if (network.getName().equals(nicToConfigure.getNetworkName())) {
            nicToConfigure.setNetworkName(null);
        } else if (vlanNetwork) {
            VdsNetworkInterface vlan = getVlanDevice(setupNetworkParams.getInterfaces(), nicToConfigure);
            if (vlan == null) {
                nonUpdateableHosts.add(nic.getVdsId());
            } else {
                setupNetworkParams.getInterfaces().remove(vlan);
            }
        } else {
            // if a network is assigned to nic other than the labeled one
            nonUpdateableHosts.add(nic.getVdsId());
            continue;
        }
        parameters.add(setupNetworkParams);
    }
    reportNonUpdateableHosts(nonUpdateableHosts);
    return parameters;
}
#end_block

#method_before
private VdsNetworkInterface getVlanDevice(SetupNetworksParameters setupNetworkParams, VdsNetworkInterface nicToConfigure) {
    VdsNetworkInterface vlan = null;
    for (VdsNetworkInterface n : setupNetworkParams.getInterfaces()) {
        if (StringUtils.equals(n.getName(), NetworkUtils.getVlanDeviceName(nicToConfigure.getName(), network))) {
            vlan = n;
        }
    }
    return vlan;
}
#method_after
private VdsNetworkInterface getVlanDevice(List<VdsNetworkInterface> nics, VdsNetworkInterface baseNic) {
    for (VdsNetworkInterface n : nics) {
        if (StringUtils.equals(n.getName(), NetworkUtils.getVlanDeviceName(baseNic, network)) || StringUtils.equals(n.getNetworkName(), network.getName())) {
            return n;
        }
    }
    return null;
}
#end_block

#method_before
public ArrayList<VdcActionParametersBase> buildParameters(List<VdsNetworkInterface> nics) {
    Set<Guid> nonUpdateableHosts = new HashSet<>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    boolean vlanNetwork = NetworkUtils.isVlan(network);
    for (VdsNetworkInterface nic : nics) {
        SetupNetworksParameters setupNetworkParams = createSetupNetworksParameters(nic.getVdsId());
        VdsNetworkInterface nicToConfigure = getNicToConfigure(setupNetworkParams.getInterfaces(), nic.getId());
        if (nicToConfigure == null) {
            continue;
        }
        if (vlanNetwork) {
            VdsNetworkInterface vlan = createVlanDevice(nic.getName(), nicToConfigure.getVdsId(), network);
            setupNetworkParams.getInterfaces().add(vlan);
        } else if (nicToConfigure.getNetworkName() == null) {
            nicToConfigure.setNetworkName(network.getName());
        } else {
            // if a network is already assigned to that nic, it cannot be configured
            nonUpdateableHosts.add(nic.getVdsId());
            continue;
        }
        parameters.add(setupNetworkParams);
    }
    reportNonUpdateableHosts(nonUpdateableHosts);
    return parameters;
}
#method_after
public ArrayList<VdcActionParametersBase> buildParameters(List<VdsNetworkInterface> nics) {
    Set<Guid> nonUpdateableHosts = new HashSet<>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    boolean vlanNetwork = NetworkUtils.isVlan(network);
    for (VdsNetworkInterface nic : nics) {
        SetupNetworksParameters setupNetworkParams = createSetupNetworksParameters(nic.getVdsId());
        VdsNetworkInterface nicToConfigure = getNicToConfigure(setupNetworkParams.getInterfaces(), nic.getId());
        if (vlanNetwork) {
            VdsNetworkInterface vlan = createVlanDevice(nic.getName(), nicToConfigure.getVdsId(), network);
            setupNetworkParams.getInterfaces().add(vlan);
        } else if (nicToConfigure.getNetworkName() == null) {
            nicToConfigure.setNetworkName(network.getName());
        } else {
            // if a network is already assigned to that nic, it cannot be configured
            nonUpdateableHosts.add(nic.getVdsId());
            continue;
        }
        parameters.add(setupNetworkParams);
    }
    reportNonUpdateableHosts(nonUpdateableHosts);
    return parameters;
}
#end_block

#method_before
private void reportNonUpdateableHosts(Set<Guid> nonUpdateableHosts) {
    if (nonUpdateableHosts.isEmpty()) {
        return;
    }
    List<String> hostNames = new ArrayList<>(nonUpdateableHosts.size());
    for (Guid hostId : nonUpdateableHosts) {
        hostNames.add(getDbFacade().getVdsStaticDao().get(hostId).getName());
    }
    AuditLogableBase logable = new AuditLogableBase();
    logable.setStoragePoolId(network.getDataCenterId());
    logable.addCustomValue("Network", network.getName());
    logable.addCustomValue("HostNames", StringUtils.join(hostNames, ", "));
    AuditLogDirector.log(logable, AuditLogType.ADD_NETWORK_BY_LABEL_FAILED);
}
#method_after
private void reportNonUpdateableHosts(Set<Guid> nonUpdateableHosts) {
    if (nonUpdateableHosts.isEmpty()) {
        return;
    }
    List<String> hostNames = new ArrayList<>(nonUpdateableHosts.size());
    for (Guid hostId : nonUpdateableHosts) {
        hostNames.add(getDbFacade().getVdsStaticDao().get(hostId).getName());
    }
    AuditLogableBase logable = new AuditLogableBase();
    logable.setStoragePoolId(network.getDataCenterId());
    logable.addCustomValue("Network", network.getName());
    logable.addCustomValue("HostNames", StringUtils.join(hostNames, ", "));
    logable.addCustomValue("Label", network.getLabel());
    AuditLogDirector.log(logable, AuditLogType.ADD_NETWORK_BY_LABEL_FAILED);
}
#end_block

#method_before
@Override
public void edit(ConfirmationModel object) {
    driver.edit(object);
    // Bind "Latch.IsAvailable"
    object.getLatch().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if ("IsAvailable".equals(((PropertyChangedEventArgs) args).PropertyName)) {
                // $NON-NLS-1$
                EntityModel entity = (EntityModel) sender;
                if (entity.getIsAvailable()) {
                    latch.setVisible(true);
                }
            }
        }
    });
    force.setLabel(object.getForceLabel());
    force.asCheckBox().setValue((Boolean) object.getForce().getEntity());
    // Bind "Force.Label"
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if ("ForceLabel".equals(((PropertyChangedEventArgs) args).PropertyName)) {
                // $NON-NLS-1$
                ConfirmationModel entity = (ConfirmationModel) sender;
                force.setLabel(entity.getForceLabel());
            }
        }
    });
    setNote(object.getNote());
    // Bind "Note"
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if ("Note".equals(((PropertyChangedEventArgs) args).PropertyName)) {
                // $NON-NLS-1$
                ConfirmationModel entity = (ConfirmationModel) sender;
                setNote(entity.getNote());
            }
        }
    });
}
#method_after
@Override
public void edit(ConfirmationModel object) {
    driver.edit(object);
    // Bind "Latch.IsAvailable"
    object.getLatch().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if ("IsAvailable".equals(((PropertyChangedEventArgs) args).propertyName)) {
                // $NON-NLS-1$
                EntityModel entity = (EntityModel) sender;
                if (entity.getIsAvailable()) {
                    latch.setVisible(true);
                }
            }
        }
    });
    if (object.getForceLabel() != null) {
        force.setLabel(object.getForceLabel());
    }
    force.asCheckBox().setValue((Boolean) object.getForce().getEntity());
    // Bind "Force.Label"
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if ("ForceLabel".equals(((PropertyChangedEventArgs) args).PropertyName)) {
                // $NON-NLS-1$
                ConfirmationModel entity = (ConfirmationModel) sender;
                force.setLabel(entity.getForceLabel());
            }
        }
    });
    setNote(object.getNote());
    // Bind "Note"
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if ("Note".equals(((PropertyChangedEventArgs) args).propertyName)) {
                // $NON-NLS-1$
                ConfirmationModel entity = (ConfirmationModel) sender;
                setNote(entity.getNote());
            }
        }
    });
}
#end_block

#method_before
protected void getPKITrustV1(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    log.info(String.format("PKI Trust request: source='%s', secured='%s'", request.getRemoteHost(), request.isSecure()));
    pkiResources.setHttpResponse(response, PKIResources.Resource.CACertificate, PKIResources.OutputType.X509_PEM_CA);
}
#method_after
protected void getPKITrustV1(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    log.info(String.format("PKI Trust request: source='%s', secured='%s'", request.getRemoteHost(), request.isSecure()));
    try (PrintWriter out = response.getWriter()) {
        response.setContentType(PKIResources.Resource.CACertificate.getContentType(PKIResources.Format.X509_PEM_CA));
        out.print(PKIResources.Resource.CACertificate.toString(PKIResources.Format.X509_PEM_CA));
    }
}
#end_block

#method_before
protected void getSSHTrustV1(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    log.info(String.format("SSH Trust request: source='%s', secured='%s'", request.getRemoteHost(), request.isSecure()));
    pkiResources.setHttpResponse(response, PKIResources.Resource.EngineCertificate, PKIResources.OutputType.OPENSSH_PUBKEY);
}
#method_after
protected void getSSHTrustV1(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    log.info(String.format("SSH Trust request: source='%s', secured='%s'", request.getRemoteHost(), request.isSecure()));
    try (PrintWriter out = response.getWriter()) {
        response.setContentType(PKIResources.Resource.EngineCertificate.getContentType(PKIResources.Format.OPENSSH_PUBKEY));
        out.print(PKIResources.Resource.EngineCertificate.toString(PKIResources.Format.OPENSSH_PUBKEY));
    }
}
#end_block

#method_before
@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    String versionString = request.getParameter("version");
    int version = 0;
    if (versionString != null) {
        version = Integer.parseInt(versionString);
    }
    switch(version) {
        default:
            throw new RuntimeException(String.format("Interface version %d is not supported", version));
        case 0:
            doV0(request, response);
            break;
        case 1:
            doV1(request, response);
            break;
    }
}
#method_after
@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    String versionString = request.getParameter("version");
    int version;
    if (versionString == null) {
        version = 0;
    } else {
        version = -1;
        try {
            version = Integer.parseInt(versionString);
        } catch (NumberFormatException e) {
        }
    }
    switch(version) {
        default:
            String m = String.format("Invalid registration protocol version %s", version);
            log.error(m);
            response.sendError(response.SC_BAD_REQUEST, m);
            break;
        case 0:
            doV0(request, response);
            break;
        case 1:
            doV1(request, response);
            break;
    }
}
#end_block

#method_before
@OnTimerMethodAnnotation("startFailedAutoStartVms")
public void startFailedAutoStartVms() {
    LinkedList<Pair<Guid, DateTime>> idsToRemove = new LinkedList<>();
    final DateTime now = DateTime.getNow();
    final DateTime nextTimeOfRetryToRun = now.AddSeconds(RETRY_TO_RUN_HA_VM_INTERVAL);
    for (Pair<Guid, DateTime> vmIdAndDateTime : autoStartVmsToRun) {
        // if it is not the time to rerun this VM yet, skip for now
        if (now.compareTo(vmIdAndDateTime.getSecond()) < 0) {
            continue;
        }
        Guid vmId = vmIdAndDateTime.getFirst();
        EngineLock runVmLock = createLockForRunVmCommand(vmId);
        if (!getLockManager().acquireLock(runVmLock).getFirst()) {
            log.infoFormat("Could not acquire lock for running HA VM {0}", vmId);
            continue;
        }
        if (!runVm(vmId, runVmLock) && getVmDynamicDao().get(vmId).getStatus() == VMStatus.Down) {
            AuditLogableBase event = new AuditLogableBase();
            event.setVmId(vmId);
            AuditLogDirector.log(event, AuditLogType.HA_VM_RESTART_FAILED);
            vmIdAndDateTime.setSecond(nextTimeOfRetryToRun);
            continue;
        }
        // the VM reached status which is different from Down, therefore we can remove it from
        // the set and from now on errors will be detected by VdsUpdateRuntimeInfo
        idsToRemove.add(vmIdAndDateTime);
    }
    autoStartVmsToRun.removeAll(idsToRemove);
}
#method_after
@OnTimerMethodAnnotation("startFailedAutoStartVms")
public void startFailedAutoStartVms() {
    LinkedList<AutoStartVmToRestart> vmsToRemove = new LinkedList<>();
    final DateTime iterationStartTime = DateTime.getNow();
    final Date nextTimeOfRetryToRun = iterationStartTime.addSeconds(RETRY_TO_RUN_HA_VM_INTERVAL);
    for (AutoStartVmToRestart autoStartVmToRestart : autoStartVmsToRestart) {
        // (we'll try again in the next iteration)
        if (!autoStartVmToRestart.isTimeToRun(iterationStartTime)) {
            continue;
        }
        Guid vmId = autoStartVmToRestart.getVmId();
        EngineLock runVmLock = createEngineLockForRunVm(vmId);
        // acquired, skip for now  and we'll try again in the next iteration
        if (!acquireLock(runVmLock)) {
            log.debugFormat("Could not acquire lock for running HA VM {0}", vmId);
            continue;
        }
        if (!isVmNeedsToBeAutoStarted(vmId)) {
            // if the VM doesn't need to be auto started anymore, release the lock and
            // remove the VM from the collection of VMs that should be auto started
            releaseLock(runVmLock);
            vmsToRemove.add(autoStartVmToRestart);
            continue;
        }
        if (runVm(vmId, runVmLock)) {
            // the VM reached WaitForLunch, so from now on this job is not responsible
            // to auto start it, future failures will be detected by the monitoring
            vmsToRemove.add(autoStartVmToRestart);
        } else {
            logFailedAttemptToRestartHighlyAvailableVm(vmId);
            if (!autoStartVmToRestart.scheduleNextTimeToRun(nextTimeOfRetryToRun)) {
                // if we could not schedule the next time to run the VM, it means
                // that we reached the maximum number of tried so don't try anymore
                vmsToRemove.add(autoStartVmToRestart);
                logFailureToRestartHighlyAvailableVm(vmId);
            }
        }
    }
    autoStartVmsToRestart.removeAll(vmsToRemove);
}
#end_block

#method_before
public void addVmToRun(Guid vmId) {
    autoStartVmsToRun.add(new Pair<>(vmId, DateTime.getNow()));
}
#method_after
public void addVmToRun(Guid vmId) {
    autoStartVmsToRestart.add(new AutoStartVmToRestart(vmId));
}
#end_block

#method_before
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setName(rs.getString("vm_name"));
    entity.setQuotaId(getGuid(rs, "quota_id"));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setVmOs(rs.getInt("vm_os"));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setComment(rs.getString("vm_comment"));
    entity.setVmDomain(rs.getString("vm_domain"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOsId(rs.getInt("vmt_os"));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmFQDN(rs.getString("vm_fqdn"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(getGuid(rs, "console_user_id"));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(getGuid(rs, "run_on_vds"));
    entity.setMigratingToVds(getGuid(rs, "migrating_to_vds"));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(getGuid(rs, "vm_pool_id"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(getGuid(rs, "last_vds_run_on"));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setCpuShares(rs.getInt("cpu_shares"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setRunAndPause(rs.getBoolean("is_run_and_pause"));
    entity.setLastWatchdogEvent(getLong(rs, "last_watchdog_event"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setRunOnce(rs.getBoolean("is_run_once"));
    entity.setCreatedByUserId(getGuid(rs, "created_by_user_id"));
    entity.setCpuName(rs.getString("cpu_name"));
    entity.setInstanceTypeId(Guid.createGuidFromString(rs.getString("instance_type_id")));
    entity.setImageTypeId(Guid.createGuidFromString(rs.getString("image_type_id")));
    return entity;
}
#method_after
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setName(rs.getString("vm_name"));
    entity.setQuotaId(getGuid(rs, "quota_id"));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setVmOs(rs.getInt("vm_os"));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setComment(rs.getString("vm_comment"));
    entity.setVmDomain(rs.getString("vm_domain"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOsId(rs.getInt("vmt_os"));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmFQDN(rs.getString("vm_fqdn"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(getGuid(rs, "console_user_id"));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(getGuid(rs, "run_on_vds"));
    entity.setMigratingToVds(getGuid(rs, "migrating_to_vds"));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(getGuid(rs, "vm_pool_id"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setSsoMethod(SsoMethod.fromString(rs.getString("sso_method")));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(getGuid(rs, "last_vds_run_on"));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setCpuShares(rs.getInt("cpu_shares"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setRunAndPause(rs.getBoolean("is_run_and_pause"));
    entity.setLastWatchdogEvent(getLong(rs, "last_watchdog_event"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setRunOnce(rs.getBoolean("is_run_once"));
    entity.setCreatedByUserId(getGuid(rs, "created_by_user_id"));
    entity.setCpuName(rs.getString("cpu_name"));
    entity.setInstanceTypeId(Guid.createGuidFromString(rs.getString("instance_type_id")));
    entity.setImageTypeId(Guid.createGuidFromString(rs.getString("image_type_id")));
    entity.setClusterArch(ArchitectureType.forValue(rs.getInt("architecture")));
    entity.setOriginalTemplateName(rs.getString("original_template_name"));
    entity.setOriginalTemplateGuid(getGuid(rs, "original_template_id"));
    entity.setVmPoolSpiceProxy(rs.getString("vm_pool_spice_proxy"));
    entity.setVdsGroupSpiceProxy(rs.getString("vds_group_spice_proxy"));
    return entity;
}
#end_block

#method_before
@Override
protected void executeVdsBrokerCommand() {
    final Map<String, String> domains = StoragePoolDomainHelper.getStoragePoolIsoMap(getParameters().getDomainsList());
    status = getBroker().reconstructMaster(getParameters().getStoragePoolId().toString(), getParameters().getStoragePoolName(), getParameters().getMasterDomainId().toString(), domains, getParameters().getMasterVersion(), Config.<String>getValue(ConfigValues.LockPolicy), Config.<Integer>getValue(ConfigValues.LockRenewalIntervalSec), Config.<Integer>getValue(ConfigValues.LeaseTimeSec), Config.<Integer>getValue(ConfigValues.IoOpTimeoutSec), Config.<Integer>getValue(ConfigValues.LeaseRetries), getParameters().getVdsSpmId());
    proceedProxyReturnValue();
}
#method_after
@Override
protected void executeVdsBrokerCommand() {
    final Map<String, String> domains = StoragePoolDomainHelper.buildStoragePoolDomainsMap(getParameters().getDomainsList());
    status = getBroker().reconstructMaster(getParameters().getStoragePoolId().toString(), getParameters().getStoragePoolName(), getParameters().getMasterDomainId().toString(), domains, getParameters().getMasterVersion(), Config.<String>getValue(ConfigValues.LockPolicy), Config.<Integer>getValue(ConfigValues.LockRenewalIntervalSec), Config.<Integer>getValue(ConfigValues.LeaseTimeSec), Config.<Integer>getValue(ConfigValues.IoOpTimeoutSec), Config.<Integer>getValue(ConfigValues.LeaseRetries), getParameters().getVdsSpmId());
    proceedProxyReturnValue();
}
#end_block

#method_before
public static boolean isNonVmNonVlanNetwork(Network network) {
    return !network.isVmNetwork() && network.getVlanId() == null;
}
#method_after
public static boolean isNonVmNonVlanNetwork(Network network) {
    return !network.isVmNetwork() && !isVlan(network);
}
#end_block

#method_before
protected void onNicsChanged() {
    operationFactory = new NetworkOperationFactory(getNetworks(), getNics());
    queryFreeBonds();
    validate();
    getNetworksChangedEvent().raise(this, EventArgs.empty);
}
#method_after
protected void onNicsChanged() {
    operationFactory = new NetworkOperationFactory(getNetworks(), getNics());
    queryFreeBonds();
    validate();
    getNetworksChangedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
private void setNetworks(Map<String, LogicalNetworkModel> networks) {
    networkMap = networks;
    getNetworksChangedEvent().raise(this, EventArgs.empty);
}
#method_after
private void setNetworks(Map<String, LogicalNetworkModel> networks) {
    networkMap = networks;
    getNetworksChangedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
private void setNics(Map<String, NetworkInterfaceModel> nics) {
    nicMap = nics;
    onNicsChanged();
    getNicsChangedEvent().raise(this, EventArgs.empty);
}
#method_after
private void setNics(Map<String, NetworkInterfaceModel> nics) {
    nicMap = nics;
    onNicsChanged();
    getNicsChangedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
public void editHost() {
    // Let's the parent model know about request.
    getRequestEditEvent().raise(this, EventArgs.empty);
}
#method_after
public void editHost() {
    // Let's the parent model know about request.
    getRequestEditEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
public void postOnSave(VdcReturnValueBase returnValue) {
    getWindow().stopProgress();
    if (returnValue != null && returnValue.getSucceeded()) {
        cancel();
    // Cancel() triggers a force refresh
    // getSearchCommand().Execute();
    }
    privateItemSavedEvent.raise(this, EventArgs.empty);
}
#method_after
public void postOnSave(VdcReturnValueBase returnValue) {
    getWindow().stopProgress();
    if (returnValue != null && returnValue.getSucceeded()) {
        cancel();
    // Cancel() triggers a force refresh
    // getSearchCommand().Execute();
    }
    privateItemSavedEvent.raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
private void doAction() {
    getExecutedEvent().raise(this, EventArgs.empty);
// Executed(this, EventArgs.Empty);
}
#method_after
private void doAction() {
    getExecutedEvent().raise(this, EventArgs.EMPTY);
// Executed(this, EventArgs.Empty);
}
#end_block

#method_before
@Override
protected void syncSearch() {
    if (getEntity() != null) {
        GlusterVolumeEntity glusterVolumeEntity = (GlusterVolumeEntity) getEntity();
        // If the items are same, just fire the item changed event to make sure that items are displayed
        if (getItems() == glusterVolumeEntity.getBricks()) {
            getItemsChangedEvent().raise(this, EventArgs.empty);
        } else {
            setItems(glusterVolumeEntity.getBricks());
        }
    } else {
        setItems(null);
    }
}
#method_after
@Override
protected void syncSearch() {
    if (getEntity() != null) {
        GlusterVolumeEntity glusterVolumeEntity = (GlusterVolumeEntity) getEntity();
        // If the items are same, just fire the item changed event to make sure that items are displayed
        if (getItems() == glusterVolumeEntity.getBricks()) {
            getItemsChangedEvent().raise(this, EventArgs.EMPTY);
        } else {
            setItems(glusterVolumeEntity.getBricks());
        }
    } else {
        setItems(null);
    }
}
#end_block

#method_before
private void raiseQueryEvent(final Event queryEvent, final VdcQueryType queryType, final String context) {
    if (context != null && subscribedQueryTypes != null) {
        for (VdcQueryType vdcQueryType : subscribedQueryTypes) {
            if (queryType.equals(vdcQueryType)) {
                currentContext = context;
                queryEvent.raise(Frontend.class, EventArgs.empty);
            }
        }
    }
}
#method_after
private void raiseQueryEvent(final Event queryEvent, final VdcQueryType queryType, final String context) {
    if (context != null && subscribedQueryTypes != null) {
        for (VdcQueryType vdcQueryType : subscribedQueryTypes) {
            if (queryType.equals(vdcQueryType)) {
                currentContext = context;
                queryEvent.raise(Frontend.class, EventArgs.EMPTY);
            }
        }
    }
}
#end_block

#method_before
private void handleNotLoggedInEvent(final String errorMessage) {
    if (errorMessage != null && errorMessage.equals("USER_IS_NOT_LOGGED_IN")) {
        // $NON-NLS-1$
        frontendNotLoggedInEvent.raise(Frontend.class, EventArgs.empty);
    }
}
#method_after
private void handleNotLoggedInEvent(final String errorMessage) {
    if (errorMessage != null && errorMessage.equals("USER_IS_NOT_LOGGED_IN")) {
        // $NON-NLS-1$
        frontendNotLoggedInEvent.raise(Frontend.class, EventArgs.EMPTY);
    }
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        getItemsChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#method_after
@Override
public void setItems(Iterable value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        getItemsChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#end_block

#method_before
@Override
public void onVmAndPoolLoad() {
    if (getvms() != null && getpools() != null) {
        // Complete search.
        // Remove pools that has provided VMs.
        ArrayList<VmPool> filteredPools = new ArrayList<VmPool>();
        poolMap = new HashMap<Guid, VmPool>();
        for (VmPool pool : getpools()) {
            // Add pool to map.
            poolMap.put(pool.getVmPoolId(), pool);
            int attachedVmsCount = 0;
            for (VM vm : getvms()) {
                if (vm.getVmPoolId() != null && vm.getVmPoolId().equals(pool.getVmPoolId())) {
                    attachedVmsCount++;
                }
            }
            if (attachedVmsCount < pool.getMaxAssignedVmsPerUser()) {
                filteredPools.add(pool);
            }
        }
        // Merge VMs and Pools, and create item models.
        List all = Linq.concat(getvms(), filteredPools);
        consoleModelsCache.updateCache(filterVms(all));
        Collections.sort(all, new NameableComparator());
        ArrayList<Model> items = new ArrayList<Model>();
        for (Object item : all) {
            VmConsoles consoles = null;
            if (item instanceof VM) {
                consoles = consoleModelsCache.getVmConsolesForVm((VM) item);
            }
            UserPortalItemModel model = new UserPortalItemModel(item, consoles);
            model.setEntity(item);
            items.add(model);
        }
        setItems(items);
        setCanConnectAutomatically(getAutoConnectableConsoles().size() == 1);
        setvms(null);
        setpools(null);
        getSearchCompletedEvent().raise(this, EventArgs.empty);
    }
}
#method_after
@Override
public void onVmAndPoolLoad() {
    if (getvms() != null && getpools() != null) {
        // Complete search.
        // Remove pools that has provided VMs.
        ArrayList<VmPool> filteredPools = new ArrayList<VmPool>();
        poolMap = new HashMap<Guid, VmPool>();
        for (VmPool pool : getpools()) {
            // Add pool to map.
            poolMap.put(pool.getVmPoolId(), pool);
            int attachedVmsCount = 0;
            for (VM vm : getvms()) {
                if (vm.getVmPoolId() != null && vm.getVmPoolId().equals(pool.getVmPoolId())) {
                    attachedVmsCount++;
                }
            }
            if (attachedVmsCount < pool.getMaxAssignedVmsPerUser()) {
                filteredPools.add(pool);
            }
        }
        // Merge VMs and Pools, and create item models.
        List all = Linq.concat(getvms(), filteredPools);
        consoleModelsCache.updateCache(filterVms(all));
        Collections.sort(all, new NameableComparator());
        ArrayList<Model> items = new ArrayList<Model>();
        for (Object item : all) {
            VmConsoles consoles = null;
            if (item instanceof VM) {
                consoles = consoleModelsCache.getVmConsolesForVm((VM) item);
            }
            UserPortalItemModel model = new UserPortalItemModel(item, consoles);
            model.setEntity(item);
            items.add(model);
        }
        setItems(items);
        setCanConnectAutomatically(getAutoConnectableConsoles().size() == 1);
        setvms(null);
        setpools(null);
        getSearchCompletedEvent().raise(this, EventArgs.EMPTY);
    }
}
#end_block

#method_before
protected void postDataCentersLoaded(final List<StoragePool> dataCenters) {
    AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            model.setDataCentersAndClusters(model, dataCenters, (List<VDSGroup>) returnValue, null);
            initCdImage();
            getPoolModelBehaviorInitializedEvent().raise(this, EventArgs.empty);
        }
    }, getModel().getHash()), true, false);
}
#method_after
protected void postDataCentersLoaded(final List<StoragePool> dataCenters) {
    AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            model.setDataCentersAndClusters(model, dataCenters, (List<VDSGroup>) returnValue, null);
            initCdImage();
            getPoolModelBehaviorInitializedEvent().raise(this, EventArgs.EMPTY);
        }
    }, getModel().getHash()), true, false);
}
#end_block

#method_before
public void setWANDisableEffects(List<WANDisableEffects> disableEffects) {
    this.wanDisableEffects = disableEffects;
    getWANDisableEffectsChangeEvent().raise(this, EventArgs.empty);
}
#method_after
public void setWANDisableEffects(List<WANDisableEffects> disableEffects) {
    this.wanDisableEffects = disableEffects;
    getWANDisableEffectsChangeEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
public void setWANColorDepth(WanColorDepth colorDepth) {
    this.wanColorDepth = colorDepth;
    getWANColorDepthChangedEvent().raise(this, EventArgs.empty);
}
#method_after
public void setWANColorDepth(WanColorDepth colorDepth) {
    this.wanColorDepth = colorDepth;
    getWANColorDepthChangedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
public void setUsbAutoShare(boolean usbAutoShare) {
    this.usbAutoShare = usbAutoShare;
    getUsbAutoShareChangedEvent().raise(this, EventArgs.empty);
}
#method_after
public void setUsbAutoShare(boolean usbAutoShare) {
    this.usbAutoShare = usbAutoShare;
    getUsbAutoShareChangedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
private void login() {
    getLoggedInEvent().raise(this, EventArgs.empty);
}
#method_after
private void login() {
    getLoggedInEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
public void addFilter(PolicyUnit policyUnit, boolean used, int position) {
    if (position != 0) {
        Guid removeEntry = null;
        for (Entry<Guid, Integer> entry : getFilterPositionMap().entrySet()) {
            if (entry.getValue().equals(position)) {
                removeEntry = entry.getKey();
                break;
            }
        }
        if (removeEntry != null) {
            getFilterPositionMap().remove(removeEntry);
        }
    }
    getFilterPositionMap().put(policyUnit.getId(), position);
    if (!used) {
        usedFilters.add(policyUnit);
        for (int i = 0; i < unusedFilters.size(); i++) {
            if (unusedFilters.get(i).getId().equals(policyUnit.getId())) {
                unusedFilters.remove(policyUnit);
                break;
            }
        }
    }
    refreshCustomProperties(null, false);
    getFiltersChangedEvent().raise(this, EventArgs.empty);
}
#method_after
public void addFilter(PolicyUnit policyUnit, boolean used, int position) {
    if (position != 0) {
        Guid removeEntry = null;
        for (Entry<Guid, Integer> entry : getFilterPositionMap().entrySet()) {
            if (entry.getValue().equals(position)) {
                removeEntry = entry.getKey();
                break;
            }
        }
        if (removeEntry != null) {
            getFilterPositionMap().remove(removeEntry);
        }
    }
    getFilterPositionMap().put(policyUnit.getId(), position);
    if (!used) {
        usedFilters.add(policyUnit);
        for (int i = 0; i < unusedFilters.size(); i++) {
            if (unusedFilters.get(i).getId().equals(policyUnit.getId())) {
                unusedFilters.remove(policyUnit);
                break;
            }
        }
    }
    refreshCustomProperties(null, false);
    getFiltersChangedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
public void removeFilter(PolicyUnit policyUnit) {
    unusedFilters.add(policyUnit);
    for (int i = 0; i < usedFilters.size(); i++) {
        if (usedFilters.get(i).getId().equals(policyUnit.getId())) {
            usedFilters.remove(i);
            break;
        }
    }
    refreshCustomProperties(policyUnit, false);
    getFiltersChangedEvent().raise(this, EventArgs.empty);
}
#method_after
public void removeFilter(PolicyUnit policyUnit) {
    unusedFilters.add(policyUnit);
    for (int i = 0; i < usedFilters.size(); i++) {
        if (usedFilters.get(i).getId().equals(policyUnit.getId())) {
            usedFilters.remove(i);
            break;
        }
    }
    refreshCustomProperties(policyUnit, false);
    getFiltersChangedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
public void addFunction(PolicyUnit policyUnit) {
    usedFunctions.add(new Pair<PolicyUnit, Integer>(policyUnit, 1));
    for (int i = 0; i < unusedFunctions.size(); i++) {
        if (unusedFunctions.get(i).getId().equals(policyUnit.getId())) {
            unusedFunctions.remove(policyUnit);
            break;
        }
    }
    refreshCustomProperties(null, false);
    getFunctionsChangedEvent().raise(this, EventArgs.empty);
}
#method_after
public void addFunction(PolicyUnit policyUnit) {
    usedFunctions.add(new Pair<PolicyUnit, Integer>(policyUnit, 1));
    for (int i = 0; i < unusedFunctions.size(); i++) {
        if (unusedFunctions.get(i).getId().equals(policyUnit.getId())) {
            unusedFunctions.remove(policyUnit);
            break;
        }
    }
    refreshCustomProperties(null, false);
    getFunctionsChangedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
public void removeFunction(PolicyUnit policyUnit) {
    unusedFunctions.add(policyUnit);
    for (int i = 0; i < usedFunctions.size(); i++) {
        if (usedFunctions.get(i).getFirst().getId().equals(policyUnit.getId())) {
            usedFunctions.remove(i);
            break;
        }
    }
    refreshCustomProperties(policyUnit, false);
    getFunctionsChangedEvent().raise(this, EventArgs.empty);
}
#method_after
public void removeFunction(PolicyUnit policyUnit) {
    unusedFunctions.add(policyUnit);
    for (int i = 0; i < usedFunctions.size(); i++) {
        if (usedFunctions.get(i).getFirst().getId().equals(policyUnit.getId())) {
            usedFunctions.remove(i);
            break;
        }
    }
    refreshCustomProperties(policyUnit, false);
    getFunctionsChangedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
private void reset() {
    getName().setEntity(clusterPolicy.getName());
    getDescription().setEntity(clusterPolicy.getDescription());
    initFilters();
    initFunctions();
    if (clusterPolicy.getBalance() != null) {
        getLoadBalanceList().setSelectedItem(policyUnitsMap.get(clusterPolicy.getBalance()));
    }
    getFiltersChangedEvent().raise(this, EventArgs.empty);
    getFunctionsChangedEvent().raise(this, EventArgs.empty);
    customProperties.clear();
    if (clusterPolicy.getParameterMap() != null) {
        customProperties.putAll(clusterPolicy.getParameterMap());
    }
    refreshCustomProperties(null, true);
}
#method_after
private void reset() {
    getName().setEntity(clusterPolicy.getName());
    getDescription().setEntity(clusterPolicy.getDescription());
    initFilters();
    initFunctions();
    if (clusterPolicy.getBalance() != null) {
        getLoadBalanceList().setSelectedItem(policyUnitsMap.get(clusterPolicy.getBalance()));
    }
    getFiltersChangedEvent().raise(this, EventArgs.EMPTY);
    getFunctionsChangedEvent().raise(this, EventArgs.EMPTY);
    customProperties.clear();
    if (clusterPolicy.getParameterMap() != null) {
        customProperties.putAll(clusterPolicy.getParameterMap());
    }
    refreshCustomProperties(null, true);
}
#end_block

#method_before
private void updateProperties() {
    VmPool pool = (VmPool) getEntity();
    setName(pool.getName());
    setDescription(pool.getVmPoolDescription());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            // refactor to "switch ... case...".
            if (result != null) {
                setvm((VM) ((VdcQueryReturnValue) result).getReturnValue());
            }
            PoolGeneralModel poolGeneralModel = (PoolGeneralModel) model;
            if (getvm() != null) {
                poolGeneralModel.setTemplate(vmTemplateNameRenderer.render(getvm()));
                poolGeneralModel.setCpuInfo(ConstantsManager.getInstance().getMessages().cpuInfoLabel(getvm().getNumOfCpus(), getvm().getNumOfSockets(), getvm().getCpuPerSocket()));
                poolGeneralModel.setMonitorCount(getvm().getNumOfMonitors());
                poolGeneralModel.setOS(getvm().getVmOsId());
                // $NON-NLS-1$
                poolGeneralModel.setDefinedMemory(getvm().getVmMemSizeMb() + " MB");
                // $NON-NLS-1$
                poolGeneralModel.setMinAllocatedMemory(getvm().getMinAllocatedMem() + " MB");
                Translator translator = EnumTranslator.create(DisplayType.class);
                poolGeneralModel.setDefaultDisplayType(translator.get(getvm().getDefaultDisplayType()));
                translator = EnumTranslator.create(OriginType.class);
                poolGeneralModel.setOrigin(translator.get(getvm().getOrigin()));
                translator = EnumTranslator.create(UsbPolicy.class);
                poolGeneralModel.setUsbPolicy(translator.get(getvm().getUsbPolicy()));
                setHasDomain(AsyncDataProvider.isWindowsOsType(getvm().getVmOsId()));
                poolGeneralModel.setDomain(getvm().getVmDomain());
                setHasTimeZone(AsyncDataProvider.isWindowsOsType(getvm().getVmOsId()));
                poolGeneralModel.setTimeZone(getvm().getTimeZone());
                poolGeneralModel.setIsStateless(getvm().isStateless());
                poolGeneralModel.setQuotaName(getvm().getQuotaName());
                poolGeneralModel.setHasDefaultHost(getvm().getDedicatedVmForVds() != null);
                if (poolGeneralModel.getHasDefaultHost()) {
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(poolGeneralModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model1, Object ReturnValue1) {
                            PoolGeneralModel poolGeneralModel1 = (PoolGeneralModel) model1;
                            ArrayList<VDS> hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                            for (VDS host : hosts) {
                                if (host.getId().equals(poolGeneralModel1.getvm().getDedicatedVmForVds())) {
                                    poolGeneralModel1.setDefaultHost(host.getName());
                                    break;
                                }
                            }
                        }
                    };
                    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
                    "Host: cluster = " + getvm().getVdsGroupName() + " sortby name", SearchType.VDS), // $NON-NLS-1$
                    _asyncQuery1);
                } else {
                    poolGeneralModel.setDefaultHost(ConstantsManager.getInstance().getConstants().anyHostInCluster());
                }
            } else {
                poolGeneralModel.setTemplate(null);
                poolGeneralModel.setCpuCount(0);
                poolGeneralModel.setMonitorCount(0);
                poolGeneralModel.setOS(0);
                poolGeneralModel.setDefinedMemory(null);
                poolGeneralModel.setMinAllocatedMemory(null);
                poolGeneralModel.setDefaultDisplayType(null);
                poolGeneralModel.setHasDomain(false);
                poolGeneralModel.setDomain(null);
                poolGeneralModel.setHasTimeZone(false);
                poolGeneralModel.setTimeZone(null);
                poolGeneralModel.setUsbPolicy(null);
                poolGeneralModel.setDefaultHost(null);
                poolGeneralModel.setIsStateless(false);
                poolGeneralModel.getUpdateCompleteEvent().raise(this, EventArgs.empty);
            }
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmDataByPoolId, new IdQueryParameters(pool.getVmPoolId()), _asyncQuery);
}
#method_after
private void updateProperties() {
    VmPool pool = (VmPool) getEntity();
    setName(pool.getName());
    setDescription(pool.getVmPoolDescription());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            // refactor to "switch ... case...".
            if (result != null) {
                setvm((VM) ((VdcQueryReturnValue) result).getReturnValue());
            }
            PoolGeneralModel poolGeneralModel = (PoolGeneralModel) model;
            if (getvm() != null) {
                poolGeneralModel.setTemplate(vmTemplateNameRenderer.render(getvm()));
                poolGeneralModel.setCpuInfo(ConstantsManager.getInstance().getMessages().cpuInfoLabel(getvm().getNumOfCpus(), getvm().getNumOfSockets(), getvm().getCpuPerSocket()));
                poolGeneralModel.setMonitorCount(getvm().getNumOfMonitors());
                poolGeneralModel.setOS(getvm().getVmOsId());
                // $NON-NLS-1$
                poolGeneralModel.setDefinedMemory(getvm().getVmMemSizeMb() + " MB");
                // $NON-NLS-1$
                poolGeneralModel.setMinAllocatedMemory(getvm().getMinAllocatedMem() + " MB");
                Translator translator = EnumTranslator.create(DisplayType.class);
                poolGeneralModel.setDefaultDisplayType(translator.get(getvm().getDefaultDisplayType()));
                translator = EnumTranslator.create(OriginType.class);
                poolGeneralModel.setOrigin(translator.get(getvm().getOrigin()));
                translator = EnumTranslator.create(UsbPolicy.class);
                poolGeneralModel.setUsbPolicy(translator.get(getvm().getUsbPolicy()));
                setHasDomain(AsyncDataProvider.isWindowsOsType(getvm().getVmOsId()));
                poolGeneralModel.setDomain(getvm().getVmDomain());
                setHasTimeZone(AsyncDataProvider.isWindowsOsType(getvm().getVmOsId()));
                poolGeneralModel.setTimeZone(getvm().getTimeZone());
                poolGeneralModel.setIsStateless(getvm().isStateless());
                poolGeneralModel.setQuotaName(getvm().getQuotaName());
                poolGeneralModel.setHasDefaultHost(getvm().getDedicatedVmForVds() != null);
                if (poolGeneralModel.getHasDefaultHost()) {
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(poolGeneralModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model1, Object ReturnValue1) {
                            PoolGeneralModel poolGeneralModel1 = (PoolGeneralModel) model1;
                            ArrayList<VDS> hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                            for (VDS host : hosts) {
                                if (host.getId().equals(poolGeneralModel1.getvm().getDedicatedVmForVds())) {
                                    poolGeneralModel1.setDefaultHost(host.getName());
                                    break;
                                }
                            }
                        }
                    };
                    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
                    "Host: cluster = " + getvm().getVdsGroupName() + " sortby name", SearchType.VDS), // $NON-NLS-1$
                    _asyncQuery1);
                } else {
                    poolGeneralModel.setDefaultHost(ConstantsManager.getInstance().getConstants().anyHostInCluster());
                }
            } else {
                poolGeneralModel.setTemplate(null);
                poolGeneralModel.setCpuCount(0);
                poolGeneralModel.setMonitorCount(0);
                poolGeneralModel.setOS(0);
                poolGeneralModel.setDefinedMemory(null);
                poolGeneralModel.setMinAllocatedMemory(null);
                poolGeneralModel.setDefaultDisplayType(null);
                poolGeneralModel.setHasDomain(false);
                poolGeneralModel.setDomain(null);
                poolGeneralModel.setHasTimeZone(false);
                poolGeneralModel.setTimeZone(null);
                poolGeneralModel.setUsbPolicy(null);
                poolGeneralModel.setDefaultHost(null);
                poolGeneralModel.setIsStateless(false);
                poolGeneralModel.getUpdateCompleteEvent().raise(this, EventArgs.EMPTY);
            }
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmDataByPoolId, new IdQueryParameters(pool.getVmPoolId()), _asyncQuery);
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#method_after
@Override
public void setItems(Iterable value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#end_block

#method_before
public void setEntity(T value) {
    if (entity != value) {
        entityChanging(value, entity);
        entity = value;
        onEntityChanged();
        // EntityChanged(this, EventArgs.Empty);
        getEntityChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Entity"));
    }
}
#method_after
public void setEntity(T value) {
    if (entity != value) {
        entityChanging(value, entity);
        entity = value;
        onEntityChanged();
        // EntityChanged(this, EventArgs.Empty);
        getEntityChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Entity"));
    }
}
#end_block

#method_before
@Override
public void login() {
    // Completely override the base class functionality.
    if (!validate()) {
        getLoginFailedEvent().raise(this, EventArgs.empty);
        return;
    }
    startProgress(null);
    getUserName().setIsChangable(false);
    getPassword().setIsChangable(false);
    getDomain().setIsChangable(false);
    getLoginCommand().setIsExecutionAllowed(false);
    getIsAutoConnect().setIsChangable(false);
    AsyncQuery asyncQuery = new AsyncQuery();
    asyncQuery.setModel(this);
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(final Object model, final Object result) {
            UserPortalLoginModel loginModel = (UserPortalLoginModel) model;
            VdcReturnValueBase returnValue = (VdcReturnValueBase) result;
            boolean success = returnValue != null && returnValue.getSucceeded();
            if (success) {
                loginModel.setLoggedUser((DbUser) returnValue.getActionReturnValue());
                loginModel.raiseLoggedInEvent();
            } else {
                // $NON-NLS-1$
                loginModel.getPassword().setEntity("");
                if (returnValue != null) {
                    loginModel.setMessage(Linq.firstOrDefault(returnValue.getCanDoActionMessages()));
                }
                loginModel.getUserName().setIsChangable(true);
                loginModel.getPassword().setIsChangable(true);
                loginModel.getDomain().setIsChangable(true);
                loginModel.getLoginCommand().setIsExecutionAllowed(true);
                getIsAutoConnect().setIsChangable(true);
                loginModel.getLoginFailedEvent().raise(this, EventArgs.empty);
            }
            stopProgress();
        }
    };
    Frontend.getInstance().loginAsync((String) getUserName().getEntity(), (String) getPassword().getEntity(), (String) getDomain().getSelectedItem(), false, asyncQuery);
}
#method_after
@Override
public void login() {
    // Completely override the base class functionality.
    if (!validate()) {
        getLoginFailedEvent().raise(this, EventArgs.EMPTY);
        return;
    }
    startProgress(null);
    getUserName().setIsChangable(false);
    getPassword().setIsChangable(false);
    getDomain().setIsChangable(false);
    getLoginCommand().setIsExecutionAllowed(false);
    getIsAutoConnect().setIsChangable(false);
    AsyncQuery asyncQuery = new AsyncQuery();
    asyncQuery.setModel(this);
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(final Object model, final Object result) {
            UserPortalLoginModel loginModel = (UserPortalLoginModel) model;
            VdcReturnValueBase returnValue = (VdcReturnValueBase) result;
            boolean success = returnValue != null && returnValue.getSucceeded();
            if (success) {
                loginModel.setLoggedUser((DbUser) returnValue.getActionReturnValue());
                loginModel.raiseLoggedInEvent();
            } else {
                // $NON-NLS-1$
                loginModel.getPassword().setEntity("");
                if (returnValue != null) {
                    loginModel.setMessage(Linq.firstOrDefault(returnValue.getCanDoActionMessages()));
                }
                loginModel.getUserName().setIsChangable(true);
                loginModel.getPassword().setIsChangable(true);
                loginModel.getDomain().setIsChangable(true);
                loginModel.getLoginCommand().setIsExecutionAllowed(true);
                getIsAutoConnect().setIsChangable(true);
                loginModel.getLoginFailedEvent().raise(this, EventArgs.EMPTY);
            }
            stopProgress();
        }
    };
    Frontend.getInstance().loginAsync((String) getUserName().getEntity(), (String) getPassword().getEntity(), (String) getDomain().getSelectedItem(), false, asyncQuery);
}
#end_block

#method_before
private void complete() {
    getCompleteEvent().raise(this, EventArgs.empty);
}
#method_after
private void complete() {
    getCompleteEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
private void updateItems(ArrayList<AuditLog> source) {
    if (getItems() == null) {
        return;
    }
    if (!source.isEmpty()) {
        // We received some new events, tell the active models to update.
        RefreshActiveModelEvent.fire(this, false);
    }
    List<AuditLog> list = (List<AuditLog>) getItems();
    Collections.sort(source, new Linq.AuditLogComparer());
    for (AuditLog item : source) {
        if (list.size() == getSearchPageSize()) {
            list.remove(list.size() - 1);
        }
        list.add(0, item);
    }
    getItemsChangedEvent().raise(this, EventArgs.empty);
    setLastEvent(Linq.firstOrDefault(list));
    // to stop the progress animation (SearchableTabModelProvider).
    if (Linq.firstOrDefault(list) == null) {
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("LastEvent"));
    }
}
#method_after
private void updateItems(ArrayList<AuditLog> source) {
    if (getItems() == null) {
        return;
    }
    if (!source.isEmpty()) {
        // We received some new events, tell the active models to update.
        RefreshActiveModelEvent.fire(this, false);
    }
    List<AuditLog> list = (List<AuditLog>) getItems();
    Collections.sort(source, new Linq.AuditLogComparer());
    for (AuditLog item : source) {
        if (list.size() == getSearchPageSize()) {
            list.remove(list.size() - 1);
        }
        list.add(0, item);
    }
    getItemsChangedEvent().raise(this, EventArgs.EMPTY);
    setLastEvent(Linq.firstOrDefault(list));
    // to stop the progress animation (SearchableTabModelProvider).
    if (Linq.firstOrDefault(list) == null) {
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("LastEvent"));
    }
}
#end_block

#method_before
public void refreshReportModel() {
    SystemTreeItemModel treeItemModel = ((SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem());
    if (treeItemModel == null) {
        return;
    }
    clearTreeSensitiveParams();
    String title = treeItemModel.getTitle();
    Dashboard dashboard = ReportInit.getInstance().getDashboard(treeItemModel.getType().toString());
    if (dashboard != null) {
        setUri(dashboard.getUri());
        switch(treeItemModel.getType()) {
            case System:
                {
                    break;
                }
            case DataCenter:
                {
                    StoragePool dataCenter = (StoragePool) treeItemModel.getEntity();
                    setDataCenterID(dataCenter.getId().toString());
                    break;
                }
            case Clusters:
                {
                    StoragePool dataCenter = (StoragePool) treeItemModel.getEntity();
                    setDataCenterID(dataCenter.getId().toString());
                    break;
                }
            case Cluster:
                {
                    VDSGroup cluster = (VDSGroup) treeItemModel.getEntity();
                    setDataCenterID(cluster.getStoragePoolId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_Cluster_ID", cluster.getQueryableId().toString());
                    break;
                }
            case Hosts:
                {
                    VDSGroup cluster = (VDSGroup) treeItemModel.getEntity();
                    setDataCenterID(cluster.getStoragePoolId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_Cluster_ID", cluster.getQueryableId().toString());
                    break;
                }
            case Host:
                {
                    VDS host = (VDS) treeItemModel.getEntity();
                    setDataCenterID(host.getStoragePoolId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_Host_ID", host.getQueryableId().toString());
                    break;
                }
            case Storages:
                {
                    StoragePool dataCenter = (StoragePool) treeItemModel.getEntity();
                    setDataCenterID(dataCenter.getId().toString());
                    break;
                }
            case Storage:
                {
                    StorageDomain storage = (StorageDomain) treeItemModel.getEntity();
                    setDataCenterID(storage.getStoragePoolId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_StorageDomain_ID", storage.getQueryableId().toString());
                    break;
                }
            case Templates:
                {
                    StoragePool dataCenter = (StoragePool) treeItemModel.getEntity();
                    setDataCenterID(dataCenter.getId().toString());
                    break;
                }
            case VMs:
                {
                    VM vm = (VM) treeItemModel.getEntity();
                    setDataCenterID(vm.getStoragePoolId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_VM_ID", vm.getQueryableId().toString());
                    break;
                }
            case Networks:
                {
                    StoragePool dataCenter = (StoragePool) treeItemModel.getEntity();
                    setDataCenterID(dataCenter.getId().toString());
                    break;
                }
            case Network:
                {
                    Network network = (Network) treeItemModel.getEntity();
                    setDataCenterID(network.getDataCenterId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_Network_ID", network.getQueryableId().toString());
                    break;
                }
            default:
        }
    }
    // $NON-NLS-1$
    GWT.log("Tree Item changed: " + title);
    reportModelRefreshEvent.raise(this, EventArgs.empty);
}
#method_after
public void refreshReportModel() {
    SystemTreeItemModel treeItemModel = ((SystemTreeItemModel) CommonModel.getInstance().getSystemTree().getSelectedItem());
    if (treeItemModel == null) {
        return;
    }
    clearTreeSensitiveParams();
    String title = treeItemModel.getTitle();
    Dashboard dashboard = ReportInit.getInstance().getDashboard(treeItemModel.getType().toString());
    if (dashboard != null) {
        setUri(dashboard.getUri());
        switch(treeItemModel.getType()) {
            case System:
                {
                    break;
                }
            case DataCenter:
                {
                    StoragePool dataCenter = (StoragePool) treeItemModel.getEntity();
                    setDataCenterID(dataCenter.getId().toString());
                    break;
                }
            case Clusters:
                {
                    StoragePool dataCenter = (StoragePool) treeItemModel.getEntity();
                    setDataCenterID(dataCenter.getId().toString());
                    break;
                }
            case Cluster:
                {
                    VDSGroup cluster = (VDSGroup) treeItemModel.getEntity();
                    setDataCenterID(cluster.getStoragePoolId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_Cluster_ID", cluster.getQueryableId().toString());
                    break;
                }
            case Hosts:
                {
                    VDSGroup cluster = (VDSGroup) treeItemModel.getEntity();
                    setDataCenterID(cluster.getStoragePoolId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_Cluster_ID", cluster.getQueryableId().toString());
                    break;
                }
            case Host:
                {
                    VDS host = (VDS) treeItemModel.getEntity();
                    setDataCenterID(host.getStoragePoolId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_Host_ID", host.getQueryableId().toString());
                    break;
                }
            case Storages:
                {
                    StoragePool dataCenter = (StoragePool) treeItemModel.getEntity();
                    setDataCenterID(dataCenter.getId().toString());
                    break;
                }
            case Storage:
                {
                    StorageDomain storage = (StorageDomain) treeItemModel.getEntity();
                    setDataCenterID(storage.getStoragePoolId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_StorageDomain_ID", storage.getQueryableId().toString());
                    break;
                }
            case Templates:
                {
                    StoragePool dataCenter = (StoragePool) treeItemModel.getEntity();
                    setDataCenterID(dataCenter.getId().toString());
                    break;
                }
            case VMs:
                {
                    VM vm = (VM) treeItemModel.getEntity();
                    setDataCenterID(vm.getStoragePoolId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_VM_ID", vm.getQueryableId().toString());
                    break;
                }
            case Networks:
                {
                    StoragePool dataCenter = (StoragePool) treeItemModel.getEntity();
                    setDataCenterID(dataCenter.getId().toString());
                    break;
                }
            case Network:
                {
                    Network network = (Network) treeItemModel.getEntity();
                    setDataCenterID(network.getDataCenterId().toString());
                    // $NON-NLS-1$
                    setResourceId("P_Network_ID", network.getQueryableId().toString());
                    break;
                }
            default:
        }
    }
    // $NON-NLS-1$
    GWT.log("Tree Item changed: " + title);
    reportModelRefreshEvent.raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
public void setSelectedItems(List<T> value) {
    if (selectedItems != value) {
        selectedItemsChanging(value, selectedItems);
        selectedItems = value;
        selectedItemsChanged();
        getSelectedItemsChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("SelectedItems"));
    }
}
#method_after
public void setSelectedItems(List<T> value) {
    if (selectedItems != value) {
        selectedItemsChanging(value, selectedItems);
        selectedItems = value;
        selectedItemsChanged();
        getSelectedItemsChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("SelectedItems"));
    }
}
#end_block

#method_before
public void setSelectedItem(T value) {
    if (selectedItem != value) {
        onSelectedItemChanging(value, selectedItem);
        selectedItem = value;
        onSelectedItemChanged();
        getSelectedItemChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("SelectedItem"));
    }
}
#method_after
public void setSelectedItem(T value) {
    if (selectedItem != value) {
        onSelectedItemChanging(value, selectedItem);
        selectedItem = value;
        onSelectedItemChanged();
        getSelectedItemChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("SelectedItem"));
    }
}
#end_block

#method_before
public void setItems(Iterable<T> value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#method_after
public void setItems(Iterable<T> value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#method_after
@Override
public void setItems(Iterable value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#end_block

#method_before
private void reset() {
    setSelectedItems(new ArrayList<TagModel>());
    if (getItems() != null) {
        for (Object item : getItems()) {
            resetInternal((TagModel) item);
        }
    }
    // Async tag search will cause tree selection to be cleared
    // Search();
    getResetRequestedEvent().raise(this, EventArgs.empty);
}
#method_after
private void reset() {
    setSelectedItems(new ArrayList<TagModel>());
    if (getItems() != null) {
        for (Object item : getItems()) {
            resetInternal((TagModel) item);
        }
    }
    // Async tag search will cause tree selection to be cleared
    // Search();
    getResetRequestedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
@Override
public void setItems(Iterable<T> value) {
    if (items != value) {
        T lastSelectedItem = getSelectedItem();
        List<T> lastSelectedItems = new ArrayList<T>();
        if (getSelectedItems() != null) {
            for (T item : getSelectedItems()) {
                lastSelectedItems.add(item);
            }
        }
        if (comparator == null || ((value instanceof SortedSet) && (((SortedSet) value).comparator() == comparator))) {
            itemsChanging(value, items);
            items = value;
        } else {
            TreeSet<T> sortedValue = null;
            if (value != null) {
                sortedValue = new TreeSet<T>(comparator);
                for (T item : value) {
                    sortedValue.add(item);
                }
            }
            itemsChanging(sortedValue, items);
            items = sortedValue;
        }
        updatePagingAvailability();
        getItemsChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
        selectedItem = null;
        if (getSelectedItems() != null) {
            getSelectedItems().clear();
        }
        if (lastSelectedItem != null && items != null) {
            T newSelectedItem = null;
            List<T> newItems = new ArrayList<T>();
            for (T item : items) {
                newItems.add(item);
            }
            if (newItems != null) {
                for (T newItem : newItems) {
                    // Search for selected item
                    if (((IVdcQueryable) newItem).getQueryableId().equals(((IVdcQueryable) lastSelectedItem).getQueryableId())) {
                        newSelectedItem = newItem;
                    } else {
                        // Search for selected items
                        for (T item : lastSelectedItems) {
                            if (((IVdcQueryable) newItem).getQueryableId().equals(((IVdcQueryable) item).getQueryableId())) {
                                selectedItems.add(newItem);
                            }
                        }
                    }
                }
            }
            if (newSelectedItem != null) {
                selectedItem = newSelectedItem;
                if (selectedItems != null) {
                    selectedItems.add(newSelectedItem);
                }
            }
        }
        onSelectedItemChanged();
    }
}
#method_after
@Override
public void setItems(Iterable<T> value) {
    if (items != value) {
        T lastSelectedItem = getSelectedItem();
        List<T> lastSelectedItems = new ArrayList<T>();
        if (getSelectedItems() != null) {
            for (T item : getSelectedItems()) {
                lastSelectedItems.add(item);
            }
        }
        if (comparator == null || ((value instanceof SortedSet) && (((SortedSet) value).comparator() == comparator))) {
            itemsChanging(value, items);
            items = value;
        } else {
            TreeSet<T> sortedValue = null;
            if (value != null) {
                sortedValue = new TreeSet<T>(comparator);
                for (T item : value) {
                    sortedValue.add(item);
                }
            }
            itemsChanging(sortedValue, items);
            items = sortedValue;
        }
        updatePagingAvailability();
        getItemsChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
        selectedItem = null;
        if (getSelectedItems() != null) {
            getSelectedItems().clear();
        }
        if (lastSelectedItem != null && items != null) {
            T newSelectedItem = null;
            List<T> newItems = new ArrayList<T>();
            for (T item : items) {
                newItems.add(item);
            }
            if (newItems != null) {
                for (T newItem : newItems) {
                    // Search for selected item
                    if (((IVdcQueryable) newItem).getQueryableId().equals(((IVdcQueryable) lastSelectedItem).getQueryableId())) {
                        newSelectedItem = newItem;
                    } else {
                        // Search for selected items
                        for (T item : lastSelectedItems) {
                            if (((IVdcQueryable) newItem).getQueryableId().equals(((IVdcQueryable) item).getQueryableId())) {
                                selectedItems.add(newItem);
                            }
                        }
                    }
                }
            }
            if (newSelectedItem != null) {
                selectedItem = newSelectedItem;
                if (selectedItems != null) {
                    selectedItems.add(newSelectedItem);
                }
            }
        }
        onSelectedItemChanged();
    }
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (storageDomainModels != null) {
        Collections.sort(storageDomainModels, new StorageDomainModelByNameComparer());
        itemsChanging(value, items);
        items = storageDomainModels;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
        storageDomainModels = null;
    } else {
        this.value = value;
        VmTemplate template = (VmTemplate) getEntity();
        AsyncDataProvider.getTemplateDiskList(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                TemplateStorageListModel templateStorageListModel = (TemplateStorageListModel) target;
                ArrayList<DiskImage> diskImages = (ArrayList<DiskImage>) returnValue;
                ArrayList<StorageDomain> storageDomains = Linq.<StorageDomain>cast(templateStorageListModel.value);
                ArrayList<StorageDomainModel> storageDomainModels = new ArrayList<StorageDomainModel>();
                for (StorageDomain storageDomain : storageDomains) {
                    StorageDomainModel storageDomainModel = new StorageDomainModel();
                    storageDomainModel.setStorageDomain(storageDomain);
                    ArrayList<DiskImage> disks = new ArrayList<DiskImage>();
                    for (DiskImage diskImage : diskImages) {
                        if (diskImage.getStorageIds().contains(storageDomain.getId())) {
                            disks.add(diskImage);
                        }
                    }
                    Collections.sort(disks, new DiskByAliasComparer());
                    storageDomainModel.setDisks(disks);
                    storageDomainModels.add(storageDomainModel);
                }
                templateStorageListModel.storageDomainModels = storageDomainModels;
                setItems(templateStorageListModel.value);
            }
        }), template.getId());
    }
}
#method_after
@Override
public void setItems(Iterable value) {
    if (storageDomainModels != null) {
        Collections.sort(storageDomainModels, new StorageDomainModelByNameComparer());
        itemsChanging(value, items);
        items = storageDomainModels;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
        storageDomainModels = null;
    } else {
        this.value = value;
        VmTemplate template = (VmTemplate) getEntity();
        AsyncDataProvider.getTemplateDiskList(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                TemplateStorageListModel templateStorageListModel = (TemplateStorageListModel) target;
                ArrayList<DiskImage> diskImages = (ArrayList<DiskImage>) returnValue;
                ArrayList<StorageDomain> storageDomains = Linq.<StorageDomain>cast(templateStorageListModel.value);
                ArrayList<StorageDomainModel> storageDomainModels = new ArrayList<StorageDomainModel>();
                for (StorageDomain storageDomain : storageDomains) {
                    StorageDomainModel storageDomainModel = new StorageDomainModel();
                    storageDomainModel.setStorageDomain(storageDomain);
                    ArrayList<DiskImage> disks = new ArrayList<DiskImage>();
                    for (DiskImage diskImage : diskImages) {
                        if (diskImage.getStorageIds().contains(storageDomain.getId())) {
                            disks.add(diskImage);
                        }
                    }
                    Collections.sort(disks, new DiskByAliasComparer());
                    storageDomainModel.setDisks(disks);
                    storageDomainModels.add(storageDomainModel);
                }
                templateStorageListModel.storageDomainModels = storageDomainModels;
                setItems(templateStorageListModel.value);
            }
        }), template.getId());
    }
}
#end_block

#method_before
public void done() {
    getDoneEvent().raise(this, EventArgs.empty);
}
#method_after
public void done() {
    getDoneEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
public void setSelection(Boolean value) {
    if (selection == null && value == null) {
        return;
    }
    if (selection == null || !selection.equals(value)) {
        selection = value;
        getSelectionChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Selection"));
    }
}
#method_after
public void setSelection(Boolean value) {
    if (selection == null && value == null) {
        return;
    }
    if (selection == null || !selection.equals(value)) {
        selection = value;
        getSelectionChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Selection"));
    }
}
#end_block

#method_before
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#method_after
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY);
        }
    });
    callback.setHandleFailure(true);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#end_block

#method_before
public void signOut() {
    // Stop search on all list models.
    for (SearchableListModel listModel : getItems()) {
        listModel.stopRefresh();
    }
    getEventList().stopRefresh();
    getAlertList().stopRefresh();
    getTaskList().stopRefresh();
    getBookmarkList().stopRefresh();
    getRoleListModel().stopRefresh();
    getSystemPermissionListModel().stopRefresh();
    getClusterPolicyListModel().stopRefresh();
    if (Frontend.getInstance().getIsUserLoggedIn()) {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setHandleFailure(true);
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object ReturnValue) {
            }
        };
        setLoggedInUser(null);
        getSignedOutEvent().raise(this, EventArgs.empty);
        Frontend.getInstance().logoffAsync(Frontend.getInstance().getLoggedInUser(), _asyncQuery);
    }
}
#method_after
public void signOut() {
    // Stop search on all list models.
    for (SearchableListModel listModel : getItems()) {
        listModel.stopRefresh();
    }
    getEventList().stopRefresh();
    getAlertList().stopRefresh();
    getTaskList().stopRefresh();
    getBookmarkList().stopRefresh();
    getRoleListModel().stopRefresh();
    getSystemPermissionListModel().stopRefresh();
    getClusterPolicyListModel().stopRefresh();
    if (Frontend.getInstance().getIsUserLoggedIn()) {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setHandleFailure(true);
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object ReturnValue) {
            }
        };
        setLoggedInUser(null);
        getSignedOutEvent().raise(this, EventArgs.EMPTY);
        Frontend.getInstance().logoffAsync(Frontend.getInstance().getLoggedInUser(), _asyncQuery);
    }
}
#end_block

#method_before
public void setItems(ArrayList<SystemTreeItemModel> value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#method_after
public void setItems(ArrayList<SystemTreeItemModel> value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#end_block

#method_before
private void reset() {
    getResetRequestedEvent().raise(this, EventArgs.empty);
}
#method_after
private void reset() {
    getResetRequestedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(EntityModel.entityChangedEventDefinition) && sender == getPath()) {
        // Notify about path change.
        getPathChangedEvent().raise(this, EventArgs.empty);
    } else if (ev.matchesDefinition(EntityModel.entityChangedEventDefinition) && sender == getOverride()) {
        override_EntityChanged(args);
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(EntityModel.entityChangedEventDefinition) && sender == getPath()) {
        // Notify about path change.
        getPathChangedEvent().raise(this, EventArgs.EMPTY);
    } else if (ev.matchesDefinition(EntityModel.entityChangedEventDefinition) && sender == getOverride()) {
        override_EntityChanged(args);
    }
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#method_after
@Override
public void setItems(Iterable value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        itemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#end_block

#method_before
@After
public void tearDown() throws Exception {
    // Make sure that the query start and end have been called at least once.
    // Some of the tests might call it more than once.
    verify(queryStartEvent, atLeastOnce()).raise(Frontend.class, EventArgs.empty);
    verify(queryCompleteEvent, atLeastOnce()).raise(Frontend.class, EventArgs.empty);
    // Make sure the context is correct
    // $NON-NLS-1$ //$NON-NLS-2$
    assertEquals("Context should be 'test'", frontend.getCurrentContext(), "test");
}
#method_after
@After
public void tearDown() throws Exception {
    // Make sure that the query start and end have been called at least once.
    // Some of the tests might call it more than once.
    verify(queryStartEvent, atLeastOnce()).raise(Frontend.class, EventArgs.EMPTY);
    verify(queryCompleteEvent, atLeastOnce()).raise(Frontend.class, EventArgs.EMPTY);
    // Make sure the context is correct
    // $NON-NLS-1$ //$NON-NLS-2$
    assertEquals("Context should be 'test'", frontend.getCurrentContext(), "test");
}
#end_block

#method_before
@Test
public void testRunQuery_success_not_succeeded_noeventshandler_nocallbackhandler() {
    // $NON-NLS-1$
    VdcQueryParametersBase testParameters = new SearchParameters("*win*", SearchType.VM);
    frontend.runQuery(VdcQueryType.Search, testParameters, mockAsyncQuery, false);
    verify(mockService).RunQuery(eq(VdcQueryType.Search), eq(testParameters), callback.capture());
    VdcQueryReturnValue mockReturnValue = new VdcQueryReturnValue();
    // $NON-NLS-1$
    mockReturnValue.setExceptionString("Fake failure for test");
    // Return value set to failure
    mockReturnValue.setSucceeded(false);
    callback.getValue().onSuccess(mockReturnValue);
    // Make sure the not logged in event is never called, as the failure is not a USER_IS_NOT_LOGGED_IN
    verify(mockFrontendNotLoggedInEvent, never()).raise(Frontend.class, EventArgs.empty);
}
#method_after
@Test
public void testRunQuery_success_not_succeeded_noeventshandler_nocallbackhandler() {
    // $NON-NLS-1$
    VdcQueryParametersBase testParameters = new SearchParameters("*win*", SearchType.VM);
    frontend.runQuery(VdcQueryType.Search, testParameters, mockAsyncQuery, false);
    verify(mockService).RunQuery(eq(VdcQueryType.Search), eq(testParameters), callback.capture());
    VdcQueryReturnValue mockReturnValue = new VdcQueryReturnValue();
    // $NON-NLS-1$
    mockReturnValue.setExceptionString("Fake failure for test");
    // Return value set to failure
    mockReturnValue.setSucceeded(false);
    callback.getValue().onSuccess(mockReturnValue);
    // Make sure the not logged in event is never called, as the failure is not a USER_IS_NOT_LOGGED_IN
    verify(mockFrontendNotLoggedInEvent, never()).raise(Frontend.class, EventArgs.EMPTY);
}
#end_block

#method_before
@Test
public void testRunQuery_success_not_succeeded_eventshandler_nocallbackhandler() {
    // $NON-NLS-1$
    VdcQueryParametersBase testParameters = new SearchParameters("*win*", SearchType.VM);
    frontend.runQuery(VdcQueryType.Search, testParameters, mockAsyncQuery, false);
    verify(mockService).RunQuery(eq(VdcQueryType.Search), eq(testParameters), callback.capture());
    VdcQueryReturnValue mockReturnValue = new VdcQueryReturnValue();
    // $NON-NLS-1$
    mockReturnValue.setExceptionString("USER_IS_NOT_LOGGED_IN");
    // Return value set to failure
    mockReturnValue.setSucceeded(false);
    callback.getValue().onSuccess(mockReturnValue);
    // Make sure the not logged in event is called
    verify(mockFrontendNotLoggedInEvent).raise(Frontend.class, EventArgs.empty);
}
#method_after
@Test
public void testRunQuery_success_not_succeeded_eventshandler_nocallbackhandler() {
    // $NON-NLS-1$
    VdcQueryParametersBase testParameters = new SearchParameters("*win*", SearchType.VM);
    frontend.runQuery(VdcQueryType.Search, testParameters, mockAsyncQuery, false);
    verify(mockService).RunQuery(eq(VdcQueryType.Search), eq(testParameters), callback.capture());
    VdcQueryReturnValue mockReturnValue = new VdcQueryReturnValue();
    // $NON-NLS-1$
    mockReturnValue.setExceptionString("USER_IS_NOT_LOGGED_IN");
    // Return value set to failure
    mockReturnValue.setSucceeded(false);
    callback.getValue().onSuccess(mockReturnValue);
    // Make sure the not logged in event is called
    verify(mockFrontendNotLoggedInEvent).raise(Frontend.class, EventArgs.EMPTY);
}
#end_block

#method_before
@Test
public void testRunQuery_success_not_succeeded_eventshandler_callbackhandler() {
    Object mockModel = new Object();
    when(mockAsyncQuery.isHandleFailure()).thenReturn(true);
    when(mockAsyncQuery.getModel()).thenReturn(mockModel);
    // $NON-NLS-1$
    VdcQueryParametersBase testParameters = new SearchParameters("*win*", SearchType.VM);
    frontend.runQuery(VdcQueryType.Search, testParameters, mockAsyncQuery, false);
    verify(mockService).RunQuery(eq(VdcQueryType.Search), eq(testParameters), callback.capture());
    VdcQueryReturnValue mockReturnValue = new VdcQueryReturnValue();
    // $NON-NLS-1$
    mockReturnValue.setExceptionString("USER_IS_NOT_LOGGED_IN");
    // Return value set to failure
    mockReturnValue.setSucceeded(false);
    callback.getValue().onSuccess(mockReturnValue);
    // Make sure the not logged in event is called
    verify(mockFrontendNotLoggedInEvent).raise(Frontend.class, EventArgs.empty);
    verify(mockAsyncCallback).onSuccess(mockModel, mockReturnValue);
}
#method_after
@Test
public void testRunQuery_success_not_succeeded_eventshandler_callbackhandler() {
    Object mockModel = new Object();
    when(mockAsyncQuery.isHandleFailure()).thenReturn(true);
    when(mockAsyncQuery.getModel()).thenReturn(mockModel);
    // $NON-NLS-1$
    VdcQueryParametersBase testParameters = new SearchParameters("*win*", SearchType.VM);
    frontend.runQuery(VdcQueryType.Search, testParameters, mockAsyncQuery, false);
    verify(mockService).RunQuery(eq(VdcQueryType.Search), eq(testParameters), callback.capture());
    VdcQueryReturnValue mockReturnValue = new VdcQueryReturnValue();
    // $NON-NLS-1$
    mockReturnValue.setExceptionString("USER_IS_NOT_LOGGED_IN");
    // Return value set to failure
    mockReturnValue.setSucceeded(false);
    callback.getValue().onSuccess(mockReturnValue);
    // Make sure the not logged in event is called
    verify(mockFrontendNotLoggedInEvent).raise(Frontend.class, EventArgs.EMPTY);
    verify(mockAsyncCallback).onSuccess(mockModel, mockReturnValue);
}
#end_block

#method_before
public void login() {
    if (!validate()) {
        getLoginFailedEvent().raise(this, EventArgs.empty);
        return;
    }
    startProgress(null);
    disableLoginScreen();
    String fullUserName = (String) getUserName().getEntity();
    String[] parts = getUserNameParts(fullUserName);
    String domain = parts[1];
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            LoginModel loginModel = (LoginModel) model;
            DbUser user = null;
            if (result != null) {
                VdcReturnValueBase returnValue = (VdcReturnValueBase) result;
                if (returnValue.getSucceeded()) {
                    user = (DbUser) returnValue.getActionReturnValue();
                    loginModel.setLoggedUser(user);
                }
                if (user == null) {
                    // $NON-NLS-1$
                    loginModel.getPassword().setEntity("");
                    loginModel.setMessage(Linq.firstOrDefault(returnValue.getCanDoActionMessages()));
                    loginModel.getUserName().setIsChangable(true);
                    loginModel.getPassword().setIsChangable(true);
                    loginModel.getDomain().setIsChangable(true);
                    loginModel.getLoginCommand().setIsExecutionAllowed(true);
                    loginModel.getLoginFailedEvent().raise(this, EventArgs.empty);
                } else {
                    raiseLoggedInEvent();
                }
                stopProgress();
            }
        }
    };
    Frontend.getInstance().loginAsync(fullUserName, (String) getPassword().getEntity(), StringHelper.isNullOrEmpty(domain) ? (String) getDomain().getSelectedItem() : domain, true, _asyncQuery);
}
#method_after
public void login() {
    if (!validate()) {
        getLoginFailedEvent().raise(this, EventArgs.EMPTY);
        return;
    }
    startProgress(null);
    disableLoginScreen();
    String fullUserName = (String) getUserName().getEntity();
    String[] parts = getUserNameParts(fullUserName);
    String domain = parts[1];
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            LoginModel loginModel = (LoginModel) model;
            DbUser user = null;
            if (result != null) {
                VdcReturnValueBase returnValue = (VdcReturnValueBase) result;
                if (returnValue.getSucceeded()) {
                    user = (DbUser) returnValue.getActionReturnValue();
                    loginModel.setLoggedUser(user);
                }
                if (user == null) {
                    // $NON-NLS-1$
                    loginModel.getPassword().setEntity("");
                    loginModel.setMessage(Linq.firstOrDefault(returnValue.getCanDoActionMessages()));
                    loginModel.getUserName().setIsChangable(true);
                    loginModel.getPassword().setIsChangable(true);
                    loginModel.getDomain().setIsChangable(true);
                    loginModel.getLoginCommand().setIsExecutionAllowed(true);
                    loginModel.getLoginFailedEvent().raise(this, EventArgs.EMPTY);
                } else {
                    raiseLoggedInEvent();
                }
                stopProgress();
            }
        }
    };
    Frontend.getInstance().loginAsync(fullUserName, (String) getPassword().getEntity(), StringHelper.isNullOrEmpty(domain) ? (String) getDomain().getSelectedItem() : domain, true, _asyncQuery);
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        getItemsChangedEvent().raise(this, EventArgs.empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
        UserPortalItemModel selectedItem = (UserPortalItemModel) getSelectedItem();
        if (items != null && selectedItem != null) {
            for (Object object : items) {
                UserPortalItemModel itemModel = (UserPortalItemModel) object;
                if (itemModel.getEntity().equals(selectedItem.getEntity())) {
                    this.selectedItem = itemModel;
                    break;
                }
            }
        }
        onSelectedItemChanged();
    }
}
#method_after
@Override
public void setItems(Iterable value) {
    if (items != value) {
        itemsChanging(value, items);
        items = value;
        getItemsChangedEvent().raise(this, EventArgs.EMPTY);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
        UserPortalItemModel selectedItem = (UserPortalItemModel) getSelectedItem();
        if (items != null && selectedItem != null) {
            for (Object object : items) {
                UserPortalItemModel itemModel = (UserPortalItemModel) object;
                if (itemModel.getEntity().equals(selectedItem.getEntity())) {
                    this.selectedItem = itemModel;
                    break;
                }
            }
        }
        onSelectedItemChanged();
    }
}
#end_block

#method_before
@Override
public void onVmAndPoolLoad() {
    if (getvms() != null && getpools() != null) {
        // Complete search.
        // Remove pools that has provided VMs.
        ArrayList<VmPool> filteredPools = new ArrayList<VmPool>();
        poolMap = new HashMap<Guid, VmPool>();
        for (VmPool pool : getpools()) {
            // Add pool to map.
            poolMap.put(pool.getVmPoolId(), pool);
            int attachedVmsCount = 0;
            for (VM vm : getvms()) {
                if (vm.getVmPoolId() != null && vm.getVmPoolId().equals(pool.getVmPoolId())) {
                    attachedVmsCount++;
                }
            }
            if (attachedVmsCount < pool.getMaxAssignedVmsPerUser()) {
                filteredPools.add(pool);
            }
        }
        // Merge VMs and Pools, and create item models.
        List all = Linq.concat(getvms(), filteredPools);
        Collections.sort(all, new NameableComparator());
        consoleModelsCache.updateCache(filterVms(all));
        ArrayList<Model> items = new ArrayList<Model>();
        for (Object item : all) {
            VmConsoles consoles = null;
            if (item instanceof VM) {
                consoles = consoleModelsCache.getVmConsolesForVm((VM) item);
            }
            UserPortalItemModel model = new UserPortalItemModel(item, consoles);
            model.setEntity(item);
            items.add(model);
        }
        setItems(items);
        setCanConnectAutomatically(getAutoConnectableConsoles().size() == 1);
        setvms(null);
        setpools(null);
        getSearchCompletedEvent().raise(this, EventArgs.empty);
    }
}
#method_after
@Override
public void onVmAndPoolLoad() {
    if (getvms() != null && getpools() != null) {
        // Complete search.
        // Remove pools that has provided VMs.
        ArrayList<VmPool> filteredPools = new ArrayList<VmPool>();
        poolMap = new HashMap<Guid, VmPool>();
        for (VmPool pool : getpools()) {
            // Add pool to map.
            poolMap.put(pool.getVmPoolId(), pool);
            int attachedVmsCount = 0;
            for (VM vm : getvms()) {
                if (vm.getVmPoolId() != null && vm.getVmPoolId().equals(pool.getVmPoolId())) {
                    attachedVmsCount++;
                }
            }
            if (attachedVmsCount < pool.getMaxAssignedVmsPerUser()) {
                filteredPools.add(pool);
            }
        }
        // Merge VMs and Pools, and create item models.
        List all = Linq.concat(getvms(), filteredPools);
        Collections.sort(all, new NameableComparator());
        consoleModelsCache.updateCache(filterVms(all));
        ArrayList<Model> items = new ArrayList<Model>();
        for (Object item : all) {
            VmConsoles consoles = null;
            if (item instanceof VM) {
                consoles = consoleModelsCache.getVmConsolesForVm((VM) item);
            }
            UserPortalItemModel model = new UserPortalItemModel(item, consoles);
            model.setEntity(item);
            items.add(model);
        }
        setItems(items);
        setCanConnectAutomatically(getAutoConnectableConsoles().size() == 1);
        setvms(null);
        setpools(null);
        getSearchCompletedEvent().raise(this, EventArgs.EMPTY);
    }
}
#end_block

#method_before
public void prepared() {
    getPreparedEvent().raise(this, EventArgs.empty);
}
#method_after
public void prepared() {
    getPreparedEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
public void forceRollback() {
    getRollbackEvent().raise(this, EventArgs.empty);
}
#method_after
public void forceRollback() {
    getRollbackEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VdsStatistics other = (VdsStatistics) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.bigDecimalEqual(cpu_idle, other.cpu_idle) && ObjectUtils.bigDecimalEqual(cpu_load, other.cpu_load) && ObjectUtils.bigDecimalEqual(cpu_sys, other.cpu_sys) && ObjectUtils.bigDecimalEqual(cpu_user, other.cpu_user) && ObjectUtils.objectsEqual(mem_available, other.mem_available) && ObjectUtils.objectsEqual(memFree, other.memFree) && ObjectUtils.objectsEqual(mem_shared, other.mem_shared) && ObjectUtils.objectsEqual(usage_cpu_percent, other.usage_cpu_percent) && ObjectUtils.objectsEqual(usage_network_percent, other.usage_network_percent) && ObjectUtils.objectsEqual(ksm_state, other.ksm_state) && ObjectUtils.objectsEqual(ksm_pages, other.ksm_pages) && ObjectUtils.objectsEqual(ksm_cpu_percent, other.ksm_cpu_percent) && ObjectUtils.objectsEqual(swap_total, other.swap_total) && ObjectUtils.objectsEqual(swap_free, other.swap_free) && ObjectUtils.objectsEqual(highlyAvailableScore, other.highlyAvailableScore) && ObjectUtils.objectsEqual(anonymousHugePages, other.anonymousHugePages));
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VdsStatistics other = (VdsStatistics) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.bigDecimalEqual(cpu_idle, other.cpu_idle) && ObjectUtils.bigDecimalEqual(cpu_load, other.cpu_load) && ObjectUtils.bigDecimalEqual(cpu_sys, other.cpu_sys) && ObjectUtils.bigDecimalEqual(cpu_user, other.cpu_user) && ObjectUtils.objectsEqual(mem_available, other.mem_available) && ObjectUtils.objectsEqual(memFree, other.memFree) && ObjectUtils.objectsEqual(mem_shared, other.mem_shared) && ObjectUtils.objectsEqual(usage_cpu_percent, other.usage_cpu_percent) && ObjectUtils.objectsEqual(usage_network_percent, other.usage_network_percent) && ObjectUtils.objectsEqual(ksm_state, other.ksm_state) && ObjectUtils.objectsEqual(ksm_pages, other.ksm_pages) && ObjectUtils.objectsEqual(ksm_cpu_percent, other.ksm_cpu_percent) && ObjectUtils.objectsEqual(swap_total, other.swap_total) && ObjectUtils.objectsEqual(swap_free, other.swap_free) && ObjectUtils.objectsEqual(highlyAvailableScore, other.highlyAvailableScore) && (anonymousHugePages == other.anonymousHugePages));
}
#end_block

#method_before
@Override
public Host update(Host incoming) {
    validateEnums(Host.class, incoming);
    QueryIdResolver<Guid> hostResolver = new QueryIdResolver<Guid>(VdcQueryType.GetVdsByVdsId, IdQueryParameters.class);
    VDS entity = getEntity(hostResolver, true);
    if (incoming.isSetCluster() && (incoming.getCluster().isSetId() || incoming.getCluster().isSetName())) {
        Guid clusterId = lookupClusterId(incoming);
        if (!clusterId.equals(entity.getVdsGroupId())) {
            performAction(VdcActionType.ChangeVDSCluster, new ChangeVDSClusterParameters(clusterId, guid));
            // After changing the cluster with the specialized command we need to reload the entity, so that it
            // contains the new cluster id. If we don't do this the next command will think that we are trying
            // to change the cluster, and it will explicitly refuse to perform the update.
            entity = getEntity(hostResolver, true);
        // Alternatively we could just change the cluster id of the entity, but this looks less reliable.
        // entity.setVdsGroupId(clusterId);
        // TODO: Consider moving this logic to the backend.
        }
    }
    return performUpdate(incoming, entity, map(entity), hostResolver, VdcActionType.UpdateVds, new UpdateParametersProvider());
}
#method_after
@Override
public Host update(Host incoming) {
    validateEnums(Host.class, incoming);
    QueryIdResolver<Guid> hostResolver = new QueryIdResolver<Guid>(VdcQueryType.GetVdsByVdsId, IdQueryParameters.class);
    VDS entity = getEntity(hostResolver, true);
    if (incoming.isSetCluster() && (incoming.getCluster().isSetId() || incoming.getCluster().isSetName())) {
        Guid clusterId = lookupClusterId(incoming);
        if (!clusterId.equals(entity.getVdsGroupId())) {
            performAction(VdcActionType.ChangeVDSCluster, new ChangeVDSClusterParameters(clusterId, guid));
            // After changing the cluster with the specialized command we need to reload the entity, so that it
            // contains the new cluster id. If we don't do this the next command will think that we are trying
            // to change the cluster, and it will explicitly refuse to perform the update.
            entity = getEntity(hostResolver, true);
        }
    }
    return performUpdate(incoming, entity, map(entity), hostResolver, VdcActionType.UpdateVds, new UpdateParametersProvider());
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    return Collections.singletonMap(getVmTemplateId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, getTemplateExclusiveLockMessage()));
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    if (getVmTemplate() != null) {
        return Collections.singletonMap(getVmTemplateId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, getTemplateExclusiveLockMessage()));
    }
    return null;
}
#end_block

#method_before
private String getTemplateExclusiveLockMessage() {
    if (getVmTemplate() != null) {
        return new StringBuilder(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_BEING_REMOVED.name()).append(String.format("$TemplateName %1$s", getVmTemplate().getName())).toString();
    }
    return VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED.name();
}
#method_after
private String getTemplateExclusiveLockMessage() {
    return new StringBuilder(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_BEING_REMOVED.name()).append(String.format("$TemplateName %1$s", getVmTemplate().getName())).toString();
}
#end_block

#method_before
public void testGetAllNetworkLabelsForDataCenter() {
    List<String> result = dao.getAllNetworkLabelsForDataCenter(datacenter);
    assertNotNull(result);
    assertFalse(result.isEmpty());
}
#method_after
public void testGetAllNetworkLabelsForDataCenter() {
    Set<String> result = dao.getAllNetworkLabelsForDataCenter(datacenter);
    assertNotNull(result);
    assertFalse(result.isEmpty());
}
#end_block

#method_before
@Override
public List<String> getAllNetworkLabelsForDataCenter(Guid id) {
    return getCallsHandler().executeReadList("GetAllNetworkLabelsByDataCenterId", StringRowMapper.instance, createIdParameterMapper(id));
}
#method_after
@Override
public Set<String> getAllNetworkLabelsForDataCenter(Guid id) {
    return new HashSet<>(getCallsHandler().executeReadList("GetAllNetworkLabelsByDataCenterId", new SingleColumnRowMapper<String>(), createIdParameterMapper(id)));
}
#end_block

#method_before
@Before
public void setUp() {
    // The VM to use
    Guid vmId = Guid.newGuid();
    Guid vdsGroupId = Guid.newGuid();
    Guid spId = Guid.newGuid();
    vm = new VM();
    vm.setId(vmId);
    vm.setVdsGroupId(vdsGroupId);
    vm.setStoragePoolId(spId);
    vm.setVmOs(14);
    when(vmDao.get(vmId)).thenReturn(vm);
    // The cluster to use
    vdsGroup = new VDSGroup();
    vdsGroup.setcpu_name("Intel Conroe Family");
    vdsGroup.setArchitectureType(ArchitectureType.x86_64);
    vdsGroup.setId(vdsGroupId);
    vdsGroup.setStoragePoolId(spId);
    vdsGroup.setcompatibility_version(Version.v3_2);
    when(vdsGroupDao.get(vdsGroupId)).thenReturn(vdsGroup);
    when(osRepository.getMinimumRam(vm.getVmOsId(), Version.v3_2)).thenReturn(0);
    when(osRepository.getMaximumRam(vm.getVmOsId(), Version.v3_2)).thenReturn(100);
    AddVmTemplateParameters params = new AddVmTemplateParameters(vm, "templateName", "Template for testing");
    // init the injector with the osRepository instance
    SimpleDependecyInjector.getInstance().bind(OsRepository.class, osRepository);
    // Using the compensation constructor since the normal one contains DB access
    cmd = spy(new AddVmTemplateCommand<AddVmTemplateParameters>(params) {

        @Override
        protected void updateVmDisks() {
        }

        @Override
        public VM getVm() {
            return vm;
        }
    });
    doReturn(vmDao).when(cmd).getVmDAO();
    doReturn(vdsGroupDao).when(cmd).getVdsGroupDAO();
    cmd.setVmId(vmId);
    cmd.setVdsGroupId(vdsGroupId);
}
#method_after
@Before
public void setUp() {
    // The VM to use
    Guid vmId = Guid.newGuid();
    Guid vdsGroupId = Guid.newGuid();
    Guid spId = Guid.newGuid();
    vm = new VM();
    vm.setId(vmId);
    vm.setVdsGroupId(vdsGroupId);
    vm.setStoragePoolId(spId);
    vm.setVmOs(14);
    when(vmDao.get(vmId)).thenReturn(vm);
    // The cluster to use
    vdsGroup = new VDSGroup();
    vdsGroup.setcpu_name("Intel Conroe Family");
    vdsGroup.setArchitecture(ArchitectureType.x86_64);
    vdsGroup.setId(vdsGroupId);
    vdsGroup.setStoragePoolId(spId);
    vdsGroup.setcompatibility_version(Version.v3_2);
    when(vdsGroupDao.get(vdsGroupId)).thenReturn(vdsGroup);
    when(osRepository.getMinimumRam(vm.getVmOsId(), Version.v3_2)).thenReturn(0);
    when(osRepository.getMaximumRam(vm.getVmOsId(), Version.v3_2)).thenReturn(100);
    when(osRepository.getArchitectureFromOS(14)).thenReturn(ArchitectureType.x86_64);
    AddVmTemplateParameters params = new AddVmTemplateParameters(vm, "templateName", "Template for testing");
    // init the injector with the osRepository instance
    SimpleDependecyInjector.getInstance().bind(OsRepository.class, osRepository);
    // Using the compensation constructor since the normal one contains DB access
    cmd = spy(new AddVmTemplateCommand<AddVmTemplateParameters>(params) {

        @Override
        protected void updateVmDisks() {
        }

        @Override
        protected void updateVmDevices() {
        }

        @Override
        public VM getVm() {
            return vm;
        }
    });
    doReturn(vmDao).when(cmd).getVmDAO();
    doReturn(vdsGroupDao).when(cmd).getVdsGroupDAO();
    cmd.setVmId(vmId);
    cmd.setVdsGroupId(vdsGroupId);
}
#end_block

#method_before
protected void setUpCommand() {
    command = createCommand();
    doReturn(true).when(command).areTemplateImagesInStorageReady(any(Guid.class));
    doReturn(true).when(command).isMemorySizeLegal(any(Version.class));
    doReturn(true).when(command).verifyAddVM();
}
#method_after
protected void setUpCommand() {
    command = createCommand();
    doReturn(true).when(command).areTemplateImagesInStorageReady(any(Guid.class));
    doReturn(true).when(command).verifyAddVM();
}
#end_block

#method_before
private void mockVds() {
    mockGetImageDomainsListVdsCommand(100, 100);
}
#method_after
private void mockVds() {
    mockGetStorageDomainList(100, 100);
    mockGetImagesList();
}
#end_block

#method_before
private VM mockVm() {
    VM vm = new VM();
    vm.setStatus(VMStatus.Down);
    vm.setVmtGuid(vmTemplateId);
    vm.setStaticData(getVmStatic());
    return vm;
}
#method_after
private VM mockVm() {
    VM vm = new VM();
    vm.setStatus(VMStatus.Down);
    vm.setVmtGuid(vmTemplateId);
    vm.setStaticData(getVmStatic());
    vm.setClusterArch(ArchitectureType.x86_64);
    return vm;
}
#end_block

#method_before
private VDSGroup mockVdsGroup() {
    VDSGroup group = new VDSGroup();
    group.setvds_group_id(vdsGroupId);
    group.setcompatibility_version(new Version());
    group.setStoragePoolId(storagePoolId);
    group.setcpu_name("Intel Conroe Family");
    group.setArchitectureType(ArchitectureType.x86_64);
    return group;
}
#method_after
private VDSGroup mockVdsGroup() {
    VDSGroup group = new VDSGroup();
    group.setvds_group_id(vdsGroupId);
    group.setcompatibility_version(new Version());
    group.setStoragePoolId(storagePoolId);
    group.setcpu_name("Intel Conroe Family");
    group.setArchitecture(ArchitectureType.x86_64);
    return group;
}
#end_block

#method_before
private VmTemplate mockVmTemplate() {
    VmTemplate template = new VmTemplate();
    template.setId(vmTemplateId);
    template.setStoragePoolId(storagePoolId);
    template.setArchitecture(ArchitectureType.x86_64);
    setDiskList(template);
    return template;
}
#method_after
private VmTemplate mockVmTemplate() {
    VmTemplate template = new VmTemplate();
    template.setId(vmTemplateId);
    template.setStoragePoolId(storagePoolId);
    template.setClusterArch(ArchitectureType.x86_64);
    setDiskList(template);
    return template;
}
#end_block

#method_before
private StoragePool mockStoragePool() {
    StoragePool storagePool = new StoragePool();
    storagePool.setstatus(StoragePoolStatus.Up);
    return storagePool;
}
#method_after
private StoragePool mockStoragePool() {
    StoragePool storagePool = new StoragePool();
    storagePool.setStatus(StoragePoolStatus.Up);
    return storagePool;
}
#end_block

#method_before
private static void setDiskList(VmTemplate vmTemplate) {
    for (DiskImage diskImage : getDiskImageList()) {
        vmTemplate.getDiskList().add(diskImage);
    }
    Map<Guid, DiskImage> diskImageTemplate = getDiskImageTempalteList();
    for (Guid key : diskImageTemplate.keySet()) {
        vmTemplate.getDiskMap().put(key, diskImageTemplate.get(key));
    }
}
#method_after
private static void setDiskList(VmTemplate vmTemplate) {
    for (DiskImage diskImage : getDiskImageList()) {
        vmTemplate.getDiskList().add(diskImage);
    }
    Map<Guid, DiskImage> diskImageTemplate = getDiskImageTempalteList();
    vmTemplate.getDiskTemplateMap().putAll(diskImageTemplate);
}
#end_block

#method_before
private VmStatic getVmStatic() {
    VmStatic vmStatic = new VmStatic();
    vmStatic.setOsId(OsRepository.DEFAULT_OS);
    vmStatic.setMemSizeMb(300);
    vmStatic.setStateless(false);
    vmStatic.setVmtGuid(vmTemplateId);
    vmStatic.setArchitecture(ArchitectureType.x86_64);
    return vmStatic;
}
#method_after
private VmStatic getVmStatic() {
    VmStatic vmStatic = new VmStatic();
    vmStatic.setOsId(OsRepository.DEFAULT_OS);
    vmStatic.setMemSizeMb(300);
    vmStatic.setStateless(false);
    vmStatic.setVmtGuid(vmTemplateId);
    return vmStatic;
}
#end_block

#method_before
@Before
public void setUp() {
    VmHandler.Init();
    vm = new VM();
    vmStatic = new VmStatic();
    group = new VDSGroup();
    group.setcpu_name("Intel Conroe Family");
    group.setId(Guid.newGuid());
    group.setcompatibility_version(Version.v3_0);
    group.setArchitectureType(ArchitectureType.x86_64);
    vm.setVdsGroupId(group.getId());
    vm.setArchitecture(ArchitectureType.x86_64);
    vmStatic.setVdsGroupId(group.getId());
    vmStatic.setArchitecture(ArchitectureType.x86_64);
    SimpleDependecyInjector.getInstance().bind(OsRepository.class, osRepository);
    when(osRepository.getMinimumRam(0, Version.v3_0)).thenReturn(0);
    when(osRepository.getMinimumRam(0, null)).thenReturn(0);
    when(osRepository.getMaximumRam(0, Version.v3_0)).thenReturn(256);
    when(osRepository.getMaximumRam(0, null)).thenReturn(256);
    VmManagementParametersBase params = new VmManagementParametersBase();
    params.setCommandType(VdcActionType.UpdateVm);
    params.setVmStaticData(vmStatic);
    command = spy(new UpdateVmCommand<VmManagementParametersBase>(params) {

        @Override
        public VDSGroup getVdsGroup() {
            return group;
        }
    });
    doReturn(vm).when(command).getVm();
}
#method_after
@Before
public void setUp() {
    SimpleDependecyInjector.getInstance().bind(OsRepository.class, osRepository);
    when(osRepository.getMinimumRam(0, Version.v3_0)).thenReturn(0);
    when(osRepository.getMinimumRam(0, null)).thenReturn(0);
    when(osRepository.getMaximumRam(0, Version.v3_0)).thenReturn(256);
    when(osRepository.getMaximumRam(0, null)).thenReturn(256);
    when(osRepository.isWindows(0)).thenReturn(false);
    when(osRepository.getArchitectureFromOS(0)).thenReturn(ArchitectureType.x86_64);
    VmHandler.init();
    vm = new VM();
    vmStatic = new VmStatic();
    group = new VDSGroup();
    group.setcpu_name("Intel Conroe Family");
    group.setId(Guid.newGuid());
    group.setcompatibility_version(Version.v3_0);
    group.setArchitecture(ArchitectureType.x86_64);
    vm.setVdsGroupId(group.getId());
    vm.setClusterArch(ArchitectureType.x86_64);
    vmStatic.setVdsGroupId(group.getId());
    VmManagementParametersBase params = new VmManagementParametersBase();
    params.setCommandType(VdcActionType.UpdateVm);
    params.setVmStaticData(vmStatic);
    command = spy(new UpdateVmCommand<VmManagementParametersBase>(params) {

        @Override
        public VDSGroup getVdsGroup() {
            return group;
        }
    });
    doReturn(vm).when(command).getVm();
}
#end_block

#method_before
private void prepareVmToPassCanDoAction() {
    vmStatic.setName("vm1");
    vmStatic.setMemSizeMb(256);
    mockVmDaoGetVm();
    mockSameNameQuery(false);
    mockValidateCustomProperties();
}
#method_after
private void prepareVmToPassCanDoAction() {
    vmStatic.setName("vm1");
    vmStatic.setMemSizeMb(256);
    vmStatic.setSingleQxlPci(false);
    mockVmDaoGetVm();
    mockSameNameQuery(false);
    mockValidateCustomProperties();
    mockValidatePciAndIdeLimit();
}
#end_block

#method_before
protected void initTemplate() {
    if (getVmTemplate() != null) {
        VmTemplateHandler.UpdateDisksFromDb(getVmTemplate());
    }
}
#method_after
protected void initTemplate() {
    if (getVmTemplate() != null) {
        VmTemplateHandler.updateDisksFromDb(getVmTemplate());
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    Guid poolId = getPoolId();
    boolean isAtLeastOneVMCreationFailed = false;
    setActionReturnValue(poolId);
    VmTemplateHandler.lockVmTemplateInTransaction(getParameters().getVmStaticData().getVmtGuid(), getCompensationContext());
    String poolName = getParameters().getVmStaticData().getName();
    int subsequentFailedAttempts = 0;
    int vmPoolMaxSubsequentFailures = Config.<Integer>GetValue(ConfigValues.VmPoolMaxSubsequentFailures);
    for (int i = 1, number = 1; i <= getParameters().getVmsCount(); i++, number++) {
        String currentVmName;
        number--;
        do {
            number++;
            currentVmName = NameForVmInPoolGenerator.generateVmName(poolName, number);
        } while (VmHandler.isVmWithSameNameExistStatic(currentVmName));
        VmStatic currVm = new VmStatic(getParameters().getVmStaticData());
        currVm.setName(currentVmName);
        AddVmAndAttachToPoolParameters addVmAndAttachToPoolParams = new AddVmAndAttachToPoolParameters(currVm, poolId, currentVmName, diskInfoDestinationMap);
        addVmAndAttachToPoolParams.setSessionId(getParameters().getSessionId());
        addVmAndAttachToPoolParams.setParentCommand(VdcActionType.AddVmPoolWithVms);
        addVmAndAttachToPoolParams.setSoundDeviceEnabled(getParameters().isSoundDeviceEnabled() != null ? getParameters().isSoundDeviceEnabled() : VmType.Desktop == getParameters().getVmStaticData().getVmType());
        addVmAndAttachToPoolParams.setConsoleEnabled(getParameters().isConsoleEnabled());
        VdcReturnValueBase returnValue = Backend.getInstance().runInternalAction(VdcActionType.AddVmAndAttachToPool, addVmAndAttachToPoolParams, createAddVmStepContext(currentVmName));
        if (returnValue != null && !returnValue.getSucceeded() && returnValue.getCanDoActionMessages().size() > 0) {
            for (String msg : returnValue.getCanDoActionMessages()) {
                if (!getReturnValue().getCanDoActionMessages().contains(msg)) {
                    getReturnValue().getCanDoActionMessages().add(msg);
                }
            }
            _addVmsSucceded = returnValue.getSucceeded() && _addVmsSucceded;
            subsequentFailedAttempts++;
        } else {
            // Succeed on that , reset subsequentFailedAttempts.
            subsequentFailedAttempts = 0;
        }
        // if subsequent attempts failure exceeds configuration value , abort the loop.
        if (subsequentFailedAttempts == vmPoolMaxSubsequentFailures) {
            AuditLogableBase logable = new AuditLogableBase();
            AuditLogDirector.log(logable, AuditLogType.USER_VM_POOL_MAX_SUBSEQUENT_FAILURES_REACHED);
            break;
        }
        isAtLeastOneVMCreationFailed = isAtLeastOneVMCreationFailed || !_addVmsSucceded;
    }
    getReturnValue().setCanDoAction(!isAtLeastOneVMCreationFailed);
    setSucceeded(!isAtLeastOneVMCreationFailed);
    VmTemplateHandler.UnLockVmTemplate(getParameters().getVmStaticData().getVmtGuid());
    getCompensationContext().resetCompensation();
}
#method_after
@Override
protected void executeCommand() {
    VmHandler.warnMemorySizeLegal(getParameters().getVmStaticData(), getVdsGroup().getcompatibility_version());
    Guid poolId = getPoolId();
    boolean isAtLeastOneVMCreationFailed = false;
    setActionReturnValue(poolId);
    VmTemplateHandler.lockVmTemplateInTransaction(getParameters().getVmStaticData().getVmtGuid(), getCompensationContext());
    String poolName = getParameters().getVmStaticData().getName();
    int subsequentFailedAttempts = 0;
    int vmPoolMaxSubsequentFailures = Config.<Integer>getValue(ConfigValues.VmPoolMaxSubsequentFailures);
    for (int i = 1, number = 1; i <= getParameters().getVmsCount(); i++, number++) {
        String currentVmName;
        number--;
        do {
            number++;
            currentVmName = NameForVmInPoolGenerator.generateVmName(poolName, number);
        } while (VmHandler.isVmWithSameNameExistStatic(currentVmName));
        VmStatic currVm = new VmStatic(getParameters().getVmStaticData());
        currVm.setName(currentVmName);
        AddVmAndAttachToPoolParameters addVmAndAttachToPoolParams = new AddVmAndAttachToPoolParameters(currVm, poolId, currentVmName, diskInfoDestinationMap);
        addVmAndAttachToPoolParams.setSessionId(getParameters().getSessionId());
        addVmAndAttachToPoolParams.setParentCommand(VdcActionType.AddVmPoolWithVms);
        addVmAndAttachToPoolParams.setSoundDeviceEnabled(getParameters().isSoundDeviceEnabled() != null ? getParameters().isSoundDeviceEnabled() : VmType.Desktop == getParameters().getVmStaticData().getVmType());
        addVmAndAttachToPoolParams.setConsoleEnabled(getParameters().isConsoleEnabled());
        addVmAndAttachToPoolParams.setVirtioScsiEnabled(getParameters().isVirtioScsiEnabled());
        VdcReturnValueBase returnValue = Backend.getInstance().runInternalAction(VdcActionType.AddVmAndAttachToPool, addVmAndAttachToPoolParams, createAddVmStepContext(currentVmName));
        if (returnValue != null && !returnValue.getSucceeded() && returnValue.getCanDoActionMessages().size() > 0) {
            for (String msg : returnValue.getCanDoActionMessages()) {
                if (!getReturnValue().getCanDoActionMessages().contains(msg)) {
                    getReturnValue().getCanDoActionMessages().add(msg);
                }
            }
            _addVmsSucceded = returnValue.getSucceeded() && _addVmsSucceded;
            subsequentFailedAttempts++;
        } else {
            // Succeed on that , reset subsequentFailedAttempts.
            subsequentFailedAttempts = 0;
        }
        // if subsequent attempts failure exceeds configuration value , abort the loop.
        if (subsequentFailedAttempts == vmPoolMaxSubsequentFailures) {
            AuditLogableBase logable = new AuditLogableBase();
            AuditLogDirector.log(logable, AuditLogType.USER_VM_POOL_MAX_SUBSEQUENT_FAILURES_REACHED);
            break;
        }
        isAtLeastOneVMCreationFailed = isAtLeastOneVMCreationFailed || !_addVmsSucceded;
    }
    getReturnValue().setCanDoAction(!isAtLeastOneVMCreationFailed);
    setSucceeded(!isAtLeastOneVMCreationFailed);
    VmTemplateHandler.unlockVmTemplate(getParameters().getVmStaticData().getVmtGuid());
    getCompensationContext().resetCompensation();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    VDSGroup grp = getVdsGroupDAO().get(getParameters().getVmPool().getVdsGroupId());
    if (grp == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (StringUtils.isEmpty(grp.getcpu_name())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_EMPTY_PROCESSOR_NAME);
    }
    if (!isMemorySizeLegal(grp.getcompatibility_version())) {
        return false;
    }
    VmPool pool = getVmPoolDAO().getByName(getParameters().getVmPool().getName());
    if (pool != null && (getActionType() == VdcActionType.AddVmPoolWithVms || !pool.getVmPoolId().equals(getParameters().getVmPoolId()))) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
        return false;
    }
    setStoragePoolId(grp.getStoragePoolId());
    // check if the selected template is compatible with pool architecture.
    if (!VmHandler.isCompatibleVmAndTemplate(getParameters().getVmStaticData(), getVmTemplate(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getStoragePool() == null || getStoragePool().getstatus() != StoragePoolStatus.Up) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
    }
    if (!verifyAddVM()) {
        return false;
    }
    if (!ensureDestinationImageMap()) {
        return false;
    }
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getVmTemplate().getDiskMap().values(), diskInfoDestinationMap);
    List<Guid> storageIds = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid storageId = diskImage.getStorageIds().get(0);
        if (!storageIds.contains(storageId) && !areTemplateImagesInStorageReady(storageId)) {
            return false;
        }
        storageIds.add(storageId);
    }
    if (getActionType() == VdcActionType.AddVmPoolWithVms && getParameters().getVmsCount() < 1) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_WITH_NO_VMS);
        return false;
    }
    if (getParameters().getVmStaticData().isStateless()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
        return false;
    }
    if (getParameters().getVmPool().getPrestartedVms() > getParameters().getVmPool().getAssignedVmsCount()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_PRESTARTED_VMS_CANNOT_EXCEED_VMS_COUNT);
        return false;
    }
    return checkFreeSpaceAndTypeOnDestDomains();
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    // A Pool cannot be added in a cluster without a defined architecture
    if (getVdsGroup().getArchitecture() == ArchitectureType.undefined) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_UNDEFINED_ARCHITECTURE);
    }
    VmPool pool = getVmPoolDAO().getByName(getParameters().getVmPool().getName());
    if (pool != null && (getActionType() == VdcActionType.AddVmPoolWithVms || !pool.getVmPoolId().equals(getParameters().getVmPoolId()))) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
        return false;
    }
    setStoragePoolId(getVdsGroup().getStoragePoolId());
    if (!validate(new StoragePoolValidator(getStoragePool()).isUp())) {
        return false;
    }
    // check if the selected template is compatible with Cluster architecture.
    if (!getVmTemplate().getId().equals(VmTemplateHandler.BLANK_VM_TEMPLATE_ID) && getVdsGroup().getArchitecture() != getVmTemplate().getClusterArch()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_INCOMPATIBLE);
    }
    if (!verifyAddVM()) {
        return false;
    }
    if (!ensureDestinationImageMap()) {
        return false;
    }
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getVmTemplate().getDiskTemplateMap().values(), diskInfoDestinationMap);
    List<Guid> storageIds = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid storageId = diskImage.getStorageIds().get(0);
        if (!storageIds.contains(storageId) && !areTemplateImagesInStorageReady(storageId)) {
            return false;
        }
        storageIds.add(storageId);
    }
    if (getActionType() == VdcActionType.AddVmPoolWithVms && getParameters().getVmsCount() < 1) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_WITH_NO_VMS);
        return false;
    }
    if (getParameters().getVmStaticData().isStateless()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
        return false;
    }
    if (getParameters().getVmPool().getPrestartedVms() > getParameters().getVmPool().getAssignedVmsCount()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_PRESTARTED_VMS_CANNOT_EXCEED_VMS_COUNT);
        return false;
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    return checkFreeSpaceAndTypeOnDestDomains();
}
#end_block

#method_before
protected boolean verifyAddVM() {
    return VmHandler.VerifyAddVm(getReturnValue().getCanDoActionMessages(), getParameters().getVmsCount() * getVmNicDao().getAllForTemplate(getVmTemplateId()).size(), getParameters().getVmStaticData().getPriority());
}
#method_after
protected boolean verifyAddVM() {
    return VmHandler.verifyAddVm(getReturnValue().getCanDoActionMessages(), getParameters().getVmsCount() * getVmNicDao().getAllForTemplate(getVmTemplateId()).size(), getParameters().getVmStaticData().getPriority());
}
#end_block

#method_before
private boolean ensureDestinationImageMap() {
    if (diskInfoDestinationMap.isEmpty()) {
        if (getParameters().getStorageDomainId() != null && !Guid.Empty.equals(getParameters().getStorageDomainId())) {
            Guid storageId = getParameters().getStorageDomainId();
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(storageId);
            for (DiskImage image : getVmTemplate().getDiskMap().values()) {
                image.setStorageIds(storageIds);
                diskInfoDestinationMap.put(image.getId(), image);
            }
        } else {
            ImagesHandler.fillImagesMapBasedOnTemplate(getVmTemplate(), diskInfoDestinationMap, destStorages, false);
        }
    }
    if (getVmTemplate().getDiskMap().values().size() != diskInfoDestinationMap.size()) {
        log.errorFormat("Can not found any default active domain for one of the disks of template with id : {0}", getVmTemplate().getId());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS);
        return false;
    }
    return true;
}
#method_after
private boolean ensureDestinationImageMap() {
    if (diskInfoDestinationMap.isEmpty()) {
        if (getParameters().getStorageDomainId() != null && !Guid.Empty.equals(getParameters().getStorageDomainId())) {
            Guid storageId = getParameters().getStorageDomainId();
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(storageId);
            for (DiskImage image : getVmTemplate().getDiskTemplateMap().values()) {
                image.setStorageIds(storageIds);
                diskInfoDestinationMap.put(image.getId(), image);
            }
        } else {
            ImagesHandler.fillImagesMapBasedOnTemplate(getVmTemplate(), diskInfoDestinationMap, destStorages, false);
        }
    }
    if (getVmTemplate().getDiskTemplateMap().values().size() != diskInfoDestinationMap.size()) {
        log.errorFormat("Can not found any default active domain for one of the disks of template with id : {0}", getVmTemplate().getId());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS);
        return false;
    }
    return true;
}
#end_block

#method_before
private int getBlockSparseInitSizeInGB() {
    return Config.<Integer>GetValue(ConfigValues.InitStorageSparseSizeInGB).intValue();
}
#method_after
private int getBlockSparseInitSizeInGB() {
    return Config.<Integer>getValue(ConfigValues.InitStorageSparseSizeInGB).intValue();
}
#end_block

#method_before
protected void updateDiskInfoDestinationMap() {
    diskInfoDestinationMap = getParameters().getDiskInfoDestinationMap();
    if (diskInfoDestinationMap == null) {
        diskInfoDestinationMap = new HashMap<Guid, DiskImage>();
    }
    sourceImageDomainsImageMap = new HashMap<Guid, List<DiskImage>>();
    for (DiskImage image : mImages) {
        MultiValueMapUtils.addToMap(image.getStorageIds().get(0), image, sourceImageDomainsImageMap);
        if (!diskInfoDestinationMap.containsKey(image.getId())) {
            Guid destStorageId = getParameters().getDestinationStorageDomainId() != null ? getParameters().getDestinationStorageDomainId() : image.getStorageIds().get(0);
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(destStorageId);
            image.setStorageIds(storageIds);
            diskInfoDestinationMap.put(image.getId(), image);
        }
    }
}
#method_after
protected void updateDiskInfoDestinationMap() {
    diskInfoDestinationMap = getParameters().getDiskInfoDestinationMap();
    if (diskInfoDestinationMap == null) {
        diskInfoDestinationMap = new HashMap<Guid, DiskImage>();
    }
    sourceImageDomainsImageMap = new HashMap<Guid, List<DiskImage>>();
    for (DiskImage image : mImages) {
        MultiValueMapUtils.addToMap(image.getStorageIds().get(0), image, sourceImageDomainsImageMap);
        if (!diskInfoDestinationMap.containsKey(image.getId())) {
            diskInfoDestinationMap.put(image.getId(), image);
        }
    }
}
#end_block

#method_before
protected void updateVmDisks() {
    VmHandler.updateDisksFromDb(getVm());
    for (DiskImage diskImage : getVm().getDiskList()) {
        mImages.add(diskImage);
    }
}
#method_after
protected void updateVmDisks() {
    VmHandler.updateDisksFromDb(getVm());
    VmHandler.filterImageDisksForVM(getVm(), false, false, true);
    mImages.addAll(getVm().getDiskList());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // relevant only if template created from vm
    if (isVmInDb) {
        VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(getVmId());
        if (vmDynamic.getStatus() != VMStatus.Down) {
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
        VmHandler.LockVm(vmDynamic, getCompensationContext());
    }
    setActionReturnValue(Guid.Empty);
    setVmTemplateId(Guid.newGuid());
    getParameters().setVmTemplateId(getVmTemplateId());
    getParameters().setEntityInfo(new EntityInfo(VdcObjectType.VmTemplate, getVmTemplateId()));
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVmTemplateToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            addPermission();
            AddVmTemplateImages();
            List<VmNic> vmInterfaces = addVmInterfaces();
            if (isVmInDb) {
                VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), newDiskImages, vmInterfaces, getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled());
            } else {
                // sending true for isVm in order to create basic devices needed
                VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), getVm(), getVmTemplate(), true, Collections.<VmDevice>emptyList(), newDiskImages, vmInterfaces, getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled());
            }
            setSucceeded(true);
            return null;
        }
    });
    // means that there are no asynchronous tasks to execute and that we can
    // end the command synchronously
    boolean pendingAsyncTasks = !getReturnValue().getVdsmTaskIdList().isEmpty();
    if (!pendingAsyncTasks) {
        endSuccessfullySynchronous();
    }
}
#method_after
@Override
protected void executeCommand() {
    // relevant only if template created from vm
    if (isVmInDb) {
        VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(getVmId());
        if (vmDynamic.getStatus() != VMStatus.Down) {
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
        VmHandler.lockVm(vmDynamic, getCompensationContext());
    }
    setActionReturnValue(Guid.Empty);
    setVmTemplateId(Guid.newGuid());
    getParameters().setVmTemplateId(getVmTemplateId());
    getParameters().setEntityInfo(new EntityInfo(VdcObjectType.VmTemplate, getVmTemplateId()));
    final Map<Guid, Guid> srcDeviceIdToTargetDeviceIdMapping = new HashMap<>();
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            addVmTemplateToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            addPermission();
            addVmTemplateImages(srcDeviceIdToTargetDeviceIdMapping);
            addVmInterfaces(srcDeviceIdToTargetDeviceIdMapping);
            if (isVmInDb) {
                VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), srcDeviceIdToTargetDeviceIdMapping, getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled(), getParameters().isVirtioScsiEnabled(), false);
            } else {
                // sending true for isVm in order to create basic devices needed
                VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), getVm(), getVmTemplate(), true, Collections.<VmDevice>emptyList(), srcDeviceIdToTargetDeviceIdMapping, getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled(), getParameters().isVirtioScsiEnabled(), false);
            }
            setSucceeded(true);
            return null;
        }
    });
    VmHandler.warnMemorySizeLegal(getVmTemplate(), getVdsGroup().getcompatibility_version());
    // means that there are no asynchronous tasks to execute and that we can
    // end the command synchronously
    boolean pendingAsyncTasks = !getReturnValue().getVdsmTaskIdList().isEmpty();
    if (!pendingAsyncTasks) {
        endSuccessfullySynchronous();
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (StringUtils.isEmpty(getVdsGroup().getcpu_name())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_EMPTY_PROCESSOR_NAME);
    }
    if (!VmHandler.isMemorySizeLegal(getParameters().getMasterVm().getOsId(), getParameters().getMasterVm().getMemSizeMb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        return false;
    }
    if (!IsVmPriorityValueLegal(getParameters().getMasterVm().getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (isVmInDb && getVm().getStatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getUsbPolicy(), getParameters().getVm().getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getVm().getSingleQxlPci() && !VmHandler.isSingleQxlDeviceLegal(getParameters().getVm().getDefaultDisplayType(), getParameters().getVm().getOs(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        return false;
    }
    return imagesRelatedChecks() && AddVmCommand.CheckCpuSockets(getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    // A Template cannot be added in a cluster without a defined architecture
    if (getVdsGroup().getArchitecture() == ArchitectureType.undefined) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_UNDEFINED_ARCHITECTURE);
    }
    if (!VmHandler.isOsTypeSupported(getParameters().getMasterVm().getOsId(), getVdsGroup().getArchitecture(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (!isVmPriorityValueLegal(getParameters().getMasterVm().getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (isVmInDb && getVm().getStatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getUsbPolicy(), getParameters().getVm().getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getVm().getSingleQxlPci() && !VmHandler.isSingleQxlDeviceLegal(getParameters().getVm().getDefaultDisplayType(), getParameters().getVm().getOs(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        return false;
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    // Check if the watchdog model is supported
    if (getParameters().getWatchdog() != null) {
        if (!validate((new VmWatchdogValidator(getParameters().getMasterVm().getOsId(), getParameters().getWatchdog(), getVdsGroup().getcompatibility_version())).isModelCompatibleWithOs())) {
            return false;
        }
    }
    return imagesRelatedChecks() && AddVmCommand.checkCpuSockets(getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#end_block

#method_before
private boolean imagesRelatedChecks() {
    // images related checks
    if (!mImages.isEmpty()) {
        if (!getVm().getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
            addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
            return false;
        }
        if (!validateVmNotDuringSnapshot()) {
            return false;
        }
        if (!validate(new StoragePoolValidator(getStoragePool()).isUp())) {
            return false;
        }
        List<DiskImage> diskImagesToCheck = ImagesHandler.filterImageDisks(mImages, true, false);
        DiskImagesValidator diskImagesValidator = new DiskImagesValidator(diskImagesToCheck);
        if (!validate(diskImagesValidator.diskImagesNotIllegal()) || !validate(diskImagesValidator.diskImagesNotLocked())) {
            return false;
        }
        MultipleStorageDomainsValidator storageDomainsValidator = new MultipleStorageDomainsValidator(getStoragePoolId(), sourceImageDomainsImageMap.keySet());
        if (!validate(storageDomainsValidator.allDomainsExistAndActive())) {
            return false;
        }
        Map<Guid, StorageDomain> storageDomains = new HashMap<Guid, StorageDomain>();
        Set<Guid> destImageDomains = getStorageGuidSet();
        destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
        for (Guid destImageDomain : destImageDomains) {
            StorageDomain storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getStoragePoolId());
            if (storage == null) {
                // domain is not in the same storage pool as the vm
                if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
                } else {
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
                }
                return false;
            }
            if (storage.getStatus() == null || storage.getStatus() != StorageDomainStatus.Active) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
                return false;
            }
            if (storage.getStorageDomainType() == StorageDomainType.ImportExport || storage.getStorageDomainType() == StorageDomainType.ISO) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
                return false;
            }
            storageDomains.put(destImageDomain, storage);
        }
        // update vm snapshots for storage free space check
        ImagesHandler.fillImagesBySnapshots(getVm());
        Map<StorageDomain, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false), storageDomains, diskInfoDestinationMap);
        for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
            if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
                return false;
            }
        }
    }
    return true;
}
#method_after
private boolean imagesRelatedChecks() {
    // images related checks
    if (!mImages.isEmpty()) {
        if (!getVm().getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
            addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
            return false;
        }
        if (!validateVmNotDuringSnapshot()) {
            return false;
        }
        if (!validate(new StoragePoolValidator(getStoragePool()).isUp())) {
            return false;
        }
        List<DiskImage> diskImagesToCheck = ImagesHandler.filterImageDisks(mImages, true, false, true);
        DiskImagesValidator diskImagesValidator = new DiskImagesValidator(diskImagesToCheck);
        if (!validate(diskImagesValidator.diskImagesNotIllegal()) || !validate(diskImagesValidator.diskImagesNotLocked())) {
            return false;
        }
        MultipleStorageDomainsValidator storageDomainsValidator = new MultipleStorageDomainsValidator(getStoragePoolId(), sourceImageDomainsImageMap.keySet());
        if (!validate(storageDomainsValidator.allDomainsExistAndActive())) {
            return false;
        }
        Map<Guid, StorageDomain> storageDomains = new HashMap<Guid, StorageDomain>();
        Set<Guid> destImageDomains = getStorageGuidSet();
        destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
        for (Guid destImageDomain : destImageDomains) {
            StorageDomain storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getStoragePoolId());
            if (storage == null) {
                // domain is not in the same storage pool as the vm
                if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
                } else {
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
                }
                return false;
            }
            if (storage.getStatus() == null || storage.getStatus() != StorageDomainStatus.Active) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
                return false;
            }
            if (storage.getStorageDomainType() == StorageDomainType.ImportExport || storage.getStorageDomainType() == StorageDomainType.ISO) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
                return false;
            }
            storageDomains.put(destImageDomain, storage);
        }
        // update vm snapshots for storage free space check
        ImagesHandler.fillImagesBySnapshots(getVm());
        Map<StorageDomain, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false, true), storageDomains, diskInfoDestinationMap);
        for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
            if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
                return false;
            }
        }
    }
    return true;
}
#end_block

#method_before
protected List<VmNic> addVmInterfaces() {
    List<VmNic> templateInterfaces = new ArrayList<>();
    List<VmNic> interfaces = getVmNicDao().getAllForVm(getParameters().getMasterVm().getId());
    for (VmNic iface : interfaces) {
        VmNic iDynamic = new VmNic();
        iDynamic.setId(Guid.newGuid());
        iDynamic.setVmTemplateId(getVmTemplateId());
        iDynamic.setName(iface.getName());
        iDynamic.setVnicProfileId(iface.getVnicProfileId());
        iDynamic.setSpeed(VmInterfaceType.forValue(iface.getType()).getSpeed());
        iDynamic.setType(iface.getType());
        iDynamic.setLinked(iface.isLinked());
        templateInterfaces.add(iDynamic);
        getVmNicDao().save(iDynamic);
    }
    return templateInterfaces;
}
#method_after
protected void addVmInterfaces(Map<Guid, Guid> srcDeviceIdToTargetDeviceIdMapping) {
    List<VmNic> interfaces = getVmNicDao().getAllForVm(getParameters().getMasterVm().getId());
    for (VmNic iface : interfaces) {
        VmNic iDynamic = new VmNic();
        iDynamic.setId(Guid.newGuid());
        iDynamic.setVmTemplateId(getVmTemplateId());
        iDynamic.setName(iface.getName());
        iDynamic.setVnicProfileId(iface.getVnicProfileId());
        iDynamic.setSpeed(VmInterfaceType.forValue(iface.getType()).getSpeed());
        iDynamic.setType(iface.getType());
        iDynamic.setLinked(iface.isLinked());
        getVmNicDao().save(iDynamic);
        srcDeviceIdToTargetDeviceIdMapping.put(iface.getId(), iDynamic.getId());
    }
}
#end_block

#method_before
@Override
protected void endSuccessfully() {
    setVmTemplateId(getParameters().getVmTemplateId());
    setVmId(getVmIdFromImageParameters());
    getVmStaticDAO().incrementDbGeneration(getVmTemplateId());
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        Backend.getInstance().EndAction(VdcActionType.CreateImageTemplate, p);
    }
    if (reloadVmTemplateFromDB() != null) {
        endDefaultOperations();
    }
    checkTrustedService();
    setSucceeded(true);
}
#method_after
@Override
protected void endSuccessfully() {
    setVmTemplateId(getParameters().getVmTemplateId());
    setVmId(getVmIdFromImageParameters());
    isVmInDb = getVm() != null;
    getVmStaticDAO().incrementDbGeneration(getVmTemplateId());
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        Backend.getInstance().endAction(VdcActionType.CreateImageTemplate, p);
    }
    if (reloadVmTemplateFromDB() != null) {
        endDefaultOperations();
    }
    checkTrustedService();
    setSucceeded(true);
}
#end_block

#method_before
private void endUnlockOps() {
    if (isVmInDb) {
        VmHandler.UnLockVm(getVm());
    }
    VmTemplateHandler.UnLockVmTemplate(getVmTemplateId());
}
#method_after
private void endUnlockOps() {
    if (isVmInDb) {
        VmHandler.unLockVm(getVm());
    }
    VmTemplateHandler.unlockVmTemplate(getVmTemplateId());
}
#end_block

#method_before
@Override
protected void endWithFailure() {
    // We evaluate 'VmTemplate' so it won't be null in the last 'if'
    // statement.
    // (a template without images doesn't exist in the 'vm_template_view').
    setVmTemplateId(getParameters().getVmTemplateId());
    setVmId(getVmIdFromImageParameters());
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        p.setTaskGroupSuccess(false);
        Backend.getInstance().EndAction(VdcActionType.CreateImageTemplate, p);
    }
    // if template exist in db remove it
    if (getVmTemplate() != null) {
        DbFacade.getInstance().getVmTemplateDao().remove(getVmTemplateId());
        RemoveNetwork();
    }
    if (!getVmId().equals(Guid.Empty) && getVm() != null) {
        VmHandler.UnLockVm(getVm());
    }
    setSucceeded(true);
}
#method_after
@Override
protected void endWithFailure() {
    // We evaluate 'VmTemplate' so it won't be null in the last 'if'
    // statement.
    // (a template without images doesn't exist in the 'vm_template_view').
    setVmTemplateId(getParameters().getVmTemplateId());
    setVmId(getVmIdFromImageParameters());
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        p.setTaskGroupSuccess(false);
        Backend.getInstance().endAction(VdcActionType.CreateImageTemplate, p);
    }
    // if template exist in db remove it
    if (getVmTemplate() != null) {
        DbFacade.getInstance().getVmTemplateDao().remove(getVmTemplateId());
        removeNetwork();
    }
    if (!getVmId().equals(Guid.Empty) && getVm() != null) {
        VmHandler.unLockVm(getVm());
    }
    setSucceeded(true);
}
#end_block

#method_before
private void addPermission() {
    UniquePermissionsSet permissionsToAdd = new UniquePermissionsSet();
    addPermissionForTemplate(permissionsToAdd, getCurrentUser().getUserId(), PredefinedRoles.TEMPLATE_OWNER);
    // if the template is for public use, set EVERYONE as a TEMPLATE_USER.
    if (getParameters().isPublicUse()) {
        addPermissionForTemplate(permissionsToAdd, MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID, PredefinedRoles.TEMPLATE_USER);
    }
    copyVmPermissions(permissionsToAdd);
    if (!permissionsToAdd.isEmpty()) {
        List<permissions> permissionsList = permissionsToAdd.asPermissionList();
        MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new permissions[permissionsList.size()]));
    }
}
#method_after
private void addPermission() {
    UniquePermissionsSet permissionsToAdd = new UniquePermissionsSet();
    addPermissionForTemplate(permissionsToAdd, getCurrentUser().getId(), PredefinedRoles.TEMPLATE_OWNER);
    // if the template is for public use, set EVERYONE as a TEMPLATE_USER.
    if (getParameters().isPublicUse()) {
        addPermissionForTemplate(permissionsToAdd, MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID, PredefinedRoles.TEMPLATE_USER);
    } else {
        addPermissionForTemplate(permissionsToAdd, getCurrentUser().getId(), PredefinedRoles.TEMPLATE_USER);
    }
    copyVmPermissions(permissionsToAdd);
    if (!permissionsToAdd.isEmpty()) {
        List<Permissions> permissionsList = permissionsToAdd.asPermissionList();
        MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new Permissions[permissionsList.size()]));
    }
}
#end_block

#method_before
private void copyVmPermissions(UniquePermissionsSet permissionsToAdd) {
    if (!isVmInDb || !getParameters().isCopyVmPermissions()) {
        return;
    }
    PermissionDAO dao = getDbFacade().getPermissionDao();
    List<permissions> vmPermissions = dao.getAllForEntity(getVmId(), getCurrentUser().getUserId(), false);
    for (permissions vmPermission : vmPermissions) {
        permissionsToAdd.addPermission(vmPermission.getad_element_id(), vmPermission.getrole_id(), getParameters().getVmTemplateId(), VdcObjectType.VmTemplate);
    }
}
#method_after
private void copyVmPermissions(UniquePermissionsSet permissionsToAdd) {
    if (!isVmInDb || !getParameters().isCopyVmPermissions()) {
        return;
    }
    PermissionDAO dao = getDbFacade().getPermissionDao();
    List<Permissions> vmPermissions = dao.getAllForEntity(getVmId(), getCurrentUser().getId(), false);
    for (Permissions vmPermission : vmPermissions) {
        permissionsToAdd.addPermission(vmPermission.getad_element_id(), vmPermission.getrole_id(), getParameters().getVmTemplateId(), VdcObjectType.VmTemplate);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    // Set parameters for messeging.
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM__CLUSTER);
    VM vm = getVm();
    if (vm == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    } else {
        if (ObjectIdentityChecker.CanUpdateField(vm, "vdsGroupId", vm.getStatus())) {
            targetCluster = DbFacade.getInstance().getVdsGroupDao().get(getParameters().getClusterId());
            if (targetCluster == null) {
                addCanDoActionMessage(VdcBllMessages.VM_CLUSTER_IS_NOT_VALID);
                return false;
            }
            // Check that the target cluster is in the same data center.
            if (!targetCluster.getStoragePoolId().equals(vm.getStoragePoolId())) {
                addCanDoActionMessage(VdcBllMessages.VM_CANNOT_MOVE_TO_CLUSTER_IN_OTHER_STORAGE_POOL);
                return false;
            }
            List<VmNic> interfaces = getVmNicDao().getAllForVm(getParameters().getVmId());
            Version clusterCompatibilityVersion = targetCluster.getcompatibility_version();
            if (!validateDestinationClusterContainsNetworks(interfaces) || !validateNics(interfaces, clusterCompatibilityVersion)) {
                return false;
            }
            // Check if VM static parameters are compatible for new cluster.
            boolean isCpuSocketsValid = AddVmCommand.CheckCpuSockets(vm.getStaticData().getNumOfSockets(), vm.getStaticData().getCpuPerSocket(), clusterCompatibilityVersion.getValue(), getReturnValue().getCanDoActionMessages());
            if (!isCpuSocketsValid) {
                return false;
            }
            // Check that the USB policy is legal
            if (!VmHandler.isUsbPolicyLegal(vm.getUsbPolicy(), vm.getOs(), targetCluster, getReturnValue().getCanDoActionMessages())) {
                return false;
            }
            if (StringUtils.isNotEmpty(targetCluster.getcpu_name())) {
                if (!targetCluster.getArchitectureType().equals(vm.getArchitecture())) {
                    return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_CLUSTER_DIFFERENT_ARCHITECTURES);
                }
            }
        } else {
            addCanDoActionMessage(VdcBllMessages.VM_STATUS_NOT_VALID_FOR_UPDATE);
            return false;
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    // Set parameters for messaging.
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM__CLUSTER);
    VM vm = getVm();
    if (vm == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    } else {
        if (!canRunActionOnNonManagedVm()) {
            return false;
        }
        if (ObjectIdentityChecker.CanUpdateField(vm, "vdsGroupId", vm.getStatus())) {
            targetCluster = DbFacade.getInstance().getVdsGroupDao().get(getParameters().getClusterId());
            if (targetCluster == null) {
                addCanDoActionMessage(VdcBllMessages.VM_CLUSTER_IS_NOT_VALID);
                return false;
            }
            // Check that the target cluster is in the same data center.
            if (!targetCluster.getStoragePoolId().equals(vm.getStoragePoolId())) {
                addCanDoActionMessage(VdcBllMessages.VM_CANNOT_MOVE_TO_CLUSTER_IN_OTHER_STORAGE_POOL);
                return false;
            }
            List<VmNic> interfaces = getVmNicDao().getAllForVm(getParameters().getVmId());
            Version clusterCompatibilityVersion = targetCluster.getcompatibility_version();
            if (!validateDestinationClusterContainsNetworks(interfaces) || !validateNics(interfaces, clusterCompatibilityVersion)) {
                return false;
            }
            // Check if VM static parameters are compatible for new cluster.
            boolean isCpuSocketsValid = AddVmCommand.checkCpuSockets(vm.getStaticData().getNumOfSockets(), vm.getStaticData().getCpuPerSocket(), clusterCompatibilityVersion.getValue(), getReturnValue().getCanDoActionMessages());
            if (!isCpuSocketsValid) {
                return false;
            }
            // Check that the USB policy is legal
            if (!VmHandler.isUsbPolicyLegal(vm.getUsbPolicy(), vm.getOs(), targetCluster, getReturnValue().getCanDoActionMessages())) {
                return false;
            }
            if (VmDeviceUtils.isVirtioScsiControllerAttached(vm.getId()) && !FeatureSupported.virtIoScsi(targetCluster.getcompatibility_version())) {
                return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
            }
            // A existing VM cannot be changed into a cluster without a defined architecture
            if (targetCluster.getArchitecture() == ArchitectureType.undefined) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_UNDEFINED_ARCHITECTURE);
            } else if (targetCluster.getArchitecture() != vm.getClusterArch()) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_CLUSTER_DIFFERENT_ARCHITECTURES);
            }
        } else {
            addCanDoActionMessage(VdcBllMessages.VM_STATUS_NOT_VALID_FOR_UPDATE);
            return false;
        }
    }
    return true;
}
#end_block

#method_before
protected void initTemplateDisks() {
    if (getVmTemplate() != null) {
        VmTemplateHandler.UpdateDisksFromDb(getVmTemplate());
    }
}
#method_after
protected void initTemplateDisks() {
    if (vmDisksSource != null) {
        VmTemplateHandler.updateDisksFromDb(vmDisksSource);
    }
}
#end_block

#method_before
protected List<VmNic> getVmInterfaces() {
    if (_vmInterfaces == null) {
        List<VmNic> vmNetworkInterfaces = getVmNicDao().getAllForTemplate(getVmTemplate().getId());
        _vmInterfaces = vmNetworkInterfaces == null ? new ArrayList<VmNic>() : vmNetworkInterfaces;
    }
    return _vmInterfaces;
}
#method_after
protected List<VmNic> getVmInterfaces() {
    if (_vmInterfaces == null) {
        List<VmNic> vmNetworkInterfaces = getVmNicDao().getAllForTemplate(vmInterfacesSourceId);
        _vmInterfaces = vmNetworkInterfaces == null ? new ArrayList<VmNic>() : vmNetworkInterfaces;
    }
    return _vmInterfaces;
}
#end_block

#method_before
protected List<? extends Disk> getVmDisks() {
    if (_vmDisks == null) {
        _vmDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getVmTemplateId());
    }
    return _vmDisks;
}
#method_after
protected List<? extends Disk> getVmDisks() {
    if (_vmDisks == null) {
        _vmDisks = DbFacade.getInstance().getDiskDao().getAllForVm(vmDisksSource.getId());
    }
    return _vmDisks;
}
#end_block

#method_before
protected boolean shouldCheckSpaceInStorageDomains() {
    return !getImagesToCheckDestinationStorageDomains().isEmpty() && !LinqUtils.firstOrNull(getImagesToCheckDestinationStorageDomains(), new All<DiskImage>()).getImageId().equals(VmTemplateHandler.BlankVmTemplateId);
}
#method_after
protected boolean shouldCheckSpaceInStorageDomains() {
    return !getImagesToCheckDestinationStorageDomains().isEmpty() && !LinqUtils.firstOrNull(getImagesToCheckDestinationStorageDomains(), new All<DiskImage>()).getImageId().equals(VmTemplateHandler.BLANK_VM_TEMPLATE_ID);
}
#end_block

#method_before
protected Guid getStoragePoolIdFromSourceImageContainer() {
    return getVmTemplate().getStoragePoolId();
}
#method_after
protected Guid getStoragePoolIdFromSourceImageContainer() {
    return vmDisksSource.getStoragePoolId();
}
#end_block

#method_before
protected boolean canDoAddVmCommand() {
    boolean returnValue = false;
    returnValue = areParametersLegal(getReturnValue().getCanDoActionMessages());
    // Check if number of monitors passed is legal
    returnValue = returnValue && checkNumberOfMonitors() && checkSingleQxlDisplay();
    returnValue = returnValue && checkPciAndIdeLimit(getParameters().getVmStaticData().getNumOfMonitors(), getVmInterfaces(), getVmDisks(), getReturnValue().getCanDoActionMessages()) && canAddVm(getReturnValue().getCanDoActionMessages(), destStorages.values()) && hostToRunExist();
    return returnValue;
}
#method_after
protected boolean canDoAddVmCommand() {
    boolean returnValue = false;
    returnValue = areParametersLegal(getReturnValue().getCanDoActionMessages());
    // Check if number of monitors passed is legal
    returnValue = returnValue && checkNumberOfMonitors() && checkSingleQxlDisplay();
    returnValue = returnValue && checkPciAndIdeLimit(getParameters().getVmStaticData().getNumOfMonitors(), getVmInterfaces(), getVmDisks(), isVirtioScsiEnabled(), hasWatchdog(), getReturnValue().getCanDoActionMessages()) && canAddVm(getReturnValue().getCanDoActionMessages(), destStorages.values()) && hostToRunExist();
    return returnValue;
}
#end_block

#method_before
protected boolean checkCpuSockets() {
    return AddVmCommand.CheckCpuSockets(getParameters().getVmStaticData().getNumOfSockets(), getParameters().getVmStaticData().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#method_after
public static boolean checkCpuSockets(int num_of_sockets, int cpu_per_socket, String compatibility_version, List<String> CanDoActionMessages) {
    boolean retValue = true;
    if (retValue && (num_of_sockets * cpu_per_socket) > Config.<Integer>getValue(ConfigValues.MaxNumOfVmCpus, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_CPU.toString());
        retValue = false;
    }
    if (retValue && num_of_sockets > Config.<Integer>getValue(ConfigValues.MaxNumOfVmSockets, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_SOCKETS.toString());
        retValue = false;
    }
    if (retValue && cpu_per_socket > Config.<Integer>getValue(ConfigValues.MaxNumOfCpuPerSocket, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_CPU_PER_SOCKET.toString());
        retValue = false;
    }
    if (retValue && cpu_per_socket < 1) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_CPU_PER_SOCKET.toString());
        retValue = false;
    }
    if (retValue && num_of_sockets < 1) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_NUM_SOCKETS.toString());
        retValue = false;
    }
    return retValue;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVmTemplate() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    if (getVmTemplate().isDisabled()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_DISABLED);
    }
    if (StringUtils.isEmpty(getVdsGroup().getcpu_name())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_EMPTY_PROCESSOR_NAME);
    }
    if (!buildAndCheckDestStorageDomains()) {
        return false;
    }
    // otherwise..
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getImagesToCheckDestinationStorageDomains(), diskInfoDestinationMap);
    if (!canDoAddVmCommand()) {
        return false;
    }
    VM vmFromParams = getParameters().getVm();
    // check if the selected template is compatible with VM architecture.
    if (!VmHandler.isCompatibleVmAndTemplate(vmFromParams.getStaticData(), getVmTemplate(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (StringUtils.isEmpty(vmFromParams.getName())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    }
    // check that VM name is not too long
    if (!isVmNameValidLength(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (!checkPayload(getParameters().getVmPayload(), getParameters().getVmStaticData().getIsoPath())) {
            return false;
        }
        // otherwise, we save the content in base64 string
        for (Map.Entry<String, String> entry : getParameters().getVmPayload().getFiles().entrySet()) {
            entry.setValue(Base64.encodeBase64String(entry.getValue().getBytes()));
        }
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(vmFromParams.getUsbPolicy(), vmFromParams.getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check cpuPinning if the check haven't failed yet
    if (!isCpuPinningValid(vmFromParams.getCpuPinning(), vmFromParams.getStaticData())) {
        return false;
    }
    if (vmFromParams.isUseHostCpuFlags() && vmFromParams.getMigrationSupport() == MigrationSupport.MIGRATABLE) {
        return failCanDoAction(VdcBllMessages.VM_HOSTCPU_MUST_BE_PINNED_TO_HOST);
    }
    if (!checkCpuSockets()) {
        return false;
    }
    if (!isCpuSharesValid(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.QOS_CPU_SHARES_OUT_OF_RANGE);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVmTemplate() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    if (getVmTemplate().isDisabled()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_DISABLED);
    }
    // A VM cannot be added in a cluster without a defined architecture
    if (getVdsGroup().getArchitecture() == ArchitectureType.undefined) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_UNDEFINED_ARCHITECTURE);
    }
    if (!buildAndCheckDestStorageDomains()) {
        return false;
    }
    // otherwise..
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getImagesToCheckDestinationStorageDomains(), diskInfoDestinationMap);
    if (!canDoAddVmCommand()) {
        return false;
    }
    VM vmFromParams = getParameters().getVm();
    // check if the selected template is compatible with Cluster architecture.
    if (!getVmTemplate().getId().equals(VmTemplateHandler.BLANK_VM_TEMPLATE_ID) && getVdsGroup().getArchitecture() != getVmTemplate().getClusterArch()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_INCOMPATIBLE);
    }
    if (StringUtils.isEmpty(vmFromParams.getName())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    }
    // check that VM name is not too long
    if (!isVmNameValidLength(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (!checkPayload(getParameters().getVmPayload(), getParameters().getVmStaticData().getIsoPath())) {
            return false;
        }
        // otherwise, we save the content in base64 string
        for (Map.Entry<String, String> entry : getParameters().getVmPayload().getFiles().entrySet()) {
            entry.setValue(Base64.encodeBase64String(entry.getValue().getBytes()));
        }
    }
    // check for Vm Watchdog Model
    if (getParameters().getWatchdog() != null) {
        if (!validate((new VmWatchdogValidator(vmFromParams.getOs(), getParameters().getWatchdog(), getVdsGroup().getcompatibility_version())).isModelCompatibleWithOs())) {
            return false;
        }
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(vmFromParams.getUsbPolicy(), vmFromParams.getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check if the OS type is supported
    if (!VmHandler.isOsTypeSupported(vmFromParams.getOs(), getVdsGroup().getArchitecture(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check cpuPinning if the check haven't failed yet
    if (!isCpuPinningValid(vmFromParams.getCpuPinning(), vmFromParams.getStaticData())) {
        return false;
    }
    if (vmFromParams.isUseHostCpuFlags() && vmFromParams.getMigrationSupport() == MigrationSupport.MIGRATABLE) {
        return failCanDoAction(VdcBllMessages.VM_HOSTCPU_MUST_BE_PINNED_TO_HOST);
    }
    if (instanceTypeId != null && getInstanceType() == null) {
        // invalid instance type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INSTANCE_TYPE_DOES_NOT_EXIST);
    }
    if (imageTypeId != null && getImageType() == null) {
        // invalid image type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_TYPE_DOES_NOT_EXIST);
    }
    if (!checkCpuSockets()) {
        return false;
    }
    if (!isCpuSharesValid(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.QOS_CPU_SHARES_OUT_OF_RANGE);
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    return true;
}
#end_block

#method_before
protected boolean checkTemplateImages(List<String> reasons) {
    if (getParameters().getParentCommand() == VdcActionType.AddVmPoolWithVms) {
        return true;
    }
    for (StorageDomain storage : destStorages.values()) {
        if (!VmTemplateCommand.isVmTemplateImagesReady(getVmTemplate(), storage.getId(), reasons, false, false, true, true, storageToDisksMap.get(storage.getId()))) {
            return false;
        }
    }
    return true;
}
#method_after
protected boolean checkTemplateImages(List<String> reasons) {
    if (getParameters().getParentCommand() == VdcActionType.AddVmPoolWithVms) {
        return true;
    }
    for (StorageDomain storage : destStorages.values()) {
        if (!VmTemplateCommand.isVmTemplateImagesReady(vmDisksSource, storage.getId(), reasons, false, false, true, true, storageToDisksMap.get(storage.getId()))) {
            return false;
        }
    }
    return true;
}
#end_block

#method_before
protected boolean checkCpuSockets() {
    return AddVmCommand.CheckCpuSockets(getParameters().getVmStaticData().getNumOfSockets(), getParameters().getVmStaticData().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#method_after
protected boolean checkCpuSockets() {
    return AddVmCommand.checkCpuSockets(getParameters().getVmStaticData().getNumOfSockets(), getParameters().getVmStaticData().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#end_block

#method_before
protected boolean buildAndCheckDestStorageDomains() {
    boolean retValue = true;
    if (diskInfoDestinationMap.isEmpty()) {
        retValue = fillDestMap();
    } else {
        retValue = validateProvidedDestinations();
    }
    if (retValue && getImagesToCheckDestinationStorageDomains().size() != diskInfoDestinationMap.size()) {
        log.errorFormat("Can not found any default active domain for one of the disks of template with id : {0}", getVmTemplate().getId());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS);
        retValue = false;
    }
    return retValue && validateIsImagesOnDomains();
}
#method_after
protected boolean buildAndCheckDestStorageDomains() {
    boolean retValue = true;
    if (diskInfoDestinationMap.isEmpty()) {
        retValue = fillDestMap();
    } else {
        retValue = validateProvidedDestinations();
    }
    if (retValue && getImagesToCheckDestinationStorageDomains().size() != diskInfoDestinationMap.size()) {
        log.errorFormat("Can not find any default active domain for one of the disks of template with id : {0}", vmDisksSource.getId());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS);
        retValue = false;
    }
    return retValue && validateIsImagesOnDomains();
}
#end_block

#method_before
protected Collection<DiskImage> getImagesToCheckDestinationStorageDomains() {
    return getVmTemplate().getDiskMap().values();
}
#method_after
protected Collection<DiskImage> getImagesToCheckDestinationStorageDomains() {
    return vmDisksSource.getDiskTemplateMap().values();
}
#end_block

#method_before
protected void fillImagesMapBasedOnTemplate() {
    ImagesHandler.fillImagesMapBasedOnTemplate(getVmTemplate(), getStorageDomainDAO().getAllForStoragePool(getVmTemplate().getStoragePoolId()), diskInfoDestinationMap, destStorages, false);
}
#method_after
protected void fillImagesMapBasedOnTemplate() {
    ImagesHandler.fillImagesMapBasedOnTemplate(vmDisksSource, getStorageDomainDAO().getAllForStoragePool(vmDisksSource.getStoragePoolId()), diskInfoDestinationMap, destStorages, false);
}
#end_block

#method_before
protected boolean verifyAddVM(List<String> reasons, int vmPriority) {
    return VmHandler.VerifyAddVm(reasons, getVmInterfaces().size(), vmPriority);
}
#method_after
protected boolean verifyAddVM(List<String> reasons, int vmPriority) {
    return VmHandler.verifyAddVm(reasons, getVmInterfaces().size(), vmPriority);
}
#end_block

#method_before
@Override
protected void executeVmCommand() {
    ArrayList<String> errorMessages = new ArrayList<String>();
    if (canAddVm(errorMessages, destStorages.values())) {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                addVmStatic();
                addVmDynamic();
                addVmNetwork();
                addVmStatistics();
                addActiveSnapshot();
                addVmPermission();
                getCompensationContext().stateChanged();
                return null;
            }
        });
        if (addVmImages()) {
            TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    copyVmDevices();
                    addDiskPermissions(newDiskImages);
                    addVmPayload();
                    updateSmartCardDevices();
                    addVmWatchdog();
                    setActionReturnValue(getVm().getId());
                    setSucceeded(true);
                    return null;
                }
            });
        }
    } else {
        log.errorFormat("Failed to add vm . The reasons are: {0}", StringUtils.join(errorMessages, ','));
    }
}
#method_after
@Override
protected void executeVmCommand() {
    VmHandler.warnMemorySizeLegal(getParameters().getVm().getStaticData(), getVdsGroup().getcompatibility_version());
    ArrayList<String> errorMessages = new ArrayList<String>();
    if (canAddVm(errorMessages, destStorages.values())) {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                addVmStatic();
                addVmDynamic();
                addVmNetwork();
                addVmStatistics();
                addActiveSnapshot();
                addVmPermission();
                getCompensationContext().stateChanged();
                return null;
            }
        });
        if (addVmImages()) {
            TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    copyVmDevices();
                    addDiskPermissions();
                    if (getInstanceType() == null) {
                        addVmPayload();
                        updateSmartCardDevices();
                        addVmWatchdog();
                    }
                    setActionReturnValue(getVm().getId());
                    setSucceeded(true);
                    return null;
                }
            });
        }
    } else {
        log.errorFormat("Failed to add vm . The reasons are: {0}", StringUtils.join(errorMessages, ','));
    }
}
#end_block

#method_before
protected void copyVmDevices() {
    VmDeviceUtils.copyVmDevices(getVmTemplateId(), getVmId(), newDiskImages, _vmInterfaces, getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled());
}
#method_after
protected void copyVmDevices() {
    VmDeviceUtils.copyVmDevices(vmDevicesSourceId, getVmId(), getSrcDeviceIdToTargetDeviceIdMapping(), getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled(), isVirtioScsiEnabled(), false);
}
#end_block

#method_before
protected boolean areParametersLegal(List<String> reasons) {
    boolean returnValue = false;
    final VmStatic vmStaticData = getParameters().getVmStaticData();
    if (vmStaticData != null) {
        returnValue = IsLegalClusterId(vmStaticData.getVdsGroupId(), reasons);
        if (!validatePinningAndMigration(reasons, vmStaticData, getParameters().getVm().getCpuPinning())) {
            returnValue = false;
        }
        returnValue = returnValue && VmHandler.isMemorySizeLegal(vmStaticData.getOsId(), vmStaticData.getMemSizeMb(), reasons, getVdsGroup().getcompatibility_version());
    }
    return returnValue;
}
#method_after
protected boolean areParametersLegal(List<String> reasons) {
    boolean returnValue = false;
    final VmStatic vmStaticData = getParameters().getVmStaticData();
    if (vmStaticData != null) {
        returnValue = isLegalClusterId(vmStaticData.getVdsGroupId(), reasons);
        if (!validatePinningAndMigration(reasons, vmStaticData, getParameters().getVm().getCpuPinning())) {
            returnValue = false;
        }
    }
    return returnValue;
}
#end_block

#method_before
protected void addVmNetwork() {
    // Add interfaces from template
    for (VmNic iface : getVmInterfaces()) {
        iface.setId(Guid.newGuid());
        iface.setMacAddress(MacPoolManager.getInstance().allocateNewMac());
        iface.setSpeed(VmInterfaceType.forValue(iface.getType()).getSpeed());
        iface.setVmTemplateId(null);
        iface.setVmId(getParameters().getVmStaticData().getId());
        getVmNicDao().save(iface);
        getCompensationContext().snapshotNewEntity(iface);
        DbFacade.getInstance().getVmNetworkStatisticsDao().save(iface.getStatistics());
        getCompensationContext().snapshotNewEntity(iface.getStatistics());
    }
}
#method_after
protected void addVmNetwork() {
    List<VmNic> nics = getVmInterfaces();
    VmInterfaceManager vmInterfaceManager = new VmInterfaceManager();
    vmInterfaceManager.sortVmNics(nics, getVmInterfaceDevices());
    List<String> macAddresses = MacPoolManager.getInstance().allocateMacAddresses(nics.size());
    // Add interfaces from template
    for (int i = 0; i < nics.size(); ++i) {
        VmNic iface = nics.get(i);
        Guid id = Guid.newGuid();
        srcVmNicIdToTargetVmNicIdMapping.put(iface.getId(), id);
        iface.setId(id);
        iface.setMacAddress(macAddresses.get(i));
        iface.setSpeed(VmInterfaceType.forValue(iface.getType()).getSpeed());
        iface.setVmTemplateId(null);
        iface.setVmId(getParameters().getVmStaticData().getId());
        getVmNicDao().save(iface);
        getCompensationContext().snapshotNewEntity(iface);
        DbFacade.getInstance().getVmNetworkStatisticsDao().save(iface.getStatistics());
        getCompensationContext().snapshotNewEntity(iface.getStatistics());
    }
}
#end_block

#method_before
protected void addVmStatic() {
    VmStatic vmStatic = getParameters().getVmStaticData();
    if (vmStatic.getOrigin() == null) {
        vmStatic.setOrigin(OriginType.valueOf(Config.<String>GetValue(ConfigValues.OriginType)));
    }
    vmStatic.setId(getVmId());
    vmStatic.setQuotaId(getQuotaId());
    vmStatic.setCreationDate(new Date());
    vmStatic.setCreatedByUserId(getUserId());
    VDSGroup vdsGroup = getVdsGroupDAO().get(getParameters().getVm().getVdsGroupId());
    vmStatic.setArchitecture(vdsGroup.getArchitectureType());
    // predefined and user defined fields
    if (vmStatic.getCustomProperties() != null) {
        VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(vdsGroup.getcompatibility_version(), vmStatic.getCustomProperties());
        String predefinedProperties = properties.getPredefinedProperties();
        String userDefinedProperties = properties.getUseDefinedProperties();
        vmStatic.setPredefinedProperties(predefinedProperties);
        vmStatic.setUserDefinedProperties(userDefinedProperties);
    }
    getVmStaticDao().save(vmStatic);
    getCompensationContext().snapshotNewEntity(vmStatic);
}
#method_after
protected void addVmStatic() {
    VmStatic vmStatic = getParameters().getVmStaticData();
    if (vmStatic.getOrigin() == null) {
        vmStatic.setOrigin(OriginType.valueOf(Config.<String>getValue(ConfigValues.OriginType)));
    }
    vmStatic.setId(getVmId());
    vmStatic.setQuotaId(getQuotaId());
    vmStatic.setCreationDate(new Date());
    vmStatic.setCreatedByUserId(getUserId());
    // predefined and user defined fields
    if (vmStatic.getCustomProperties() != null) {
        VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(getVdsGroupDAO().get(getParameters().getVm().getVdsGroupId()).getcompatibility_version(), vmStatic.getCustomProperties());
        String predefinedProperties = properties.getPredefinedProperties();
        String userDefinedProperties = properties.getUseDefinedProperties();
        vmStatic.setPredefinedProperties(predefinedProperties);
        vmStatic.setUserDefinedProperties(userDefinedProperties);
    }
    vmStatic.setOriginalTemplateGuid(vmStatic.getVmtGuid());
    vmStatic.setOriginalTemplateName(getVmTemplate().getName());
    getVmStaticDao().save(vmStatic);
    getCompensationContext().snapshotNewEntity(vmStatic);
}
#end_block

#method_before
void addVmDynamic() {
    VmDynamic tempVar = new VmDynamic();
    tempVar.setId(getVmId());
    tempVar.setStatus(VMStatus.Down);
    tempVar.setVmHost("");
    tempVar.setVmIp("");
    tempVar.setDisplayType(getParameters().getVmStaticData().getDefaultDisplayType());
    VmDynamic vmDynamic = tempVar;
    DbFacade.getInstance().getVmDynamicDao().save(vmDynamic);
    getCompensationContext().snapshotNewEntity(vmDynamic);
}
#method_after
void addVmDynamic() {
    VmDynamic tempVar = new VmDynamic();
    tempVar.setId(getVmId());
    tempVar.setStatus(VMStatus.Down);
    tempVar.setVmHost("");
    tempVar.setVmIp("");
    tempVar.setVmFQDN("");
    tempVar.setDisplayType(getParameters().getVmStaticData().getDefaultDisplayType());
    VmDynamic vmDynamic = tempVar;
    DbFacade.getInstance().getVmDynamicDao().save(vmDynamic);
    getCompensationContext().snapshotNewEntity(vmDynamic);
}
#end_block

#method_before
protected boolean addVmImages() {
    if (getVmTemplate().getDiskMap().size() > 0) {
        if (getVm().getStatus() != VMStatus.Down) {
            log.error("Cannot add images. VM is not Down");
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
        VmHandler.LockVm(getVmId());
        for (DiskImage dit : getImagesToCheckDestinationStorageDomains()) {
            CreateSnapshotFromTemplateParameters tempVar = new CreateSnapshotFromTemplateParameters(dit.getImageId(), getParameters().getVmStaticData().getId());
            tempVar.setDestStorageDomainId(diskInfoDestinationMap.get(dit.getId()).getStorageIds().get(0));
            tempVar.setDiskAlias(diskInfoDestinationMap.get(dit.getId()).getDiskAlias());
            tempVar.setStorageDomainId(dit.getStorageIds().get(0));
            tempVar.setVmSnapshotId(getVmSnapshotId());
            tempVar.setParentCommand(VdcActionType.AddVm);
            tempVar.setEntityInfo(getParameters().getEntityInfo());
            tempVar.setParentParameters(getParameters());
            tempVar.setQuotaId(diskInfoDestinationMap.get(dit.getId()).getQuotaId());
            VdcReturnValueBase result = getBackend().runInternalAction(VdcActionType.CreateSnapshotFromTemplate, tempVar, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
            /**
             * if couldn't create snapshot then stop the transaction and the command
             */
            if (!result.getSucceeded()) {
                throw new VdcBLLException(result.getFault().getError());
            } else {
                getTaskIdList().addAll(result.getInternalVdsmTaskIdList());
                newDiskImages.add((DiskImage) result.getActionReturnValue());
            }
        }
    }
    return true;
}
#method_after
protected boolean addVmImages() {
    if (vmDisksSource.getDiskTemplateMap().size() > 0) {
        if (getVm().getStatus() != VMStatus.Down) {
            log.error("Cannot add images. VM is not Down");
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
        VmHandler.lockVm(getVmId());
        for (DiskImage dit : getImagesToCheckDestinationStorageDomains()) {
            CreateSnapshotFromTemplateParameters tempVar = new CreateSnapshotFromTemplateParameters(dit.getImageId(), getParameters().getVmStaticData().getId());
            tempVar.setDestStorageDomainId(diskInfoDestinationMap.get(dit.getId()).getStorageIds().get(0));
            tempVar.setDiskAlias(diskInfoDestinationMap.get(dit.getId()).getDiskAlias());
            tempVar.setStorageDomainId(dit.getStorageIds().get(0));
            tempVar.setVmSnapshotId(getVmSnapshotId());
            tempVar.setParentCommand(VdcActionType.AddVm);
            tempVar.setEntityInfo(getParameters().getEntityInfo());
            tempVar.setParentParameters(getParameters());
            tempVar.setQuotaId(diskInfoDestinationMap.get(dit.getId()).getQuotaId());
            VdcReturnValueBase result = getBackend().runInternalAction(VdcActionType.CreateSnapshotFromTemplate, tempVar, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
            /**
             * if couldn't create snapshot then stop the transaction and the command
             */
            if (!result.getSucceeded()) {
                throw new VdcBLLException(result.getFault().getError());
            } else {
                getTaskIdList().addAll(result.getInternalVdsmTaskIdList());
                DiskImage newImage = (DiskImage) result.getActionReturnValue();
                srcDiskIdToTargetDiskIdMapping.put(dit.getId(), newImage.getId());
            }
        }
    }
    return true;
}
#end_block

#method_before
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, getActionType().getActionGroup()));
    permissionList.add(new PermissionSubject(getVmTemplateId(), VdcObjectType.VmTemplate, getActionType().getActionGroup()));
    if (getVmTemplate() != null && !getVmTemplate().getDiskList().isEmpty()) {
        for (DiskImage disk : getParameters().getDiskInfoDestinationMap().values()) {
            if (disk.getStorageIds() != null && !disk.getStorageIds().isEmpty()) {
                permissionList.add(new PermissionSubject(disk.getStorageIds().get(0), VdcObjectType.Storage, ActionGroup.CREATE_DISK));
            }
        }
    }
    addPermissionSubjectForAdminLevelProperties(permissionList);
    return permissionList;
}
#method_after
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, getActionType().getActionGroup()));
    permissionList.add(new PermissionSubject(getVmTemplateId(), VdcObjectType.VmTemplate, getActionType().getActionGroup()));
    if (getVmTemplate() != null && !getVmTemplate().getDiskList().isEmpty()) {
        for (DiskImage disk : getParameters().getDiskInfoDestinationMap().values()) {
            if (disk.getStorageIds() != null && !disk.getStorageIds().isEmpty()) {
                permissionList.add(new PermissionSubject(disk.getStorageIds().get(0), VdcObjectType.Storage, ActionGroup.CREATE_DISK));
            }
        }
    }
    // if using instance type, need create instance
    if (getInstanceType() != null) {
        permissionList.add(new PermissionSubject(instanceTypeId, VdcObjectType.VmTemplate, ActionGroup.CREATE_INSTANCE));
    }
    // if using image type, need create instance
    if (getImageType() != null) {
        permissionList.add(new PermissionSubject(imageTypeId, VdcObjectType.VmTemplate, ActionGroup.CREATE_INSTANCE));
    }
    addPermissionSubjectForAdminLevelProperties(permissionList);
    return permissionList;
}
#end_block

#method_before
protected void addPermissionSubjectForAdminLevelProperties(List<PermissionSubject> permissionList) {
    final VmStatic vmFromParams = getParameters().getVmStaticData();
    if (vmFromParams != null) {
        // user needs specific permission to change custom properties
        if (!StringUtils.isEmpty(vmFromParams.getCustomProperties())) {
            permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, ActionGroup.CHANGE_VM_CUSTOM_PROPERTIES));
        }
        // host-specific parameters can be changed by administration role only
        if (vmFromParams.getDedicatedVmForVds() != null || !StringUtils.isEmpty(vmFromParams.getCpuPinning())) {
            permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, ActionGroup.EDIT_ADMIN_VM_PROPERTIES));
        }
    }
}
#method_after
protected void addPermissionSubjectForAdminLevelProperties(List<PermissionSubject> permissionList) {
    VmStatic vmFromParams = getParameters().getVmStaticData();
    if (vmFromParams != null) {
        // user needs specific permission to change custom properties
        if (!StringUtils.isEmpty(vmFromParams.getCustomProperties())) {
            permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, ActionGroup.CHANGE_VM_CUSTOM_PROPERTIES));
        }
        // host-specific parameters can be changed by administration role only
        if (vmFromParams.getDedicatedVmForVds() != null || !StringUtils.isEmpty(vmFromParams.getCpuPinning())) {
            permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, ActionGroup.EDIT_ADMIN_VM_PROPERTIES));
        }
    }
}
#end_block

#method_before
protected void addVmPermission() {
    UniquePermissionsSet permissionsToAdd = new UniquePermissionsSet();
    if ((getParameters()).isMakeCreatorExplicitOwner()) {
        permissionsToAdd.addPermission(getCurrentUser().getUserId(), PredefinedRoles.VM_OPERATOR.getId(), getVmId(), VdcObjectType.VM);
    }
    if (getParameters().isCopyTemplatePermissions() && !getVmTemplateId().equals(VmTemplateHandler.BlankVmTemplateId)) {
        copyTemplatePermissions(permissionsToAdd);
    }
    if (!permissionsToAdd.isEmpty()) {
        List<permissions> permissionsList = permissionsToAdd.asPermissionList();
        MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new permissions[permissionsList.size()]));
        getCompensationContext().snapshotNewEntities(permissionsList);
    }
}
#method_after
protected void addVmPermission() {
    UniquePermissionsSet permissionsToAdd = new UniquePermissionsSet();
    if ((getParameters()).isMakeCreatorExplicitOwner()) {
        permissionsToAdd.addPermission(getCurrentUser().getId(), PredefinedRoles.VM_OPERATOR.getId(), getVmId(), VdcObjectType.VM);
    }
    if (getParameters().isCopyTemplatePermissions() && !getVmTemplateId().equals(VmTemplateHandler.BLANK_VM_TEMPLATE_ID)) {
        copyTemplatePermissions(permissionsToAdd);
    }
    if (!permissionsToAdd.isEmpty()) {
        List<Permissions> permissionsList = permissionsToAdd.asPermissionList();
        MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new Permissions[permissionsList.size()]));
        getCompensationContext().snapshotNewEntities(permissionsList);
    }
}
#end_block

#method_before
private void copyTemplatePermissions(UniquePermissionsSet permissionsToAdd) {
    PermissionDAO dao = getDbFacade().getPermissionDao();
    List<permissions> templatePermissions = dao.getAllForEntity(getVmTemplateId(), getCurrentUser().getUserId(), false);
    for (permissions templatePermission : templatePermissions) {
        boolean templateOwnerRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_OWNER.getId());
        boolean templateUserRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_USER.getId());
        if (templateOwnerRole || templateUserRole) {
            continue;
        }
        permissionsToAdd.addPermission(templatePermission.getad_element_id(), templatePermission.getrole_id(), getVmId(), VdcObjectType.VM);
    }
}
#method_after
private void copyTemplatePermissions(UniquePermissionsSet permissionsToAdd) {
    PermissionDAO dao = getDbFacade().getPermissionDao();
    List<Permissions> templatePermissions = dao.getAllForEntity(getVmTemplateId(), getCurrentUser().getId(), false);
    for (Permissions templatePermission : templatePermissions) {
        boolean templateOwnerRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_OWNER.getId());
        boolean templateUserRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_USER.getId());
        if (templateOwnerRole || templateUserRole) {
            continue;
        }
        permissionsToAdd.addPermission(templatePermission.getad_element_id(), templatePermission.getrole_id(), getVmId(), VdcObjectType.VM);
    }
}
#end_block

#method_before
protected void addDiskPermissions(List<DiskImage> newDiskImages) {
    permissions[] permsArray = new permissions[newDiskImages.size()];
    for (int i = 0; i < newDiskImages.size(); i++) {
        permsArray[i] = new permissions(getCurrentUser().getUserId(), PredefinedRoles.DISK_OPERATOR.getId(), newDiskImages.get(i).getId(), VdcObjectType.Disk);
    }
    MultiLevelAdministrationHandler.addPermission(permsArray);
}
#method_after
protected void addDiskPermissions() {
    List<Guid> newDiskImageIds = new ArrayList<>(srcDiskIdToTargetDiskIdMapping.values());
    Permissions[] permsArray = new Permissions[newDiskImageIds.size()];
    for (int i = 0; i < newDiskImageIds.size(); i++) {
        permsArray[i] = new Permissions(getCurrentUser().getId(), PredefinedRoles.DISK_OPERATOR.getId(), newDiskImageIds.get(i), VdcObjectType.Disk);
    }
    MultiLevelAdministrationHandler.addPermission(permsArray);
}
#end_block

#method_before
@Test
public void create10GBVmWith11GbAvailableAndA5GbBuffer() throws Exception {
    VM vm = createVm();
    AddVmFromTemplateCommand<AddVmFromTemplateParameters> cmd = createVmFromTemplateCommand(vm);
    mockStorageDomainDAOGetForStoragePool();
    mockVdsGroupDAOReturnVdsGroup();
    mockVmTemplateDAOReturnVmTemplate();
    mockDiskImageDAOGetSnapshotById();
    mockGetImageDomainsListVdsCommand();
    mockVerifyAddVM(cmd);
    mockConfig();
    mockConfigSizeDefaults();
    mockStorageDomainDaoGetAllStoragesForPool(AVAILABLE_SPACE_GB);
    mockUninterestingMethods(cmd);
    assertFalse("If the disk is too big, canDoAction should fail", cmd.canDoAction());
    assertTrue("canDoAction failed for the wrong reason", cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN.toString()));
}
#method_after
@Test
public void create10GBVmWith11GbAvailableAndA5GbBuffer() throws Exception {
    VM vm = createVm();
    AddVmFromTemplateCommand<AddVmFromTemplateParameters> cmd = createVmFromTemplateCommand(vm);
    mockOsRepository();
    mockStorageDomainDAOGetForStoragePool();
    mockVdsGroupDAOReturnVdsGroup();
    mockVmTemplateDAOReturnVmTemplate();
    mockDiskImageDAOGetSnapshotById();
    mockVerifyAddVM(cmd);
    mockConfig();
    mockConfigSizeDefaults();
    mockStorageDomainDaoGetAllStoragesForPool(AVAILABLE_SPACE_GB);
    mockUninterestingMethods(cmd);
    assertFalse("If the disk is too big, canDoAction should fail", cmd.canDoAction());
    assertTrue("canDoAction failed for the wrong reason", cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN.toString()));
}
#end_block

#method_before
@Test
public void canAddThinVmFromTemplateWithManyDisks() {
    ArrayList<String> reasons = new ArrayList<String>();
    final int domainSizeGB = 20;
    final int sizeRequired = 10;
    AddVmCommand<VmManagementParametersBase> cmd = setupCanAddVmTests(domainSizeGB, sizeRequired);
    doReturn(Collections.emptyList()).when(cmd).validateCustomProperties(any(VmStatic.class));
    // Adding 10 disks, which each one should consume the default sparse size (which is 1GB).
    setNewDisksForTemplate(10, cmd.getVmTemplate().getDiskMap());
    doReturn(createVmTemplate()).when(cmd).getVmTemplate();
    assertFalse("Thin vm could not be added due to storage sufficient", cmd.canAddVm(reasons, Arrays.asList(createStorageDomain(domainSizeGB))));
    assertTrue("canDoAction failed for insufficient disk size", cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN.toString()));
}
#method_after
@Test
public void canAddThinVmFromTemplateWithManyDisks() {
    ArrayList<String> reasons = new ArrayList<String>();
    final int domainSizeGB = 20;
    final int sizeRequired = 10;
    AddVmCommand<VmManagementParametersBase> cmd = setupCanAddVmTests(domainSizeGB, sizeRequired);
    doReturn(Collections.emptyList()).when(cmd).validateCustomProperties(any(VmStatic.class));
    // Adding 10 disks, which each one should consume the default sparse size (which is 1GB).
    setNewDisksForTemplate(10, cmd.getVmTemplate().getDiskTemplateMap());
    doReturn(createVmTemplate()).when(cmd).getVmTemplate();
    assertFalse("Thin vm could not be added due to storage sufficient", cmd.canAddVm(reasons, Arrays.asList(createStorageDomain(domainSizeGB))));
    assertTrue("canDoAction failed for insufficient disk size", cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN.toString()));
}
#end_block

#method_before
private AddVmFromTemplateCommand<AddVmFromTemplateParameters> createVmFromTemplateCommand(VM vm) {
    AddVmFromTemplateParameters param = new AddVmFromTemplateParameters();
    param.setVm(vm);
    AddVmFromTemplateCommand<AddVmFromTemplateParameters> concrete = new AddVmFromTemplateCommand<AddVmFromTemplateParameters>(param) {

        @Override
        protected void initTemplateDisks() {
        // Stub for testing
        }

        @Override
        protected void initStoragePoolId() {
        // Stub for testing
        }
    };
    AddVmFromTemplateCommand<AddVmFromTemplateParameters> result = spy(concrete);
    doReturn(true).when(result).checkNumberOfMonitors();
    doReturn(createVmTemplate()).when(result).getVmTemplate();
    doReturn(Collections.emptyList()).when(result).validateCustomProperties(any(VmStatic.class));
    mockDAOs(result);
    mockBackend(result);
    return result;
}
#method_after
private AddVmFromTemplateCommand<AddVmFromTemplateParameters> createVmFromTemplateCommand(VM vm) {
    AddVmFromTemplateParameters param = new AddVmFromTemplateParameters();
    param.setVm(vm);
    AddVmFromTemplateCommand<AddVmFromTemplateParameters> concrete = new AddVmFromTemplateCommand<AddVmFromTemplateParameters>(param) {

        @Override
        protected void initTemplateDisks() {
        // Stub for testing
        }

        @Override
        protected void initStoragePoolId() {
        // Stub for testing
        }

        @Override
        public VmTemplate getVmTemplate() {
            return createVmTemplate();
        }
    };
    AddVmFromTemplateCommand<AddVmFromTemplateParameters> result = spy(concrete);
    doReturn(true).when(result).checkNumberOfMonitors();
    doReturn(createVmTemplate()).when(result).getVmTemplate();
    doReturn(Collections.emptyList()).when(result).validateCustomProperties(any(VmStatic.class));
    mockDAOs(result);
    mockBackend(result);
    return result;
}
#end_block

#method_before
private AddVmFromSnapshotCommand<AddVmFromSnapshotParameters> createVmFromSnapshotCommand(VM vm, Guid sourceSnapshotId) {
    AddVmFromSnapshotParameters param = new AddVmFromSnapshotParameters();
    param.setVm(vm);
    param.setSourceSnapshotId(sourceSnapshotId);
    param.setStorageDomainId(Guid.newGuid());
    AddVmFromSnapshotCommand<AddVmFromSnapshotParameters> cmd = new AddVmFromSnapshotCommand<AddVmFromSnapshotParameters>(param) {

        @Override
        protected void initTemplateDisks() {
        // Stub for testing
        }

        @Override
        protected void initStoragePoolId() {
        // Stub for testing
        }
    };
    cmd = spy(cmd);
    doReturn(vm).when(cmd).getVm();
    mockDAOs(cmd);
    doReturn(snapshotDao).when(cmd).getSnapshotDao();
    mockBackend(cmd);
    return cmd;
}
#method_after
private AddVmFromSnapshotCommand<AddVmFromSnapshotParameters> createVmFromSnapshotCommand(VM vm, Guid sourceSnapshotId) {
    AddVmFromSnapshotParameters param = new AddVmFromSnapshotParameters();
    param.setVm(vm);
    param.setSourceSnapshotId(sourceSnapshotId);
    param.setStorageDomainId(Guid.newGuid());
    AddVmFromSnapshotCommand<AddVmFromSnapshotParameters> cmd = new AddVmFromSnapshotCommand<AddVmFromSnapshotParameters>(param) {

        @Override
        protected void initTemplateDisks() {
        // Stub for testing
        }

        @Override
        protected void initStoragePoolId() {
        // Stub for testing
        }

        @Override
        public VmTemplate getVmTemplate() {
            return createVmTemplate();
        }
    };
    cmd = spy(cmd);
    doReturn(vm).when(cmd).getVm();
    mockDAOs(cmd);
    doReturn(snapshotDao).when(cmd).getSnapshotDao();
    mockBackend(cmd);
    return cmd;
}
#end_block

#method_before
private VM initializeMock(final int domainSizeGB, final int sizeRequired) {
    mockVmTemplateDAOReturnVmTemplate();
    mockDiskImageDAOGetSnapshotById();
    mockStorageDomainDAOGetForStoragePool(domainSizeGB);
    mockStorageDomainDAOGet(domainSizeGB);
    mockGetImageDomainsListVdsCommand();
    mockConfig();
    mockConfigSizeRequirements(sizeRequired);
    VM vm = createVm();
    return vm;
}
#method_after
private VM initializeMock(final int domainSizeGB, final int sizeRequired) {
    mockVmTemplateDAOReturnVmTemplate();
    mockDiskImageDAOGetSnapshotById();
    mockStorageDomainDAOGetForStoragePool(domainSizeGB);
    mockStorageDomainDAOGet(domainSizeGB);
    mockConfig();
    mockConfigSizeRequirements(sizeRequired);
    VM vm = createVm();
    return vm;
}
#end_block

#method_before
private VmTemplate createVmTemplate() {
    if (vmTemplate == null) {
        vmTemplate = new VmTemplate();
        vmTemplate.setStoragePoolId(STORAGE_POOL_ID);
        DiskImage image = createDiskImageTemplate();
        vmTemplate.getDiskMap().put(image.getImageId(), image);
        Map<Guid, DiskImage> diskImageMap = new HashMap<Guid, DiskImage>();
        DiskImage diskImage = createDiskImage(REQUIRED_DISK_SIZE_GB);
        diskImageMap.put(diskImage.getId(), diskImage);
        vmTemplate.setDiskImageMap(diskImageMap);
    }
    return vmTemplate;
}
#method_after
private VmTemplate createVmTemplate() {
    if (vmTemplate == null) {
        vmTemplate = new VmTemplate();
        vmTemplate.setStoragePoolId(STORAGE_POOL_ID);
        DiskImage image = createDiskImageTemplate();
        vmTemplate.getDiskTemplateMap().put(image.getImageId(), image);
        HashMap<Guid, DiskImage> diskImageMap = new HashMap<Guid, DiskImage>();
        DiskImage diskImage = createDiskImage(REQUIRED_DISK_SIZE_GB);
        diskImageMap.put(diskImage.getId(), diskImage);
        vmTemplate.setDiskImageMap(diskImageMap);
    }
    return vmTemplate;
}
#end_block

#method_before
private VDSGroup createVdsGroup() {
    if (vdsGroup == null) {
        vdsGroup = new VDSGroup();
        vdsGroup.setvds_group_id(Guid.newGuid());
        vdsGroup.setcompatibility_version(new Version());
        vdsGroup.setcpu_name("Intel Conroe Family");
        vdsGroup.setArchitectureType(ArchitectureType.x86_64);
    }
    return vdsGroup;
}
#method_after
private VDSGroup createVdsGroup() {
    if (vdsGroup == null) {
        vdsGroup = new VDSGroup();
        vdsGroup.setvds_group_id(Guid.newGuid());
        vdsGroup.setcompatibility_version(Version.v3_3);
        vdsGroup.setcpu_name("Intel Conroe Family");
        vdsGroup.setArchitecture(ArchitectureType.x86_64);
    }
    return vdsGroup;
}
#end_block

#method_before
private void mockConfig() {
    mcr.mockConfigValue(ConfigValues.PredefinedVMProperties, Version.v3_0, "");
    mcr.mockConfigValue(ConfigValues.UserDefinedVMProperties, Version.v3_0, "");
    mcr.mockConfigValue(ConfigValues.InitStorageSparseSizeInGB, 1);
}
#method_after
private void mockConfig() {
    mcr.mockConfigValue(ConfigValues.PredefinedVMProperties, Version.v3_0, "");
    mcr.mockConfigValue(ConfigValues.UserDefinedVMProperties, Version.v3_0, "");
    mcr.mockConfigValue(ConfigValues.InitStorageSparseSizeInGB, 1);
    mcr.mockConfigValue(ConfigValues.VirtIoScsiEnabled, Version.v3_3, true);
}
#end_block

#method_before
private static VM createVm() {
    VM vm = new VM();
    VmDynamic dynamic = new VmDynamic();
    VmStatic stat = new VmStatic();
    stat.setVmtGuid(Guid.newGuid());
    stat.setName("testVm");
    stat.setPriority(1);
    vm.setStaticData(stat);
    vm.setDynamicData(dynamic);
    return vm;
}
#method_after
private static VM createVm() {
    VM vm = new VM();
    VmDynamic dynamic = new VmDynamic();
    VmStatic stat = new VmStatic();
    stat.setVmtGuid(Guid.newGuid());
    stat.setName("testVm");
    stat.setPriority(1);
    vm.setStaticData(stat);
    vm.setDynamicData(dynamic);
    vm.setSingleQxlPci(false);
    return vm;
}
#end_block

#method_before
private AddVmCommand<VmManagementParametersBase> createCommand(VM vm) {
    VmManagementParametersBase param = new VmManagementParametersBase(vm);
    AddVmCommand<VmManagementParametersBase> cmd = new AddVmCommand<VmManagementParametersBase>(param) {

        @Override
        protected void initTemplateDisks() {
        // Stub for testing
        }

        @Override
        protected void initStoragePoolId() {
        // stub for testing
        }

        @Override
        protected int getNeededDiskSize(Guid domainId) {
            return getBlockSparseInitSizeInGb() * getVmTemplate().getDiskMap().size();
        }
    };
    cmd = spy(cmd);
    mockDAOs(cmd);
    mockBackend(cmd);
    return cmd;
}
#method_after
private AddVmCommand<VmManagementParametersBase> createCommand(VM vm) {
    VmManagementParametersBase param = new VmManagementParametersBase(vm);
    AddVmCommand<VmManagementParametersBase> cmd = new AddVmCommand<VmManagementParametersBase>(param) {

        @Override
        protected void initTemplateDisks() {
        // Stub for testing
        }

        @Override
        protected void initStoragePoolId() {
        // stub for testing
        }

        @Override
        protected int getNeededDiskSize(Guid domainId) {
            return getBlockSparseInitSizeInGb() * getVmTemplate().getDiskTemplateMap().size();
        }

        @Override
        public VmTemplate getVmTemplate() {
            return createVmTemplate();
        }
    };
    cmd = spy(cmd);
    mockDAOs(cmd);
    mockBackend(cmd);
    return cmd;
}
#end_block

#method_before
private <T extends VmManagementParametersBase> void mockUninterestingMethods(AddVmCommand<T> spy) {
    doReturn(true).when(spy).isVmNameValidLength(Matchers.<VM>any(VM.class));
    doReturn(false).when(spy).isVmWithSameNameExists(anyString());
    doReturn(STORAGE_POOL_ID).when(spy).getStoragePoolId();
    doReturn(createVmTemplate()).when(spy).getVmTemplate();
    doReturn(true).when(spy).areParametersLegal(anyListOf(String.class));
    doReturn(Collections.<VmNetworkInterface>emptyList()).when(spy).getVmInterfaces();
    doReturn(Collections.<DiskImageBase>emptyList()).when(spy).getVmDisks();
    spy.setVmTemplateId(Guid.newGuid());
}
#method_after
private <T extends VmManagementParametersBase> void mockUninterestingMethods(AddVmCommand<T> spy) {
    doReturn(true).when(spy).isVmNameValidLength(Matchers.<VM>any(VM.class));
    doReturn(false).when(spy).isVmWithSameNameExists(anyString());
    doReturn(STORAGE_POOL_ID).when(spy).getStoragePoolId();
    doReturn(createVmTemplate()).when(spy).getVmTemplate();
    doReturn(createVdsGroup()).when(spy).getVdsGroup();
    doReturn(true).when(spy).areParametersLegal(anyListOf(String.class));
    doReturn(Collections.<VmNetworkInterface>emptyList()).when(spy).getVmInterfaces();
    doReturn(Collections.<DiskImageBase>emptyList()).when(spy).getVmDisks();
    doReturn(false).when(spy).isVirtioScsiControllerAttached(any(Guid.class));
    spy.setVmTemplateId(Guid.newGuid());
}
#end_block

#method_before
@Override
public void executed(FrontendActionAsyncResult result) {
    VdcReturnValueBase returnValue = result.getReturnValue();
    if (returnValue != null && returnValue.getSucceeded()) {
        networkCreatingManager.updateVnics((idToUpdate == null) ? (Guid) returnValue.getActionReturnValue() : idToUpdate, unitVmModel.getNicsWithLogicalNetworks().getItems(), isAddingNewVm);
    } else {
        networkCreatingManager.getCallback().queryFailed();
    }
}
#method_after
@Override
public void executed(FrontendActionAsyncResult result) {
    VdcReturnValueBase returnValue = result.getReturnValue();
    if (returnValue != null && returnValue.getSucceeded()) {
        networkCreatingManager.updateVnics((idToUpdate == null) ? (Guid) returnValue.getActionReturnValue() : idToUpdate, unitVmModel.getNicsWithLogicalNetworks().getItems(), unitVmModel.getIsNew());
    } else {
        networkCreatingManager.getCallback().queryFailed();
    }
}
#end_block

#method_before
public void updateVnics(final Guid vmId, final Iterable<VnicInstanceType> vnicsWithProfiles, final boolean isAddingNewVm) {
    AsyncQuery getVmNicsQuery = new AsyncQuery();
    getVmNicsQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            Iterable<VmNetworkInterface> existingVnics = (Iterable<VmNetworkInterface>) result;
            if (existingVnics == null) {
                existingVnics = new ArrayList<VmNetworkInterface>();
            }
            Map<String, VmNetworkInterface> existingVnicForName = new HashMap<String, VmNetworkInterface>();
            for (VmNetworkInterface vnic : existingVnics) {
                existingVnicForName.put(vnic.getName(), vnic);
            }
            final ArrayList<VdcActionParametersBase> createVnicParameters = new ArrayList<VdcActionParametersBase>();
            final ArrayList<VdcActionParametersBase> updateVnicParameters = new ArrayList<VdcActionParametersBase>();
            final ArrayList<VdcActionParametersBase> removeVnicParameters = new ArrayList<VdcActionParametersBase>();
            final Set<String> vnicsEncountered = new HashSet<String>();
            // iterate over edited VNICs, see if any need to be added or have been assigned a different profile
            for (VnicInstanceType vnicWithProfile : vnicsWithProfiles) {
                VmNetworkInterface editedVnic = vnicWithProfile.getNetworkInterface();
                String vnicName = editedVnic.getName();
                VmNetworkInterface existingVnic = existingVnicForName.get(vnicName);
                if (existingVnic == null) {
                    createVnicParameters.add(new AddVmInterfaceParameters(vmId, editedVnic));
                } else {
                    vnicsEncountered.add(vnicName);
                    Guid existingProfileId = existingVnic.getVnicProfileId();
                    Guid editedProfileId = editedVnic.getVnicProfileId();
                    if ((editedProfileId == null && existingProfileId != null) || (editedProfileId != null && !editedProfileId.equals(existingProfileId))) {
                        existingVnic.setVnicProfileId(editedProfileId);
                        existingVnic.setNetworkName(editedVnic.getNetworkName());
                        updateVnicParameters.add(new AddVmInterfaceParameters(vmId, existingVnic));
                    }
                }
            }
            // iterate over existing VNICs, see if any have not been encountered and thus removed in editing
            for (VmNetworkInterface existingVnic : existingVnics) {
                if (!vnicsEncountered.contains(existingVnic.getName())) {
                    removeVnicParameters.add(new RemoveVmInterfaceParameters(vmId, existingVnic.getId()));
                }
            }
            Frontend.getInstance().runMultipleActions(VdcActionType.AddVmInterface, createVnicParameters, new IFrontendActionAsyncCallback() {

                @Override
                public void executed(FrontendActionAsyncResult result) {
                    Frontend.getInstance().runMultipleActions(VdcActionType.UpdateVmInterface, updateVnicParameters, new IFrontendActionAsyncCallback() {

                        @Override
                        public void executed(FrontendActionAsyncResult result) {
                            Frontend.getInstance().runMultipleActions(VdcActionType.RemoveVmInterface, removeVnicParameters, new IFrontendActionAsyncCallback() {

                                @Override
                                public void executed(FrontendActionAsyncResult result) {
                                    if (isAddingNewVm) {
                                        VmOperationParameterBase reorderParams = new VmOperationParameterBase(vmId);
                                        Frontend.getInstance().runAction(VdcActionType.ReorderVmNics, reorderParams, new IFrontendActionAsyncCallback() {

                                            public void executed(FrontendActionAsyncResult result) {
                                                callback.vnicCreated(vmId);
                                            }
                                        });
                                    } else {
                                        callback.vnicCreated(vmId);
                                    }
                                }
                            }, this, true);
                        }
                    }, this, true);
                }
            }, this, true);
        }
    };
    AsyncDataProvider.getVmNicList(getVmNicsQuery, vmId);
}
#method_after
public void updateVnics(final Guid vmId, final Iterable<VnicInstanceType> vnicsWithProfiles, final boolean isAddingNewVm) {
    AsyncQuery getVmNicsQuery = new AsyncQuery();
    getVmNicsQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            Iterable<VmNetworkInterface> existingVnics = (Iterable<VmNetworkInterface>) result;
            if (existingVnics == null) {
                existingVnics = new ArrayList<VmNetworkInterface>();
            }
            Map<String, VmNetworkInterface> existingVnicForName = new HashMap<String, VmNetworkInterface>();
            for (VmNetworkInterface vnic : existingVnics) {
                existingVnicForName.put(vnic.getName(), vnic);
            }
            final ArrayList<VdcActionParametersBase> createVnicParameters = new ArrayList<VdcActionParametersBase>();
            final ArrayList<VdcActionParametersBase> updateVnicParameters = new ArrayList<VdcActionParametersBase>();
            final ArrayList<VdcActionParametersBase> removeVnicParameters = new ArrayList<VdcActionParametersBase>();
            final Set<String> vnicsEncountered = new HashSet<String>();
            // iterate over edited VNICs, see if any need to be added or have been assigned a different profile
            for (VnicInstanceType vnicWithProfile : vnicsWithProfiles) {
                VmNetworkInterface editedVnic = vnicWithProfile.getNetworkInterface();
                String vnicName = editedVnic.getName();
                VmNetworkInterface existingVnic = existingVnicForName.get(vnicName);
                if (existingVnic == null) {
                    createVnicParameters.add(new AddVmInterfaceParameters(vmId, editedVnic));
                } else {
                    vnicsEncountered.add(vnicName);
                    Guid existingProfileId = existingVnic.getVnicProfileId();
                    Guid editedProfileId = editedVnic.getVnicProfileId();
                    if ((editedProfileId == null && existingProfileId != null) || (editedProfileId != null && !editedProfileId.equals(existingProfileId))) {
                        existingVnic.setVnicProfileId(editedProfileId);
                        existingVnic.setNetworkName(editedVnic.getNetworkName());
                        updateVnicParameters.add(new AddVmInterfaceParameters(vmId, existingVnic));
                    }
                }
            }
            // iterate over existing VNICs, see if any have not been encountered and thus removed in editing
            for (VmNetworkInterface existingVnic : existingVnics) {
                if (!vnicsEncountered.contains(existingVnic.getName())) {
                    removeVnicParameters.add(new RemoveVmInterfaceParameters(vmId, existingVnic.getId()));
                }
            }
            Frontend.getInstance().runMultipleActions(VdcActionType.AddVmInterface, createVnicParameters, new IFrontendActionAsyncCallback() {

                @Override
                public void executed(FrontendActionAsyncResult result) {
                    Frontend.getInstance().runMultipleActions(VdcActionType.UpdateVmInterface, updateVnicParameters, new IFrontendActionAsyncCallback() {

                        @Override
                        public void executed(FrontendActionAsyncResult result) {
                            Frontend.getInstance().runMultipleActions(VdcActionType.RemoveVmInterface, removeVnicParameters, new IFrontendActionAsyncCallback() {

                                @Override
                                public void executed(FrontendActionAsyncResult result) {
                                    if (isAddingNewVm) {
                                        VmOperationParameterBase reorderParams = new VmOperationParameterBase(vmId);
                                        Frontend.getInstance().runAction(VdcActionType.ReorderVmNics, reorderParams, new IFrontendActionAsyncCallback() {

                                            public void executed(FrontendActionAsyncResult result) {
                                                callback.vnicCreated(vmId);
                                            }
                                        });
                                    } else {
                                        callback.vnicCreated(vmId);
                                    }
                                }
                            }, this);
                        }
                    }, this);
                }
            }, this);
        }
    };
    AsyncDataProvider.getVmNicList(getVmNicsQuery, vmId);
}
#end_block

#method_before
public void runMultipleActions(final VdcActionType actionType, final List<VdcActionParametersBase> parameters, final IFrontendActionAsyncCallback successCallback, final Object state, final boolean runCallbacksOnEmptyRun) {
    if (parameters == null || parameters.isEmpty()) {
        if (runCallbacksOnEmptyRun && successCallback != null) {
            VdcReturnValueBase emptyResult = new VdcReturnValueBase();
            VdcActionParametersBase emptyParams = new VdcActionParametersBase();
            successCallback.executed(new FrontendActionAsyncResult(actionType, emptyParams, emptyResult, state));
        }
        return;
    }
    int n = parameters.size();
    IFrontendActionAsyncCallback[] callbacks = new IFrontendActionAsyncCallback[n];
    callbacks[n - 1] = successCallback;
    runMultipleActions(actionType, parameters, new LinkedList<IFrontendActionAsyncCallback>(Arrays.asList(callbacks)), state);
}
#method_after
public void runMultipleActions(final VdcActionType actionType, final List<VdcActionParametersBase> parameters, final IFrontendActionAsyncCallback successCallback, final Object state, final boolean runCallbacksOnEmptyRun) {
    if (parameters == null || parameters.isEmpty()) {
        if (runCallbacksOnEmptyRun && successCallback != null) {
            successCallback.executed(new FrontendActionAsyncResult(actionType, null, null, state));
        }
        return;
    }
    int n = parameters.size();
    IFrontendActionAsyncCallback[] callbacks = new IFrontendActionAsyncCallback[n];
    callbacks[n - 1] = successCallback;
    runMultipleActions(actionType, parameters, new LinkedList<IFrontendActionAsyncCallback>(Arrays.asList(callbacks)), state);
}
#end_block

#method_before
public void runMultipleActions(final List<VdcActionType> actionTypes, final List<VdcActionParametersBase> parameters, final List<IFrontendActionAsyncCallback> callbacks, final IFrontendActionAsyncCallback failureCallback, final Object state) {
    if (actionTypes.isEmpty() || parameters.isEmpty() || callbacks.isEmpty()) {
        return;
    }
    runAction(actionTypes.get(0), parameters.get(0), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(final FrontendActionAsyncResult result) {
            VdcReturnValueBase returnValue = result.getReturnValue();
            boolean success = returnValue != null && returnValue.getSucceeded();
            if (success || failureCallback == null) {
                IFrontendActionAsyncCallback callback = callbacks.get(0);
                if (callback != null) {
                    callback.executed(result);
                }
                actionTypes.remove(0);
                parameters.remove(0);
                callbacks.remove(0);
                runMultipleActions(actionTypes, parameters, callbacks, failureCallback, state);
            } else {
                failureCallback.executed(result);
            }
        }
    }, state, true);
}
#method_after
public void runMultipleActions(final VdcActionType actionType, final List<VdcActionParametersBase> parameters, final IFrontendActionAsyncCallback successCallback, final Object state) {
    runMultipleActions(actionType, parameters, successCallback, state, true);
}
#end_block

#method_before
public void runMultipleActions(final VdcActionType actionType, final List<VdcActionParametersBase> parameters, final IFrontendActionAsyncCallback successCallback) {
    runMultipleActions(actionType, parameters, successCallback, null, false);
}
#method_after
public void runMultipleActions(final VdcActionType actionType, final List<VdcActionParametersBase> parameters, final IFrontendActionAsyncCallback successCallback) {
    runMultipleActions(actionType, parameters, successCallback, null, true);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    VmStatic vm = getVm().getStaticData();
    if (vm == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    }
    if (!canRunActionOnNonManagedVm()) {
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    VM vm = getVm();
    if (vm == null || vm.getStaticData() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    }
    if (!canRunActionOnNonManagedVm()) {
        return false;
    }
    return true;
}
#end_block

#method_before
protected boolean canDoAddVmCommand() {
    boolean returnValue = false;
    returnValue = areParametersLegal(getReturnValue().getCanDoActionMessages());
    // Check if number of monitors passed is legal
    returnValue = returnValue && checkNumberOfMonitors() && checkSingleQxlDisplay();
    returnValue = returnValue && checkPciAndIdeLimit(getParameters().getVmStaticData().getNumOfMonitors(), getVmInterfaces(), getVmDisks(), isVirtioScsiEnabled(), getReturnValue().getCanDoActionMessages()) && canAddVm(getReturnValue().getCanDoActionMessages(), destStorages.values()) && hostToRunExist();
    return returnValue;
}
#method_after
protected boolean canDoAddVmCommand() {
    boolean returnValue = false;
    returnValue = areParametersLegal(getReturnValue().getCanDoActionMessages());
    // Check if number of monitors passed is legal
    returnValue = returnValue && checkNumberOfMonitors() && checkSingleQxlDisplay();
    returnValue = returnValue && checkPciAndIdeLimit(getParameters().getVmStaticData().getNumOfMonitors(), getVmInterfaces(), getVmDisks(), isVirtioScsiEnabled(), hasWatchdog(), getReturnValue().getCanDoActionMessages()) && canAddVm(getReturnValue().getCanDoActionMessages(), destStorages.values()) && hostToRunExist();
    return returnValue;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVmTemplate() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    if (getVmTemplate().isDisabled()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_DISABLED);
    }
    if (!buildAndCheckDestStorageDomains()) {
        return false;
    }
    // otherwise..
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getImagesToCheckDestinationStorageDomains(), diskInfoDestinationMap);
    if (!canDoAddVmCommand()) {
        return false;
    }
    VM vmFromParams = getParameters().getVm();
    if (StringUtils.isEmpty(vmFromParams.getName())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    }
    // check that VM name is not too long
    if (!isVmNameValidLength(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (!checkPayload(getParameters().getVmPayload(), getParameters().getVmStaticData().getIsoPath())) {
            return false;
        }
        // otherwise, we save the content in base64 string
        for (Map.Entry<String, String> entry : getParameters().getVmPayload().getFiles().entrySet()) {
            entry.setValue(Base64.encodeBase64String(entry.getValue().getBytes()));
        }
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(vmFromParams.getUsbPolicy(), vmFromParams.getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check if the OS type is supported
    if (!VmHandler.isOsTypeSupported(vmFromParams.getOs(), getVdsGroup().getArchitecture(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check cpuPinning if the check haven't failed yet
    if (!isCpuPinningValid(vmFromParams.getCpuPinning(), vmFromParams.getStaticData())) {
        return false;
    }
    if (vmFromParams.isUseHostCpuFlags() && vmFromParams.getMigrationSupport() == MigrationSupport.MIGRATABLE) {
        return failCanDoAction(VdcBllMessages.VM_HOSTCPU_MUST_BE_PINNED_TO_HOST);
    }
    if (instanceTypeId != null && getInstanceType() == null) {
        // invalid instance type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INSTANCE_TYPE_DOES_NOT_EXIST);
    }
    if (imageTypeId != null && getImageType() == null) {
        // invalid image type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_TYPE_DOES_NOT_EXIST);
    }
    if (!checkCpuSockets()) {
        return false;
    }
    if (!isCpuSharesValid(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.QOS_CPU_SHARES_OUT_OF_RANGE);
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVmTemplate() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    if (getVmTemplate().isDisabled()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_DISABLED);
    }
    if (!buildAndCheckDestStorageDomains()) {
        return false;
    }
    // otherwise..
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getImagesToCheckDestinationStorageDomains(), diskInfoDestinationMap);
    if (!canDoAddVmCommand()) {
        return false;
    }
    VM vmFromParams = getParameters().getVm();
    if (StringUtils.isEmpty(vmFromParams.getName())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    }
    // check that VM name is not too long
    if (!isVmNameValidLength(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (!checkPayload(getParameters().getVmPayload(), getParameters().getVmStaticData().getIsoPath())) {
            return false;
        }
        // otherwise, we save the content in base64 string
        for (Map.Entry<String, String> entry : getParameters().getVmPayload().getFiles().entrySet()) {
            entry.setValue(Base64.encodeBase64String(entry.getValue().getBytes()));
        }
    }
    // check for Vm Watchdog Model
    if (getParameters().getWatchdog() != null) {
        if (!validate((new VmWatchdogValidator(vmFromParams.getOs(), getParameters().getWatchdog(), getVdsGroup().getcompatibility_version())).isModelCompatibleWithOs())) {
            return false;
        }
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(vmFromParams.getUsbPolicy(), vmFromParams.getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check if the OS type is supported
    if (!VmHandler.isOsTypeSupported(vmFromParams.getOs(), getVdsGroup().getArchitecture(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check cpuPinning if the check haven't failed yet
    if (!isCpuPinningValid(vmFromParams.getCpuPinning(), vmFromParams.getStaticData())) {
        return false;
    }
    if (vmFromParams.isUseHostCpuFlags() && vmFromParams.getMigrationSupport() == MigrationSupport.MIGRATABLE) {
        return failCanDoAction(VdcBllMessages.VM_HOSTCPU_MUST_BE_PINNED_TO_HOST);
    }
    if (instanceTypeId != null && getInstanceType() == null) {
        // invalid instance type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INSTANCE_TYPE_DOES_NOT_EXIST);
    }
    if (imageTypeId != null && getImageType() == null) {
        // invalid image type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_TYPE_DOES_NOT_EXIST);
    }
    if (!checkCpuSockets()) {
        return false;
    }
    if (!isCpuSharesValid(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.QOS_CPU_SHARES_OUT_OF_RANGE);
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    return true;
}
#end_block

#method_before
protected void addVmInterfaces() {
    VmInterfaceManager vmInterfaceManager = new VmInterfaceManager();
    VnicProfileHelper vnicProfileHelper = new VnicProfileHelper(getVm().getVdsGroupId(), getStoragePoolId(), getVdsGroup().getcompatibility_version(), AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES);
    List<VmNetworkInterface> nics = getVm().getInterfaces();
    vmInterfaceManager.sortVmNics(nics, getVm().getStaticData().getManagedDeviceMap());
    // If we import it as a new entity, then we allocate all MAC addresses in advance
    List<String> macAddresses = ListUtils.EMPTY_LIST;
    if (getParameters().isImportAsNewEntity()) {
        macAddresses = MacPoolManager.getInstance().allocateMacAddresses(nics.size());
    }
    for (int i = 0; i < nics.size(); ++i) {
        VmNetworkInterface iface = nics.get(i);
        initInterface(iface);
        vnicProfileHelper.updateNicWithVnicProfileForUser(iface, getCurrentUser());
        // If importing as a new entity, we set the MAC address in the NIC
        if (getParameters().isImportAsNewEntity()) {
            iface.setMacAddress(macAddresses.get(i));
        }
        vmInterfaceManager.add(iface, getCompensationContext(), !getParameters().isImportAsNewEntity(), getVm().getOs(), getVdsGroup().getcompatibility_version());
        macsAdded.add(iface.getMacAddress());
    }
    vnicProfileHelper.auditInvalidInterfaces(getVmName());
}
#method_after
protected void addVmInterfaces() {
    VmInterfaceManager vmInterfaceManager = new VmInterfaceManager();
    VnicProfileHelper vnicProfileHelper = new VnicProfileHelper(getVm().getVdsGroupId(), getStoragePoolId(), getVdsGroup().getcompatibility_version(), AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES);
    List<VmNetworkInterface> nics = getVm().getInterfaces();
    vmInterfaceManager.sortVmNics(nics, getVm().getStaticData().getManagedDeviceMap());
    // If we import it as a new entity, then we allocate all MAC addresses in advance
    if (getParameters().isImportAsNewEntity()) {
        List<String> macAddresses = MacPoolManager.getInstance().allocateMacAddresses(nics.size());
        for (int i = 0; i < nics.size(); ++i) {
            nics.get(i).setMacAddress(macAddresses.get(i));
        }
    }
    for (VmNetworkInterface iface : getVm().getInterfaces()) {
        initInterface(iface);
        vnicProfileHelper.updateNicWithVnicProfileForUser(iface, getCurrentUser());
        vmInterfaceManager.add(iface, getCompensationContext(), !getParameters().isImportAsNewEntity(), getVm().getOs(), getVdsGroup().getcompatibility_version());
        macsAdded.add(iface.getMacAddress());
    }
    vnicProfileHelper.auditInvalidInterfaces(getVmName());
}
#end_block

#method_before
public void add(final VmNic iface, CompensationContext compensationContext, boolean allocateExistingMac, int osId, Version clusterCompatibilityVersion) {
    if (allocateExistingMac) {
        if (FeatureSupported.hotPlug(clusterCompatibilityVersion) && getOsRepository().hasNicHotplugSupport(osId, clusterCompatibilityVersion)) {
            getMacPoolManager().forceAddMac(iface.getMacAddress());
        } else if (!getMacPoolManager().addMac(iface.getMacAddress())) {
            auditLogMacInUse(iface);
            throw new VdcBLLException(VdcBllErrors.MAC_ADDRESS_IS_IN_USE);
        }
    }
    getVmNicDao().save(iface);
    getVmNetworkStatisticsDao().save(iface.getStatistics());
    compensationContext.snapshotNewEntity(iface);
    compensationContext.snapshotNewEntity(iface.getStatistics());
}
#method_after
public void add(final VmNic iface, CompensationContext compensationContext, boolean reserveExistingMac, int osId, Version clusterCompatibilityVersion) {
    if (reserveExistingMac) {
        if (FeatureSupported.hotPlug(clusterCompatibilityVersion) && getOsRepository().hasNicHotplugSupport(osId, clusterCompatibilityVersion)) {
            getMacPoolManager().forceAddMac(iface.getMacAddress());
        } else if (!getMacPoolManager().addMac(iface.getMacAddress())) {
            auditLogMacInUse(iface);
            throw new VdcBLLException(VdcBllErrors.MAC_ADDRESS_IS_IN_USE);
        }
    }
    getVmNicDao().save(iface);
    getVmNetworkStatisticsDao().save(iface.getStatistics());
    compensationContext.snapshotNewEntity(iface);
    compensationContext.snapshotNewEntity(iface.getStatistics());
}
#end_block

#method_before
@Test
public void add() {
    runAddAndVerify(createNewInterface(), true, times(1), OS_ID, VERSION_3_2);
}
#method_after
@Test
public void add() {
    runAddAndVerify(createNewInterface(), false, times(0), OS_ID, VERSION_3_2);
}
#end_block

#method_before
protected void runAddAndVerify(VmNic iface, boolean addMacResult, VerificationMode addMacVerification, int osId, Version version) {
    OsRepository osRepository = mock(OsRepository.class);
    when(vmInterfaceManager.getOsRepository()).thenReturn(osRepository);
    when(osRepository.hasNicHotplugSupport(any(Integer.class), any(Version.class))).thenReturn(true);
    vmInterfaceManager.add(iface, NoOpCompensationContext.getInstance(), true, osId, version);
    verify(macPoolManager, times(1)).forceAddMac((iface.getMacAddress()));
    verifyAddDelegatedCorrectly(iface, addMacVerification);
}
#method_after
protected void runAddAndVerify(VmNic iface, boolean reserveExistingMac, VerificationMode addMacVerification, int osId, Version version) {
    OsRepository osRepository = mock(OsRepository.class);
    when(vmInterfaceManager.getOsRepository()).thenReturn(osRepository);
    when(osRepository.hasNicHotplugSupport(any(Integer.class), any(Version.class))).thenReturn(true);
    vmInterfaceManager.add(iface, NoOpCompensationContext.getInstance(), reserveExistingMac, osId, version);
    if (reserveExistingMac) {
        verify(macPoolManager, times(1)).forceAddMac((iface.getMacAddress()));
    } else {
        verifyZeroInteractions(macPoolManager);
    }
    verifyAddDelegatedCorrectly(iface, addMacVerification);
}
#end_block

#method_before
private void MoveVdssToGoingToMaintenanceMode() {
    Iterator<Guid> it = vdssToMaintenance.keySet().iterator();
    while (it.hasNext()) {
        VDSReturnValue result = setVdsStatusToPrepareForMaintenance(vdssToMaintenance.get(it.next()));
        if (!result.getSucceeded()) {
            // remove VDS from map because of an error
            it.remove();
        }
    }
    cancelIncommingMigrations();
    freeLock();
}
#method_after
private void MoveVdssToGoingToMaintenanceMode() {
    List<VDS> spms = new ArrayList<VDS>();
    Iterator<VDS> it = vdssToMaintenance.values().iterator();
    while (it.hasNext()) {
        VDS vds = it.next();
        // SPMs will move to Prepare For Maintenance later after standard hosts
        if (vds.getSpmStatus() != VdsSpmStatus.SPM) {
            if (!setVdsStatusToPrepareForMaintenance(vds)) {
                it.remove();
            }
        } else {
            spms.add(vds);
        }
    }
    for (VDS vds : spms) {
        if (!setVdsStatusToPrepareForMaintenance(vds)) {
            vdssToMaintenance.remove(vds.getId());
        }
    }
    cancelIncommingMigrations();
    freeLock();
}
#end_block

#method_before
private VDSReturnValue setVdsStatusToPrepareForMaintenance(VDS vds) {
    VDSReturnValue result;
    if (vds.getStatus() != VDSStatus.PreparingForMaintenance && vds.getStatus() != VDSStatus.NonResponsive && vds.getStatus() != VDSStatus.Down) {
        result = runVdsCommand(VDSCommandType.SetVdsStatus, new SetVdsStatusVDSCommandParameters(vds.getId(), VDSStatus.PreparingForMaintenance));
    } else {
        result = new VDSReturnValue();
        result.setSucceeded(true);
    }
    return result;
}
#method_after
private boolean setVdsStatusToPrepareForMaintenance(VDS vds) {
    boolean result = true;
    if (vds.getStatus() != VDSStatus.PreparingForMaintenance && vds.getStatus() != VDSStatus.NonResponsive && vds.getStatus() != VDSStatus.Down) {
        SetVdsStatusVDSCommandParameters params = new SetVdsStatusVDSCommandParameters(vds.getId(), VDSStatus.PreparingForMaintenance);
        params.setStopSpmFailureLogged(true);
        result = runVdsCommand(VDSCommandType.SetVdsStatus, params).getSucceeded();
    }
    return result;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    MoveVdssToGoingToMaintenanceMode();
    MigrateAllVdss();
    // set network to operational / non-operational
    for (Guid id : _vdsGroupIds) {
        List<Network> networks = DbFacade.getInstance().getNetworkDao().getAllForCluster(id);
        for (Network net : networks) {
            NetworkClusterHelper.setStatus(id, net);
        }
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    MoveVdssToGoingToMaintenanceMode();
    MigrateAllVdss();
    // find clusters for hosts that should move to maintenance
    Set<Guid> clusters = new HashSet<>();
    for (VDS vds : vdssToMaintenance.values()) {
        if (!clusters.contains(vds.getVdsGroupId())) {
            clusters.add(vds.getVdsGroupId());
            // set network to operational / non-operational
            List<Network> networks = DbFacade.getInstance().getNetworkDao().getAllForCluster(vds.getVdsGroupId());
            for (Network net : networks) {
                NetworkClusterHelper.setStatus(vds.getVdsGroupId(), net);
            }
        }
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean result = true;
    _vdsGroupIds = new ArrayList<Guid>();
    Set<Guid> vdsWithRunningVMs = new HashSet<Guid>();
    List<String> hostNotRespondingList = new ArrayList<String>();
    List<String> hostsWithNonMigratableVms = new ArrayList<String>();
    List<String> hostsWithVmsWithPluggedDiskSnapshots = new ArrayList<>();
    List<String> nonMigratableVms = new ArrayList<String>();
    for (Guid vdsId : getParameters().getVdsIdList()) {
        VDS vds = DbFacade.getInstance().getVdsDao().get(vdsId);
        if (vds == null) {
            log.error(String.format("ResourceManager::vdsMaintenance could not find vds_id = '%1$s'", vdsId));
            addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
            result = false;
            continue;
        }
        if (!vdssToMaintenance.containsKey(vdsId)) {
            vdssToMaintenance.put(vdsId, vds);
            if (vds.getSpmStatus() == VdsSpmStatus.SPM) {
                addSharedLockEntry(vds);
            }
        }
    }
    result = result && acquireLockInternal();
    if (result) {
        // tasks running
        for (Guid vdsId : getParameters().getVdsIdList()) {
            VDS vds = vdssToMaintenance.get(vdsId);
            if (vds != null) {
                List<VM> vms = getVmDAO().getAllRunningForVds(vdsId);
                if ((vds.getStatus() != VDSStatus.Maintenance) && (vds.getStatus() != VDSStatus.NonResponsive) && (vds.getStatus() != VDSStatus.Up) && (vds.getStatus() != VDSStatus.Error) && (vds.getStatus() != VDSStatus.PreparingForMaintenance) && (vds.getStatus() != VDSStatus.Down) && (vds.getStatus() != VDSStatus.NonOperational)) {
                    result = false;
                    addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_MAINTENANCE_VDS_IS_NOT_OPERATIONAL.toString());
                } else {
                    if (vms.size() > 0) {
                        vdsWithRunningVMs.add(vdsId);
                    }
                    _vdsGroupIds.add(vds.getVdsGroupId());
                    List<String> nonMigratableVmDescriptionsToFrontEnd = new ArrayList<String>();
                    for (VM vm : vms) {
                        if (vm.getMigrationSupport() != MigrationSupport.MIGRATABLE) {
                            nonMigratableVmDescriptionsToFrontEnd.add(vm.getName());
                        }
                    }
                    if (nonMigratableVmDescriptionsToFrontEnd.size() > 0) {
                        hostsWithNonMigratableVms.add(vds.getName());
                        nonMigratableVms.addAll(nonMigratableVmDescriptionsToFrontEnd);
                        // The non migratable VM names will be comma separated
                        log.error(String.format("VDS %1$s contains non migratable VMs", vdsId));
                        result = false;
                    } else if (!validate(new VmValidator(vms).vmNotHavingPluggedDiskSnapshots(VdcBllMessages.VDS_CANNOT_MAINTENANCE_VM_HAS_PLUGGED_DISK_SNAPSHOT))) {
                        hostsWithVmsWithPluggedDiskSnapshots.add(vds.getName());
                        result = false;
                    } else if (vds.getStatus() == VDSStatus.Maintenance) {
                        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_MAINTENANCE_VDS_IS_IN_MAINTENANCE);
                        result = false;
                    } else if (vds.getSpmStatus() == VdsSpmStatus.Contending) {
                        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_MAINTENANCE_SPM_CONTENDING);
                        result = false;
                    } else if (vds.getStatus() == VDSStatus.NonResponsive && vds.getVmCount() > 0) {
                        result = false;
                        hostNotRespondingList.add(vds.getName());
                    } else if (vds.getStatus() == VDSStatus.NonResponsive && vds.getSpmStatus() != VdsSpmStatus.None) {
                        result = false;
                        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_MAINTENANCE_VDS_IS_NOT_RESPONDING_AND_IS_SPM);
                    } else if (vds.getSpmStatus() == VdsSpmStatus.SPM && vds.getStatus() == VDSStatus.Up && getAsyncTaskDao().getAsyncTaskIdsByStoragePoolId(vds.getStoragePoolId()).size() > 0) {
                        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_MAINTENANCE_SPM_WITH_RUNNING_TASKS);
                        result = false;
                    }
                }
            }
        }
        // If one of the host is non responsive with running VM's, add a CanDoAction message.
        handleNonResponsiveHosts(hostNotRespondingList);
        // If one of the vms is non migratable, add a CanDoAction message.
        handleNonMigratableVms(hostsWithNonMigratableVms, nonMigratableVms);
        handleHostsWithVmsWithPluggedDiskSnapshots(hostsWithVmsWithPluggedDiskSnapshots);
        if (result) {
            // Remove all redundant clusters in clusters list, by adding it to a
            // set.
            // For each cluster check for each host that belongs to it, if its a
            // part of the parameters and
            // if there are running hosts for it - if it is up and is not in the
            // parameters -migration will be possible
            // to be performed, and there is no point to continue the check for
            // the given cluster - otherwise,
            // if the host is up and in the parameters - it may be that the
            // cluster is problematic (no hosts in up
            // state that we will be able to migrate VMs to)
            // In the end - if the clusters list is not empty - this is an
            // error, use the "problematic clusters list" to format an error to
            // the client
            Set<Guid> clustersAsSet = new HashSet<Guid>();
            clustersAsSet.addAll(_vdsGroupIds);
            List<String> problematicClusters = new ArrayList<String>();
            List<String> allHostsWithRunningVms = new ArrayList<String>();
            for (Guid clusterID : clustersAsSet) {
                List<VDS> vdsList = DbFacade.getInstance().getVdsDao().getAllForVdsGroup(clusterID);
                boolean vdsForMigrationExists = checkIfThereIsVDSToHoldMigratedVMs(getParameters().getVdsIdList(), vdsList);
                if (!vdsForMigrationExists) {
                    List<String> candidateHostsWithRunningVms = new ArrayList<String>();
                    for (VDS vdsInCluster : vdsList) {
                        if (vdsWithRunningVMs.contains(vdsInCluster.getId())) {
                            candidateHostsWithRunningVms.add(vdsInCluster.getName());
                        }
                    }
                    // cluster
                    if (!candidateHostsWithRunningVms.isEmpty()) {
                        addClusterDetails(clusterID, problematicClusters);
                        allHostsWithRunningVms.addAll(candidateHostsWithRunningVms);
                    }
                }
            }
            // If there are problematic clusters
            result = problematicClusters.isEmpty();
            if (!result) {
                addCanDoActionMessage(VdcBllMessages.CANNOT_MAINTENANCE_VDS_RUN_VMS_NO_OTHER_RUNNING_VDS);
                String commaDelimitedClusters = StringUtils.join(problematicClusters, ",");
                getReturnValue().getCanDoActionMessages().add(String.format("$ClustersList %1$s", commaDelimitedClusters));
                getReturnValue().getCanDoActionMessages().add(String.format("$HostsList %1$s", StringUtils.join(allHostsWithRunningVms, ",")));
            }
        }
    }
    return result;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean result = true;
    Set<Guid> clustersAsSet = new HashSet<Guid>();
    Set<Guid> vdsWithRunningVMs = new HashSet<Guid>();
    List<String> hostNotRespondingList = new ArrayList<String>();
    List<String> hostsWithNonMigratableVms = new ArrayList<String>();
    List<String> hostsWithVmsWithPluggedDiskSnapshots = new ArrayList<>();
    List<String> nonMigratableVms = new ArrayList<String>();
    for (Guid vdsId : getParameters().getVdsIdList()) {
        VDS vds = DbFacade.getInstance().getVdsDao().get(vdsId);
        if (vds == null) {
            log.error(String.format("ResourceManager::vdsMaintenance could not find vds_id = '%1$s'", vdsId));
            addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
            result = false;
            continue;
        }
        if (!vdssToMaintenance.containsKey(vdsId)) {
            vdssToMaintenance.put(vdsId, vds);
            if (vds.getSpmStatus() == VdsSpmStatus.SPM) {
                addSharedLockEntry(vds);
            }
        }
    }
    result = result && acquireLockInternal();
    if (result) {
        // tasks running
        for (Guid vdsId : getParameters().getVdsIdList()) {
            VDS vds = vdssToMaintenance.get(vdsId);
            if (vds != null) {
                List<VM> vms = getVmDAO().getAllRunningForVds(vdsId);
                if ((vds.getStatus() != VDSStatus.Maintenance) && (vds.getStatus() != VDSStatus.NonResponsive) && (vds.getStatus() != VDSStatus.Up) && (vds.getStatus() != VDSStatus.Error) && (vds.getStatus() != VDSStatus.PreparingForMaintenance) && (vds.getStatus() != VDSStatus.Down) && (vds.getStatus() != VDSStatus.NonOperational)) {
                    result = false;
                    addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_MAINTENANCE_VDS_IS_NOT_OPERATIONAL.toString());
                } else {
                    if (vms.size() > 0) {
                        vdsWithRunningVMs.add(vdsId);
                    }
                    clustersAsSet.add(vds.getVdsGroupId());
                    List<String> nonMigratableVmDescriptionsToFrontEnd = new ArrayList<String>();
                    for (VM vm : vms) {
                        if (vm.getMigrationSupport() != MigrationSupport.MIGRATABLE) {
                            nonMigratableVmDescriptionsToFrontEnd.add(vm.getName());
                        }
                    }
                    if (nonMigratableVmDescriptionsToFrontEnd.size() > 0) {
                        hostsWithNonMigratableVms.add(vds.getName());
                        nonMigratableVms.addAll(nonMigratableVmDescriptionsToFrontEnd);
                        // The non migratable VM names will be comma separated
                        log.error(String.format("VDS %1$s contains non migratable VMs", vdsId));
                        result = false;
                    } else if (!validate(new VmValidator(vms).vmNotHavingPluggedDiskSnapshots(VdcBllMessages.VDS_CANNOT_MAINTENANCE_VM_HAS_PLUGGED_DISK_SNAPSHOT))) {
                        hostsWithVmsWithPluggedDiskSnapshots.add(vds.getName());
                        result = false;
                    } else if (vds.getStatus() == VDSStatus.Maintenance) {
                        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_MAINTENANCE_VDS_IS_IN_MAINTENANCE);
                        result = false;
                    } else if (vds.getSpmStatus() == VdsSpmStatus.Contending) {
                        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_MAINTENANCE_SPM_CONTENDING);
                        result = false;
                    } else if (vds.getStatus() == VDSStatus.NonResponsive && vds.getVmCount() > 0) {
                        result = false;
                        hostNotRespondingList.add(vds.getName());
                    } else if (vds.getStatus() == VDSStatus.NonResponsive && vds.getSpmStatus() != VdsSpmStatus.None) {
                        result = false;
                        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_MAINTENANCE_VDS_IS_NOT_RESPONDING_AND_IS_SPM);
                    } else if (vds.getSpmStatus() == VdsSpmStatus.SPM && vds.getStatus() == VDSStatus.Up && getAsyncTaskDao().getAsyncTaskIdsByStoragePoolId(vds.getStoragePoolId()).size() > 0) {
                        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_MAINTENANCE_SPM_WITH_RUNNING_TASKS);
                        result = false;
                    }
                }
            }
        }
        // If one of the host is non responsive with running VM's, add a CanDoAction message.
        handleNonResponsiveHosts(hostNotRespondingList);
        // If one of the vms is non migratable, add a CanDoAction message.
        handleNonMigratableVms(hostsWithNonMigratableVms, nonMigratableVms);
        handleHostsWithVmsWithPluggedDiskSnapshots(hostsWithVmsWithPluggedDiskSnapshots);
        if (result) {
            // Remove all redundant clusters in clusters list, by adding it to a
            // set.
            // For each cluster check for each host that belongs to it, if its a
            // part of the parameters and
            // if there are running hosts for it - if it is up and is not in the
            // parameters -migration will be possible
            // to be performed, and there is no point to continue the check for
            // the given cluster - otherwise,
            // if the host is up and in the parameters - it may be that the
            // cluster is problematic (no hosts in up
            // state that we will be able to migrate VMs to)
            // In the end - if the clusters list is not empty - this is an
            // error, use the "problematic clusters list" to format an error to
            // the client
            List<String> problematicClusters = new ArrayList<String>();
            List<String> allHostsWithRunningVms = new ArrayList<String>();
            for (Guid clusterID : clustersAsSet) {
                List<VDS> vdsList = DbFacade.getInstance().getVdsDao().getAllForVdsGroup(clusterID);
                boolean vdsForMigrationExists = checkIfThereIsVDSToHoldMigratedVMs(getParameters().getVdsIdList(), vdsList);
                if (!vdsForMigrationExists) {
                    List<String> candidateHostsWithRunningVms = new ArrayList<String>();
                    for (VDS vdsInCluster : vdsList) {
                        if (vdsWithRunningVMs.contains(vdsInCluster.getId())) {
                            candidateHostsWithRunningVms.add(vdsInCluster.getName());
                        }
                    }
                    // cluster
                    if (!candidateHostsWithRunningVms.isEmpty()) {
                        addClusterDetails(clusterID, problematicClusters);
                        allHostsWithRunningVms.addAll(candidateHostsWithRunningVms);
                    }
                }
            }
            // If there are problematic clusters
            result = problematicClusters.isEmpty();
            if (!result) {
                addCanDoActionMessage(VdcBllMessages.CANNOT_MAINTENANCE_VDS_RUN_VMS_NO_OTHER_RUNNING_VDS);
                String commaDelimitedClusters = StringUtils.join(problematicClusters, ",");
                getReturnValue().getCanDoActionMessages().add(String.format("$ClustersList %1$s", commaDelimitedClusters));
                getReturnValue().getCanDoActionMessages().add(String.format("$HostsList %1$s", StringUtils.join(allHostsWithRunningVms, ",")));
            }
        }
    }
    return result;
}
#end_block

#method_before
@OnTimerMethodAnnotation("startFailedAutoStartVms")
public void startFailedAutoStartVms() {
    LinkedList<Pair<Guid, DateTime>> idsToRemove = new LinkedList<>();
    final DateTime now = DateTime.getNow();
    final DateTime nextTimeOfRetryToRun = now.AddSeconds(RETRY_TO_RUN_HA_VM_INTERVAL);
    for (Pair<Guid, DateTime> vmIdAndDateTime : autoStartVmsToRun) {
        if (now.compareTo(vmIdAndDateTime.getSecond()) < 0) {
            continue;
        }
        Guid vmId = vmIdAndDateTime.getFirst();
        EngineLock runVmLock = createLockForRunVmCommand(vmId);
        if (!getLockManager().acquireLock(runVmLock).getFirst()) {
            log.infoFormat("Could not acquire lock for running HA VM {0}", vmId);
            continue;
        }
        if (!runVm(vmId, runVmLock) && getVmDynamicDao().get(vmId).getStatus() == VMStatus.Down) {
            AuditLogableBase event = new AuditLogableBase();
            event.setVmId(vmId);
            AuditLogDirector.log(event, AuditLogType.HA_VM_RESTART_FAILED);
            vmIdAndDateTime.setSecond(nextTimeOfRetryToRun);
            continue;
        }
        // the VM reached WaitForLunch, so we can remove it from the set,
        // from now on errors will be detected by VdsUpdateRuntimeInfo
        idsToRemove.add(vmIdAndDateTime);
    }
    autoStartVmsToRun.removeAll(idsToRemove);
}
#method_after
@OnTimerMethodAnnotation("startFailedAutoStartVms")
public void startFailedAutoStartVms() {
    LinkedList<AutoStartVmToRestart> vmsToRemove = new LinkedList<>();
    final DateTime iterationStartTime = DateTime.getNow();
    final Date nextTimeOfRetryToRun = iterationStartTime.addSeconds(RETRY_TO_RUN_HA_VM_INTERVAL);
    for (AutoStartVmToRestart autoStartVmToRestart : autoStartVmsToRestart) {
        // (we'll try again in the next iteration)
        if (!autoStartVmToRestart.isTimeToRun(iterationStartTime)) {
            continue;
        }
        Guid vmId = autoStartVmToRestart.getVmId();
        EngineLock runVmLock = createEngineLockForRunVm(vmId);
        // acquired, skip for now  and we'll try again in the next iteration
        if (!acquireLock(runVmLock)) {
            log.debugFormat("Could not acquire lock for running HA VM {0}", vmId);
            continue;
        }
        if (!isVmNeedsToBeAutoStarted(vmId)) {
            // if the VM doesn't need to be auto started anymore, release the lock and
            // remove the VM from the collection of VMs that should be auto started
            releaseLock(runVmLock);
            vmsToRemove.add(autoStartVmToRestart);
            continue;
        }
        if (runVm(vmId, runVmLock)) {
            // the VM reached WaitForLunch, so from now on this job is not responsible
            // to auto start it, future failures will be detected by the monitoring
            vmsToRemove.add(autoStartVmToRestart);
        } else {
            logFailedAttemptToRestartHighlyAvailableVm(vmId);
            if (!autoStartVmToRestart.scheduleNextTimeToRun(nextTimeOfRetryToRun)) {
                // if we could not schedule the next time to run the VM, it means
                // that we reached the maximum number of tried so don't try anymore
                vmsToRemove.add(autoStartVmToRestart);
                logFailureToRestartHighlyAvailableVm(vmId);
            }
        }
    }
    autoStartVmsToRestart.removeAll(vmsToRemove);
}
#end_block

#method_before
public void addVmToRun(Guid vmId) {
    autoStartVmsToRun.add(new Pair<>(vmId, DateTime.getNow()));
}
#method_after
public void addVmToRun(Guid vmId) {
    autoStartVmsToRestart.add(new AutoStartVmToRestart(vmId));
}
#end_block

#method_before
public static void InitDictionaries() {
    log.info("Start initializing dictionaries");
    _managersDictionary.clear();
    for (Version ver : Config.<HashSet<Version>>GetValue(ConfigValues.SupportedClusterLevels)) {
        _managersDictionary.put(ver, new CpuFlagsManager(ver));
    }
    log.info("Finished initializing dictionaries");
}
#method_after
public static void InitDictionaries() {
    log.info("Start initializing dictionaries");
    _managersDictionary.clear();
    for (Version ver : Config.<HashSet<Version>>getValue(ConfigValues.SupportedClusterLevels)) {
        _managersDictionary.put(ver, new CpuFlagsManager(ver));
    }
    log.info("Finished initializing dictionaries");
}
#end_block

#method_before
@SuppressWarnings("synthetic-access")
public void InitDictionaries(Version ver) {
    // init dictionaries
    _intelCpuByNameDictionary.clear();
    _amdCpuByNameDictionary.clear();
    _ibmCpuByNameDictionary.clear();
    _allCpuList.clear();
    String[] cpus = Config.<String>GetValue(ConfigValues.ServerCPUList, ver.toString()).split("[;]", -1);
    for (String cpu : cpus) {
        if (!StringUtils.isEmpty(cpu)) {
            // [0]-level, [1]-name, [2]-flags, [3]-verb, [4]-arch
            final String[] info = cpu.split("[:]", -1);
            if (info.length == 5) {
                // if no flags at all create new list instead of split
                HashSet<String> flgs = (StringUtils.isEmpty(info[2])) ? new HashSet<String>() : new HashSet<String>(Arrays.asList(info[2].split("[,]", -1)));
                String arch = info[4].trim();
                ArchitectureType archType = ArchitectureType.valueOf(arch);
                String levelString = info[0].trim();
                int level = 0;
                if (StringUtils.isNotEmpty(levelString)) {
                    level = Integer.parseInt(levelString);
                }
                ServerCpu sc = new ServerCpu(info[1], level, flgs, info[3], archType);
                if (sc.getFlags().contains(_intelFlag)) {
                    _intelCpuByNameDictionary.put(sc.getCpuName(), sc);
                } else if (sc.getFlags().contains(_amdFlag)) {
                    _amdCpuByNameDictionary.put(sc.getCpuName(), sc);
                } else if (sc.getFlags().contains(_ibmFlag)) {
                    _ibmCpuByNameDictionary.put(sc.getCpuName(), sc);
                }
                _allCpuList.add(sc);
            } else {
                log.errorFormat("Error getting info for CPU: {0}, not in expected format.", cpu);
            }
        }
    }
    _intelCpuList = new ArrayList<ServerCpu>(_intelCpuByNameDictionary.values());
    _amdCpuList = new ArrayList<ServerCpu>(_amdCpuByNameDictionary.values());
    _ibmCpuList = new ArrayList<ServerCpu>(_ibmCpuByNameDictionary.values());
    Comparator<ServerCpu> cpuComparator = new Comparator<ServerCpu>() {

        @Override
        public int compare(ServerCpu o1, ServerCpu o2) {
            return Integer.valueOf(o1.getLevel()).compareTo(o2.getLevel());
        }
    };
    // Sort by the highest cpu level so the highest cpu match will be
    // selected first
    Collections.sort(_intelCpuList, cpuComparator);
    Collections.sort(_amdCpuList, cpuComparator);
}
#method_after
@SuppressWarnings("synthetic-access")
public void InitDictionaries(Version ver) {
    // init dictionaries
    _intelCpuByNameDictionary.clear();
    _amdCpuByNameDictionary.clear();
    _ibmCpuByNameDictionary.clear();
    _allCpuList.clear();
    String[] cpus = Config.<String>getValue(ConfigValues.ServerCPUList, ver.toString()).split("[;]", -1);
    for (String cpu : cpus) {
        if (!StringUtils.isEmpty(cpu)) {
            // [0]-level, [1]-name, [2]-flags, [3]-verb, [4]-arch
            final String[] info = cpu.split("[:]", -1);
            if (info.length == 5) {
                // if no flags at all create new list instead of split
                HashSet<String> flgs = (StringUtils.isEmpty(info[2])) ? new HashSet<String>() : new HashSet<String>(Arrays.asList(info[2].split("[,]", -1)));
                String arch = info[4].trim();
                ArchitectureType archType = ArchitectureType.valueOf(arch);
                String levelString = info[0].trim();
                int level = 0;
                if (StringUtils.isNotEmpty(levelString)) {
                    level = Integer.parseInt(levelString);
                }
                ServerCpu sc = new ServerCpu(info[1], level, flgs, info[3], archType);
                if (sc.getFlags().contains(_intelFlag)) {
                    _intelCpuByNameDictionary.put(sc.getCpuName(), sc);
                } else if (sc.getFlags().contains(_amdFlag)) {
                    _amdCpuByNameDictionary.put(sc.getCpuName(), sc);
                } else if (sc.getFlags().contains(_ibmFlag)) {
                    _ibmCpuByNameDictionary.put(sc.getCpuName(), sc);
                }
                _allCpuList.add(sc);
            } else {
                log.errorFormat("Error getting info for CPU: {0}, not in expected format.", cpu);
            }
        }
    }
    _intelCpuList = new ArrayList<ServerCpu>(_intelCpuByNameDictionary.values());
    _amdCpuList = new ArrayList<ServerCpu>(_amdCpuByNameDictionary.values());
    _ibmCpuList = new ArrayList<ServerCpu>(_ibmCpuByNameDictionary.values());
    Comparator<ServerCpu> cpuComparator = new Comparator<ServerCpu>() {

        @Override
        public int compare(ServerCpu o1, ServerCpu o2) {
            return Integer.valueOf(o1.getLevel()).compareTo(o2.getLevel());
        }
    };
    // Sort by the highest cpu level so the highest cpu match will be
    // selected first
    Collections.sort(_intelCpuList, cpuComparator);
    Collections.sort(_amdCpuList, cpuComparator);
    Collections.sort(_ibmCpuList, cpuComparator);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    VDS vds = getVds();
    if (vds == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
        return false;
    }
    if (!ObjectIdentityChecker.CanUpdateField(vds, "vdsGroupId", vds.getStatus())) {
        addCanDoActionMessage(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE);
        return false;
    }
    if (getTargetCluster() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    targetStoragePool = DbFacade.getInstance().getStoragePoolDao().getForVdsGroup(getTargetCluster().getId());
    if (targetStoragePool != null && targetStoragePool.getStorageType() == StorageType.LOCALFS) {
        if (!DbFacade.getInstance().getVdsStaticDao().getAllForVdsGroup(getParameters().getClusterId()).isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE);
            return false;
        }
    }
    if (getVdsGroup().supportsGlusterService()) {
        if (getGlusterUtils().hasBricks(getVdsId())) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME);
            return false;
        }
        if (!hasUpServer(getSourceCluster())) {
            return false;
        }
    }
    if (getTargetCluster().supportsGlusterService() && !hasUpServerInTarget(getTargetCluster())) {
        return false;
    }
    if (vds.getCpuName() == null) {
        vds.setCpuName(CpuFlagsManagerHandler.FindMaxServerCpuByFlags(vds.getCpuFlags(), getTargetCluster().getcompatibility_version()));
    }
    if (vds.getCpuName() == null) {
        return failCanDoAction(VdcBllMessages.CPU_TYPE_UNSUPPORTED_IN_THIS_CLUSTER_VERSION);
    }
    if (StringUtils.isNotEmpty(getTargetCluster().getcpu_name())) {
        if (!getTargetCluster().getArchitecture().equals(vds.getCpuName().getArchitecture())) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VDS_CLUSTER_DIFFERENT_ARCHITECTURES);
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    VDS vds = getVds();
    if (vds == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
        return false;
    }
    if (!ObjectIdentityChecker.CanUpdateField(vds, "vdsGroupId", vds.getStatus())) {
        addCanDoActionMessage(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE);
        return false;
    }
    if (getTargetCluster() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    targetStoragePool = DbFacade.getInstance().getStoragePoolDao().getForVdsGroup(getTargetCluster().getId());
    if (targetStoragePool != null && targetStoragePool.getStorageType() == StorageType.LOCALFS) {
        if (!DbFacade.getInstance().getVdsStaticDao().getAllForVdsGroup(getParameters().getClusterId()).isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE);
            return false;
        }
    }
    if (getVdsGroup().supportsGlusterService()) {
        if (getGlusterUtils().hasBricks(getVdsId())) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME);
            return false;
        }
        if (!hasUpServer(getSourceCluster())) {
            return false;
        }
    }
    if (getTargetCluster().supportsGlusterService() && !hasUpServerInTarget(getTargetCluster())) {
        return false;
    }
    vds.setCpuName(CpuFlagsManagerHandler.FindMaxServerCpuByFlags(vds.getCpuFlags(), getTargetCluster().getcompatibility_version()));
    if (vds.getCpuName() == null) {
        return failCanDoAction(VdcBllMessages.CPU_TYPE_UNSUPPORTED_IN_THIS_CLUSTER_VERSION);
    }
    if (getTargetCluster().getArchitecture() != ArchitectureType.undefined && getTargetCluster().getArchitecture() != vds.getCpuName().getArchitecture()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VDS_CLUSTER_DIFFERENT_ARCHITECTURES);
    }
    return true;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    final Guid targetClusterId = getParameters().getClusterId();
    if (getSourceCluster().getId().equals(targetClusterId)) {
        setSucceeded(true);
        return;
    }
    // save the new cluster id
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            VdsStatic staticData = getVds().getStaticData();
            getCompensationContext().snapshotEntity(staticData);
            staticData.setVdsGroupId(targetClusterId);
            DbFacade.getInstance().getVdsStaticDao().update(staticData);
            getCompensationContext().stateChanged();
            return null;
        }
    });
    getParameters().setCompensationEnabled(true);
    getParameters().setTransactionScopeOption(TransactionScopeOption.RequiresNew);
    if (targetStoragePool != null && (getSourceCluster().getStoragePoolId() == null || !targetStoragePool.getId().equals(getSourceCluster().getStoragePoolId()))) {
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, getParameters(), new CommandContext(getCompensationContext()));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    if (getSourceCluster().supportsGlusterService() && getClusterUtils().hasServers(getSourceCluster().getId())) {
        if (!glusterHostRemove(getSourceCluster().getId())) {
            setSucceeded(false);
            return;
        }
    }
    if (getTargetCluster().supportsGlusterService() && getClusterUtils().hasMultipleServers(getTargetCluster().getId())) {
        if (!glusterHostAdd(getTargetCluster().getId())) {
            setSucceeded(false);
            return;
        }
    }
    if (getSourceCluster().getStoragePoolId() != null && (targetStoragePool == null || !getSourceCluster().getStoragePoolId().equals(targetStoragePool.getId()))) {
        getVdsSpmIdMapDAO().removeByVdsAndStoragePool(getVds().getId(), getSourceCluster().getStoragePoolId());
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    final Guid targetClusterId = getParameters().getClusterId();
    if (getSourceCluster().getId().equals(targetClusterId)) {
        setSucceeded(true);
        return;
    }
    // save the new cluster id
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            VdsStatic staticData = getVds().getStaticData();
            getCompensationContext().snapshotEntity(staticData);
            staticData.setVdsGroupId(targetClusterId);
            DbFacade.getInstance().getVdsStaticDao().update(staticData);
            getCompensationContext().stateChanged();
            // remove the server from resource manager and add it back
            initializeVds();
            return null;
        }
    });
    if (targetStoragePool != null && (getSourceCluster().getStoragePoolId() == null || !targetStoragePool.getId().equals(getSourceCluster().getStoragePoolId()))) {
        VdsActionParameters addVdsSpmIdParams = new VdsActionParameters(getVdsIdRef());
        addVdsSpmIdParams.setSessionId(getParameters().getSessionId());
        addVdsSpmIdParams.setCompensationEnabled(true);
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, addVdsSpmIdParams, new CommandContext(getCompensationContext()));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    if (getSourceCluster().supportsGlusterService() && getClusterUtils().hasServers(getSourceCluster().getId())) {
        if (!glusterHostRemove(getSourceCluster().getId())) {
            setSucceeded(false);
            return;
        }
    }
    if (getTargetCluster().supportsGlusterService() && getClusterUtils().hasMultipleServers(getTargetCluster().getId())) {
        if (!glusterHostAdd(getTargetCluster().getId())) {
            setSucceeded(false);
            return;
        }
    }
    if (getSourceCluster().getStoragePoolId() != null && (targetStoragePool == null || !getSourceCluster().getStoragePoolId().equals(targetStoragePool.getId()))) {
        getVdsSpmIdMapDAO().removeByVdsAndStoragePool(getVds().getId(), getSourceCluster().getStoragePoolId());
    }
    setSucceeded(true);
}
#end_block

#method_before
private boolean glusterHostRemove(Guid sourceClusterId) {
    String hostName = (getVds().getHostName().isEmpty()) ? getVds().getManagementIp() : getVds().getHostName();
    VDS runningHostInSourceCluster = getClusterUtils().getUpServer(sourceClusterId);
    if (runningHostInSourceCluster == null) {
        log.error("Cannot remove host from source cluster, no host in Up status found in source cluster");
        handleError(-1, "No host in Up status found in source cluster");
        errorType = AuditLogType.GLUSTER_SERVER_REMOVE_FAILED;
        return false;
    }
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RemoveGlusterServer, new RemoveGlusterServerVDSParameters(runningHostInSourceCluster.getId(), hostName, false));
    if (!returnValue.getSucceeded()) {
        handleVdsError(returnValue);
        errorType = AuditLogType.GLUSTER_SERVER_REMOVE_FAILED;
        return false;
    }
    return true;
}
#method_after
private boolean glusterHostRemove(Guid sourceClusterId) {
    // condition.
    try (EngineLock lock = GlusterUtil.getInstance().acquireGlusterLockWait(sourceClusterId)) {
        String hostName = (getVds().getHostName().isEmpty()) ? getVds().getManagementIp() : getVds().getHostName();
        VDS runningHostInSourceCluster = getClusterUtils().getUpServer(sourceClusterId);
        if (runningHostInSourceCluster == null) {
            log.error("Cannot remove host from source cluster, no host in Up status found in source cluster");
            handleError(-1, "No host in Up status found in source cluster");
            errorType = AuditLogType.GLUSTER_SERVER_REMOVE_FAILED;
            return false;
        }
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RemoveGlusterServer, new RemoveGlusterServerVDSParameters(runningHostInSourceCluster.getId(), hostName, false));
        if (!returnValue.getSucceeded()) {
            handleVdsError(returnValue);
            errorType = AuditLogType.GLUSTER_SERVER_REMOVE_FAILED;
            return false;
        }
        return true;
    }
}
#end_block

#method_before
private boolean glusterHostAdd(Guid targetClusterId) {
    String hostName = (getVds().getHostName().isEmpty()) ? getVds().getManagementIp() : getVds().getHostName();
    VDS runningHostInTargetCluster = getClusterUtils().getUpServer(targetClusterId);
    if (runningHostInTargetCluster == null) {
        log.error("Cannot add host to target cluster, no host in Up status found in target cluster");
        handleError(-1, "No host in Up status found in target cluster");
        errorType = AuditLogType.GLUSTER_SERVER_ADD_FAILED;
        return false;
    }
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.AddGlusterServer, new AddGlusterServerVDSParameters(runningHostInTargetCluster.getId(), hostName));
    if (!returnValue.getSucceeded()) {
        handleVdsError(returnValue);
        errorType = AuditLogType.GLUSTER_SERVER_ADD_FAILED;
        return false;
    }
    return true;
}
#method_after
private boolean glusterHostAdd(Guid targetClusterId) {
    // condition.
    try (EngineLock lock = GlusterUtil.getInstance().acquireGlusterLockWait(targetClusterId)) {
        String hostName = (getVds().getHostName().isEmpty()) ? getVds().getManagementIp() : getVds().getHostName();
        VDS runningHostInTargetCluster = getClusterUtils().getUpServer(targetClusterId);
        if (runningHostInTargetCluster == null) {
            log.error("Cannot add host to target cluster, no host in Up status found in target cluster");
            handleError(-1, "No host in Up status found in target cluster");
            errorType = AuditLogType.GLUSTER_SERVER_ADD_FAILED;
            return false;
        }
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.AddGlusterServer, new AddGlusterServerVDSParameters(runningHostInTargetCluster.getId(), hostName));
        if (!returnValue.getSucceeded()) {
            handleVdsError(returnValue);
            errorType = AuditLogType.GLUSTER_SERVER_ADD_FAILED;
            return false;
        }
        return true;
    }
}
#end_block

#method_before
@Test
public void updateWithLowerVersionThanHosts() {
    createCommandWithDefaultVdsGroup();
    cpuExists();
    architectureIsValid();
    cpuManufacturersMatch();
    VdsExistWithHigherVersion();
    canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS);
}
#method_after
@Test
public void updateWithLowerVersionThanHosts() {
    createCommandWithDefaultVdsGroup();
    cpuExists();
    cpuManufacturersMatch();
    VdsExistWithHigherVersion();
    architectureIsUpdatable();
    canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS);
}
#end_block

#method_before
@Test
public void updateWithCpuLowerThanHost() {
    createCommandWithDefaultVdsGroup();
    cpuExists();
    cpuManufacturersMatch();
    architectureIsValid();
    clusterHasVds();
    cpuFlagsMissing();
    canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_LOWER_HOSTS);
}
#method_after
@Test
public void updateWithCpuLowerThanHost() {
    createCommandWithDefaultVdsGroup();
    cpuExists();
    cpuManufacturersMatch();
    clusterHasVds();
    cpuFlagsMissing();
    architectureIsUpdatable();
    canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_LOWER_HOSTS);
}
#end_block

#method_before
@Test
public void clusterAlreadyInLocalFs() {
    createCommandWithDefaultVdsGroup();
    oldGroupIsDetachedDefault();
    storagePoolIsLocalFS();
    cpuExists();
    cpuManufacturersMatch();
    allQueriesForVms();
    storagePoolAlreadyHasCluster();
    canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE);
}
#method_after
@Test
public void clusterAlreadyInLocalFs() {
    createCommandWithDefaultVdsGroup();
    oldGroupIsDetachedDefault();
    storagePoolIsLocalFS();
    cpuExists();
    cpuManufacturersMatch();
    allQueriesForVms();
    storagePoolAlreadyHasCluster();
    architectureIsUpdatable();
    canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE);
}
#end_block

#method_before
@Test
public void defaultClusterInLocalFs() {
    createCommandWithDefaultVdsGroup();
    oldGroupIsDetachedDefault();
    storagePoolIsLocalFS();
    cpuExists();
    cpuManufacturersMatch();
    allQueriesForVms();
    canDoActionFailedWithReason(VdcBllMessages.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS);
}
#method_after
@Test
public void defaultClusterInLocalFs() {
    mcr.mockConfigValue(ConfigValues.AutoRegistrationDefaultVdsGroupID, DEFAULT_VDS_GROUP_ID);
    createCommandWithDefaultVdsGroup();
    oldGroupIsDetachedDefault();
    storagePoolIsLocalFS();
    cpuExists();
    cpuManufacturersMatch();
    allQueriesForVms();
    architectureIsUpdatable();
    canDoActionFailedWithReason(VdcBllMessages.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS);
}
#end_block

#method_before
@Test
public void disableVirtWhenVmsExist() {
    createCommandWithGlusterEnabled();
    when(vdsGroupDAO.get(any(Guid.class))).thenReturn(createVdsGroupWithNoCpuName());
    when(vdsGroupDAO.getByName(anyString())).thenReturn(createVdsGroupWithNoCpuName());
    mcr.mockConfigValue(ConfigValues.GlusterSupport, VERSION_1_1, Boolean.TRUE);
    cpuExists();
    cpuFlagsNotMissing();
    clusterHasVds();
    clusterHasVMs();
    canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_VIRT_WHEN_CLUSTER_CONTAINS_VMS);
}
#method_after
@Test
public void disableVirtWhenVmsExist() {
    createCommandWithGlusterEnabled();
    when(vdsGroupDAO.get(any(Guid.class))).thenReturn(createDefaultVdsGroup());
    when(vdsGroupDAO.getByName(anyString())).thenReturn(createDefaultVdsGroup());
    mcr.mockConfigValue(ConfigValues.GlusterSupport, VERSION_1_1, Boolean.TRUE);
    cpuExists();
    cpuFlagsNotMissing();
    clusterHasVds();
    clusterHasVMs();
    canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_VIRT_WHEN_CLUSTER_CONTAINS_VMS);
}
#end_block

#method_before
private void createCommand(final VDSGroup group) {
    setValidCpuVersionMap();
    VdsGroupOperationParameters params = new VdsGroupOperationParameters(group);
    cmd = spy(new UpdateVdsGroupCommand<VdsGroupOperationParameters>(params));
    doReturn(0).when(cmd).compareCpuLevels(any(VDSGroup.class));
    doReturn(vdsGroupDAO).when(cmd).getVdsGroupDAO();
    doReturn(vdsDAO).when(cmd).getVdsDAO();
    doReturn(storagePoolDAO).when(cmd).getStoragePoolDAO();
    doReturn(glusterVolumeDao).when(cmd).getGlusterVolumeDao();
    doReturn(vmDao).when(cmd).getVmDAO();
    doReturn(true).when(cmd).validateClusterPolicy();
    when(vdsGroupDAO.get(any(Guid.class))).thenReturn(createDefaultVdsGroup());
    when(vdsGroupDAO.getByName(anyString())).thenReturn(createDefaultVdsGroup());
}
#method_after
private void createCommand(final VDSGroup group) {
    setValidCpuVersionMap();
    VdsGroupOperationParameters params = new VdsGroupOperationParameters(group);
    cmd = spy(new UpdateVdsGroupCommand<VdsGroupOperationParameters>(params));
    doReturn(0).when(cmd).compareCpuLevels(any(VDSGroup.class));
    doReturn(vdsGroupDAO).when(cmd).getVdsGroupDAO();
    doReturn(vdsDAO).when(cmd).getVdsDAO();
    doReturn(storagePoolDAO).when(cmd).getStoragePoolDAO();
    doReturn(glusterVolumeDao).when(cmd).getGlusterVolumeDao();
    doReturn(vmDao).when(cmd).getVmDAO();
    doReturn(true).when(cmd).validateClusterPolicy();
    when(vdsGroupDAO.get(any(Guid.class))).thenReturn(createDefaultVdsGroup());
    when(vdsGroupDAO.getByName(anyString())).thenReturn(createDefaultVdsGroup());
    List<VDSGroup> vdsGroupList = new ArrayList<VDSGroup>();
    vdsGroupList.add(createDefaultVdsGroup());
    when(vdsGroupDAO.getByName(anyString(), anyBoolean())).thenReturn(vdsGroupList);
}
#end_block

#method_before
private static VDSGroup createDefaultVdsGroup() {
    VDSGroup group = new VDSGroup();
    group.setName("Default");
    group.setId(VDSGroup.DEFAULT_VDS_GROUP_ID);
    group.setcpu_name("Intel Conroe");
    group.setcompatibility_version(VERSION_1_1);
    group.setStoragePoolId(STORAGE_POOL_ID);
    return group;
}
#method_after
private static VDSGroup createDefaultVdsGroup() {
    VDSGroup group = new VDSGroup();
    group.setName("Default");
    group.setId(DEFAULT_VDS_GROUP_ID);
    group.setcpu_name("Intel Conroe");
    group.setcompatibility_version(VERSION_1_1);
    group.setStoragePoolId(STORAGE_POOL_ID);
    group.setArchitecture(ArchitectureType.x86_64);
    return group;
}
#end_block

#method_before
private static VDSGroup createVdsGroupWithNoCpuName() {
    VDSGroup group = new VDSGroup();
    group.setName("Default");
    group.setId(VDSGroup.DEFAULT_VDS_GROUP_ID);
    group.setcompatibility_version(VERSION_1_1);
    group.setStoragePoolId(STORAGE_POOL_ID);
    return group;
}
#method_after
private static VDSGroup createVdsGroupWithNoCpuName() {
    VDSGroup group = new VDSGroup();
    group.setName("Default");
    group.setId(DEFAULT_VDS_GROUP_ID);
    group.setcompatibility_version(VERSION_1_1);
    group.setStoragePoolId(STORAGE_POOL_ID);
    group.setArchitecture(ArchitectureType.undefined);
    return group;
}
#end_block

#method_before
private void clusterHasVMs() {
    VM vm = new VM();
    vm.setVdsGroupId(VDSGroup.DEFAULT_VDS_GROUP_ID);
    List<VM> vmList = new ArrayList<VM>();
    vmList.add(vm);
    when(vmDao.getAllForVdsGroup(any(Guid.class))).thenReturn(vmList);
}
#method_after
private void clusterHasVMs() {
    VM vm = new VM();
    vm.setVdsGroupId(DEFAULT_VDS_GROUP_ID);
    List<VM> vmList = new ArrayList<VM>();
    vmList.add(vm);
    when(vmDao.getAllForVdsGroup(any(Guid.class))).thenReturn(vmList);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    if (getVdsGroup().getArchitecture() == null) {
        getVdsGroup().setArchitecture(CpuFlagsManagerHandler.getArchitectureByCpuName(getVdsGroup().getcpu_name(), getVdsGroup().getcompatibility_version()));
    }
    // TODO: This code should be revisited and proper compensation logic should be introduced here
    CheckMaxMemoryOverCommitValue();
    getVdsGroupDAO().update(getParameters().getVdsGroup());
    if ((oldGroup.getStoragePoolId() != null && !oldGroup.getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) || (oldGroup.getStoragePoolId() == null && getVdsGroup().getStoragePoolId() != null)) {
        for (VDS vds : allForVdsGroup) {
            VdsActionParameters parameters = new VdsActionParameters();
            parameters.setVdsId(vds.getId());
            VdcReturnValueBase addVdsSpmIdReturn = getBackend().runInternalAction(VdcActionType.AddVdsSpmId, parameters);
            if (!addVdsSpmIdReturn.getSucceeded()) {
                setSucceeded(false);
                getReturnValue().setFault(addVdsSpmIdReturn.getFault());
                return;
            }
        }
        if (oldGroup.getStoragePoolId() != null) {
            for (VDS vds : allForVdsGroup) {
                getVdsSpmIdMapDAO().removeByVdsAndStoragePool(vds.getId(), oldGroup.getStoragePoolId());
            }
        }
    }
    // when changing data center we check that default networks exists in
    // cluster
    List<Network> networks = getNetworkDAO().getAllForCluster(getVdsGroup().getId());
    boolean exists = false;
    String managementNetwork = NetworkUtils.getEngineNetwork();
    for (Network net : networks) {
        if (StringUtils.equals(net.getName(), managementNetwork)) {
            exists = true;
        }
    }
    if (!exists) {
        if (getVdsGroup().getStoragePoolId() != null) {
            List<Network> storagePoolNets = getNetworkDAO().getAllForDataCenter(getVdsGroup().getStoragePoolId());
            for (Network net : storagePoolNets) {
                if (StringUtils.equals(net.getName(), managementNetwork)) {
                    getNetworkClusterDAO().save(new NetworkCluster(getVdsGroup().getId(), net.getId(), NetworkStatus.OPERATIONAL, true, true, false));
                }
            }
        }
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    getVdsGroup().setArchitecture(getArchitecture());
    // TODO: This code should be revisited and proper compensation logic should be introduced here
    checkMaxMemoryOverCommitValue();
    if (!ObjectUtils.objectsEqual(oldGroup.getcompatibility_version(), getParameters().getVdsGroup().getcompatibility_version())) {
        String emulatedMachine = null;
        // pick an UP host randomly - all should have latest compat version already if we passed the canDo.
        for (VDS vds : allForVdsGroup) {
            if (vds.getStatus() == VDSStatus.Up) {
                emulatedMachine = ListUtils.firstMatch(Config.<List<String>>getValue(ConfigValues.ClusterEmulatedMachines, getParameters().getVdsGroup().getcompatibility_version().getValue()), vds.getSupportedEmulatedMachines().split(","));
                break;
            }
        }
        if (emulatedMachine == null) {
            getParameters().getVdsGroup().setDetectEmulatedMachine(true);
        } else {
            getParameters().getVdsGroup().setEmulatedMachine(emulatedMachine);
        }
    }
    getVdsGroupDAO().update(getParameters().getVdsGroup());
    if ((oldGroup.getStoragePoolId() != null && !oldGroup.getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) || (oldGroup.getStoragePoolId() == null && getVdsGroup().getStoragePoolId() != null)) {
        for (VDS vds : allForVdsGroup) {
            VdsActionParameters parameters = new VdsActionParameters();
            parameters.setVdsId(vds.getId());
            VdcReturnValueBase addVdsSpmIdReturn = getBackend().runInternalAction(VdcActionType.AddVdsSpmId, parameters);
            if (!addVdsSpmIdReturn.getSucceeded()) {
                setSucceeded(false);
                getReturnValue().setFault(addVdsSpmIdReturn.getFault());
                return;
            }
        }
        if (oldGroup.getStoragePoolId() != null) {
            for (VDS vds : allForVdsGroup) {
                getVdsSpmIdMapDAO().removeByVdsAndStoragePool(vds.getId(), oldGroup.getStoragePoolId());
            }
        }
    }
    // when changing data center we check that default networks exists in
    // cluster
    List<Network> networks = getNetworkDAO().getAllForCluster(getVdsGroup().getId());
    boolean exists = false;
    String managementNetwork = NetworkUtils.getEngineNetwork();
    for (Network net : networks) {
        if (StringUtils.equals(net.getName(), managementNetwork)) {
            exists = true;
        }
    }
    if (!exists) {
        if (getVdsGroup().getStoragePoolId() != null) {
            List<Network> storagePoolNets = getNetworkDAO().getAllForDataCenter(getVdsGroup().getStoragePoolId());
            for (Network net : storagePoolNets) {
                if (StringUtils.equals(net.getName(), managementNetwork)) {
                    getNetworkClusterDAO().save(new NetworkCluster(getVdsGroup().getId(), net.getId(), NetworkStatus.OPERATIONAL, true, true, false));
                }
            }
        }
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean result = true;
    boolean hasVms = false;
    oldGroup = getVdsGroupDAO().get(getVdsGroup().getId());
    if (oldGroup == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        result = false;
    }
    // check that if name was changed, it was done to the same cluster
    if (result && !StringUtils.equals(oldGroup.getName(), getVdsGroup().getName())) {
        VDSGroup groupWithName = getVdsGroupDAO().getByName(getVdsGroup().getName());
        if (groupWithName != null && !groupWithName.getId().equals(getVdsGroup().getId())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DO_ACTION_NAME_IN_USE);
            result = false;
        }
    }
    // Check that the architecture type is equal
    if (result && getVdsGroup().getArchitecture() != null && StringUtils.isNotBlank(getVdsGroup().getcpu_name()) && !checkIfArchitectureAndCpuNameMatch(getVdsGroup())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_ARCHITECTURE_TYPE_INCOMPATIBLE);
        result = false;
    }
    if (result && !VersionSupport.checkVersionSupported(getVdsGroup().getcompatibility_version())) {
        addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
        result = false;
    }
    // decreasing of compatibility version is not allowed
    if (result && getVdsGroup().getcompatibility_version().compareTo(oldGroup.getcompatibility_version()) < 0) {
        result = false;
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION.toString());
    }
    if (result && oldGroup.getStoragePoolId() != null && !oldGroup.getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_CHANGE_STORAGE_POOL);
        result = false;
    }
    // If both original Cpu and new Cpu are null, don't check Cpu validity
    if (result) {
        allForVdsGroup = getVdsDAO().getAllForVdsGroup(oldGroup.getId());
    }
    // Validate the cpu only if the cluster supports Virt
    if (result && getVdsGroup().supportsVirtService() && (oldGroup.getcpu_name() != null || getVdsGroup().getcpu_name() != null)) {
        // Check that cpu exist
        if (!checkIfCpusExist()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CPU_NOT_FOUND);
            addCanDoActionMessage(VdcBllMessages.VAR__TYPE__CLUSTER);
            result = false;
        } else {
            // vds in this cluster, cannot update
            if (!StringUtils.isEmpty(oldGroup.getcpu_name()) && !checkIfCpusSameManufacture(oldGroup) && !allForVdsGroup.isEmpty()) {
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_ILLEGAL);
                result = false;
            }
            List<VM> allVmsForVdsGroup = getVmDAO().getAllForVdsGroup(oldGroup.getId());
            // cannot change the the processor architecture while there are attached hosts and VMs to the cluster
            if (result && !StringUtils.isEmpty(oldGroup.getcpu_name()) && !StringUtils.isEmpty(getVdsGroup().getcpu_name()) && !isSameArchitecture(oldGroup) && (!allForVdsGroup.isEmpty() || !allVmsForVdsGroup.isEmpty())) {
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_ARCHITECTURE_ILLEGAL);
                result = false;
            }
        }
    }
    boolean sameCpuNames = StringUtils.equals(oldGroup.getcpu_name(), getVdsGroup().getcpu_name());
    List<VM> vmList = getVmDAO().getAllForVdsGroup(oldGroup.getId());
    if (result && !sameCpuNames && !isCpuUpdatable(oldGroup) && (!vmList.isEmpty() || !allForVdsGroup.isEmpty())) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CPU_IS_NOT_UPDATABLE);
        result = false;
    }
    if (result) {
        List<VDS> vdss = new ArrayList<VDS>();
        boolean isAddedToStoragePool = oldGroup.getStoragePoolId() == null && getVdsGroup().getStoragePoolId() != null;
        for (VDS vds : allForVdsGroup) {
            if (vds.getStatus() == VDSStatus.Up) {
                if (isAddedToStoragePool) {
                    addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_VDS_UP);
                    return false;
                } else {
                    vdss.add(vds);
                }
            }
        }
        for (VDS vds : vdss) {
            if (!VersionSupport.checkClusterVersionSupported(getVdsGroup().getcompatibility_version(), vds)) {
                result = false;
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS);
                break;
            } else if (getVdsGroup().supportsVirtService() && missingServerCpuFlags(vds) != null) {
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_LOWER_HOSTS);
                result = false;
                break;
            }
        }
        if (result) {
            boolean notDownVms = false;
            boolean suspendedVms = false;
            hasVms = vmList.size() > 0;
            if (!sameCpuNames) {
                for (VM vm : vmList) {
                    if (vm.getStatus() == VMStatus.Suspended) {
                        suspendedVms = true;
                        break;
                    } else if (vm.getStatus() != VMStatus.Down) {
                        notDownVms = true;
                        break;
                    }
                }
                if (suspendedVms) {
                    addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_SUSPENDED_VMS);
                    result = false;
                } else if (notDownVms) {
                    int compareResult = compareCpuLevels(oldGroup);
                    if (compareResult < 0) {
                        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_LOWER_CPU_LEVEL);
                        result = false;
                    } else if (compareResult > 0) {
                        // Upgrade of CPU in same compability level is allowed if
                        // there
                        // are running VMs - but we should warn they
                        // cannot not be hibernated
                        AuditLogableBase logable = new AuditLogableBase();
                        logable.addCustomValue("VdsGroup", getParameters().getVdsGroup().getName());
                        AuditLogDirector.log(logable, AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE);
                    }
                }
            }
        }
    }
    if (result && getVdsGroup().getStoragePoolId() != null) {
        StoragePool storagePool = getStoragePoolDAO().get(getVdsGroup().getStoragePoolId());
        if (oldGroup.getStoragePoolId() == null && storagePool.getStorageType() == StorageType.LOCALFS) {
            // we allow only one cluster in localfs data center
            if (!getVdsGroupDAO().getAllForStoragePool(getVdsGroup().getStoragePoolId()).isEmpty()) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE.toString());
                result = false;
            } else if (VDSGroup.DEFAULT_VDS_GROUP_ID.equals(getVdsGroup().getId())) {
                addCanDoActionMessage(VdcBllMessages.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS);
                result = false;
            }
        }
    }
    if (getVdsGroup().getcompatibility_version() != null && Version.v3_3.compareTo(getVdsGroup().getcompatibility_version()) > 0 && getVdsGroup().isEnableBallooning()) {
        // Members of pre-3.3 clusters don't support ballooning; here we act like a 3.2 engine
        addCanDoActionMessage(VdcBllMessages.QOS_BALLOON_NOT_SUPPORTED);
        result = false;
    }
    if (getVdsGroup().supportsGlusterService() && !GlusterFeatureSupported.gluster(getVdsGroup().getcompatibility_version())) {
        addCanDoActionMessage(VdcBllMessages.GLUSTER_NOT_SUPPORTED);
        addCanDoActionMessage(String.format("$compatibilityVersion %1$s", getVdsGroup().getcompatibility_version().getValue()));
        result = false;
    }
    if (result) {
        if (!(getVdsGroup().supportsGlusterService() || getVdsGroup().supportsVirtService())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED);
            result = false;
        } else if (getVdsGroup().supportsGlusterService() && getVdsGroup().supportsVirtService() && !isAllowClusterWithVirtGluster()) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED);
            result = false;
        }
    }
    if (result && hasVms && !getVdsGroup().supportsVirtService()) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_VIRT_WHEN_CLUSTER_CONTAINS_VMS);
        result = false;
    }
    if (result && !getVdsGroup().supportsGlusterService()) {
        List<GlusterVolumeEntity> volumes = getGlusterVolumeDao().getByClusterId(getVdsGroup().getId());
        if (volumes != null && volumes.size() > 0) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES);
            result = false;
        }
    }
    if (result && getVdsGroup().supportsTrustedService() && Config.<String>GetValue(ConfigValues.AttestationServer).equals("")) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_SET_TRUSTED_ATTESTATION_SERVER_NOT_CONFIGURED);
        result = false;
    }
    if (result) {
        result = validateClusterPolicy();
    }
    return result;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean result = true;
    boolean hasVms = false;
    boolean hasVmOrHost = false;
    boolean sameCpuNames = false;
    List<VM> vmList = null;
    oldGroup = getVdsGroupDAO().get(getVdsGroup().getId());
    if (oldGroup == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        result = false;
    }
    // if the name was changed then make sure the new name is unique
    if (result && !StringUtils.equals(oldGroup.getName(), getVdsGroup().getName())) {
        if (!isVdsGroupUnique(getVdsGroup().getName())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DO_ACTION_NAME_IN_USE);
            result = false;
        }
    }
    if (result && !VersionSupport.checkVersionSupported(getVdsGroup().getcompatibility_version())) {
        addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
        result = false;
    }
    // decreasing of compatibility version is not allowed
    if (result && getVdsGroup().getcompatibility_version().compareTo(oldGroup.getcompatibility_version()) < 0) {
        result = false;
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION.toString());
    }
    if (result && oldGroup.getStoragePoolId() != null && !oldGroup.getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_CHANGE_STORAGE_POOL);
        result = false;
    }
    // If both original Cpu and new Cpu are null, don't check Cpu validity
    if (result) {
        allForVdsGroup = getVdsDAO().getAllForVdsGroup(oldGroup.getId());
    }
    // Validate the cpu only if the cluster supports Virt
    if (result && getVdsGroup().supportsVirtService() && (oldGroup.getcpu_name() != null || getVdsGroup().getcpu_name() != null)) {
        // Check that cpu exist
        if (!checkIfCpusExist()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CPU_NOT_FOUND);
            addCanDoActionMessage(VdcBllMessages.VAR__TYPE__CLUSTER);
            result = false;
        } else {
            // vds in this cluster, cannot update
            if (!StringUtils.isEmpty(oldGroup.getcpu_name()) && !checkIfCpusSameManufacture(oldGroup) && !allForVdsGroup.isEmpty()) {
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_ILLEGAL);
                result = false;
            }
        }
    }
    if (result) {
        vmList = getVmDAO().getAllForVdsGroup(oldGroup.getId());
        hasVmOrHost = !vmList.isEmpty() || !allForVdsGroup.isEmpty();
    }
    // cannot change the the processor architecture while there are attached hosts or VMs to the cluster
    if (result && getVdsGroup().supportsVirtService() && !isArchitectureUpdatable() && hasVmOrHost) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_ARCHITECTURE_ILLEGAL);
        result = false;
    }
    if (result) {
        sameCpuNames = StringUtils.equals(oldGroup.getcpu_name(), getVdsGroup().getcpu_name());
    }
    if (result) {
        boolean isOldCPUEmpty = StringUtils.isEmpty(oldGroup.getcpu_name());
        if (!isOldCPUEmpty && !sameCpuNames && !isCpuUpdatable(oldGroup) && hasVmOrHost) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CPU_IS_NOT_UPDATABLE);
            result = false;
        }
    }
    if (result) {
        List<VDS> vdss = new ArrayList<VDS>();
        boolean isAddedToStoragePool = oldGroup.getStoragePoolId() == null && getVdsGroup().getStoragePoolId() != null;
        for (VDS vds : allForVdsGroup) {
            if (vds.getStatus() == VDSStatus.Up) {
                if (isAddedToStoragePool) {
                    addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_VDS_UP);
                    return false;
                } else {
                    vdss.add(vds);
                }
            }
        }
        for (VDS vds : vdss) {
            if (!VersionSupport.checkClusterVersionSupported(getVdsGroup().getcompatibility_version(), vds)) {
                result = false;
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS);
                break;
            } else if (getVdsGroup().supportsVirtService() && missingServerCpuFlags(vds) != null) {
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_LOWER_HOSTS);
                result = false;
                break;
            }
        }
        if (result) {
            boolean notDownVms = false;
            boolean suspendedVms = false;
            hasVms = vmList.size() > 0;
            if (!sameCpuNames) {
                for (VM vm : vmList) {
                    if (vm.getStatus() == VMStatus.Suspended) {
                        suspendedVms = true;
                        break;
                    } else if (vm.getStatus() != VMStatus.Down) {
                        notDownVms = true;
                        break;
                    }
                }
                if (suspendedVms) {
                    addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_SUSPENDED_VMS);
                    result = false;
                } else if (notDownVms) {
                    int compareResult = compareCpuLevels(oldGroup);
                    if (compareResult > 0) {
                        // Upgrade of CPU in same compability level is allowed if
                        // there
                        // are running VMs - but we should warn they
                        // cannot not be hibernated
                        AuditLogableBase logable = new AuditLogableBase();
                        logable.addCustomValue("VdsGroup", getParameters().getVdsGroup().getName());
                        AuditLogDirector.log(logable, AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE);
                    }
                }
            }
        }
    }
    if (result && getVdsGroup().getStoragePoolId() != null) {
        StoragePool storagePool = getStoragePoolDAO().get(getVdsGroup().getStoragePoolId());
        if (oldGroup.getStoragePoolId() == null && storagePool.getStorageType() == StorageType.LOCALFS) {
            // we allow only one cluster in localfs data center
            if (!getVdsGroupDAO().getAllForStoragePool(getVdsGroup().getStoragePoolId()).isEmpty()) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE.toString());
                result = false;
            } else if (Config.getValue(ConfigValues.AutoRegistrationDefaultVdsGroupID).equals(getVdsGroup().getId())) {
                addCanDoActionMessage(VdcBllMessages.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS);
                result = false;
            }
        }
    }
    if (getVdsGroup().getcompatibility_version() != null && Version.v3_3.compareTo(getVdsGroup().getcompatibility_version()) > 0 && getVdsGroup().isEnableBallooning()) {
        // Members of pre-3.3 clusters don't support ballooning; here we act like a 3.2 engine
        addCanDoActionMessage(VdcBllMessages.QOS_BALLOON_NOT_SUPPORTED);
        result = false;
    }
    if (getVdsGroup().supportsGlusterService() && !GlusterFeatureSupported.gluster(getVdsGroup().getcompatibility_version())) {
        addCanDoActionMessage(VdcBllMessages.GLUSTER_NOT_SUPPORTED);
        addCanDoActionMessage(String.format("$compatibilityVersion %1$s", getVdsGroup().getcompatibility_version().getValue()));
        result = false;
    }
    if (result) {
        if (!(getVdsGroup().supportsGlusterService() || getVdsGroup().supportsVirtService())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED);
            result = false;
        } else if (getVdsGroup().supportsGlusterService() && getVdsGroup().supportsVirtService() && !isAllowClusterWithVirtGluster()) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED);
            result = false;
        }
    }
    if (result && hasVms && !getVdsGroup().supportsVirtService()) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_VIRT_WHEN_CLUSTER_CONTAINS_VMS);
        result = false;
    }
    if (result && !getVdsGroup().supportsGlusterService()) {
        List<GlusterVolumeEntity> volumes = getGlusterVolumeDao().getByClusterId(getVdsGroup().getId());
        if (volumes != null && volumes.size() > 0) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES);
            result = false;
        }
    }
    if (result && getVdsGroup().supportsTrustedService() && Config.<String>getValue(ConfigValues.AttestationServer).equals("")) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_SET_TRUSTED_ATTESTATION_SERVER_NOT_CONFIGURED);
        result = false;
    }
    if (result) {
        result = validateClusterPolicy();
    }
    return result;
}
#end_block

#method_before
public VDS getRandomUpServer(Guid clusterId) {
    List<VDS> servers = getAllUpServers(clusterId);
    if (servers == null || servers.isEmpty()) {
        return null;
    }
    return servers.get(0);
}
#method_after
public VDS getRandomUpServer(Guid clusterId) {
    List<VDS> servers = getAllUpServers(clusterId);
    if (servers == null || servers.isEmpty()) {
        return null;
    }
    return RandomUtils.instance().pickRandom(servers);
}
#end_block

#method_before
private boolean initGlusterPeerProcess() {
    // condition.
    try (EngineLock lock = GlusterUtil.getInstance().acquireGlusterLockWait(getVds().getVdsGroupId())) {
        glusterPeerListSucceeded = true;
        glusterPeerProbeSucceeded = true;
        Map<String, String> customLogValues = new HashMap<String, String>();
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(getVdsGroupId(), VDSStatus.Up);
        // If the cluster already having Gluster servers, get an up server
        if (vdsList != null && vdsList.size() > 0) {
            VDS upServer = null;
            for (VDS vds : vdsList) {
                if (!getVdsId().equals(vds.getId())) {
                    upServer = vds;
                    break;
                }
            }
            // If new server is not part of the existing gluster peers, add into peer group
            if (upServer != null) {
                List<GlusterServerInfo> glusterServers = getGlusterPeers(upServer.getId());
                customLogValues.put("Server", upServer.getHostName());
                if (glusterServers.size() == 0) {
                    customLogValues.put("Command", "gluster peer status");
                    setNonOperational(NonOperationalReason.GLUSTER_COMMAND_FAILED, customLogValues);
                    return false;
                } else if (!hostExists(glusterServers, getVds())) {
                    if (!glusterPeerProbe(upServer.getId(), getVds().getHostName())) {
                        customLogValues.put("Command", "gluster peer probe " + getVds().getHostName());
                        setNonOperational(NonOperationalReason.GLUSTER_COMMAND_FAILED, customLogValues);
                        return false;
                    }
                    // though gluster peer probe succeeds, it takes some time for the host to be
                    // listed as a peer. Return success only when the host is acknowledged as peer
                    // from another upServer.
                    VDS newUpServer = null;
                    for (VDS vds : vdsList) {
                        if (!getVdsId().equals(vds.getId()) && !upServer.getId().equals(vds.getId())) {
                            newUpServer = vds;
                            break;
                        }
                    }
                    if (newUpServer == null) {
                        // there's no other up server. so there's no issue with peer status results
                        return true;
                    }
                    List<GlusterServerInfo> newGlusterServers = getGlusterPeers(newUpServer.getId());
                    if (!hostExists(newGlusterServers, getVds())) {
                        // try once more?
                        customLogValues.put("Command", "gluster peer status " + getVds().getHostName());
                        setNonOperational(NonOperationalReason.GLUSTER_COMMAND_FAILED, customLogValues);
                        return false;
                    }
                }
            }
        }
        return true;
    }
}
#method_after
private boolean initGlusterPeerProcess() {
    // condition.
    try (EngineLock lock = GlusterUtil.getInstance().acquireGlusterLockWait(getVds().getVdsGroupId())) {
        glusterPeerListSucceeded = true;
        glusterPeerProbeSucceeded = true;
        Map<String, String> customLogValues = new HashMap<String, String>();
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(getVdsGroupId(), VDSStatus.Up);
        // If the cluster already having Gluster servers, get an up server
        if (vdsList != null && vdsList.size() > 0) {
            VDS upServer = null;
            for (VDS vds : vdsList) {
                if (!getVdsId().equals(vds.getId())) {
                    upServer = vds;
                    break;
                }
            }
            // If new server is not part of the existing gluster peers, add into peer group
            if (upServer != null) {
                List<GlusterServerInfo> glusterServers = getGlusterPeers(upServer.getId());
                customLogValues.put("Server", upServer.getHostName());
                if (glusterServers.size() == 0) {
                    customLogValues.put("Command", "gluster peer status");
                    setNonOperational(NonOperationalReason.GLUSTER_COMMAND_FAILED, customLogValues);
                    return false;
                } else if (!hostExists(glusterServers, getVds())) {
                    if (!glusterPeerProbe(upServer.getId(), getVds().getHostName())) {
                        customLogValues.put("Command", "gluster peer probe " + getVds().getHostName());
                        setNonOperational(NonOperationalReason.GLUSTER_COMMAND_FAILED, customLogValues);
                        return false;
                    }
                    int retries = 0;
                    while (retries < MAX_RETRIES_GLUSTER_PROBE_STATUS) {
                        // though gluster peer probe succeeds, it takes some time for the host to be
                        // listed as a peer. Return success only when the host is acknowledged as peer
                        // from another upServer.
                        VDS newUpServer = getNewUpServer(upServer);
                        if (newUpServer == null) {
                            // there's no other up server. so there's no issue with peer status results
                            return true;
                        }
                        List<GlusterServerInfo> newGlusterServers = getGlusterPeers(newUpServer.getId());
                        if (!hostExists(newGlusterServers, getVds())) {
                            log.infoFormat("Failed to find host {0} in gluster peer list from {1} on attempt {2}", getVds(), newUpServer, ++retries);
                            // if num of attempts done
                            if (retries == MAX_RETRIES_GLUSTER_PROBE_STATUS) {
                                customLogValues.put("Command", "gluster peer status " + getVds().getHostName());
                                setNonOperational(NonOperationalReason.GLUSTER_COMMAND_FAILED, customLogValues);
                                return false;
                            }
                            try {
                                // give time for gluster peer probe to propogate to servers.
                                Thread.sleep(1000);
                            } catch (Exception e) {
                                log.error(e.getMessage());
                                break;
                            }
                        } else {
                            return true;
                        }
                    }
                }
            }
        }
        return true;
    }
}
#end_block

#method_before
private boolean hostUuidExists(Guid addedServerUuid) {
    GlusterServerDao glusterServerDao = DbFacade.getInstance().getGlusterServerDao();
    GlusterServer glusterServer = glusterServerDao.getByGlusterServerUuid(addedServerUuid);
    if ((glusterServer == null) || (glusterServer != null && glusterServer.getId().equals(getVds().getId()))) {
        return false;
    }
    return true;
}
#method_after
private boolean hostUuidExists(Guid addedServerUuid) {
    GlusterServerDao glusterServerDao = DbFacade.getInstance().getGlusterServerDao();
    GlusterServer glusterServer = glusterServerDao.getByGlusterServerUuid(addedServerUuid);
    if (glusterServer == null || glusterServer.getId().equals(getVds().getId())) {
        return false;
    }
    return true;
}
#end_block

#method_before
protected VDS getUpServer() {
    return getClusterUtils().getUpServer(getVdsGroupId());
}
#method_after
protected VDS getUpServer() {
    return getClusterUtils().getRandomUpServer(getVdsGroupId());
}
#end_block

#method_before
public ValidationResult isModelCompatibleWithOs() {
    List<String> watchDogModels = getOsRepository().getWatchDogModels(osId, version);
    List<VmWatchdogType> vmWatchdogTypes = new ArrayList<VmWatchdogType>();
    for (String watchDogModel : watchDogModels) {
        vmWatchdogTypes.add(VmWatchdogType.getByName(watchDogModel));
    }
    return (!vmWatchdogTypes.contains(vmWatchdog.getModel())) ? new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_WATCHDOG_MODEL_IS_NOT_SUPPORTED_BY_OS) : ValidationResult.VALID;
}
#method_after
public ValidationResult isModelCompatibleWithOs() {
    Set<VmWatchdogType> vmWatchdogTypes = getOsRepository().getVmWatchdogTypes(osId, version);
    return (!vmWatchdogTypes.contains(vmWatchdog.getModel())) ? new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_WATCHDOG_MODEL_IS_NOT_SUPPORTED_BY_OS) : ValidationResult.VALID;
}
#end_block

#method_before
protected void updateVmDisks() {
    VmHandler.updateDisksFromDb(getVm());
    for (DiskImage diskImage : getVm().getDiskList()) {
        mImages.add(diskImage);
    }
}
#method_after
protected void updateVmDisks() {
    VmHandler.updateDisksFromDb(getVm());
    VmHandler.filterImageDisksForVM(getVm(), false, false, true);
    mImages.addAll(getVm().getDiskList());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // relevant only if template created from vm
    if (isVmInDb) {
        VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(getVmId());
        if (vmDynamic.getStatus() != VMStatus.Down) {
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
        VmHandler.lockVm(vmDynamic, getCompensationContext());
    }
    setActionReturnValue(Guid.Empty);
    setVmTemplateId(Guid.newGuid());
    getParameters().setVmTemplateId(getVmTemplateId());
    getParameters().setEntityInfo(new EntityInfo(VdcObjectType.VmTemplate, getVmTemplateId()));
    final Map<Guid, Guid> srcDeviceIdToTargetDeviceIdMapping = new HashMap<>();
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            addVmTemplateToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            addPermission();
            addVmTemplateImages(srcDeviceIdToTargetDeviceIdMapping);
            addVmInterfaces(srcDeviceIdToTargetDeviceIdMapping);
            if (isVmInDb) {
                VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), srcDeviceIdToTargetDeviceIdMapping, getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled(), getParameters().isVirtioScsiEnabled());
            } else {
                // sending true for isVm in order to create basic devices needed
                VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), getVm(), getVmTemplate(), true, Collections.<VmDevice>emptyList(), srcDeviceIdToTargetDeviceIdMapping, getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled(), getParameters().isVirtioScsiEnabled());
            }
            setSucceeded(true);
            return null;
        }
    });
    // means that there are no asynchronous tasks to execute and that we can
    // end the command synchronously
    boolean pendingAsyncTasks = !getReturnValue().getVdsmTaskIdList().isEmpty();
    if (!pendingAsyncTasks) {
        endSuccessfullySynchronous();
    }
}
#method_after
@Override
protected void executeCommand() {
    // relevant only if template created from vm
    if (isVmInDb) {
        VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(getVmId());
        if (vmDynamic.getStatus() != VMStatus.Down) {
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
        VmHandler.lockVm(vmDynamic, getCompensationContext());
    }
    setActionReturnValue(Guid.Empty);
    setVmTemplateId(Guid.newGuid());
    getParameters().setVmTemplateId(getVmTemplateId());
    getParameters().setEntityInfo(new EntityInfo(VdcObjectType.VmTemplate, getVmTemplateId()));
    final Map<Guid, Guid> srcDeviceIdToTargetDeviceIdMapping = new HashMap<>();
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            addVmTemplateToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            addPermission();
            addVmTemplateImages(srcDeviceIdToTargetDeviceIdMapping);
            addVmInterfaces(srcDeviceIdToTargetDeviceIdMapping);
            if (isVmInDb) {
                VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), srcDeviceIdToTargetDeviceIdMapping, getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled(), getParameters().isVirtioScsiEnabled(), false);
            } else {
                // sending true for isVm in order to create basic devices needed
                VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), getVm(), getVmTemplate(), true, Collections.<VmDevice>emptyList(), srcDeviceIdToTargetDeviceIdMapping, getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled(), getParameters().isVirtioScsiEnabled(), false);
            }
            setSucceeded(true);
            return null;
        }
    });
    VmHandler.warnMemorySizeLegal(getVmTemplate(), getVdsGroup().getcompatibility_version());
    // means that there are no asynchronous tasks to execute and that we can
    // end the command synchronously
    boolean pendingAsyncTasks = !getReturnValue().getVdsmTaskIdList().isEmpty();
    if (!pendingAsyncTasks) {
        endSuccessfullySynchronous();
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!VmHandler.isMemorySizeLegal(getParameters().getMasterVm().getOsId(), getParameters().getMasterVm().getMemSizeMb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        return false;
    }
    if (!isVmPriorityValueLegal(getParameters().getMasterVm().getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (isVmInDb && getVm().getStatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getUsbPolicy(), getParameters().getVm().getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getVm().getSingleQxlPci() && !VmHandler.isSingleQxlDeviceLegal(getParameters().getVm().getDefaultDisplayType(), getParameters().getVm().getOs(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        return false;
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    // Check if the watchdog model is supported
    if (getParameters().getWatchdog() != null) {
        if (!validate((new VmWatchdogValidator(getParameters().getMasterVm().getOsId(), getParameters().getWatchdog(), getVdsGroup().getcompatibility_version())).isModelCompatibleWithOs())) {
            return false;
        }
    }
    return imagesRelatedChecks() && AddVmCommand.checkCpuSockets(getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!VmHandler.isOsTypeSupported(getParameters().getMasterVm().getOsId(), getVdsGroup().getArchitecture(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (!isVmPriorityValueLegal(getParameters().getMasterVm().getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (isVmInDb && getVm().getStatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getUsbPolicy(), getParameters().getVm().getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getVm().getSingleQxlPci() && !VmHandler.isSingleQxlDeviceLegal(getParameters().getVm().getDefaultDisplayType(), getParameters().getVm().getOs(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        return false;
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    // Check if the watchdog model is supported
    if (getParameters().getWatchdog() != null) {
        if (!validate((new VmWatchdogValidator(getParameters().getMasterVm().getOsId(), getParameters().getWatchdog(), getVdsGroup().getcompatibility_version())).isModelCompatibleWithOs())) {
            return false;
        }
    }
    return imagesRelatedChecks() && AddVmCommand.checkCpuSockets(getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#end_block

#method_before
private boolean imagesRelatedChecks() {
    // images related checks
    if (!mImages.isEmpty()) {
        if (!getVm().getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
            addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
            return false;
        }
        if (!validateVmNotDuringSnapshot()) {
            return false;
        }
        if (!validate(new StoragePoolValidator(getStoragePool()).isUp())) {
            return false;
        }
        List<DiskImage> diskImagesToCheck = ImagesHandler.filterImageDisks(mImages, true, false);
        DiskImagesValidator diskImagesValidator = new DiskImagesValidator(diskImagesToCheck);
        if (!validate(diskImagesValidator.diskImagesNotIllegal()) || !validate(diskImagesValidator.diskImagesNotLocked())) {
            return false;
        }
        MultipleStorageDomainsValidator storageDomainsValidator = new MultipleStorageDomainsValidator(getStoragePoolId(), sourceImageDomainsImageMap.keySet());
        if (!validate(storageDomainsValidator.allDomainsExistAndActive())) {
            return false;
        }
        Map<Guid, StorageDomain> storageDomains = new HashMap<Guid, StorageDomain>();
        Set<Guid> destImageDomains = getStorageGuidSet();
        destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
        for (Guid destImageDomain : destImageDomains) {
            StorageDomain storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getStoragePoolId());
            if (storage == null) {
                // domain is not in the same storage pool as the vm
                if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
                } else {
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
                }
                return false;
            }
            if (storage.getStatus() == null || storage.getStatus() != StorageDomainStatus.Active) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
                return false;
            }
            if (storage.getStorageDomainType() == StorageDomainType.ImportExport || storage.getStorageDomainType() == StorageDomainType.ISO) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
                return false;
            }
            storageDomains.put(destImageDomain, storage);
        }
        // update vm snapshots for storage free space check
        ImagesHandler.fillImagesBySnapshots(getVm());
        Map<StorageDomain, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false), storageDomains, diskInfoDestinationMap);
        for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
            if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
                return false;
            }
        }
    }
    return true;
}
#method_after
private boolean imagesRelatedChecks() {
    // images related checks
    if (!mImages.isEmpty()) {
        if (!getVm().getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
            addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
            return false;
        }
        if (!validateVmNotDuringSnapshot()) {
            return false;
        }
        if (!validate(new StoragePoolValidator(getStoragePool()).isUp())) {
            return false;
        }
        List<DiskImage> diskImagesToCheck = ImagesHandler.filterImageDisks(mImages, true, false, true);
        DiskImagesValidator diskImagesValidator = new DiskImagesValidator(diskImagesToCheck);
        if (!validate(diskImagesValidator.diskImagesNotIllegal()) || !validate(diskImagesValidator.diskImagesNotLocked())) {
            return false;
        }
        MultipleStorageDomainsValidator storageDomainsValidator = new MultipleStorageDomainsValidator(getStoragePoolId(), sourceImageDomainsImageMap.keySet());
        if (!validate(storageDomainsValidator.allDomainsExistAndActive())) {
            return false;
        }
        Map<Guid, StorageDomain> storageDomains = new HashMap<Guid, StorageDomain>();
        Set<Guid> destImageDomains = getStorageGuidSet();
        destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
        for (Guid destImageDomain : destImageDomains) {
            StorageDomain storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getStoragePoolId());
            if (storage == null) {
                // domain is not in the same storage pool as the vm
                if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
                } else {
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
                }
                return false;
            }
            if (storage.getStatus() == null || storage.getStatus() != StorageDomainStatus.Active) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
                return false;
            }
            if (storage.getStorageDomainType() == StorageDomainType.ImportExport || storage.getStorageDomainType() == StorageDomainType.ISO) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
                return false;
            }
            storageDomains.put(destImageDomain, storage);
        }
        // update vm snapshots for storage free space check
        ImagesHandler.fillImagesBySnapshots(getVm());
        Map<StorageDomain, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false, true), storageDomains, diskInfoDestinationMap);
        for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
            if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
                return false;
            }
        }
    }
    return true;
}
#end_block

#method_before
protected void addVmTemplateToDb() {
    // TODO: add timezone handling
    setVmTemplate(new VmTemplate(0, new Date(), getParameters().getDescription(), getParameters().getMasterVm().getMemSizeMb(), getVmTemplateName(), getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getParameters().getMasterVm().getOsId(), getParameters().getMasterVm().getVdsGroupId(), getVmTemplateId(), getParameters().getMasterVm().getDomain(), getParameters().getMasterVm().getNumOfMonitors(), getParameters().getMasterVm().getSingleQxlPci(), VmTemplateStatus.Locked.getValue(), getParameters().getMasterVm().getUsbPolicy().getValue(), getParameters().getMasterVm().getTimeZone(), getParameters().getMasterVm().getNiceLevel(), getParameters().getMasterVm().getCpuShares(), getParameters().getMasterVm().isFailBack(), getParameters().getMasterVm().getDefaultBootSequence(), getParameters().getMasterVm().getVmType(), getParameters().getMasterVm().isSmartcardEnabled(), getParameters().getMasterVm().isDeleteProtected(), getParameters().getMasterVm().getTunnelMigration(), getParameters().getMasterVm().getVncKeyboardLayout(), getParameters().getMasterVm().getMinAllocatedMem(), getParameters().getMasterVm().isStateless(), getParameters().getMasterVm().isRunAndPause(), getUserId()));
    getVmTemplate().setAutoStartup(getParameters().getMasterVm().isAutoStartup());
    getVmTemplate().setPriority(getParameters().getMasterVm().getPriority());
    getVmTemplate().setDefaultDisplayType(getParameters().getMasterVm().getDefaultDisplayType());
    getVmTemplate().setInitrdUrl(getParameters().getMasterVm().getInitrdUrl());
    getVmTemplate().setKernelUrl(getParameters().getMasterVm().getKernelUrl());
    getVmTemplate().setKernelParams(getParameters().getMasterVm().getKernelParams());
    getVmTemplate().setQuotaId(getParameters().getMasterVm().getQuotaId());
    getVmTemplate().setDedicatedVmForVds(getParameters().getMasterVm().getDedicatedVmForVds());
    getVmTemplate().setMigrationSupport(getParameters().getMasterVm().getMigrationSupport());
    getVmTemplate().setAllowConsoleReconnect(getParameters().getMasterVm().isAllowConsoleReconnect());
    getVmTemplate().setIsoPath(getParameters().getMasterVm().getIsoPath());
    DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate());
    getCompensationContext().snapshotNewEntity(getVmTemplate());
    setActionReturnValue(getVmTemplate().getId());
}
#method_after
protected void addVmTemplateToDb() {
    // TODO: add timezone handling
    setVmTemplate(new VmTemplate(0, new Date(), getParameters().getDescription(), getParameters().getMasterVm().getMemSizeMb(), getVmTemplateName(), getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getParameters().getMasterVm().getOsId(), getParameters().getMasterVm().getVdsGroupId(), getVmTemplateId(), getParameters().getMasterVm().getDomain(), getParameters().getMasterVm().getNumOfMonitors(), getParameters().getMasterVm().getSingleQxlPci(), VmTemplateStatus.Locked.getValue(), getParameters().getMasterVm().getUsbPolicy().getValue(), getParameters().getMasterVm().getTimeZone(), getParameters().getMasterVm().getNiceLevel(), getParameters().getMasterVm().getCpuShares(), getParameters().getMasterVm().isFailBack(), getParameters().getMasterVm().getDefaultBootSequence(), getParameters().getMasterVm().getVmType(), getParameters().getMasterVm().isSmartcardEnabled(), getParameters().getMasterVm().isDeleteProtected(), getParameters().getMasterVm().getSsoMethod(), getParameters().getMasterVm().getTunnelMigration(), getParameters().getMasterVm().getVncKeyboardLayout(), getParameters().getMasterVm().getMinAllocatedMem(), getParameters().getMasterVm().isStateless(), getParameters().getMasterVm().isRunAndPause(), getUserId(), getParameters().getTemplateType()));
    getVmTemplate().setAutoStartup(getParameters().getMasterVm().isAutoStartup());
    getVmTemplate().setPriority(getParameters().getMasterVm().getPriority());
    getVmTemplate().setDefaultDisplayType(getParameters().getMasterVm().getDefaultDisplayType());
    getVmTemplate().setInitrdUrl(getParameters().getMasterVm().getInitrdUrl());
    getVmTemplate().setKernelUrl(getParameters().getMasterVm().getKernelUrl());
    getVmTemplate().setKernelParams(getParameters().getMasterVm().getKernelParams());
    getVmTemplate().setQuotaId(getParameters().getMasterVm().getQuotaId());
    getVmTemplate().setDedicatedVmForVds(getParameters().getMasterVm().getDedicatedVmForVds());
    getVmTemplate().setMigrationSupport(getParameters().getMasterVm().getMigrationSupport());
    getVmTemplate().setAllowConsoleReconnect(getParameters().getMasterVm().isAllowConsoleReconnect());
    getVmTemplate().setIsoPath(getParameters().getMasterVm().getIsoPath());
    DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate());
    getCompensationContext().snapshotNewEntity(getVmTemplate());
    setActionReturnValue(getVmTemplate().getId());
}
#end_block

#method_before
@Override
protected void endSuccessfully() {
    setVmTemplateId(getParameters().getVmTemplateId());
    setVmId(getVmIdFromImageParameters());
    isVmInDb = getVm() != null;
    getVmStaticDAO().incrementDbGeneration(getVmTemplateId());
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        Backend.getInstance().EndAction(VdcActionType.CreateImageTemplate, p);
    }
    if (reloadVmTemplateFromDB() != null) {
        endDefaultOperations();
    }
    checkTrustedService();
    setSucceeded(true);
}
#method_after
@Override
protected void endSuccessfully() {
    setVmTemplateId(getParameters().getVmTemplateId());
    setVmId(getVmIdFromImageParameters());
    isVmInDb = getVm() != null;
    getVmStaticDAO().incrementDbGeneration(getVmTemplateId());
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        Backend.getInstance().endAction(VdcActionType.CreateImageTemplate, p);
    }
    if (reloadVmTemplateFromDB() != null) {
        endDefaultOperations();
    }
    checkTrustedService();
    setSucceeded(true);
}
#end_block

#method_before
private void endUnlockOps() {
    if (isVmInDb) {
        VmHandler.unLockVm(getVm());
    }
    VmTemplateHandler.UnLockVmTemplate(getVmTemplateId());
}
#method_after
private void endUnlockOps() {
    if (isVmInDb) {
        VmHandler.unLockVm(getVm());
    }
    VmTemplateHandler.unlockVmTemplate(getVmTemplateId());
}
#end_block

#method_before
@Override
protected void endWithFailure() {
    // We evaluate 'VmTemplate' so it won't be null in the last 'if'
    // statement.
    // (a template without images doesn't exist in the 'vm_template_view').
    setVmTemplateId(getParameters().getVmTemplateId());
    setVmId(getVmIdFromImageParameters());
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        p.setTaskGroupSuccess(false);
        Backend.getInstance().EndAction(VdcActionType.CreateImageTemplate, p);
    }
    // if template exist in db remove it
    if (getVmTemplate() != null) {
        DbFacade.getInstance().getVmTemplateDao().remove(getVmTemplateId());
        removeNetwork();
    }
    if (!getVmId().equals(Guid.Empty) && getVm() != null) {
        VmHandler.unLockVm(getVm());
    }
    setSucceeded(true);
}
#method_after
@Override
protected void endWithFailure() {
    // We evaluate 'VmTemplate' so it won't be null in the last 'if'
    // statement.
    // (a template without images doesn't exist in the 'vm_template_view').
    setVmTemplateId(getParameters().getVmTemplateId());
    setVmId(getVmIdFromImageParameters());
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        p.setTaskGroupSuccess(false);
        Backend.getInstance().endAction(VdcActionType.CreateImageTemplate, p);
    }
    // if template exist in db remove it
    if (getVmTemplate() != null) {
        DbFacade.getInstance().getVmTemplateDao().remove(getVmTemplateId());
        removeNetwork();
    }
    if (!getVmId().equals(Guid.Empty) && getVm() != null) {
        VmHandler.unLockVm(getVm());
    }
    setSucceeded(true);
}
#end_block

#method_before
private void addPermission() {
    UniquePermissionsSet permissionsToAdd = new UniquePermissionsSet();
    addPermissionForTemplate(permissionsToAdd, getCurrentUser().getUserId(), PredefinedRoles.TEMPLATE_OWNER);
    // if the template is for public use, set EVERYONE as a TEMPLATE_USER.
    if (getParameters().isPublicUse()) {
        addPermissionForTemplate(permissionsToAdd, MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID, PredefinedRoles.TEMPLATE_USER);
    } else {
        addPermissionForTemplate(permissionsToAdd, getCurrentUser().getUserId(), PredefinedRoles.TEMPLATE_USER);
    }
    copyVmPermissions(permissionsToAdd);
    if (!permissionsToAdd.isEmpty()) {
        List<permissions> permissionsList = permissionsToAdd.asPermissionList();
        MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new permissions[permissionsList.size()]));
    }
}
#method_after
private void addPermission() {
    UniquePermissionsSet permissionsToAdd = new UniquePermissionsSet();
    addPermissionForTemplate(permissionsToAdd, getCurrentUser().getId(), PredefinedRoles.TEMPLATE_OWNER);
    // if the template is for public use, set EVERYONE as a TEMPLATE_USER.
    if (getParameters().isPublicUse()) {
        addPermissionForTemplate(permissionsToAdd, MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID, PredefinedRoles.TEMPLATE_USER);
    } else {
        addPermissionForTemplate(permissionsToAdd, getCurrentUser().getId(), PredefinedRoles.TEMPLATE_USER);
    }
    copyVmPermissions(permissionsToAdd);
    if (!permissionsToAdd.isEmpty()) {
        List<Permissions> permissionsList = permissionsToAdd.asPermissionList();
        MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new Permissions[permissionsList.size()]));
    }
}
#end_block

#method_before
private void copyVmPermissions(UniquePermissionsSet permissionsToAdd) {
    if (!isVmInDb || !getParameters().isCopyVmPermissions()) {
        return;
    }
    PermissionDAO dao = getDbFacade().getPermissionDao();
    List<permissions> vmPermissions = dao.getAllForEntity(getVmId(), getCurrentUser().getUserId(), false);
    for (permissions vmPermission : vmPermissions) {
        permissionsToAdd.addPermission(vmPermission.getad_element_id(), vmPermission.getrole_id(), getParameters().getVmTemplateId(), VdcObjectType.VmTemplate);
    }
}
#method_after
private void copyVmPermissions(UniquePermissionsSet permissionsToAdd) {
    if (!isVmInDb || !getParameters().isCopyVmPermissions()) {
        return;
    }
    PermissionDAO dao = getDbFacade().getPermissionDao();
    List<Permissions> vmPermissions = dao.getAllForEntity(getVmId(), getCurrentUser().getId(), false);
    for (Permissions vmPermission : vmPermissions) {
        permissionsToAdd.addPermission(vmPermission.getad_element_id(), vmPermission.getrole_id(), getParameters().getVmTemplateId(), VdcObjectType.VmTemplate);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getParameters().getId() == null || !entityExists()) {
        return failCanDoAction(getParameters().isVm() ? VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND : VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (!entityExists()) {
        return failCanDoAction(getParameters().isVm() ? VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND : VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    return true;
}
#end_block

#method_before
protected boolean entityExists() {
    if (getParameters().isVm()) {
        return getVmDAO().get(getParameters().getId()) != null;
    } else {
        return getVmTemplateDAO().get(getParameters().getId()) != null;
    }
}
#method_after
protected boolean entityExists() {
    if (getParameters().isVm()) {
        setVmId(getParameters().getId());
        return getVm() != null;
    } else {
        setVmTemplateId(getParameters().getId());
        return getVmTemplate() != null;
    }
}
#end_block

#method_before
protected VmWatchdogValidator getVmWatchdogValidator() {
    VmWatchdogValidator vmWatchdogValidator = null;
    VmWatchdog watchdog = new VmWatchdog();
    watchdog.setAction(getParameters().getAction());
    watchdog.setModel(getParameters().getModel());
    watchdog.setVmId(getParameters().getId());
    if (getParameters().isVm()) {
        VM vm = getVmDAO().get(getParameters().getId());
        vmWatchdogValidator = new VmWatchdogValidator(vm.getOs(), watchdog, vm.getVdsGroupCompatibilityVersion());
    } else {
        VmTemplate vmTemplate = getVmTemplateDAO().get(getParameters().getId());
        vmWatchdogValidator = new VmWatchdogValidator(vmTemplate.getOsId(), watchdog, (getVdsGroupDAO().get(vmTemplate.getVdsGroupId())).getcompatibility_version());
    }
    return vmWatchdogValidator;
}
#method_after
protected VmWatchdogValidator getVmWatchdogValidator() {
    VmWatchdogValidator vmWatchdogValidator = null;
    VmWatchdog watchdog = new VmWatchdog();
    watchdog.setAction(getParameters().getAction());
    watchdog.setModel(getParameters().getModel());
    watchdog.setVmId(getParameters().getId());
    if (getParameters().isVm()) {
        vmWatchdogValidator = new VmWatchdogValidator(getVm().getOs(), watchdog, getVm().getVdsGroupCompatibilityVersion());
    } else {
        vmWatchdogValidator = new VmWatchdogValidator(getVmTemplate().getOsId(), watchdog, (getVdsGroupDAO().get(getVmTemplate().getVdsGroupId())).getcompatibility_version());
    }
    return vmWatchdogValidator;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (VmTemplateHandler.BlankVmTemplateId.equals(getVmTemplate().getId())) {
        return failCanDoAction(VdcBllMessages.VMT_CANNOT_EDIT_BLANK_TEMPLATE);
    }
    boolean returnValue = false;
    mOldTemplate = DbFacade.getInstance().getVmTemplateDao().get(getVmTemplate().getId());
    if (mOldTemplate == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    VmTemplateHandler.UpdateDisksFromDb(mOldTemplate);
    if (mOldTemplate.getStatus() == VmTemplateStatus.Locked) {
        return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IS_LOCKED);
    }
    if (!StringUtils.equals(mOldTemplate.getName(), getVmTemplate().getName()) && isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
    } else {
        if (getVdsGroup() == null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CLUSTER_IS_NOT_VALID);
        } else if (VmHandler.isMemorySizeLegal(mOldTemplate.getOsId(), mOldTemplate.getMemSizeMb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
            if (isVmPriorityValueLegal(getParameters().getVmTemplateData().getPriority(), getReturnValue().getCanDoActionMessages()) && isDomainLegal(getParameters().getVmTemplateData().getDomain(), getReturnValue().getCanDoActionMessages())) {
                returnValue = VmTemplateHandler.isUpdateValid(mOldTemplate, getVmTemplate());
                if (!returnValue) {
                    addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_UPDATE_ILLEGAL_FIELD);
                }
            }
        }
    }
    // Check that the USB policy is legal
    if (returnValue) {
        returnValue = VmHandler.isUsbPolicyLegal(getParameters().getVmTemplateData().getUsbPolicy(), getParameters().getVmTemplateData().getOsId(), getVdsGroup(), getReturnValue().getCanDoActionMessages());
    }
    // Check if the watchdog model is supported
    if (returnValue) {
        returnValue = validate((new VmWatchdogValidator(getParameters().getVmTemplateData().getOsId(), getParameters().getWatchdog(), getVdsGroup().getcompatibility_version())).isModelCompatibleWithOs());
    }
    if (returnValue) {
        returnValue = AddVmCommand.checkCpuSockets(getParameters().getVmTemplateData().getNumOfSockets(), getParameters().getVmTemplateData().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
    }
    if (returnValue && getParameters().getVmTemplateData().getSingleQxlPci() && !VmHandler.isSingleQxlDeviceLegal(getParameters().getVmTemplateData().getDefaultDisplayType(), getParameters().getVmTemplateData().getOsId(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        returnValue = false;
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVmTemplate().getId())) {
        return failCanDoAction(VdcBllMessages.VMT_CANNOT_EDIT_BLANK_TEMPLATE);
    }
    boolean returnValue = false;
    mOldTemplate = DbFacade.getInstance().getVmTemplateDao().get(getVmTemplate().getId());
    if (mOldTemplate == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    VmTemplateHandler.updateDisksFromDb(mOldTemplate);
    if (mOldTemplate.getStatus() == VmTemplateStatus.Locked) {
        return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IS_LOCKED);
    }
    if (!StringUtils.equals(mOldTemplate.getName(), getVmTemplate().getName()) && isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
    } else {
        if (getVdsGroup() == null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CLUSTER_IS_NOT_VALID);
        } else if (isVmPriorityValueLegal(getParameters().getVmTemplateData().getPriority(), getReturnValue().getCanDoActionMessages()) && isDomainLegal(getParameters().getVmTemplateData().getDomain(), getReturnValue().getCanDoActionMessages())) {
            returnValue = VmTemplateHandler.isUpdateValid(mOldTemplate, getVmTemplate());
            if (!returnValue) {
                addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_UPDATE_ILLEGAL_FIELD);
            }
        }
    }
    // Check that the USB policy is legal
    if (returnValue) {
        returnValue = VmHandler.isUsbPolicyLegal(getParameters().getVmTemplateData().getUsbPolicy(), getParameters().getVmTemplateData().getOsId(), getVdsGroup(), getReturnValue().getCanDoActionMessages());
    }
    // Check if the OS type is supported
    if (returnValue) {
        returnValue = VmHandler.isOsTypeSupported(getParameters().getVmTemplateData().getOsId(), getVdsGroup().getArchitecture(), getReturnValue().getCanDoActionMessages());
    }
    // Check if the watchdog model is supported
    if (returnValue) {
        returnValue = validate((new VmWatchdogValidator(getParameters().getVmTemplateData().getOsId(), getParameters().getWatchdog(), getVdsGroup().getcompatibility_version())).isModelCompatibleWithOs());
    }
    if (returnValue) {
        returnValue = AddVmCommand.checkCpuSockets(getParameters().getVmTemplateData().getNumOfSockets(), getParameters().getVmTemplateData().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
    }
    if (returnValue && getParameters().getVmTemplateData().getSingleQxlPci() && !VmHandler.isSingleQxlDeviceLegal(getParameters().getVmTemplateData().getDefaultDisplayType(), getParameters().getVmTemplateData().getOsId(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        returnValue = false;
    }
    return returnValue;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    if (getVmTemplate() != null) {
        getVmStaticDAO().incrementDbGeneration(getVmTemplate().getId());
        UpdateVmTemplate();
        updateWatchdog();
        checkTrustedService();
        setSucceeded(true);
    }
}
#method_after
@Override
protected void executeCommand() {
    VmHandler.warnMemorySizeLegal(getParameters().getVmTemplateData(), getVdsGroup().getcompatibility_version());
    if (getVmTemplate() != null) {
        getVmStaticDAO().incrementDbGeneration(getVmTemplate().getId());
        updateOriginalTemplateNameOnDerivedVms();
        UpdateVmTemplate();
        updateWatchdog();
        checkTrustedService();
        setSucceeded(true);
    }
}
#end_block

#method_before
@Test
public void testCanDoAction() {
    WatchdogParameters params = new WatchdogParameters();
    Guid vmGuid = new Guid("a09f57b1-5739-4352-bf88-a6f834ed46db");
    params.setId(vmGuid);
    params.setAction(VmWatchdogAction.PAUSE);
    params.setModel(vmWatchdogType);
    final VmDAO vmDaoMock = mock(VmDAO.class);
    when(vmDaoMock.get(vmGuid)).thenReturn(new VM());
    final VmDeviceDAO deviceDAO = mock(VmDeviceDAO.class);
    when(deviceDAO.getVmDeviceByVmIdAndType(vmGuid, VmDeviceGeneralType.WATCHDOG)).thenReturn(Collections.singletonList(new VmDevice()));
    UpdateWatchdogCommand command = new UpdateWatchdogCommand(params) {

        @Override
        public VmDAO getVmDAO() {
            return vmDaoMock;
        }

        @Override
        protected VmDeviceDAO getVmDeviceDao() {
            return deviceDAO;
        }
    };
    OsRepository osRepository = mock(OsRepository.class);
    SimpleDependecyInjector.getInstance().bind(OsRepository.class, osRepository);
    when(osRepository.getWatchDogModels(any(Integer.class), any(Version.class))).thenReturn(WATCHDOG_MODELS);
    VmWatchdog vmWatchdog = spy(new VmWatchdog());
    when(vmWatchdog.getModel()).thenReturn(vmWatchdogType);
    Assert.assertTrue(command.canDoAction());
}
#method_after
@Test
public void testCanDoAction() {
    WatchdogParameters params = new WatchdogParameters();
    Guid vmGuid = new Guid("a09f57b1-5739-4352-bf88-a6f834ed46db");
    params.setId(vmGuid);
    params.setAction(VmWatchdogAction.PAUSE);
    params.setModel(vmWatchdogType);
    final VmDAO vmDaoMock = mock(VmDAO.class);
    when(vmDaoMock.get(vmGuid)).thenReturn(new VM());
    final VmDeviceDAO deviceDAO = mock(VmDeviceDAO.class);
    when(deviceDAO.getVmDeviceByVmIdAndType(vmGuid, VmDeviceGeneralType.WATCHDOG)).thenReturn(Collections.singletonList(new VmDevice()));
    UpdateWatchdogCommand command = new UpdateWatchdogCommand(params) {

        @Override
        public VmDAO getVmDAO() {
            return vmDaoMock;
        }

        @Override
        protected VmDeviceDAO getVmDeviceDao() {
            return deviceDAO;
        }
    };
    OsRepository osRepository = mock(OsRepository.class);
    SimpleDependecyInjector.getInstance().bind(OsRepository.class, osRepository);
    when(osRepository.getVmWatchdogTypes(any(Integer.class), any(Version.class))).thenReturn(WATCHDOG_MODELS);
    VmWatchdog vmWatchdog = spy(new VmWatchdog());
    when(vmWatchdog.getModel()).thenReturn(vmWatchdogType);
    Assert.assertTrue(command.canDoAction());
}
#end_block

#method_before
@Override
protected void executeVmCommand() {
    oldVm = getVm();
    getVmStaticDAO().incrementDbGeneration(getVm().getId());
    VmStatic newVmStatic = getParameters().getVmStaticData();
    newVmStatic.setCreationDate(oldVm.getStaticData().getCreationDate());
    if (newVmStatic.getCreationDate().equals(DateTime.getMinValue())) {
        newVmStatic.setCreationDate(new Date());
    }
    UpdateVmNetworks();
    getVmStaticDAO().update(newVmStatic);
    updateVmPayload();
    VmDeviceUtils.updateVmDevices(getParameters(), oldVm);
    updateWatchdog();
    checkTrustedService();
    setSucceeded(true);
}
#method_after
@Override
protected void executeVmCommand() {
    oldVm = getVm();
    VmHandler.warnMemorySizeLegal(getParameters().getVm().getStaticData(), getVdsGroup().getcompatibility_version());
    getVmStaticDAO().incrementDbGeneration(getVm().getId());
    VmStatic newVmStatic = getParameters().getVmStaticData();
    newVmStatic.setCreationDate(oldVm.getStaticData().getCreationDate());
    if (newVmStatic.getCreationDate().equals(DateTime.getMinValue())) {
        newVmStatic.setCreationDate(new Date());
    }
    UpdateVmNetworks();
    getVmStaticDAO().update(newVmStatic);
    updateVmPayload();
    VmDeviceUtils.updateVmDevices(getParameters(), oldVm);
    updateWatchdog();
    checkTrustedService();
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    VM vmFromDB = getVm();
    VM vmFromParams = getParameters().getVm();
    if (!isVmExist()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    }
    if (!canRunActionOnNonManagedVm()) {
        return false;
    }
    if (StringUtils.isEmpty(vmFromParams.getName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
        return false;
    }
    // check that VM name is not too long
    boolean vmNameValidLength = isVmNameValidLength(vmFromParams);
    if (!vmNameValidLength) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
        return false;
    }
    // Checking if a desktop with same name already exists
    if (!StringUtils.equals(vmFromDB.getName(), vmFromParams.getName())) {
        boolean exists = isVmWithSameNameExists(vmFromParams.getName());
        if (exists) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
            return false;
        }
    }
    List<ValidationError> validationErrors = validateCustomProperties(vmFromParams.getStaticData());
    if (!validationErrors.isEmpty()) {
        VmPropertiesUtils.getInstance().handleCustomPropertiesError(validationErrors, getReturnValue().getCanDoActionMessages());
        return false;
    }
    if (!VmHandler.isMemorySizeLegal(vmFromParams.getOs(), vmFromParams.getMemSizeMb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        return false;
    }
    if (vmFromParams.getSingleQxlPci() && !VmHandler.isSingleQxlDeviceLegal(vmFromParams.getDefaultDisplayType(), vmFromParams.getOs(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        return false;
    }
    if (!areUpdatedFieldsLegal()) {
        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_ILLEGAL_FIELD);
        return false;
    }
    if (!vmFromDB.getVdsGroupId().equals(vmFromParams.getVdsGroupId())) {
        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_CLUSTER);
        return false;
    }
    if (!isDedicatedVdsOnSameCluster(vmFromParams.getStaticData())) {
        return false;
    }
    // Check if number of monitors passed is legal
    if (!VmHandler.isNumOfMonitorsLegal(vmFromParams.getDefaultDisplayType(), vmFromParams.getNumOfMonitors(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // if number of monitors has increased, check PCI and IDE limits are ok
    if (vmFromDB.getNumOfMonitors() < vmFromParams.getNumOfMonitors()) {
        List<Disk> allDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getVmId());
        List<VmNic> interfaces = getVmNicDao().getAllForVm(getVmId());
        if (!checkPciAndIdeLimit(vmFromParams.getNumOfMonitors(), interfaces, allDisks, isVirtioScsiEnabled(), getReturnValue().getCanDoActionMessages())) {
            return false;
        }
    }
    if (!VmTemplateCommand.isVmPriorityValueLegal(vmFromParams.getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (vmFromDB.getVmPoolId() != null && vmFromParams.isStateless()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
        return false;
    }
    if (!AddVmCommand.checkCpuSockets(vmFromParams.getNumOfSockets(), vmFromParams.getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (!checkPayload(getParameters().getVmPayload(), vmFromParams.getIsoPath())) {
            return false;
        }
        // we save the content in base64 string
        for (Map.Entry<String, String> entry : getParameters().getVmPayload().getFiles().entrySet()) {
            entry.setValue(Base64.encodeBase64String(entry.getValue().getBytes()));
        }
    }
    // check for Vm Watchdog Model
    if (getParameters().getWatchdog() != null) {
        if (!validate((new VmWatchdogValidator(vmFromParams.getOs(), getParameters().getWatchdog(), getVdsGroup().getcompatibility_version())).isModelCompatibleWithOs())) {
            return false;
        }
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(vmFromParams.getUsbPolicy(), vmFromParams.getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check cpuPinning
    if (!isCpuPinningValid(vmFromParams.getCpuPinning(), vmFromParams.getStaticData())) {
        return false;
    }
    if (!validatePinningAndMigration(getReturnValue().getCanDoActionMessages(), getParameters().getVm().getStaticData(), getParameters().getVm().getCpuPinning())) {
        return false;
    }
    if (vmFromParams.isUseHostCpuFlags() && vmFromParams.getMigrationSupport() == MigrationSupport.MIGRATABLE) {
        return failCanDoAction(VdcBllMessages.VM_HOSTCPU_MUST_BE_PINNED_TO_HOST);
    }
    if (getParameters().isConsoleEnabled() != null && !getVm().isDown() && vmDeviceChanged(VmDeviceGeneralType.CONSOLE, getParameters().isConsoleEnabled())) {
        addCanDoActionMessage("$device console");
        return failCanDoAction(VdcBllMessages.VM_CANNOT_UPDATE_DEVICE_VM_NOT_DOWN);
    }
    if (getParameters().isSoundDeviceEnabled() != null && !getVm().isDown() && vmDeviceChanged(VmDeviceGeneralType.SOUND, getParameters().isSoundDeviceEnabled())) {
        addCanDoActionMessage("$device sound");
        return failCanDoAction(VdcBllMessages.VM_CANNOT_UPDATE_DEVICE_VM_NOT_DOWN);
    }
    if (!isCpuSharesValid(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.QOS_CPU_SHARES_OUT_OF_RANGE);
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    if (Boolean.FALSE.equals(getParameters().isVirtioScsiEnabled())) {
        List<Disk> allDisks = getDiskDao().getAllForVm(getVmId(), true);
        for (Disk disk : allDisks) {
            if (disk.getDiskInterface() == DiskInterface.VirtIO_SCSI) {
                return failCanDoAction(VdcBllMessages.CANNOT_DISABLE_VIRTIO_SCSI_PLUGGED_DISKS);
            }
        }
    }
    if (getParameters().isVirtioScsiEnabled() != null && !getVm().isDown() && vmDeviceChanged(VmDeviceGeneralType.CONTROLLER, getParameters().isVirtioScsiEnabled())) {
        addCanDoActionMessage("$device VirtIO-SCSI");
        return failCanDoAction(VdcBllMessages.VM_CANNOT_UPDATE_DEVICE_VM_NOT_DOWN);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    VM vmFromDB = getVm();
    VM vmFromParams = getParameters().getVm();
    if (!isVmExist()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    }
    if (!canRunActionOnNonManagedVm()) {
        return false;
    }
    if (StringUtils.isEmpty(vmFromParams.getName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
        return false;
    }
    // check that VM name is not too long
    boolean vmNameValidLength = isVmNameValidLength(vmFromParams);
    if (!vmNameValidLength) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
        return false;
    }
    // Checking if a desktop with same name already exists
    if (!StringUtils.equals(vmFromDB.getName(), vmFromParams.getName())) {
        boolean exists = isVmWithSameNameExists(vmFromParams.getName());
        if (exists) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
            return false;
        }
    }
    List<ValidationError> validationErrors = validateCustomProperties(vmFromParams.getStaticData());
    if (!validationErrors.isEmpty()) {
        VmPropertiesUtils.getInstance().handleCustomPropertiesError(validationErrors, getReturnValue().getCanDoActionMessages());
        return false;
    }
    if (!VmHandler.isOsTypeSupported(vmFromParams.getOs(), getVdsGroup().getArchitecture(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (vmFromParams.getSingleQxlPci() && !VmHandler.isSingleQxlDeviceLegal(vmFromParams.getDefaultDisplayType(), vmFromParams.getOs(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        return false;
    }
    if (!areUpdatedFieldsLegal()) {
        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_ILLEGAL_FIELD);
        return false;
    }
    if (!vmFromDB.getVdsGroupId().equals(vmFromParams.getVdsGroupId())) {
        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_CLUSTER);
        return false;
    }
    if (!isDedicatedVdsOnSameCluster(vmFromParams.getStaticData())) {
        return false;
    }
    // Check if number of monitors passed is legal
    if (!VmHandler.isNumOfMonitorsLegal(vmFromParams.getDefaultDisplayType(), vmFromParams.getNumOfMonitors(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // if number of monitors has increased, check PCI and IDE limits are ok
    if (vmFromDB.getNumOfMonitors() < vmFromParams.getNumOfMonitors()) {
        List<Disk> allDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getVmId());
        List<VmNic> interfaces = getVmNicDao().getAllForVm(getVmId());
        if (!checkPciAndIdeLimit(vmFromParams.getNumOfMonitors(), interfaces, allDisks, isVirtioScsiEnabled(), getReturnValue().getCanDoActionMessages())) {
            return false;
        }
    }
    if (!VmTemplateCommand.isVmPriorityValueLegal(vmFromParams.getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (vmFromDB.getVmPoolId() != null && vmFromParams.isStateless()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
        return false;
    }
    if (!AddVmCommand.checkCpuSockets(vmFromParams.getNumOfSockets(), vmFromParams.getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (!checkPayload(getParameters().getVmPayload(), vmFromParams.getIsoPath())) {
            return false;
        }
        // we save the content in base64 string
        for (Map.Entry<String, String> entry : getParameters().getVmPayload().getFiles().entrySet()) {
            entry.setValue(Base64.encodeBase64String(entry.getValue().getBytes()));
        }
    }
    // check for Vm Watchdog Model
    if (getParameters().getWatchdog() != null) {
        if (!validate((new VmWatchdogValidator(vmFromParams.getOs(), getParameters().getWatchdog(), getVdsGroup().getcompatibility_version())).isModelCompatibleWithOs())) {
            return false;
        }
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(vmFromParams.getUsbPolicy(), vmFromParams.getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check cpuPinning
    if (!isCpuPinningValid(vmFromParams.getCpuPinning(), vmFromParams.getStaticData())) {
        return false;
    }
    if (!validatePinningAndMigration(getReturnValue().getCanDoActionMessages(), getParameters().getVm().getStaticData(), getParameters().getVm().getCpuPinning())) {
        return false;
    }
    if (vmFromParams.isUseHostCpuFlags() && vmFromParams.getMigrationSupport() == MigrationSupport.MIGRATABLE) {
        return failCanDoAction(VdcBllMessages.VM_HOSTCPU_MUST_BE_PINNED_TO_HOST);
    }
    if (getParameters().isConsoleEnabled() != null && !getVm().isDown() && vmDeviceChanged(VmDeviceGeneralType.CONSOLE, getParameters().isConsoleEnabled())) {
        addCanDoActionMessage("$device console");
        return failCanDoAction(VdcBllMessages.VM_CANNOT_UPDATE_DEVICE_VM_NOT_DOWN);
    }
    if (getParameters().isSoundDeviceEnabled() != null && !getVm().isDown() && vmDeviceChanged(VmDeviceGeneralType.SOUND, getParameters().isSoundDeviceEnabled())) {
        addCanDoActionMessage("$device sound");
        return failCanDoAction(VdcBllMessages.VM_CANNOT_UPDATE_DEVICE_VM_NOT_DOWN);
    }
    if (!isCpuSharesValid(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.QOS_CPU_SHARES_OUT_OF_RANGE);
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    if (Boolean.FALSE.equals(getParameters().isVirtioScsiEnabled())) {
        List<Disk> allDisks = getDiskDao().getAllForVm(getVmId(), true);
        for (Disk disk : allDisks) {
            if (disk.getDiskInterface() == DiskInterface.VirtIO_SCSI) {
                return failCanDoAction(VdcBllMessages.CANNOT_DISABLE_VIRTIO_SCSI_PLUGGED_DISKS);
            }
        }
    }
    if (getParameters().isVirtioScsiEnabled() != null && !getVm().isDown() && vmDeviceChanged(VmDeviceGeneralType.CONTROLLER, getParameters().isVirtioScsiEnabled())) {
        addCanDoActionMessage("$device VirtIO-SCSI");
        return failCanDoAction(VdcBllMessages.VM_CANNOT_UPDATE_DEVICE_VM_NOT_DOWN);
    }
    return true;
}
#end_block

#method_before
protected void initTemplateDisks() {
    if (getVmTemplate() != null) {
        VmTemplateHandler.UpdateDisksFromDb(getVmTemplate());
    }
}
#method_after
protected void initTemplateDisks() {
    if (vmDisksSource != null) {
        VmTemplateHandler.updateDisksFromDb(vmDisksSource);
    }
}
#end_block

#method_before
protected List<VmNic> getVmInterfaces() {
    if (_vmInterfaces == null) {
        List<VmNic> vmNetworkInterfaces = getVmNicDao().getAllForTemplate(getVmTemplate().getId());
        _vmInterfaces = vmNetworkInterfaces == null ? new ArrayList<VmNic>() : vmNetworkInterfaces;
    }
    return _vmInterfaces;
}
#method_after
protected List<VmNic> getVmInterfaces() {
    if (_vmInterfaces == null) {
        List<VmNic> vmNetworkInterfaces = getVmNicDao().getAllForTemplate(vmInterfacesSourceId);
        _vmInterfaces = vmNetworkInterfaces == null ? new ArrayList<VmNic>() : vmNetworkInterfaces;
    }
    return _vmInterfaces;
}
#end_block

#method_before
protected List<? extends Disk> getVmDisks() {
    if (_vmDisks == null) {
        _vmDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getVmTemplateId());
    }
    return _vmDisks;
}
#method_after
protected List<? extends Disk> getVmDisks() {
    if (_vmDisks == null) {
        _vmDisks = DbFacade.getInstance().getDiskDao().getAllForVm(vmDisksSource.getId());
    }
    return _vmDisks;
}
#end_block

#method_before
protected boolean shouldCheckSpaceInStorageDomains() {
    return !getImagesToCheckDestinationStorageDomains().isEmpty() && !LinqUtils.firstOrNull(getImagesToCheckDestinationStorageDomains(), new All<DiskImage>()).getImageId().equals(VmTemplateHandler.BlankVmTemplateId);
}
#method_after
protected boolean shouldCheckSpaceInStorageDomains() {
    return !getImagesToCheckDestinationStorageDomains().isEmpty() && !LinqUtils.firstOrNull(getImagesToCheckDestinationStorageDomains(), new All<DiskImage>()).getImageId().equals(VmTemplateHandler.BLANK_VM_TEMPLATE_ID);
}
#end_block

#method_before
protected Guid getStoragePoolIdFromSourceImageContainer() {
    return getVmTemplate().getStoragePoolId();
}
#method_after
protected Guid getStoragePoolIdFromSourceImageContainer() {
    return vmDisksSource.getStoragePoolId();
}
#end_block

#method_before
public static boolean checkCpuSockets(int num_of_sockets, int cpu_per_socket, String compatibility_version, List<String> CanDoActionMessages) {
    boolean retValue = true;
    if (retValue && (num_of_sockets * cpu_per_socket) > Config.<Integer>GetValue(ConfigValues.MaxNumOfVmCpus, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_CPU.toString());
        retValue = false;
    }
    if (retValue && num_of_sockets > Config.<Integer>GetValue(ConfigValues.MaxNumOfVmSockets, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_SOCKETS.toString());
        retValue = false;
    }
    if (retValue && cpu_per_socket > Config.<Integer>GetValue(ConfigValues.MaxNumOfCpuPerSocket, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_CPU_PER_SOCKET.toString());
        retValue = false;
    }
    if (retValue && cpu_per_socket < 1) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_CPU_PER_SOCKET.toString());
        retValue = false;
    }
    if (retValue && num_of_sockets < 1) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_NUM_SOCKETS.toString());
        retValue = false;
    }
    return retValue;
}
#method_after
public static boolean checkCpuSockets(int num_of_sockets, int cpu_per_socket, String compatibility_version, List<String> CanDoActionMessages) {
    boolean retValue = true;
    if (retValue && (num_of_sockets * cpu_per_socket) > Config.<Integer>getValue(ConfigValues.MaxNumOfVmCpus, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_CPU.toString());
        retValue = false;
    }
    if (retValue && num_of_sockets > Config.<Integer>getValue(ConfigValues.MaxNumOfVmSockets, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_SOCKETS.toString());
        retValue = false;
    }
    if (retValue && cpu_per_socket > Config.<Integer>getValue(ConfigValues.MaxNumOfCpuPerSocket, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_CPU_PER_SOCKET.toString());
        retValue = false;
    }
    if (retValue && cpu_per_socket < 1) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_CPU_PER_SOCKET.toString());
        retValue = false;
    }
    if (retValue && num_of_sockets < 1) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_NUM_SOCKETS.toString());
        retValue = false;
    }
    return retValue;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVmTemplate() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    if (getVmTemplate().isDisabled()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_DISABLED);
    }
    if (!buildAndCheckDestStorageDomains()) {
        return false;
    }
    // otherwise..
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getImagesToCheckDestinationStorageDomains(), diskInfoDestinationMap);
    if (!canDoAddVmCommand()) {
        return false;
    }
    VM vmFromParams = getParameters().getVm();
    if (StringUtils.isEmpty(vmFromParams.getName())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    }
    // check that VM name is not too long
    if (!isVmNameValidLength(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (!checkPayload(getParameters().getVmPayload(), getParameters().getVmStaticData().getIsoPath())) {
            return false;
        }
        // otherwise, we save the content in base64 string
        for (Map.Entry<String, String> entry : getParameters().getVmPayload().getFiles().entrySet()) {
            entry.setValue(Base64.encodeBase64String(entry.getValue().getBytes()));
        }
    }
    // check for Vm Watchdog Model
    if (getParameters().getWatchdog() != null) {
        if (!validate((new VmWatchdogValidator(vmFromParams.getOs(), getParameters().getWatchdog(), getVdsGroup().getcompatibility_version())).isModelCompatibleWithOs())) {
            return false;
        }
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(vmFromParams.getUsbPolicy(), vmFromParams.getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check cpuPinning if the check haven't failed yet
    if (!isCpuPinningValid(vmFromParams.getCpuPinning(), vmFromParams.getStaticData())) {
        return false;
    }
    if (vmFromParams.isUseHostCpuFlags() && vmFromParams.getMigrationSupport() == MigrationSupport.MIGRATABLE) {
        return failCanDoAction(VdcBllMessages.VM_HOSTCPU_MUST_BE_PINNED_TO_HOST);
    }
    if (!checkCpuSockets()) {
        return false;
    }
    if (!isCpuSharesValid(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.QOS_CPU_SHARES_OUT_OF_RANGE);
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVmTemplate() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    if (getVmTemplate().isDisabled()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_DISABLED);
    }
    if (!buildAndCheckDestStorageDomains()) {
        return false;
    }
    // otherwise..
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getImagesToCheckDestinationStorageDomains(), diskInfoDestinationMap);
    if (!canDoAddVmCommand()) {
        return false;
    }
    VM vmFromParams = getParameters().getVm();
    if (StringUtils.isEmpty(vmFromParams.getName())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    }
    // check that VM name is not too long
    if (!isVmNameValidLength(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (!checkPayload(getParameters().getVmPayload(), getParameters().getVmStaticData().getIsoPath())) {
            return false;
        }
        // otherwise, we save the content in base64 string
        for (Map.Entry<String, String> entry : getParameters().getVmPayload().getFiles().entrySet()) {
            entry.setValue(Base64.encodeBase64String(entry.getValue().getBytes()));
        }
    }
    // check for Vm Watchdog Model
    if (getParameters().getWatchdog() != null) {
        if (!validate((new VmWatchdogValidator(vmFromParams.getOs(), getParameters().getWatchdog(), getVdsGroup().getcompatibility_version())).isModelCompatibleWithOs())) {
            return false;
        }
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(vmFromParams.getUsbPolicy(), vmFromParams.getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check if the OS type is supported
    if (!VmHandler.isOsTypeSupported(vmFromParams.getOs(), getVdsGroup().getArchitecture(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check cpuPinning if the check haven't failed yet
    if (!isCpuPinningValid(vmFromParams.getCpuPinning(), vmFromParams.getStaticData())) {
        return false;
    }
    if (vmFromParams.isUseHostCpuFlags() && vmFromParams.getMigrationSupport() == MigrationSupport.MIGRATABLE) {
        return failCanDoAction(VdcBllMessages.VM_HOSTCPU_MUST_BE_PINNED_TO_HOST);
    }
    if (instanceTypeId != null && getInstanceType() == null) {
        // invalid instance type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INSTANCE_TYPE_DOES_NOT_EXIST);
    }
    if (imageTypeId != null && getImageType() == null) {
        // invalid image type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_TYPE_DOES_NOT_EXIST);
    }
    if (!checkCpuSockets()) {
        return false;
    }
    if (!isCpuSharesValid(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.QOS_CPU_SHARES_OUT_OF_RANGE);
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    return true;
}
#end_block

#method_before
protected boolean checkTemplateImages(List<String> reasons) {
    if (getParameters().getParentCommand() == VdcActionType.AddVmPoolWithVms) {
        return true;
    }
    for (StorageDomain storage : destStorages.values()) {
        if (!VmTemplateCommand.isVmTemplateImagesReady(getVmTemplate(), storage.getId(), reasons, false, false, true, true, storageToDisksMap.get(storage.getId()))) {
            return false;
        }
    }
    return true;
}
#method_after
protected boolean checkTemplateImages(List<String> reasons) {
    if (getParameters().getParentCommand() == VdcActionType.AddVmPoolWithVms) {
        return true;
    }
    for (StorageDomain storage : destStorages.values()) {
        if (!VmTemplateCommand.isVmTemplateImagesReady(vmDisksSource, storage.getId(), reasons, false, false, true, true, storageToDisksMap.get(storage.getId()))) {
            return false;
        }
    }
    return true;
}
#end_block

#method_before
protected boolean buildAndCheckDestStorageDomains() {
    boolean retValue = true;
    if (diskInfoDestinationMap.isEmpty()) {
        retValue = fillDestMap();
    } else {
        retValue = validateProvidedDestinations();
    }
    if (retValue && getImagesToCheckDestinationStorageDomains().size() != diskInfoDestinationMap.size()) {
        log.errorFormat("Can not found any default active domain for one of the disks of template with id : {0}", getVmTemplate().getId());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS);
        retValue = false;
    }
    return retValue && validateIsImagesOnDomains();
}
#method_after
protected boolean buildAndCheckDestStorageDomains() {
    boolean retValue = true;
    if (diskInfoDestinationMap.isEmpty()) {
        retValue = fillDestMap();
    } else {
        retValue = validateProvidedDestinations();
    }
    if (retValue && getImagesToCheckDestinationStorageDomains().size() != diskInfoDestinationMap.size()) {
        log.errorFormat("Can not find any default active domain for one of the disks of template with id : {0}", vmDisksSource.getId());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS);
        retValue = false;
    }
    return retValue && validateIsImagesOnDomains();
}
#end_block

#method_before
protected Collection<DiskImage> getImagesToCheckDestinationStorageDomains() {
    return getVmTemplate().getDiskTemplateMap().values();
}
#method_after
protected Collection<DiskImage> getImagesToCheckDestinationStorageDomains() {
    return vmDisksSource.getDiskTemplateMap().values();
}
#end_block

#method_before
protected void fillImagesMapBasedOnTemplate() {
    ImagesHandler.fillImagesMapBasedOnTemplate(getVmTemplate(), getStorageDomainDAO().getAllForStoragePool(getVmTemplate().getStoragePoolId()), diskInfoDestinationMap, destStorages, false);
}
#method_after
protected void fillImagesMapBasedOnTemplate() {
    ImagesHandler.fillImagesMapBasedOnTemplate(vmDisksSource, getStorageDomainDAO().getAllForStoragePool(vmDisksSource.getStoragePoolId()), diskInfoDestinationMap, destStorages, false);
}
#end_block

#method_before
@Override
protected void executeVmCommand() {
    ArrayList<String> errorMessages = new ArrayList<String>();
    if (canAddVm(errorMessages, destStorages.values())) {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                addVmStatic();
                addVmDynamic();
                addVmNetwork();
                addVmStatistics();
                addActiveSnapshot();
                addVmPermission();
                getCompensationContext().stateChanged();
                return null;
            }
        });
        if (addVmImages()) {
            TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    copyVmDevices();
                    addDiskPermissions();
                    addVmPayload();
                    updateSmartCardDevices();
                    addVmWatchdog();
                    setActionReturnValue(getVm().getId());
                    setSucceeded(true);
                    return null;
                }
            });
        }
    } else {
        log.errorFormat("Failed to add vm . The reasons are: {0}", StringUtils.join(errorMessages, ','));
    }
}
#method_after
@Override
protected void executeVmCommand() {
    VmHandler.warnMemorySizeLegal(getParameters().getVm().getStaticData(), getVdsGroup().getcompatibility_version());
    ArrayList<String> errorMessages = new ArrayList<String>();
    if (canAddVm(errorMessages, destStorages.values())) {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                addVmStatic();
                addVmDynamic();
                addVmNetwork();
                addVmStatistics();
                addActiveSnapshot();
                addVmPermission();
                getCompensationContext().stateChanged();
                return null;
            }
        });
        if (addVmImages()) {
            TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    copyVmDevices();
                    addDiskPermissions();
                    if (getInstanceType() == null) {
                        addVmPayload();
                        updateSmartCardDevices();
                        addVmWatchdog();
                    }
                    setActionReturnValue(getVm().getId());
                    setSucceeded(true);
                    return null;
                }
            });
        }
    } else {
        log.errorFormat("Failed to add vm . The reasons are: {0}", StringUtils.join(errorMessages, ','));
    }
}
#end_block

#method_before
protected void copyVmDevices() {
    VmDeviceUtils.copyVmDevices(getVmTemplateId(), getVmId(), getSrcDeviceIdToTargetDeviceIdMapping(), getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled(), isVirtioScsiEnabled());
}
#method_after
protected void copyVmDevices() {
    VmDeviceUtils.copyVmDevices(vmDevicesSourceId, getVmId(), getSrcDeviceIdToTargetDeviceIdMapping(), getParameters().isSoundDeviceEnabled(), getParameters().isConsoleEnabled(), isVirtioScsiEnabled(), false);
}
#end_block

#method_before
protected boolean areParametersLegal(List<String> reasons) {
    boolean returnValue = false;
    final VmStatic vmStaticData = getParameters().getVmStaticData();
    if (vmStaticData != null) {
        returnValue = isLegalClusterId(vmStaticData.getVdsGroupId(), reasons);
        if (!validatePinningAndMigration(reasons, vmStaticData, getParameters().getVm().getCpuPinning())) {
            returnValue = false;
        }
        returnValue = returnValue && VmHandler.isMemorySizeLegal(vmStaticData.getOsId(), vmStaticData.getMemSizeMb(), reasons, getVdsGroup().getcompatibility_version());
    }
    return returnValue;
}
#method_after
protected boolean areParametersLegal(List<String> reasons) {
    boolean returnValue = false;
    final VmStatic vmStaticData = getParameters().getVmStaticData();
    if (vmStaticData != null) {
        returnValue = isLegalClusterId(vmStaticData.getVdsGroupId(), reasons);
        if (!validatePinningAndMigration(reasons, vmStaticData, getParameters().getVm().getCpuPinning())) {
            returnValue = false;
        }
    }
    return returnValue;
}
#end_block

#method_before
protected void addVmStatic() {
    VmStatic vmStatic = getParameters().getVmStaticData();
    if (vmStatic.getOrigin() == null) {
        vmStatic.setOrigin(OriginType.valueOf(Config.<String>GetValue(ConfigValues.OriginType)));
    }
    vmStatic.setId(getVmId());
    vmStatic.setQuotaId(getQuotaId());
    vmStatic.setCreationDate(new Date());
    vmStatic.setCreatedByUserId(getUserId());
    // predefined and user defined fields
    if (vmStatic.getCustomProperties() != null) {
        VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(getVdsGroupDAO().get(getParameters().getVm().getVdsGroupId()).getcompatibility_version(), vmStatic.getCustomProperties());
        String predefinedProperties = properties.getPredefinedProperties();
        String userDefinedProperties = properties.getUseDefinedProperties();
        vmStatic.setPredefinedProperties(predefinedProperties);
        vmStatic.setUserDefinedProperties(userDefinedProperties);
    }
    getVmStaticDao().save(vmStatic);
    getCompensationContext().snapshotNewEntity(vmStatic);
}
#method_after
protected void addVmStatic() {
    VmStatic vmStatic = getParameters().getVmStaticData();
    if (vmStatic.getOrigin() == null) {
        vmStatic.setOrigin(OriginType.valueOf(Config.<String>getValue(ConfigValues.OriginType)));
    }
    vmStatic.setId(getVmId());
    vmStatic.setQuotaId(getQuotaId());
    vmStatic.setCreationDate(new Date());
    vmStatic.setCreatedByUserId(getUserId());
    // predefined and user defined fields
    if (vmStatic.getCustomProperties() != null) {
        VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(getVdsGroupDAO().get(getParameters().getVm().getVdsGroupId()).getcompatibility_version(), vmStatic.getCustomProperties());
        String predefinedProperties = properties.getPredefinedProperties();
        String userDefinedProperties = properties.getUseDefinedProperties();
        vmStatic.setPredefinedProperties(predefinedProperties);
        vmStatic.setUserDefinedProperties(userDefinedProperties);
    }
    vmStatic.setOriginalTemplateGuid(vmStatic.getVmtGuid());
    vmStatic.setOriginalTemplateName(getVmTemplate().getName());
    getVmStaticDao().save(vmStatic);
    getCompensationContext().snapshotNewEntity(vmStatic);
}
#end_block

#method_before
protected boolean addVmImages() {
    if (getVmTemplate().getDiskTemplateMap().size() > 0) {
        if (getVm().getStatus() != VMStatus.Down) {
            log.error("Cannot add images. VM is not Down");
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
        VmHandler.lockVm(getVmId());
        for (DiskImage dit : getImagesToCheckDestinationStorageDomains()) {
            CreateSnapshotFromTemplateParameters tempVar = new CreateSnapshotFromTemplateParameters(dit.getImageId(), getParameters().getVmStaticData().getId());
            tempVar.setDestStorageDomainId(diskInfoDestinationMap.get(dit.getId()).getStorageIds().get(0));
            tempVar.setDiskAlias(diskInfoDestinationMap.get(dit.getId()).getDiskAlias());
            tempVar.setStorageDomainId(dit.getStorageIds().get(0));
            tempVar.setVmSnapshotId(getVmSnapshotId());
            tempVar.setParentCommand(VdcActionType.AddVm);
            tempVar.setEntityInfo(getParameters().getEntityInfo());
            tempVar.setParentParameters(getParameters());
            tempVar.setQuotaId(diskInfoDestinationMap.get(dit.getId()).getQuotaId());
            VdcReturnValueBase result = getBackend().runInternalAction(VdcActionType.CreateSnapshotFromTemplate, tempVar, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
            /**
             * if couldn't create snapshot then stop the transaction and the command
             */
            if (!result.getSucceeded()) {
                throw new VdcBLLException(result.getFault().getError());
            } else {
                getTaskIdList().addAll(result.getInternalVdsmTaskIdList());
                DiskImage newImage = (DiskImage) result.getActionReturnValue();
                srcDiskIdToTargetDiskIdMapping.put(dit.getId(), newImage.getId());
            }
        }
    }
    return true;
}
#method_after
protected boolean addVmImages() {
    if (vmDisksSource.getDiskTemplateMap().size() > 0) {
        if (getVm().getStatus() != VMStatus.Down) {
            log.error("Cannot add images. VM is not Down");
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
        VmHandler.lockVm(getVmId());
        for (DiskImage dit : getImagesToCheckDestinationStorageDomains()) {
            CreateSnapshotFromTemplateParameters tempVar = new CreateSnapshotFromTemplateParameters(dit.getImageId(), getParameters().getVmStaticData().getId());
            tempVar.setDestStorageDomainId(diskInfoDestinationMap.get(dit.getId()).getStorageIds().get(0));
            tempVar.setDiskAlias(diskInfoDestinationMap.get(dit.getId()).getDiskAlias());
            tempVar.setStorageDomainId(dit.getStorageIds().get(0));
            tempVar.setVmSnapshotId(getVmSnapshotId());
            tempVar.setParentCommand(VdcActionType.AddVm);
            tempVar.setEntityInfo(getParameters().getEntityInfo());
            tempVar.setParentParameters(getParameters());
            tempVar.setQuotaId(diskInfoDestinationMap.get(dit.getId()).getQuotaId());
            VdcReturnValueBase result = getBackend().runInternalAction(VdcActionType.CreateSnapshotFromTemplate, tempVar, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
            /**
             * if couldn't create snapshot then stop the transaction and the command
             */
            if (!result.getSucceeded()) {
                throw new VdcBLLException(result.getFault().getError());
            } else {
                getTaskIdList().addAll(result.getInternalVdsmTaskIdList());
                DiskImage newImage = (DiskImage) result.getActionReturnValue();
                srcDiskIdToTargetDiskIdMapping.put(dit.getId(), newImage.getId());
            }
        }
    }
    return true;
}
#end_block

#method_before
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, getActionType().getActionGroup()));
    permissionList.add(new PermissionSubject(getVmTemplateId(), VdcObjectType.VmTemplate, getActionType().getActionGroup()));
    if (getVmTemplate() != null && !getVmTemplate().getDiskList().isEmpty()) {
        for (DiskImage disk : getParameters().getDiskInfoDestinationMap().values()) {
            if (disk.getStorageIds() != null && !disk.getStorageIds().isEmpty()) {
                permissionList.add(new PermissionSubject(disk.getStorageIds().get(0), VdcObjectType.Storage, ActionGroup.CREATE_DISK));
            }
        }
    }
    addPermissionSubjectForAdminLevelProperties(permissionList);
    return permissionList;
}
#method_after
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, getActionType().getActionGroup()));
    permissionList.add(new PermissionSubject(getVmTemplateId(), VdcObjectType.VmTemplate, getActionType().getActionGroup()));
    if (getVmTemplate() != null && !getVmTemplate().getDiskList().isEmpty()) {
        for (DiskImage disk : getParameters().getDiskInfoDestinationMap().values()) {
            if (disk.getStorageIds() != null && !disk.getStorageIds().isEmpty()) {
                permissionList.add(new PermissionSubject(disk.getStorageIds().get(0), VdcObjectType.Storage, ActionGroup.CREATE_DISK));
            }
        }
    }
    // if using instance type, need create instance
    if (getInstanceType() != null) {
        permissionList.add(new PermissionSubject(instanceTypeId, VdcObjectType.VmTemplate, ActionGroup.CREATE_INSTANCE));
    }
    // if using image type, need create instance
    if (getImageType() != null) {
        permissionList.add(new PermissionSubject(imageTypeId, VdcObjectType.VmTemplate, ActionGroup.CREATE_INSTANCE));
    }
    addPermissionSubjectForAdminLevelProperties(permissionList);
    return permissionList;
}
#end_block

#method_before
protected void addPermissionSubjectForAdminLevelProperties(List<PermissionSubject> permissionList) {
    final VmStatic vmFromParams = getParameters().getVmStaticData();
    if (vmFromParams != null) {
        // user needs specific permission to change custom properties
        if (!StringUtils.isEmpty(vmFromParams.getCustomProperties())) {
            permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, ActionGroup.CHANGE_VM_CUSTOM_PROPERTIES));
        }
        // host-specific parameters can be changed by administration role only
        if (vmFromParams.getDedicatedVmForVds() != null || !StringUtils.isEmpty(vmFromParams.getCpuPinning())) {
            permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, ActionGroup.EDIT_ADMIN_VM_PROPERTIES));
        }
    }
}
#method_after
protected void addPermissionSubjectForAdminLevelProperties(List<PermissionSubject> permissionList) {
    VmStatic vmFromParams = getParameters().getVmStaticData();
    if (vmFromParams != null) {
        // user needs specific permission to change custom properties
        if (!StringUtils.isEmpty(vmFromParams.getCustomProperties())) {
            permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, ActionGroup.CHANGE_VM_CUSTOM_PROPERTIES));
        }
        // host-specific parameters can be changed by administration role only
        if (vmFromParams.getDedicatedVmForVds() != null || !StringUtils.isEmpty(vmFromParams.getCpuPinning())) {
            permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, ActionGroup.EDIT_ADMIN_VM_PROPERTIES));
        }
    }
}
#end_block

#method_before
protected void addVmPermission() {
    UniquePermissionsSet permissionsToAdd = new UniquePermissionsSet();
    if ((getParameters()).isMakeCreatorExplicitOwner()) {
        permissionsToAdd.addPermission(getCurrentUser().getUserId(), PredefinedRoles.VM_OPERATOR.getId(), getVmId(), VdcObjectType.VM);
    }
    if (getParameters().isCopyTemplatePermissions() && !getVmTemplateId().equals(VmTemplateHandler.BlankVmTemplateId)) {
        copyTemplatePermissions(permissionsToAdd);
    }
    if (!permissionsToAdd.isEmpty()) {
        List<permissions> permissionsList = permissionsToAdd.asPermissionList();
        MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new permissions[permissionsList.size()]));
        getCompensationContext().snapshotNewEntities(permissionsList);
    }
}
#method_after
protected void addVmPermission() {
    UniquePermissionsSet permissionsToAdd = new UniquePermissionsSet();
    if ((getParameters()).isMakeCreatorExplicitOwner()) {
        permissionsToAdd.addPermission(getCurrentUser().getId(), PredefinedRoles.VM_OPERATOR.getId(), getVmId(), VdcObjectType.VM);
    }
    if (getParameters().isCopyTemplatePermissions() && !getVmTemplateId().equals(VmTemplateHandler.BLANK_VM_TEMPLATE_ID)) {
        copyTemplatePermissions(permissionsToAdd);
    }
    if (!permissionsToAdd.isEmpty()) {
        List<Permissions> permissionsList = permissionsToAdd.asPermissionList();
        MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new Permissions[permissionsList.size()]));
        getCompensationContext().snapshotNewEntities(permissionsList);
    }
}
#end_block

#method_before
private void copyTemplatePermissions(UniquePermissionsSet permissionsToAdd) {
    PermissionDAO dao = getDbFacade().getPermissionDao();
    List<permissions> templatePermissions = dao.getAllForEntity(getVmTemplateId(), getCurrentUser().getUserId(), false);
    for (permissions templatePermission : templatePermissions) {
        boolean templateOwnerRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_OWNER.getId());
        boolean templateUserRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_USER.getId());
        if (templateOwnerRole || templateUserRole) {
            continue;
        }
        permissionsToAdd.addPermission(templatePermission.getad_element_id(), templatePermission.getrole_id(), getVmId(), VdcObjectType.VM);
    }
}
#method_after
private void copyTemplatePermissions(UniquePermissionsSet permissionsToAdd) {
    PermissionDAO dao = getDbFacade().getPermissionDao();
    List<Permissions> templatePermissions = dao.getAllForEntity(getVmTemplateId(), getCurrentUser().getId(), false);
    for (Permissions templatePermission : templatePermissions) {
        boolean templateOwnerRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_OWNER.getId());
        boolean templateUserRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_USER.getId());
        if (templateOwnerRole || templateUserRole) {
            continue;
        }
        permissionsToAdd.addPermission(templatePermission.getad_element_id(), templatePermission.getrole_id(), getVmId(), VdcObjectType.VM);
    }
}
#end_block

#method_before
protected void addDiskPermissions() {
    List<Guid> newDiskImageIds = new ArrayList<>(srcDiskIdToTargetDiskIdMapping.values());
    permissions[] permsArray = new permissions[newDiskImageIds.size()];
    for (int i = 0; i < newDiskImageIds.size(); i++) {
        permsArray[i] = new permissions(getCurrentUser().getUserId(), PredefinedRoles.DISK_OPERATOR.getId(), newDiskImageIds.get(i), VdcObjectType.Disk);
    }
    MultiLevelAdministrationHandler.addPermission(permsArray);
}
#method_after
protected void addDiskPermissions() {
    List<Guid> newDiskImageIds = new ArrayList<>(srcDiskIdToTargetDiskIdMapping.values());
    Permissions[] permsArray = new Permissions[newDiskImageIds.size()];
    for (int i = 0; i < newDiskImageIds.size(); i++) {
        permsArray[i] = new Permissions(getCurrentUser().getId(), PredefinedRoles.DISK_OPERATOR.getId(), newDiskImageIds.get(i), VdcObjectType.Disk);
    }
    MultiLevelAdministrationHandler.addPermission(permsArray);
}
#end_block

#method_before
private void isModelCompatibleWithOsTest(Matcher<ValidationResult> matcher, VmWatchdogType watchDogModel) {
    Version version = new Version();
    VmWatchdog vmWatchdog = new VmWatchdog();
    vmWatchdog.setModel(watchDogModel);
    VmWatchdogValidator validator = spy(new VmWatchdogValidator(0, vmWatchdog, version));
    OsRepository osRepository = mock(OsRepository.class);
    when(validator.getOsRepository()).thenReturn(osRepository);
    when(osRepository.getWatchDogModels(any(Integer.class), any(Version.class))).thenReturn(WATCHDOG_MODELS);
    assertThat(validator.isModelCompatibleWithOs(), matcher);
}
#method_after
private void isModelCompatibleWithOsTest(Matcher<ValidationResult> matcher, VmWatchdogType watchDogModel) {
    Version version = new Version();
    VmWatchdog vmWatchdog = new VmWatchdog();
    vmWatchdog.setModel(watchDogModel);
    VmWatchdogValidator validator = spy(new VmWatchdogValidator(0, vmWatchdog, version));
    OsRepository osRepository = mock(OsRepository.class);
    when(validator.getOsRepository()).thenReturn(osRepository);
    when(osRepository.getVmWatchdogTypes(any(Integer.class), any(Version.class))).thenReturn(WATCHDOG_MODELS);
    assertThat(validator.isModelCompatibleWithOs(), matcher);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VdcReturnValueBase returnValue = getBackend().runInternalAction(VdcActionType.SetupNetworks, getParameters());
    if (returnValue.getSucceeded()) {
        getBackend().runInternalAction(VdcActionType.CommitNetworkChanges, new VdsActionParameters(getParameters().getVdsId()));
    }
}
#method_after
@Override
protected void executeCommand() {
    VdcReturnValueBase returnValue = getBackend().runInternalAction(VdcActionType.SetupNetworks, getParameters());
    if (returnValue.getSucceeded()) {
        returnValue = getBackend().runInternalAction(VdcActionType.CommitNetworkChanges, new VdsActionParameters(getParameters().getVdsId()));
    }
    if (!returnValue.getSucceeded()) {
        propagateFailure(returnValue);
    }
    setSucceeded(returnValue.getSucceeded());
}
#end_block

#method_before
void initVmTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new VmStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VM> nameColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameVm(), "95px");
    TextColumnWithTooltip<VM> templateColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return vmTemplateNameRenderer.render(object);
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(templateColumn, constants.templateVm(), "95px");
    TextColumnWithTooltip<VM> originColumn = new EnumColumn<VM, OriginType>() {

        @Override
        protected OriginType getRawValue(VM object) {
            return object.getOrigin();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(originColumn, constants.originVm(), "95px");
    TextColumnWithTooltip<VM> memoryColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            // $NON-NLS-1$
            return String.valueOf(object.getVmMemSizeMb()) + " MB";
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memoryColumn, constants.memoryVm(), "95px");
    TextColumnWithTooltip<VM> cpuColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return String.valueOf(object.getNumOfCpus());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpusVm(), "95px");
    TextColumnWithTooltip<VM> diskColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return String.valueOf(object.getDiskMap().size());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(diskColumn, constants.disksVm(), "95px");
    TextColumnWithTooltip<VM> creationDateColumn = new GeneralDateTimeColumn<VM>() {

        @Override
        protected Date getRawValue(VM object) {
            return object.getVmCreationDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(creationDateColumn, constants.creationDateVm(), "95px");
    TextColumnWithTooltip<VM> exportDateColumn = new GeneralDateTimeColumn<VM>() {

        @Override
        protected Date getRawValue(VM object) {
            return object.getExportDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(exportDateColumn, constants.exportDateVm(), "95px");
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.restoreVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRestoreCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.removeVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRemoveCommand();
        }
    });
    getTable().showRefreshButton();
}
#method_after
void initVmTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new VmStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VM> nameColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameVm(), "95px");
    TextColumnWithTooltip<VM> templateColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return vmTemplateNameRenderer.render(object);
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(templateColumn, constants.templateVm(), "95px");
    TextColumnWithTooltip<VM> originColumn = new EnumColumn<VM, OriginType>() {

        @Override
        protected OriginType getRawValue(VM object) {
            return object.getOrigin();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(originColumn, constants.originVm(), "95px");
    TextColumnWithTooltip<VM> memoryColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            // $NON-NLS-1$
            return String.valueOf(object.getVmMemSizeMb()) + " MB";
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memoryColumn, constants.memoryVm(), "95px");
    TextColumnWithTooltip<VM> cpuColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return String.valueOf(object.getNumOfCpus());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpusVm(), "95px");
    TextColumnWithTooltip<VM> archColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return String.valueOf(object.getClusterArch());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(archColumn, constants.architectureVm(), "95px");
    TextColumnWithTooltip<VM> diskColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return String.valueOf(object.getDiskMap().size());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(diskColumn, constants.disksVm(), "95px");
    TextColumnWithTooltip<VM> creationDateColumn = new GeneralDateTimeColumn<VM>() {

        @Override
        protected Date getRawValue(VM object) {
            return object.getVmCreationDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(creationDateColumn, constants.creationDateVm(), "95px");
    TextColumnWithTooltip<VM> exportDateColumn = new GeneralDateTimeColumn<VM>() {

        @Override
        protected Date getRawValue(VM object) {
            return object.getExportDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(exportDateColumn, constants.exportDateVm(), "95px");
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.restoreVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRestoreCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.removeVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRemoveCommand();
        }
    });
    getTable().showRefreshButton();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (VmTemplateHandler.BlankVmTemplateId.equals(getVmTemplate().getId())) {
        return failCanDoAction(VdcBllMessages.VMT_CANNOT_EDIT_BLANK_TEMPLATE);
    }
    boolean returnValue = false;
    mOldTemplate = DbFacade.getInstance().getVmTemplateDao().get(getVmTemplate().getId());
    if (mOldTemplate == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    VmTemplateHandler.UpdateDisksFromDb(mOldTemplate);
    if (mOldTemplate.getStatus() == VmTemplateStatus.Locked) {
        return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IS_LOCKED);
    }
    if (!StringUtils.equals(mOldTemplate.getName(), getVmTemplate().getName()) && isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
    } else {
        if (getVdsGroup() == null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CLUSTER_IS_NOT_VALID);
        } else if (isVmPriorityValueLegal(getParameters().getVmTemplateData().getPriority(), getReturnValue().getCanDoActionMessages()) && isDomainLegal(getParameters().getVmTemplateData().getDomain(), getReturnValue().getCanDoActionMessages())) {
            returnValue = VmTemplateHandler.isUpdateValid(mOldTemplate, getVmTemplate());
            if (!returnValue) {
                addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_UPDATE_ILLEGAL_FIELD);
            }
        }
    }
    // Check that the USB policy is legal
    if (returnValue) {
        returnValue = VmHandler.isUsbPolicyLegal(getParameters().getVmTemplateData().getUsbPolicy(), getParameters().getVmTemplateData().getOsId(), getVdsGroup(), getReturnValue().getCanDoActionMessages());
    }
    if (returnValue) {
        returnValue = AddVmCommand.checkCpuSockets(getParameters().getVmTemplateData().getNumOfSockets(), getParameters().getVmTemplateData().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
    }
    if (returnValue && getParameters().getVmTemplateData().getSingleQxlPci() && !VmHandler.isSingleQxlDeviceLegal(getParameters().getVmTemplateData().getDefaultDisplayType(), getParameters().getVmTemplateData().getOsId(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        returnValue = false;
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVmTemplate().getId())) {
        return failCanDoAction(VdcBllMessages.VMT_CANNOT_EDIT_BLANK_TEMPLATE);
    }
    boolean returnValue = false;
    mOldTemplate = DbFacade.getInstance().getVmTemplateDao().get(getVmTemplate().getId());
    if (mOldTemplate == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    VmTemplateHandler.updateDisksFromDb(mOldTemplate);
    if (mOldTemplate.getStatus() == VmTemplateStatus.Locked) {
        return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IS_LOCKED);
    }
    if (!StringUtils.equals(mOldTemplate.getName(), getVmTemplate().getName()) && isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
    } else {
        if (getVdsGroup() == null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CLUSTER_IS_NOT_VALID);
        } else if (isVmPriorityValueLegal(getParameters().getVmTemplateData().getPriority(), getReturnValue().getCanDoActionMessages()) && isDomainLegal(getParameters().getVmTemplateData().getDomain(), getReturnValue().getCanDoActionMessages())) {
            returnValue = VmTemplateHandler.isUpdateValid(mOldTemplate, getVmTemplate());
            if (!returnValue) {
                addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_UPDATE_ILLEGAL_FIELD);
            }
        }
    }
    // Check that the USB policy is legal
    if (returnValue) {
        returnValue = VmHandler.isUsbPolicyLegal(getParameters().getVmTemplateData().getUsbPolicy(), getParameters().getVmTemplateData().getOsId(), getVdsGroup(), getReturnValue().getCanDoActionMessages());
    }
    // Check if the OS type is supported
    if (returnValue) {
        returnValue = VmHandler.isOsTypeSupported(getParameters().getVmTemplateData().getOsId(), getVdsGroup().getArchitecture(), getReturnValue().getCanDoActionMessages());
    }
    if (returnValue) {
        returnValue = AddVmCommand.checkCpuSockets(getParameters().getVmTemplateData().getNumOfSockets(), getParameters().getVmTemplateData().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
    }
    if (returnValue && getParameters().getVmTemplateData().getSingleQxlPci() && !VmHandler.isSingleQxlDeviceLegal(getParameters().getVmTemplateData().getDefaultDisplayType(), getParameters().getVmTemplateData().getOsId(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version())) {
        returnValue = false;
    }
    return returnValue;
}
#end_block

#method_before
private void updateOriginalTemplateNameOnDerivedVms() {
    boolean templateNameChanged = !ObjectUtils.objectsEqual(mOldTemplate.getName(), getVmTemplate().getName());
    if (templateNameChanged) {
        DbFacade.getInstance().getVmDao().updateOriginalTemplateName(getVmTemplate().getId(), getVmTemplate().getName());
    }
}
#method_after
private void updateOriginalTemplateNameOnDerivedVms() {
    boolean templateNameChanged = !ObjectUtils.equals(mOldTemplate.getName(), getVmTemplate().getName());
    if (templateNameChanged) {
        getVmDAO().updateOriginalTemplateName(getVmTemplate().getId(), getVmTemplate().getName());
    }
}
#end_block

#method_before
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setName(rs.getString("vm_name"));
    entity.setQuotaId(getGuid(rs, "quota_id"));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setVmOs(rs.getInt("vm_os"));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setComment(rs.getString("vm_comment"));
    entity.setVmDomain(rs.getString("vm_domain"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOsId(rs.getInt("vmt_os"));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmFQDN(rs.getString("vm_fqdn"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(getGuid(rs, "console_user_id"));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(getGuid(rs, "run_on_vds"));
    entity.setMigratingToVds(getGuid(rs, "migrating_to_vds"));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(getGuid(rs, "vm_pool_id"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(getGuid(rs, "last_vds_run_on"));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setCpuShares(rs.getInt("cpu_shares"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setRunAndPause(rs.getBoolean("is_run_and_pause"));
    entity.setLastWatchdogEvent(getLong(rs, "last_watchdog_event"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setRunOnce(rs.getBoolean("is_run_once"));
    entity.setCreatedByUserId(getGuid(rs, "created_by_user_id"));
    entity.setCpuName(rs.getString("cpu_name"));
    entity.setInstanceTypeId(Guid.createGuidFromString(rs.getString("instance_type_id")));
    entity.setImageTypeId(Guid.createGuidFromString(rs.getString("image_type_id")));
    entity.setOriginalTemplateName(rs.getString("original_template_name"));
    entity.setOriginalTemplateGuid(Guid.createGuidFromString(rs.getString("original_template_id")));
    return entity;
}
#method_after
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setName(rs.getString("vm_name"));
    entity.setQuotaId(getGuid(rs, "quota_id"));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setVmOs(rs.getInt("vm_os"));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setComment(rs.getString("vm_comment"));
    entity.setVmDomain(rs.getString("vm_domain"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOsId(rs.getInt("vmt_os"));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmFQDN(rs.getString("vm_fqdn"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(getGuid(rs, "console_user_id"));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(getGuid(rs, "run_on_vds"));
    entity.setMigratingToVds(getGuid(rs, "migrating_to_vds"));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(getGuid(rs, "vm_pool_id"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setSsoMethod(SsoMethod.fromString(rs.getString("sso_method")));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(getGuid(rs, "last_vds_run_on"));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setCpuShares(rs.getInt("cpu_shares"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setRunAndPause(rs.getBoolean("is_run_and_pause"));
    entity.setLastWatchdogEvent(getLong(rs, "last_watchdog_event"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setRunOnce(rs.getBoolean("is_run_once"));
    entity.setCreatedByUserId(getGuid(rs, "created_by_user_id"));
    entity.setCpuName(rs.getString("cpu_name"));
    entity.setInstanceTypeId(Guid.createGuidFromString(rs.getString("instance_type_id")));
    entity.setImageTypeId(Guid.createGuidFromString(rs.getString("image_type_id")));
    entity.setClusterArch(ArchitectureType.forValue(rs.getInt("architecture")));
    entity.setOriginalTemplateName(rs.getString("original_template_name"));
    entity.setOriginalTemplateGuid(getGuid(rs, "original_template_id"));
    return entity;
}
#end_block

#method_before
private boolean canDoActionAfterCloneVm(Map<Guid, StorageDomain> domainsMap) {
    VM vm = getParameters().getVm();
    // check that the imported vm guid is not in engine
    if (!validateNoDuplicateVm()) {
        return false;
    }
    if (!validateNoDuplicateDiskImages(imageList)) {
        return false;
    }
    if (!validateDiskInterface(imageList)) {
        return false;
    }
    setVmTemplateId(getVm().getVmtGuid());
    if (!templateExists() || !checkTemplateInStorageDomain() || !checkImagesGUIDsLegal() || !canAddVm()) {
        return false;
    }
    if (!VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid()) && getVmTemplate() != null && getVmTemplate().getStatus() == VmTemplateStatus.Locked) {
        return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (getParameters().getCopyCollapse() && vm.getDiskMap() != null) {
        for (Disk disk : vm.getDiskMap().values()) {
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage key = (DiskImage) getVm().getDiskMap().get(disk.getId());
                if (key != null) {
                    if (!ImagesHandler.checkImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(key.getId())).getStorageStaticData(), (DiskImageBase) disk, getReturnValue().getCanDoActionMessages())) {
                        return false;
                    }
                }
            }
        }
    }
    // (backup) domain
    if (getParameters().getCopyCollapse() && !isTemplateExistsOnExportDomain()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMPORTED_TEMPLATE_IS_MISSING, String.format("$DomainName %1$s", getStorageDomainStaticDAO().get(getParameters().getSourceDomainId()).getStorageName()));
    }
    if (!validateVdsCluster()) {
        return false;
    }
    Map<StorageDomain, Integer> domainMap = getSpaceRequirementsForStorageDomains(imageList);
    if (!setDomainsForMemoryImages(domainMap)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NO_SUITABLE_DOMAIN_FOUND);
    }
    for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
        if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
            return false;
        }
    }
    if (!validateUsbPolicy()) {
        return false;
    }
    if (!validateMacAddress(Entities.<VmNic, VmNetworkInterface>upcast(getVm().getInterfaces()))) {
        return false;
    }
    return true;
}
#method_after
private boolean canDoActionAfterCloneVm(Map<Guid, StorageDomain> domainsMap) {
    VM vm = getParameters().getVm();
    // check that the imported vm guid is not in engine
    if (!validateNoDuplicateVm()) {
        return false;
    }
    if (!validateNoDuplicateDiskImages(imageList)) {
        return false;
    }
    if (!validateDiskInterface(imageList)) {
        return false;
    }
    setVmTemplateId(getVm().getVmtGuid());
    if (!templateExists() || !checkTemplateInStorageDomain() || !checkImagesGUIDsLegal() || !canAddVm()) {
        return false;
    }
    if (!VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getVmtGuid()) && getVmTemplate() != null && getVmTemplate().getStatus() == VmTemplateStatus.Locked) {
        return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (getParameters().getCopyCollapse() && vm.getDiskMap() != null) {
        for (Disk disk : vm.getDiskMap().values()) {
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage key = (DiskImage) getVm().getDiskMap().get(disk.getId());
                if (key != null) {
                    if (!ImagesHandler.checkImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(key.getId())).getStorageStaticData(), (DiskImageBase) disk, getReturnValue().getCanDoActionMessages())) {
                        return false;
                    }
                }
            }
        }
    }
    // (backup) domain
    if (getParameters().getCopyCollapse() && !isTemplateExistsOnExportDomain()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMPORTED_TEMPLATE_IS_MISSING, String.format("$DomainName %1$s", getStorageDomainStaticDAO().get(getParameters().getSourceDomainId()).getStorageName()));
    }
    if (!validateVmArchitecture()) {
        return false;
    }
    if (!validateVdsCluster()) {
        return false;
    }
    Map<StorageDomain, Integer> domainMap = getSpaceRequirementsForStorageDomains(imageList);
    if (!setDomainsForMemoryImages(domainMap)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NO_SUITABLE_DOMAIN_FOUND);
    }
    for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
        if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
            return false;
        }
    }
    if (!validateUsbPolicy()) {
        return false;
    }
    if (!validateMacAddress(Entities.<VmNic, VmNetworkInterface>upcast(getVm().getInterfaces()))) {
        return false;
    }
    return true;
}
#end_block

#method_before
private boolean setDomainsForMemoryImages(Map<StorageDomain, Integer> domain2requiredSize) {
    Map<String, String> handledMemoryVolumes = new HashMap<String, String>();
    for (Snapshot snapshot : getVm().getSnapshots()) {
        String memoryVolume = snapshot.getMemoryVolume();
        if (memoryVolume.isEmpty()) {
            continue;
        }
        if (handledMemoryVolumes.containsKey(memoryVolume)) {
            // replace the volume representation with the one with the correct domain & pool
            snapshot.setMemoryVolume(handledMemoryVolumes.get(memoryVolume));
            continue;
        }
        VM vm = getVmFromSnapshot(snapshot);
        int requiredSizeForMemory = (int) Math.ceil((vm.getTotalMemorySizeInBytes() + HibernateVmCommand.META_DATA_SIZE_IN_BYTES) * 1.0 / BYTES_IN_GB);
        StorageDomain storageDomain = VmHandler.findStorageDomainForMemory(getParameters().getStoragePoolId(), requiredSizeForMemory, domain2requiredSize);
        if (storageDomain == null) {
            return false;
        }
        domain2requiredSize.put(storageDomain, domain2requiredSize.get(storageDomain) + requiredSizeForMemory);
        String modifiedMemoryVolume = MemoryUtils.changeStorageDomainAndPoolInMemoryState(memoryVolume, storageDomain.getId(), getParameters().getStoragePoolId());
        // replace the volume representation with the one with the correct domain & pool
        snapshot.setMemoryVolume(modifiedMemoryVolume);
        // save it in case we'll find other snapshots with the same memory volume
        handledMemoryVolumes.put(memoryVolume, modifiedMemoryVolume);
    }
    return true;
}
#method_after
private boolean setDomainsForMemoryImages(Map<StorageDomain, Integer> domain2requiredSize) {
    Map<String, String> handledMemoryVolumes = new HashMap<String, String>();
    for (Snapshot snapshot : getVm().getSnapshots()) {
        String memoryVolume = snapshot.getMemoryVolume();
        if (memoryVolume.isEmpty()) {
            continue;
        }
        if (handledMemoryVolumes.containsKey(memoryVolume)) {
            // replace the volume representation with the one with the correct domain & pool
            snapshot.setMemoryVolume(handledMemoryVolumes.get(memoryVolume));
            continue;
        }
        VM vm = getVmFromSnapshot(snapshot);
        int requiredSizeForMemory = (int) Math.ceil((vm.getTotalMemorySizeInBytes() + HibernateVmCommand.META_DATA_SIZE_IN_BYTES) * 1.0 / BYTES_IN_GB);
        StorageDomain storageDomain = VmHandler.findStorageDomainForMemory(getParameters().getStoragePoolId(), requiredSizeForMemory, domain2requiredSize);
        if (storageDomain == null) {
            return false;
        }
        int requiredSizeInDomainIncludingMemoryVolumes = domain2requiredSize.containsKey(storageDomain) ? domain2requiredSize.get(storageDomain) + requiredSizeForMemory : requiredSizeForMemory;
        domain2requiredSize.put(storageDomain, requiredSizeInDomainIncludingMemoryVolumes);
        String modifiedMemoryVolume = MemoryUtils.changeStorageDomainAndPoolInMemoryState(memoryVolume, storageDomain.getId(), getParameters().getStoragePoolId());
        // replace the volume representation with the one with the correct domain & pool
        snapshot.setMemoryVolume(modifiedMemoryVolume);
        // save it in case we'll find other snapshots with the same memory volume
        handledMemoryVolumes.put(memoryVolume, modifiedMemoryVolume);
    }
    return true;
}
#end_block

#method_before
protected boolean validateVdsCluster() {
    List<VDSGroup> groups = getVdsGroupDAO().getAllForStoragePool(getParameters().getStoragePoolId());
    for (VDSGroup group : groups) {
        if (group.getId().equals(getParameters().getVdsGroupId())) {
            return true;
        }
    }
    return failCanDoAction(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
}
#method_after
protected boolean validateVdsCluster() {
    List<VDSGroup> groups = getVdsGroupDAO().getAllForStoragePool(getParameters().getStoragePoolId());
    for (VDSGroup group : groups) {
        if (group.getId().equals(getParameters().getVdsGroupId())) {
            if (group.getArchitecture() != getVm().getClusterArch()) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_VM_ARCHITECTURE_NOT_SUPPORTED_BY_CLUSTER);
            }
            return true;
        }
    }
    return failCanDoAction(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
}
#end_block

#method_before
private boolean isTemplateExistsOnExportDomain() {
    if (VmTemplateHandler.BlankVmTemplateId.equals(getParameters().getVm().getVmtGuid())) {
        return true;
    }
    VdcQueryReturnValue qRetVal = Backend.getInstance().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId()));
    if (qRetVal.getSucceeded()) {
        Map<VmTemplate, ?> templates = qRetVal.getReturnValue();
        for (VmTemplate template : templates.keySet()) {
            if (getParameters().getVm().getVmtGuid().equals(template.getId())) {
                return true;
            }
        }
    }
    return false;
}
#method_after
private boolean isTemplateExistsOnExportDomain() {
    if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getParameters().getVm().getVmtGuid())) {
        return true;
    }
    VdcQueryReturnValue qRetVal = Backend.getInstance().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId()));
    if (qRetVal.getSucceeded()) {
        Map<VmTemplate, ?> templates = qRetVal.getReturnValue();
        for (VmTemplate template : templates.keySet()) {
            if (getParameters().getVm().getVmtGuid().equals(template.getId())) {
                return true;
            }
        }
    }
    return false;
}
#end_block

#method_before
protected boolean checkTemplateInStorageDomain() {
    boolean retValue = getParameters().isImportAsNewEntity() || checkIfDisksExist(imageList);
    if (retValue && !VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid()) && !getParameters().getCopyCollapse()) {
        List<StorageDomain> domains = Backend.getInstance().runInternalQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(getVm().getVmtGuid())).getReturnValue();
        List<Guid> domainsId = LinqUtils.foreach(domains, new Function<StorageDomain, Guid>() {

            @Override
            public Guid eval(StorageDomain storageDomainStatic) {
                return storageDomainStatic.getId();
            }
        });
        if (Collections.disjoint(domainsId, imageToDestinationDomainMap.values())) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
        }
    }
    return retValue;
}
#method_after
protected boolean checkTemplateInStorageDomain() {
    boolean retValue = getParameters().isImportAsNewEntity() || checkIfDisksExist(imageList);
    if (retValue && !VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getVmtGuid()) && !getParameters().getCopyCollapse()) {
        List<StorageDomain> domains = Backend.getInstance().runInternalQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(getVm().getVmtGuid())).getReturnValue();
        List<Guid> domainsId = LinqUtils.foreach(domains, new Function<StorageDomain, Guid>() {

            @Override
            public Guid eval(StorageDomain storageDomainStatic) {
                return storageDomainStatic.getId();
            }
        });
        if (Collections.disjoint(domainsId, imageToDestinationDomainMap.values())) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
        }
    }
    return retValue;
}
#end_block

#method_before
protected void addVmImagesAndSnapshots() {
    Map<Guid, List<DiskImage>> images = ImagesHandler.getImagesLeaf(getVm().getImages());
    if (getParameters().getCopyCollapse()) {
        Guid snapshotId = Guid.newGuid();
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = getActiveVolumeDisk(diskList);
            disk.setParentId(VmTemplateHandler.BlankVmTemplateId);
            disk.setImageTemplateId(VmTemplateHandler.BlankVmTemplateId);
            disk.setVmSnapshotId(snapshotId);
            disk.setActive(true);
            if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(disk.getId())) {
                DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(disk.getId());
                disk.setvolumeFormat(diskImageBase.getVolumeFormat());
                disk.setVolumeType(diskImageBase.getVolumeType());
            }
            setDiskStorageDomainInfo(disk);
            if (getParameters().isImportAsNewEntity()) {
                generateNewDiskId(diskList, disk);
                updateManagedDeviceMap(disk, getVm().getStaticData().getManagedDeviceMap());
            } else {
                newDiskIdForDisk.put(disk.getId(), disk);
            }
            disk.setCreationDate(new Date());
            saveImage(disk);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            saveBaseDisk(disk);
            saveDiskImageDynamic(disk);
        }
        Snapshot snapshot = addActiveSnapshot(snapshotId);
        getVm().setSnapshots(Arrays.asList(snapshot));
    } else {
        Guid snapshotId = null;
        for (DiskImage disk : getVm().getImages()) {
            disk.setActive(false);
            setDiskStorageDomainInfo(disk);
            saveImage(disk);
            snapshotId = disk.getVmSnapshotId();
            saveSnapshotIfNotExists(snapshotId, disk);
            saveDiskImageDynamic(disk);
        }
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = getActiveVolumeDisk(diskList);
            newDiskIdForDisk.put(disk.getId(), disk);
            snapshotId = disk.getVmSnapshotId();
            disk.setActive(true);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            updateImage(disk);
            saveBaseDisk(disk);
        }
        // Update active snapshot's data, since it was inserted as a regular snapshot.
        updateActiveSnapshot(snapshotId);
    }
}
#method_after
protected void addVmImagesAndSnapshots() {
    Map<Guid, List<DiskImage>> images = ImagesHandler.getImagesLeaf(getVm().getImages());
    if (getParameters().getCopyCollapse()) {
        Guid snapshotId = Guid.newGuid();
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = getActiveVolumeDisk(diskList);
            disk.setParentId(VmTemplateHandler.BLANK_VM_TEMPLATE_ID);
            disk.setImageTemplateId(VmTemplateHandler.BLANK_VM_TEMPLATE_ID);
            disk.setVmSnapshotId(snapshotId);
            disk.setActive(true);
            if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(disk.getId())) {
                DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(disk.getId());
                disk.setvolumeFormat(diskImageBase.getVolumeFormat());
                disk.setVolumeType(diskImageBase.getVolumeType());
            }
            setDiskStorageDomainInfo(disk);
            if (getParameters().isImportAsNewEntity()) {
                generateNewDiskId(diskList, disk);
                updateManagedDeviceMap(disk, getVm().getStaticData().getManagedDeviceMap());
            } else {
                newDiskIdForDisk.put(disk.getId(), disk);
            }
            disk.setCreationDate(new Date());
            saveImage(disk);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            saveBaseDisk(disk);
            saveDiskImageDynamic(disk);
        }
        Snapshot snapshot = addActiveSnapshot(snapshotId);
        getVm().setSnapshots(Arrays.asList(snapshot));
    } else {
        Guid snapshotId = null;
        for (DiskImage disk : getVm().getImages()) {
            disk.setActive(false);
            setDiskStorageDomainInfo(disk);
            saveImage(disk);
            snapshotId = disk.getVmSnapshotId();
            saveSnapshotIfNotExists(snapshotId, disk);
            saveDiskImageDynamic(disk);
        }
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = getActiveVolumeDisk(diskList);
            newDiskIdForDisk.put(disk.getId(), disk);
            snapshotId = disk.getVmSnapshotId();
            disk.setActive(true);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            updateImage(disk);
            saveBaseDisk(disk);
        }
        // Update active snapshot's data, since it was inserted as a regular snapshot.
        updateActiveSnapshot(snapshotId);
    }
}
#end_block

#method_before
protected void addVmStatic() {
    logImportEvents();
    getVm().getStaticData().setId(getVmId());
    getVm().getStaticData().setCreationDate(new Date());
    getVm().getStaticData().setVdsGroupId(getParameters().getVdsGroupId());
    getVm().getStaticData().setMinAllocatedMem(computeMinAllocatedMem());
    getVm().getStaticData().setQuotaId(getParameters().getQuotaId());
    VmTemplate originalTemplate = DbFacade.getInstance().getVmTemplateDao().get(getVm().getOriginalTemplateGuid());
    if (originalTemplate != null) {
        // in case the original template name has been changed in the meantime
        getVm().getStaticData().setOriginalTemplateName(originalTemplate.getName());
    }
    if (getParameters().getCopyCollapse()) {
        getVm().setVmtGuid(VmTemplateHandler.BlankVmTemplateId);
    }
    getVmStaticDAO().save(getVm().getStaticData());
    getCompensationContext().snapshotNewEntity(getVm().getStaticData());
}
#method_after
protected void addVmStatic() {
    logImportEvents();
    getVm().getStaticData().setId(getVmId());
    getVm().getStaticData().setCreationDate(new Date());
    getVm().getStaticData().setVdsGroupId(getParameters().getVdsGroupId());
    getVm().getStaticData().setMinAllocatedMem(computeMinAllocatedMem());
    getVm().getStaticData().setQuotaId(getParameters().getQuotaId());
    if (getVm().getOriginalTemplateGuid() != null && !VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getOriginalTemplateGuid())) {
        // no need to check this for blank
        VmTemplate originalTemplate = getVmTemplateDAO().get(getVm().getOriginalTemplateGuid());
        if (originalTemplate != null) {
            // in case the original template name has been changed in the meantime
            getVm().getStaticData().setOriginalTemplateName(originalTemplate.getName());
        }
    }
    if (getParameters().getCopyCollapse()) {
        getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID);
    }
    getVmStaticDAO().save(getVm().getStaticData());
    getCompensationContext().snapshotNewEntity(getVm().getStaticData());
}
#end_block

#method_before
private void updateProperties() {
    VM vm = (VM) getEntity();
    setName(vm.getName());
    setDescription(vm.getVmDescription());
    // $NON-NLS-1$
    setQuotaName(vm.getQuotaName() != null ? vm.getQuotaName() : "");
    setQuotaAvailable(vm.getQuotaEnforcementType() != null && !vm.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED));
    setTemplate(vmTemplateNameRenderer.render(vm));
    // $NON-NLS-1$
    setDefinedMemory(vm.getVmMemSizeMb() + " MB");
    // $NON-NLS-1$
    setMinAllocatedMemory(vm.getMinAllocatedMem() + " MB");
    setOS(AsyncDataProvider.getOsName(vm.getVmOsId()));
    Translator translator = EnumTranslator.Create(DisplayType.class);
    setDefaultDisplayType(translator.get(vm.getDefaultDisplayType()));
    translator = EnumTranslator.Create(OriginType.class);
    setOrigin(translator.get(vm.getOrigin()));
    setIsHighlyAvailable(vm.isAutoStartup());
    setPriority(AsyncDataProvider.priorityToString(vm.getPriority()));
    setMonitorCount(vm.getNumOfMonitors());
    translator = EnumTranslator.Create(UsbPolicy.class);
    setUsbPolicy(translator.get(vm.getUsbPolicy()));
    setCpuInfo(ConstantsManager.getInstance().getMessages().cpuInfoLabel(vm.getNumOfCpus(), vm.getNumOfSockets(), vm.getCpuPerSocket()));
    setHasDomain(AsyncDataProvider.isWindowsOsType(vm.getVmOsId()));
    setDomain(vm.getVmDomain());
    setHasTimeZone(AsyncDataProvider.isWindowsOsType(vm.getVmOsId()));
    setTimeZone(vm.getTimeZone());
    // $NON-NLS-1$
    setHasCustomProperties(!StringHelper.stringsEqual(vm.getCustomProperties(), ""));
    // $NON-NLS-1$ //$NON-NLS-2$
    setCustomProperties(getHasCustomProperties() ? "Configured" : "Not-Configured");
    setCompatibilityVersion(vm.getVdsGroupCompatibilityVersion() != null ? vm.getVdsGroupCompatibilityVersion().toString() : // $NON-NLS-1$
    "");
    setVmId(vm.getId().toString());
    setFqdn(vm.getVmFQDN());
    setHasAlert(vm.getVmPauseStatus() != VmPauseStatus.NONE && vm.getVmPauseStatus() != VmPauseStatus.NOERR);
    if (getHasAlert()) {
        translator = EnumTranslator.Create(VmPauseStatus.class);
        setAlert(translator.get(vm.getVmPauseStatus()));
    } else {
        setAlert(null);
    }
    setHasDefaultHost(vm.getDedicatedVmForVds() != null);
    if (getHasDefaultHost()) {
        Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
        "Host: cluster = " + vm.getVdsGroupName() + " sortby name", SearchType.VDS), new // $NON-NLS-1$
        AsyncQuery(// $NON-NLS-1$
        this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                VmGeneralModel model = (VmGeneralModel) target;
                VM localVm = (VM) model.getEntity();
                if (localVm == null) {
                    return;
                }
                ArrayList<VDS> hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) returnValue).getReturnValue();
                for (VDS host : hosts) {
                    if (localVm.getDedicatedVmForVds() != null && host.getId().equals(localVm.getDedicatedVmForVds())) {
                        model.setDefaultHost(host.getName());
                        break;
                    }
                }
            }
        }));
    } else {
        setDefaultHost(ConstantsManager.getInstance().getConstants().anyHostInCluster());
    }
}
#method_after
private void updateProperties() {
    VM vm = (VM) getEntity();
    setName(vm.getName());
    setDescription(vm.getVmDescription());
    // $NON-NLS-1$
    setQuotaName(vm.getQuotaName() != null ? vm.getQuotaName() : "");
    setQuotaAvailable(vm.getQuotaEnforcementType() != null && !vm.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED));
    setTemplate(vmTemplateNameRenderer.render(vm));
    // $NON-NLS-1$
    setDefinedMemory(vm.getVmMemSizeMb() + " MB");
    // $NON-NLS-1$
    setMinAllocatedMemory(vm.getMinAllocatedMem() + " MB");
    setOS(AsyncDataProvider.getOsName(vm.getVmOsId()));
    Translator translator = EnumTranslator.create(DisplayType.class);
    setDefaultDisplayType(translator.get(vm.getDefaultDisplayType()));
    translator = EnumTranslator.create(OriginType.class);
    setOrigin(translator.get(vm.getOrigin()));
    setIsHighlyAvailable(vm.isAutoStartup());
    setPriority(AsyncDataProvider.priorityToString(vm.getPriority()));
    setMonitorCount(vm.getNumOfMonitors());
    translator = EnumTranslator.create(UsbPolicy.class);
    setUsbPolicy(translator.get(vm.getUsbPolicy()));
    setCpuInfo(ConstantsManager.getInstance().getMessages().cpuInfoLabel(vm.getNumOfCpus(), vm.getNumOfSockets(), vm.getCpuPerSocket()));
    setHasDomain(AsyncDataProvider.isWindowsOsType(vm.getVmOsId()));
    setDomain(vm.getVmDomain());
    setHasTimeZone(AsyncDataProvider.isWindowsOsType(vm.getVmOsId()));
    setTimeZone(vm.getTimeZone());
    // $NON-NLS-1$
    setHasCustomProperties(!StringHelper.stringsEqual(vm.getCustomProperties(), ""));
    // $NON-NLS-1$ //$NON-NLS-2$
    setCustomProperties(getHasCustomProperties() ? "Configured" : "Not-Configured");
    setCompatibilityVersion(vm.getVdsGroupCompatibilityVersion() != null ? vm.getVdsGroupCompatibilityVersion().toString() : // $NON-NLS-1$
    "");
    setVmId(vm.getId().toString());
    setFqdn(vm.getVmFQDN());
    setHasAlert(vm.getVmPauseStatus() != VmPauseStatus.NONE && vm.getVmPauseStatus() != VmPauseStatus.NOERR);
    if (getHasAlert()) {
        translator = EnumTranslator.create(VmPauseStatus.class);
        setAlert(translator.get(vm.getVmPauseStatus()));
    } else {
        setAlert(null);
    }
    setHasDefaultHost(vm.getDedicatedVmForVds() != null);
    if (getHasDefaultHost()) {
        Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
        "Host: cluster = " + vm.getVdsGroupName() + " sortby name", SearchType.VDS), new // $NON-NLS-1$
        AsyncQuery(// $NON-NLS-1$
        this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                VmGeneralModel model = (VmGeneralModel) target;
                VM localVm = (VM) model.getEntity();
                if (localVm == null) {
                    return;
                }
                ArrayList<VDS> hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) returnValue).getReturnValue();
                for (VDS host : hosts) {
                    if (localVm.getDedicatedVmForVds() != null && host.getId().equals(localVm.getDedicatedVmForVds())) {
                        model.setDefaultHost(host.getName());
                        break;
                    }
                }
            }
        }));
    } else {
        setDefaultHost(ConstantsManager.getInstance().getConstants().anyHostInCluster());
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retVal = true;
    if (getVmTemplate() == null) {
        retVal = false;
    } else {
        setDescription(getVmTemplateName());
    }
    // check that the storage pool is valid
    retVal = retVal && checkStoragePool();
    if (retVal) {
        // set the source domain and check that it is ImportExport type and active
        setSourceDomainId(getParameters().getSourceDomainId());
        StorageDomainValidator sourceDomainValidator = new StorageDomainValidator(getSourceDomain());
        retVal = validate(sourceDomainValidator.isDomainExistAndActive());
    }
    if (retVal && getSourceDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // Set the template images from the Export domain and change each image id storage is to the import domain
        GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId());
        VdcQueryReturnValue qretVal = getBackend().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar);
        retVal = qretVal.getSucceeded();
        if (retVal) {
            Map<VmTemplate, List<DiskImage>> templates = qretVal.getReturnValue();
            ArrayList<DiskImage> images = new ArrayList<DiskImage>();
            for (Map.Entry<VmTemplate, List<DiskImage>> entry : templates.entrySet()) {
                if (entry.getKey().getId().equals(getVmTemplate().getId())) {
                    images = new ArrayList<DiskImage>(entry.getValue());
                    getVmTemplate().setInterfaces(entry.getKey().getInterfaces());
                    getVmTemplate().setOvfVersion(entry.getKey().getOvfVersion());
                    break;
                }
            }
            getParameters().setImages(images);
            getVmTemplate().setImages(images);
            ensureDomainMap(getParameters().getImages(), getParameters().getDestDomainId());
            HashMap<Guid, DiskImage> imageMap = new HashMap<Guid, DiskImage>();
            for (DiskImage image : images) {
                if (Guid.Empty.equals(image.getVmSnapshotId())) {
                    retVal = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID);
                    break;
                }
                StorageDomain storageDomain = getStorageDomain(imageToDestinationDomainMap.get(image.getId()));
                StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
                retVal = validate(validator.isDomainExistAndActive()) && validate(validator.domainIsValidDestination());
                if (!retVal) {
                    break;
                }
                StorageDomainStatic targetDomain = storageDomain.getStorageStaticData();
                changeRawToCowIfSparseOnBlockDevice(targetDomain.getStorageType(), image);
                retVal = ImagesHandler.checkImageConfiguration(targetDomain, image, getReturnValue().getCanDoActionMessages());
                if (!retVal) {
                    break;
                } else {
                    image.setStoragePoolId(getParameters().getStoragePoolId());
                    image.setStorageIds(new ArrayList<Guid>(Arrays.asList(storageDomain.getId())));
                    imageMap.put(image.getImageId(), image);
                }
            }
            getVmTemplate().setDiskImageMap(imageMap);
        }
    }
    if (retVal && getParameters().isImportAsNewEntity()) {
        initImportClonedTemplate();
    }
    if (retVal) {
        VmTemplate duplicateTemplate = getVmTemplateDAO().get(getParameters().getVmTemplate().getId());
        // check that the template does not exists in the target domain
        if (duplicateTemplate != null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_IMPORT_TEMPLATE_EXISTS);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", duplicateTemplate.getName()));
            retVal = false;
        } else if (isVmTemplateWithSameNameExist()) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_TEMPLATE_NAME_EXISTS);
            retVal = false;
        }
    }
    if (retVal) {
        retVal = validateNoDuplicateDiskImages(getParameters().getImages());
    }
    if (retVal && getParameters().getImages() != null && !getParameters().getImages().isEmpty()) {
        Map<StorageDomain, Integer> domainMap = getSpaceRequirementsForStorageDomains(new ArrayList<DiskImage>(getVmTemplate().getDiskImageMap().values()));
        if (domainMap.isEmpty()) {
            int sz = 0;
            if (getVmTemplate().getDiskImageMap() != null) {
                for (DiskImage image : getVmTemplate().getDiskImageMap().values()) {
                    sz += image.getSize();
                }
            }
            domainMap.put(getStorageDomain(), sz);
        }
        for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
            if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
                return false;
            }
        }
    }
    if (retVal) {
        retVal = validateMacAddress(Entities.<VmNic, VmNetworkInterface>upcast(getVmTemplate().getInterfaces()));
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TEMPLATE);
    }
    return retVal;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retVal = true;
    if (getVmTemplate() == null) {
        retVal = false;
    } else {
        setDescription(getVmTemplateName());
    }
    // check that the storage pool is valid
    retVal = retVal && checkStoragePool();
    if (retVal) {
        retVal = validateTemplateArchitecture();
    }
    if (retVal) {
        retVal = isVDSGroupCompatible();
    }
    if (retVal) {
        // set the source domain and check that it is ImportExport type and active
        setSourceDomainId(getParameters().getSourceDomainId());
        StorageDomainValidator sourceDomainValidator = new StorageDomainValidator(getSourceDomain());
        retVal = validate(sourceDomainValidator.isDomainExistAndActive());
    }
    if (retVal && getSourceDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // Set the template images from the Export domain and change each image id storage is to the import domain
        GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId());
        VdcQueryReturnValue qretVal = getBackend().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar);
        retVal = qretVal.getSucceeded();
        if (retVal) {
            Map<VmTemplate, List<DiskImage>> templates = qretVal.getReturnValue();
            ArrayList<DiskImage> images = new ArrayList<DiskImage>();
            for (Map.Entry<VmTemplate, List<DiskImage>> entry : templates.entrySet()) {
                if (entry.getKey().getId().equals(getVmTemplate().getId())) {
                    images = new ArrayList<DiskImage>(entry.getValue());
                    getVmTemplate().setInterfaces(entry.getKey().getInterfaces());
                    getVmTemplate().setOvfVersion(entry.getKey().getOvfVersion());
                    break;
                }
            }
            getParameters().setImages(images);
            getVmTemplate().setImages(images);
            ensureDomainMap(getParameters().getImages(), getParameters().getDestDomainId());
            HashMap<Guid, DiskImage> imageMap = new HashMap<Guid, DiskImage>();
            for (DiskImage image : images) {
                if (Guid.Empty.equals(image.getVmSnapshotId())) {
                    retVal = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID);
                    break;
                }
                StorageDomain storageDomain = getStorageDomain(imageToDestinationDomainMap.get(image.getId()));
                StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
                retVal = validate(validator.isDomainExistAndActive()) && validate(validator.domainIsValidDestination());
                if (!retVal) {
                    break;
                }
                StorageDomainStatic targetDomain = storageDomain.getStorageStaticData();
                changeRawToCowIfSparseOnBlockDevice(targetDomain.getStorageType(), image);
                retVal = ImagesHandler.checkImageConfiguration(targetDomain, image, getReturnValue().getCanDoActionMessages());
                if (!retVal) {
                    break;
                } else {
                    image.setStoragePoolId(getParameters().getStoragePoolId());
                    image.setStorageIds(new ArrayList<Guid>(Arrays.asList(storageDomain.getId())));
                    imageMap.put(image.getImageId(), image);
                }
            }
            getVmTemplate().setDiskImageMap(imageMap);
        }
    }
    if (retVal && getParameters().isImportAsNewEntity()) {
        initImportClonedTemplate();
    }
    if (retVal) {
        VmTemplate duplicateTemplate = getVmTemplateDAO().get(getParameters().getVmTemplate().getId());
        // check that the template does not exists in the target domain
        if (duplicateTemplate != null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_IMPORT_TEMPLATE_EXISTS);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", duplicateTemplate.getName()));
            retVal = false;
        } else if (isVmTemplateWithSameNameExist()) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_TEMPLATE_NAME_EXISTS);
            retVal = false;
        }
    }
    if (retVal) {
        retVal = validateNoDuplicateDiskImages(getParameters().getImages());
    }
    if (retVal && getParameters().getImages() != null && !getParameters().getImages().isEmpty()) {
        Map<StorageDomain, Integer> domainMap = getSpaceRequirementsForStorageDomains(new ArrayList<DiskImage>(getVmTemplate().getDiskImageMap().values()));
        if (domainMap.isEmpty()) {
            int sz = 0;
            if (getVmTemplate().getDiskImageMap() != null) {
                for (DiskImage image : getVmTemplate().getDiskImageMap().values()) {
                    sz += image.getSize();
                }
            }
            domainMap.put(getStorageDomain(), sz);
        }
        for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
            if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
                return false;
            }
        }
    }
    if (retVal) {
        retVal = validateMacAddress(Entities.<VmNic, VmNetworkInterface>upcast(getVmTemplate().getInterfaces()));
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TEMPLATE);
    }
    return retVal;
}
#end_block

#method_before
private void updateOriginalTemplateNameOnDerivedVms() {
    if (!getParameters().isImportAsNewEntity()) {
        // in case it has been renamed
        DbFacade.getInstance().getVmDao().updateOriginalTemplateName(getVmTemplate().getId(), getVmTemplate().getName());
    }
}
#method_after
private void updateOriginalTemplateNameOnDerivedVms() {
    if (!getParameters().isImportAsNewEntity()) {
        // in case it has been renamed
        getVmDAO().updateOriginalTemplateName(getVmTemplate().getId(), getVmTemplate().getName());
    }
}
#end_block

#method_before
@Override
protected void moveOrCopyAllImageGroups(final Guid containerID, final Iterable<DiskImage> disks) {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            for (DiskImage disk : disks) {
                Guid originalDiskId = newDiskIdForDisk.get(disk.getId()).getId();
                Guid destinationDomain = imageToDestinationDomainMap.get(originalDiskId);
                MoveOrCopyImageGroupParameters tempVar = new MoveOrCopyImageGroupParameters(containerID, originalDiskId, newDiskIdForDisk.get(disk.getId()).getImageId(), disk.getId(), disk.getImageId(), destinationDomain, getMoveOrCopyImageOperation());
                tempVar.setParentCommand(getActionType());
                tempVar.setUseCopyCollapse(true);
                tempVar.setVolumeType(disk.getVolumeType());
                tempVar.setVolumeFormat(disk.getVolumeFormat());
                tempVar.setCopyVolumeType(CopyVolumeType.SharedVol);
                tempVar.setSourceDomainId(getParameters().getSourceDomainId());
                tempVar.setForceOverride(getParameters().getForceOverride());
                tempVar.setImportEntity(true);
                tempVar.setEntityInfo(new EntityInfo(VdcObjectType.VmTemplate, containerID));
                for (DiskImage diskImage : getParameters().getVmTemplate().getDiskList()) {
                    if (originalDiskId.equals(diskImage.getId())) {
                        tempVar.setQuotaId(diskImage.getQuotaId());
                        break;
                    }
                }
                MoveOrCopyImageGroupParameters p = tempVar;
                p.setParentParameters(getParameters());
                VdcReturnValueBase vdcRetValue = Backend.getInstance().runInternalAction(VdcActionType.CopyImageGroup, p, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
                if (!vdcRetValue.getSucceeded()) {
                    throw ((vdcRetValue.getFault() != null) ? new VdcBLLException(vdcRetValue.getFault().getError()) : new VdcBLLException(VdcBllErrors.ENGINE));
                }
                getReturnValue().getVdsmTaskIdList().addAll(vdcRetValue.getInternalVdsmTaskIdList());
            }
            return null;
        }
    });
}
#method_after
@Override
protected void moveOrCopyAllImageGroups(final Guid containerID, final Iterable<DiskImage> disks) {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            for (DiskImage disk : disks) {
                Guid originalDiskId = newDiskIdForDisk.get(disk.getId()).getId();
                Guid destinationDomain = imageToDestinationDomainMap.get(originalDiskId);
                MoveOrCopyImageGroupParameters tempVar = new MoveOrCopyImageGroupParameters(containerID, originalDiskId, newDiskIdForDisk.get(disk.getId()).getImageId(), disk.getId(), disk.getImageId(), destinationDomain, getMoveOrCopyImageOperation());
                tempVar.setParentCommand(getActionType());
                tempVar.setUseCopyCollapse(true);
                tempVar.setVolumeType(disk.getVolumeType());
                tempVar.setVolumeFormat(disk.getVolumeFormat());
                tempVar.setCopyVolumeType(CopyVolumeType.SharedVol);
                tempVar.setSourceDomainId(getParameters().getSourceDomainId());
                tempVar.setForceOverride(getParameters().getForceOverride());
                tempVar.setImportEntity(true);
                tempVar.setEntityInfo(new EntityInfo(VdcObjectType.VmTemplate, containerID));
                tempVar.setRevertDbOperationScope(ImageDbOperationScope.IMAGE);
                for (DiskImage diskImage : getParameters().getVmTemplate().getDiskList()) {
                    if (originalDiskId.equals(diskImage.getId())) {
                        tempVar.setQuotaId(diskImage.getQuotaId());
                        break;
                    }
                }
                MoveOrCopyImageGroupParameters p = tempVar;
                p.setParentParameters(getParameters());
                VdcReturnValueBase vdcRetValue = Backend.getInstance().runInternalAction(VdcActionType.CopyImageGroup, p, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
                if (!vdcRetValue.getSucceeded()) {
                    throw ((vdcRetValue.getFault() != null) ? new VdcBLLException(vdcRetValue.getFault().getError()) : new VdcBLLException(VdcBllErrors.ENGINE));
                }
                getReturnValue().getVdsmTaskIdList().addAll(vdcRetValue.getInternalVdsmTaskIdList());
            }
            return null;
        }
    });
}
#end_block

#method_before
@Override
protected void endMoveOrCopyCommand() {
    VmTemplateHandler.UnLockVmTemplate(getVmTemplateId());
    endActionOnAllImageGroups();
    setSucceeded(true);
}
#method_after
@Override
protected void endMoveOrCopyCommand() {
    VmTemplateHandler.unlockVmTemplate(getVmTemplateId());
    endActionOnAllImageGroups();
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected void readOsSection(XmlNode section) {
    _vm.getStaticData().setId(new Guid(section.Attributes.get("ovf:id").getValue()));
    XmlNode node = section.SelectSingleNode("Description");
    if (node != null) {
        _vm.getStaticData().setOsId(osRepository.getOsIdByUniqueName(node.InnerText));
    }
}
#method_after
@Override
protected void readOsSection(XmlNode section) {
    _vm.getStaticData().setId(new Guid(section.attributes.get("ovf:id").getValue()));
    XmlNode node = section.SelectSingleNode("Description");
    if (node != null) {
        int osId = osRepository.getOsIdByUniqueName(node.innerText);
        _vm.getStaticData().setOsId(osId);
        _vm.setClusterArch(osRepository.getArchitectureFromOS(osId));
    } else {
        _vm.setClusterArch(ArchitectureType.undefined);
    }
}
#end_block

#method_before
@Override
protected void readHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        String resourceType = node.SelectSingleNode("rasd:ResourceType", _xmlNS).InnerText;
        if (OvfHardware.CPU.equals(resourceType)) {
            _vm.getStaticData().setNumOfSockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).InnerText));
            _vm.getStaticData().setCpuPerSocket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).InnerText));
        } else if (OvfHardware.Memory.equals(resourceType)) {
            _vm.getStaticData().setMemSizeMb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
        } else if (OvfHardware.DiskImage.equals(resourceType)) {
            final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText);
            DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                @Override
                public boolean eval(DiskImage diskImage) {
                    return diskImage.getImageId().equals(guid);
                }
            });
            image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).InnerText));
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText)) {
                image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText)) {
                image.setImageTemplateId(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText));
            }
            image.setAppList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).InnerText);
            XmlNode storageNode = node.SelectSingleNode("rasd:StorageId", _xmlNS);
            if (storageNode != null && StringUtils.isNotEmpty(storageNode.InnerText)) {
                image.setStorageIds(new ArrayList<Guid>(Arrays.asList(new Guid(storageNode.InnerText))));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText)) {
                image.setStoragePoolId(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText));
            }
            final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).InnerText);
            if (creationDate != null) {
                image.setCreationDate(creationDate);
            }
            final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).InnerText);
            if (lastModified != null) {
                image.setLastModified(lastModified);
            }
            final Date last_modified_date = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:last_modified_date", _xmlNS).InnerText);
            if (last_modified_date != null) {
                image.setLastModifiedDate(last_modified_date);
            }
            VmDevice readDevice = readVmDevice(node, _vm.getStaticData(), image.getId(), Boolean.TRUE);
            image.setPlugged(readDevice.getIsPlugged());
        } else if (OvfHardware.Network.equals(resourceType)) {
            VmNetworkInterface iface = getNetwotkInterface(node);
            updateSingleNic(node, iface);
            _vm.getInterfaces().add(iface);
            readVmDevice(node, _vm.getStaticData(), iface.getId(), Boolean.TRUE);
        } else if (OvfHardware.USB.equals(resourceType)) {
            _vm.getStaticData().setUsbPolicy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).InnerText));
        } else if (OvfHardware.Monitor.equals(resourceType)) {
            _vm.getStaticData().setNumOfMonitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
            if (node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS) != null) {
                _vm.setSingleQxlPci(Boolean.parseBoolean(node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS).InnerText));
            }
            readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
        } else if (OvfHardware.CD.equals(resourceType)) {
            readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
        } else if (OvfHardware.OTHER.equals(resourceType)) {
            if (node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS) != null && StringUtils.isNotEmpty(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText)) {
                VmDeviceGeneralType type = VmDeviceGeneralType.forValue(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText));
                String device = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).InnerText);
                // special devices are treated as managed devices but still have the OTHER OVF ResourceType
                if (VmDeviceCommonUtils.isSpecialDevice(device, type)) {
                    readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
                } else {
                    readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.FALSE);
                }
            } else {
                readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.FALSE);
            }
        }
    }
}
#method_after
@Override
protected void readHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        String resourceType = node.SelectSingleNode("rasd:ResourceType", _xmlNS).innerText;
        if (OvfHardware.CPU.equals(resourceType)) {
            _vm.getStaticData().setNumOfSockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).innerText));
            _vm.getStaticData().setCpuPerSocket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).innerText));
        } else if (OvfHardware.Memory.equals(resourceType)) {
            _vm.getStaticData().setMemSizeMb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).innerText));
        } else if (OvfHardware.DiskImage.equals(resourceType)) {
            final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).innerText);
            DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                @Override
                public boolean eval(DiskImage diskImage) {
                    return diskImage.getImageId().equals(guid);
                }
            });
            image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).innerText));
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).innerText)) {
                image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).innerText));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).innerText)) {
                image.setImageTemplateId(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).innerText));
            }
            image.setAppList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).innerText);
            XmlNode storageNode = node.SelectSingleNode("rasd:StorageId", _xmlNS);
            if (storageNode != null && StringUtils.isNotEmpty(storageNode.innerText)) {
                image.setStorageIds(new ArrayList<Guid>(Arrays.asList(new Guid(storageNode.innerText))));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).innerText)) {
                image.setStoragePoolId(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).innerText));
            }
            final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).innerText);
            if (creationDate != null) {
                image.setCreationDate(creationDate);
            }
            final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).innerText);
            if (lastModified != null) {
                image.setLastModified(lastModified);
            }
            final Date last_modified_date = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:last_modified_date", _xmlNS).innerText);
            if (last_modified_date != null) {
                image.setLastModifiedDate(last_modified_date);
            }
            VmDevice readDevice = readVmDevice(node, _vm.getStaticData(), image.getId(), Boolean.TRUE);
            image.setPlugged(readDevice.getIsPlugged());
            image.setReadOnly(readDevice.getIsReadOnly());
        } else if (OvfHardware.Network.equals(resourceType)) {
            VmNetworkInterface iface = getNetwotkInterface(node);
            updateSingleNic(node, iface);
            _vm.getInterfaces().add(iface);
            readVmDevice(node, _vm.getStaticData(), iface.getId(), Boolean.TRUE);
        } else if (OvfHardware.USB.equals(resourceType)) {
            _vm.getStaticData().setUsbPolicy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).innerText));
        } else if (OvfHardware.Monitor.equals(resourceType)) {
            _vm.getStaticData().setNumOfMonitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).innerText));
            if (node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS) != null) {
                _vm.setSingleQxlPci(Boolean.parseBoolean(node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS).innerText));
            }
            readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
        } else if (OvfHardware.CD.equals(resourceType)) {
            readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
        } else if (OvfHardware.OTHER.equals(resourceType)) {
            if (node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS) != null && StringUtils.isNotEmpty(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).innerText)) {
                VmDeviceGeneralType type = VmDeviceGeneralType.forValue(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).innerText));
                String device = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).innerText);
                // special devices are treated as managed devices but still have the OTHER OVF ResourceType
                if (VmDeviceCommonUtils.isSpecialDevice(device, type)) {
                    readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
                } else {
                    readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.FALSE);
                }
            } else {
                readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.FALSE);
            }
        }
    }
}
#end_block

#method_before
@Override
protected void readGeneralData(XmlNode content) {
    // General Vm
    XmlNode node = content.SelectSingleNode("Name");
    if (node != null) {
        _vm.getStaticData().setName(node.InnerText);
        name = _vm.getStaticData().getName();
    }
    node = content.SelectSingleNode("TemplateId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            _vm.getStaticData().setVmtGuid(new Guid(node.InnerText));
        }
    }
    node = content.SelectSingleNode("TemplateName");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            _vm.setVmtName(node.InnerText);
        }
    }
    node = content.SelectSingleNode("InstanceTypeId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            _vm.setInstanceTypeId(new Guid(node.InnerText));
        }
    }
    node = content.SelectSingleNode("ImageTypeId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            _vm.setImageTypeId(new Guid(node.InnerText));
        }
    }
    node = content.SelectSingleNode("IsInitilized");
    if (node != null) {
        _vm.getStaticData().setInitialized(Boolean.parseBoolean(node.InnerText));
    }
    node = content.SelectSingleNode("quota_id");
    if (node != null) {
        Guid quotaId = new Guid(node.InnerText);
        if (!Guid.Empty.equals(quotaId)) {
            _vm.getStaticData().setQuotaId(quotaId);
        }
    }
    OvfLogEventHandler<VmStatic> handler = new VMStaticOvfLogHandler(_vm.getStaticData());
    // Gets a list of all the aliases of the fields that should be logged in
    // ovd For each one of these fields, the proper value will be read from
    // the ovf and field in vm static
    List<String> aliases = handler.getAliases();
    for (String alias : aliases) {
        String value = readEventLogValue(content, alias);
        if (StringUtils.isNotEmpty(value)) {
            handler.addValueForAlias(alias, value);
        }
    }
    node = content.SelectSingleNode("app_list");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            _vm.setAppList(node.InnerText);
        }
    } else // if no app list in VM, get it from one of the leafs
    if (_images != null && _images.size() > 0) {
        int root = GetFirstImage(_images, _images.get(0));
        if (root != -1) {
            for (int i = 0; i < _images.size(); i++) {
                int x = GetNextImage(_images, _images.get(i));
                if (x == -1) {
                    _vm.setAppList(_images.get(i).getAppList());
                }
            }
        } else {
            _vm.setAppList(_images.get(0).getAppList());
        }
    }
    node = content.SelectSingleNode("TrustedService");
    if (node != null) {
        _vm.setTrustedService(Boolean.parseBoolean(node.InnerText));
    }
    node = content.SelectSingleNode("OriginalTemplateGuid");
    if (node != null) {
        _vm.getStaticData().setOriginalTemplateGuid(new Guid(node.InnerText));
    }
    node = content.SelectSingleNode("OriginalTemplateName");
    if (node != null) {
        _vm.getStaticData().setOriginalTemplateName(node.InnerText);
    }
}
#method_after
@Override
protected void readGeneralData(XmlNode content) {
    // General Vm
    XmlNode node = content.SelectSingleNode("Name");
    if (node != null) {
        _vm.getStaticData().setName(node.innerText);
        name = _vm.getStaticData().getName();
    }
    node = content.SelectSingleNode("TemplateId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            _vm.getStaticData().setVmtGuid(new Guid(node.innerText));
        }
    }
    node = content.SelectSingleNode("TemplateName");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            _vm.setVmtName(node.innerText);
        }
    }
    node = content.SelectSingleNode("InstanceTypeId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            _vm.setInstanceTypeId(new Guid(node.innerText));
        }
    }
    node = content.SelectSingleNode("ImageTypeId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            _vm.setImageTypeId(new Guid(node.innerText));
        }
    }
    node = content.SelectSingleNode("IsInitilized");
    if (node != null) {
        _vm.getStaticData().setInitialized(Boolean.parseBoolean(node.innerText));
    }
    node = content.SelectSingleNode("quota_id");
    if (node != null) {
        Guid quotaId = new Guid(node.innerText);
        if (!Guid.Empty.equals(quotaId)) {
            _vm.getStaticData().setQuotaId(quotaId);
        }
    }
    OvfLogEventHandler<VmStatic> handler = new VMStaticOvfLogHandler(_vm.getStaticData());
    // Gets a list of all the aliases of the fields that should be logged in
    // ovd For each one of these fields, the proper value will be read from
    // the ovf and field in vm static
    List<String> aliases = handler.getAliases();
    for (String alias : aliases) {
        String value = readEventLogValue(content, alias);
        if (StringUtils.isNotEmpty(value)) {
            handler.addValueForAlias(alias, value);
        }
    }
    node = content.SelectSingleNode("app_list");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            _vm.setAppList(node.innerText);
        }
    } else // if no app list in VM, get it from one of the leafs
    if (_images != null && _images.size() > 0) {
        int root = GetFirstImage(_images, _images.get(0));
        if (root != -1) {
            for (int i = 0; i < _images.size(); i++) {
                int x = GetNextImage(_images, _images.get(i));
                if (x == -1) {
                    _vm.setAppList(_images.get(i).getAppList());
                }
            }
        } else {
            _vm.setAppList(_images.get(0).getAppList());
        }
    }
    node = content.SelectSingleNode("TrustedService");
    if (node != null) {
        _vm.setTrustedService(Boolean.parseBoolean(node.innerText));
    }
    node = content.SelectSingleNode("OriginalTemplateId");
    if (node != null) {
        _vm.getStaticData().setOriginalTemplateGuid(new Guid(node.innerText));
    }
    node = content.SelectSingleNode("OriginalTemplateName");
    if (node != null) {
        _vm.getStaticData().setOriginalTemplateName(node.innerText);
    }
}
#end_block

#method_before
private String readEventLogValue(XmlNode content, String name) {
    StringBuilder fullNameSB = new StringBuilder(EXPORT_ONLY_PREFIX);
    fullNameSB.append(name);
    XmlNode node = content.SelectSingleNode(fullNameSB.toString());
    if (node != null) {
        return node.InnerText;
    }
    return null;
}
#method_after
private String readEventLogValue(XmlNode content, String name) {
    StringBuilder fullNameSB = new StringBuilder(EXPORT_ONLY_PREFIX);
    fullNameSB.append(name);
    XmlNode node = content.SelectSingleNode(fullNameSB.toString());
    if (node != null) {
        return node.innerText;
    }
    return null;
}
#end_block

#method_before
@Override
protected void readSnapshotsSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Snapshot");
    ArrayList<Snapshot> snapshots = new ArrayList<Snapshot>();
    _vm.setSnapshots(snapshots);
    for (XmlNode node : list) {
        XmlNode vmConfiguration = node.SelectSingleNode("VmConfiguration", _xmlNS);
        Snapshot snapshot = new Snapshot(vmConfiguration != null);
        snapshot.setId(new Guid(node.Attributes.get("ovf:id").getValue()));
        snapshot.setVmId(_vm.getId());
        snapshot.setType(SnapshotType.valueOf(node.SelectSingleNode("Type", _xmlNS).InnerText));
        snapshot.setStatus(SnapshotStatus.OK);
        snapshot.setDescription(node.SelectSingleNode("Description", _xmlNS).InnerText);
        XmlNode memory = node.SelectSingleNode("Memory", _xmlNS);
        if (memory != null) {
            snapshot.setMemoryVolume(memory.InnerText);
        }
        final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("CreationDate", _xmlNS).InnerText);
        if (creationDate != null) {
            snapshot.setCreationDate(creationDate);
        }
        snapshot.setVmConfiguration(vmConfiguration == null ? null : new String(Base64.decodeBase64(vmConfiguration.InnerText)));
        XmlNode appList = node.SelectSingleNode("ApplicationList", _xmlNS);
        if (appList != null) {
            snapshot.setAppList(appList.InnerText);
        }
        snapshots.add(snapshot);
    }
}
#method_after
@Override
protected void readSnapshotsSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Snapshot");
    ArrayList<Snapshot> snapshots = new ArrayList<Snapshot>();
    _vm.setSnapshots(snapshots);
    for (XmlNode node : list) {
        XmlNode vmConfiguration = node.SelectSingleNode("VmConfiguration", _xmlNS);
        Snapshot snapshot = new Snapshot(vmConfiguration != null);
        snapshot.setId(new Guid(node.attributes.get("ovf:id").getValue()));
        snapshot.setVmId(_vm.getId());
        snapshot.setType(SnapshotType.valueOf(node.SelectSingleNode("Type", _xmlNS).innerText));
        snapshot.setStatus(SnapshotStatus.OK);
        snapshot.setDescription(node.SelectSingleNode("Description", _xmlNS).innerText);
        XmlNode memory = node.SelectSingleNode("Memory", _xmlNS);
        if (memory != null) {
            snapshot.setMemoryVolume(memory.innerText);
        }
        final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("CreationDate", _xmlNS).innerText);
        if (creationDate != null) {
            snapshot.setCreationDate(creationDate);
        }
        snapshot.setVmConfiguration(vmConfiguration == null ? null : new String(Base64.decodeBase64(vmConfiguration.innerText)));
        XmlNode appList = node.SelectSingleNode("ApplicationList", _xmlNS);
        if (appList != null) {
            snapshot.setAppList(appList.innerText);
        }
        snapshots.add(snapshot);
    }
}
#end_block

#method_before
@Override
protected void writeGeneralData() {
    super.writeGeneralData();
    _writer.WriteStartElement("Name");
    _writer.WriteRaw(_vm.getStaticData().getName());
    _writer.WriteEndElement();
    _writer.WriteStartElement("TemplateId");
    _writer.WriteRaw(_vm.getStaticData().getVmtGuid().toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement("TemplateName");
    _writer.WriteRaw(_vm.getVmtName());
    _writer.WriteEndElement();
    if (_vm.getInstanceTypeId() != null) {
        _writer.WriteStartElement("InstanceTypeId");
        _writer.WriteRaw(_vm.getInstanceTypeId().toString());
        _writer.WriteEndElement();
    }
    if (_vm.getImageTypeId() != null) {
        _writer.WriteStartElement("ImageTypeId");
        _writer.WriteRaw(_vm.getImageTypeId().toString());
        _writer.WriteEndElement();
    }
    _writer.WriteStartElement("IsInitilized");
    _writer.WriteRaw(String.valueOf(_vm.getStaticData().isInitialized()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("Origin");
    _writer.WriteRaw(String.valueOf(_vm.getOrigin().getValue()));
    _writer.WriteEndElement();
    if (!StringUtils.isBlank(_vm.getAppList())) {
        _writer.WriteStartElement("app_list");
        _writer.WriteRaw(_vm.getAppList());
        _writer.WriteEndElement();
    }
    if (_vm.getQuotaId() != null) {
        _writer.WriteStartElement("quota_id");
        _writer.WriteRaw(_vm.getQuotaId().toString());
        _writer.WriteEndElement();
    }
    _writer.WriteStartElement("DefaultDisplayType");
    _writer.WriteRaw(String.valueOf(_vm.getDefaultDisplayType().getValue()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("TrustedService");
    _writer.WriteRaw(String.valueOf(_vm.isTrustedService()));
    _writer.WriteEndElement();
    if (_vm.getStaticData().getOriginalTemplateGuid() != null) {
        _writer.WriteStartElement("OriginalTemplateGuid");
        _writer.WriteRaw(_vm.getStaticData().getOriginalTemplateGuid().toString());
        _writer.WriteEndElement();
    }
    if (_vm.getStaticData().getOriginalTemplateName() != null) {
        _writer.WriteStartElement("OriginalTemplateName");
        _writer.WriteRaw(_vm.getStaticData().getOriginalTemplateName());
        _writer.WriteEndElement();
    }
    OvfLogEventHandler<VmStatic> handler = new VMStaticOvfLogHandler(_vm.getStaticData());
    // Gets a map that its keys are aliases to fields that should be OVF
    // logged.
    Map<String, String> aliasesValuesMap = handler.getAliasesValuesMap();
    for (Map.Entry<String, String> entry : aliasesValuesMap.entrySet()) {
        writeLogEvent(entry.getKey(), entry.getValue());
    }
}
#method_after
@Override
protected void writeGeneralData() {
    super.writeGeneralData();
    _writer.WriteStartElement("Name");
    _writer.WriteRaw(_vm.getStaticData().getName());
    _writer.WriteEndElement();
    _writer.WriteStartElement("TemplateId");
    _writer.WriteRaw(_vm.getStaticData().getVmtGuid().toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement("TemplateName");
    _writer.WriteRaw(_vm.getVmtName());
    _writer.WriteEndElement();
    if (_vm.getInstanceTypeId() != null) {
        _writer.WriteStartElement("InstanceTypeId");
        _writer.WriteRaw(_vm.getInstanceTypeId().toString());
        _writer.WriteEndElement();
    }
    if (_vm.getImageTypeId() != null) {
        _writer.WriteStartElement("ImageTypeId");
        _writer.WriteRaw(_vm.getImageTypeId().toString());
        _writer.WriteEndElement();
    }
    _writer.WriteStartElement("IsInitilized");
    _writer.WriteRaw(String.valueOf(_vm.getStaticData().isInitialized()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("Origin");
    _writer.WriteRaw(String.valueOf(_vm.getOrigin().getValue()));
    _writer.WriteEndElement();
    if (!StringUtils.isBlank(_vm.getAppList())) {
        _writer.WriteStartElement("app_list");
        _writer.WriteRaw(_vm.getAppList());
        _writer.WriteEndElement();
    }
    if (_vm.getQuotaId() != null) {
        _writer.WriteStartElement("quota_id");
        _writer.WriteRaw(_vm.getQuotaId().toString());
        _writer.WriteEndElement();
    }
    _writer.WriteStartElement("DefaultDisplayType");
    _writer.WriteRaw(String.valueOf(_vm.getDefaultDisplayType().getValue()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("TrustedService");
    _writer.WriteRaw(String.valueOf(_vm.isTrustedService()));
    _writer.WriteEndElement();
    if (_vm.getStaticData().getOriginalTemplateGuid() != null) {
        _writer.WriteStartElement("OriginalTemplateId");
        _writer.WriteRaw(_vm.getStaticData().getOriginalTemplateGuid().toString());
        _writer.WriteEndElement();
    }
    if (_vm.getStaticData().getOriginalTemplateName() != null) {
        _writer.WriteStartElement("OriginalTemplateName");
        _writer.WriteRaw(_vm.getStaticData().getOriginalTemplateName());
        _writer.WriteEndElement();
    }
    OvfLogEventHandler<VmStatic> handler = new VMStaticOvfLogHandler(_vm.getStaticData());
    // Gets a map that its keys are aliases to fields that should be OVF
    // logged.
    Map<String, String> aliasesValuesMap = handler.getAliasesValuesMap();
    for (Map.Entry<String, String> entry : aliasesValuesMap.entrySet()) {
        writeLogEvent(entry.getKey(), entry.getValue());
    }
}
#end_block

#method_before
private MapSqlParameterSource getFullParameterSource(VmStatic vm) {
    return getIdParamterSource(vm.getId()).addValue("description", vm.getDescription()).addValue("free_text_comment", vm.getComment()).addValue("mem_size_mb", vm.getMemSizeMb()).addValue("os", vm.getOsId()).addValue("vds_group_id", vm.getVdsGroupId()).addValue("vm_name", vm.getName()).addValue("vmt_guid", vm.getVmtGuid()).addValue("domain", vm.getDomain()).addValue("creation_date", vm.getCreationDate()).addValue("num_of_monitors", vm.getNumOfMonitors()).addValue("single_qxl_pci", vm.getSingleQxlPci()).addValue("is_initialized", vm.isInitialized()).addValue("num_of_sockets", vm.getNumOfSockets()).addValue("cpu_per_socket", vm.getCpuPerSocket()).addValue("usb_policy", vm.getUsbPolicy()).addValue("time_zone", vm.getTimeZone()).addValue("auto_startup", vm.isAutoStartup()).addValue("is_stateless", vm.isStateless()).addValue("is_smartcard_enabled", vm.isSmartcardEnabled()).addValue("is_delete_protected", vm.isDeleteProtected()).addValue("dedicated_vm_for_vds", vm.getDedicatedVmForVds()).addValue("fail_back", vm.isFailBack()).addValue("vm_type", vm.getVmType()).addValue("nice_level", vm.getNiceLevel()).addValue("cpu_shares", vm.getCpuShares()).addValue("default_boot_sequence", vm.getDefaultBootSequence()).addValue("default_display_type", vm.getDefaultDisplayType()).addValue("priority", vm.getPriority()).addValue("iso_path", vm.getIsoPath()).addValue("origin", vm.getOrigin()).addValue("initrd_url", vm.getInitrdUrl()).addValue("kernel_url", vm.getKernelUrl()).addValue("kernel_params", vm.getKernelParams()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("quota_id", vm.getQuotaId()).addValue("allow_console_reconnect", vm.isAllowConsoleReconnect()).addValue("cpu_pinning", vm.getCpuPinning()).addValue("host_cpu_flags", vm.isUseHostCpuFlags()).addValue("tunnel_migration", vm.getTunnelMigration()).addValue("vnc_keyboard_layout", vm.getVncKeyboardLayout()).addValue("is_run_and_pause", vm.isRunAndPause()).addValue("created_by_user_id", vm.getCreatedByUserId()).addValue("instance_type_id", vm.getInstanceTypeId()).addValue("image_type_id", vm.getImageTypeId()).addValue("original_template_name", vm.getOriginalTemplateName()).addValue("original_template_id", vm.getOriginalTemplateGuid());
}
#method_after
private MapSqlParameterSource getFullParameterSource(VmStatic vm) {
    return getIdParamterSource(vm.getId()).addValue("description", vm.getDescription()).addValue("free_text_comment", vm.getComment()).addValue("mem_size_mb", vm.getMemSizeMb()).addValue("os", vm.getOsId()).addValue("vds_group_id", vm.getVdsGroupId()).addValue("vm_name", vm.getName()).addValue("vmt_guid", vm.getVmtGuid()).addValue("domain", vm.getDomain()).addValue("creation_date", vm.getCreationDate()).addValue("num_of_monitors", vm.getNumOfMonitors()).addValue("single_qxl_pci", vm.getSingleQxlPci()).addValue("is_initialized", vm.isInitialized()).addValue("num_of_sockets", vm.getNumOfSockets()).addValue("cpu_per_socket", vm.getCpuPerSocket()).addValue("usb_policy", vm.getUsbPolicy()).addValue("time_zone", vm.getTimeZone()).addValue("auto_startup", vm.isAutoStartup()).addValue("is_stateless", vm.isStateless()).addValue("is_smartcard_enabled", vm.isSmartcardEnabled()).addValue("is_delete_protected", vm.isDeleteProtected()).addValue("sso_method", vm.getSsoMethod().toString()).addValue("dedicated_vm_for_vds", vm.getDedicatedVmForVds()).addValue("fail_back", vm.isFailBack()).addValue("vm_type", vm.getVmType()).addValue("nice_level", vm.getNiceLevel()).addValue("cpu_shares", vm.getCpuShares()).addValue("default_boot_sequence", vm.getDefaultBootSequence()).addValue("default_display_type", vm.getDefaultDisplayType()).addValue("priority", vm.getPriority()).addValue("iso_path", vm.getIsoPath()).addValue("origin", vm.getOrigin()).addValue("initrd_url", vm.getInitrdUrl()).addValue("kernel_url", vm.getKernelUrl()).addValue("kernel_params", vm.getKernelParams()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("quota_id", vm.getQuotaId()).addValue("allow_console_reconnect", vm.isAllowConsoleReconnect()).addValue("cpu_pinning", vm.getCpuPinning()).addValue("host_cpu_flags", vm.isUseHostCpuFlags()).addValue("tunnel_migration", vm.getTunnelMigration()).addValue("vnc_keyboard_layout", vm.getVncKeyboardLayout()).addValue("is_run_and_pause", vm.isRunAndPause()).addValue("created_by_user_id", vm.getCreatedByUserId()).addValue("instance_type_id", vm.getInstanceTypeId()).addValue("image_type_id", vm.getImageTypeId()).addValue("original_template_name", vm.getOriginalTemplateName()).addValue("original_template_id", vm.getOriginalTemplateGuid());
}
#end_block

#method_before
@Override
public VmStatic mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmStatic entity = new VmStatic();
    map(rs, entity);
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setName(rs.getString("vm_name"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setDomain(rs.getString("domain"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setQuotaId(getGuid(rs, "quota_id"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setInstanceTypeId(Guid.createGuidFromString(rs.getString("instance_type_id")));
    entity.setImageTypeId(Guid.createGuidFromString(rs.getString("image_type_id")));
    entity.setOriginalTemplateName(rs.getString("original_template_name"));
    entity.setOriginalTemplateGuid(Guid.createGuidFromString(rs.getString("original_template_id")));
    return entity;
}
#method_after
@Override
public VmStatic mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmStatic entity = new VmStatic();
    map(rs, entity);
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setName(rs.getString("vm_name"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setDomain(rs.getString("domain"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setQuotaId(getGuid(rs, "quota_id"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setInstanceTypeId(Guid.createGuidFromString(rs.getString("instance_type_id")));
    entity.setImageTypeId(Guid.createGuidFromString(rs.getString("image_type_id")));
    entity.setOriginalTemplateName(rs.getString("original_template_name"));
    entity.setOriginalTemplateGuid(getGuid(rs, "original_template_id"));
    return entity;
}
#end_block

#method_before
protected void initTemplateDisks() {
    if (vmDisksSource != null) {
        VmTemplateHandler.UpdateDisksFromDb(vmDisksSource);
    }
}
#method_after
protected void initTemplateDisks() {
    if (vmDisksSource != null) {
        VmTemplateHandler.updateDisksFromDb(vmDisksSource);
    }
}
#end_block

#method_before
protected boolean shouldCheckSpaceInStorageDomains() {
    return !getImagesToCheckDestinationStorageDomains().isEmpty() && !LinqUtils.firstOrNull(getImagesToCheckDestinationStorageDomains(), new All<DiskImage>()).getImageId().equals(VmTemplateHandler.BlankVmTemplateId);
}
#method_after
protected boolean shouldCheckSpaceInStorageDomains() {
    return !getImagesToCheckDestinationStorageDomains().isEmpty() && !LinqUtils.firstOrNull(getImagesToCheckDestinationStorageDomains(), new All<DiskImage>()).getImageId().equals(VmTemplateHandler.BLANK_VM_TEMPLATE_ID);
}
#end_block

#method_before
public static boolean checkCpuSockets(int num_of_sockets, int cpu_per_socket, String compatibility_version, List<String> CanDoActionMessages) {
    boolean retValue = true;
    if (retValue && (num_of_sockets * cpu_per_socket) > Config.<Integer>GetValue(ConfigValues.MaxNumOfVmCpus, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_CPU.toString());
        retValue = false;
    }
    if (retValue && num_of_sockets > Config.<Integer>GetValue(ConfigValues.MaxNumOfVmSockets, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_SOCKETS.toString());
        retValue = false;
    }
    if (retValue && cpu_per_socket > Config.<Integer>GetValue(ConfigValues.MaxNumOfCpuPerSocket, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_CPU_PER_SOCKET.toString());
        retValue = false;
    }
    if (retValue && cpu_per_socket < 1) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_CPU_PER_SOCKET.toString());
        retValue = false;
    }
    if (retValue && num_of_sockets < 1) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_NUM_SOCKETS.toString());
        retValue = false;
    }
    return retValue;
}
#method_after
public static boolean checkCpuSockets(int num_of_sockets, int cpu_per_socket, String compatibility_version, List<String> CanDoActionMessages) {
    boolean retValue = true;
    if (retValue && (num_of_sockets * cpu_per_socket) > Config.<Integer>getValue(ConfigValues.MaxNumOfVmCpus, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_CPU.toString());
        retValue = false;
    }
    if (retValue && num_of_sockets > Config.<Integer>getValue(ConfigValues.MaxNumOfVmSockets, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_SOCKETS.toString());
        retValue = false;
    }
    if (retValue && cpu_per_socket > Config.<Integer>getValue(ConfigValues.MaxNumOfCpuPerSocket, compatibility_version)) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_CPU_PER_SOCKET.toString());
        retValue = false;
    }
    if (retValue && cpu_per_socket < 1) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_CPU_PER_SOCKET.toString());
        retValue = false;
    }
    if (retValue && num_of_sockets < 1) {
        CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_NUM_SOCKETS.toString());
        retValue = false;
    }
    return retValue;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVmTemplate() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    if (getVmTemplate().isDisabled()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_DISABLED);
    }
    if (!buildAndCheckDestStorageDomains()) {
        return false;
    }
    // otherwise..
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getImagesToCheckDestinationStorageDomains(), diskInfoDestinationMap);
    if (!canDoAddVmCommand()) {
        return false;
    }
    VM vmFromParams = getParameters().getVm();
    if (StringUtils.isEmpty(vmFromParams.getName())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    }
    // check that VM name is not too long
    if (!isVmNameValidLength(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (!checkPayload(getParameters().getVmPayload(), getParameters().getVmStaticData().getIsoPath())) {
            return false;
        }
        // otherwise, we save the content in base64 string
        for (Map.Entry<String, String> entry : getParameters().getVmPayload().getFiles().entrySet()) {
            entry.setValue(Base64.encodeBase64String(entry.getValue().getBytes()));
        }
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(vmFromParams.getUsbPolicy(), vmFromParams.getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check cpuPinning if the check haven't failed yet
    if (!isCpuPinningValid(vmFromParams.getCpuPinning(), vmFromParams.getStaticData())) {
        return false;
    }
    if (vmFromParams.isUseHostCpuFlags() && vmFromParams.getMigrationSupport() == MigrationSupport.MIGRATABLE) {
        return failCanDoAction(VdcBllMessages.VM_HOSTCPU_MUST_BE_PINNED_TO_HOST);
    }
    if (instanceTypeId != null && getInstanceType() == null) {
        // invalid instance type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INSTANCE_TYPE_DOES_NOT_EXIST);
    }
    if (imageTypeId != null && getImageType() == null) {
        // invalid image type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_TYPE_DOES_NOT_EXIST);
    }
    if (!checkCpuSockets()) {
        return false;
    }
    if (!isCpuSharesValid(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.QOS_CPU_SHARES_OUT_OF_RANGE);
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVmTemplate() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
    }
    if (getVmTemplate().isDisabled()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_DISABLED);
    }
    if (!buildAndCheckDestStorageDomains()) {
        return false;
    }
    // otherwise..
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getImagesToCheckDestinationStorageDomains(), diskInfoDestinationMap);
    if (!canDoAddVmCommand()) {
        return false;
    }
    VM vmFromParams = getParameters().getVm();
    if (StringUtils.isEmpty(vmFromParams.getName())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    }
    // check that VM name is not too long
    if (!isVmNameValidLength(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (!checkPayload(getParameters().getVmPayload(), getParameters().getVmStaticData().getIsoPath())) {
            return false;
        }
        // otherwise, we save the content in base64 string
        for (Map.Entry<String, String> entry : getParameters().getVmPayload().getFiles().entrySet()) {
            entry.setValue(Base64.encodeBase64String(entry.getValue().getBytes()));
        }
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(vmFromParams.getUsbPolicy(), vmFromParams.getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check if the OS type is supported
    if (!VmHandler.isOsTypeSupported(vmFromParams.getOs(), getVdsGroup().getArchitecture(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check cpuPinning if the check haven't failed yet
    if (!isCpuPinningValid(vmFromParams.getCpuPinning(), vmFromParams.getStaticData())) {
        return false;
    }
    if (vmFromParams.isUseHostCpuFlags() && vmFromParams.getMigrationSupport() == MigrationSupport.MIGRATABLE) {
        return failCanDoAction(VdcBllMessages.VM_HOSTCPU_MUST_BE_PINNED_TO_HOST);
    }
    if (instanceTypeId != null && getInstanceType() == null) {
        // invalid instance type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INSTANCE_TYPE_DOES_NOT_EXIST);
    }
    if (imageTypeId != null && getImageType() == null) {
        // invalid image type
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_TYPE_DOES_NOT_EXIST);
    }
    if (!checkCpuSockets()) {
        return false;
    }
    if (!isCpuSharesValid(vmFromParams)) {
        return failCanDoAction(VdcBllMessages.QOS_CPU_SHARES_OUT_OF_RANGE);
    }
    if (Boolean.TRUE.equals(getParameters().isVirtioScsiEnabled()) && !FeatureSupported.virtIoScsi(getVdsGroup().getcompatibility_version())) {
        return failCanDoAction(VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL);
    }
    return true;
}
#end_block

#method_before
protected void addVmStatic() {
    VmStatic vmStatic = getParameters().getVmStaticData();
    if (vmStatic.getOrigin() == null) {
        vmStatic.setOrigin(OriginType.valueOf(Config.<String>GetValue(ConfigValues.OriginType)));
    }
    vmStatic.setId(getVmId());
    vmStatic.setQuotaId(getQuotaId());
    vmStatic.setCreationDate(new Date());
    vmStatic.setCreatedByUserId(getUserId());
    // predefined and user defined fields
    if (vmStatic.getCustomProperties() != null) {
        VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(getVdsGroupDAO().get(getParameters().getVm().getVdsGroupId()).getcompatibility_version(), vmStatic.getCustomProperties());
        String predefinedProperties = properties.getPredefinedProperties();
        String userDefinedProperties = properties.getUseDefinedProperties();
        vmStatic.setPredefinedProperties(predefinedProperties);
        vmStatic.setUserDefinedProperties(userDefinedProperties);
    }
    vmStatic.setOriginalTemplateGuid(vmStatic.getVmtGuid());
    VmTemplate template = getVmTemplateDAO().get(vmStatic.getVmtGuid());
    vmStatic.setOriginalTemplateName(template.getName());
    getVmStaticDao().save(vmStatic);
    getCompensationContext().snapshotNewEntity(vmStatic);
}
#method_after
protected void addVmStatic() {
    VmStatic vmStatic = getParameters().getVmStaticData();
    if (vmStatic.getOrigin() == null) {
        vmStatic.setOrigin(OriginType.valueOf(Config.<String>getValue(ConfigValues.OriginType)));
    }
    vmStatic.setId(getVmId());
    vmStatic.setQuotaId(getQuotaId());
    vmStatic.setCreationDate(new Date());
    vmStatic.setCreatedByUserId(getUserId());
    // predefined and user defined fields
    if (vmStatic.getCustomProperties() != null) {
        VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(getVdsGroupDAO().get(getParameters().getVm().getVdsGroupId()).getcompatibility_version(), vmStatic.getCustomProperties());
        String predefinedProperties = properties.getPredefinedProperties();
        String userDefinedProperties = properties.getUseDefinedProperties();
        vmStatic.setPredefinedProperties(predefinedProperties);
        vmStatic.setUserDefinedProperties(userDefinedProperties);
    }
    vmStatic.setOriginalTemplateGuid(vmStatic.getVmtGuid());
    vmStatic.setOriginalTemplateName(getVmTemplate().getName());
    getVmStaticDao().save(vmStatic);
    getCompensationContext().snapshotNewEntity(vmStatic);
}
#end_block

#method_before
protected void addVmPermission() {
    UniquePermissionsSet permissionsToAdd = new UniquePermissionsSet();
    if ((getParameters()).isMakeCreatorExplicitOwner()) {
        permissionsToAdd.addPermission(getCurrentUser().getId(), PredefinedRoles.VM_OPERATOR.getId(), getVmId(), VdcObjectType.VM);
    }
    if (getParameters().isCopyTemplatePermissions() && !getVmTemplateId().equals(VmTemplateHandler.BlankVmTemplateId)) {
        copyTemplatePermissions(permissionsToAdd);
    }
    if (!permissionsToAdd.isEmpty()) {
        List<permissions> permissionsList = permissionsToAdd.asPermissionList();
        MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new permissions[permissionsList.size()]));
        getCompensationContext().snapshotNewEntities(permissionsList);
    }
}
#method_after
protected void addVmPermission() {
    UniquePermissionsSet permissionsToAdd = new UniquePermissionsSet();
    if ((getParameters()).isMakeCreatorExplicitOwner()) {
        permissionsToAdd.addPermission(getCurrentUser().getId(), PredefinedRoles.VM_OPERATOR.getId(), getVmId(), VdcObjectType.VM);
    }
    if (getParameters().isCopyTemplatePermissions() && !getVmTemplateId().equals(VmTemplateHandler.BLANK_VM_TEMPLATE_ID)) {
        copyTemplatePermissions(permissionsToAdd);
    }
    if (!permissionsToAdd.isEmpty()) {
        List<Permissions> permissionsList = permissionsToAdd.asPermissionList();
        MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new Permissions[permissionsList.size()]));
        getCompensationContext().snapshotNewEntities(permissionsList);
    }
}
#end_block

#method_before
private void copyTemplatePermissions(UniquePermissionsSet permissionsToAdd) {
    PermissionDAO dao = getDbFacade().getPermissionDao();
    List<permissions> templatePermissions = dao.getAllForEntity(getVmTemplateId(), getCurrentUser().getId(), false);
    for (permissions templatePermission : templatePermissions) {
        boolean templateOwnerRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_OWNER.getId());
        boolean templateUserRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_USER.getId());
        if (templateOwnerRole || templateUserRole) {
            continue;
        }
        permissionsToAdd.addPermission(templatePermission.getad_element_id(), templatePermission.getrole_id(), getVmId(), VdcObjectType.VM);
    }
}
#method_after
private void copyTemplatePermissions(UniquePermissionsSet permissionsToAdd) {
    PermissionDAO dao = getDbFacade().getPermissionDao();
    List<Permissions> templatePermissions = dao.getAllForEntity(getVmTemplateId(), getCurrentUser().getId(), false);
    for (Permissions templatePermission : templatePermissions) {
        boolean templateOwnerRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_OWNER.getId());
        boolean templateUserRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_USER.getId());
        if (templateOwnerRole || templateUserRole) {
            continue;
        }
        permissionsToAdd.addPermission(templatePermission.getad_element_id(), templatePermission.getrole_id(), getVmId(), VdcObjectType.VM);
    }
}
#end_block

#method_before
protected void addDiskPermissions() {
    List<Guid> newDiskImageIds = new ArrayList<>(srcDiskIdToTargetDiskIdMapping.values());
    permissions[] permsArray = new permissions[newDiskImageIds.size()];
    for (int i = 0; i < newDiskImageIds.size(); i++) {
        permsArray[i] = new permissions(getCurrentUser().getId(), PredefinedRoles.DISK_OPERATOR.getId(), newDiskImageIds.get(i), VdcObjectType.Disk);
    }
    MultiLevelAdministrationHandler.addPermission(permsArray);
}
#method_after
protected void addDiskPermissions() {
    List<Guid> newDiskImageIds = new ArrayList<>(srcDiskIdToTargetDiskIdMapping.values());
    Permissions[] permsArray = new Permissions[newDiskImageIds.size()];
    for (int i = 0; i < newDiskImageIds.size(); i++) {
        permsArray[i] = new Permissions(getCurrentUser().getId(), PredefinedRoles.DISK_OPERATOR.getId(), newDiskImageIds.get(i), VdcObjectType.Disk);
    }
    MultiLevelAdministrationHandler.addPermission(permsArray);
}
#end_block

#method_before
private void updateProperties() {
    VmPool pool = (VmPool) getEntity();
    setName(pool.getName());
    setDescription(pool.getVmPoolDescription());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            // refactor to "switch ... case...".
            if (result != null) {
                setvm((VM) ((VdcQueryReturnValue) result).getReturnValue());
            }
            PoolGeneralModel poolGeneralModel = (PoolGeneralModel) model;
            if (getvm() != null) {
                poolGeneralModel.setTemplate(vmTemplateNameRenderer.render(getvm()));
                poolGeneralModel.setCpuInfo(ConstantsManager.getInstance().getMessages().cpuInfoLabel(getvm().getNumOfCpus(), getvm().getNumOfSockets(), getvm().getCpuPerSocket()));
                poolGeneralModel.setMonitorCount(getvm().getNumOfMonitors());
                poolGeneralModel.setOS(getvm().getVmOsId());
                // $NON-NLS-1$
                poolGeneralModel.setDefinedMemory(getvm().getVmMemSizeMb() + " MB");
                // $NON-NLS-1$
                poolGeneralModel.setMinAllocatedMemory(getvm().getMinAllocatedMem() + " MB");
                Translator translator = EnumTranslator.Create(DisplayType.class);
                poolGeneralModel.setDefaultDisplayType(translator.get(getvm().getDefaultDisplayType()));
                translator = EnumTranslator.Create(OriginType.class);
                poolGeneralModel.setOrigin(translator.get(getvm().getOrigin()));
                translator = EnumTranslator.Create(UsbPolicy.class);
                poolGeneralModel.setUsbPolicy(translator.get(getvm().getUsbPolicy()));
                setHasDomain(AsyncDataProvider.isWindowsOsType(getvm().getVmOsId()));
                poolGeneralModel.setDomain(getvm().getVmDomain());
                setHasTimeZone(AsyncDataProvider.isWindowsOsType(getvm().getVmOsId()));
                poolGeneralModel.setTimeZone(getvm().getTimeZone());
                poolGeneralModel.setIsStateless(getvm().isStateless());
                poolGeneralModel.setQuotaName(getvm().getQuotaName());
                poolGeneralModel.setHasDefaultHost(getvm().getDedicatedVmForVds() != null);
                if (poolGeneralModel.getHasDefaultHost()) {
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(poolGeneralModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model1, Object ReturnValue1) {
                            PoolGeneralModel poolGeneralModel1 = (PoolGeneralModel) model1;
                            ArrayList<VDS> hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                            for (VDS host : hosts) {
                                if (host.getId().equals(poolGeneralModel1.getvm().getDedicatedVmForVds())) {
                                    poolGeneralModel1.setDefaultHost(host.getName());
                                    break;
                                }
                            }
                        }
                    };
                    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
                    "Host: cluster = " + getvm().getVdsGroupName() + " sortby name", SearchType.VDS), // $NON-NLS-1$
                    _asyncQuery1);
                } else {
                    poolGeneralModel.setDefaultHost(ConstantsManager.getInstance().getConstants().anyHostInCluster());
                }
            } else {
                poolGeneralModel.setTemplate(null);
                poolGeneralModel.setCpuCount(0);
                poolGeneralModel.setMonitorCount(0);
                poolGeneralModel.setOS(0);
                poolGeneralModel.setDefinedMemory(null);
                poolGeneralModel.setMinAllocatedMemory(null);
                poolGeneralModel.setDefaultDisplayType(null);
                poolGeneralModel.setHasDomain(false);
                poolGeneralModel.setDomain(null);
                poolGeneralModel.setHasTimeZone(false);
                poolGeneralModel.setTimeZone(null);
                poolGeneralModel.setUsbPolicy(null);
                poolGeneralModel.setDefaultHost(null);
                poolGeneralModel.setIsStateless(false);
                poolGeneralModel.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmDataByPoolId, new IdQueryParameters(pool.getVmPoolId()), _asyncQuery);
}
#method_after
private void updateProperties() {
    VmPool pool = (VmPool) getEntity();
    setName(pool.getName());
    setDescription(pool.getVmPoolDescription());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            // refactor to "switch ... case...".
            if (result != null) {
                setvm((VM) ((VdcQueryReturnValue) result).getReturnValue());
            }
            PoolGeneralModel poolGeneralModel = (PoolGeneralModel) model;
            if (getvm() != null) {
                poolGeneralModel.setTemplate(vmTemplateNameRenderer.render(getvm()));
                poolGeneralModel.setCpuInfo(ConstantsManager.getInstance().getMessages().cpuInfoLabel(getvm().getNumOfCpus(), getvm().getNumOfSockets(), getvm().getCpuPerSocket()));
                poolGeneralModel.setMonitorCount(getvm().getNumOfMonitors());
                poolGeneralModel.setOS(getvm().getVmOsId());
                // $NON-NLS-1$
                poolGeneralModel.setDefinedMemory(getvm().getVmMemSizeMb() + " MB");
                // $NON-NLS-1$
                poolGeneralModel.setMinAllocatedMemory(getvm().getMinAllocatedMem() + " MB");
                Translator translator = EnumTranslator.create(DisplayType.class);
                poolGeneralModel.setDefaultDisplayType(translator.get(getvm().getDefaultDisplayType()));
                translator = EnumTranslator.create(OriginType.class);
                poolGeneralModel.setOrigin(translator.get(getvm().getOrigin()));
                translator = EnumTranslator.create(UsbPolicy.class);
                poolGeneralModel.setUsbPolicy(translator.get(getvm().getUsbPolicy()));
                setHasDomain(AsyncDataProvider.isWindowsOsType(getvm().getVmOsId()));
                poolGeneralModel.setDomain(getvm().getVmDomain());
                setHasTimeZone(AsyncDataProvider.isWindowsOsType(getvm().getVmOsId()));
                poolGeneralModel.setTimeZone(getvm().getTimeZone());
                poolGeneralModel.setIsStateless(getvm().isStateless());
                poolGeneralModel.setQuotaName(getvm().getQuotaName());
                poolGeneralModel.setHasDefaultHost(getvm().getDedicatedVmForVds() != null);
                if (poolGeneralModel.getHasDefaultHost()) {
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(poolGeneralModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model1, Object ReturnValue1) {
                            PoolGeneralModel poolGeneralModel1 = (PoolGeneralModel) model1;
                            ArrayList<VDS> hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                            for (VDS host : hosts) {
                                if (host.getId().equals(poolGeneralModel1.getvm().getDedicatedVmForVds())) {
                                    poolGeneralModel1.setDefaultHost(host.getName());
                                    break;
                                }
                            }
                        }
                    };
                    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
                    "Host: cluster = " + getvm().getVdsGroupName() + " sortby name", SearchType.VDS), // $NON-NLS-1$
                    _asyncQuery1);
                } else {
                    poolGeneralModel.setDefaultHost(ConstantsManager.getInstance().getConstants().anyHostInCluster());
                }
            } else {
                poolGeneralModel.setTemplate(null);
                poolGeneralModel.setCpuCount(0);
                poolGeneralModel.setMonitorCount(0);
                poolGeneralModel.setOS(0);
                poolGeneralModel.setDefinedMemory(null);
                poolGeneralModel.setMinAllocatedMemory(null);
                poolGeneralModel.setDefaultDisplayType(null);
                poolGeneralModel.setHasDomain(false);
                poolGeneralModel.setDomain(null);
                poolGeneralModel.setHasTimeZone(false);
                poolGeneralModel.setTimeZone(null);
                poolGeneralModel.setUsbPolicy(null);
                poolGeneralModel.setDefaultHost(null);
                poolGeneralModel.setIsStateless(false);
                poolGeneralModel.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
            }
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmDataByPoolId, new IdQueryParameters(pool.getVmPoolId()), _asyncQuery);
}
#end_block

#method_before
public void setVdsGroupCompatibilityVersion(Version value) {
    if (Version.OpInequality(getVdsGroupCompatibilityVersion(), value)) {
        this.vdsGroupCompatibilityVersion = value;
    }
}
#method_after
public void setVdsGroupCompatibilityVersion(Version value) {
    this.vdsGroupCompatibilityVersion = value;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    GlusterVolumeEntity glusterVolume = getGlusterVolume();
    if (!super.canDoAction()) {
        return false;
    }
    if (!glusterVolume.isOnline()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED);
    }
    GlusterAsyncTask asyncTask = glusterVolume.getAsyncTask();
    if (asyncTask != null && asyncTask.getType() == GlusterTaskType.REMOVE_BRICK) {
        GlusterVolumeRemoveBricksParameters params = (GlusterVolumeRemoveBricksParameters) getParameters();
        if (params.getBricks().isEmpty()) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        }
        List<GlusterBrickEntity> bricksForTask = getGlusterBrickDao().getGlusterVolumeBricksByTaskId(asyncTask.getTaskId());
        List<GlusterBrickEntity> paramBricks = params.getBricks();
        if (paramBricks.size() != bricksForTask.size()) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_PARAMS_SIZE_DOES_NOT_MATCH);
        }
        int counter = 0;
        for (GlusterBrickEntity paramBrick : paramBricks) {
            for (GlusterBrickEntity brick : bricksForTask) {
                // If parameter brick directory matches with any brick no need to continue further to check
                if (paramBrick.getBrickDirectory().equals(brick.getBrickDirectory())) {
                    break;
                }
                counter++;
                // If the bricks list exhausted, it means the parameter brick does found, throw an error
                if (counter == bricksForTask.size()) {
                    return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_PARAMS_INVALID);
                }
            }
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    GlusterVolumeEntity glusterVolume = getGlusterVolume();
    if (!super.canDoAction()) {
        return false;
    }
    if (!glusterVolume.isOnline()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED);
    }
    return true;
}
#end_block

#method_before
private void prepareMocks(CommitRemoveGlusterVolumeBricksCommand command) {
    doReturn(volumeDao).when(command).getGlusterVolumeDao();
    doReturn(brickDao).when(command).getGlusterBrickDao();
    doReturn(dbUtils).when(command).getDbUtils();
    doReturn(getVds(VDSStatus.Up)).when(command).getUpServer();
    doReturn(getVolumeWithRemoveBricksTask(volumeWithRemoveBricksTask)).when(volumeDao).getById(volumeWithRemoveBricksTask);
    doReturn(getBricks(volumeWithoutRemoveBricksTask, 2)).when(brickDao).getGlusterVolumeBricksByTaskId(any(Guid.class));
    doReturn(getVolumeWithRemoveBricksTaskNotFinished(volumeWithRemoveBricksTaskNotFinished)).when(volumeDao).getById(volumeWithRemoveBricksTaskNotFinished);
    doReturn(getVolume(volumeWithoutAsyncTask)).when(volumeDao).getById(volumeWithoutAsyncTask);
    doReturn(getvolumeWithoutRemoveBricksTask(volumeWithoutRemoveBricksTask)).when(volumeDao).getById(volumeWithoutRemoveBricksTask);
    doReturn(getVolumeWithRemoveBricksTaskNull(volumeWithRemoveBricksTaskNull)).when(volumeDao).getById(volumeWithRemoveBricksTaskNull);
    doReturn(null).when(volumeDao).getById(null);
}
#method_after
private void prepareMocks(CommitRemoveGlusterVolumeBricksCommand command) {
    doReturn(volumeDao).when(command).getGlusterVolumeDao();
    GlusterBrickValidator brickValidator = spy(command.getBrickValidator());
    doReturn(brickValidator).when(command).getBrickValidator();
    doReturn(brickDao).when(brickValidator).getGlusterBrickDao();
    doReturn(dbUtils).when(command).getDbUtils();
    doReturn(getVds(VDSStatus.Up)).when(command).getUpServer();
    doReturn(getVolumeWithRemoveBricksTask(volumeWithRemoveBricksTask)).when(volumeDao).getById(volumeWithRemoveBricksTask);
    doReturn(getBricks(volumeWithoutRemoveBricksTask)).when(brickDao).getGlusterVolumeBricksByTaskId(any(Guid.class));
    doReturn(getVolumeWithRemoveBricksTaskNotFinished(volumeWithRemoveBricksTaskNotFinished)).when(volumeDao).getById(volumeWithRemoveBricksTaskNotFinished);
    doReturn(getVolume(volumeWithoutAsyncTask)).when(volumeDao).getById(volumeWithoutAsyncTask);
    doReturn(getVolumeWithoutRemoveBricksTask(volumeWithoutRemoveBricksTask)).when(volumeDao).getById(volumeWithoutRemoveBricksTask);
    doReturn(getVolumeWithRemoveBricksTaskNull(volumeWithRemoveBricksTaskNull)).when(volumeDao).getById(volumeWithRemoveBricksTaskNull);
    doReturn(null).when(volumeDao).getById(null);
}
#end_block

#method_before
private GlusterVolumeEntity getVolumeWithRemoveBricksTask(Guid volumeId) {
    GlusterVolumeEntity volume = getVolume(volumeId);
    GlusterAsyncTask asyncTask = new GlusterAsyncTask();
    asyncTask.setStatus(JobExecutionStatus.FINISHED);
    asyncTask.setType(GlusterTaskType.REMOVE_BRICK);
    volume.setAsyncTask(asyncTask);
    return volume;
}
#method_after
@Override
protected GlusterVolumeEntity getVolumeWithRemoveBricksTask(Guid volumeId) {
    GlusterVolumeEntity volume = getVolume(volumeId);
    GlusterAsyncTask asyncTask = new GlusterAsyncTask();
    asyncTask.setStatus(JobExecutionStatus.FINISHED);
    asyncTask.setType(GlusterTaskType.REMOVE_BRICK);
    volume.setAsyncTask(asyncTask);
    return volume;
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Test
public void testExecuteCommand() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask, 2))));
    prepareMocks(cmd);
    mockBackend(true, null);
    assertTrue(cmd.canDoAction());
    cmd.executeCommand();
    verify(cmd, times(1)).endStepJobCommitted();
    verify(cmd, times(1)).releaseVolumeLock();
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT);
}
#method_after
@SuppressWarnings("unchecked")
@Test
public void testExecuteCommand() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask))));
    prepareMocks(cmd);
    mockBackend(true, null);
    assertTrue(cmd.canDoAction());
    cmd.executeCommand();
    verify(cmd, times(1)).endStepJobCommitted();
    verify(cmd, times(1)).releaseVolumeLock();
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT);
}
#end_block

#method_before
@Test
public void executeCommandWhenFailed() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask, 2))));
    prepareMocks(cmd);
    mockBackend(false, VdcBllErrors.GlusterVolumeRemoveBricksCommitFailed);
    assertTrue(cmd.canDoAction());
    cmd.executeCommand();
    verify(cmd, never()).endStepJobAborted();
    verify(cmd, never()).releaseVolumeLock();
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT_FAILED);
}
#method_after
@Test
public void executeCommandWhenFailed() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask))));
    prepareMocks(cmd);
    mockBackend(false, VdcBllErrors.GlusterVolumeRemoveBricksCommitFailed);
    assertTrue(cmd.canDoAction());
    cmd.executeCommand();
    verify(cmd, never()).endStepJobAborted();
    verify(cmd, never()).releaseVolumeLock();
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT_FAILED);
}
#end_block

#method_before
@Test
public void canDoActionSucceedsOnVolumeWithRemoveBricksTask() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask, 2))));
    prepareMocks(cmd);
    assertTrue(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionSucceedsOnVolumeWithRemoveBricksTask() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask))));
    prepareMocks(cmd);
    assertTrue(cmd.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionFailsOnVolumeWithoutAsyncTask() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithoutAsyncTask, getBricks(volumeWithoutAsyncTask, 2))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailsOnVolumeWithoutAsyncTask() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithoutAsyncTask, getBricks(volumeWithoutAsyncTask))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionFailsOnVolumeWithoutRemoveBricksTask() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithoutRemoveBricksTask, getBricks(volumeWithoutRemoveBricksTask, 2))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailsOnVolumeWithoutRemoveBricksTask() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithoutRemoveBricksTask, getBricks(volumeWithoutRemoveBricksTask))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionFailesOnVolumeWithRemoveBricksTaskNotFinished() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTaskNotFinished, getBricks(volumeWithRemoveBricksTaskNotFinished, 2))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailesOnVolumeWithRemoveBricksTaskNotFinished() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTaskNotFinished, getBricks(volumeWithRemoveBricksTaskNotFinished))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionFailsOnNull() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTaskNull, getBricks(volumeWithRemoveBricksTaskNull, 2))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailsOnNull() {
    cmd = spy(new CommitRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTaskNull, getBricks(volumeWithRemoveBricksTaskNull))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    GlusterVolumeEntity volume = getGlusterVolume();
    if (!super.canDoAction()) {
        return false;
    }
    if (!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK)) || !(getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED))) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_FINISHED);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    GlusterVolumeEntity volume = getGlusterVolume();
    if (!super.canDoAction()) {
        return false;
    }
    if (!validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks()))) {
        return false;
    }
    if (!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK)) || !(getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED))) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_FINISHED);
    }
    return true;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    GlusterVolumeEntity volume = getGlusterVolume();
    if (!super.canDoAction()) {
        return false;
    }
    if (!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK)) || !(getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.STARTED) || getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED))) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_STARTED);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    GlusterVolumeEntity volume = getGlusterVolume();
    if (!super.canDoAction()) {
        return false;
    }
    if (!validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks()))) {
        return false;
    }
    if (!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK)) || !(getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.STARTED) || getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED))) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_STARTED);
    }
    return true;
}
#end_block

#method_before
private void prepareMocks(StopRemoveGlusterVolumeBricksCommand command) {
    doReturn(volumeDao).when(command).getGlusterVolumeDao();
    doReturn(brickDao).when(command).getGlusterBrickDao();
    doReturn(getVds(VDSStatus.Up)).when(command).getUpServer();
    doReturn(getVolumeWithRemoveBricksTask(volumeWithRemoveBricksTask)).when(volumeDao).getById(volumeWithRemoveBricksTask);
    doReturn(getBricks(volumeWithoutRemoveBricksTask, 2)).when(brickDao).getGlusterVolumeBricksByTaskId(any(Guid.class));
    doReturn(getVolumeWithRemoveBricksTaskCompleted(volumeWithRemoveBricksTaskCompleted)).when(volumeDao).getById(volumeWithRemoveBricksTaskCompleted);
    doReturn(getVolume(volumeWithoutAsyncTask)).when(volumeDao).getById(volumeWithoutAsyncTask);
    doReturn(getvolumeWithoutRemoveBricksTask(volumeWithoutRemoveBricksTask)).when(volumeDao).getById(volumeWithoutRemoveBricksTask);
    doReturn(null).when(volumeDao).getById(null);
}
#method_after
private void prepareMocks(StopRemoveGlusterVolumeBricksCommand command) {
    doReturn(volumeDao).when(command).getGlusterVolumeDao();
    GlusterBrickValidator brickValidator = spy(command.getBrickValidator());
    doReturn(brickDao).when(brickValidator).getGlusterBrickDao();
    doReturn(brickValidator).when(command).getBrickValidator();
    doReturn(getVds(VDSStatus.Up)).when(command).getUpServer();
    doReturn(getVolumeWithRemoveBricksTask(volumeWithRemoveBricksTask)).when(volumeDao).getById(volumeWithRemoveBricksTask);
    doReturn(getBricks(volumeWithoutRemoveBricksTask)).when(brickDao).getGlusterVolumeBricksByTaskId(any(Guid.class));
    doReturn(getVolumeWithRemoveBricksTaskCompleted(volumeWithRemoveBricksTaskCompleted)).when(volumeDao).getById(volumeWithRemoveBricksTaskCompleted);
    doReturn(getVolume(volumeWithoutAsyncTask)).when(volumeDao).getById(volumeWithoutAsyncTask);
    doReturn(getVolumeWithoutRemoveBricksTask(volumeWithoutRemoveBricksTask)).when(volumeDao).getById(volumeWithoutRemoveBricksTask);
    doReturn(null).when(volumeDao).getById(null);
}
#end_block

#method_before
private GlusterVolumeEntity getVolumeWithRemoveBricksTask(Guid volumeId) {
    GlusterVolumeEntity volume = getVolume(volumeId);
    GlusterAsyncTask asyncTask = new GlusterAsyncTask();
    asyncTask.setStatus(JobExecutionStatus.STARTED);
    asyncTask.setType(GlusterTaskType.REMOVE_BRICK);
    volume.setAsyncTask(asyncTask);
    return volume;
}
#method_after
@Override
protected GlusterVolumeEntity getVolumeWithRemoveBricksTask(Guid volumeId) {
    GlusterVolumeEntity volume = getVolume(volumeId);
    GlusterAsyncTask asyncTask = new GlusterAsyncTask();
    asyncTask.setStatus(JobExecutionStatus.STARTED);
    asyncTask.setType(GlusterTaskType.REMOVE_BRICK);
    volume.setAsyncTask(asyncTask);
    return volume;
}
#end_block

#method_before
@Test
public void testExecuteCommand() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask, 2))));
    prepareMocks(cmd);
    mockBackend(true, null);
    assertTrue(cmd.canDoAction());
    cmd.executeCommand();
    verify(cmd, times(1)).endStepJobAborted();
    verify(cmd, times(1)).releaseVolumeLock();
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_STOP);
}
#method_after
@Test
public void testExecuteCommand() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask))));
    prepareMocks(cmd);
    mockBackend(true, null);
    assertTrue(cmd.canDoAction());
    cmd.executeCommand();
    verify(cmd, times(1)).endStepJobAborted();
    verify(cmd, times(1)).releaseVolumeLock();
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_STOP);
}
#end_block

#method_before
@Test
public void executeCommandWhenFailed() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask, 2))));
    prepareMocks(cmd);
    mockBackend(false, VdcBllErrors.GlusterVolumeRemoveBricksStopFailed);
    assertTrue(cmd.canDoAction());
    cmd.executeCommand();
    verify(cmd, never()).endStepJobAborted();
    verify(cmd, never()).releaseVolumeLock();
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_STOP_FAILED);
}
#method_after
@Test
public void executeCommandWhenFailed() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask))));
    prepareMocks(cmd);
    mockBackend(false, VdcBllErrors.GlusterVolumeRemoveBricksStopFailed);
    assertTrue(cmd.canDoAction());
    cmd.executeCommand();
    verify(cmd, never()).endStepJobAborted();
    verify(cmd, never()).releaseVolumeLock();
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_STOP_FAILED);
}
#end_block

#method_before
@Test
public void canDoActionSucceedsOnVolumeWithRemoveBricksTask() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask, 2))));
    prepareMocks(cmd);
    assertTrue(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionSucceedsOnVolumeWithRemoveBricksTask() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask))));
    prepareMocks(cmd);
    assertTrue(cmd.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionSucceedsOnVolumeWithRemoveBricksTaskCompleted() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTaskCompleted, getBricks(volumeWithRemoveBricksTaskCompleted, 2))));
    prepareMocks(cmd);
    assertTrue(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionSucceedsOnVolumeWithRemoveBricksTaskCompleted() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTaskCompleted, getBricks(volumeWithRemoveBricksTaskCompleted))));
    prepareMocks(cmd);
    assertTrue(cmd.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionFailsOnVolumeWithoutAsyncTask() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithoutAsyncTask, getBricks(volumeWithoutAsyncTask, 2))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailsOnVolumeWithoutAsyncTask() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithoutAsyncTask, getBricks(volumeWithoutAsyncTask))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionFailsOnVolumeWithoutRemoveBricksTask() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithoutRemoveBricksTask, getBricks(volumeWithoutRemoveBricksTask, 2))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailsOnVolumeWithoutRemoveBricksTask() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(volumeWithoutRemoveBricksTask, getBricks(volumeWithoutRemoveBricksTask))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionFailsOnNull() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(null, getBricks(volumeWithRemoveBricksTaskCompleted, 2))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailsOnNull() {
    cmd = spy(new StopRemoveGlusterVolumeBricksCommand(new GlusterVolumeRemoveBricksParameters(null, getBricks(volumeWithRemoveBricksTaskCompleted))));
    prepareMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((distinguishedName == null) ? 0 : distinguishedName.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + ((memberOf == null) ? 0 : memberOf.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((distinguishedName == null) ? 0 : distinguishedName.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + ((memberOf == null) ? 0 : memberOf.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + (active ? 1231 : 1237);
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    LdapGroup other = (LdapGroup) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(distinguishedName, other.distinguishedName) && ObjectUtils.objectsEqual(domain, other.domain) && ObjectUtils.objectsEqual(memberOf, other.memberOf) && ObjectUtils.objectsEqual(name, other.name) && status == other.status);
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    LdapGroup other = (LdapGroup) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(distinguishedName, other.distinguishedName) && ObjectUtils.objectsEqual(domain, other.domain) && ObjectUtils.objectsEqual(memberOf, other.memberOf) && ObjectUtils.objectsEqual(name, other.name) && active == other.active);
}
#end_block

#method_before
public void setMemberOf(List<String> memberOf) {
    this.memberOf = memberOf;
}
#method_after
public void setMemberOf(Set<String> memberOf) {
    this.memberOf = memberOf;
}
#end_block

#method_before
public List<String> getMemberOf() {
    return memberOf;
}
#method_after
public Set<String> getMemberOf() {
    return memberOf;
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((externalId == null) ? 0 : externalId.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((distinguishedName == null) ? 0 : distinguishedName.hashCode());
    result = prime * result + ((memberOf == null) ? 0 : memberOf.hashCode());
    result = prime * result + status;
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((externalId == null) ? 0 : externalId.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((distinguishedName == null) ? 0 : distinguishedName.hashCode());
    result = prime * result + ((memberOf == null) ? 0 : memberOf.hashCode());
    result = prime * result + (active ? 1231 : 1237);
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    DbGroup other = (DbGroup) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(externalId, other.externalId) && ObjectUtils.objectsEqual(domain, other.domain) && ObjectUtils.objectsEqual(name, other.name) && ObjectUtils.objectsEqual(distinguishedName, other.distinguishedName) && ObjectUtils.objectsEqual(memberOf, other.memberOf) && status == other.status);
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    DbGroup other = (DbGroup) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(externalId, other.externalId) && ObjectUtils.objectsEqual(domain, other.domain) && ObjectUtils.objectsEqual(name, other.name) && ObjectUtils.objectsEqual(distinguishedName, other.distinguishedName) && ObjectUtils.objectsEqual(memberOf, other.memberOf) && active == other.active);
}
#end_block

#method_before
public void init() {
    if (!initialized) {
        log.info("Start initializing " + getClass().getSimpleName());
        int mRefreshRate = Config.<Integer>GetValue(ConfigValues.UserRefreshRate);
        jobId = SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(this, "OnTimer", new Class[] {}, new Object[] {}, 0, mRefreshRate, TimeUnit.SECONDS);
        initialized = true;
        log.info("Finished initializing " + getClass().getSimpleName());
    }
}
#method_after
public void init() {
    if (!initialized) {
        log.info("Start initializing " + getClass().getSimpleName());
        int mRefreshRate = Config.<Integer>getValue(ConfigValues.UserRefreshRate);
        jobId = SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(this, "onTimer", new Class[] {}, new Object[] {}, 0, mRefreshRate, TimeUnit.SECONDS);
        initialized = true;
        log.info("Finished initializing " + getClass().getSimpleName());
    }
}
#end_block

#method_before
@Override
protected void finalize() throws Throwable {
    Dispose();
}
#method_after
@Override
protected void finalize() throws Throwable {
    dispose();
}
#end_block

#method_before
private static void updateDBUserFromADUser(DbUser dbUser, LdapUser ldapUser, HashSet<Guid> updatedUsers) {
    boolean succeeded = false;
    if ((ldapUser == null) || (ldapUser.getUserId().equals(Guid.Empty)) || (!ldapUser.getUserId().equals(dbUser.getId()))) {
        if (dbUser.getStatus() != 0) {
            log.warnFormat("User {0} not found in directory server, its status switched to InActive", dbUser.getFirstName());
            dbUser.setStatus(0);
            succeeded = true;
        }
    } else {
        if (dbUser.getStatus() == 0) {
            log.warnFormat("Inactive User {0} found in directory server, its status switched to Active", dbUser.getFirstName());
            dbUser.setStatus(1);
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getFirstName(), ldapUser.getName())) {
            dbUser.setFirstName(ldapUser.getName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getLastName(), ldapUser.getSurName())) {
            dbUser.setLastName(ldapUser.getSurName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getDomain(), ldapUser.getDomainControler())) {
            dbUser.setDomain(ldapUser.getDomainControler());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getLoginName(), ldapUser.getUserName())) {
            dbUser.setLoginName(ldapUser.getUserName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getGroupNames(), ldapUser.getGroup())) {
            dbUser.setGroupNames(ldapUser.getGroup());
            succeeded = true;
            updatedUsers.add(dbUser.getId());
        }
        if (!StringUtils.equals(dbUser.getDepartment(), ldapUser.getDepartment())) {
            dbUser.setDepartment(ldapUser.getDepartment());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getRole(), ldapUser.getTitle())) {
            dbUser.setRole(ldapUser.getTitle());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getEmail(), ldapUser.getEmail())) {
            dbUser.setEmail(ldapUser.getEmail());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getGroupIds(), ldapUser.getGroupIds())) {
            dbUser.setGroupIds(ldapUser.getGroupIds());
            succeeded = true;
        }
        if (succeeded) {
            dbUser.setStatus(dbUser.getStatus() + 1);
        }
    }
    if (succeeded) {
        DbFacade.getInstance().getDbUserDao().update(dbUser);
    }
}
#method_after
private static void updateDBUserFromADUser(DbUser dbUser, LdapUser ldapUser, HashSet<Guid> updatedUsers) {
    boolean succeeded = false;
    if ((ldapUser == null) || (ldapUser.getUserId().equals(Guid.Empty)) || (!ldapUser.getUserId().equals(dbUser.getId()))) {
        if (dbUser.isActive()) {
            log.warnFormat("User {0} not found in directory server, its status switched to InActive", dbUser.getFirstName());
            dbUser.setActive(false);
            succeeded = true;
        }
    } else {
        if (!dbUser.isActive()) {
            log.warnFormat("Inactive User {0} found in directory server, its status switched to Active", dbUser.getFirstName());
            dbUser.setActive(true);
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getFirstName(), ldapUser.getName())) {
            dbUser.setFirstName(ldapUser.getName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getLastName(), ldapUser.getSurName())) {
            dbUser.setLastName(ldapUser.getSurName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getDomain(), ldapUser.getDomainControler())) {
            dbUser.setDomain(ldapUser.getDomainControler());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getLoginName(), ldapUser.getUserName())) {
            dbUser.setLoginName(ldapUser.getUserName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getGroupNames(), ldapUser.getGroup())) {
            dbUser.setGroupNames(ldapUser.getGroup());
            succeeded = true;
            updatedUsers.add(dbUser.getId());
        }
        if (!StringUtils.equals(dbUser.getDepartment(), ldapUser.getDepartment())) {
            dbUser.setDepartment(ldapUser.getDepartment());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getRole(), ldapUser.getTitle())) {
            dbUser.setRole(ldapUser.getTitle());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getEmail(), ldapUser.getEmail())) {
            dbUser.setEmail(ldapUser.getEmail());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getGroupIds(), ldapUser.getGroupIds())) {
            dbUser.setGroupIds(ldapUser.getGroupIds());
            succeeded = true;
        }
    }
    if (succeeded) {
        DbFacade.getInstance().getDbUserDao().update(dbUser);
    }
}
#end_block

#method_before
public void refreshAllUserData(List<DbGroup> updatedGroups) {
    try {
        log.info("Start refreshing all users data");
        List<DbUser> allUsers = DbFacade.getInstance().getDbUserDao().getAll();
        List<String> domainsList = LdapBrokerUtils.getDomainsList(true);
        List<DbUser> filteredUsers = LinqUtils.filter(allUsers, new UsersPerDomainPredicate(domainsList));
        Map<String, Map<Guid, DbUser>> userByDomains = new HashMap<String, Map<Guid, DbUser>>();
        // Filter all users by domains
        for (DbUser user : filteredUsers) {
            Map<Guid, DbUser> domainUser;
            if (!userByDomains.containsKey(user.getDomain())) {
                domainUser = new HashMap<Guid, DbUser>();
                userByDomains.put(user.getDomain(), domainUser);
            } else {
                domainUser = userByDomains.get(user.getDomain());
            }
            domainUser.put(user.getId(), user);
        }
        if (userByDomains.size() != 0) {
            // Refresh users in each domain separately
            for (Map.Entry<String, Map<Guid, DbUser>> entry : userByDomains.entrySet()) {
                String domain = entry.getKey();
                List<LdapUser> adUsers = (List<LdapUser>) LdapFactory.getInstance(domain).RunAdAction(AdActionType.GetAdUserByUserIdList, new LdapSearchByUserIdListParameters(domain, new ArrayList<Guid>(entry.getValue().keySet()), false)).getReturnValue();
                HashSet<Guid> updatedUsers = new HashSet<Guid>();
                if (adUsers == null) {
                    log.warn("No users returned from directory server during refresh users");
                } else {
                    List<LdapGroup> ldapUpdatedGroups = new ArrayList<>(updatedGroups.size());
                    for (DbGroup dbGroup : updatedGroups) {
                        LdapGroup ldapGroup = new LdapGroup(dbGroup);
                        ldapUpdatedGroups.add(ldapGroup);
                    }
                    LdapBrokerUtils.performGroupPopulationForUsers(adUsers, domain, ldapUpdatedGroups);
                    for (LdapUser adUser : adUsers) {
                        updateDBUserFromADUser(userByDomains.get(domain).get(adUser.getUserId()), adUser, updatedUsers);
                        userByDomains.get(domain).remove(adUser.getUserId());
                    }
                }
                Collection<DbUser> usersForDomain = entry.getValue().values();
                if (usersForDomain == null) {
                    log.warnFormat("No users for domain {0}", domain);
                } else {
                    for (DbUser dbUser : usersForDomain) {
                        if (dbUser.getStatus() != 0) {
                            log.warnFormat("User {0} not found in directory server, its status switched to InActive", dbUser.getFirstName());
                            dbUser.setStatus(AsyncTaskStatusEnum.unknown.getValue());
                            DbFacade.getInstance().getDbUserDao().update(dbUser);
                        }
                    }
                }
                // group or role was changed
                if (updatedUsers.size() > 0) {
                    DbFacade.getInstance().updateLastAdminCheckStatus(updatedUsers.toArray(new Guid[updatedUsers.size()]));
                }
            }
        }
    } catch (RuntimeException e) {
        log.error("Failed to refresh users data.", e);
    }
}
#method_after
public void refreshAllUserData(List<DbGroup> updatedGroups) {
    try {
        log.info("Start refreshing all users data");
        List<DbUser> allUsers = DbFacade.getInstance().getDbUserDao().getAll();
        List<String> domainsList = LdapBrokerUtils.getDomainsList(true);
        List<DbUser> filteredUsers = LinqUtils.filter(allUsers, new UsersPerDomainPredicate(domainsList));
        Map<String, Map<Guid, DbUser>> userByDomains = new HashMap<String, Map<Guid, DbUser>>();
        // Map all users by domains
        for (DbUser user : filteredUsers) {
            Map<Guid, DbUser> domainUser;
            if (!userByDomains.containsKey(user.getDomain())) {
                domainUser = new HashMap<Guid, DbUser>();
                userByDomains.put(user.getDomain(), domainUser);
            } else {
                domainUser = userByDomains.get(user.getDomain());
            }
            domainUser.put(user.getId(), user);
        }
        if (userByDomains.size() != 0) {
            // Refresh users in each domain separately
            for (Map.Entry<String, Map<Guid, DbUser>> entry : userByDomains.entrySet()) {
                String domain = entry.getKey();
                List<LdapUser> adUsers = (List<LdapUser>) LdapFactory.getInstance(domain).runAdAction(AdActionType.GetAdUserByUserIdList, new LdapSearchByUserIdListParameters(domain, new ArrayList<Guid>(entry.getValue().keySet()), false)).getReturnValue();
                HashSet<Guid> updatedUsers = new HashSet<Guid>();
                if (adUsers == null) {
                    log.warn("No users returned from directory server during refresh users");
                } else {
                    List<LdapGroup> ldapUpdatedGroups = new ArrayList<>(updatedGroups.size());
                    for (DbGroup dbGroup : updatedGroups) {
                        LdapGroup ldapGroup = new LdapGroup(dbGroup);
                        ldapUpdatedGroups.add(ldapGroup);
                    }
                    LdapBrokerUtils.performGroupPopulationForUsers(adUsers, domain, ldapUpdatedGroups);
                    for (LdapUser adUser : adUsers) {
                        updateDBUserFromADUser(userByDomains.get(domain).get(adUser.getUserId()), adUser, updatedUsers);
                        userByDomains.get(domain).remove(adUser.getUserId());
                    }
                }
                Collection<DbUser> usersForDomain = entry.getValue().values();
                if (usersForDomain == null) {
                    log.warnFormat("No users for domain {0}", domain);
                } else {
                    for (DbUser dbUser : usersForDomain) {
                        if (dbUser.isActive()) {
                            log.warnFormat("User {0} not found in directory server, its status switched to InActive", dbUser.getFirstName());
                            dbUser.setActive(false);
                            DbFacade.getInstance().getDbUserDao().update(dbUser);
                        }
                    }
                }
                // group or role was changed
                if (updatedUsers.size() > 0) {
                    DbFacade.getInstance().updateLastAdminCheckStatus(updatedUsers.toArray(new Guid[updatedUsers.size()]));
                }
            }
        }
    } catch (RuntimeException e) {
        log.error("Failed to refresh users data.", e);
    }
}
#end_block

#method_before
private static List<DbGroup> updateGroups() {
    List<DbGroup> groups = DbFacade.getInstance().getDbGroupDao().getAll();
    for (DbGroup group : groups) {
        // following code should not occur
        if (group.getDomain() == null && group.getName().contains("@")) {
            StringBuilder logMsg = new StringBuilder();
            logMsg.append("domain name for ad group ").append(group.getName()).append(" is null. This should not occur, please check that domain name is passed correctly from client");
            log.warn(logMsg.toString());
            String partAfterAtSign = group.getName().split("[@]", -1)[1];
            String newDomainName = partAfterAtSign;
            if (partAfterAtSign.contains("/")) {
                String partPreviousToSlashSign = partAfterAtSign.split("[/]", -1)[0];
                newDomainName = partPreviousToSlashSign;
            }
            group.setDomain(newDomainName);
        }
        // to fetch for them
        if (group.getDomain() != null && !group.getDomain().isEmpty()) {
            if (UsersDomainsCacheManagerService.getInstance().getDomain(group.getDomain()) == null) {
                log.errorFormat("Cannot query for group {0} from domain {1} because the domain is not configured. Please use the manage domains utility if you wish to add this domain.", group.getName(), group.getDomain());
            } else {
                LdapGroup groupFromAD = (LdapGroup) LdapFactory.getInstance(group.getDomain()).RunAdAction(AdActionType.GetAdGroupByGroupId, new LdapSearchByIdParameters(group.getDomain(), group.getId())).getReturnValue();
                if (// Active
                group.getStatus() == 1 && (groupFromAD == null || groupFromAD.getstatus() == LdapRefStatus.Inactive)) {
                    // Inactive
                    group.setStatus(0);
                } else if (groupFromAD != null && (!StringUtils.equals(group.getName(), groupFromAD.getname()) || group.getStatus() != groupFromAD.getstatus().getValue() || !StringUtils.equals(group.getDistinguishedName(), groupFromAD.getDistinguishedName()))) {
                    group = new DbGroup(groupFromAD);
                }
                DbFacade.getInstance().getDbGroupDao().update(group);
                // memberOf is not persistent and should be set in the returned groups list from the LDAP queries
                if (groupFromAD != null) {
                    group.setMemberOf(groupFromAD.getMemberOf());
                }
            }
        }
    }
    return groups;
}
#method_after
private static List<DbGroup> updateGroups() {
    List<DbGroup> groups = DbFacade.getInstance().getDbGroupDao().getAll();
    for (DbGroup group : groups) {
        // following code should not occur
        if (group.getDomain() == null && group.getName().contains("@")) {
            StringBuilder logMsg = new StringBuilder();
            logMsg.append("domain name for ad group ").append(group.getName()).append(" is null. This should not occur, please check that domain name is passed correctly from client");
            log.warn(logMsg.toString());
            String partAfterAtSign = group.getName().split("[@]", -1)[1];
            String newDomainName = partAfterAtSign;
            if (partAfterAtSign.contains("/")) {
                String partPreviousToSlashSign = partAfterAtSign.split("[/]", -1)[0];
                newDomainName = partPreviousToSlashSign;
            }
            group.setDomain(newDomainName);
        }
        // to fetch for them
        if (group.getDomain() != null && !group.getDomain().isEmpty()) {
            if (UsersDomainsCacheManagerService.getInstance().getDomain(group.getDomain()) == null) {
                log.errorFormat("Cannot query for group {0} from domain {1} because the domain is not configured. Please use the manage domains utility if you wish to add this domain.", group.getName(), group.getDomain());
            } else {
                LdapGroup groupFromAD = (LdapGroup) LdapFactory.getInstance(group.getDomain()).runAdAction(AdActionType.GetAdGroupByGroupId, new LdapSearchByIdParameters(group.getDomain(), group.getId())).getReturnValue();
                if (group.isActive() && (groupFromAD == null || !groupFromAD.isActive())) {
                    group.setActive(false);
                } else if (groupFromAD != null && (!StringUtils.equals(group.getName(), groupFromAD.getname()) || group.isActive() != groupFromAD.isActive() || !StringUtils.equals(group.getDistinguishedName(), groupFromAD.getDistinguishedName()))) {
                    group = new DbGroup(groupFromAD);
                }
                DbFacade.getInstance().getDbGroupDao().update(group);
                // memberOf is not persistent and should be set in the returned groups list from the LDAP queries
                if (groupFromAD != null) {
                    group.setMemberOf(new HashSet<>(groupFromAD.getMemberOf()));
                }
            }
        }
    }
    return groups;
}
#end_block

#method_before
public static List<String> getDomainsList(boolean filterInternalDomain) {
    String[] domains = Config.<String>GetValue(ConfigValues.DomainName).split("[,]", -1);
    List<String> results = new ArrayList<String>();
    for (String domain : domains) {
        String trimmedDomain = domain.trim();
        if (!trimmedDomain.isEmpty()) {
            results.add(trimmedDomain);
        }
    }
    if (!filterInternalDomain) {
        results.add(Config.<String>GetValue(ConfigValues.AdminDomain).trim());
    }
    return results;
}
#method_after
public static List<String> getDomainsList(boolean filterInternalDomain) {
    String[] domains = Config.<String>getValue(ConfigValues.DomainName).split("[,]", -1);
    List<String> results = new ArrayList<String>();
    for (String domain : domains) {
        String trimmedDomain = domain.trim();
        if (!trimmedDomain.isEmpty()) {
            results.add(trimmedDomain);
        }
    }
    if (!filterInternalDomain) {
        results.add(Config.<String>getValue(ConfigValues.AdminDomain).trim());
    }
    return results;
}
#end_block

#method_before
public static List<GroupSearchResult> performGroupQuery(String loginName, String password, String domainName, LdapQueryData queryData) {
    LdapCredentials ldapCredentials = new LdapCredentials(LdapBrokerUtils.modifyLoginNameForKerberos(loginName, domainName), password);
    DirectorySearcher directorySearcher = new DirectorySearcher(ldapCredentials);
    try {
        List<GroupSearchResult> searchResults = (List<GroupSearchResult>) directorySearcher.FindAll(queryData);
        return searchResults;
    } catch (DomainNotConfiguredException ex) {
        log.errorFormat("User {0} from domain {1} is a member of a group from {2} which is not configured. Please use the manage domains utility if you wish to add this domain.", loginName, domainName, queryData.getDomain());
        return null;
    }
}
#method_after
public static List<GroupSearchResult> performGroupQuery(String loginName, String password, String domainName, LdapQueryData queryData) {
    LdapCredentials ldapCredentials = new LdapCredentials(LdapBrokerUtils.modifyLoginNameForKerberos(loginName, domainName), password);
    DirectorySearcher directorySearcher = new DirectorySearcher(ldapCredentials);
    try {
        List<GroupSearchResult> searchResults = (List<GroupSearchResult>) directorySearcher.findAll(queryData);
        return searchResults;
    } catch (DomainNotConfiguredException ex) {
        log.errorFormat("User {0} from domain {1} is a member of a group from {2} which is not configured. Please use the manage domains utility if you wish to add this domain.", loginName, domainName, queryData.getDomain());
        return null;
    }
}
#end_block

#method_before
public static void addLdapConfigValues(Hashtable<String, String> env) {
    env.put("com.sun.jndi.ldap.read.timeout", Long.toString(Config.<Integer>GetValue(ConfigValues.LDAPQueryTimeout) * 1000));
    env.put("com.sun.jndi.ldap.connect.timeout", Long.toString(Config.<Integer>GetValue(ConfigValues.LDAPConnectTimeout) * 1000));
}
#method_after
public static void addLdapConfigValues(Hashtable<String, String> env) {
    env.put("com.sun.jndi.ldap.read.timeout", Long.toString(Config.<Integer>getValue(ConfigValues.LDAPQueryTimeout) * 1000));
    env.put("com.sun.jndi.ldap.connect.timeout", Long.toString(Config.<Integer>getValue(ConfigValues.LDAPConnectTimeout) * 1000));
}
#end_block

#method_before
protected VmNetworkInterfaceDao getVmNetworkInterfaceDao() {
    return getDbFacade().getVmNetworkInterfaceDao();
}
#method_after
public VmNetworkInterfaceDao getVmNetworkInterfaceDao() {
    return getDbFacade().getVmNetworkInterfaceDao();
}
#end_block

#method_before
public Integer getCustomId() {
    return customId;
}
#method_after
public String getCustomId() {
    return customId;
}
#end_block

#method_before
public void setCustomId(Integer customId) {
    this.customId = customId;
}
#method_after
public void setCustomId(String customId) {
    this.customId = customId;
}
#end_block

#method_before
@Override
@Before
public void setUp() throws Exception {
    super.setUp();
    dao = dbFacade.getDbGroupDao();
    // create some test data
    newGroup = new DbGroup();
    newGroup.setId(Guid.newGuid());
    newGroup.setExternalId(new ExternalId(0));
    newGroup.setDomain("domain");
    newGroup.setName("name");
    newGroup.setStatus(1);
    existingGroup = dao.get(new Guid("b399944a-81ab-4ec5-8266-e19ba7c3c9d1"));
}
#method_after
@Override
@Before
public void setUp() throws Exception {
    super.setUp();
    dao = dbFacade.getDbGroupDao();
    // create some test data
    newGroup = new DbGroup();
    newGroup.setId(Guid.newGuid());
    newGroup.setExternalId(new ExternalId(0));
    newGroup.setDomain("domain");
    newGroup.setName("name");
    newGroup.setActive(true);
    existingGroup = dao.get(new Guid("b399944a-81ab-4ec5-8266-e19ba7c3c9d1"));
}
#end_block

#method_before
@Test
public void testUpdate() {
    existingGroup.setName(existingGroup.getName().toUpperCase());
    existingGroup.setDomain(existingGroup.getDomain().toUpperCase());
    existingGroup.setStatus(0);
    dao.update(existingGroup);
    DbGroup result = dao.get(existingGroup.getId());
    assertNotNull(result);
    assertEquals(existingGroup, result);
}
#method_after
@Test
public void testUpdate() {
    existingGroup.setName(existingGroup.getName().toUpperCase());
    existingGroup.setDomain(existingGroup.getDomain().toUpperCase());
    existingGroup.setActive(false);
    dao.update(existingGroup);
    DbGroup result = dao.get(existingGroup.getId());
    assertNotNull(result);
    assertEquals(existingGroup, result);
}
#end_block

#method_before
private void insertOrUpdate(final DbGroup group, final String storedProcName) {
    getCallsHandler().executeModification(storedProcName, getCustomMapSqlParameterSource().addValue("id", group.getId()).addValue("name", group.getName()).addValue("status", group.getStatus()).addValue("domain", group.getDomain()).addValue("distinguishedname", group.getDistinguishedName()).addValue("external_id", group.getExternalId()));
}
#method_after
private void insertOrUpdate(final DbGroup group, final String storedProcName) {
    getCallsHandler().executeModification(storedProcName, getCustomMapSqlParameterSource().addValue("id", group.getId()).addValue("name", group.getName()).addValue("active", group.isActive()).addValue("domain", group.getDomain()).addValue("distinguishedname", group.getDistinguishedName()).addValue("external_id", group.getExternalId()));
}
#end_block

#method_before
@Override
public DbGroup mapRow(final ResultSet rs, final int rowNum) throws SQLException {
    DbGroup entity = new DbGroup();
    entity.setId(getGuidDefaultEmpty(rs, "id"));
    entity.setName(rs.getString("name"));
    entity.setStatus(rs.getInt("status"));
    entity.setDomain(rs.getString("domain"));
    entity.setDistinguishedName(rs.getString("distinguishedname"));
    entity.setExternalId(new ExternalId(rs.getBytes("external_id")));
    return entity;
}
#method_after
@Override
public DbGroup mapRow(final ResultSet rs, final int rowNum) throws SQLException {
    DbGroup entity = new DbGroup();
    entity.setId(getGuidDefaultEmpty(rs, "id"));
    entity.setName(rs.getString("name"));
    entity.setActive(rs.getBoolean("active"));
    entity.setDomain(rs.getString("domain"));
    entity.setDistinguishedName(rs.getString("distinguishedname"));
    entity.setExternalId(new ExternalId(rs.getBytes("external_id")));
    return entity;
}
#end_block

#method_before
public String getVdcObjectName() {
    permissions perms = getParameters().getPermission();
    return getDbFacade().getEntityNameByIdAndType(perms.getObjectId(), perms.getObjectType());
}
#method_after
public String getVdcObjectName() {
    Permissions perms = getParameters().getPermission();
    return getDbFacade().getEntityNameByIdAndType(perms.getObjectId(), perms.getObjectType());
}
#end_block

#method_before
public void initUserAndGroupData() {
    if (_dbUser == null) {
        _dbUser = getDbUserDAO().get(getParameters().getPermission().getad_element_id());
    }
    if (_adGroup == null) {
        DbGroup dbGroup = getAdGroupDAO().get(getParameters().getPermission().getad_element_id());
        _adGroup = new LdapGroup(dbGroup);
    }
}
#method_after
public void initUserAndGroupData() {
    if (_dbUser == null) {
        _dbUser = getDbUserDAO().get(getParameters().getPermission().getad_element_id());
    }
    if (_adGroup == null) {
        DbGroup dbGroup = getAdGroupDAO().get(getParameters().getPermission().getad_element_id());
        if (dbGroup != null) {
            _adGroup = new LdapGroup(dbGroup);
        }
    }
}
#end_block

#method_before
protected boolean isSystemSuperUser() {
    permissions superUserPermission = getPermissionDAO().getForRoleAndAdElementAndObjectWithGroupCheck(PredefinedRoles.SUPER_USER.getId(), getCurrentUser().getId(), MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID);
    return superUserPermission != null;
}
#method_after
protected boolean isSystemSuperUser() {
    Permissions superUserPermission = getPermissionDAO().getForRoleAndAdElementAndObjectWithGroupCheck(PredefinedRoles.SUPER_USER.getId(), getCurrentUser().getId(), MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID);
    return superUserPermission != null;
}
#end_block

#method_before
// TODO - this code is shared with addPermissionCommand - check if
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    permissions permission = getParameters().getPermission();
    permissionList.add(new PermissionSubject(permission.getObjectId(), permission.getObjectType(), getActionType().getActionGroup()));
    return permissionList;
}
#method_after
// TODO - this code is shared with addPermissionCommand - check if
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    Permissions permission = getParameters().getPermission();
    permissionList.add(new PermissionSubject(permission.getObjectId(), permission.getObjectType(), getActionType().getActionGroup()));
    return permissionList;
}
#end_block

#method_before
@After
public void tearDown() throws Exception {
    // Make sure that the query start and end have been called at least once.
    // Some of the tests might call it more than once.
    verify(queryStartEvent, atLeastOnce()).raise(Frontend.class, EventArgs.Empty);
    verify(queryCompleteEvent, atLeastOnce()).raise(Frontend.class, EventArgs.Empty);
    // Make sure the context is correct
    // $NON-NLS-1$ //$NON-NLS-2$
    assertEquals("Context should be 'test'", Frontend.getCurrentContext(), "test");
}
#method_after
@After
public void tearDown() throws Exception {
    // Make sure that the query start and end have been called at least once.
    // Some of the tests might call it more than once.
    verify(queryStartEvent, atLeastOnce()).raise(Frontend.class, EventArgs.Empty);
    verify(queryCompleteEvent, atLeastOnce()).raise(Frontend.class, EventArgs.Empty);
    // Make sure the context is correct
    // $NON-NLS-1$ //$NON-NLS-2$
    assertEquals("Context should be 'test'", frontend.getCurrentContext(), "test");
}
#end_block

#method_before
private ReportCommand addOpenReportCommand(ReportCommand reportCommand) {
    if (openReportCommands.add(reportCommand)) {
        ArrayList<IVdcQueryable> items = getSelectedItems() != null ? Linq.<IVdcQueryable>cast(getSelectedItems()) : new ArrayList<IVdcQueryable>();
        updateReportCommandAvailability(reportCommand, items);
        return reportCommand;
    } else {
        return null;
    }
}
#method_after
private ReportCommand addOpenReportCommand(ReportCommand reportCommand) {
    if (openReportCommands.add(reportCommand)) {
        List<IVdcQueryable> items = getSelectedItems() != null ? Linq.<IVdcQueryable>cast(getSelectedItems()) : new ArrayList<IVdcQueryable>();
        updateReportCommandAvailability(reportCommand, items);
        return reportCommand;
    } else {
        return null;
    }
}
#end_block

#method_before
public int getSearchPageNumber() {
    if (StringHelper.isNullOrEmpty(getSearchString())) {
        return 1;
    }
    // try getting the end of SearchString in the form of "page <n>"
    String pageStringRegex = PAGE_STRING_REGEX;
    Match match = Regex.Match(getSearchString(), pageStringRegex, RegexOptions.IgnoreCase);
    if (match.Success()) {
        // retrieve the page number itself:
        // == "page <n>"
        String pageString = match.getValue();
        String pageNumberRegex = PAGE_NUMBER_REGEX;
        match = Regex.Match(pageString, pageNumberRegex);
        if (match.Success()) {
            final Integer retValue = IntegerCompat.tryParse(match.getValue());
            if (retValue != null) {
                return retValue;
            }
        }
    }
    return 1;
}
#method_after
public int getSearchPageNumber() {
    if (StringHelper.isNullOrEmpty(getSearchString())) {
        return 1;
    }
    // try getting the end of SearchString in the form of "page <n>"
    String pageStringRegex = PAGE_STRING_REGEX;
    Match match = Regex.Match(getSearchString(), pageStringRegex, RegexOptions.IgnoreCase);
    if (match.success()) {
        // retrieve the page number itself:
        // == "page <n>"
        String pageString = match.getValue();
        String pageNumberRegex = PAGE_NUMBER_REGEX;
        match = Regex.Match(pageString, pageNumberRegex);
        if (match.success()) {
            final Integer retValue = IntegerCompat.tryParse(match.getValue());
            if (retValue != null) {
                return retValue;
            }
        }
    }
    return 1;
}
#end_block

#method_before
@Override
public void setSelectedItem(Object value) {
    setIsQueryFirstTime(true);
    super.setSelectedItem(value);
    setIsQueryFirstTime(false);
}
#method_after
@Override
public void setSelectedItem(T value) {
    setIsQueryFirstTime(true);
    super.setSelectedItem(value);
    setIsQueryFirstTime(false);
}
#end_block

#method_before
@Override
public void setEntity(Object value) {
    if (getEntity() == null) {
        super.setEntity(value);
        return;
    }
    // Equals doesn't always has the same outcome as checking the ids of the elements.
    if (getEntity() instanceof IVdcQueryable) {
        if (value != null) {
            IVdcQueryable ivdcq_value = (IVdcQueryable) value;
            IVdcQueryable ivdcq_entity = (IVdcQueryable) getEntity();
            if (!ivdcq_value.getQueryableId().equals(ivdcq_entity.getQueryableId())) {
                super.setEntity(value);
                return;
            }
        }
    }
    if (!getEntity().equals(value)) {
        super.setEntity(value);
        return;
    }
    setEntity(value, false);
}
#method_after
@Override
public void setEntity(T value) {
    if (getEntity() == null) {
        super.setEntity(value);
        return;
    }
    // Equals doesn't always has the same outcome as checking the ids of the elements.
    if (value != null) {
        if (!((IVdcQueryable) value).getQueryableId().equals(((IVdcQueryable) getEntity()).getQueryableId())) {
            super.setEntity(value);
            return;
        }
    }
    if (!getEntity().equals(value)) {
        super.setEntity(value);
        return;
    }
    setEntity(value, false);
}
#end_block

#method_before
public void search() {
    // Defer search if there max result limit was not yet retrieved.
    if (getSearchPageSize() == UnknownInteger) {
        asyncCallback.RequestSearch();
    } else {
        stopRefresh();
        if (getIsQueryFirstTime()) {
            setSelectedItem(null);
            setSelectedItems(null);
        }
        if (getIsTimerDisabled() == false) {
            setIsQueryFirstTime(true);
            syncSearch();
            setIsQueryFirstTime(false);
            getTimer().start();
            if (getEventBus() != null) {
                // Make sure to unregister any existing handler, before adding a new one.
                unregisterOperationCompleteHandler();
                // Register to listen for operation complete events.
                operationCompleteHandlerRegistration = getEventBus().addHandler(VdcOperationCompleteEvent.getType(), new VdcOperationCompleteHandler() {

                    @Override
                    public void onVdcOperationComplete(VdcOperationCompleteEvent event) {
                        // This is an operation this model is interested in, refresh.
                        getForceRefreshCommand().execute();
                    }
                });
            }
        } else {
            syncSearch();
        }
    }
}
#method_after
public void search() {
    // Defer search if there max result limit was not yet retrieved.
    if (getSearchPageSize() == UnknownInteger) {
        asyncCallback.requestSearch();
    } else {
        stopRefresh();
        if (getIsQueryFirstTime()) {
            setSelectedItem(null);
            setSelectedItems(null);
        }
        if (getIsTimerDisabled() == false) {
            setIsQueryFirstTime(true);
            syncSearch();
            setIsQueryFirstTime(false);
            getTimer().start();
        } else {
            syncSearch();
        }
    }
}
#end_block

#method_before
protected ReportModel createReportModel() {
    ReportCommand reportCommand = (ReportCommand) getLastExecutedCommand();
    ReportModel reportModel = new ReportModel(ReportInit.getInstance().getReportBaseUrl());
    reportModel.setReportUnit(reportCommand.getUriValue());
    if (reportCommand.getIdParamName() != null) {
        for (Object item : getSelectedItems()) {
            if (((ReportCommand) getLastExecutedCommand()).isMultiple) {
                reportModel.addResourceId(reportCommand.getIdParamName(), ((BusinessEntity<?>) item).getId().toString());
            } else {
                reportModel.setResourceId(reportCommand.getIdParamName(), ((BusinessEntity<?>) item).getId().toString());
            }
        }
    }
    boolean isFromSameDc = true;
    boolean firstItem = true;
    // $NON-NLS-1$
    String dcId = "";
    for (Object item : getSelectedItems()) {
        if (item instanceof HasStoragePool) {
            if (firstItem) {
                dcId = ((HasStoragePool<?>) item).getStoragePoolId().toString();
                firstItem = false;
            } else if (!(((HasStoragePool<?>) item).getStoragePoolId().toString().equals(dcId))) {
                isFromSameDc = false;
                reportModel.setDifferntDcError(true);
                continue;
            }
        }
    }
    if (!dcId.equals("")) {
        // $NON-NLS-1$
        reportModel.setDataCenterID(dcId);
    }
    return reportModel;
}
#method_after
protected ReportModel createReportModel() {
    ReportCommand reportCommand = (ReportCommand) getLastExecutedCommand();
    ReportModel reportModel = new ReportModel(ReportInit.getInstance().getReportBaseUrl());
    reportModel.setReportUnit(reportCommand.getUriValue());
    if (reportCommand.getIdParamName() != null) {
        for (T item : getSelectedItems()) {
            if (((ReportCommand) getLastExecutedCommand()).isMultiple) {
                reportModel.addResourceId(reportCommand.getIdParamName(), ((BusinessEntity<?>) item).getId().toString());
            } else {
                reportModel.setResourceId(reportCommand.getIdParamName(), ((BusinessEntity<?>) item).getId().toString());
            }
        }
    }
    boolean firstItem = true;
    // $NON-NLS-1$
    String dcId = "";
    for (T item : getSelectedItems()) {
        if (item instanceof HasStoragePool) {
            if (firstItem) {
                dcId = ((HasStoragePool<?>) item).getStoragePoolId().toString();
                firstItem = false;
            } else if (!(((HasStoragePool<?>) item).getStoragePoolId().toString().equals(dcId))) {
                reportModel.setDifferntDcError(true);
                continue;
            }
        }
    }
    if (!dcId.equals("")) {
        // $NON-NLS-1$
        reportModel.setDataCenterID(dcId);
    }
    return reportModel;
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(RegistrationResult.RetrievedEventDefinition)) {
        asyncResult_Retrieved();
    }
    if (ev.matchesDefinition(ProvideTickEvent.Definition)) {
        syncSearch();
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(RegistrationResult.RetrievedEventDefinition)) {
        asyncResult_Retrieved();
    }
    if (ev.matchesDefinition(ProvideTickEvent.definition)) {
        syncSearch();
    }
}
#end_block

#method_before
protected void setComparator(Comparator comparator) {
    if (comparator == this.comparator) {
        return;
    }
    this.comparator = comparator;
    Iterable items = getItems();
    if (items == null) {
        return;
    }
    Collection identicalItems = (comparator == null) ? new ArrayList() : new TreeSet(comparator);
    for (Object item : items) {
        identicalItems.add(item);
    }
    setItems(identicalItems);
}
#method_after
protected void setComparator(Comparator<T> comparator) {
    if (comparator == this.comparator) {
        return;
    }
    this.comparator = comparator;
    Iterable<T> items = getItems();
    if (items == null) {
        return;
    }
    Collection<T> identicalItems = (comparator == null) ? new ArrayList<T>() : new TreeSet<T>(comparator);
    for (T item : items) {
        identicalItems.add(item);
    }
    setItems(identicalItems);
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (items != value) {
        IVdcQueryable lastSelectedItem = (IVdcQueryable) getSelectedItem();
        ArrayList<IVdcQueryable> lastSelectedItems = new ArrayList<IVdcQueryable>();
        if (getSelectedItems() != null) {
            for (Object item : getSelectedItems()) {
                lastSelectedItems.add((IVdcQueryable) item);
            }
        }
        if (comparator == null || ((value instanceof SortedSet) && (((SortedSet) value).comparator() == comparator))) {
            itemsChanging(value, items);
            items = value;
        } else {
            TreeSet sortedValue = null;
            if (value != null) {
                sortedValue = new TreeSet(comparator);
                for (Object item : value) {
                    sortedValue.add(item);
                }
            }
            itemsChanging(sortedValue, items);
            items = sortedValue;
        }
        updatePagingAvailability();
        getItemsChangedEvent().raise(this, EventArgs.Empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
        selectedItem = null;
        if (getSelectedItems() != null) {
            getSelectedItems().clear();
        }
        if (lastSelectedItem != null && items != null) {
            IVdcQueryable newSelectedItem = null;
            ArrayList<IVdcQueryable> newItems = new ArrayList<IVdcQueryable>();
            for (Object item : items) {
                newItems.add((IVdcQueryable) item);
            }
            if (newItems != null) {
                for (IVdcQueryable newItem : newItems) {
                    // Search for selected item
                    if (newItem.getQueryableId().equals(lastSelectedItem.getQueryableId())) {
                        newSelectedItem = newItem;
                    } else {
                        // Search for selected items
                        for (IVdcQueryable item : lastSelectedItems) {
                            if (newItem.getQueryableId().equals(item.getQueryableId())) {
                                selectedItems.add(newItem);
                            }
                        }
                    }
                }
            }
            if (newSelectedItem != null) {
                selectedItem = newSelectedItem;
                if (selectedItems != null) {
                    selectedItems.add(newSelectedItem);
                }
            }
        }
        onSelectedItemChanged();
    }
}
#method_after
@Override
public void setItems(Iterable<T> value) {
    if (items != value) {
        T lastSelectedItem = getSelectedItem();
        List<T> lastSelectedItems = new ArrayList<T>();
        if (getSelectedItems() != null) {
            for (T item : getSelectedItems()) {
                lastSelectedItems.add(item);
            }
        }
        if (comparator == null || ((value instanceof SortedSet) && (((SortedSet) value).comparator() == comparator))) {
            itemsChanging(value, items);
            items = value;
        } else {
            TreeSet<T> sortedValue = null;
            if (value != null) {
                sortedValue = new TreeSet<T>(comparator);
                for (T item : value) {
                    sortedValue.add(item);
                }
            }
            itemsChanging(sortedValue, items);
            items = sortedValue;
        }
        updatePagingAvailability();
        getItemsChangedEvent().raise(this, EventArgs.Empty);
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Items"));
        selectedItem = null;
        if (getSelectedItems() != null) {
            getSelectedItems().clear();
        }
        if (lastSelectedItem != null && items != null) {
            T newSelectedItem = null;
            List<T> newItems = new ArrayList<T>();
            for (T item : items) {
                newItems.add(item);
            }
            if (newItems != null) {
                for (T newItem : newItems) {
                    // Search for selected item
                    if (((IVdcQueryable) newItem).getQueryableId().equals(((IVdcQueryable) lastSelectedItem).getQueryableId())) {
                        newSelectedItem = newItem;
                    } else {
                        // Search for selected items
                        for (T item : lastSelectedItems) {
                            if (((IVdcQueryable) newItem).getQueryableId().equals(((IVdcQueryable) item).getQueryableId())) {
                                selectedItems.add(newItem);
                            }
                        }
                    }
                }
            }
            if (newSelectedItem != null) {
                selectedItem = newSelectedItem;
                if (selectedItems != null) {
                    selectedItems.add(newSelectedItem);
                }
            }
        }
        onSelectedItemChanged();
    }
}
#end_block

#method_before
public void syncSearch(VdcQueryType vdcQueryType, VdcQueryParametersBase vdcQueryParametersBase) {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            SearchableListModel searchableListModel = (SearchableListModel) model;
            searchableListModel.setItems((Iterable) ((VdcQueryReturnValue) ReturnValue).getReturnValue());
        }
    };
    vdcQueryParametersBase.setRefresh(getIsQueryFirstTime());
    Frontend.RunQuery(vdcQueryType, vdcQueryParametersBase, _asyncQuery);
    setIsQueryFirstTime(false);
}
#method_after
public void syncSearch(VdcQueryType vdcQueryType, VdcQueryParametersBase vdcQueryParametersBase) {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            SearchableListModel searchableListModel = (SearchableListModel) model;
            searchableListModel.setItems((Iterable) ((VdcQueryReturnValue) ReturnValue).getReturnValue());
        }
    };
    vdcQueryParametersBase.setRefresh(getIsQueryFirstTime());
    Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, _asyncQuery);
    setIsQueryFirstTime(false);
}
#end_block

#method_before
public void stopRefresh() {
    getTimer().stop();
    unregisterOperationCompleteHandler();
}
#method_after
public void stopRefresh() {
    getTimer().stop();
}
#end_block

#method_before
@Override
public void onUserPortalModelInit(UserPortalModelInitEvent event) {
    if (this.model != null) {
        // Clear the event bus from original model if it still exists.
        this.model.unregisterHandlers();
        this.model.setEventBus(null);
    }
    this.model = createModel();
    this.model.setEventBus(getEventBus());
}
#method_after
@Override
public void onUserPortalModelInit(UserPortalModelInitEvent event) {
    this.model = createModel();
}
#end_block

#method_before
public void signOut() {
    // Stop search on all list models.
    for (SearchableListModel listModel : getItems()) {
        listModel.stopRefresh();
    }
    getEventList().stopRefresh();
    getAlertList().stopRefresh();
    getTaskList().stopRefresh();
    getBookmarkList().stopRefresh();
    getRoleListModel().stopRefresh();
    getSystemPermissionListModel().stopRefresh();
    getClusterPolicyListModel().stopRefresh();
    if (Frontend.getInstance().getIsUserLoggedIn()) {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setHandleFailure(true);
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object ReturnValue) {
            }
        };
        setLoggedInUser(null);
        getSignedOutEvent().raise(this, EventArgs.Empty);
        Frontend.LogoffAsync(Frontend.getInstance().getLoggedInUser(), _asyncQuery);
    }
}
#method_after
public void signOut() {
    // Stop search on all list models.
    for (SearchableListModel listModel : getItems()) {
        listModel.stopRefresh();
    }
    getEventList().stopRefresh();
    getAlertList().stopRefresh();
    getTaskList().stopRefresh();
    getBookmarkList().stopRefresh();
    getRoleListModel().stopRefresh();
    getSystemPermissionListModel().stopRefresh();
    getClusterPolicyListModel().stopRefresh();
    if (Frontend.getInstance().getIsUserLoggedIn()) {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setHandleFailure(true);
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object ReturnValue) {
            }
        };
        setLoggedInUser(null);
        getSignedOutEvent().raise(this, EventArgs.Empty);
        Frontend.getInstance().logoffAsync(Frontend.getInstance().getLoggedInUser(), _asyncQuery);
    }
}
#end_block

#method_before
public void search() {
    executingSearch = true;
    // Prevent from entering an empty search string.
    if (StringHelper.isNullOrEmpty(getEffectiveSearchString()) && getSelectedItem() != null) {
        setSearchString(getSelectedItem().getDefaultSearchString());
    }
    // Determine a list model matching the search string.
    SearchableListModel model = null;
    for (SearchableListModel a : getItems()) {
        if (a.isSearchStringMatch(getEffectiveSearchString())) {
            model = a;
            break;
        }
    }
    if (model != null) {
        // Transfer a search string to the model.
        model.setSearchString(getEffectiveSearchString());
        // Change active list model as neccesary.
        setSelectedItem(model);
        // Propagate search command to a concrete list model.
        getSelectedItem().getSearchCommand().execute();
    }
    executingSearch = false;
}
#method_after
public void search() {
    executingSearch = true;
    // Prevent from entering an empty search string.
    if (StringHelper.isNullOrEmpty(getEffectiveSearchString()) && getSelectedItem() != null) {
        setSearchString(getSelectedItem().getDefaultSearchString());
    }
    // Determine a list model matching the search string.
    SearchableListModel model = null;
    for (SearchableListModel a : getItems()) {
        if (a.isSearchStringMatch(getEffectiveSearchString())) {
            model = a;
            break;
        }
    }
    if (model != null) {
        // Transfer a search string to the model.
        model.setSearchString(getEffectiveSearchString());
        // Setting it now currently only to false, for case-insensitive search
        model.setCaseSensitiveSearch(false);
        // Change active list model as neccesary.
        setSelectedItem(model);
        // Propagate search command to a concrete list model.
        getSelectedItem().getSearchCommand().execute();
    }
    executingSearch = false;
}
#end_block

#method_before
protected void onCommonModelChange() {
    // Register dialog model property change listener
    popupHandler.addDialogModelListener(getModel());
    // Register WidgetModel property change listener
    getModel().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("WidgetModel".equals(propName)) {
                // $NON-NLS-1$
                modelBoundWidgetChange();
            }
        }
    });
}
#method_after
protected void onCommonModelChange() {
    // Register dialog model property change listener
    popupHandler.addDialogModelListener(getModel());
    // Register WidgetModel property change listener
    getModel().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("WidgetModel".equals(propName)) {
                // $NON-NLS-1$
                modelBoundWidgetChange();
            }
        }
    });
    getModel().setEventBus(getEventBus());
}
#end_block

#method_before
public static Frontend getInstance() {
    return instance;
}
#method_after
public static Frontend getInstance() {
    return InstanceHolder.instance;
}
#end_block

#method_before
public void runQuery(final VdcQueryType queryType, final VdcQueryParametersBase parameters, final AsyncQuery callback, final boolean isPublic) {
    initQueryParamsFilter(parameters);
    final VdcOperation<VdcQueryType, VdcQueryParametersBase> operation = new VdcOperation<VdcQueryType, VdcQueryParametersBase>(queryType, parameters, isPublic, new VdcOperationCallback<VdcOperation<VdcQueryType, VdcQueryParametersBase>, VdcQueryReturnValue>() {

        @Override
        public void onSuccess(final VdcOperation<VdcQueryType, VdcQueryParametersBase> operation, final VdcQueryReturnValue result) {
            try {
                if (!result.getSucceeded()) {
                    logger.log(Level.WARNING, // $NON-NLS-1$
                    "Failure while invoking runQuery [" + result.getExceptionString() + // $NON-NLS-1$
                    "]");
                    if (getEventsHandler() != null) {
                        ArrayList<VdcQueryReturnValue> failedResult = new ArrayList<VdcQueryReturnValue>();
                        failedResult.add(result);
                        // getEventsHandler().runQueryFailed(failedResult);
                        String errorMessage = result.getExceptionString();
                        handleNotLoggedInEvent(errorMessage);
                    }
                    if (callback.isHandleFailure()) {
                        callback.getDel().onSuccess(callback.getModel(), result);
                    }
                } else {
                    callback.setOriginalReturnValue(result);
                    if (callback.getConverter() != null) {
                        callback.getDel().onSuccess(callback.getModel(), callback.getConverter().Convert(result.getReturnValue(), callback));
                    } else {
                        callback.getDel().onSuccess(callback.getModel(), result);
                    }
                }
            } finally {
                raiseQueryCompleteEvent(queryType, callback.getContext());
                if (isEventQuery(queryType, parameters) && !((List<?>) result.getReturnValue()).isEmpty()) {
                    raiseOperationCompleteEvent(operation);
                }
            }
        }

        @Override
        public void onFailure(final VdcOperation<VdcQueryType, VdcQueryParametersBase> operation, final Throwable caught) {
            try {
                if (ignoreFailure(caught)) {
                    return;
                }
                // $NON-NLS-1$
                logger.log(Level.SEVERE, "Failed to execute runQuery: " + caught, caught);
                getEventsHandler().runQueryFailed(null);
                failureEventHandler(caught);
                if (callback.isHandleFailure()) {
                    callback.getDel().onSuccess(callback.getModel(), null);
                }
            } finally {
                raiseQueryCompleteEvent(queryType, callback.getContext());
            }
        }
    });
    // raise the query started event.
    raiseQueryStartedEvent(queryType, callback.getContext());
    if (isPublic) {
        getInstance().getOperationManager().addPublicOperation(operation);
    } else {
        getInstance().getOperationManager().addOperation(operation);
    }
}
#method_after
public void runQuery(final VdcQueryType queryType, final VdcQueryParametersBase parameters, final AsyncQuery callback) {
    runQuery(queryType, parameters, callback, false);
}
#end_block

#method_before
public void runQuery(final VdcQueryType queryType, final VdcQueryParametersBase parameters, final AsyncQuery callback, final boolean isPublic) {
    initQueryParamsFilter(parameters);
    final VdcOperation<VdcQueryType, VdcQueryParametersBase> operation = new VdcOperation<VdcQueryType, VdcQueryParametersBase>(queryType, parameters, isPublic, new VdcOperationCallback<VdcOperation<VdcQueryType, VdcQueryParametersBase>, VdcQueryReturnValue>() {

        @Override
        public void onSuccess(final VdcOperation<VdcQueryType, VdcQueryParametersBase> operation, final VdcQueryReturnValue result) {
            try {
                if (!result.getSucceeded()) {
                    logger.log(Level.WARNING, // $NON-NLS-1$
                    "Failure while invoking runQuery [" + result.getExceptionString() + // $NON-NLS-1$
                    "]");
                    if (getEventsHandler() != null) {
                        ArrayList<VdcQueryReturnValue> failedResult = new ArrayList<VdcQueryReturnValue>();
                        failedResult.add(result);
                        // getEventsHandler().runQueryFailed(failedResult);
                        String errorMessage = result.getExceptionString();
                        handleNotLoggedInEvent(errorMessage);
                    }
                    if (callback.isHandleFailure()) {
                        callback.getDel().onSuccess(callback.getModel(), result);
                    }
                } else {
                    callback.setOriginalReturnValue(result);
                    if (callback.getConverter() != null) {
                        callback.getDel().onSuccess(callback.getModel(), callback.getConverter().Convert(result.getReturnValue(), callback));
                    } else {
                        callback.getDel().onSuccess(callback.getModel(), result);
                    }
                }
            } finally {
                raiseQueryCompleteEvent(queryType, callback.getContext());
                if (isEventQuery(queryType, parameters) && !((List<?>) result.getReturnValue()).isEmpty()) {
                    raiseOperationCompleteEvent(operation);
                }
            }
        }

        @Override
        public void onFailure(final VdcOperation<VdcQueryType, VdcQueryParametersBase> operation, final Throwable caught) {
            try {
                if (ignoreFailure(caught)) {
                    return;
                }
                // $NON-NLS-1$
                logger.log(Level.SEVERE, "Failed to execute runQuery: " + caught, caught);
                getEventsHandler().runQueryFailed(null);
                failureEventHandler(caught);
                if (callback.isHandleFailure()) {
                    callback.getDel().onSuccess(callback.getModel(), null);
                }
            } finally {
                raiseQueryCompleteEvent(queryType, callback.getContext());
            }
        }
    });
    // raise the query started event.
    raiseQueryStartedEvent(queryType, callback.getContext());
    if (isPublic) {
        getInstance().getOperationManager().addPublicOperation(operation);
    } else {
        getInstance().getOperationManager().addOperation(operation);
    }
}
#method_after
public void runQuery(final VdcQueryType queryType, final VdcQueryParametersBase parameters, final AsyncQuery callback, final boolean isPublic) {
    initQueryParamsFilter(parameters);
    final VdcOperation<VdcQueryType, VdcQueryParametersBase> operation = new VdcOperation<VdcQueryType, VdcQueryParametersBase>(queryType, parameters, isPublic, new VdcOperationCallback<VdcOperation<VdcQueryType, VdcQueryParametersBase>, VdcQueryReturnValue>() {

        @Override
        public void onSuccess(final VdcOperation<VdcQueryType, VdcQueryParametersBase> operation, final VdcQueryReturnValue result) {
            try {
                if (!result.getSucceeded()) {
                    logger.log(Level.WARNING, // $NON-NLS-1$
                    "Failure while invoking runQuery [" + result.getExceptionString() + // $NON-NLS-1$
                    "]");
                    if (getEventsHandler() != null) {
                        ArrayList<VdcQueryReturnValue> failedResult = new ArrayList<VdcQueryReturnValue>();
                        failedResult.add(result);
                        // getEventsHandler().runQueryFailed(failedResult);
                        String errorMessage = result.getExceptionString();
                        handleNotLoggedInEvent(errorMessage);
                    }
                    if (callback.isHandleFailure()) {
                        callback.getDel().onSuccess(callback.getModel(), result);
                    }
                } else {
                    callback.setOriginalReturnValue(result);
                    if (callback.getConverter() != null) {
                        callback.getDel().onSuccess(callback.getModel(), callback.getConverter().Convert(result.getReturnValue(), callback));
                    } else {
                        callback.getDel().onSuccess(callback.getModel(), result);
                    }
                }
            } finally {
                raiseQueryCompleteEvent(queryType, callback.getContext());
            }
        }

        @Override
        public void onFailure(final VdcOperation<VdcQueryType, VdcQueryParametersBase> operation, final Throwable caught) {
            try {
                if (ignoreFailure(caught)) {
                    return;
                }
                // $NON-NLS-1$
                logger.log(Level.SEVERE, "Failed to execute runQuery: " + caught, caught);
                getEventsHandler().runQueryFailed(null);
                failureEventHandler(caught);
                if (callback.isHandleFailure()) {
                    callback.getDel().onSuccess(callback.getModel(), null);
                }
            } finally {
                raiseQueryCompleteEvent(queryType, callback.getContext());
            }
        }
    });
    // raise the query started event.
    raiseQueryStartedEvent(queryType, callback.getContext());
    if (isPublic) {
        getOperationManager().addPublicOperation(operation);
    } else {
        getOperationManager().addOperation(operation);
    }
}
#end_block

#method_before
public void runMultipleQueries(final List<VdcQueryType> queryTypeList, final List<VdcQueryParametersBase> queryParamsList, final IFrontendMultipleQueryAsyncCallback callback, final String context) {
    VdcOperationCallbackList<VdcOperation<VdcQueryType, VdcQueryParametersBase>, List<VdcQueryReturnValue>> multiCallback = new VdcOperationCallbackList<VdcOperation<VdcQueryType, VdcQueryParametersBase>, List<VdcQueryReturnValue>>() {

        @Override
        public void onSuccess(final List<VdcOperation<VdcQueryType, VdcQueryParametersBase>> operationList, final List<VdcQueryReturnValue> resultObject) {
            // $NON-NLS-1$
            logger.finer("Succesful returned result from runMultipleQueries!");
            FrontendMultipleQueryAsyncResult f = new FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, resultObject);
            callback.executed(f);
            raiseQueryCompleteEvent(queryTypeList, context);
        }

        @Override
        public void onFailure(final List<VdcOperation<VdcQueryType, VdcQueryParametersBase>> operationList, final Throwable caught) {
            try {
                if (ignoreFailure(caught)) {
                    return;
                }
                // $NON-NLS-1$
                logger.log(Level.SEVERE, "Failed to execute runMultipleQueries: " + caught, caught);
                FrontendMultipleQueryAsyncResult f = new FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, null);
                failureEventHandler(caught);
                callback.executed(f);
            } finally {
                raiseQueryCompleteEvent(queryTypeList, context);
            }
        }
    };
    List<VdcOperation<?, ?>> operationList = new ArrayList<VdcOperation<?, ?>>();
    for (int i = 0; i < queryTypeList.size(); i++) {
        VdcQueryParametersBase parameters = queryParamsList.get(i);
        // Why do we do this?
        parameters.setRefresh(false);
        initQueryParamsFilter(parameters);
        operationList.add(new VdcOperation<VdcQueryType, VdcQueryParametersBase>(queryTypeList.get(i), parameters, multiCallback));
    }
    raiseQueryStartedEvent(queryTypeList, context);
    getInstance().getOperationManager().addOperationList(operationList);
}
#method_after
public void runMultipleQueries(final List<VdcQueryType> queryTypeList, final List<VdcQueryParametersBase> queryParamsList, final IFrontendMultipleQueryAsyncCallback callback) {
    runMultipleQueries(queryTypeList, queryParamsList, callback, null);
}
#end_block

#method_before
public void runMultipleQueries(final List<VdcQueryType> queryTypeList, final List<VdcQueryParametersBase> queryParamsList, final IFrontendMultipleQueryAsyncCallback callback, final String context) {
    VdcOperationCallbackList<VdcOperation<VdcQueryType, VdcQueryParametersBase>, List<VdcQueryReturnValue>> multiCallback = new VdcOperationCallbackList<VdcOperation<VdcQueryType, VdcQueryParametersBase>, List<VdcQueryReturnValue>>() {

        @Override
        public void onSuccess(final List<VdcOperation<VdcQueryType, VdcQueryParametersBase>> operationList, final List<VdcQueryReturnValue> resultObject) {
            // $NON-NLS-1$
            logger.finer("Succesful returned result from runMultipleQueries!");
            FrontendMultipleQueryAsyncResult f = new FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, resultObject);
            callback.executed(f);
            raiseQueryCompleteEvent(queryTypeList, context);
        }

        @Override
        public void onFailure(final List<VdcOperation<VdcQueryType, VdcQueryParametersBase>> operationList, final Throwable caught) {
            try {
                if (ignoreFailure(caught)) {
                    return;
                }
                // $NON-NLS-1$
                logger.log(Level.SEVERE, "Failed to execute runMultipleQueries: " + caught, caught);
                FrontendMultipleQueryAsyncResult f = new FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, null);
                failureEventHandler(caught);
                callback.executed(f);
            } finally {
                raiseQueryCompleteEvent(queryTypeList, context);
            }
        }
    };
    List<VdcOperation<?, ?>> operationList = new ArrayList<VdcOperation<?, ?>>();
    for (int i = 0; i < queryTypeList.size(); i++) {
        VdcQueryParametersBase parameters = queryParamsList.get(i);
        // Why do we do this?
        parameters.setRefresh(false);
        initQueryParamsFilter(parameters);
        operationList.add(new VdcOperation<VdcQueryType, VdcQueryParametersBase>(queryTypeList.get(i), parameters, multiCallback));
    }
    raiseQueryStartedEvent(queryTypeList, context);
    getInstance().getOperationManager().addOperationList(operationList);
}
#method_after
public void runMultipleQueries(final List<VdcQueryType> queryTypeList, final List<VdcQueryParametersBase> queryParamsList, final IFrontendMultipleQueryAsyncCallback callback, final String context) {
    VdcOperationCallbackList<VdcOperation<VdcQueryType, VdcQueryParametersBase>, List<VdcQueryReturnValue>> multiCallback = new VdcOperationCallbackList<VdcOperation<VdcQueryType, VdcQueryParametersBase>, List<VdcQueryReturnValue>>() {

        @Override
        public void onSuccess(final List<VdcOperation<VdcQueryType, VdcQueryParametersBase>> operationList, final List<VdcQueryReturnValue> resultObject) {
            // $NON-NLS-1$
            logger.finer("Succesful returned result from runMultipleQueries!");
            FrontendMultipleQueryAsyncResult f = new FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, resultObject);
            callback.executed(f);
            raiseQueryCompleteEvent(queryTypeList, context);
        }

        @Override
        public void onFailure(final List<VdcOperation<VdcQueryType, VdcQueryParametersBase>> operationList, final Throwable caught) {
            try {
                if (ignoreFailure(caught)) {
                    return;
                }
                // $NON-NLS-1$
                logger.log(Level.SEVERE, "Failed to execute runMultipleQueries: " + caught, caught);
                FrontendMultipleQueryAsyncResult f = new FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, null);
                failureEventHandler(caught);
                callback.executed(f);
            } finally {
                raiseQueryCompleteEvent(queryTypeList, context);
            }
        }
    };
    List<VdcOperation<?, ?>> operationList = new ArrayList<VdcOperation<?, ?>>();
    for (int i = 0; i < queryTypeList.size(); i++) {
        VdcQueryParametersBase parameters = queryParamsList.get(i);
        // Why do we do this?
        parameters.setRefresh(false);
        initQueryParamsFilter(parameters);
        operationList.add(new VdcOperation<VdcQueryType, VdcQueryParametersBase>(queryTypeList.get(i), parameters, multiCallback));
    }
    raiseQueryStartedEvent(queryTypeList, context);
    getOperationManager().addOperationList(operationList);
}
#end_block

#method_before
public void runAction(final VdcActionType actionType, final VdcActionParametersBase parameters, final IFrontendActionAsyncCallback callback, final Object state, final boolean showErrorDialog) {
    VdcOperation<VdcActionType, VdcActionParametersBase> operation = new VdcOperation<VdcActionType, VdcActionParametersBase>(actionType, parameters, new VdcOperationCallback<VdcOperation<VdcActionType, VdcActionParametersBase>, VdcReturnValueBase>() {

        @Override
        public void onSuccess(final VdcOperation<VdcActionType, VdcActionParametersBase> operation, final VdcReturnValueBase result) {
            // $NON-NLS-1$
            logger.finer("Frontend: sucessfully executed runAction, determining result!");
            handleActionResult(actionType, parameters, result, callback != null ? callback : NULLABLE_ASYNC_CALLBACK, state, showErrorDialog);
            raiseOperationCompleteEvent(operation);
        }

        @Override
        public void onFailure(final VdcOperation<VdcActionType, VdcActionParametersBase> operation, final Throwable caught) {
            if (ignoreFailure(caught)) {
                return;
            }
            // $NON-NLS-1$
            logger.log(Level.SEVERE, "Failed to execute runAction: " + caught, caught);
            failureEventHandler(caught);
            FrontendActionAsyncResult f = new FrontendActionAsyncResult(actionType, parameters, null, state);
            if (callback != null) {
                callback.executed(f);
            }
        }
    });
    getInstance().getOperationManager().addOperation(operation);
}
#method_after
public void runAction(final VdcActionType actionType, final VdcActionParametersBase parameters, final IFrontendActionAsyncCallback callback) {
    runAction(actionType, parameters, callback, null);
}
#end_block

#method_before
public void runAction(final VdcActionType actionType, final VdcActionParametersBase parameters, final IFrontendActionAsyncCallback callback, final Object state, final boolean showErrorDialog) {
    VdcOperation<VdcActionType, VdcActionParametersBase> operation = new VdcOperation<VdcActionType, VdcActionParametersBase>(actionType, parameters, new VdcOperationCallback<VdcOperation<VdcActionType, VdcActionParametersBase>, VdcReturnValueBase>() {

        @Override
        public void onSuccess(final VdcOperation<VdcActionType, VdcActionParametersBase> operation, final VdcReturnValueBase result) {
            // $NON-NLS-1$
            logger.finer("Frontend: sucessfully executed runAction, determining result!");
            handleActionResult(actionType, parameters, result, callback != null ? callback : NULLABLE_ASYNC_CALLBACK, state, showErrorDialog);
            raiseOperationCompleteEvent(operation);
        }

        @Override
        public void onFailure(final VdcOperation<VdcActionType, VdcActionParametersBase> operation, final Throwable caught) {
            if (ignoreFailure(caught)) {
                return;
            }
            // $NON-NLS-1$
            logger.log(Level.SEVERE, "Failed to execute runAction: " + caught, caught);
            failureEventHandler(caught);
            FrontendActionAsyncResult f = new FrontendActionAsyncResult(actionType, parameters, null, state);
            if (callback != null) {
                callback.executed(f);
            }
        }
    });
    getInstance().getOperationManager().addOperation(operation);
}
#method_after
public void runAction(final VdcActionType actionType, final VdcActionParametersBase parameters, final IFrontendActionAsyncCallback callback, final Object state, final boolean showErrorDialog) {
    VdcOperation<VdcActionType, VdcActionParametersBase> operation = new VdcOperation<VdcActionType, VdcActionParametersBase>(actionType, parameters, new VdcOperationCallback<VdcOperation<VdcActionType, VdcActionParametersBase>, VdcReturnValueBase>() {

        @Override
        public void onSuccess(final VdcOperation<VdcActionType, VdcActionParametersBase> operation, final VdcReturnValueBase result) {
            // $NON-NLS-1$
            logger.finer("Frontend: sucessfully executed runAction, determining result!");
            handleActionResult(actionType, parameters, result, callback != null ? callback : NULLABLE_ASYNC_CALLBACK, state, showErrorDialog);
            RefreshActiveModelEvent.fire(Frontend.this, true);
        }

        @Override
        public void onFailure(final VdcOperation<VdcActionType, VdcActionParametersBase> operation, final Throwable caught) {
            if (ignoreFailure(caught)) {
                return;
            }
            // $NON-NLS-1$
            logger.log(Level.SEVERE, "Failed to execute runAction: " + caught, caught);
            failureEventHandler(caught);
            FrontendActionAsyncResult f = new FrontendActionAsyncResult(actionType, parameters, null, state);
            if (callback != null) {
                callback.executed(f);
            }
        }
    });
    getOperationManager().addOperation(operation);
}
#end_block

#method_before
public void runMultipleAction(final VdcActionType actionType, final List<VdcActionParametersBase> parameters, final boolean isRunOnlyIfAllCanDoPass, final IFrontendMultipleActionAsyncCallback callback, final Object state) {
    VdcOperationCallbackList<VdcOperation<VdcActionType, VdcActionParametersBase>, List<VdcReturnValueBase>> multiCallback = new VdcOperationCallbackList<VdcOperation<VdcActionType, VdcActionParametersBase>, List<VdcReturnValueBase>>() {

        @Override
        public void onSuccess(final List<VdcOperation<VdcActionType, VdcActionParametersBase>> operationList, final List<VdcReturnValueBase> resultObject) {
            // $NON-NLS-1$
            logger.finer("Frontend: successfully executed runMultipleAction, determining result!");
            ArrayList<VdcReturnValueBase> failed = new ArrayList<VdcReturnValueBase>();
            for (VdcReturnValueBase v : resultObject) {
                if (!v.getCanDoAction()) {
                    failed.add(v);
                }
            }
            if (!failed.isEmpty()) {
                translateErrors(failed);
                getEventsHandler().runMultipleActionFailed(actionType, failed);
            }
            if (callback != null) {
                callback.executed(new FrontendMultipleActionAsyncResult(actionType, parameters, resultObject, state));
            }
            raiseOperationCompleteEvent(operationList.get(0));
        }

        @Override
        public void onFailure(final List<VdcOperation<VdcActionType, VdcActionParametersBase>> operation, final Throwable caught) {
            if (ignoreFailure(caught)) {
                return;
            }
            // $NON-NLS-1$
            logger.log(Level.SEVERE, "Failed to execute runMultipleAction: " + caught, caught);
            failureEventHandler(caught);
            if (callback != null) {
                callback.executed(new FrontendMultipleActionAsyncResult(actionType, parameters, null, state));
            }
        }
    };
    List<VdcOperation<?, ?>> operationList = new ArrayList<VdcOperation<?, ?>>();
    for (VdcActionParametersBase parameter : parameters) {
        VdcOperation<VdcActionType, VdcActionParametersBase> operation = new VdcOperation<VdcActionType, VdcActionParametersBase>(actionType, parameter, multiCallback);
        operationList.add(operation);
    }
    if (operationList.isEmpty()) {
        // it ourselves.
        if (scheduler == null) {
            scheduler = Scheduler.get();
        }
        scheduler.scheduleDeferred(new ScheduledCommand() {

            @Override
            public void execute() {
                if (callback != null) {
                    List<VdcReturnValueBase> emptyResult = new ArrayList<VdcReturnValueBase>();
                    callback.executed(new FrontendMultipleActionAsyncResult(actionType, parameters, emptyResult, state));
                }
            }
        });
    } else {
        getOperationManager().addOperationList(operationList);
    }
}
#method_after
public void runMultipleAction(final VdcActionType actionType, final ArrayList<VdcActionParametersBase> parameters, final IFrontendMultipleActionAsyncCallback callback, final Object state) {
    runMultipleAction(actionType, parameters, false, callback, state);
}
#end_block

#method_before
public void runMultipleAction(final VdcActionType actionType, final List<VdcActionParametersBase> parameters, final boolean isRunOnlyIfAllCanDoPass, final IFrontendMultipleActionAsyncCallback callback, final Object state) {
    VdcOperationCallbackList<VdcOperation<VdcActionType, VdcActionParametersBase>, List<VdcReturnValueBase>> multiCallback = new VdcOperationCallbackList<VdcOperation<VdcActionType, VdcActionParametersBase>, List<VdcReturnValueBase>>() {

        @Override
        public void onSuccess(final List<VdcOperation<VdcActionType, VdcActionParametersBase>> operationList, final List<VdcReturnValueBase> resultObject) {
            // $NON-NLS-1$
            logger.finer("Frontend: successfully executed runMultipleAction, determining result!");
            ArrayList<VdcReturnValueBase> failed = new ArrayList<VdcReturnValueBase>();
            for (VdcReturnValueBase v : resultObject) {
                if (!v.getCanDoAction()) {
                    failed.add(v);
                }
            }
            if (!failed.isEmpty()) {
                translateErrors(failed);
                getEventsHandler().runMultipleActionFailed(actionType, failed);
            }
            if (callback != null) {
                callback.executed(new FrontendMultipleActionAsyncResult(actionType, parameters, resultObject, state));
            }
            raiseOperationCompleteEvent(operationList.get(0));
        }

        @Override
        public void onFailure(final List<VdcOperation<VdcActionType, VdcActionParametersBase>> operation, final Throwable caught) {
            if (ignoreFailure(caught)) {
                return;
            }
            // $NON-NLS-1$
            logger.log(Level.SEVERE, "Failed to execute runMultipleAction: " + caught, caught);
            failureEventHandler(caught);
            if (callback != null) {
                callback.executed(new FrontendMultipleActionAsyncResult(actionType, parameters, null, state));
            }
        }
    };
    List<VdcOperation<?, ?>> operationList = new ArrayList<VdcOperation<?, ?>>();
    for (VdcActionParametersBase parameter : parameters) {
        VdcOperation<VdcActionType, VdcActionParametersBase> operation = new VdcOperation<VdcActionType, VdcActionParametersBase>(actionType, parameter, multiCallback);
        operationList.add(operation);
    }
    if (operationList.isEmpty()) {
        // it ourselves.
        if (scheduler == null) {
            scheduler = Scheduler.get();
        }
        scheduler.scheduleDeferred(new ScheduledCommand() {

            @Override
            public void execute() {
                if (callback != null) {
                    List<VdcReturnValueBase> emptyResult = new ArrayList<VdcReturnValueBase>();
                    callback.executed(new FrontendMultipleActionAsyncResult(actionType, parameters, emptyResult, state));
                }
            }
        });
    } else {
        getOperationManager().addOperationList(operationList);
    }
}
#method_after
public void runMultipleAction(final VdcActionType actionType, final List<VdcActionParametersBase> parameters, final boolean isRunOnlyIfAllCanDoPass, final IFrontendMultipleActionAsyncCallback callback, final Object state) {
    VdcOperationCallbackList<VdcOperation<VdcActionType, VdcActionParametersBase>, List<VdcReturnValueBase>> multiCallback = new VdcOperationCallbackList<VdcOperation<VdcActionType, VdcActionParametersBase>, List<VdcReturnValueBase>>() {

        @Override
        public void onSuccess(final List<VdcOperation<VdcActionType, VdcActionParametersBase>> operationList, final List<VdcReturnValueBase> resultObject) {
            // $NON-NLS-1$
            logger.finer("Frontend: successfully executed runMultipleAction, determining result!");
            ArrayList<VdcReturnValueBase> failed = new ArrayList<VdcReturnValueBase>();
            for (VdcReturnValueBase v : resultObject) {
                if (!v.getCanDoAction()) {
                    failed.add(v);
                }
            }
            if (!failed.isEmpty()) {
                translateErrors(failed);
                getEventsHandler().runMultipleActionFailed(actionType, failed);
            }
            if (callback != null) {
                callback.executed(new FrontendMultipleActionAsyncResult(actionType, parameters, resultObject, state));
            }
            RefreshActiveModelEvent.fire(Frontend.this, true);
        }

        @Override
        public void onFailure(final List<VdcOperation<VdcActionType, VdcActionParametersBase>> operation, final Throwable caught) {
            if (ignoreFailure(caught)) {
                return;
            }
            // $NON-NLS-1$
            logger.log(Level.SEVERE, "Failed to execute runMultipleAction: " + caught, caught);
            failureEventHandler(caught);
            if (callback != null) {
                callback.executed(new FrontendMultipleActionAsyncResult(actionType, parameters, null, state));
            }
        }
    };
    List<VdcOperation<?, ?>> operationList = new ArrayList<VdcOperation<?, ?>>();
    for (VdcActionParametersBase parameter : parameters) {
        VdcOperation<VdcActionType, VdcActionParametersBase> operation = new VdcOperation<VdcActionType, VdcActionParametersBase>(actionType, parameter, multiCallback);
        operationList.add(operation);
    }
    if (operationList.isEmpty()) {
        // it ourselves.
        if (scheduler == null) {
            scheduler = Scheduler.get();
        }
        scheduler.scheduleDeferred(new ScheduledCommand() {

            @Override
            public void execute() {
                if (callback != null) {
                    List<VdcReturnValueBase> emptyResult = new ArrayList<VdcReturnValueBase>();
                    callback.executed(new FrontendMultipleActionAsyncResult(actionType, parameters, emptyResult, state));
                }
            }
        });
    } else {
        getOperationManager().addOperationList(operationList);
    }
}
#end_block

#method_before
public void runMultipleActions(final List<VdcActionType> actionTypes, final List<VdcActionParametersBase> parameters, final List<IFrontendActionAsyncCallback> callbacks, final IFrontendActionAsyncCallback failureCallback, final Object state) {
    if (actionTypes.isEmpty() || parameters.isEmpty() || callbacks.isEmpty()) {
        return;
    }
    runAction(actionTypes.get(0), parameters.get(0), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(final FrontendActionAsyncResult result) {
            VdcReturnValueBase returnValue = result.getReturnValue();
            boolean success = returnValue != null && returnValue.getSucceeded();
            if (success || failureCallback == null) {
                IFrontendActionAsyncCallback callback = callbacks.get(0);
                if (callback != null) {
                    callback.executed(result);
                }
                actionTypes.remove(0);
                parameters.remove(0);
                callbacks.remove(0);
                runMultipleActions(actionTypes, parameters, callbacks, failureCallback, state);
            } else {
                failureCallback.executed(result);
            }
        }
    }, state, true);
}
#method_after
public void runMultipleActions(final VdcActionType actionType, final List<VdcActionParametersBase> parameters, final IFrontendActionAsyncCallback successCallback, final Object state) {
    if (parameters == null || parameters.isEmpty()) {
        return;
    }
    int n = parameters.size();
    IFrontendActionAsyncCallback[] callbacks = new IFrontendActionAsyncCallback[n];
    callbacks[n - 1] = successCallback;
    runMultipleActions(actionType, parameters, new LinkedList<IFrontendActionAsyncCallback>(Arrays.asList(callbacks)), state);
}
#end_block

#method_before
public void loginAsync(final String userName, final String password, final String domain, final boolean isAdmin, final AsyncQuery callback) {
    // $NON-NLS-1$
    logger.finer("Frontend: Invoking async Login.");
    LoginUserParameters params = new LoginUserParameters(userName, password, domain, null, null, null);
    VdcActionType action = isAdmin ? VdcActionType.LoginAdminUser : VdcActionType.LoginUser;
    VdcOperation<VdcActionType, LoginUserParameters> loginOperation = new // Public action.
    VdcOperation<VdcActionType, LoginUserParameters>(// Public action.
    action, // Public action.
    params, // Public action.
    true, new VdcOperationCallback<VdcOperation<VdcActionType, LoginUserParameters>, VdcReturnValueBase>() {

        @Override
        public void onSuccess(final VdcOperation<VdcActionType, LoginUserParameters> operation, final VdcReturnValueBase result) {
            // $NON-NLS-1$
            logger.finer("Succesful returned result from Login.");
            getInstance().setLoggedInUser((DbUser) result.getActionReturnValue());
            result.setCanDoActionMessages((ArrayList<String>) translateError(result));
            callback.getDel().onSuccess(callback.getModel(), result);
            if (getInstance().getLoginHandler() != null && result.getSucceeded()) {
                getInstance().getLoginHandler().onLoginSuccess(userName, password, domain);
            }
        }

        @Override
        public void onFailure(final VdcOperation<VdcActionType, LoginUserParameters> operation, final Throwable caught) {
            if (ignoreFailure(caught)) {
                return;
            }
            // $NON-NLS-1$
            logger.log(Level.SEVERE, "Failed to login: " + caught, caught);
            getEventsHandler().runQueryFailed(null);
            failureEventHandler(caught);
            clearLoggedInUser();
            if (callback.isHandleFailure()) {
                getInstance().setLoggedInUser(null);
                callback.getDel().onSuccess(callback.getModel(), null);
            }
        }
    });
    getInstance().getOperationManager().loginUser(loginOperation);
}
#method_after
public void loginAsync(final String userName, final String password, final String domain, final boolean isAdmin, final AsyncQuery callback) {
    // $NON-NLS-1$
    logger.finer("Frontend: Invoking async Login.");
    LoginUserParameters params = new LoginUserParameters(userName, password, domain, null, null, null);
    VdcActionType action = isAdmin ? VdcActionType.LoginAdminUser : VdcActionType.LoginUser;
    VdcOperation<VdcActionType, LoginUserParameters> loginOperation = new // Public action.
    VdcOperation<VdcActionType, LoginUserParameters>(// Public action.
    action, // Public action.
    params, // Public action.
    true, new VdcOperationCallback<VdcOperation<VdcActionType, LoginUserParameters>, VdcReturnValueBase>() {

        @Override
        public void onSuccess(final VdcOperation<VdcActionType, LoginUserParameters> operation, final VdcReturnValueBase result) {
            // $NON-NLS-1$
            logger.finer("Succesful returned result from Login.");
            setLoggedInUser((DbUser) result.getActionReturnValue());
            result.setCanDoActionMessages((ArrayList<String>) translateError(result));
            callback.getDel().onSuccess(callback.getModel(), result);
            if (getLoginHandler() != null && result.getSucceeded()) {
                getLoginHandler().onLoginSuccess(userName, password, domain);
            }
        }

        @Override
        public void onFailure(final VdcOperation<VdcActionType, LoginUserParameters> operation, final Throwable caught) {
            if (ignoreFailure(caught)) {
                return;
            }
            // $NON-NLS-1$
            logger.log(Level.SEVERE, "Failed to login: " + caught, caught);
            getEventsHandler().runQueryFailed(null);
            failureEventHandler(caught);
            clearLoggedInUser();
            if (callback.isHandleFailure()) {
                setLoggedInUser(null);
                callback.getDel().onSuccess(callback.getModel(), null);
            }
        }
    });
    getOperationManager().loginUser(loginOperation);
}
#end_block

#method_before
public void logoffAsync(final DbUser dbUser, final AsyncQuery callback) {
    // $NON-NLS-1$
    logger.finer("Frontend: Invoking async logoff.");
    getInstance().getOperationManager().logoutUser(dbUser, new UserCallback<VdcReturnValueBase>() {

        @Override
        public void onSuccess(final VdcReturnValueBase result) {
            // $NON-NLS-1$
            logger.finer("Succesful returned result from logoff.");
            callback.getDel().onSuccess(callback.getModel(), result);
            if (getInstance().getLoginHandler() != null) {
                getInstance().getLoginHandler().onLogout();
            }
        }

        @Override
        public void onFailure(final Throwable caught) {
            if (ignoreFailure(caught)) {
                return;
            }
            // $NON-NLS-1$
            logger.log(Level.SEVERE, "Failed to execute logoff: " + caught, caught);
            getEventsHandler().runQueryFailed(null);
            failureEventHandler(caught);
            callback.getDel().onSuccess(callback.getModel(), null);
        }
    });
}
#method_after
public void logoffAsync(final DbUser dbUser, final AsyncQuery callback) {
    // $NON-NLS-1$
    logger.finer("Frontend: Invoking async logoff.");
    getOperationManager().logoutUser(dbUser, new UserCallback<VdcReturnValueBase>() {

        @Override
        public void onSuccess(final VdcReturnValueBase result) {
            // $NON-NLS-1$
            logger.finer("Succesful returned result from logoff.");
            callback.getDel().onSuccess(callback.getModel(), result);
            if (getLoginHandler() != null) {
                getLoginHandler().onLogout();
            }
        }

        @Override
        public void onFailure(final Throwable caught) {
            if (ignoreFailure(caught)) {
                return;
            }
            // $NON-NLS-1$
            logger.log(Level.SEVERE, "Failed to execute logoff: " + caught, caught);
            getEventsHandler().runQueryFailed(null);
            failureEventHandler(caught);
            callback.getDel().onSuccess(callback.getModel(), null);
        }
    });
}
#end_block

#method_before
// Use for debugging only.
// private void dumpQueryDetails(VdcQueryType queryType, VdcQueryParametersBase searchParameters) {
// StringBuffer sb = new StringBuffer();
// sb.append("VdcQuery Type: '" + queryType + "', "); //$NON-NLS-1$//$NON-NLS-2$
// if (searchParameters instanceof SearchParameters) {
// SearchParameters sp = (SearchParameters) searchParameters;
// 
// if (sp.getSearchPattern().equals("Not implemented")) { //$NON-NLS-1$
// throw new RuntimeException("Search pattern is defined as 'Not implemented',
// probably because of a use of String.format()"); //$NON-NLS-1$
// }
// 
// sb.append("Type value: [" + sp.getSearchTypeValue() + "], Pattern: [" + //$NON-NLS-1$//$NON-NLS-2$
// sp.getSearchPattern() + "]"); //$NON-NLS-1$
// } else {
// sb.append("Search type is base or unknown"); //$NON-NLS-1$
// }
// 
// logger.fine(sb.toString());
// }
// Use for debugging only.
// private void dumpActionDetails(VdcActionType actionType, VdcActionParametersBase parameters) {
// StringBuffer sb = new StringBuffer();
// sb.append("actionType Type: '" + actionType + "', "); //$NON-NLS-1$//$NON-NLS-2$
// sb.append("Params: " + parameters); //$NON-NLS-1$
// 
// logger.fine(sb.toString());
// }
// 
void handleActionResult(final VdcActionType actionType, final VdcActionParametersBase parameters, final VdcReturnValueBase result, final IFrontendActionAsyncCallback callback, final Object state, final boolean showErrorDialog) {
    // $NON-NLS-1$
    logger.log(Level.FINER, "Retrieved action result from RunAction.");
    FrontendActionAsyncResult f = new FrontendActionAsyncResult(actionType, parameters, result, state);
    boolean success = false;
    if (!result.getCanDoAction()) {
        result.setCanDoActionMessages((ArrayList<String>) translateError(result));
        callback.executed(f);
    } else if (showErrorDialog && result.getIsSyncronious() && !result.getSucceeded()) {
        runActionExecutionFailed(actionType, result.getFault());
        callback.executed(f);
        // Prevent another (untranslated) error message pop-up display
        // ('runActionExecutionFailed' invokes an error pop-up displaying,
        // therefore calling 'failureEventHandler' is redundant)
        success = true;
    } else {
        success = true;
        callback.executed(f);
    }
    if ((!success) && (getEventsHandler() != null) && (getEventsHandler().isRaiseErrorModalPanel(actionType, result.getFault()))) {
        if (result.getCanDoActionMessages().size() <= 1) {
            String errorMessage = !result.getCanDoAction() || !result.getCanDoActionMessages().isEmpty() ? getRunActionErrorMessage(result.getCanDoActionMessages()) : result.getFault().getMessage();
            failureEventHandler(result.getDescription(), errorMessage);
        } else {
            failureEventHandler(result.getDescription(), result.getCanDoActionMessages());
        }
    }
}
#method_after
void handleActionResult(final VdcActionType actionType, final VdcActionParametersBase parameters, final VdcReturnValueBase result, final IFrontendActionAsyncCallback callback, final Object state, final boolean showErrorDialog) {
    // $NON-NLS-1$
    logger.log(Level.FINER, "Retrieved action result from RunAction.");
    FrontendActionAsyncResult f = new FrontendActionAsyncResult(actionType, parameters, result, state);
    boolean success = false;
    if (!result.getCanDoAction()) {
        result.setCanDoActionMessages((ArrayList<String>) translateError(result));
        callback.executed(f);
    } else if (showErrorDialog && result.getIsSyncronious() && !result.getSucceeded()) {
        runActionExecutionFailed(actionType, result.getFault());
        callback.executed(f);
        // Prevent another (untranslated) error message pop-up display
        // ('runActionExecutionFailed' invokes an error pop-up displaying,
        // therefore calling 'failureEventHandler' is redundant)
        success = true;
    } else {
        success = true;
        callback.executed(f);
    }
    if ((!success) && (getEventsHandler() != null) && (getEventsHandler().isRaiseErrorModalPanel(actionType, result.getFault()))) {
        if (result.getCanDoActionMessages().size() <= 1) {
            String errorMessage = !result.getCanDoAction() || !result.getCanDoActionMessages().isEmpty() ? getRunActionErrorMessage(result.getCanDoActionMessages()) : result.getFault().getMessage();
            failureEventHandler(result.getDescription(), errorMessage);
        } else {
            failureEventHandler(result.getDescription(), result.getCanDoActionMessages());
        }
    }
}
#end_block

#method_before
@Deprecated
public static String getCurrentContext() {
    return getInstance().currentContext;
}
#method_after
public String getCurrentContext() {
    return currentContext;
}
#end_block

#method_before
public String translateVdcFault(final VdcFault fault) {
    return getVdsmErrorsTranslator().TranslateErrorTextSingle(fault.getError() == null ? fault.getMessage() : fault.getError().toString());
}
#method_after
public String translateVdcFault(final VdcFault fault) {
    return getVdsmErrorsTranslator().translateErrorTextSingle(fault.getError() == null ? fault.getMessage() : fault.getError().toString());
}
#end_block

#method_before
public void setConstants(final UIConstants uiConstants) {
    constants = uiConstants;
}
#method_after
void setConstants(final UIConstants uiConstants) {
    constants = uiConstants;
}
#end_block

#method_before
@Test
public void testHandleActionResult_isRaiseErrorModalPanel_withActionMessageSize1() {
    VdcFault testFault = new VdcFault();
    when(mockEventsHandler.isRaiseErrorModalPanel(VdcActionType.AddDisk, testFault)).thenReturn(true);
    Object testState = new Object();
    VdcActionParametersBase testParameters = new VdcActionParametersBase();
    VdcReturnValueBase returnValue = new VdcReturnValueBase();
    returnValue.setFault(testFault);
    // $NON-NLS-1$
    returnValue.setDescription("This is a description");
    // $NON-NLS-1$
    returnValue.getCanDoActionMessages().add("Message 1");
    // Yes this is the default, but to make sure.
    returnValue.setCanDoAction(false);
    frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false);
    verify(mockActionCallback).executed(callbackParam.capture());
    // $NON-NLS-1$
    assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters());
    // $NON-NLS-1$
    assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue());
    // $NON-NLS-1$
    assertEquals("States should match", testState, callbackParam.getValue().getState());
    assertEquals(// $NON-NLS-1$
    "Action type should match", // $NON-NLS-1$
    VdcActionType.AddDisk, callbackParam.getValue().getActionType());
    ArgumentCaptor<FrontendFailureEventArgs> failureCaptor = ArgumentCaptor.forClass(FrontendFailureEventArgs.class);
    verify(mockFrontendFailureEvent).raise(eq(Frontend.class), failureCaptor.capture());
    assertEquals(// $NON-NLS-1$ //$NON-NLS-2$
    "Descriptions should match", // $NON-NLS-1$ //$NON-NLS-2$
    "This is a description", failureCaptor.getValue().getMessage().getDescription());
    assertEquals(// $NON-NLS-1$ //$NON-NLS-2$
    "Text should match translation", // $NON-NLS-1$ //$NON-NLS-2$
    "message 1", failureCaptor.getValue().getMessage().getText());
}
#method_after
@Test
public void testHandleActionResult_isRaiseErrorModalPanel_withActionMessageSize1() {
    VdcFault testFault = new VdcFault();
    // $NON-NLS-1$
    ArrayList<String> translatedErrors = new ArrayList<String>(Arrays.asList("Translated Message 1"));
    when(mockEventsHandler.isRaiseErrorModalPanel(VdcActionType.AddDisk, testFault)).thenReturn(true);
    when(mockCanDoActionErrorsTranslator.translateErrorText(any(ArrayList.class))).thenReturn(translatedErrors);
    Object testState = new Object();
    VdcActionParametersBase testParameters = new VdcActionParametersBase();
    VdcReturnValueBase returnValue = new VdcReturnValueBase();
    returnValue.setFault(testFault);
    // $NON-NLS-1$
    returnValue.setDescription("This is a description");
    // $NON-NLS-1$
    returnValue.getCanDoActionMessages().add("Message 1");
    // Yes this is the default, but to make sure.
    returnValue.setCanDoAction(false);
    frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false);
    verify(mockActionCallback).executed(callbackParam.capture());
    // $NON-NLS-1$
    assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters());
    // $NON-NLS-1$
    assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue());
    // $NON-NLS-1$
    assertEquals("States should match", testState, callbackParam.getValue().getState());
    assertEquals(// $NON-NLS-1$
    "Action type should match", // $NON-NLS-1$
    VdcActionType.AddDisk, callbackParam.getValue().getActionType());
    ArgumentCaptor<FrontendFailureEventArgs> failureCaptor = ArgumentCaptor.forClass(FrontendFailureEventArgs.class);
    verify(mockFrontendFailureEvent).raise(eq(Frontend.class), failureCaptor.capture());
    assertEquals(// $NON-NLS-1$ //$NON-NLS-2$
    "Descriptions should match", // $NON-NLS-1$ //$NON-NLS-2$
    "This is a description", failureCaptor.getValue().getMessage().getDescription());
    assertEquals(// $NON-NLS-1$ //$NON-NLS-2$
    "Text should match translation", // $NON-NLS-1$ //$NON-NLS-2$
    "Translated Message 1", failureCaptor.getValue().getMessage().getText());
}
#end_block

#method_before
@Test
public void testHandleActionResult_isRaiseErrorModalPanel_withActionMessageSizeGreaterThan1() {
    VdcFault testFault = new VdcFault();
    when(mockEventsHandler.isRaiseErrorModalPanel(VdcActionType.AddDisk, testFault)).thenReturn(true);
    Object testState = new Object();
    VdcActionParametersBase testParameters = new VdcActionParametersBase();
    VdcReturnValueBase returnValue = new VdcReturnValueBase();
    returnValue.setFault(testFault);
    // $NON-NLS-1$
    returnValue.setDescription("This is a description");
    // $NON-NLS-1$
    returnValue.getCanDoActionMessages().add("Message 1");
    // $NON-NLS-1$
    returnValue.getCanDoActionMessages().add("Message 2");
    // Yes this is the default, but to make sure.
    returnValue.setCanDoAction(false);
    frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false);
    verify(mockActionCallback).executed(callbackParam.capture());
    // $NON-NLS-1$
    assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters());
    // $NON-NLS-1$
    assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue());
    // $NON-NLS-1$
    assertEquals("States should match", testState, callbackParam.getValue().getState());
    assertEquals(// $NON-NLS-1$
    "Action type should match", // $NON-NLS-1$
    VdcActionType.AddDisk, callbackParam.getValue().getActionType());
    ArgumentCaptor<FrontendFailureEventArgs> failureCaptor = ArgumentCaptor.forClass(FrontendFailureEventArgs.class);
    verify(mockFrontendFailureEvent).raise(eq(Frontend.class), failureCaptor.capture());
    // $NON-NLS-1$
    assertNull("Message should be null", failureCaptor.getValue().getMessage());
    assertEquals(// $NON-NLS-1$ //$NON-NLS-2$
    "text should match", // $NON-NLS-1$ //$NON-NLS-2$
    "message 1", failureCaptor.getValue().getMessages().get(0).getText());
    assertEquals(// $NON-NLS-1$ //$NON-NLS-2$
    "text should match", // $NON-NLS-1$ //$NON-NLS-2$
    "message 2", failureCaptor.getValue().getMessages().get(1).getText());
}
#method_after
@Test
public void testHandleActionResult_isRaiseErrorModalPanel_withActionMessageSizeGreaterThan1() {
    VdcFault testFault = new VdcFault();
    ArrayList<String> translatedErrors = new ArrayList<String>(Arrays.asList("Translated Message 1", // $NON-NLS-1$ //$NON-NLS-2$
    "Translated Message 2"));
    when(mockEventsHandler.isRaiseErrorModalPanel(VdcActionType.AddDisk, testFault)).thenReturn(true);
    when(mockCanDoActionErrorsTranslator.translateErrorText(any(ArrayList.class))).thenReturn(translatedErrors);
    Object testState = new Object();
    VdcActionParametersBase testParameters = new VdcActionParametersBase();
    VdcReturnValueBase returnValue = new VdcReturnValueBase();
    returnValue.setFault(testFault);
    // $NON-NLS-1$
    returnValue.setDescription("This is a description");
    // $NON-NLS-1$
    returnValue.getCanDoActionMessages().add("Message 1");
    // $NON-NLS-1$
    returnValue.getCanDoActionMessages().add("Message 2");
    // Yes this is the default, but to make sure.
    returnValue.setCanDoAction(false);
    frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false);
    verify(mockActionCallback).executed(callbackParam.capture());
    // $NON-NLS-1$
    assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters());
    // $NON-NLS-1$
    assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue());
    // $NON-NLS-1$
    assertEquals("States should match", testState, callbackParam.getValue().getState());
    assertEquals(// $NON-NLS-1$
    "Action type should match", // $NON-NLS-1$
    VdcActionType.AddDisk, callbackParam.getValue().getActionType());
    ArgumentCaptor<FrontendFailureEventArgs> failureCaptor = ArgumentCaptor.forClass(FrontendFailureEventArgs.class);
    verify(mockFrontendFailureEvent).raise(eq(Frontend.class), failureCaptor.capture());
    // $NON-NLS-1$
    assertNull("Message should be null", failureCaptor.getValue().getMessage());
    assertEquals(// $NON-NLS-1$ //$NON-NLS-2$
    "Text should match", // $NON-NLS-1$ //$NON-NLS-2$
    "Translated Message 1", failureCaptor.getValue().getMessages().get(0).getText());
    assertEquals(// $NON-NLS-1$ //$NON-NLS-2$
    "Text should match", // $NON-NLS-1$ //$NON-NLS-2$
    "Translated Message 2", failureCaptor.getValue().getMessages().get(1).getText());
}
#end_block

#method_before
@Test
public void testLoginAsync_404_failure() {
    // $NON-NLS-1$
    String testUser = "testUser";
    // $NON-NLS-1$
    String testPassword = "testpassword";
    // $NON-NLS-1$
    String testDomain = "testdomain";
    Frontend.getInstance().initLoggedInUser(new DbUser(), testPassword);
    when(mockAsyncQuery.isHandleFailure()).thenReturn(Boolean.TRUE);
    frontend.loginAsync(testUser, testPassword, testDomain, false, mockAsyncQuery);
    verify(mockService).Login(eq(testUser), eq(testPassword), eq(testDomain), eq(VdcActionType.LoginUser), callbackAction.capture());
    StatusCodeException exception = new StatusCodeException(HttpServletResponse.SC_NOT_FOUND, // $NON-NLS-1$
    "404 status code");
    callbackAction.getValue().onFailure(exception);
    verify(mockEventsHandler).runQueryFailed(null);
    verify(mockFrontendFailureEvent).raise(eq(Frontend.class), (EventArgs) any());
    // $NON-NLS-1$
    assertNull("Logged in user should be null", frontend.getLoggedInUser());
    verify(mockAsyncCallback).onSuccess(any(), any());
}
#method_after
@Test
public void testLoginAsync_404_failure() {
    // $NON-NLS-1$
    String testUser = "testUser";
    // $NON-NLS-1$
    String testPassword = "testpassword";
    // $NON-NLS-1$
    String testDomain = "testdomain";
    frontend.initLoggedInUser(new DbUser(), testPassword);
    when(mockAsyncQuery.isHandleFailure()).thenReturn(Boolean.TRUE);
    frontend.loginAsync(testUser, testPassword, testDomain, false, mockAsyncQuery);
    verify(mockService).Login(eq(testUser), eq(testPassword), eq(testDomain), eq(VdcActionType.LoginUser), callbackAction.capture());
    StatusCodeException exception = new StatusCodeException(HttpServletResponse.SC_NOT_FOUND, // $NON-NLS-1$
    "404 status code");
    callbackAction.getValue().onFailure(exception);
    verify(mockEventsHandler).runQueryFailed(null);
    verify(mockFrontendFailureEvent).raise(eq(Frontend.class), (EventArgs) any());
    // $NON-NLS-1$
    assertNull("Logged in user should be null", frontend.getLoggedInUser());
    verify(mockAsyncCallback).onSuccess(any(), any());
}
#end_block

#method_before
@Test
public void testLoginAsync_success() {
    Object model = new Object();
    when(mockAsyncQuery.getModel()).thenReturn(model);
    // $NON-NLS-1$
    String testUser = "testUser";
    // $NON-NLS-1$
    String testPassword = "testpassword";
    // $NON-NLS-1$
    String testDomain = "testdomain";
    Frontend.getInstance().initLoggedInUser(new DbUser(), testPassword);
    when(mockAsyncQuery.isHandleFailure()).thenReturn(Boolean.TRUE);
    frontend.loginAsync(testUser, testPassword, testDomain, false, mockAsyncQuery);
    verify(mockService).Login(eq(testUser), eq(testPassword), eq(testDomain), eq(VdcActionType.LoginUser), callbackAction.capture());
    VdcReturnValueBase returnValue = new VdcReturnValueBase();
    returnValue.setSucceeded(true);
    callbackAction.getValue().onSuccess(returnValue);
    verify(mockAsyncCallback).onSuccess(model, returnValue);
    verify(mockLoginHandler).onLoginSuccess(testUser, testPassword, testDomain);
    verify(mockFrontendFailureEvent, never()).raise(eq(Frontend.class), (EventArgs) any());
}
#method_after
@Test
public void testLoginAsync_success() {
    Object model = new Object();
    when(mockAsyncQuery.getModel()).thenReturn(model);
    // $NON-NLS-1$
    String testUser = "testUser";
    // $NON-NLS-1$
    String testPassword = "testpassword";
    // $NON-NLS-1$
    String testDomain = "testdomain";
    frontend.initLoggedInUser(new DbUser(), testPassword);
    when(mockAsyncQuery.isHandleFailure()).thenReturn(Boolean.TRUE);
    frontend.loginAsync(testUser, testPassword, testDomain, false, mockAsyncQuery);
    verify(mockService).Login(eq(testUser), eq(testPassword), eq(testDomain), eq(VdcActionType.LoginUser), callbackAction.capture());
    VdcReturnValueBase returnValue = new VdcReturnValueBase();
    returnValue.setSucceeded(true);
    callbackAction.getValue().onSuccess(returnValue);
    verify(mockAsyncCallback).onSuccess(model, returnValue);
    verify(mockLoginHandler).onLoginSuccess(testUser, testPassword, testDomain);
    verify(mockFrontendFailureEvent, never()).raise(eq(Frontend.class), (EventArgs) any());
}
#end_block

#method_before
@Test
public void testLoginAsync_login_failure() {
    Object model = new Object();
    when(mockAsyncQuery.getModel()).thenReturn(model);
    // $NON-NLS-1$
    String testUser = "testUser";
    // $NON-NLS-1$
    String testPassword = "testpassword";
    // $NON-NLS-1$
    String testDomain = "testdomain";
    Frontend.getInstance().initLoggedInUser(new DbUser(), testPassword);
    when(mockAsyncQuery.isHandleFailure()).thenReturn(Boolean.TRUE);
    frontend.loginAsync(testUser, testPassword, testDomain, false, mockAsyncQuery);
    verify(mockService).Login(eq(testUser), eq(testPassword), eq(testDomain), eq(VdcActionType.LoginUser), callbackAction.capture());
    VdcReturnValueBase returnValue = new VdcReturnValueBase();
    // Yes I know this is the default, just to be sure.
    returnValue.setSucceeded(false);
    callbackAction.getValue().onSuccess(returnValue);
    verify(mockAsyncCallback).onSuccess(model, returnValue);
    verify(mockLoginHandler, never()).onLoginSuccess(testUser, testPassword, testDomain);
    verify(mockFrontendFailureEvent, never()).raise(eq(Frontend.class), (EventArgs) any());
}
#method_after
@Test
public void testLoginAsync_login_failure() {
    Object model = new Object();
    when(mockAsyncQuery.getModel()).thenReturn(model);
    // $NON-NLS-1$
    String testUser = "testUser";
    // $NON-NLS-1$
    String testPassword = "testpassword";
    // $NON-NLS-1$
    String testDomain = "testdomain";
    frontend.initLoggedInUser(new DbUser(), testPassword);
    when(mockAsyncQuery.isHandleFailure()).thenReturn(Boolean.TRUE);
    frontend.loginAsync(testUser, testPassword, testDomain, false, mockAsyncQuery);
    verify(mockService).Login(eq(testUser), eq(testPassword), eq(testDomain), eq(VdcActionType.LoginUser), callbackAction.capture());
    VdcReturnValueBase returnValue = new VdcReturnValueBase();
    // Yes I know this is the default, just to be sure.
    returnValue.setSucceeded(false);
    callbackAction.getValue().onSuccess(returnValue);
    verify(mockAsyncCallback).onSuccess(model, returnValue);
    verify(mockLoginHandler, never()).onLoginSuccess(testUser, testPassword, testDomain);
    verify(mockFrontendFailureEvent, never()).raise(eq(Frontend.class), (EventArgs) any());
}
#end_block

#method_before
public static void init(final EventBus eventBus, final CurrentUser user, final LoginModel loginModel, final FrontendFailureEventListener frontendFailureEventListener) {
    if (commonModel != null) {
        // Unregister handlers
        commonModel.unregisterHandlers();
        // Unset the event bus on the old model, so they can be freed.
        commonModel.setEventBus(null);
    }
    commonModel = CommonModel.newInstance();
    // Set the event bus so we can register listeners.
    commonModel.setEventBus(eventBus);
    commonModel.getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            MainModelSelectionChangeEvent.fire(eventBus, commonModel.getSelectedItem());
        }
    });
    commonModel.getSignedOutEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            loginModel.resetAfterLogout();
            user.onUserLogout();
            // Clear CommonModel reference after the user signs out,
            // use deferred command to ensure the reference is cleared
            // only after all UiCommon-related processing is over
            Scheduler.get().scheduleDeferred(new ScheduledCommand() {

                @Override
                public void execute() {
                    commonModel = null;
                }
            });
        }
    });
}
#method_after
public static void init(final EventBus eventBus) {
    commonModel = CommonModel.newInstance();
    commonModel.getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            MainModelSelectionChangeEvent.fire(eventBus, commonModel.getSelectedItem());
        }
    });
    commonModel.getSignedOutEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            // Clear CommonModel reference after the user signs out,
            // use deferred command to ensure the reference is cleared
            // only after all UiCommon-related processing is over
            Scheduler.get().scheduleDeferred(new ScheduledCommand() {

                @Override
                public void execute() {
                    commonModel = null;
                }
            });
        }
    });
}
#end_block

#method_before
@Override
public void initialize() {
    super.initialize();
    if (getVm() != null) {
        updateSuggestedDiskAlias();
        getPlugDiskToVm().setIsAvailable(true);
    } else {
        // Read only disk can be created only in the scope of VM.
        getIsReadOnly().setIsAvailable(false);
    }
    getSizeExtend().setIsAvailable(false);
}
#method_after
@Override
public void initialize() {
    super.initialize();
    if (getVm() != null) {
        updateSuggestedDiskAlias();
        getIsPlugged().setIsAvailable(true);
    } else {
        // Read only disk can be created only in the scope of VM.
        getIsReadOnly().setIsAvailable(false);
        getIsPlugged().setEntity(false);
    }
    getSizeExtend().setIsAvailable(false);
}
#end_block

#method_before
private void onAttachDisks() {
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    ArrayList<IFrontendActionAsyncCallback> callbacks = new ArrayList<IFrontendActionAsyncCallback>();
    IFrontendActionAsyncCallback onFinishCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            NewDiskModel diskModel = (NewDiskModel) result.getState();
            diskModel.stopProgress();
            diskModel.cancel();
            postSave();
        }
    };
    ArrayList<EntityModel> disksToAttach = (Boolean) getIsInternal().getEntity() ? (ArrayList<EntityModel>) getInternalAttachableDisks().getSelectedItems() : (ArrayList<EntityModel>) getExternalAttachableDisks().getSelectedItems();
    for (int i = 0; i < disksToAttach.size(); i++) {
        DiskModel disk = (DiskModel) disksToAttach.get(i).getEntity();
        // Disk is attached to VM as read only or not, null is applicable only for floating disks
        // but this is not a case here.
        AttachDettachVmDiskParameters parameters = new AttachDettachVmDiskParameters(getVm().getId(), disk.getDisk().getId(), (Boolean) getIsPlugged().getEntity(), Boolean.TRUE.equals(disk.getDisk().getReadOnly()));
        actionTypes.add(VdcActionType.AttachDiskToVm);
        paramerterList.add(parameters);
        callbacks.add(i == disksToAttach.size() - 1 ? onFinishCallback : null);
    }
    startProgress(null);
    Frontend.RunMultipleActions(actionTypes, paramerterList, callbacks, null, this);
}
#method_after
private void onAttachDisks() {
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    ArrayList<IFrontendActionAsyncCallback> callbacks = new ArrayList<IFrontendActionAsyncCallback>();
    IFrontendActionAsyncCallback onFinishCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            NewDiskModel diskModel = (NewDiskModel) result.getState();
            diskModel.stopProgress();
            diskModel.cancel();
            postSave();
        }
    };
    ArrayList<EntityModel> disksToAttach = (Boolean) getIsInternal().getEntity() ? (ArrayList<EntityModel>) getInternalAttachableDisks().getSelectedItems() : (ArrayList<EntityModel>) getExternalAttachableDisks().getSelectedItems();
    for (int i = 0; i < disksToAttach.size(); i++) {
        DiskModel disk = (DiskModel) disksToAttach.get(i).getEntity();
        // Disk is attached to VM as read only or not, null is applicable only for floating disks
        // but this is not a case here.
        AttachDettachVmDiskParameters parameters = new AttachDettachVmDiskParameters(getVm().getId(), disk.getDisk().getId(), (Boolean) getIsPlugged().getEntity(), Boolean.TRUE.equals(disk.getDisk().getReadOnly()));
        actionTypes.add(VdcActionType.AttachDiskToVm);
        paramerterList.add(parameters);
        callbacks.add(i == disksToAttach.size() - 1 ? onFinishCallback : null);
    }
    startProgress(null);
    Frontend.getInstance().runMultipleActions(actionTypes, paramerterList, callbacks, null, this);
}
#end_block

#method_before
@Override
public void onSave() {
    if (getProgress() != null || !validate()) {
        return;
    }
    if ((Boolean) getIsAttachDisk().getEntity()) {
        onAttachDisks();
        return;
    }
    super.onSave();
    boolean isInternal = (Boolean) getIsInternal().getEntity();
    if (isInternal) {
        DiskImage diskImage = (DiskImage) getDisk();
        diskImage.setSizeInGigabytes(Integer.parseInt(getSize().getEntity().toString()));
        diskImage.setVolumeType((VolumeType) getVolumeType().getSelectedItem());
        diskImage.setvolumeFormat(getVolumeFormat());
    } else {
        LunDisk lunDisk = (LunDisk) getDisk();
        LUNs luns = (LUNs) getSanStorageModel().getAddedLuns().get(0).getEntity();
        luns.setLunType((StorageType) getStorageType().getSelectedItem());
        lunDisk.setLun(luns);
    }
    startProgress(null);
    AddDiskParameters parameters = new AddDiskParameters(getVmId(), getDisk());
    parameters.setPlugDiskToVm((Boolean) getPlugDiskToVm().getEntity());
    if ((Boolean) getIsInternal().getEntity()) {
        StorageDomain storageDomain = (StorageDomain) getStorageDomain().getSelectedItem();
        parameters.setStorageDomainId(storageDomain.getId());
    }
    Frontend.RunAction(VdcActionType.AddDisk, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            NewDiskModel diskModel = (NewDiskModel) result.getState();
            diskModel.stopProgress();
            diskModel.cancel();
            postSave();
        }
    }, this);
}
#method_after
@Override
public void onSave() {
    if (getProgress() != null || !validate()) {
        return;
    }
    if ((Boolean) getIsAttachDisk().getEntity()) {
        onAttachDisks();
        return;
    }
    super.onSave();
    boolean isInternal = (Boolean) getIsInternal().getEntity();
    if (isInternal) {
        DiskImage diskImage = (DiskImage) getDisk();
        diskImage.setSizeInGigabytes(Integer.parseInt(getSize().getEntity().toString()));
        diskImage.setVolumeType((VolumeType) getVolumeType().getSelectedItem());
        diskImage.setvolumeFormat(getVolumeFormat());
    } else {
        LunDisk lunDisk = (LunDisk) getDisk();
        LUNs luns = (LUNs) getSanStorageModel().getAddedLuns().get(0).getEntity();
        luns.setLunType((StorageType) getStorageType().getSelectedItem());
        lunDisk.setLun(luns);
    }
    startProgress(null);
    AddDiskParameters parameters = new AddDiskParameters(getVmId(), getDisk());
    parameters.setPlugDiskToVm((Boolean) getIsPlugged().getEntity());
    if ((Boolean) getIsInternal().getEntity()) {
        StorageDomain storageDomain = (StorageDomain) getStorageDomain().getSelectedItem();
        parameters.setStorageDomainId(storageDomain.getId());
    }
    Frontend.getInstance().runAction(VdcActionType.AddDisk, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            NewDiskModel diskModel = (NewDiskModel) result.getState();
            diskModel.stopProgress();
            diskModel.cancel();
            postSave();
        }
    }, this);
}
#end_block

#method_before
public boolean getPlugDiskToVm() {
    return plugDiskToVm;
}
#method_after
public Boolean getPlugDiskToVm() {
    return plugDiskToVm;
}
#end_block

#method_before
public void setPlugDiskToVm(boolean plugDiskToVm) {
    this.plugDiskToVm = plugDiskToVm;
}
#method_after
public void setPlugDiskToVm(Boolean plugDiskToVm) {
    this.plugDiskToVm = plugDiskToVm;
}
#end_block

#method_before
private void localize(CommonApplicationConstants constants) {
    aliasEditor.setLabel(constants.aliasVmDiskPopup());
    sizeEditor.setLabel(constants.sizeVmDiskPopup());
    sizeExtendEditor.setLabel(constants.extendImageSizeBy());
    descriptionEditor.setLabel(constants.descriptionVmDiskPopup());
    datacenterEditor.setLabel(constants.dcVmDiskPopup());
    storageDomainEditor.setLabel(constants.storageDomainVmDiskPopup());
    hostListEditor.setLabel(constants.hostVmDiskPopup());
    quotaEditor.setLabel(constants.quotaVmDiskPopup());
    interfaceEditor.setLabel(constants.interfaceVmDiskPopup());
    volumeTypeEditor.setLabel(constants.allocationDisk());
    storageTypeEditor.setLabel(constants.storageTypeVmDiskPopup());
    plugDiskToVmEditor.setLabel(constants.plugDiskVmDiskPopup());
    wipeAfterDeleteEditor.setLabel(constants.wipeAfterDeleteVmDiskPopup());
    isBootableEditor.setLabel(constants.isBootableVmDiskPopup());
    isShareableEditor.setLabel(constants.isShareableVmDiskPopup());
    isReadOnlyEditor.setLabel(constants.isReadOnlyVmDiskPopup());
    isSgIoUnfilteredEditor.setLabel(constants.isSgIoUnfilteredEditor());
    attachEditor.setLabel(constants.attachDiskVmDiskPopup());
    isPluggedEditor.setLabel(constants.activateVmDiskPopup());
}
#method_after
private void localize(CommonApplicationConstants constants) {
    aliasEditor.setLabel(constants.aliasVmDiskPopup());
    sizeEditor.setLabel(constants.sizeVmDiskPopup());
    sizeExtendEditor.setLabel(constants.extendImageSizeBy());
    descriptionEditor.setLabel(constants.descriptionVmDiskPopup());
    datacenterEditor.setLabel(constants.dcVmDiskPopup());
    storageDomainEditor.setLabel(constants.storageDomainVmDiskPopup());
    hostListEditor.setLabel(constants.hostVmDiskPopup());
    quotaEditor.setLabel(constants.quotaVmDiskPopup());
    interfaceEditor.setLabel(constants.interfaceVmDiskPopup());
    volumeTypeEditor.setLabel(constants.allocationDisk());
    storageTypeEditor.setLabel(constants.storageTypeVmDiskPopup());
    plugDiskToVmEditor.setLabel(constants.activateVmDiskPopup());
    wipeAfterDeleteEditor.setLabel(constants.wipeAfterDeleteVmDiskPopup());
    isBootableEditor.setLabel(constants.isBootableVmDiskPopup());
    isShareableEditor.setLabel(constants.isShareableVmDiskPopup());
    isReadOnlyEditor.setLabel(constants.isReadOnlyVmDiskPopup());
    isSgIoUnfilteredEditor.setLabel(constants.isSgIoUnfilteredEditor());
    attachEditor.setLabel(constants.attachDiskVmDiskPopup());
    isPluggedEditor.setLabel(constants.activateVmDiskPopup());
}
#end_block

#method_before
@SuppressWarnings({ "unchecked", "rawtypes" })
private void initManualWidgets() {
    storageDomainEditor = new ListModelListBoxEditor<Object>(new StorageDomainFreeSpaceRenderer());
    hostListEditor = new ListModelListBoxEditor<Object>(new AbstractRenderer<Object>() {

        @Override
        public String render(Object object) {
            // $NON-NLS-1$
            return object == null ? "" : ((VDS) object).getName();
        }
    });
    quotaEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Quota) object).getQuotaName();
        }
    });
    interfaceEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    datacenterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((StoragePool) object).getName();
        }
    });
    volumeTypeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    storageTypeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    plugDiskToVmEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    wipeAfterDeleteEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    isBootableEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    isShareableEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    isReadOnlyEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    isSgIoUnfilteredEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    isPluggedEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    attachEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    internalDiskTable = new EntityModelCellTable<ListModel>(true);
    externalDiskTable = new EntityModelCellTable<ListModel>(true);
}
#method_after
@SuppressWarnings({ "unchecked", "rawtypes" })
private void initManualWidgets(CommonApplicationConstants constants, CommonApplicationResources resources, CommonApplicationTemplates templates) {
    storageDomainEditor = new ListModelListBoxEditor<Object>(new StorageDomainFreeSpaceRenderer());
    hostListEditor = new ListModelListBoxEditor<Object>(new AbstractRenderer<Object>() {

        @Override
        public String render(Object object) {
            // $NON-NLS-1$
            return object == null ? "" : ((VDS) object).getName();
        }
    });
    quotaEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Quota) object).getQuotaName();
        }
    });
    interfaceEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    datacenterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((StoragePool) object).getName();
        }
    });
    volumeTypeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    storageTypeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    plugDiskToVmEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    wipeAfterDeleteEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    isBootableEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    isShareableEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    isReadOnlyEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    isSgIoUnfilteredEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    isPluggedEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    attachEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    internalDiskTable = new EntityModelCellTable<ListModel>(true);
    externalDiskTable = new EntityModelCellTable<ListModel>(true);
    interfaceInfoIcon = new InfoIcon(templates.italicText(constants.diskInterfaceInfo()), resources);
}
#end_block

#method_before
private void initInternalDiskTable(final CommonApplicationConstants constants, final CommonApplicationResources resources, final CommonApplicationTemplates templates) {
    internalDiskTable.enableColumnResizing();
    TextColumnWithTooltip<EntityModel> aliasColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(aliasColumn, constants.aliasVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> descriptionColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getDiskDescription();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(descriptionColumn, constants.descriptionVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> idColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getId().toString();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(idColumn, constants.idVmDiskTable(), "85px");
    DiskSizeColumn<EntityModel> sizeColumn = new DiskSizeColumn<EntityModel>() {

        @Override
        protected Long getRawValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getSize();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(sizeColumn, constants.provisionedSizeVmDiskTable(), "105px");
    DiskSizeColumn<EntityModel> actualSizeColumn = new DiskSizeColumn<EntityModel>() {

        @Override
        protected Long getRawValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getActualSizeInBytes();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(actualSizeColumn, constants.sizeVmDiskTable(), "105px");
    TextColumnWithTooltip<EntityModel> storageDomainColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getStoragesNames().get(0);
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(storageDomainColumn, constants.storageDomainVmDiskTable(), "115px");
    TextColumnWithTooltip<EntityModel> interfaceColumn = new EnumColumn<EntityModel, DiskInterface>() {

        @Override
        protected DiskInterface getRawValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskInterface();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(interfaceColumn, constants.interfaceVmDiskPopup(), "95px");
    SafeHtml readOnlyColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.readOnlyDiskIcon()).getHTML()), constants.readOnly());
    // $NON-NLS-1$
    internalDiskTable.addColumn(DisksViewColumns.readOnlyCheckboxColumn, readOnlyColumnHeader, "30px");
    internalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isBoot() ? constants.bootableDisk() : null);
            return disk.isBoot() ? resources.bootableDiskIcon() : null;
        }
    }, "", // $NON-NLS-1$ //$NON-NLS-2$
    "30px");
    internalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isShareable() ? constants.shareable() : null);
            return disk.isShareable() ? resources.shareableDiskIcon() : null;
        }
    }, "", // $NON-NLS-1$ //$NON-NLS-2$
    "30px");
    // $NON-NLS-1$
    internalDiskTable.setWidth("100%", true);
    // $NON-NLS-1$
    internalDiskTable.setHeight("100%");
}
#method_after
private void initInternalDiskTable(final CommonApplicationConstants constants, final CommonApplicationResources resources, final CommonApplicationTemplates templates) {
    internalDiskTable.enableColumnResizing();
    TextColumnWithTooltip<EntityModel> aliasColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(aliasColumn, constants.aliasVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> descriptionColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getDiskDescription();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(descriptionColumn, constants.descriptionVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> idColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getId().toString();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(idColumn, constants.idVmDiskTable(), "85px");
    DiskSizeColumn<EntityModel> sizeColumn = new DiskSizeColumn<EntityModel>() {

        @Override
        protected Long getRawValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getSize();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(sizeColumn, constants.provisionedSizeVmDiskTable(), "105px");
    DiskSizeColumn<EntityModel> actualSizeColumn = new DiskSizeColumn<EntityModel>() {

        @Override
        protected Long getRawValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getActualSizeInBytes();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(actualSizeColumn, constants.sizeVmDiskTable(), "105px");
    TextColumnWithTooltip<EntityModel> storageDomainColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getStoragesNames().get(0);
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(storageDomainColumn, constants.storageDomainVmDiskTable(), "115px");
    TextColumnWithTooltip<EntityModel> interfaceColumn = new EnumColumn<EntityModel, DiskInterface>() {

        @Override
        protected DiskInterface getRawValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskInterface();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(interfaceColumn, constants.interfaceVmDiskPopup(), "95px");
    SafeHtml readOnlyColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.readOnlyDiskIcon()).getHTML()), constants.readOnly());
    // $NON-NLS-1$
    internalDiskTable.addColumn(DisksViewColumns.readOnlyCheckboxColumn, readOnlyColumnHeader, "30px");
    SafeHtml bootableColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.bootableDiskIcon()).getHTML()), constants.bootable());
    internalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isBoot() ? constants.bootableDisk() : null);
            return disk.isBoot() ? resources.bootableDiskIcon() : null;
        }
    }, bootableColumnHeader, // $NON-NLS-1$
    "30px");
    SafeHtml shareableColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.shareableDiskIcon()).getHTML()), constants.shareable());
    internalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isShareable() ? constants.shareable() : null);
            return disk.isShareable() ? resources.shareableDiskIcon() : null;
        }
    }, shareableColumnHeader, // $NON-NLS-1$
    "30px");
    // $NON-NLS-1$
    internalDiskTable.setWidth("100%", true);
    // $NON-NLS-1$
    internalDiskTable.setHeight("100%");
}
#end_block

#method_before
private void initExternalDiskTable(final CommonApplicationConstants constants, final CommonApplicationResources resources, final CommonApplicationTemplates templates) {
    externalDiskTable.enableColumnResizing();
    TextColumnWithTooltip<EntityModel> aliasColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(aliasColumn, constants.aliasVmDiskTable(), "60px");
    TextColumnWithTooltip<EntityModel> descriptionColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskDescription();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(descriptionColumn, constants.descriptionVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> lunIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getLUN_id();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(lunIdColumn, constants.lunIdSanStorage(), "60px");
    TextColumnWithTooltip<EntityModel> idColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getId().toString();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(idColumn, constants.idVmDiskTable(), "60px");
    DiskSizeColumn<EntityModel> sizeColumn = new DiskSizeColumn<EntityModel>(SizeConverter.SizeUnit.GB) {

        @Override
        protected Long getRawValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return (long) disk.getLun().getDeviceSize();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(sizeColumn, constants.devSizeSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> pathColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return String.valueOf(disk.getLun().getPathCount());
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(pathColumn, constants.pathSanStorage(), "40px");
    TextColumnWithTooltip<EntityModel> vendorIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getVendorId();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(vendorIdColumn, constants.vendorIdSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> productIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getProductId();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(productIdColumn, constants.productIdSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> serialColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getSerial();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(serialColumn, constants.serialSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> interfaceColumn = new EnumColumn<EntityModel, DiskInterface>() {

        @Override
        protected DiskInterface getRawValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskInterface();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(interfaceColumn, constants.interfaceVmDiskPopup(), "90px");
    SafeHtml readOnlyColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.readOnlyDiskIcon()).getHTML()), constants.readOnly());
    // $NON-NLS-1$
    externalDiskTable.addColumn(DisksViewColumns.readOnlyCheckboxColumn, readOnlyColumnHeader, "30px");
    externalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isBoot() ? constants.bootableDisk() : null);
            return disk.isBoot() ? resources.bootableDiskIcon() : null;
        }
    }, "", // $NON-NLS-1$ //$NON-NLS-2$
    "30px");
    externalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isShareable() ? constants.shareable() : null);
            return disk.isShareable() ? resources.shareableDiskIcon() : null;
        }
    }, "", // $NON-NLS-1$ //$NON-NLS-2$
    "30px");
    // $NON-NLS-1$
    externalDiskTable.setWidth("100%", true);
    // $NON-NLS-1$
    externalDiskTable.setHeight("100%");
}
#method_after
private void initExternalDiskTable(final CommonApplicationConstants constants, final CommonApplicationResources resources, final CommonApplicationTemplates templates) {
    externalDiskTable.enableColumnResizing();
    TextColumnWithTooltip<EntityModel> aliasColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(aliasColumn, constants.aliasVmDiskTable(), "60px");
    TextColumnWithTooltip<EntityModel> descriptionColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskDescription();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(descriptionColumn, constants.descriptionVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> lunIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getLUN_id();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(lunIdColumn, constants.lunIdSanStorage(), "60px");
    TextColumnWithTooltip<EntityModel> idColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getId().toString();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(idColumn, constants.idVmDiskTable(), "60px");
    DiskSizeColumn<EntityModel> sizeColumn = new DiskSizeColumn<EntityModel>(SizeConverter.SizeUnit.GB) {

        @Override
        protected Long getRawValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return (long) disk.getLun().getDeviceSize();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(sizeColumn, constants.devSizeSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> pathColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return String.valueOf(disk.getLun().getPathCount());
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(pathColumn, constants.pathSanStorage(), "40px");
    TextColumnWithTooltip<EntityModel> vendorIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getVendorId();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(vendorIdColumn, constants.vendorIdSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> productIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getProductId();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(productIdColumn, constants.productIdSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> serialColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getSerial();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(serialColumn, constants.serialSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> interfaceColumn = new EnumColumn<EntityModel, DiskInterface>() {

        @Override
        protected DiskInterface getRawValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskInterface();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(interfaceColumn, constants.interfaceVmDiskPopup(), "90px");
    SafeHtml readOnlyColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.readOnlyDiskIcon()).getHTML()), constants.readOnly());
    // $NON-NLS-1$
    externalDiskTable.addColumn(DisksViewColumns.readOnlyCheckboxColumn, readOnlyColumnHeader, "30px");
    SafeHtml bootableColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.bootableDiskIcon()).getHTML()), constants.bootable());
    externalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isBoot() ? constants.bootableDisk() : null);
            return disk.isBoot() ? resources.bootableDiskIcon() : null;
        }
    }, bootableColumnHeader, // $NON-NLS-1$
    "30px");
    SafeHtml shareableColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.shareableDiskIcon()).getHTML()), constants.shareable());
    externalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isShareable() ? constants.shareable() : null);
            return disk.isShareable() ? resources.shareableDiskIcon() : null;
        }
    }, shareableColumnHeader, // $NON-NLS-1$
    "30px");
    // $NON-NLS-1$
    externalDiskTable.setWidth("100%", true);
    // $NON-NLS-1$
    externalDiskTable.setHeight("100%");
}
#end_block

#method_before
@Override
public void edit(final AbstractDiskModel disk) {
    driver.edit(disk);
    disk.getIsAttachDisk().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isAttach = (Boolean) ((EntityModel) sender).getEntity();
            createDiskPanel.setVisible(!isAttach);
            attachDiskPanel.setVisible(isAttach);
            if (!isAttach && !isNewLunDiskEnabled) {
                disk.getIsInternal().setEntity(true);
            }
            revealDiskPanel(disk);
        }
    });
    disk.getIsDirectLunDiskAvaialable().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isDirectLunDiskAvaialable = (Boolean) ((EntityModel) sender).getEntity();
            externalDiskPanel.setVisible(isDirectLunDiskAvaialable);
        }
    });
    internalDiskRadioButton.addClickHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            disk.getIsInternal().setEntity(true);
            revealDiskPanel(disk);
        }
    });
    externalDiskRadioButton.addClickHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            disk.getIsInternal().setEntity(false);
            revealStorageView(disk);
            revealDiskPanel(disk);
        }
    });
    internalDiskRadioButton.setValue(disk.getIsNew() ? true : disk.getDisk().getDiskStorageType() == DiskStorageType.IMAGE);
    externalDiskRadioButton.setValue(disk.getIsNew() ? false : disk.getDisk().getDiskStorageType() == DiskStorageType.LUN);
    internalDiskRadioButton.setEnabled(disk.getIsNew());
    externalDiskRadioButton.setEnabled(disk.getIsNew());
    storageModel = new StorageModel(new NewEditStorageModelBehavior());
    // Create IscsiStorageModel
    iscsiStorageModel = new IscsiStorageModel();
    iscsiStorageModel.setContainer(storageModel);
    iscsiStorageModel.getPropertyChangedEvent().addListener(progressEventHandler);
    iscsiStorageModel.setIsGrouppedByTarget(true);
    iscsiStorageModel.setIgnoreGrayedOut(true);
    iscsiStorageView = new IscsiStorageView(false, 107, 206, 246, 275, 125, 55, -59);
    iscsiStorageView.edit(iscsiStorageModel);
    // Create FcpStorageModel
    fcpStorageModel = new FcpStorageModel();
    fcpStorageModel.setContainer(storageModel);
    fcpStorageModel.getPropertyChangedEvent().addListener(progressEventHandler);
    fcpStorageModel.setIsGrouppedByTarget(false);
    fcpStorageModel.setIgnoreGrayedOut(true);
    fcpStorageView = new FcpStorageView(false, 266, 240);
    fcpStorageView.edit(fcpStorageModel);
    // Set 'StorageModel' items
    ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
    items.add(iscsiStorageModel);
    items.add(fcpStorageModel);
    storageModel.setItems(items);
    storageModel.setHost(disk.getHost());
    // SelectedItemChangedEvent handlers
    disk.getStorageType().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            revealStorageView(disk);
        }
    });
    disk.getHost().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            revealStorageView(disk);
        }
    });
    // Add event handlers
    disk.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if (propName.equals("IsValid")) {
                // $NON-NLS-1$
                if (disk.getIsValid()) {
                    innerAttachDiskPanel.markAsValid();
                } else {
                    innerAttachDiskPanel.markAsInvalid(disk.getInvalidityReasons());
                }
            }
        }
    });
    revealDiskPanel(disk);
}
#method_after
@Override
public void edit(final AbstractDiskModel disk) {
    driver.edit(disk);
    disk.getIsAttachDisk().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isAttach = (Boolean) ((EntityModel) sender).getEntity();
            createDiskPanel.setVisible(!isAttach);
            attachDiskPanel.setVisible(isAttach);
            if (!isAttach && !isNewLunDiskEnabled) {
                disk.getIsInternal().setEntity(true);
            }
            revealDiskPanel(disk);
        }
    });
    disk.getIsDirectLunDiskAvaialable().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isDirectLunDiskAvaialable = (Boolean) ((EntityModel) sender).getEntity();
            externalDiskPanel.setVisible(isDirectLunDiskAvaialable);
        }
    });
    disk.getIsVirtioScsiEnabled().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (disk.getVm() == null) {
                // not relevant for floating disks
                return;
            }
            boolean isVirtioScsiEnabled = Boolean.TRUE.equals(((EntityModel) sender).getEntity());
            Version clusterVersion = disk.getVm().getVdsGroupCompatibilityVersion();
            // Show the info icon if VirtIO-SCSI is supported by the cluster but disabled for the VM
            interfaceInfoIcon.setVisible(clusterVersion.compareTo(Version.v3_3) >= 0 && !isVirtioScsiEnabled);
        }
    });
    internalDiskRadioButton.addClickHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            disk.getIsInternal().setEntity(true);
            revealDiskPanel(disk);
        }
    });
    externalDiskRadioButton.addClickHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            disk.getIsInternal().setEntity(false);
            revealStorageView(disk);
            revealDiskPanel(disk);
        }
    });
    internalDiskRadioButton.setValue(disk.getIsNew() ? true : disk.getDisk().getDiskStorageType() == DiskStorageType.IMAGE);
    externalDiskRadioButton.setValue(disk.getIsNew() ? false : disk.getDisk().getDiskStorageType() == DiskStorageType.LUN);
    internalDiskRadioButton.setEnabled(disk.getIsNew());
    externalDiskRadioButton.setEnabled(disk.getIsNew());
    storageModel = new StorageModel(new NewEditStorageModelBehavior());
    // Create IscsiStorageModel
    iscsiStorageModel = new IscsiStorageModel();
    iscsiStorageModel.setContainer(storageModel);
    iscsiStorageModel.getPropertyChangedEvent().addListener(progressEventHandler);
    iscsiStorageModel.setIsGrouppedByTarget(true);
    iscsiStorageModel.setIgnoreGrayedOut(true);
    iscsiStorageView = new IscsiStorageView(false, 107, 206, 246, 275, 125, 55, -59);
    iscsiStorageView.edit(iscsiStorageModel);
    // Create FcpStorageModel
    fcpStorageModel = new FcpStorageModel();
    fcpStorageModel.setContainer(storageModel);
    fcpStorageModel.getPropertyChangedEvent().addListener(progressEventHandler);
    fcpStorageModel.setIsGrouppedByTarget(false);
    fcpStorageModel.setIgnoreGrayedOut(true);
    fcpStorageView = new FcpStorageView(false, 266, 240);
    fcpStorageView.edit(fcpStorageModel);
    // Set 'StorageModel' items
    ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
    items.add(iscsiStorageModel);
    items.add(fcpStorageModel);
    storageModel.setItems(items);
    storageModel.setHost(disk.getHost());
    // SelectedItemChangedEvent handlers
    disk.getStorageType().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            revealStorageView(disk);
        }
    });
    disk.getHost().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            revealStorageView(disk);
        }
    });
    // Add event handlers
    disk.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if (propName.equals("IsValid")) {
                // $NON-NLS-1$
                if (disk.getIsValid()) {
                    innerAttachDiskPanel.markAsValid();
                } else {
                    innerAttachDiskPanel.markAsInvalid(disk.getInvalidityReasons());
                }
            }
        }
    });
    revealDiskPanel(disk);
}
#end_block

#method_before
public void updateInterface(final Version clusterVersion) {
    if (getVm() != null) {
        AsyncDataProvider.isVirtioScsiEnabledForVm(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue1) {
                final boolean isVirtioScsiDisabled = Boolean.FALSE.equals(returnValue1);
                AsyncQuery asyncQuery = new AsyncQuery(this, new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object model, Object returnValue2) {
                        ArrayList<DiskInterface> diskInterfaces = (ArrayList<DiskInterface>) returnValue2;
                        if (isVirtioScsiDisabled) {
                            diskInterfaces.remove(DiskInterface.VirtIO_SCSI);
                        }
                        setInterfaces(diskInterfaces);
                    }
                });
                AsyncDataProvider.getDiskInterfaceList(getVm().getOs(), clusterVersion, asyncQuery);
            }
        }), getVm().getId());
    } else {
        setInterfaces(AsyncDataProvider.getDiskInterfaceList());
    }
}
#method_after
public void updateInterface(final Version clusterVersion) {
    if (getVm() != null) {
        AsyncDataProvider.isVirtioScsiEnabledForVm(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue1) {
                getIsVirtioScsiEnabled().setEntity(Boolean.TRUE.equals(returnValue1));
                AsyncQuery asyncQuery = new AsyncQuery(this, new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object model, Object returnValue2) {
                        ArrayList<DiskInterface> diskInterfaces = (ArrayList<DiskInterface>) returnValue2;
                        if (Boolean.FALSE.equals(getIsVirtioScsiEnabled().getEntity())) {
                            diskInterfaces.remove(DiskInterface.VirtIO_SCSI);
                        }
                        setInterfaces(diskInterfaces);
                    }
                });
                AsyncDataProvider.getDiskInterfaceList(getVm().getOs(), clusterVersion, asyncQuery);
            }
        }), getVm().getId());
    } else {
        setInterfaces(AsyncDataProvider.getDiskInterfaceList());
    }
}
#end_block

#method_before
private void updateQuota(StoragePool datacenter) {
    if (datacenter.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED) || !(Boolean) getIsInternal().getEntity()) {
        getQuota().setIsAvailable(false);
        return;
    }
    getQuota().setIsAvailable(true);
    StorageDomain storageDomain = (StorageDomain) getStorageDomain().getSelectedItem();
    if (storageDomain == null) {
        return;
    }
    IdQueryParameters parameters = new IdQueryParameters(storageDomain.getId());
    Frontend.RunQuery(VdcQueryType.GetAllRelevantQuotasForStorage, parameters, new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object innerModel, Object innerReturnValue) {
            ArrayList<Quota> quotaList = (ArrayList<Quota>) ((VdcQueryReturnValue) innerReturnValue).getReturnValue();
            if (quotaList != null && !quotaList.isEmpty()) {
                getQuota().setItems(quotaList);
            }
            Guid defaultQuota = getDisk() != null ? ((DiskImage) getDisk()).getQuotaId() : null;
            if (defaultQuota != null) {
                for (Quota quota : quotaList) {
                    if (quota.getId().equals(defaultQuota)) {
                        getQuota().setSelectedItem(quota);
                        return;
                    }
                }
                Quota quota = new Quota();
                quota.setId(defaultQuota);
                if (getDisk() != null) {
                    quota.setQuotaName(getDiskImage().getQuotaName());
                }
                quotaList.add(quota);
                getQuota().setItems(quotaList);
                getQuota().setSelectedItem(quota);
            }
        }
    }, getHash()));
}
#method_after
private void updateQuota(StoragePool datacenter) {
    if (datacenter.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED) || !(Boolean) getIsInternal().getEntity()) {
        getQuota().setIsAvailable(false);
        return;
    }
    getQuota().setIsAvailable(true);
    StorageDomain storageDomain = (StorageDomain) getStorageDomain().getSelectedItem();
    if (storageDomain == null) {
        return;
    }
    IdQueryParameters parameters = new IdQueryParameters(storageDomain.getId());
    Frontend.getInstance().runQuery(VdcQueryType.GetAllRelevantQuotasForStorage, parameters, new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object innerModel, Object innerReturnValue) {
            ArrayList<Quota> quotaList = (ArrayList<Quota>) ((VdcQueryReturnValue) innerReturnValue).getReturnValue();
            if (quotaList != null && !quotaList.isEmpty()) {
                getQuota().setItems(quotaList);
            }
            Guid defaultQuota = getDisk() != null ? ((DiskImage) getDisk()).getQuotaId() : null;
            if (defaultQuota != null) {
                for (Quota quota : quotaList) {
                    if (quota.getId().equals(defaultQuota)) {
                        getQuota().setSelectedItem(quota);
                        return;
                    }
                }
                Quota quota = new Quota();
                quota.setId(defaultQuota);
                if (getDisk() != null) {
                    quota.setQuotaName(getDiskImage().getQuotaName());
                }
                quotaList.add(quota);
                getQuota().setItems(quotaList);
                getQuota().setSelectedItem(quota);
            }
        }
    }, getHash()));
}
#end_block

#method_before
private void attachDisk_EntityChanged(EventArgs e) {
    if ((Boolean) getIsAttachDisk().getEntity()) {
        // Get internal attachable disks
        AsyncDataProvider.getAllAttachableDisks(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                AbstractDiskModel model = (AbstractDiskModel) target;
                ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
                Collections.sort(disks, new Linq.DiskByAliasComparer());
                ArrayList<DiskModel> diskModels = Linq.disksToDiskModelList(disks);
                model.getInternalAttachableDisks().setItems(Linq.toEntityModelList(Linq.filterDisksByType(diskModels, DiskStorageType.IMAGE)));
            }
        }, getHash()), getVm().getStoragePoolId(), getVm().getId());
        // Get external attachable disks
        AsyncDataProvider.getAllAttachableDisks(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                AbstractDiskModel model = (AbstractDiskModel) target;
                ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
                Collections.sort(disks, new Linq.DiskByAliasComparer());
                ArrayList<DiskModel> diskModels = Linq.disksToDiskModelList(disks);
                model.getExternalAttachableDisks().setItems(Linq.toEntityModelList(Linq.filterDisksByType(diskModels, DiskStorageType.LUN)));
            }
        }, getHash()), null, getVm().getId());
    }
}
#method_after
private void attachDisk_EntityChanged(EventArgs e) {
    if ((Boolean) getIsAttachDisk().getEntity()) {
        getIsPlugged().setIsAvailable(true);
        // Get internal attachable disks
        AsyncDataProvider.getAllAttachableDisks(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                AbstractDiskModel model = (AbstractDiskModel) target;
                ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
                Collections.sort(disks, new Linq.DiskByAliasComparer());
                ArrayList<DiskModel> diskModels = Linq.disksToDiskModelList(disks);
                model.getInternalAttachableDisks().setItems(Linq.toEntityModelList(Linq.filterDisksByType(diskModels, DiskStorageType.IMAGE)));
            }
        }, getHash()), getVm().getStoragePoolId(), getVm().getId());
        // Get external attachable disks
        AsyncDataProvider.getAllAttachableDisks(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                AbstractDiskModel model = (AbstractDiskModel) target;
                ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
                Collections.sort(disks, new Linq.DiskByAliasComparer());
                ArrayList<DiskModel> diskModels = Linq.disksToDiskModelList(disks);
                model.getExternalAttachableDisks().setItems(Linq.toEntityModelList(Linq.filterDisksByType(diskModels, DiskStorageType.LUN)));
            }
        }, getHash()), null, getVm().getId());
    }
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition) && sender == getIsWipeAfterDelete()) {
        wipeAfterDelete_EntityChanged(args);
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition) && sender == getIsAttachDisk()) {
        attachDisk_EntityChanged(args);
    } else if (ev.matchesDefinition(ListModel.EntityChangedEventDefinition) && sender == getIsInternal()) {
        isInternal_EntityChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getVolumeType()) {
        volumeType_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getDiskInterface()) {
        DiskInterface_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getDataCenter()) {
        datacenter_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getStorageDomain()) {
        storageDomain_SelectedItemChanged();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryStartedEventDefinition()) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryCompleteEventDefinition()) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition) && sender == getIsWipeAfterDelete()) {
        wipeAfterDelete_EntityChanged(args);
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition) && sender == getIsAttachDisk()) {
        attachDisk_EntityChanged(args);
    } else if (ev.matchesDefinition(ListModel.EntityChangedEventDefinition) && sender == getIsInternal()) {
        isInternal_EntityChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getVolumeType()) {
        volumeType_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getDiskInterface()) {
        DiskInterface_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getDataCenter()) {
        datacenter_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getStorageDomain()) {
        storageDomain_SelectedItemChanged();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryStartedEventDefinition()) && StringHelper.stringsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryCompleteEventDefinition()) && StringHelper.stringsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!isVmExist() || !acquireLockInternal()) {
        return false;
    }
    VM vm = getVm();
    if (vm != null) {
        if (!canRunActionOnNonManagedVm()) {
            return false;
        }
        updateDisksFromDb();
        // if user sent drive check that its not in use
        if (!isDiskCanBeAddedToVm(getParameters().getDiskInfo(), vm) || !isDiskPassPciAndIdeLimit(getParameters().getDiskInfo())) {
            return false;
        }
    }
    if (DiskStorageType.IMAGE == getParameters().getDiskInfo().getDiskStorageType()) {
        return checkIfImageDiskCanBeAdded(vm);
    }
    if (DiskStorageType.LUN == getParameters().getDiskInfo().getDiskStorageType()) {
        return checkIfLunDiskCanBeAdded();
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (!isVmExist() || !acquireLockInternal()) {
        return false;
    }
    VM vm = getVm();
    if (vm != null) {
        if (!canRunActionOnNonManagedVm()) {
            return false;
        }
        updateDisksFromDb();
        // if user sent drive check that its not in use
        if (!isDiskCanBeAddedToVm(getParameters().getDiskInfo(), vm) || !isDiskPassPciAndIdeLimit(getParameters().getDiskInfo())) {
            return false;
        }
    } else if (Boolean.TRUE.equals(getParameters().getPlugDiskToVm())) {
        return failCanDoAction(VdcBllMessages.CANNOT_ADD_FLOATING_DISK_WITH_PLUG_VM_SET);
    }
    if (DiskStorageType.IMAGE == getParameters().getDiskInfo().getDiskStorageType()) {
        return checkIfImageDiskCanBeAdded(vm);
    }
    if (DiskStorageType.LUN == getParameters().getDiskInfo().getDiskStorageType()) {
        return checkIfLunDiskCanBeAdded();
    }
    return true;
}
#end_block

#method_before
private boolean checkIfImageDiskCanBeAdded(VM vm) {
    boolean returnValue;
    DiskValidator diskValidator = getDiskValidator(getParameters().getDiskInfo());
    // vm agnostic checks
    returnValue = validate(new StorageDomainValidator(getStorageDomain()).isDomainExistAndActive()) && !isShareableDiskOnGlusterDomain() && checkImageConfiguration() && hasFreeSpace(getStorageDomain()) && checkExceedingMaxBlockDiskSize() && canAddShareableDisk() && validate(diskValidator.isVirtIoScsiValid(vm));
    if (returnValue && vm != null) {
        // Note this is done according to the VM's spId.
        StoragePool sp = getStoragePool();
        returnValue = validate(new StoragePoolValidator(sp).isUp()) && isStoragePoolMatching(vm) && isVmNotLocked() && isVmNotInPreviewSnapshot();
    }
    return returnValue;
}
#method_after
private boolean checkIfImageDiskCanBeAdded(VM vm) {
    boolean returnValue;
    DiskValidator diskValidator = getDiskValidator(getParameters().getDiskInfo());
    StorageDomainValidator storageDomainValidator = createStorageDomainValidator();
    // vm agnostic checks
    returnValue = validate(storageDomainValidator.isDomainExistAndActive()) && !isShareableDiskOnGlusterDomain() && checkImageConfiguration() && validate(storageDomainValidator.hasSpaceForNewDisk(getDiskImageInfo())) && validate(storageDomainValidator.isDomainWithinThresholds()) && checkExceedingMaxBlockDiskSize() && canAddShareableDisk() && validate(diskValidator.isVirtIoScsiValid(vm));
    if (returnValue && vm != null) {
        // Note this is done according to the VM's spId.
        StoragePool sp = getStoragePool();
        returnValue = validate(new StoragePoolValidator(sp).isUp()) && isStoragePoolMatching(vm) && isVmNotLocked() && isVmNotInPreviewSnapshot();
    }
    return returnValue;
}
#end_block

#method_before
private boolean canAddShareableDisk() {
    if (getParameters().getDiskInfo().isShareable()) {
        if (!Config.<Boolean>GetValue(ConfigValues.ShareableDiskEnabled, getStoragePool().getcompatibility_version().getValue())) {
            return failCanDoAction(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
        } else if (!isVolumeFormatSupportedForShareable(((DiskImage) getParameters().getDiskInfo()).getVolumeFormat())) {
            return failCanDoAction(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_BY_VOLUME_FORMAT);
        }
    }
    return true;
}
#method_after
private boolean canAddShareableDisk() {
    if (getParameters().getDiskInfo().isShareable()) {
        if (!Config.<Boolean>getValue(ConfigValues.ShareableDiskEnabled, getStoragePool().getcompatibility_version().getValue())) {
            return failCanDoAction(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
        } else if (!isVolumeFormatSupportedForShareable(((DiskImage) getParameters().getDiskInfo()).getVolumeFormat())) {
            return failCanDoAction(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_BY_VOLUME_FORMAT);
        }
    }
    return true;
}
#end_block

#method_before
private boolean checkExceedingMaxBlockDiskSize() {
    if (isExceedMaxBlockDiskSize()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_MAX_SIZE_EXCEEDED);
        getReturnValue().getCanDoActionMessages().add(String.format("$max_disk_size %1$s", Config.<Integer>GetValue(ConfigValues.MaxBlockDiskSize)));
        return false;
    }
    return true;
}
#method_after
private boolean checkExceedingMaxBlockDiskSize() {
    if (isExceedMaxBlockDiskSize()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_MAX_SIZE_EXCEEDED);
        getReturnValue().getCanDoActionMessages().add(String.format("$max_disk_size %1$s", Config.<Integer>getValue(ConfigValues.MaxBlockDiskSize)));
        return false;
    }
    return true;
}
#end_block

#method_before
private boolean isExceedMaxBlockDiskSize() {
    if (getStorageDomain().getStorageType().isBlockDomain()) {
        return getRequestDiskSpace() > Config.<Integer>GetValue(ConfigValues.MaxBlockDiskSize);
    }
    return false;
}
#method_after
private boolean isExceedMaxBlockDiskSize() {
    if (getStorageDomain().getStorageType().isBlockDomain()) {
        return getRequestDiskSpace() > Config.<Integer>getValue(ConfigValues.MaxBlockDiskSize);
    }
    return false;
}
#end_block

#method_before
private void createDiskBasedOnLun() {
    final LUNs lun = ((LunDisk) getParameters().getDiskInfo()).getLun();
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType());
            getBaseDiskDao().save(getParameters().getDiskInfo());
            getDiskLunMapDao().save(new DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id()));
            if (getVm() != null) {
                VmDeviceUtils.addManagedDevice(new VmDeviceId(getParameters().getDiskInfo().getId(), getVmId()), VmDeviceGeneralType.DISK, VmDeviceType.DISK, null, getVm().getStatus() == VMStatus.Down && getParameters().getPlugDiskToVm(), Boolean.TRUE.equals(getParameters().getDiskInfo().getReadOnly()), null);
            }
            return null;
        }
    });
    getReturnValue().setActionReturnValue(getParameters().getDiskInfo().getId());
    plugDiskToVmIfNeeded();
    setSucceeded(true);
}
#method_after
private void createDiskBasedOnLun() {
    final LUNs lun = ((LunDisk) getParameters().getDiskInfo()).getLun();
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType());
            getBaseDiskDao().save(getParameters().getDiskInfo());
            getDiskLunMapDao().save(new DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id()));
            if (getVm() != null) {
                VmDeviceUtils.addManagedDevice(new VmDeviceId(getParameters().getDiskInfo().getId(), getVmId()), VmDeviceGeneralType.DISK, VmDeviceType.DISK, null, shouldDiskBePlugged(), Boolean.TRUE.equals(getParameters().getDiskInfo().getReadOnly()), null);
            }
            return null;
        }
    });
    getReturnValue().setActionReturnValue(getParameters().getDiskInfo().getId());
    plugDiskToVmIfNeeded();
    setSucceeded(true);
}
#end_block

#method_before
private void createDiskBasedOnImage() {
    if (!getParameters().getDiskInfo().isWipeAfterDeleteSet()) {
        StorageType storageType = getStorageDomain().getStorageType();
        getParameters().getDiskInfo().setWipeAfterDelete(WipeAfterDeleteUtils.getDefaultWipeAfterDeleteFlag(storageType));
    }
    // create from blank template, create new vm snapshot id
    AddImageFromScratchParameters parameters = new AddImageFromScratchParameters(Guid.Empty, getParameters().getVmId(), getDiskImageInfo());
    parameters.setQuotaId(getQuotaId());
    parameters.setDiskAlias(getDiskAlias());
    parameters.setStorageDomainId(getStorageDomainId());
    parameters.setParentCommand(VdcActionType.AddDisk);
    parameters.setEntityInfo(getParameters().getEntityInfo());
    parameters.setStoragePoolId(getStorageDomain().getStoragePoolId());
    parameters.setParentParameters(getParameters());
    if (getVm() != null) {
        setVmSnapshotIdForDisk(parameters);
        getCompensationContext().snapshotNewEntity(VmDeviceUtils.addManagedDevice(new VmDeviceId(getParameters().getDiskInfo().getId(), getVmId()), VmDeviceGeneralType.DISK, VmDeviceType.DISK, null, getVm().getStatus() == VMStatus.Down && getParameters().getPlugDiskToVm(), Boolean.TRUE.equals(getParameters().getDiskInfo().getReadOnly()), null));
        getCompensationContext().stateChanged();
    }
    VdcReturnValueBase tmpRetValue = Backend.getInstance().runInternalAction(VdcActionType.AddImageFromScratch, parameters, ExecutionHandler.createDefaultContexForTasks(getExecutionContext(), getLock()));
    // Setting lock to null because the lock is released in the child command
    setLock(null);
    getReturnValue().getVdsmTaskIdList().addAll(tmpRetValue.getInternalVdsmTaskIdList());
    if (tmpRetValue.getActionReturnValue() != null) {
        DiskImage diskImage = (DiskImage) tmpRetValue.getActionReturnValue();
        addDiskPermissions(diskImage);
        getReturnValue().setActionReturnValue(diskImage.getId());
    }
    getReturnValue().setFault(tmpRetValue.getFault());
    setSucceeded(tmpRetValue.getSucceeded());
}
#method_after
private void createDiskBasedOnImage() {
    if (!getParameters().getDiskInfo().isWipeAfterDeleteSet()) {
        StorageType storageType = getStorageDomain().getStorageType();
        getParameters().getDiskInfo().setWipeAfterDelete(WipeAfterDeleteUtils.getDefaultWipeAfterDeleteFlag(storageType));
    }
    // create from blank template, create new vm snapshot id
    AddImageFromScratchParameters parameters = new AddImageFromScratchParameters(Guid.Empty, getParameters().getVmId(), getDiskImageInfo());
    parameters.setQuotaId(getQuotaId());
    parameters.setDiskAlias(getDiskAlias());
    parameters.setStorageDomainId(getStorageDomainId());
    parameters.setParentCommand(VdcActionType.AddDisk);
    parameters.setEntityInfo(getParameters().getEntityInfo());
    parameters.setStoragePoolId(getStorageDomain().getStoragePoolId());
    parameters.setParentParameters(getParameters());
    if (getVm() != null) {
        setVmSnapshotIdForDisk(parameters);
        getCompensationContext().snapshotNewEntity(VmDeviceUtils.addManagedDevice(new VmDeviceId(getParameters().getDiskInfo().getId(), getVmId()), VmDeviceGeneralType.DISK, VmDeviceType.DISK, null, shouldDiskBePlugged(), Boolean.TRUE.equals(getParameters().getDiskInfo().getReadOnly()), null));
        getCompensationContext().stateChanged();
    }
    VdcReturnValueBase tmpRetValue = Backend.getInstance().runInternalAction(VdcActionType.AddImageFromScratch, parameters, ExecutionHandler.createDefaultContexForTasks(getExecutionContext(), getLock()));
    // Setting lock to null because the lock is released in the child command
    setLock(null);
    getReturnValue().getVdsmTaskIdList().addAll(tmpRetValue.getInternalVdsmTaskIdList());
    if (tmpRetValue.getActionReturnValue() != null) {
        DiskImage diskImage = (DiskImage) tmpRetValue.getActionReturnValue();
        addDiskPermissions(diskImage);
        getReturnValue().setActionReturnValue(diskImage.getId());
    }
    getReturnValue().setFault(tmpRetValue.getFault());
    setSucceeded(tmpRetValue.getSucceeded());
}
#end_block

#method_before
private void addDiskPermissions(Disk disk) {
    permissions perms = new permissions(getCurrentUser().getId(), PredefinedRoles.DISK_OPERATOR.getId(), disk.getId(), VdcObjectType.Disk);
    MultiLevelAdministrationHandler.addPermission(perms);
}
#method_after
private void addDiskPermissions(Disk disk) {
    Permissions perms = new Permissions(getCurrentUser().getId(), PredefinedRoles.DISK_OPERATOR.getId(), disk.getId(), VdcObjectType.Disk);
    MultiLevelAdministrationHandler.addPermission(perms);
}
#end_block

#method_before
private void plugDiskToVmIfNeeded() {
    if (getVm() != null && getParameters().getPlugDiskToVm() && getVm().getStatus() != VMStatus.Down) {
        HotPlugDiskToVmParameters params = new HotPlugDiskToVmParameters(getVmId(), getParameters().getDiskInfo().getId());
        Backend.getInstance().runInternalAction(VdcActionType.HotPlugDiskToVm, params);
    }
}
#method_after
private void plugDiskToVmIfNeeded() {
    if (Boolean.TRUE.equals(getParameters().getPlugDiskToVm()) && getVm() != null && getVm().getStatus() != VMStatus.Down) {
        HotPlugDiskToVmParameters params = new HotPlugDiskToVmParameters(getVmId(), getParameters().getDiskInfo().getId());
        params.setShouldBeLogged(false);
        VdcReturnValueBase returnValue = Backend.getInstance().runInternalAction(VdcActionType.HotPlugDiskToVm, params);
        if (!returnValue.getSucceeded()) {
            AuditLogDirector.log(this, AuditLogType.USER_FAILED_HOTPLUG_DISK);
        }
    }
}
#end_block

#method_before
public ValidationResult hasSpaceForClonedDisks(Collection<DiskImage> diskImages) {
    double availableSize = storageDomain.getAvailableDiskSizeInBytes();
    double totalSizeForDisks = 0.0;
    for (DiskImage diskImage : diskImages) {
        double diskCapacity = diskImage.getSize();
        double sizeForDisk = diskCapacity;
        if ((storageDomain.getStorageType().isFileDomain() && diskImage.getVolumeType() == VolumeType.Sparse) || storageDomain.getStorageType().isBlockDomain() && diskImage.getVolumeFormat() == VolumeFormat.COW) {
            addImageSnapshots(diskImage);
            double usedSapce = diskImage.getActualDiskWithSnapshotsSizeInBytes();
            sizeForDisk = Math.min(diskCapacity, usedSapce);
        }
        if (diskImage.getVolumeFormat() == VolumeFormat.COW) {
            sizeForDisk = Math.ceil(QCOW_OVERHEAD_FACTOR * sizeForDisk);
        }
        totalSizeForDisks += sizeForDisk;
    }
    return validateRequiredSpace(availableSize, totalSizeForDisks);
}
#method_after
public ValidationResult hasSpaceForClonedDisks(Collection<DiskImage> diskImages) {
    double availableSize = storageDomain.getAvailableDiskSizeInBytes();
    double totalSizeForDisks = 0.0;
    for (DiskImage diskImage : diskImages) {
        double diskCapacity = diskImage.getSize();
        double sizeForDisk = diskCapacity;
        if ((storageDomain.getStorageType().isFileDomain() && diskImage.getVolumeType() == VolumeType.Sparse) || storageDomain.getStorageType().isBlockDomain() && diskImage.getVolumeFormat() == VolumeFormat.COW) {
            double usedSapce = diskImage.getActualDiskWithSnapshotsSizeInBytes();
            sizeForDisk = Math.min(diskCapacity, usedSapce);
        }
        if (diskImage.getVolumeFormat() == VolumeFormat.COW) {
            sizeForDisk = Math.ceil(QCOW_OVERHEAD_FACTOR * sizeForDisk);
        }
        totalSizeForDisks += sizeForDisk;
    }
    return validateRequiredSpace(availableSize, totalSizeForDisks);
}
#end_block

#method_before
protected boolean validateSpaceRequirements() {
    StorageDomainValidator storageDomainValidator = createStorageDomainValidator();
    return validate(storageDomainValidator.isDomainWithinThresholds()) && validate(storageDomainValidator.hasSpaceForClonedDisk(getImage()));
}
#method_after
protected boolean validateSpaceRequirements() {
    StorageDomainValidator storageDomainValidator = createStorageDomainValidator();
    if (validate(storageDomainValidator.isDomainWithinThresholds())) {
        getImage().getSnapshots().addAll(getAllImageSnapshots());
        return validate(storageDomainValidator.hasSpaceForClonedDisk(getImage()));
    }
    return false;
}
#end_block

#method_before
public static boolean isOsSupportedForVirtIoScsi(int osId, Version clusterVersion) {
    ArrayList<String> diskInterfaces = SimpleDependecyInjector.getInstance().get(OsRepository.class).getDiskInterfaces(osId, clusterVersion);
    return diskInterfaces.contains(DiskInterface.VirtIO_SCSI.toString());
}
#method_after
public static boolean isOsSupportedForVirtIoScsi(int osId, Version clusterVersion) {
    List<String> diskInterfaces = SimpleDependecyInjector.getInstance().get(OsRepository.class).getDiskInterfaces(osId, clusterVersion);
    return diskInterfaces.contains(DiskInterface.VirtIO_SCSI.toString());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getVolumeType().isReplicatedType()) {
        if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT);
        }
    }
    if (getGlusterVolume().getVolumeType().isStripedType()) {
        if (getParameters().getStripeCount() > getGlusterVolume().getStripeCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getStripeCount() < getGlusterVolume().getStripeCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT);
        }
    }
    return updateBrickServerNames(getParameters().getBricks(), true) && validateDuplicateBricks(getParameters().getBricks());
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (!validate(createVolumeValidator().isForceCreateVolumeAllowed(getVdsGroup().getcompatibility_version(), getParameters().isForce()))) {
        return false;
    }
    if (getGlusterVolume().getVolumeType().isReplicatedType()) {
        if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT);
        }
    }
    if (getGlusterVolume().getVolumeType().isStripedType()) {
        if (getParameters().getStripeCount() > getGlusterVolume().getStripeCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getStripeCount() < getGlusterVolume().getStripeCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT);
        }
    }
    return updateBrickServerNames(getParameters().getBricks(), true) && validateDuplicateBricks(getParameters().getBricks());
}
#end_block

#method_before
private void addGlusterVolumeBricks(List<GlusterBrickEntity> bricksList, int replicaCount, int stripeCount, boolean force) {
    VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionVDSParameters(upServer.getId(), getGlusterVolumeName(), bricksList, replicaCount, stripeCount, force));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        addCustomValue(GlusterConstants.NO_OF_BRICKS, String.valueOf(bricksList.size()));
        addGlusterVolumeBricksInDb(bricksList, replicaCount, stripeCount);
        logAuditMessages(bricksList);
        getReturnValue().setActionReturnValue(getBrickIds(bricksList));
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#method_after
private void addGlusterVolumeBricks(List<GlusterBrickEntity> bricksList, int replicaCount, int stripeCount, boolean force) {
    VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionVDSParameters(upServer.getId(), getGlusterVolumeName(), bricksList, replicaCount, stripeCount, upServer.getVdsGroupCompatibilityVersion(), force));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        addCustomValue(GlusterConstants.NO_OF_BRICKS, String.valueOf(bricksList.size()));
        addGlusterVolumeBricksInDb(bricksList, replicaCount, stripeCount);
        logAuditMessages(bricksList);
        getReturnValue().setActionReturnValue(getBrickIds(bricksList));
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
private void prepareMocks(AddBricksToGlusterVolumeCommand command) {
    doReturn(volumeDao).when(command).getGlusterVolumeDao();
    doReturn(vdsStaticDao).when(command).getVdsStaticDao();
    doReturn(brickDao).when(command).getGlusterBrickDao();
    doReturn(getVds(VDSStatus.Up)).when(command).getUpServer();
    doReturn(getSingleBrickVolume(volumeId1)).when(volumeDao).getById(volumeId1);
    doReturn(getMultiBrickVolume(volumeId2)).when(volumeDao).getById(volumeId2);
    doReturn(getBrick(volumeId1)).when(brickDao).getBrickByServerIdAndDirectory(serverId, BRICK_DIRECTORY);
    doReturn(null).when(volumeDao).getById(null);
    doReturn(getVdsStatic()).when(vdsStaticDao).get(serverId);
    doReturn(getVDsGroup()).when(command).getVdsGroup();
}
#method_after
private void prepareMocks(AddBricksToGlusterVolumeCommand command) {
    doReturn(volumeDao).when(command).getGlusterVolumeDao();
    doReturn(vdsStaticDao).when(command).getVdsStaticDao();
    doReturn(brickDao).when(command).getGlusterBrickDao();
    doReturn(validator).when(command).createVolumeValidator();
    doReturn(getVds(VDSStatus.Up)).when(command).getUpServer();
    doReturn(getSingleBrickVolume(volumeId1)).when(volumeDao).getById(volumeId1);
    doReturn(getMultiBrickVolume(volumeId2)).when(volumeDao).getById(volumeId2);
    doReturn(getBrick(volumeId1)).when(brickDao).getBrickByServerIdAndDirectory(serverId, BRICK_DIRECTORY);
    doReturn(null).when(volumeDao).getById(null);
    doReturn(getVdsStatic()).when(vdsStaticDao).get(serverId);
    doReturn(getVDsGroup()).when(command).getVdsGroup();
    doReturn(ValidationResult.VALID).when(validator).isForceCreateVolumeAllowed(Version.v3_1, false);
    doReturn(new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_ADD_BRICK_FORCE_NOT_SUPPORTED)).when(validator).isForceCreateVolumeAllowed(Version.v3_1, true);
}
#end_block

#method_before
@Override
protected void executeVdsBrokerCommand() {
    GlusterVolumeEntity volume = getParameters().getVolume();
    boolean isForce = getParameters().isForce();
    VDS vds = getDbFacade().getVdsDao().get(getParameters().getVdsId());
    boolean supportForceCreateVolume = GlusterFeatureSupported.glusterForceCreateVolumeSupported(vds.getVdsGroupCompatibilityVersion());
    uuidReturn = supportForceCreateVolume ? getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume), isForce) : getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume));
    // Handle errors if any
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        // set the volume updated with id as the return value
        volume.setId(Guid.createGuidFromStringDefaultEmpty(uuidReturn.mUuid));
        setReturnValue(volume);
    }
}
#method_after
@Override
protected void executeVdsBrokerCommand() {
    GlusterVolumeEntity volume = getParameters().getVolume();
    boolean isForce = getParameters().isForce();
    boolean supportForceCreateVolume = GlusterFeatureSupported.glusterForceCreateVolumeSupported(getParameters().getClusterVersion());
    uuidReturn = supportForceCreateVolume ? getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume), isForce) : getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume));
    // Handle errors if any
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        // set the volume updated with id as the return value
        volume.setId(Guid.createGuidFromStringDefaultEmpty(uuidReturn.mUuid));
        setReturnValue(volume);
    }
}
#end_block

#method_before
@Override
protected void executeVdsBrokerCommand() {
    boolean isForce = getParameters().isForce();
    VDS vds = getDbFacade().getVdsDao().get(getParameters().getVdsId());
    boolean supportForceCreateVolume = GlusterFeatureSupported.glusterForceCreateVolumeSupported(vds.getVdsGroupCompatibilityVersion());
    List<String> bricks = GlusterCoreUtil.getQualifiedBrickList(getParameters().getBricks());
    status = supportForceCreateVolume ? getBroker().glusterVolumeBrickAdd(getParameters().getVolumeName(), bricks.toArray(new String[0]), getParameters().getReplicaCount(), getParameters().getStripeCount(), isForce) : getBroker().glusterVolumeBrickAdd(getParameters().getVolumeName(), bricks.toArray(new String[0]), getParameters().getReplicaCount(), getParameters().getStripeCount());
    proceedProxyReturnValue();
}
#method_after
@Override
protected void executeVdsBrokerCommand() {
    boolean isForce = getParameters().isForce();
    boolean supportForceCreateVolume = GlusterFeatureSupported.glusterForceCreateVolumeSupported(getParameters().getClusterVersion());
    List<String> bricks = GlusterCoreUtil.getQualifiedBrickList(getParameters().getBricks());
    status = supportForceCreateVolume ? getBroker().glusterVolumeBrickAdd(getParameters().getVolumeName(), bricks.toArray(new String[0]), getParameters().getReplicaCount(), getParameters().getStripeCount(), isForce) : getBroker().glusterVolumeBrickAdd(getParameters().getVolumeName(), bricks.toArray(new String[0]), getParameters().getReplicaCount(), getParameters().getStripeCount());
    proceedProxyReturnValue();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    VDSGroup cluster = getVdsGroup();
    if (cluster == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!cluster.supportsGlusterService()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER);
        return false;
    }
    if (volumeNameExists(volume.getName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS);
        addCanDoActionMessage(String.format("$volumeName %1$s", volume.getName()));
        return false;
    }
    return validateBricks(volume);
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    VDSGroup cluster = getVdsGroup();
    if (cluster == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!cluster.supportsGlusterService()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER);
        return false;
    }
    if (volumeNameExists(volume.getName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS);
        addCanDoActionMessage(String.format("$volumeName %1$s", volume.getName()));
        return false;
    }
    if (!validate(createVolumeValidator().isForceCreateVolumeAllowed(getVdsGroup().getcompatibility_version(), getParameters().isForce()))) {
        return false;
    }
    return validateBricks(volume);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // set the gluster volume name for audit purpose
    setGlusterVolumeName(volume.getName());
    if (volume.getTransportTypes() == null || volume.getTransportTypes().isEmpty()) {
        volume.addTransportType(TransportType.TCP);
    }
    // GLUSTER access protocol is enabled by default
    volume.addAccessProtocol(AccessProtocol.GLUSTER);
    if (!volume.getAccessProtocols().contains(AccessProtocol.NFS)) {
        volume.disableNFS();
    }
    if (volume.getAccessProtocols().contains(AccessProtocol.CIFS)) {
        volume.enableCifs();
    }
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.CreateGlusterVolume, new CreateGlusterVolumeVDSParameters(upServer.getId(), volume, getParameters().isForce()));
    setSucceeded(returnValue.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
    // Volume created successfully. Insert it to database.
    GlusterVolumeEntity createdVolume = (GlusterVolumeEntity) returnValue.getReturnValue();
    setVolumeType(createdVolume);
    setBrickOrder(createdVolume.getBricks());
    addVolumeToDb(createdVolume);
    // If we log successful volume creation at the end of this command,
    // the messages from SetGlusterVolumeOptionCommand appear first,
    // making it look like options were set before volume was created.
    // Hence we explicitly log the volume creation before setting the options.
    AuditLogDirector.log(this, AuditLogType.GLUSTER_VOLUME_CREATE);
    // And don't log it at the end
    setCommandShouldBeLogged(false);
    // set all options of the volume
    setVolumeOptions(createdVolume);
    getReturnValue().setActionReturnValue(createdVolume.getId());
}
#method_after
@Override
protected void executeCommand() {
    // set the gluster volume name for audit purpose
    setGlusterVolumeName(volume.getName());
    if (volume.getTransportTypes() == null || volume.getTransportTypes().isEmpty()) {
        volume.addTransportType(TransportType.TCP);
    }
    // GLUSTER access protocol is enabled by default
    volume.addAccessProtocol(AccessProtocol.GLUSTER);
    if (!volume.getAccessProtocols().contains(AccessProtocol.NFS)) {
        volume.disableNFS();
    }
    if (volume.getAccessProtocols().contains(AccessProtocol.CIFS)) {
        volume.enableCifs();
    }
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.CreateGlusterVolume, new CreateGlusterVolumeVDSParameters(upServer.getId(), volume, upServer.getVdsGroupCompatibilityVersion(), getParameters().isForce()));
    setSucceeded(returnValue.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
    // Volume created successfully. Insert it to database.
    GlusterVolumeEntity createdVolume = (GlusterVolumeEntity) returnValue.getReturnValue();
    setVolumeType(createdVolume);
    setBrickOrder(createdVolume.getBricks());
    addVolumeToDb(createdVolume);
    // If we log successful volume creation at the end of this command,
    // the messages from SetGlusterVolumeOptionCommand appear first,
    // making it look like options were set before volume was created.
    // Hence we explicitly log the volume creation before setting the options.
    AuditLogDirector.log(this, AuditLogType.GLUSTER_VOLUME_CREATE);
    // And don't log it at the end
    setCommandShouldBeLogged(false);
    // set all options of the volume
    setVolumeOptions(createdVolume);
    getReturnValue().setActionReturnValue(createdVolume.getId());
}
#end_block

#method_before
public static boolean glusterForceCreateVolumeSupported(Version version) {
    return supportedInConfig(ConfigValues.GlusterSupportForceCreateVolume, version);
}
#method_after
public static boolean glusterForceCreateVolumeSupported(Version version) {
    if (version != null) {
        return supportedInConfig(ConfigValues.GlusterSupportForceCreateVolume, version);
    } else {
        return false;
    }
}
#end_block

#method_before
private void addVideoCardByDisplayType(DisplayType displayType, int numOfMonitors, boolean singleQxlPci) {
    Map<String, Object> struct = new HashMap<String, Object>();
    // create a monitor as an unmanaged device
    struct.put(VdsProperties.Type, VmDeviceGeneralType.VIDEO.getValue());
    struct.put(VdsProperties.Device, displayType.getVmDeviceType().getName());
    struct.put(VdsProperties.SpecParams, getNewMonitorSpecParams(displayType, numOfMonitors, singleQxlPci));
    struct.put(VdsProperties.DeviceId, String.valueOf(Guid.newGuid()));
    devices.add(struct);
}
#method_after
private void addVideoCardByDisplayType(DisplayType displayType, int numOfMonitors, boolean singleQxlPci) {
    Map<String, Object> struct = new HashMap<String, Object>();
    VmDeviceType vmDeviceType = getOsRepository().getDisplayDevice(vm.getOs(), vm.getVdsGroupCompatibilityVersion(), displayType);
    // create a monitor as an unmanaged device
    struct.put(VdsProperties.Type, VmDeviceGeneralType.VIDEO.getValue());
    struct.put(VdsProperties.Device, vmDeviceType);
    struct.put(VdsProperties.SpecParams, getNewMonitorSpecParams(displayType, numOfMonitors, singleQxlPci));
    struct.put(VdsProperties.DeviceId, String.valueOf(Guid.newGuid()));
    devices.add(struct);
}
#end_block

#method_before
@Override
protected void buildVmCD() {
    Map<String, Object> struct;
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.CDROM) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null);
        struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    }
    // check first if CD was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getCdPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null);
        struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getCdPath());
    } else {
        // get vm device for this CD from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            struct = new HashMap<String, Object>();
            String cdPath = vm.getCdPath();
            addCdDetails(vmDevice, struct);
            addAddress(vmDevice, struct);
            addDevice(struct, vmDevice, cdPath == null ? "" : cdPath);
        }
    }
}
#method_after
@Override
protected void buildVmCD() {
    Map<String, Object> struct;
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.CDROM) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null, null);
        struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    }
    // check first if CD was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getCdPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null, null);
        struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getCdPath());
    } else {
        // get vm device for this CD from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            struct = new HashMap<String, Object>();
            String cdPath = vm.getCdPath();
            addCdDetails(vmDevice, struct);
            addAddress(vmDevice, struct);
            addDevice(struct, vmDevice, cdPath == null ? "" : cdPath);
        }
    }
}
#end_block

#method_before
@Override
protected void buildVmFloppy() {
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.FLOPPY) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null);
        Map<String, Object> struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    } else // check first if Floppy was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getFloppyPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null);
        Map<String, Object> struct = new HashMap<String, Object>();
        addFloppyDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getFloppyPath());
    } else {
        // get vm device for this Floppy from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            // instead of the blank cd
            if (!VmPayload.isPayload(vmDevice.getSpecParams()) && vmDevices.size() > 1) {
                continue;
            }
            Map<String, Object> struct = new HashMap<String, Object>();
            String file = vm.getFloppyPath();
            addFloppyDetails(vmDevice, struct);
            addDevice(struct, vmDevice, file);
        }
    }
}
#method_after
@Override
protected void buildVmFloppy() {
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.FLOPPY) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null, null);
        Map<String, Object> struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    } else // check first if Floppy was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getFloppyPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null, null);
        Map<String, Object> struct = new HashMap<String, Object>();
        addFloppyDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getFloppyPath());
    } else {
        // get vm device for this Floppy from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            // instead of the blank cd
            if (!VmPayload.isPayload(vmDevice.getSpecParams()) && vmDevices.size() > 1) {
                continue;
            }
            Map<String, Object> struct = new HashMap<String, Object>();
            String file = vm.getFloppyPath();
            addFloppyDetails(vmDevice, struct);
            addDevice(struct, vmDevice, file);
        }
    }
}
#end_block

#method_before
@Override
protected void buildVmDrives() {
    List<Disk> disks = getSortedDisks();
    for (Disk disk : disks) {
        Map<String, Object> struct = new HashMap<String, Object>();
        // get vm device for this disk from DB
        VmDevice vmDevice = DbFacade.getInstance().getVmDeviceDao().get(new VmDeviceId(disk.getId(), vm.getId()));
        // skip unamanged devices (handled separtely)
        if (!vmDevice.getIsManaged()) {
            continue;
        }
        if (vmDevice.getIsPlugged()) {
            struct.put(VdsProperties.Type, vmDevice.getType().getValue());
            struct.put(VdsProperties.Device, vmDevice.getDevice());
            switch(disk.getDiskInterface()) {
                case IDE:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Ide);
                    break;
                case VirtIO:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Virtio);
                    break;
                case VirtIO_SCSI:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Scsi);
                    if (disk.getDiskStorageType() == DiskStorageType.LUN) {
                        struct.put(VdsProperties.Device, VmDeviceType.LUN.getName());
                        struct.put(VdsProperties.Sgio, disk.getSgio().toString().toLowerCase());
                    }
                    break;
                default:
                    logUnsupportedInterfaceType();
                    break;
            }
            // Insure that boot disk is created first.
            if (disk.isBoot()) {
                struct.put(VdsProperties.Index, 0);
            }
            addAddress(vmDevice, struct);
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage diskImage = (DiskImage) disk;
                struct.put(VdsProperties.PoolId, diskImage.getStoragePoolId().toString());
                struct.put(VdsProperties.DomainId, diskImage.getStorageIds().get(0).toString());
                struct.put(VdsProperties.ImageId, diskImage.getId().toString());
                struct.put(VdsProperties.VolumeId, diskImage.getImageId().toString());
                struct.put(VdsProperties.Format, diskImage.getVolumeFormat().toString().toLowerCase());
                struct.put(VdsProperties.PropagateErrors, disk.getPropagateErrors().toString().toLowerCase());
            } else {
                LunDisk lunDisk = (LunDisk) disk;
                struct.put(VdsProperties.Guid, lunDisk.getLun().getLUN_id());
                struct.put(VdsProperties.Format, VolumeFormat.RAW.toString().toLowerCase());
                struct.put(VdsProperties.PropagateErrors, PropagateErrors.Off.toString().toLowerCase());
            }
            addBootOrder(vmDevice, struct);
            struct.put(VdsProperties.Shareable, String.valueOf(disk.isShareable()));
            struct.put(VdsProperties.Optional, Boolean.FALSE.toString());
            struct.put(VdsProperties.ReadOnly, String.valueOf(vmDevice.getIsReadOnly()));
            struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams());
            struct.put(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
            devices.add(struct);
            addToManagedDevices(vmDevice);
        }
    }
}
#method_after
@Override
protected void buildVmDrives() {
    boolean bootDiskFound = false;
    List<Disk> disks = getSortedDisks();
    Map<VmDevice, Integer> vmDeviceUnitMap = getVmDeviceUnitMapForVirtioScsiDisks(vm);
    for (Disk disk : disks) {
        Map<String, Object> struct = new HashMap<String, Object>();
        // get vm device for this disk from DB
        VmDevice vmDevice = getVmDeviceByDiskId(disk.getId(), vm.getId());
        // skip unamanged devices (handled separtely)
        if (!vmDevice.getIsManaged()) {
            continue;
        }
        if (vmDevice.getIsPlugged()) {
            struct.put(VdsProperties.Type, vmDevice.getType().getValue());
            struct.put(VdsProperties.Device, vmDevice.getDevice());
            switch(disk.getDiskInterface()) {
                case IDE:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Ide);
                    break;
                case VirtIO:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Virtio);
                    break;
                case VirtIO_SCSI:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Scsi);
                    if (disk.getDiskStorageType() == DiskStorageType.LUN) {
                        struct.put(VdsProperties.Device, VmDeviceType.LUN.getName());
                        struct.put(VdsProperties.Sgio, disk.getSgio().toString().toLowerCase());
                    }
                    if (StringUtils.isEmpty(vmDevice.getAddress())) {
                        // Explicitly define device's address if missing
                        int unit = vmDeviceUnitMap.get(vmDevice);
                        vmDevice.setAddress(createAddressForVirtioScsiDisk(unit).toString());
                    }
                    break;
                default:
                    logUnsupportedInterfaceType();
                    break;
            }
            // Insure that boot disk is created first
            if (!bootDiskFound && disk.isBoot()) {
                bootDiskFound = true;
                struct.put(VdsProperties.Index, 0);
            }
            addAddress(vmDevice, struct);
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage diskImage = (DiskImage) disk;
                struct.put(VdsProperties.PoolId, diskImage.getStoragePoolId().toString());
                struct.put(VdsProperties.DomainId, diskImage.getStorageIds().get(0).toString());
                struct.put(VdsProperties.ImageId, diskImage.getId().toString());
                struct.put(VdsProperties.VolumeId, diskImage.getImageId().toString());
                struct.put(VdsProperties.Format, diskImage.getVolumeFormat().toString().toLowerCase());
                struct.put(VdsProperties.PropagateErrors, disk.getPropagateErrors().toString().toLowerCase());
            } else {
                LunDisk lunDisk = (LunDisk) disk;
                struct.put(VdsProperties.Guid, lunDisk.getLun().getLUN_id());
                struct.put(VdsProperties.Format, VolumeFormat.RAW.toString().toLowerCase());
                struct.put(VdsProperties.PropagateErrors, PropagateErrors.Off.toString().toLowerCase());
            }
            addBootOrder(vmDevice, struct);
            struct.put(VdsProperties.Shareable, (vmDevice.getSnapshotId() != null && FeatureSupported.hotPlugDiskSnapshot(vm.getVdsGroupCompatibilityVersion())) ? VdsProperties.Transient : String.valueOf(disk.isShareable()));
            struct.put(VdsProperties.Optional, Boolean.FALSE.toString());
            struct.put(VdsProperties.ReadOnly, String.valueOf(vmDevice.getIsReadOnly()));
            struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams());
            struct.put(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
            devices.add(struct);
            addToManagedDevices(vmDevice);
        }
    }
}
#end_block

#method_before
@Override
protected void buildUnmanagedDevices() {
    Map<String, String> customMap = (createInfo.containsKey(VdsProperties.Custom)) ? (Map<String, String>) createInfo.get(VdsProperties.Custom) : new HashMap<String, String>();
    List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getUnmanagedDevicesByVmId(vm.getId());
    if (vmDevices.size() > 0) {
        StringBuilder id = new StringBuilder();
        for (VmDevice vmDevice : vmDevices) {
            Map struct = new HashMap();
            id.append(VdsProperties.Device);
            id.append("_");
            id.append(vmDevice.getDeviceId());
            if (VmDeviceCommonUtils.isInWhiteList(vmDevice.getType(), vmDevice.getDevice())) {
                struct.put(VdsProperties.Type, vmDevice.getType().getValue());
                struct.put(VdsProperties.Device, vmDevice.getDevice());
                addAddress(vmDevice, struct);
                struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams());
                struct.put(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
                devices.add(struct);
            } else {
                customMap.put(id.toString(), vmDevice.toString());
            }
        }
    }
    createInfo.put(VdsProperties.Custom, customMap);
    Map[] devArray = new HashMap[devices.size()];
    createInfo.put(DEVICES, devices.toArray(devArray));
}
#method_after
@Override
protected void buildUnmanagedDevices() {
    Map<String, String> customMap = (createInfo.containsKey(VdsProperties.Custom)) ? (Map<String, String>) createInfo.get(VdsProperties.Custom) : new HashMap<String, String>();
    List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getUnmanagedDevicesByVmId(vm.getId());
    if (vmDevices.size() > 0) {
        StringBuilder id = new StringBuilder();
        for (VmDevice vmDevice : vmDevices) {
            Map struct = new HashMap();
            id.append(VdsProperties.Device);
            id.append("_");
            id.append(vmDevice.getDeviceId());
            if (VmDeviceCommonUtils.isInWhiteList(vmDevice.getType(), vmDevice.getDevice())) {
                struct.put(VdsProperties.Type, vmDevice.getType().getValue());
                struct.put(VdsProperties.Device, vmDevice.getDevice());
                addAddress(vmDevice, struct);
                struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams());
                struct.put(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
                devices.add(struct);
            } else {
                customMap.put(id.toString(), vmDevice.toString());
            }
        }
    }
    createInfo.put(VdsProperties.Custom, customMap);
    createInfo.put(DEVICES, devices);
}
#end_block

#method_before
@Override
protected void buildSysprepVmPayload(String sysPrepContent) {
    // We do not validate the size of the content being passed to the VM payload by VmPayload.isPayloadSizeLegal().
    // The sysprep file size isn't being verified for 3.0 clusters and below, so we maintain the same behavior here.
    VmPayload vmPayload = new VmPayload();
    vmPayload.setType(VmDeviceType.FLOPPY);
    vmPayload.getFiles().put(SYSPREP_FILE_NAME, Base64.encodeBase64String(sysPrepContent.getBytes()));
    VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null);
    Map<String, Object> struct = new HashMap<String, Object>();
    addFloppyDetails(vmDevice, struct);
    addDevice(struct, vmDevice, vm.getFloppyPath());
}
#method_after
@Override
protected void buildSysprepVmPayload(String sysPrepContent) {
    // We do not validate the size of the content being passed to the VM payload by VmPayload.isPayloadSizeLegal().
    // The sysprep file size isn't being verified for 3.0 clusters and below, so we maintain the same behavior here.
    VmPayload vmPayload = new VmPayload();
    vmPayload.setType(VmDeviceType.FLOPPY);
    vmPayload.getFiles().put(SYSPREP_FILE_NAME, Base64.encodeBase64String(sysPrepContent.getBytes()));
    VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null);
    Map<String, Object> struct = new HashMap<String, Object>();
    addFloppyDetails(vmDevice, struct);
    addDevice(struct, vmDevice, vm.getFloppyPath());
}
#end_block

#method_before
@Override
protected void buildCloudInitVmPayload(Map<String, byte[]> cloudInitContent) {
    VmPayload vmPayload = new VmPayload();
    vmPayload.setType(VmDeviceType.CDROM);
    vmPayload.setVolumeId(CLOUD_INIT_VOL_ID);
    for (Map.Entry<String, byte[]> entry : cloudInitContent.entrySet()) {
        vmPayload.getFiles().put(entry.getKey(), Base64.encodeBase64String(entry.getValue()));
    }
    VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null);
    Map<String, Object> struct = new HashMap<String, Object>();
    addCdDetails(vmDevice, struct);
    addDevice(struct, vmDevice, "");
}
#method_after
@Override
protected void buildCloudInitVmPayload(Map<String, byte[]> cloudInitContent) {
    VmPayload vmPayload = new VmPayload();
    vmPayload.setType(VmDeviceType.CDROM);
    vmPayload.setVolumeId(CLOUD_INIT_VOL_ID);
    for (Map.Entry<String, byte[]> entry : cloudInitContent.entrySet()) {
        vmPayload.getFiles().put(entry.getKey(), Base64.encodeBase64String(entry.getValue()));
    }
    VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null);
    Map<String, Object> struct = new HashMap<String, Object>();
    addCdDetails(vmDevice, struct);
    addDevice(struct, vmDevice, "");
}
#end_block

#method_before
public static void addProfileDataToNic(Map<String, Object> struct, VM vm, VmDevice vmDevice, VmNic nic) {
    VnicProfile vnicProfile = null;
    Network network = null;
    String networkName = "";
    if (nic.getVnicProfileId() != null) {
        vnicProfile = DbFacade.getInstance().getVnicProfileDao().get(nic.getVnicProfileId());
        if (vnicProfile != null) {
            network = DbFacade.getInstance().getNetworkDao().get(vnicProfile.getNetworkId());
            networkName = network.getName();
            log.debugFormat("VNIC {0} is using profile {1} on network {2}", nic.getName(), vnicProfile, networkName);
            addQosForDevice(struct, vnicProfile, vm.getVdsGroupCompatibilityVersion());
        }
    }
    struct.put(VdsProperties.NETWORK, networkName);
    if (vnicProfile != null && vnicProfile.isPortMirroring()) {
        struct.put(VdsProperties.PORT_MIRRORING, network == null ? Collections.<String>emptyList() : Collections.singletonList(networkName));
    }
    addCustomPropertiesForDevice(struct, vm, vmDevice, vm.getVdsGroupCompatibilityVersion(), getVnicCustomProperties(vnicProfile));
}
#method_after
public static void addProfileDataToNic(Map<String, Object> struct, VM vm, VmDevice vmDevice, VmNic nic) {
    VnicProfile vnicProfile = null;
    Network network = null;
    String networkName = "";
    List<VNIC_PROFILE_PROPERTIES> unsupportedFeatures = new ArrayList<>();
    if (nic.getVnicProfileId() != null) {
        vnicProfile = DbFacade.getInstance().getVnicProfileDao().get(nic.getVnicProfileId());
        if (vnicProfile != null) {
            network = DbFacade.getInstance().getNetworkDao().get(vnicProfile.getNetworkId());
            networkName = network.getName();
            log.debugFormat("VNIC {0} is using profile {1} on network {2}", nic.getName(), vnicProfile, networkName);
            if (!addQosForDevice(struct, vnicProfile, vm.getVdsGroupCompatibilityVersion())) {
                unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.NETWORK_QOS);
            }
        }
    }
    struct.put(VdsProperties.NETWORK, networkName);
    if (!addPortMirroringToVmInterface(struct, vnicProfile, vm.getVdsGroupCompatibilityVersion(), network)) {
        unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.PORT_MIRRORING);
    }
    if (!addCustomPropertiesForDevice(struct, vm, vmDevice, vm.getVdsGroupCompatibilityVersion(), getVnicCustomProperties(vnicProfile))) {
        unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.CUSTOM_PROPERTIES);
    }
    reportUnsupportedVnicProfileFeatures(vm, nic, vnicProfile, unsupportedFeatures);
}
#end_block

#method_before
private static void addQosForDevice(Map<String, Object> struct, VnicProfile vnicProfile, Version vdsGroupCompatibilityVersion) {
    if (FeatureSupported.networkQoS(vdsGroupCompatibilityVersion) && vnicProfile.getNetworkQosId() != null) {
        NetworkQoS networkQoS = DbFacade.getInstance().getQosDao().get(vnicProfile.getNetworkQosId());
        if (networkQoS != null) {
            Map<String, Object> specParams = (Map<String, Object>) struct.get(VdsProperties.SpecParams);
            if (specParams == null) {
                specParams = new HashMap<>();
                struct.put(VdsProperties.SpecParams, specParams);
            }
            addQosData(specParams, VdsProperties.QOS_INBOUND, networkQoS.getInboundAverage(), networkQoS.getInboundPeak(), networkQoS.getInboundBurst());
            addQosData(specParams, VdsProperties.QOS_OUTBOUND, networkQoS.getOutboundAverage(), networkQoS.getOutboundPeak(), networkQoS.getOutboundBurst());
        }
    }
}
#method_after
private static boolean addQosForDevice(Map<String, Object> struct, VnicProfile vnicProfile, Version vdsGroupCompatibilityVersion) {
    if (vnicProfile.getNetworkQosId() != null) {
        if (!FeatureSupported.networkQoS(vdsGroupCompatibilityVersion)) {
            return false;
        }
        NetworkQoS networkQoS = DbFacade.getInstance().getQosDao().get(vnicProfile.getNetworkQosId());
        if (networkQoS != null) {
            Map<String, Object> specParams = (Map<String, Object>) struct.get(VdsProperties.SpecParams);
            if (specParams == null) {
                specParams = new HashMap<>();
                struct.put(VdsProperties.SpecParams, specParams);
            }
            addQosData(specParams, VdsProperties.QOS_INBOUND, networkQoS.getInboundAverage(), networkQoS.getInboundPeak(), networkQoS.getInboundBurst());
            addQosData(specParams, VdsProperties.QOS_OUTBOUND, networkQoS.getOutboundAverage(), networkQoS.getOutboundPeak(), networkQoS.getOutboundBurst());
        }
    }
    return true;
}
#end_block

#method_before
public static void addCustomPropertiesForDevice(Map<String, Object> struct, VM vm, VmDevice vmDevice, Version clusterVersion, Map<String, String> customProperties) {
    if (FeatureSupported.deviceCustomProperties(clusterVersion)) {
        if (customProperties == null) {
            customProperties = new HashMap<>();
        }
        customProperties.putAll(vmDevice.getCustomProperties());
        Map<String, String> runtimeCustomProperties = vm.getRuntimeDeviceCustomProperties().get(vmDevice);
        if (runtimeCustomProperties != null) {
            customProperties.putAll(runtimeCustomProperties);
        }
        struct.put(VdsProperties.Custom, customProperties);
    }
}
#method_after
public static boolean addCustomPropertiesForDevice(Map<String, Object> struct, VM vm, VmDevice vmDevice, Version clusterVersion, Map<String, String> customProperties) {
    if (customProperties == null) {
        customProperties = new HashMap<>();
    }
    customProperties.putAll(vmDevice.getCustomProperties());
    Map<String, String> runtimeCustomProperties = vm.getRuntimeDeviceCustomProperties().get(vmDevice);
    if (runtimeCustomProperties != null) {
        customProperties.putAll(runtimeCustomProperties);
    }
    if (!customProperties.isEmpty()) {
        if (FeatureSupported.deviceCustomProperties(clusterVersion)) {
            struct.put(VdsProperties.Custom, customProperties);
        } else {
            return false;
        }
    }
    return true;
}
#end_block

#method_before
private static HashMap<String, Object> getNewMonitorSpecParams(DisplayType displayType, int numOfMonitors, boolean singleQxlPci) {
    HashMap<String, Object> specParams = new HashMap<String, Object>();
    specParams.put("vram", String.valueOf(VmDeviceCommonUtils.LOW_VIDEO_MEM));
    specParams.put("heads", numOfMonitors);
    specParams.put("vram", VmDeviceCommonUtils.singlePciVRamByHeads(numOfMonitors));
    if (displayType == DisplayType.qxl && singleQxlPci) {
        specParams.put("ram", VmDeviceCommonUtils.singlePciRamByHeads(numOfMonitors));
    }
    return specParams;
}
#method_after
private static HashMap<String, Object> getNewMonitorSpecParams(DisplayType displayType, int numOfMonitors, boolean singleQxlPci) {
    HashMap<String, Object> specParams = new HashMap<String, Object>();
    specParams.put("vram", String.valueOf(VmDeviceCommonUtils.LOW_VIDEO_MEM));
    specParams.put("heads", String.valueOf(numOfMonitors));
    specParams.put("vram", VmDeviceCommonUtils.singlePciVRamByHeads(numOfMonitors));
    if (displayType == DisplayType.qxl && singleQxlPci) {
        specParams.put("ram", VmDeviceCommonUtils.singlePciRamByHeads(numOfMonitors));
    }
    return specParams;
}
#end_block

#method_before
@Override
protected void buildVmMemoryBalloon() {
    if (vm.isRunOnce() && vm.isBalloonEnabled()) {
        Map<String, Object> specParams = new HashMap<String, Object>();
        specParams.put(VdsProperties.Model, VdsProperties.Virtio);
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.BALLOON, VmDeviceType.MEMBALLOON.getName(), "", 0, specParams, true, true, true, "", null);
        addMemBalloonDevice(vmDevice);
    } else {
        // get vm device for this Balloon from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.BALLOON, VmDeviceType.MEMBALLOON.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            addMemBalloonDevice(vmDevice);
            // only one memory balloon should exist
            break;
        }
    }
}
#method_after
@Override
protected void buildVmMemoryBalloon() {
    if (vm.isRunOnce() && vm.isBalloonEnabled()) {
        Map<String, Object> specParams = new HashMap<String, Object>();
        specParams.put(VdsProperties.Model, VdsProperties.Virtio);
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.BALLOON, VmDeviceType.MEMBALLOON.getName(), "", 0, specParams, true, true, true, "", null, null);
        addMemBalloonDevice(vmDevice);
    } else {
        // get vm device for this Balloon from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.BALLOON, VmDeviceType.MEMBALLOON.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            addMemBalloonDevice(vmDevice);
            // only one memory balloon should exist
            break;
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (disk == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST);
    }
    if (isOperationPerformedOnDiskSnapshot() && (!validate(getSnapshotsValidator().snapshotExists(getSnapshot())) || !validate(getSnapshotsValidator().snapshotTypeSupported(getSnapshot(), Collections.singletonList(SnapshotType.REGULAR))))) {
        return false;
    }
    boolean isImageDisk = disk.getDiskStorageType() == DiskStorageType.IMAGE;
    if (isImageDisk) {
        // TODO : this load and check of the active disk will be removed
        // after inspecting upgrade
        Disk activeDisk = loadActiveDisk(disk.getId());
        if (((DiskImage) activeDisk).getImageStatus() == ImageStatus.ILLEGAL) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_DISK_OPERATION);
        }
        if (((DiskImage) disk).getImageStatus() == ImageStatus.LOCKED) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED);
            addCanDoActionMessage(String.format("$%1$s %2$s", "diskAliases", disk.getDiskAlias()));
            return false;
        }
    }
    if (!isVmExist() || !isVmInUpPausedDownStatus()) {
        return false;
    }
    if (!canRunActionOnNonManagedVm()) {
        return false;
    }
    updateDisksFromDb();
    if (!isDiskCanBeAddedToVm(disk, getVm()) || !isDiskPassPciAndIdeLimit(disk)) {
        return false;
    }
    if (getVmDeviceDao().exists(new VmDeviceId(disk.getId(), getVmId()))) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_ALREADY_ATTACHED);
    }
    if (disk.isShareable() && !isVersionSupportedForShareable(disk, getStoragePoolDAO().get(getVm().getStoragePoolId()).getcompatibility_version().getValue())) {
        return failCanDoAction(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
    }
    if (!isOperationPerformedOnDiskSnapshot() && !disk.isShareable() && disk.getNumberOfVms() > 0) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NOT_SHAREABLE_DISK_ALREADY_ATTACHED);
    }
    if (isImageDisk && getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(((DiskImage) disk).getStorageIds().get(0), getVm().getStoragePoolId())) == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
    }
    if (isImageDisk) {
        StorageDomain storageDomain = getStorageDomainDAO().getForStoragePool(((DiskImage) disk).getStorageIds().get(0), ((DiskImage) disk).getStoragePoolId());
        StorageDomainValidator storageDomainValidator = new StorageDomainValidator(storageDomain);
        if (!validate(storageDomainValidator.isDomainExistAndActive())) {
            return false;
        }
    }
    DiskValidator diskValidator = getDiskValidator(disk);
    if (!validate(diskValidator.isVirtIoScsiValid(getVm()))) {
        return false;
    }
    if (!isVmNotInPreviewSnapshot()) {
        return false;
    }
    if (getParameters().isPlugUnPlug() && getVm().getStatus() != VMStatus.Down) {
        return isOsSupportingHotPlug() && isHotPlugSupported() && isInterfaceSupportedForPlugUnPlug(disk);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (disk == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST);
    }
    if (isOperationPerformedOnDiskSnapshot() && (!validate(getSnapshotsValidator().snapshotExists(getSnapshot())) || !validate(getSnapshotsValidator().snapshotTypeSupported(getSnapshot(), Collections.singletonList(SnapshotType.REGULAR))))) {
        return false;
    }
    boolean isImageDisk = disk.getDiskStorageType() == DiskStorageType.IMAGE;
    if (isImageDisk) {
        // TODO : this load and check of the active disk will be removed
        // after inspecting upgrade
        Disk activeDisk = loadActiveDisk(disk.getId());
        if (((DiskImage) activeDisk).getImageStatus() == ImageStatus.ILLEGAL) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_DISK_OPERATION);
        }
        if (((DiskImage) disk).getImageStatus() == ImageStatus.LOCKED) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED);
            addCanDoActionMessage(String.format("$%1$s %2$s", "diskAliases", disk.getDiskAlias()));
            return false;
        }
    }
    if (!isVmExist() || !isVmInUpPausedDownStatus()) {
        return false;
    }
    if (!canRunActionOnNonManagedVm()) {
        return false;
    }
    updateDisksFromDb();
    if (!isDiskCanBeAddedToVm(disk, getVm()) || !isDiskPassPciAndIdeLimit(disk)) {
        return false;
    }
    if (getVmDeviceDao().exists(new VmDeviceId(disk.getId(), getVmId()))) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_ALREADY_ATTACHED);
    }
    if (disk.isShareable() && !isVersionSupportedForShareable(disk, getStoragePoolDAO().get(getVm().getStoragePoolId()).getcompatibility_version().getValue())) {
        return failCanDoAction(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
    }
    if (!isOperationPerformedOnDiskSnapshot() && !disk.isShareable() && disk.getNumberOfVms() > 0) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NOT_SHAREABLE_DISK_ALREADY_ATTACHED);
    }
    if (isImageDisk && getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(((DiskImage) disk).getStorageIds().get(0), getVm().getStoragePoolId())) == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
    }
    if (isImageDisk) {
        StorageDomain storageDomain = getStorageDomainDAO().getForStoragePool(((DiskImage) disk).getStorageIds().get(0), ((DiskImage) disk).getStoragePoolId());
        StorageDomainValidator storageDomainValidator = new StorageDomainValidator(storageDomain);
        if (!validate(storageDomainValidator.isDomainExistAndActive())) {
            return false;
        }
    }
    DiskValidator diskValidator = getDiskValidator(disk);
    if (!validate(diskValidator.isVirtIoScsiValid(getVm()))) {
        return false;
    }
    if (!isVmNotInPreviewSnapshot()) {
        return false;
    }
    if (getParameters().isPlugUnPlug() && getVm().getStatus() != VMStatus.Down) {
        return canPerformDiskHotPlug(disk);
    }
    return true;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retValue = isVmExist();
    if (retValue) {
        retValue = canRunActionOnNonManagedVm();
    }
    if (retValue && getVm().getStatus() != VMStatus.Up && getVm().getStatus() != VMStatus.Down) {
        retValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL, LocalizedVmStatus.from(getVm().getStatus()));
    }
    if (retValue) {
        disk = loadDisk((Guid) getParameters().getEntityInfo().getId());
        retValue = isDiskExist(disk);
    }
    if (retValue) {
        vmDevice = getVmDeviceDao().get(new VmDeviceId(disk.getId(), getVmId()));
        if (vmDevice == null) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_ALREADY_DETACHED);
        }
        if (retValue && vmDevice.getSnapshotId() != null) {
            disk = loadDiskFromSnapshot(disk.getId(), vmDevice.getSnapshotId());
        }
    }
    if (vmDevice.getIsPlugged()) {
        if (retValue && Boolean.TRUE.equals(getParameters().isPlugUnPlug()) && getVm().getStatus() != VMStatus.Down) {
            retValue = isHotPlugSupported() && isOsSupportingHotPlug() && isInterfaceSupportedForPlugUnPlug(disk);
        }
        if (retValue && Boolean.FALSE.equals(getParameters().isPlugUnPlug()) && getVm().getStatus() != VMStatus.Down) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN);
            retValue = false;
        }
    }
    // Check if disk has no snapshots before detaching it.
    if (retValue && DiskStorageType.IMAGE == disk.getDiskStorageType()) {
        // therefore for attached disk snapshot it shouldn't be checked whether it has snapshots or not.
        if (vmDevice.getSnapshotId() == null && getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId()).size() > 1) {
            addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_DETACH_DISK_WITH_SNAPSHOT);
            retValue = false;
        }
    }
    return retValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retValue = isVmExist();
    if (retValue) {
        retValue = canRunActionOnNonManagedVm();
    }
    if (retValue && getVm().getStatus() != VMStatus.Up && getVm().getStatus() != VMStatus.Down) {
        retValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL, LocalizedVmStatus.from(getVm().getStatus()));
    }
    if (retValue) {
        disk = loadDisk((Guid) getParameters().getEntityInfo().getId());
        retValue = isDiskExist(disk);
    }
    if (retValue) {
        vmDevice = getVmDeviceDao().get(new VmDeviceId(disk.getId(), getVmId()));
        if (vmDevice == null) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_ALREADY_DETACHED);
        }
        if (retValue && vmDevice.getSnapshotId() != null) {
            disk = loadDiskFromSnapshot(disk.getId(), vmDevice.getSnapshotId());
        }
    }
    if (retValue && vmDevice.getIsPlugged() && getVm().getStatus() != VMStatus.Down) {
        retValue = canPerformDiskHotPlug(disk);
    }
    // Check if disk has no snapshots before detaching it.
    if (retValue && DiskStorageType.IMAGE == disk.getDiskStorageType()) {
        // therefore for attached disk snapshot it shouldn't be checked whether it has snapshots or not.
        if (vmDevice.getSnapshotId() == null && getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId()).size() > 1) {
            addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_DETACH_DISK_WITH_SNAPSHOT);
            retValue = false;
        }
    }
    return retValue;
}
#end_block

#method_before
protected boolean isVersionSupportedForShareable(Disk disk, String compVersion) {
    if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
        return Config.<Boolean>GetValue(ConfigValues.ShareableDiskEnabled, compVersion);
    }
    return true;
}
#method_after
protected boolean isVersionSupportedForShareable(Disk disk, String compVersion) {
    if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
        return Config.<Boolean>getValue(ConfigValues.ShareableDiskEnabled, compVersion);
    }
    return true;
}
#end_block

#method_before
public static boolean supportedInConfig(ConfigValues feature, Version version) {
    return Config.<Boolean>GetValue(feature, version.getValue());
}
#method_after
public static boolean supportedInConfig(ConfigValues feature, Version version) {
    return Config.<Boolean>getValue(feature, version.getValue());
}
#end_block

#method_before
@Test
public void canDoActionFailedVirtIODisk() throws Exception {
    mockVmStatusUp();
    mockSpiceSupportMatrix();
    when(osRepository.getOsName(0)).thenReturn("RHEL6");
    createNotVirtIODisk();
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED.toString()));
}
#method_after
@Test
public void canDoActionFailedVirtIODisk() throws Exception {
    mockVmStatusUp();
    when(osRepository.getOsName(0)).thenReturn("RHEL6");
    createNotVirtIODisk();
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED.toString()));
}
#end_block

#method_before
protected VM mockVmStatusUp() {
    VM vm = new VM();
    vm.setStatus(VMStatus.Up);
    vm.setVmOs(8);
    vm.setId(vmId);
    vm.setRunOnVds(Guid.newGuid());
    doReturn(vmDAO).when(command).getVmDAO();
    mockVMDAO(vm);
    return vm;
}
#method_after
protected VM mockVmStatusUp() {
    VM vm = new VM();
    vm.setStatus(VMStatus.Up);
    vm.setVmOs(8);
    vm.setId(vmId);
    vm.setVdsGroupCompatibilityVersion(Version.v3_1);
    vm.setRunOnVds(Guid.newGuid());
    doReturn(vmDAO).when(command).getVmDAO();
    mockVMDAO(vm);
    return vm;
}
#end_block

#method_before
private boolean checkCanPerformPlugUnPlugDisk() {
    if (getVm().getStatus().isUpOrPaused()) {
        setVdsId(getVm().getRunOnVds());
        if (!canPerformDiskHotPlug() || !isInterfaceSupportedForPlugUnPlug(disk)) {
            return false;
        }
    }
    if (getPlugAction() == VDSCommandType.HotPlugDisk && oldVmDevice.getIsPlugged()) {
        return failCanDoAction(VdcBllMessages.HOT_PLUG_DISK_IS_NOT_UNPLUGGED);
    }
    if (getPlugAction() == VDSCommandType.HotUnPlugDisk && !oldVmDevice.getIsPlugged()) {
        return failCanDoAction(VdcBllMessages.HOT_UNPLUG_DISK_IS_NOT_PLUGGED);
    }
    return true;
}
#method_after
private boolean checkCanPerformPlugUnPlugDisk() {
    if (getVm().getStatus().isUpOrPaused()) {
        setVdsId(getVm().getRunOnVds());
        if (!canPerformDiskHotPlug(disk)) {
            return false;
        }
    }
    if (getPlugAction() == VDSCommandType.HotPlugDisk && oldVmDevice.getIsPlugged()) {
        return failCanDoAction(VdcBllMessages.HOT_PLUG_DISK_IS_NOT_UNPLUGGED);
    }
    if (getPlugAction() == VDSCommandType.HotUnPlugDisk && !oldVmDevice.getIsPlugged()) {
        return failCanDoAction(VdcBllMessages.HOT_UNPLUG_DISK_IS_NOT_PLUGGED);
    }
    return true;
}
#end_block

#method_before
@Override
protected void executeVmCommand() {
    if (getVm().getStatus().isUpOrPaused()) {
        performPlugCommand(getPlugAction(), getDisk(), oldVmDevice);
    }
    // At this point disk is already plugged to or unplugged from VM (depends on the command),
    // so device's 'isPlugged' property should be updated accordingly in DB
    updateDeviceIsPluggedProperty();
    // device is already plugged to or unplugged from VM.
    if (disk.isBoot()) {
        updateBootOrder();
    }
    getVmStaticDAO().incrementDbGeneration(getVm().getId());
    setSucceeded(true);
}
#method_after
@Override
protected void executeVmCommand() {
    if (getVm().getStatus().isUpOrPaused()) {
        updateDisksFromDb();
        performPlugCommand(getPlugAction(), getDisk(), oldVmDevice);
    }
    // At this point disk is already plugged to or unplugged from VM (depends on the command),
    // so device's 'isPlugged' property should be updated accordingly in DB
    updateDeviceIsPluggedProperty();
    // device is already plugged to or unplugged from VM.
    if (disk.isBoot()) {
        updateBootOrder();
    }
    getVmStaticDAO().incrementDbGeneration(getVm().getId());
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Map<String, Pair<String, String>> exclusiveLock = new HashMap<>();
    exclusiveLock.put(getDisk().getId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED));
    if (getDisk().isBoot()) {
        exclusiveLock.put(getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DISK_BOOT, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    return exclusiveLock;
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Map<String, Pair<String, String>> exclusiveLock = null;
    if (getDisk() != null) {
        exclusiveLock = new HashMap<>();
        exclusiveLock.put(getDisk().getId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED.name() + String.format("$diskAliases %1$s", getDiskAlias())));
        if (getDisk().isBoot()) {
            exclusiveLock.put(getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DISK_BOOT, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
        }
    }
    return exclusiveLock;
}
#end_block

#method_before
@Override
public String getDiskAlias() {
    return disk.getDiskAlias();
}
#method_after
@Override
public String getDiskAlias() {
    return getDisk().getDiskAlias();
}
#end_block

#method_before
protected int getBlockSparseInitSizeInGb() {
    return Config.<Integer>GetValue(ConfigValues.InitStorageSparseSizeInGB).intValue();
}
#method_after
protected int getBlockSparseInitSizeInGb() {
    return Config.<Integer>getValue(ConfigValues.InitStorageSparseSizeInGB).intValue();
}
#end_block

#method_before
protected boolean isVmNameValidLength(VM vm) {
    // get VM name
    String vmName = vm.getName();
    // get the max VM name (configuration parameter)
    int maxVmNameLengthWindows = Config.<Integer>GetValue(ConfigValues.MaxVmNameLengthWindows);
    int maxVmNameLengthNonWindows = Config.<Integer>GetValue(ConfigValues.MaxVmNameLengthNonWindows);
    // names are allowed different lengths in Windows and non-Windows OSs,
    // consider this when setting the max length.
    int maxLength = osRepository.isWindows(vm.getVmOsId()) ? maxVmNameLengthWindows : maxVmNameLengthNonWindows;
    // check if name is longer than allowed name
    boolean nameLengthValid = (vmName.length() <= maxLength);
    // return result
    return nameLengthValid;
}
#method_after
protected boolean isVmNameValidLength(VM vm) {
    // get VM name
    String vmName = vm.getName();
    // get the max VM name (configuration parameter)
    int maxVmNameLengthWindows = Config.<Integer>getValue(ConfigValues.MaxVmNameLengthWindows);
    int maxVmNameLengthNonWindows = Config.<Integer>getValue(ConfigValues.MaxVmNameLengthNonWindows);
    // names are allowed different lengths in Windows and non-Windows OSs,
    // consider this when setting the max length.
    int maxLength = osRepository.isWindows(vm.getVmOsId()) ? maxVmNameLengthWindows : maxVmNameLengthNonWindows;
    // check if name is longer than allowed name
    boolean nameLengthValid = (vmName.length() <= maxLength);
    // return result
    return nameLengthValid;
}
#end_block

#method_before
protected boolean canPerformDiskHotPlug() {
    return isHotPlugSupported() && isOsSupportingHotPlug();
}
#method_after
protected boolean canPerformDiskHotPlug(Disk disk) {
    return isHotPlugSupported() && isDiskSupportedForPlugUnPlug(disk);
}
#end_block

#method_before
protected boolean canPerformNicHotPlug() {
    return osRepository.hasNicHotplugSupport(getVm().getOs(), getVm().getVdsGroupCompatibilityVersion());
}
#method_after
protected boolean canPerformNicHotPlug() {
    return isHotPlugSupported() && isNicSupportedForPlugUnPlug();
}
#end_block

#method_before
protected boolean isHotPlugSupported() {
    if (Config.<Boolean>GetValue(ConfigValues.HotPlugEnabled, getVds().getVdsGroupCompatibilityVersion().getValue())) {
        return true;
    }
    addCanDoActionMessage(VdcBllMessages.HOT_PLUG_IS_NOT_SUPPORTED);
    return false;
}
#method_after
protected boolean isHotPlugSupported() {
    if (FeatureSupported.hotPlug(getVm().getVdsGroupCompatibilityVersion())) {
        return true;
    }
    return failCanDoAction(VdcBllMessages.HOT_PLUG_IS_NOT_SUPPORTED);
}
#end_block

#method_before
protected boolean checkPayload(VmPayload payload, String isoPath) {
    boolean returnValue = true;
    if (payload.getType() != VmDeviceType.CDROM && payload.getType() != VmDeviceType.FLOPPY) {
        addCanDoActionMessage(VdcBllMessages.VMPAYLOAD_INVALID_PAYLOAD_TYPE);
        returnValue = false;
    } else {
        for (String content : payload.getFiles().values()) {
            // Check each file individually, no constraint on total size
            if (!VmPayload.isPayloadSizeLegal(content)) {
                Integer lengthInKb = 2 * Config.<Integer>GetValue(ConfigValues.PayloadSize) / Kb;
                addCanDoActionMessage(VdcBllMessages.VMPAYLOAD_SIZE_EXCEEDED);
                addCanDoActionMessage(String.format("$size %1$s", lengthInKb.toString()));
                returnValue = false;
                break;
            }
        }
    }
    return returnValue;
}
#method_after
protected boolean checkPayload(VmPayload payload, String isoPath) {
    boolean returnValue = true;
    if (payload.getType() != VmDeviceType.CDROM && payload.getType() != VmDeviceType.FLOPPY) {
        addCanDoActionMessage(VdcBllMessages.VMPAYLOAD_INVALID_PAYLOAD_TYPE);
        returnValue = false;
    } else {
        for (String content : payload.getFiles().values()) {
            // Check each file individually, no constraint on total size
            if (!VmPayload.isPayloadSizeLegal(content)) {
                Integer lengthInKb = 2 * Config.<Integer>getValue(ConfigValues.PayloadSize) / Kb;
                addCanDoActionMessage(VdcBllMessages.VMPAYLOAD_SIZE_EXCEEDED);
                addCanDoActionMessage(String.format("$size %1$s", lengthInKb.toString()));
                returnValue = false;
                break;
            }
        }
    }
    return returnValue;
}
#end_block

#method_before
@Override
public void init(final T model) {
    // Let the parent do its work
    super.init(model);
    // Listen to Properties
    model.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            NetworkModel model = (NetworkModel) sender;
            String propertyName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("Message".equals(propertyName)) {
                // $NON-NLS-1$
                getView().setMessageLabel(model.getMessage());
            }
        }
    });
    getView().toggleProfilesVisibility((Boolean) model.getIsVmNetwork().getEntity());
    model.getIsVmNetwork().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            getView().toggleProfilesVisibility((Boolean) model.getIsVmNetwork().getEntity());
        }
    });
    model.getDataCenters().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            StoragePool dc = model.getSelectedDc();
            getView().editProfiles(model.getProfiles(), dc.getcompatibility_version(), dc.getId(), model.getDefaultProfile());
        }
    });
}
#method_after
@Override
public void init(final T model) {
    // Let the parent do its work
    super.init(model);
    // Listen to Properties
    model.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            NetworkModel model = (NetworkModel) sender;
            String propertyName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("Message".equals(propertyName)) {
                // $NON-NLS-1$
                getView().setMessageLabel(model.getMessage());
            }
        }
    });
    getView().toggleProfilesVisibility((Boolean) model.getIsVmNetwork().getEntity());
    model.getIsVmNetwork().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            getView().toggleProfilesVisibility((Boolean) model.getIsVmNetwork().getEntity());
        }
    });
    model.getDataCenters().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            StoragePool dc = model.getSelectedDc();
            getView().updateDc(dc.getcompatibility_version(), dc.getId());
        }
    });
}
#end_block

#method_before
@Override
public void edit(NewNetworkModel object) {
    driver.edit(object);
}
#method_after
@Override
public void edit(NewNetworkModel object) {
    super.edit(object);
    driver.edit(object);
}
#end_block

#method_before
protected void localize(CommonApplicationConstants constants) {
    // Tabs
    highAvailabilityTab.setLabel(constants.highAvailVmPopup());
    resourceAllocationTab.setLabel(constants.resourceAllocVmPopup());
    bootOptionsTab.setLabel(constants.bootOptionsVmPopup());
    customPropertiesTab.setLabel(constants.customPropsVmPopup());
    systemTab.setLabel(constants.systemVmPopup());
    // General Tab
    generalTab.setLabel(constants.GeneralVmPopup());
    dataCenterWithClusterEditor.setLabel(constants.hostClusterVmPopup());
    quotaEditor.setLabel(constants.quotaVmPopup());
    nameLabel.setText(constants.nameVmPopup());
    descriptionEditor.setLabel(constants.descriptionVmPopup());
    commentEditor.setLabel(constants.commentLabel());
    templateEditor.setLabel(constants.basedOnTemplateVmPopup());
    oSTypeEditor.setLabel(constants.osVmPopup());
    vmTypeEditor.setLabel(constants.optimizedFor());
    isStatelessEditor.setLabel(constants.statelessVmPopup());
    isRunAndPauseEditor.setLabel(constants.runAndPauseVmPopup());
    isDeleteProtectedEditor.setLabel(constants.deleteProtectionPopup());
    isConsoleDeviceEnabledEditor.setLabel(constants.consoleDeviceEnabled());
    copyTemplatePermissionsEditor.setLabel(constants.copyTemplatePermissions());
    isSmartcardEnabledEditor.setLabel(constants.smartcardVmPopup());
    isMemoryBalloonDeviceEnabled.setLabel(constants.memoryBalloonDeviceEnabled());
    isVirtioScsiEnabled.setLabel(constants.isVirtioScsiEnabled());
    // Pools Tab
    poolTab.setLabel(constants.poolVmPopup());
    poolTypeEditor.setLabel(constants.poolTypeVmPopup());
    editPrestartedVmsLabel.setText(constants.prestartedVms());
    prestartedLabel.setText(constants.prestartedPoolPopup());
    numOfVmsEditor.setLabel(constants.numOfVmsPoolPopup());
    maxAssignedVmsPerUserEditor.setLabel(constants.maxAssignedVmsPerUser());
    editMaxAssignedVmsPerUserEditor.setLabel(constants.maxAssignedVmsPerUser());
    // initial run Tab
    initialRunTab.setLabel(constants.initialRunVmPopup());
    domainEditor.setLabel(constants.domainVmPopup());
    timeZoneEditor.setLabel(constants.tzVmPopup());
    // Console Tab
    consoleTab.setLabel(constants.consoleVmPopup());
    displayProtocolEditor.setLabel(constants.protocolVmPopup());
    vncKeyboardLayoutEditor.setLabel(constants.vncKeyboardLayoutVmPopup());
    usbSupportEditor.setLabel(constants.usbPolicyVmPopup());
    numOfMonitorsEditor.setLabel(constants.monitorsVmPopup());
    allowConsoleReconnectEditor.setLabel(constants.allowConsoleReconnect());
    // Host Tab
    hostTab.setLabel(constants.hostVmPopup());
    isAutoAssignEditor.setLabel(constants.anyHostInClusterVmPopup());
    // specificHostEditor.setLabel("Specific");
    hostCpuEditor.setLabel(constants.useHostCpu());
    cpuPinning.setLabel(constants.cpuPinningLabel());
    // High Availability Tab
    isHighlyAvailableEditor.setLabel(constants.highlyAvailableVmPopup());
    // watchdog
    watchdogActionEditor.setLabel(constants.watchdogAction());
    watchdogModelEditor.setLabel(constants.watchdogModel());
    // Resource Allocation Tab
    provisioningEditor.setLabel(constants.templateProvisVmPopup());
    provisioningThinEditor.setLabel(constants.thinVmPopup());
    provisioningCloneEditor.setLabel(constants.cloneVmPopup());
    minAllocatedMemoryEditor.setLabel(constants.physMemGuarVmPopup());
    // Boot Options
    firstBootDeviceEditor.setLabel(constants.firstDeviceVmPopup());
    secondBootDeviceEditor.setLabel(constants.secondDeviceVmPopup());
    kernel_pathEditor.setLabel(constants.kernelPathVmPopup());
    initrd_pathEditor.setLabel(constants.initrdPathVmPopup());
    kernel_parametersEditor.setLabel(constants.kernelParamsVmPopup());
    // System tab
    memSizeEditor.setLabel(constants.memSizeVmPopup());
    totalvCPUsEditor.setLabel(constants.numOfVCPUs());
    corePerSocketEditor.setLabel(constants.coresPerSocket());
    numOfSocketsEditor.setLabel(constants.numOfSockets());
    isSoundcardEnabledEditor.setLabel(constants.soundcardEnabled());
    isSingleQxlEnabledEditor.setLabel(constants.singleQxlEnabled());
}
#method_after
protected void localize(CommonApplicationConstants constants) {
    // Tabs
    highAvailabilityTab.setLabel(constants.highAvailVmPopup());
    resourceAllocationTab.setLabel(constants.resourceAllocVmPopup());
    bootOptionsTab.setLabel(constants.bootOptionsVmPopup());
    customPropertiesTab.setLabel(constants.customPropsVmPopup());
    systemTab.setLabel(constants.systemVmPopup());
    // General Tab
    generalTab.setLabel(constants.GeneralVmPopup());
    dataCenterWithClusterEditor.setLabel(constants.hostClusterVmPopup());
    quotaEditor.setLabel(constants.quotaVmPopup());
    nameLabel.setText(constants.nameVmPopup());
    descriptionEditor.setLabel(constants.descriptionVmPopup());
    commentEditor.setLabel(constants.commentLabel());
    templateEditor.setLabel(constants.basedOnTemplateVmPopup());
    oSTypeEditor.setLabel(constants.osVmPopup());
    vmTypeEditor.setLabel(constants.optimizedFor());
    isStatelessEditor.setLabel(constants.statelessVmPopup());
    isRunAndPauseEditor.setLabel(constants.runAndPauseVmPopup());
    isDeleteProtectedEditor.setLabel(constants.deleteProtectionPopup());
    isConsoleDeviceEnabledEditor.setLabel(constants.consoleDeviceEnabled());
    copyTemplatePermissionsEditor.setLabel(constants.copyTemplatePermissions());
    isSmartcardEnabledEditor.setLabel(constants.smartcardVmPopup());
    isMemoryBalloonDeviceEnabled.setLabel(constants.memoryBalloonDeviceEnabled());
    isVirtioScsiEnabled.setLabel(constants.isVirtioScsiEnabled());
    // Pools Tab
    poolTab.setLabel(constants.poolVmPopup());
    poolTypeEditor.setLabel(constants.poolTypeVmPopup());
    editPrestartedVmsLabel.setText(constants.prestartedVms());
    prestartedLabel.setText(constants.prestartedPoolPopup());
    numOfVmsEditor.setLabel(constants.numOfVmsPoolPopup());
    maxAssignedVmsPerUserEditor.setLabel(constants.maxAssignedVmsPerUser());
    editMaxAssignedVmsPerUserEditor.setLabel(constants.maxAssignedVmsPerUser());
    // initial run Tab
    initialRunTab.setLabel(constants.initialRunVmPopup());
    domainEditor.setLabel(constants.domainVmPopup());
    timeZoneEditor.setLabel(constants.tzVmPopup());
    // Console Tab
    consoleTab.setLabel(constants.consoleVmPopup());
    displayProtocolEditor.setLabel(constants.protocolVmPopup());
    vncKeyboardLayoutEditor.setLabel(constants.vncKeyboardLayoutVmPopup());
    usbSupportEditor.setLabel(constants.usbPolicyVmPopup());
    numOfMonitorsEditor.setLabel(constants.monitorsVmPopup());
    allowConsoleReconnectEditor.setLabel(constants.allowConsoleReconnect());
    isSoundcardEnabledEditor.setLabel(constants.soundcardEnabled());
    isSingleQxlEnabledEditor.setLabel(constants.singleQxlEnabled());
    ssoMethodNone.setLabel(constants.none());
    ssoMethodGuestAgent.setLabel(constants.guestAgent());
    // Host Tab
    hostTab.setLabel(constants.hostVmPopup());
    isAutoAssignEditor.setLabel(constants.anyHostInClusterVmPopup());
    // specificHostEditor.setLabel("Specific");
    hostCpuEditor.setLabel(constants.useHostCpu());
    cpuPinning.setLabel(constants.cpuPinningLabel());
    // High Availability Tab
    isHighlyAvailableEditor.setLabel(constants.highlyAvailableVmPopup());
    // watchdog
    watchdogActionEditor.setLabel(constants.watchdogAction());
    watchdogModelEditor.setLabel(constants.watchdogModel());
    // Resource Allocation Tab
    provisioningEditor.setLabel(constants.templateProvisVmPopup());
    provisioningThinEditor.setLabel(constants.thinVmPopup());
    provisioningCloneEditor.setLabel(constants.cloneVmPopup());
    minAllocatedMemoryEditor.setLabel(constants.physMemGuarVmPopup());
    // Boot Options
    firstBootDeviceEditor.setLabel(constants.firstDeviceVmPopup());
    secondBootDeviceEditor.setLabel(constants.secondDeviceVmPopup());
    kernel_pathEditor.setLabel(constants.kernelPathVmPopup());
    initrd_pathEditor.setLabel(constants.initrdPathVmPopup());
    kernel_parametersEditor.setLabel(constants.kernelParamsVmPopup());
    // System tab
    memSizeEditor.setLabel(constants.memSizeVmPopup());
    totalvCPUsEditor.setLabel(constants.numOfVCPUs());
    corePerSocketEditor.setLabel(constants.coresPerSocket());
    numOfSocketsEditor.setLabel(constants.numOfSockets());
}
#end_block

#method_before
protected void initListeners(final UnitVmModel object) {
    // TODO should be handled by the core framework
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsHostAvailable".equals(propName)) {
                // $NON-NLS-1$
                setupHostTabAvailability(object);
            } else if ("IsHostTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (object.getIsHostTabValid()) {
                    hostTab.markAsValid();
                } else {
                    hostTab.markAsInvalid(null);
                }
            } else if ("IsCustomPropertiesTabAvailable".equals(propName)) {
                // $NON-NLS-1$
                setupCustomPropertiesAvailability(object);
            } else if ("IsDisksAvailable".equals(propName)) {
                // $NON-NLS-1$
                addDiskAllocation(object);
            }
        }
    });
    object.getIsAutoAssign().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isAutoAssign = object.getIsAutoAssign().getEntity();
            defaultHostEditor.setEnabled(!isAutoAssign);
            // only this is not bind to the model, so needs to listen to the change explicitly
            specificHost.setValue(!isAutoAssign);
        }
    });
    // only for non local storage available
    setupHostTabAvailability(object);
    object.getProvisioning().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isProvisioningChangable = object.getProvisioning().getIsChangable();
            provisioningThinEditor.setEnabled(isProvisioningChangable);
            provisioningCloneEditor.setEnabled(isProvisioningChangable);
            boolean isProvisioningAvailable = object.getProvisioning().getIsAvailable();
            changeApplicationLevelVisibility(provisionSelectionPanel, isProvisioningAvailable);
            boolean isDisksAvailable = object.getIsDisksAvailable();
            changeApplicationLevelVisibility(disksAllocationPanel, isDisksAvailable);
            changeApplicationLevelVisibility(storageAllocationPanel, isProvisioningAvailable || isDisksAvailable || object.getIsVirtioScsiEnabled().getIsAvailable());
        }
    });
    object.getIsVirtioScsiEnabled().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            PropertyChangedEventArgs e = (PropertyChangedEventArgs) args;
            if (e.PropertyName == "IsAvailable") {
                // $NON-NLS-1$
                isVirtioScsiEnabledInfoIcon.setVisible(object.getIsVirtioScsiEnabled().getIsAvailable());
            }
        }
    });
    object.getUsbPolicy().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            PropertyChangedEventArgs e = (PropertyChangedEventArgs) args;
            if (e.PropertyName == "SelectedItem") {
                // $NON-NLS-1$
                updateUsbNativeMessageVisibility(object);
            }
        }
    });
    updateUsbNativeMessageVisibility(object);
    object.getEditingEnabled().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            Boolean enabled = object.getEditingEnabled().getEntity();
            if (Boolean.FALSE.equals(enabled)) {
                disableAllTabs();
                generalWarningMessage.setText(constants.notAvailableWithNoUpDC());
            }
        }
    });
    object.getCpuSharesAmountSelection().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if ("IsAvailable".equals(((PropertyChangedEventArgs) args).PropertyName)) {
                // $NON-NLS-1$
                changeApplicationLevelVisibility(cpuSharesEditor, object.getCpuSharesAmountSelection().getIsAvailable());
            }
        }
    });
}
#method_after
protected void initListeners(final UnitVmModel object) {
    // TODO should be handled by the core framework
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsHostTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (object.getIsHostTabValid()) {
                    hostTab.markAsValid();
                } else {
                    hostTab.markAsInvalid(null);
                }
            } else if ("IsCustomPropertiesTabAvailable".equals(propName)) {
                // $NON-NLS-1$
                setupCustomPropertiesAvailability(object);
            } else if ("IsDisksAvailable".equals(propName)) {
                // $NON-NLS-1$
                addDiskAllocation(object);
            }
        }
    });
    object.getIsAutoAssign().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isAutoAssign = object.getIsAutoAssign().getEntity();
            defaultHostEditor.setEnabled(!isAutoAssign);
            // only this is not bind to the model, so needs to listen to the change explicitly
            specificHost.setValue(!isAutoAssign);
        }
    });
    object.getProvisioning().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isProvisioningChangable = object.getProvisioning().getIsChangable();
            provisioningThinEditor.setEnabled(isProvisioningChangable);
            provisioningCloneEditor.setEnabled(isProvisioningChangable);
            boolean isProvisioningAvailable = object.getProvisioning().getIsAvailable();
            changeApplicationLevelVisibility(provisionSelectionPanel, isProvisioningAvailable);
            boolean isDisksAvailable = object.getIsDisksAvailable();
            changeApplicationLevelVisibility(disksAllocationPanel, isDisksAvailable);
            changeApplicationLevelVisibility(storageAllocationPanel, isProvisioningAvailable || isDisksAvailable || object.getIsVirtioScsiEnabled().getIsAvailable());
        }
    });
    object.getIsVirtioScsiEnabled().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            PropertyChangedEventArgs e = (PropertyChangedEventArgs) args;
            if (e.PropertyName == "IsAvailable") {
                // $NON-NLS-1$
                isVirtioScsiEnabledInfoIcon.setVisible(object.getIsVirtioScsiEnabled().getIsAvailable());
            }
        }
    });
    object.getUsbPolicy().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            PropertyChangedEventArgs e = (PropertyChangedEventArgs) args;
            if (e.PropertyName == "SelectedItem") {
                // $NON-NLS-1$
                updateUsbNativeMessageVisibility(object);
            }
        }
    });
    updateUsbNativeMessageVisibility(object);
    object.getEditingEnabled().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            Boolean enabled = object.getEditingEnabled().getEntity();
            if (Boolean.FALSE.equals(enabled)) {
                disableAllTabs();
                generalWarningMessage.setText(constants.notAvailableWithNoUpDC());
            }
        }
    });
    object.getCpuSharesAmountSelection().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if ("IsAvailable".equals(((PropertyChangedEventArgs) args).PropertyName)) {
                // $NON-NLS-1$
                changeApplicationLevelVisibility(cpuSharesEditor, object.getCpuSharesAmountSelection().getIsAvailable());
            }
        }
    });
}
#end_block

#method_before
private void initTabAvailabilityListeners(final UnitVmModel vm) {
    // TODO should be handled by the core framework
    vm.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsWindowsOS".equals(propName)) {
                // $NON-NLS-1$
                domainEditor.setEnabled(vm.getIsWindowsOS());
            } else if ("IsGeneralTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsGeneralTabValid()) {
                    generalTab.markAsValid();
                } else {
                    generalTab.markAsInvalid(null);
                }
            } else if ("IsDisplayTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsDisplayTabValid()) {
                    consoleTab.markAsValid();
                } else {
                    consoleTab.markAsInvalid(null);
                }
            } else if ("IsAllocationTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsAllocationTabValid()) {
                    resourceAllocationTab.markAsValid();
                } else {
                    resourceAllocationTab.markAsInvalid(null);
                }
            } else if ("IsHighlyAvailable".equals(propName)) {
                // $NON-NLS-1$
                changeApplicationLevelVisibility(highAvailabilityTab, vm.getIsHighlyAvailable().getEntity());
            } else if ("IsBootSequenceTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsHighlyAvailable().getEntity()) {
                    bootOptionsTab.markAsValid();
                } else {
                    bootOptionsTab.markAsInvalid(null);
                }
            } else if ("IsCustomPropertiesTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsCustomPropertiesTabValid()) {
                    customPropertiesTab.markAsValid();
                } else {
                    customPropertiesTab.markAsInvalid(null);
                }
            } else if ("IsDisksAvailable".equals(propName)) {
                // $NON-NLS-1$
                boolean isDisksAvailable = vm.getIsDisksAvailable();
                changeApplicationLevelVisibility(disksAllocationPanel, isDisksAvailable);
                boolean isProvisioningAvailable = vm.getProvisioning().getIsAvailable();
                changeApplicationLevelVisibility(storageAllocationPanel, isProvisioningAvailable || isDisksAvailable || vm.getIsVirtioScsiEnabled().getIsAvailable());
                if (isDisksAvailable) {
                    // Update warning message by disks status
                    updateDisksWarningByImageStatus(vm.getDisks(), ImageStatus.ILLEGAL);
                    updateDisksWarningByImageStatus(vm.getDisks(), ImageStatus.LOCKED);
                } else {
                    // Clear warning message
                    // $NON-NLS-1$
                    generalWarningMessage.setText("");
                }
            }
        }
    });
    // TODO: Move to a more appropriate method
    vm.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsLinuxOS".equals(propName)) {
                // $NON-NLS-1$
                changeApplicationLevelVisibility(linuxBootOptionsPanel, vm.getIsLinuxOS());
            }
        }
    });
    defaultHostEditor.setEnabled(false);
    specificHost.addValueChangeHandler(new ValueChangeHandler<Boolean>() {

        @Override
        public void onValueChange(ValueChangeEvent<Boolean> event) {
            defaultHostEditor.setEnabled(specificHost.getValue());
            ValueChangeEvent.fire(isAutoAssignEditor.asRadioButton(), false);
        }
    });
    // TODO: This is a hack and should be handled cleanly via model property availability
    isAutoAssignEditor.addDomHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            defaultHostEditor.setEnabled(false);
        }
    }, ClickEvent.getType());
    vm.getIsAutoAssign().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!isAutoAssignEditor.asRadioButton().getValue())
                specificHost.setValue(true, true);
        }
    });
}
#method_after
private void initTabAvailabilityListeners(final UnitVmModel vm) {
    // TODO should be handled by the core framework
    vm.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsWindowsOS".equals(propName)) {
                // $NON-NLS-1$
                domainEditor.setEnabled(vm.getIsWindowsOS());
            } else if ("IsGeneralTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsGeneralTabValid()) {
                    generalTab.markAsValid();
                } else {
                    generalTab.markAsInvalid(null);
                }
            } else if ("IsDisplayTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsDisplayTabValid()) {
                    consoleTab.markAsValid();
                } else {
                    consoleTab.markAsInvalid(null);
                }
            } else if ("IsAllocationTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsAllocationTabValid()) {
                    resourceAllocationTab.markAsValid();
                } else {
                    resourceAllocationTab.markAsInvalid(null);
                }
            } else if ("IsHighlyAvailable".equals(propName)) {
                // $NON-NLS-1$
                changeApplicationLevelVisibility(highAvailabilityTab, vm.getIsHighlyAvailable().getEntity());
            } else if ("IsBootSequenceTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsHighlyAvailable().getEntity()) {
                    bootOptionsTab.markAsValid();
                } else {
                    bootOptionsTab.markAsInvalid(null);
                }
            } else if ("IsCustomPropertiesTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsCustomPropertiesTabValid()) {
                    customPropertiesTab.markAsValid();
                } else {
                    customPropertiesTab.markAsInvalid(null);
                }
            } else if ("IsDisksAvailable".equals(propName)) {
                // $NON-NLS-1$
                boolean isDisksAvailable = vm.getIsDisksAvailable();
                changeApplicationLevelVisibility(disksAllocationPanel, isDisksAvailable);
                boolean isProvisioningAvailable = vm.getProvisioning().getIsAvailable();
                changeApplicationLevelVisibility(storageAllocationPanel, isProvisioningAvailable || isDisksAvailable || vm.getIsVirtioScsiEnabled().getIsAvailable());
                if (isDisksAvailable) {
                    // Update warning message by disks status
                    updateDisksWarningByImageStatus(vm.getDisks(), ImageStatus.ILLEGAL);
                    updateDisksWarningByImageStatus(vm.getDisks(), ImageStatus.LOCKED);
                } else {
                    // Clear warning message
                    // $NON-NLS-1$
                    generalWarningMessage.setText("");
                }
            }
        }
    });
    // TODO: Move to a more appropriate method
    vm.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsLinuxOS".equals(propName)) {
                // $NON-NLS-1$
                changeApplicationLevelVisibility(linuxBootOptionsPanel, vm.getIsLinuxOS());
            }
        }
    });
    defaultHostEditor.setEnabled(false);
    specificHost.addValueChangeHandler(new ValueChangeHandler<Boolean>() {

        @Override
        public void onValueChange(ValueChangeEvent<Boolean> event) {
            defaultHostEditor.setEnabled(specificHost.getValue());
            ValueChangeEvent.fire(isAutoAssignEditor.asRadioButton(), false);
        }
    });
    // TODO: This is a hack and should be handled cleanly via model property availability
    isAutoAssignEditor.addDomHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            defaultHostEditor.setEnabled(false);
        }
    }, ClickEvent.getType());
    vm.getIsAutoAssign().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!isAutoAssignEditor.asRadioButton().getValue())
                specificHost.setValue(true, true);
        }
    });
    ssoMethodGuestAgent.asRadioButton().addValueChangeHandler(new ValueChangeHandler<Boolean>() {

        @Override
        public void onValueChange(ValueChangeEvent<Boolean> event) {
            if (Boolean.TRUE.equals(event.getValue())) {
                ValueChangeEvent.fire(ssoMethodNone.asRadioButton(), false);
            }
        }
    });
    ssoMethodNone.asRadioButton().addValueChangeHandler(new ValueChangeHandler<Boolean>() {

        @Override
        public void onValueChange(ValueChangeEvent<Boolean> event) {
            if (Boolean.TRUE.equals(event.getValue())) {
                ValueChangeEvent.fire(ssoMethodGuestAgent.asRadioButton(), false);
            }
        }
    });
}
#end_block

#method_before
@Override
public int setTabIndexes(int nextTabIndex) {
    // ==General Tab==
    nextTabIndex = generalTab.setTabIndexes(nextTabIndex);
    quotaEditor.setTabIndex(nextTabIndex++);
    oSTypeEditor.setTabIndex(nextTabIndex++);
    templateEditor.setTabIndex(nextTabIndex++);
    nameEditor.setTabIndex(nextTabIndex++);
    descriptionEditor.setTabIndex(nextTabIndex++);
    commentEditor.setTabIndex(nextTabIndex++);
    isStatelessEditor.setTabIndex(nextTabIndex++);
    isRunAndPauseEditor.setTabIndex(nextTabIndex++);
    isDeleteProtectedEditor.setTabIndex(nextTabIndex++);
    copyTemplatePermissionsEditor.setTabIndex(nextTabIndex++);
    numOfVmsEditor.setTabIndex(nextTabIndex++);
    prestartedVmsEditor.setTabIndex(nextTabIndex++);
    editPrestartedVmsEditor.setTabIndex(nextTabIndex++);
    incraseNumOfVmsEditor.setTabIndex(nextTabIndex++);
    maxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    editMaxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    // ==System Tab==
    nextTabIndex = systemTab.setTabIndexes(nextTabIndex);
    memSizeEditor.setTabIndex(nextTabIndex++);
    totalvCPUsEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = vcpusAdvancedParameterExpander.setTabIndexes(nextTabIndex);
    corePerSocketEditor.setTabIndex(nextTabIndex++);
    numOfSocketsEditor.setTabIndex(nextTabIndex++);
    // == Pools ==
    nextTabIndex = poolTab.setTabIndexes(nextTabIndex);
    poolTypeEditor.setTabIndex(nextTabIndex++);
    // ==Initial run Tab==
    nextTabIndex = initialRunTab.setTabIndexes(nextTabIndex);
    timeZoneEditor.setTabIndex(nextTabIndex++);
    domainEditor.setTabIndex(nextTabIndex++);
    // ==Console Tab==
    nextTabIndex = consoleTab.setTabIndexes(nextTabIndex);
    displayProtocolEditor.setTabIndex(nextTabIndex++);
    vncKeyboardLayoutEditor.setTabIndex(nextTabIndex++);
    usbSupportEditor.setTabIndex(nextTabIndex++);
    isSingleQxlEnabledEditor.setTabIndex(nextTabIndex++);
    numOfMonitorsEditor.setTabIndex(nextTabIndex++);
    isSmartcardEnabledEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = expander.setTabIndexes(nextTabIndex);
    allowConsoleReconnectEditor.setTabIndex(nextTabIndex++);
    isSoundcardEnabledEditor.setTabIndex(nextTabIndex++);
    isConsoleDeviceEnabledEditor.setTabIndex(nextTabIndex++);
    // ==Host Tab==
    nextTabIndex = hostTab.setTabIndexes(nextTabIndex);
    isAutoAssignEditor.setTabIndex(nextTabIndex++);
    specificHost.setTabIndex(nextTabIndex++);
    defaultHostEditor.setTabIndex(nextTabIndex++);
    migrationModeEditor.setTabIndex(nextTabIndex++);
    hostCpuEditor.setTabIndex(nextTabIndex++);
    // ==High Availability Tab==
    nextTabIndex = highAvailabilityTab.setTabIndexes(nextTabIndex);
    isHighlyAvailableEditor.setTabIndex(nextTabIndex++);
    priorityEditor.setTabIndex(nextTabIndex++);
    watchdogModelEditor.setTabIndex(nextTabIndex++);
    watchdogActionEditor.setTabIndex(nextTabIndex++);
    // ==Resource Allocation Tab==
    nextTabIndex = resourceAllocationTab.setTabIndexes(nextTabIndex);
    minAllocatedMemoryEditor.setTabIndex(nextTabIndex++);
    provisioningEditor.setTabIndex(nextTabIndex++);
    provisioningThinEditor.setTabIndex(nextTabIndex++);
    provisioningCloneEditor.setTabIndex(nextTabIndex++);
    cpuPinning.setTabIndex(nextTabIndex++);
    cpuSharesAmountEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = disksAllocationView.setTabIndexes(nextTabIndex);
    // ==Boot Options Tab==
    nextTabIndex = bootOptionsTab.setTabIndexes(nextTabIndex);
    firstBootDeviceEditor.setTabIndex(nextTabIndex++);
    secondBootDeviceEditor.setTabIndex(nextTabIndex++);
    cdAttachedEditor.setTabIndex(nextTabIndex++);
    cdImageEditor.setTabIndex(nextTabIndex++);
    kernel_pathEditor.setTabIndex(nextTabIndex++);
    initrd_pathEditor.setTabIndex(nextTabIndex++);
    kernel_parametersEditor.setTabIndex(nextTabIndex++);
    // ==Custom Properties Tab==
    nextTabIndex = customPropertiesTab.setTabIndexes(nextTabIndex);
    return nextTabIndex;
}
#method_after
@Override
public int setTabIndexes(int nextTabIndex) {
    // ==General Tab==
    nextTabIndex = generalTab.setTabIndexes(nextTabIndex);
    quotaEditor.setTabIndex(nextTabIndex++);
    oSTypeEditor.setTabIndex(nextTabIndex++);
    templateEditor.setTabIndex(nextTabIndex++);
    nameEditor.setTabIndex(nextTabIndex++);
    descriptionEditor.setTabIndex(nextTabIndex++);
    commentEditor.setTabIndex(nextTabIndex++);
    isStatelessEditor.setTabIndex(nextTabIndex++);
    isRunAndPauseEditor.setTabIndex(nextTabIndex++);
    isDeleteProtectedEditor.setTabIndex(nextTabIndex++);
    copyTemplatePermissionsEditor.setTabIndex(nextTabIndex++);
    numOfVmsEditor.setTabIndex(nextTabIndex++);
    prestartedVmsEditor.setTabIndex(nextTabIndex++);
    editPrestartedVmsEditor.setTabIndex(nextTabIndex++);
    incraseNumOfVmsEditor.setTabIndex(nextTabIndex++);
    maxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    editMaxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    // ==System Tab==
    nextTabIndex = systemTab.setTabIndexes(nextTabIndex);
    memSizeEditor.setTabIndex(nextTabIndex++);
    totalvCPUsEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = vcpusAdvancedParameterExpander.setTabIndexes(nextTabIndex);
    corePerSocketEditor.setTabIndex(nextTabIndex++);
    numOfSocketsEditor.setTabIndex(nextTabIndex++);
    // == Pools ==
    nextTabIndex = poolTab.setTabIndexes(nextTabIndex);
    poolTypeEditor.setTabIndex(nextTabIndex++);
    // ==Initial run Tab==
    nextTabIndex = initialRunTab.setTabIndexes(nextTabIndex);
    timeZoneEditor.setTabIndex(nextTabIndex++);
    domainEditor.setTabIndex(nextTabIndex++);
    // ==Console Tab==
    nextTabIndex = consoleTab.setTabIndexes(nextTabIndex);
    displayProtocolEditor.setTabIndex(nextTabIndex++);
    vncKeyboardLayoutEditor.setTabIndex(nextTabIndex++);
    usbSupportEditor.setTabIndex(nextTabIndex++);
    isSingleQxlEnabledEditor.setTabIndex(nextTabIndex++);
    numOfMonitorsEditor.setTabIndex(nextTabIndex++);
    isSmartcardEnabledEditor.setTabIndex(nextTabIndex++);
    ssoMethodNone.setTabIndex(nextTabIndex++);
    ssoMethodGuestAgent.setTabIndex(nextTabIndex++);
    nextTabIndex = expander.setTabIndexes(nextTabIndex);
    allowConsoleReconnectEditor.setTabIndex(nextTabIndex++);
    isSoundcardEnabledEditor.setTabIndex(nextTabIndex++);
    isConsoleDeviceEnabledEditor.setTabIndex(nextTabIndex++);
    // ==Host Tab==
    nextTabIndex = hostTab.setTabIndexes(nextTabIndex);
    isAutoAssignEditor.setTabIndex(nextTabIndex++);
    specificHost.setTabIndex(nextTabIndex++);
    defaultHostEditor.setTabIndex(nextTabIndex++);
    migrationModeEditor.setTabIndex(nextTabIndex++);
    hostCpuEditor.setTabIndex(nextTabIndex++);
    // ==High Availability Tab==
    nextTabIndex = highAvailabilityTab.setTabIndexes(nextTabIndex);
    isHighlyAvailableEditor.setTabIndex(nextTabIndex++);
    priorityEditor.setTabIndex(nextTabIndex++);
    watchdogModelEditor.setTabIndex(nextTabIndex++);
    watchdogActionEditor.setTabIndex(nextTabIndex++);
    // ==Resource Allocation Tab==
    nextTabIndex = resourceAllocationTab.setTabIndexes(nextTabIndex);
    minAllocatedMemoryEditor.setTabIndex(nextTabIndex++);
    provisioningEditor.setTabIndex(nextTabIndex++);
    provisioningThinEditor.setTabIndex(nextTabIndex++);
    provisioningCloneEditor.setTabIndex(nextTabIndex++);
    cpuPinning.setTabIndex(nextTabIndex++);
    cpuSharesAmountEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = disksAllocationView.setTabIndexes(nextTabIndex);
    // ==Boot Options Tab==
    nextTabIndex = bootOptionsTab.setTabIndexes(nextTabIndex);
    firstBootDeviceEditor.setTabIndex(nextTabIndex++);
    secondBootDeviceEditor.setTabIndex(nextTabIndex++);
    cdAttachedEditor.setTabIndex(nextTabIndex++);
    cdImageEditor.setTabIndex(nextTabIndex++);
    kernel_pathEditor.setTabIndex(nextTabIndex++);
    initrd_pathEditor.setTabIndex(nextTabIndex++);
    kernel_parametersEditor.setTabIndex(nextTabIndex++);
    // ==Custom Properties Tab==
    nextTabIndex = customPropertiesTab.setTabIndexes(nextTabIndex);
    return nextTabIndex;
}
#end_block

#method_before
protected List<Widget> consoleTabWidgets() {
    return Arrays.<Widget>asList(displayProtocolEditor, usbSupportEditor, isSmartcardEnabledEditor, nativeUsbWarningMessage, expander, numOfMonitorsEditor, vncKeyboardLayoutEditor);
}
#method_after
protected List<Widget> consoleTabWidgets() {
    return Arrays.<Widget>asList(displayProtocolEditor, usbSupportEditor, isSmartcardEnabledEditor, nativeUsbWarningMessage, expander, numOfMonitorsEditor, vncKeyboardLayoutEditor, ssoMethodLabel, ssoMethodNone, ssoMethodGuestAgent);
}
#end_block

#method_before
@Deprecated
@Override
public void edit(ListModel model) {
    edit(model, dcCompatibilityVersion, dcId, defaultProfile);
}
#method_after
public void edit(ListModel model, VnicProfileModel defaultProfile) {
    driver.edit(model);
    this.defaultProfile = defaultProfile;
    super.edit(model);
}
#end_block

#method_before
@Deprecated
@Override
public void edit(ListModel model) {
    edit(model, dcCompatibilityVersion, dcId, defaultProfile);
}
#method_after
@Deprecated
@Override
public void edit(ListModel model) {
    edit(model, defaultProfile);
}
#end_block

#method_before
protected void init(M model) {
    items.clear();
    contentPanel.clear();
    modelItems = (Collection<T>) model.getItems();
    if (modelItems == null) {
        modelItems = new LinkedList<T>();
        // this will invoke init() again with the empty list as values instead of null
        model.setItems(modelItems);
        return;
    }
    for (T value : modelItems) {
        addEntry(value);
    }
    addGhostEntry();
}
#method_after
protected void init(M model) {
    items.clear();
    contentPanel.clear();
    modelItems = (Collection<T>) model.getItems();
    if (modelItems == null) {
        modelItems = new LinkedList<T>();
        // this will invoke init() again with the empty list as values instead of null
        model.setItems(modelItems);
        return;
    }
    for (T value : modelItems) {
        addEntry(value);
    }
    T additionalValue = addGhostEntry().getFirst();
    modelItems.add(additionalValue);
}
#end_block

#method_before
private void addGhostEntry() {
    T value = createGhostValue();
    addEntry(value);
    modelItems.add(value);
}
#method_after
private Pair<T, V> addGhostEntry() {
    T value = createGhostValue();
    V widget = addEntry(value);
    return new Pair<T, V>(value, widget);
}
#end_block

#method_before
private void addEntry(T value) {
    final V widget = createWidget(value);
    Pair<T, V> item = new Pair<T, V>(value, widget);
    items.add(item);
    PushButton button = createButton(item);
    final boolean ghost = isGhost(value);
    toggleGhost(value, widget, ghost);
    widget.addValueChangeHandler(new ValueChangeHandler<T>() {

        private boolean wasGhost = ghost;

        @Override
        public void onValueChange(ValueChangeEvent<T> event) {
            T value = event.getValue();
            boolean becomingGhost = isGhost(value);
            if (becomingGhost != wasGhost) {
                ((AddRemoveRowPanel) widget.getParent()).setButtonEnabled(!becomingGhost);
                toggleGhost(value, widget, becomingGhost);
                wasGhost = becomingGhost;
            }
        }
    });
    AddRemoveRowPanel entry = new AddRemoveRowPanel(widget, button);
    contentPanel.add(entry);
}
#method_after
private V addEntry(T value) {
    final V widget = createWidget(value);
    Pair<T, V> item = new Pair<T, V>(value, widget);
    items.add(item);
    PushButton button = createButton(item);
    final boolean ghost = isGhost(value);
    toggleGhost(value, widget, ghost);
    widget.addValueChangeHandler(new ValueChangeHandler<T>() {

        private boolean wasGhost = ghost;

        @Override
        public void onValueChange(ValueChangeEvent<T> event) {
            T value = event.getValue();
            boolean becomingGhost = isGhost(value);
            if (becomingGhost != wasGhost) {
                ((AddRemoveRowPanel) widget.getParent()).setButtonEnabled(!becomingGhost);
                toggleGhost(value, widget, becomingGhost);
                wasGhost = becomingGhost;
            }
        }
    });
    AddRemoveRowPanel entry = new AddRemoveRowPanel(widget, button);
    contentPanel.add(entry);
    return widget;
}
#end_block

#method_before
private PushButton createButton(final Pair<T, V> item) {
    final T value = item.getFirst();
    final V widget = item.getSecond();
    boolean ghostItem = isGhost(value);
    final PushButton button = new PushButton(new Image(ghostItem ? resources.increaseIcon() : resources.decreaseIcon()));
    button.addStyleName(style.buttonStyle());
    button.setEnabled(!ghostItem);
    button.addClickHandler(ghostItem ? new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            ((AddRemoveRowPanel) widget.getParent()).swapButton(createButton(item));
            addGhostEntry();
            onAdd(value, widget);
        }
    } : new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            removeEntry(item);
            onRemove(value, widget);
        }
    });
    return button;
}
#method_after
private PushButton createButton(final Pair<T, V> item) {
    final T value = item.getFirst();
    final V widget = item.getSecond();
    boolean ghostItem = isGhost(value);
    final PushButton button = new PushButton(new Image(ghostItem ? resources.increaseIcon() : resources.decreaseIcon()));
    button.addStyleName(style.buttonStyle());
    button.setEnabled(!ghostItem);
    button.addClickHandler(ghostItem ? new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            ((AddRemoveRowPanel) widget.getParent()).swapButton(createButton(item));
            Pair<T, V> item = addGhostEntry();
            onAdd(item.getFirst(), item.getSecond());
        }
    } : new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            removeEntry(item);
            onRemove(value, widget);
        }
    });
    return button;
}
#end_block

#method_before
protected void onAdd(T value, V widget) {
// do nothing
}
#method_after
protected void onAdd(T value, V widget) {
    modelItems.add(value);
}
#end_block

#method_before
@Override
public void edit(EditNetworkModel object) {
    driver.edit(object);
}
#method_after
@Override
public void edit(EditNetworkModel object) {
    super.edit(object);
    driver.edit(object);
    network = object.getNetwork();
}
#end_block

#method_before
protected void buildVmProperties() {
    createInfo.put(VdsProperties.vm_guid, vm.getId().toString());
    createInfo.put(VdsProperties.vm_name, vm.getName());
    createInfo.put(VdsProperties.mem_size_mb, vm.getVmMemSizeMb());
    createInfo.put(VdsProperties.mem_guaranteed_size_mb, vm.getMinAllocatedMem());
    createInfo.put(VdsProperties.smartcardEnabled, Boolean.toString(vm.isSmartcardEnabled()));
    createInfo.put(VdsProperties.num_of_cpus, String.valueOf(vm.getNumOfCpus()));
    if (Config.<Boolean>GetValue(ConfigValues.SendSMPOnRunVm)) {
        createInfo.put(VdsProperties.cores_per_socket, (Integer.toString(vm.getCpuPerSocket())));
    }
    final String compatibilityVersion = vm.getVdsGroupCompatibilityVersion().toString();
    addCpuPinning(compatibilityVersion);
    createInfo.put(VdsProperties.emulatedMachine, DbFacade.getInstance().getVdsGroupDao().get(vm.getVdsGroupId()).getEmulatedMachine());
    // enabled.
    if (Config.<Boolean>GetValue(ConfigValues.SSLEnabled)) {
        createInfo.put(VdsProperties.spiceSslCipherSuite, Config.<String>GetValue(ConfigValues.CipherSuite));
        createInfo.put(VdsProperties.SpiceSecureChannels, Config.<String>GetValue(ConfigValues.SpiceSecureChannels, compatibilityVersion));
    }
    createInfo.put(VdsProperties.kvmEnable, vm.getKvmEnable().toString().toLowerCase());
    createInfo.put(VdsProperties.acpiEnable, vm.getAcpiEnable().toString().toLowerCase());
    createInfo.put(VdsProperties.Custom, VmPropertiesUtils.getInstance().getVMProperties(vm.getVdsGroupCompatibilityVersion(), vm.getStaticData()));
    // "qemu", "kvm"
    createInfo.put(VdsProperties.vm_type, "kvm");
    if (vm.isRunAndPause()) {
        createInfo.put(VdsProperties.launch_paused_param, "true");
    }
    if (vm.isUseHostCpuFlags()) {
        createInfo.put(VdsProperties.cpuType, "hostPassthrough");
    } else if (vm.getVdsGroupCpuFlagsData() != null) {
        createInfo.put(VdsProperties.cpuType, vm.getVdsGroupCpuFlagsData());
    }
    createInfo.put(VdsProperties.niceLevel, String.valueOf(vm.getNiceLevel()));
    if (vm.getCpuShares() > 0) {
        createInfo.put(VdsProperties.cpuShares, String.valueOf(vm.getCpuShares()));
    }
    if (!StringUtils.isEmpty(vm.getHibernationVolHandle())) {
        createInfo.put(VdsProperties.hiberVolHandle, vm.getHibernationVolHandle());
    }
    // if set per VM use that value
    String keyboardLayout = vm.getVncKeyboardLayout();
    if (keyboardLayout == null) {
        // otherwise fall back to global setting
        keyboardLayout = Config.<String>GetValue(ConfigValues.VncKeyboardLayout);
    }
    createInfo.put(VdsProperties.KeyboardLayout, keyboardLayout);
    if (osRepository.isLinux(vm.getVmOsId())) {
        createInfo.put(VdsProperties.PitReinjection, "false");
    }
    if (vm.getDisplayType() == DisplayType.vnc) {
        createInfo.put(VdsProperties.TabletEnable, "true");
    }
    createInfo.put(VdsProperties.transparent_huge_pages, vm.isTransparentHugePages() ? "true" : "false");
}
#method_after
protected void buildVmProperties() {
    createInfo.put(VdsProperties.vm_guid, vm.getId().toString());
    createInfo.put(VdsProperties.vm_name, vm.getName());
    createInfo.put(VdsProperties.mem_size_mb, vm.getVmMemSizeMb());
    createInfo.put(VdsProperties.mem_guaranteed_size_mb, vm.getMinAllocatedMem());
    createInfo.put(VdsProperties.smartcardEnabled, Boolean.toString(vm.isSmartcardEnabled()));
    createInfo.put(VdsProperties.num_of_cpus, String.valueOf(vm.getNumOfCpus()));
    if (Config.<Boolean>getValue(ConfigValues.SendSMPOnRunVm)) {
        createInfo.put(VdsProperties.cores_per_socket, (Integer.toString(vm.getCpuPerSocket())));
    }
    final String compatibilityVersion = vm.getVdsGroupCompatibilityVersion().toString();
    addCpuPinning(compatibilityVersion);
    createInfo.put(VdsProperties.emulatedMachine, DbFacade.getInstance().getVdsGroupDao().get(vm.getVdsGroupId()).getEmulatedMachine());
    // enabled.
    if (Config.<Boolean>getValue(ConfigValues.SSLEnabled)) {
        createInfo.put(VdsProperties.spiceSslCipherSuite, Config.<String>getValue(ConfigValues.CipherSuite));
        createInfo.put(VdsProperties.SpiceSecureChannels, Config.<String>getValue(ConfigValues.SpiceSecureChannels, compatibilityVersion));
    }
    createInfo.put(VdsProperties.kvmEnable, vm.getKvmEnable().toString().toLowerCase());
    createInfo.put(VdsProperties.acpiEnable, vm.getAcpiEnable().toString().toLowerCase());
    createInfo.put(VdsProperties.Custom, VmPropertiesUtils.getInstance().getVMProperties(vm.getVdsGroupCompatibilityVersion(), vm.getStaticData()));
    // "qemu", "kvm"
    createInfo.put(VdsProperties.vm_type, "kvm");
    if (vm.isRunAndPause()) {
        createInfo.put(VdsProperties.launch_paused_param, "true");
    }
    if (vm.isUseHostCpuFlags()) {
        createInfo.put(VdsProperties.cpuType, "hostPassthrough");
    } else if (vm.getVdsGroupCpuFlagsData() != null) {
        createInfo.put(VdsProperties.cpuType, vm.getVdsGroupCpuFlagsData());
    }
    createInfo.put(VdsProperties.niceLevel, String.valueOf(vm.getNiceLevel()));
    if (vm.getCpuShares() > 0) {
        createInfo.put(VdsProperties.cpuShares, String.valueOf(vm.getCpuShares()));
    }
    if (!StringUtils.isEmpty(vm.getHibernationVolHandle())) {
        createInfo.put(VdsProperties.hiberVolHandle, vm.getHibernationVolHandle());
    }
    // if set per VM use that value
    String keyboardLayout = vm.getVncKeyboardLayout();
    if (keyboardLayout == null) {
        // otherwise fall back to global setting
        keyboardLayout = Config.<String>getValue(ConfigValues.VncKeyboardLayout);
    }
    createInfo.put(VdsProperties.KeyboardLayout, keyboardLayout);
    if (osRepository.isLinux(vm.getVmOsId())) {
        createInfo.put(VdsProperties.PitReinjection, "false");
    }
    if (vm.getDisplayType() == DisplayType.vnc) {
        createInfo.put(VdsProperties.TabletEnable, "true");
    }
    createInfo.put(VdsProperties.transparent_huge_pages, vm.isTransparentHugePages() ? "true" : "false");
}
#end_block

#method_before
private void addCpuPinning(final String compatibilityVersion) {
    final String cpuPinning = vm.getCpuPinning();
    if (StringUtils.isNotEmpty(cpuPinning) && Boolean.TRUE.equals(Config.<Boolean>GetValue(ConfigValues.CpuPinningEnabled, compatibilityVersion))) {
        final Map<String, Object> pinDict = new HashMap<String, Object>();
        for (String pin : cpuPinning.split("_")) {
            final String[] split = pin.split("#");
            pinDict.put(split[0], split[1]);
        }
        createInfo.put(VdsProperties.cpuPinning, pinDict);
    }
}
#method_after
private void addCpuPinning(final String compatibilityVersion) {
    final String cpuPinning = vm.getCpuPinning();
    if (StringUtils.isNotEmpty(cpuPinning) && Boolean.TRUE.equals(Config.<Boolean>getValue(ConfigValues.CpuPinningEnabled, compatibilityVersion))) {
        final Map<String, Object> pinDict = new HashMap<String, Object>();
        for (String pin : cpuPinning.split("_")) {
            final String[] split = pin.split("#");
            pinDict.put(split[0], split[1]);
        }
        createInfo.put(VdsProperties.cpuPinning, pinDict);
    }
}
#end_block

#method_before
private String getTimeZoneForVm(VM vm) {
    if (!StringUtils.isEmpty(vm.getTimeZone())) {
        return vm.getTimeZone();
    }
    // else fallback to engine config default for given OS type
    if (osRepository.isWindows(vm.getOs())) {
        return Config.<String>GetValue(ConfigValues.DefaultWindowsTimeZone);
    } else {
        return "Etc/GMT";
    }
}
#method_after
private String getTimeZoneForVm(VM vm) {
    if (!StringUtils.isEmpty(vm.getTimeZone())) {
        return vm.getTimeZone();
    }
    // else fallback to engine config default for given OS type
    if (osRepository.isWindows(vm.getOs())) {
        return Config.<String>getValue(ConfigValues.DefaultWindowsTimeZone);
    } else {
        return "Etc/GMT";
    }
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Map<String, Pair<String, String>> exclusiveLock = new HashMap<>();
    exclusiveLock.put(getDisk().getId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED));
    if (getDisk().isBoot()) {
        exclusiveLock.put(getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DISK_BOOT, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    return exclusiveLock;
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Map<String, Pair<String, String>> exclusiveLock = null;
    if (getDisk() != null) {
        exclusiveLock = new HashMap<>();
        exclusiveLock.put(getDisk().getId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED.name() + String.format("$diskAliases %1$s", getDiskAlias())));
        if (getDisk().isBoot()) {
            exclusiveLock.put(getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DISK_BOOT, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
        }
    }
    return exclusiveLock;
}
#end_block

#method_before
@Override
public String getDiskAlias() {
    return disk.getDiskAlias();
}
#method_after
@Override
public String getDiskAlias() {
    return getDisk().getDiskAlias();
}
#end_block

#method_before
private void addVideoCardByDisplayType(DisplayType displayType, int numOfMonitors, boolean singleQxlPci) {
    Map<String, Object> struct = new HashMap<String, Object>();
    // create a monitor as an unmanaged device
    struct.put(VdsProperties.Type, VmDeviceGeneralType.VIDEO.getValue());
    struct.put(VdsProperties.Device, displayType.getVmDeviceType().getName());
    struct.put(VdsProperties.SpecParams, getNewMonitorSpecParams(displayType, numOfMonitors, singleQxlPci));
    struct.put(VdsProperties.DeviceId, String.valueOf(Guid.newGuid()));
    devices.add(struct);
}
#method_after
private void addVideoCardByDisplayType(DisplayType displayType, int numOfMonitors, boolean singleQxlPci) {
    Map<String, Object> struct = new HashMap<String, Object>();
    VmDeviceType vmDeviceType = getOsRepository().getDisplayDevice(vm.getOs(), vm.getVdsGroupCompatibilityVersion(), displayType);
    // create a monitor as an unmanaged device
    struct.put(VdsProperties.Type, VmDeviceGeneralType.VIDEO.getValue());
    struct.put(VdsProperties.Device, vmDeviceType);
    struct.put(VdsProperties.SpecParams, getNewMonitorSpecParams(displayType, numOfMonitors, singleQxlPci));
    struct.put(VdsProperties.DeviceId, String.valueOf(Guid.newGuid()));
    devices.add(struct);
}
#end_block

#method_before
@Override
protected void buildUnmanagedDevices() {
    Map<String, String> customMap = (createInfo.containsKey(VdsProperties.Custom)) ? (Map<String, String>) createInfo.get(VdsProperties.Custom) : new HashMap<String, String>();
    List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getUnmanagedDevicesByVmId(vm.getId());
    if (vmDevices.size() > 0) {
        StringBuilder id = new StringBuilder();
        for (VmDevice vmDevice : vmDevices) {
            Map struct = new HashMap();
            id.append(VdsProperties.Device);
            id.append("_");
            id.append(vmDevice.getDeviceId());
            if (VmDeviceCommonUtils.isInWhiteList(vmDevice.getType(), vmDevice.getDevice())) {
                struct.put(VdsProperties.Type, vmDevice.getType().getValue());
                struct.put(VdsProperties.Device, vmDevice.getDevice());
                addAddress(vmDevice, struct);
                struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams());
                struct.put(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
                devices.add(struct);
            } else {
                customMap.put(id.toString(), vmDevice.toString());
            }
        }
    }
    createInfo.put(VdsProperties.Custom, customMap);
    Map[] devArray = new HashMap[devices.size()];
    createInfo.put(DEVICES, devices.toArray(devArray));
}
#method_after
@Override
protected void buildUnmanagedDevices() {
    Map<String, String> customMap = (createInfo.containsKey(VdsProperties.Custom)) ? (Map<String, String>) createInfo.get(VdsProperties.Custom) : new HashMap<String, String>();
    List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getUnmanagedDevicesByVmId(vm.getId());
    if (vmDevices.size() > 0) {
        StringBuilder id = new StringBuilder();
        for (VmDevice vmDevice : vmDevices) {
            Map struct = new HashMap();
            id.append(VdsProperties.Device);
            id.append("_");
            id.append(vmDevice.getDeviceId());
            if (VmDeviceCommonUtils.isInWhiteList(vmDevice.getType(), vmDevice.getDevice())) {
                struct.put(VdsProperties.Type, vmDevice.getType().getValue());
                struct.put(VdsProperties.Device, vmDevice.getDevice());
                addAddress(vmDevice, struct);
                struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams());
                struct.put(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
                devices.add(struct);
            } else {
                customMap.put(id.toString(), vmDevice.toString());
            }
        }
    }
    createInfo.put(VdsProperties.Custom, customMap);
    createInfo.put(DEVICES, devices);
}
#end_block

#method_before
private void addAddress(Map<String, Object> map, String address) {
    if (getParameters().getDisk().getDiskInterface() != DiskInterface.VirtIO_SCSI) {
        if (StringUtils.isNotBlank(address)) {
            map.put("address", XmlRpcStringUtils.string2Map(address));
        }
    } else {
        Map<VmDevice, Integer> vmDeviceUnitMap = VmInfoBuilder.getVmDeviceUnitMapForVirtioScsiDisks(getParameters().getVm());
        int availableUnit = VmInfoBuilder.getAvailableUnitForVirtioScsiDisk(vmDeviceUnitMap);
        // Otherwise, set address according to the next available unit.
        if (!StringUtils.isEmpty(address)) {
            Map<String, String> addressMap = XmlRpcStringUtils.string2Map(address);
            int unit = Integer.valueOf(addressMap.get(VdsProperties.Unit));
            if (!vmDeviceUnitMap.containsValue(unit)) {
                map.put(VdsProperties.Address, XmlRpcStringUtils.string2Map(address));
            } else {
                map.put(VdsProperties.Address, VmInfoBuilder.createAddressForVirtioScsiDisk(availableUnit));
            }
        } else {
            map.put(VdsProperties.Address, VmInfoBuilder.createAddressForVirtioScsiDisk(availableUnit));
        }
    }
}
#method_after
private void addAddress(Map<String, Object> map, String address) {
    if (getParameters().getDisk().getDiskInterface() != DiskInterface.VirtIO_SCSI) {
        if (StringUtils.isNotBlank(address)) {
            map.put("address", XmlRpcStringUtils.string2Map(address));
        }
    } else {
        Map<VmDevice, Integer> vmDeviceUnitMap = VmInfoBuilder.getVmDeviceUnitMapForVirtioScsiDisks(getParameters().getVm());
        int availableUnit = VmInfoBuilder.getAvailableUnitForVirtioScsiDisk(vmDeviceUnitMap);
        // Otherwise, set address according to the next available unit.
        if (StringUtils.isNotBlank(address)) {
            Map<String, String> addressMap = XmlRpcStringUtils.string2Map(address);
            int unit = Integer.valueOf(addressMap.get(VdsProperties.Unit));
            if (!vmDeviceUnitMap.containsValue(unit)) {
                map.put(VdsProperties.Address, addressMap);
            } else {
                map.put(VdsProperties.Address, VmInfoBuilder.createAddressForVirtioScsiDisk(availableUnit));
            }
        } else {
            map.put(VdsProperties.Address, VmInfoBuilder.createAddressForVirtioScsiDisk(availableUnit));
        }
    }
}
#end_block

#method_before
protected boolean reconstructMaster() {
    proceedStorageDomainTreatmentByDomainType(true);
    // To issue a reconstructMaster you need to set the domain inactive unless the selected domain is the current master
    if (getParameters().isInactive() && !getStorageDomain().getId().equals(_newMasterStorageDomainId)) {
        executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                setStorageDomainStatus(StorageDomainStatus.InActive, getCompensationContext());
                calcStoragePoolStatusByDomainsStatus();
                getCompensationContext().stateChanged();
                return null;
            }
        });
    }
    if (_isLastMaster) {
        return stopSpm();
    }
    boolean commandSucceeded = stopSpm();
    final List<String> disconnectPoolFormats = Config.<List<String>>GetValue(ConfigValues.DisconnectPoolOnReconstruct);
    if (commandSucceeded && disconnectPoolFormats.contains(getNewMaster(true).getStorageFormat().getValue())) {
        commandSucceeded = runVdsCommand(VDSCommandType.DisconnectStoragePool, new DisconnectStoragePoolVDSCommandParameters(getVds().getId(), getStoragePool().getId(), getVds().getVdsSpmId())).getSucceeded();
    }
    if (!commandSucceeded) {
        return false;
    }
    List<StoragePoolIsoMap> domains = getStoragePoolIsoMapDAO().getAllForStoragePool(getStoragePool().getId());
    // set to true here in case of failure in executing/getting answer from the reconstruct vds command,
    // unless we know that the command failed we assume that it succeeded (use by RecoveryStoragePool command in
    // order to avoid detaching domain that is already part of the pool in vdsm).
    setActionReturnValue(true);
    return runVdsCommand(VDSCommandType.ReconstructMaster, new ReconstructMasterVDSCommandParameters(getVds().getId(), getVds().getVdsSpmId(), getStoragePool().getId(), getStoragePool().getName(), _newMasterStorageDomainId, domains, getStoragePool().getmaster_domain_version())).getSucceeded();
}
#method_after
protected boolean reconstructMaster() {
    proceedStorageDomainTreatmentByDomainType(true);
    // To issue a reconstructMaster you need to set the domain inactive
    if (getParameters().isInactive()) {
        executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                setStorageDomainStatus(StorageDomainStatus.InActive, getCompensationContext());
                calcStoragePoolStatusByDomainsStatus();
                getCompensationContext().stateChanged();
                return null;
            }
        });
    }
    if (_isLastMaster) {
        return stopSpm();
    }
    boolean commandSucceeded = stopSpm();
    final List<String> disconnectPoolFormats = Config.<List<String>>getValue(ConfigValues.DisconnectPoolOnReconstruct);
    if (commandSucceeded && disconnectPoolFormats.contains(getNewMaster(true).getStorageFormat().getValue())) {
        commandSucceeded = runVdsCommand(VDSCommandType.DisconnectStoragePool, new DisconnectStoragePoolVDSCommandParameters(getVds().getId(), getStoragePool().getId(), getVds().getVdsSpmId())).getSucceeded();
    }
    if (!commandSucceeded) {
        return false;
    }
    List<StoragePoolIsoMap> domains = getStoragePoolIsoMapDAO().getAllForStoragePool(getStoragePool().getId());
    // set to true here in case of failure in executing/getting answer from the reconstruct vds command,
    // unless we know that the command failed we assume that it succeeded (use by RecoveryStoragePool command in
    // order to avoid detaching domain that is already part of the pool in vdsm).
    setActionReturnValue(true);
    return runVdsCommand(VDSCommandType.ReconstructMaster, new ReconstructMasterVDSCommandParameters(getVds().getId(), getVds().getVdsSpmId(), getStoragePool().getId(), getStoragePool().getName(), _newMasterStorageDomainId, domains, getStoragePool().getmaster_domain_version())).getSucceeded();
}
#end_block

#method_before
protected void failedToMigrate() {
    try {
        determineMigrationFailureForAuditLog();
        decreasePendingVms(getDestinationVds().getId());
        _isRerun = false;
        setSucceeded(false);
        log();
        failedToRunVm();
    } finally {
        freeLock();
    }
}
#method_after
protected void failedToMigrate() {
    try {
        determineMigrationFailureForAuditLog();
        _isRerun = false;
        setSucceeded(false);
        log();
        failedToRunVm();
    } finally {
        freeLock();
    }
}
#end_block

#method_before
@Override
protected void executeVmCommand() {
    initVdss();
    perform();
    processVm();
    setSucceeded(true);
}
#method_after
@Override
protected void executeVmCommand() {
    initVdss();
    perform();
    setSucceeded(true);
}
#end_block

#method_before
@Override
public void runningSucceded() {
    try {
        super.runningSucceded();
    } finally {
        // Decrement the pending counters
        decreasePendingVms(getVdsDestinationId());
        freeLock();
    }
}
#method_after
@Override
public void runningSucceded() {
    try {
        super.runningSucceded();
    } finally {
        freeLock();
    }
}
#end_block

#method_before
@Override
public void reportCompleted() {
    try {
        super.reportCompleted();
    } finally {
        freeLock();
    }
}
#method_after
@Override
public void reportCompleted() {
    try {
        super.reportCompleted();
    } finally {
        /*
             * Decrement the pending counters here as this is the only place which
             * is called consistently regardless of the migration result.
             */
        decreasePendingVms(getVdsDestinationId());
        freeLock();
    }
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    switch(getParameters().getOsRepositoryVerb()) {
        case GetOsNames:
            setReturnValue(osRepository.getOsNames());
            break;
        case GetUniqueOsNames:
            setReturnValue(osRepository.getUniqueOsNames());
            break;
        case GetOsIds:
            setReturnValue(osRepository.getOsIds());
            break;
        case GetLinuxOss:
            setReturnValue(osRepository.getLinuxOss());
            break;
        case GetWindowsOss:
            setReturnValue(osRepository.getWindowsOss());
            break;
        case GetMaxOsRam:
            setReturnValue(osRepository.getMaximumRam(getParameters().getOsId(), getParameters().getVersion()));
            break;
        case GetMinimumOsRam:
            setReturnValue(osRepository.getMinimumRam(getParameters().getOsId(), getParameters().getVersion()));
            break;
        case HasSpiceSupport:
            setReturnValue(osRepository.hasSpiceSupport(getParameters().getOsId(), getParameters().getVersion()));
            break;
        case GetNetworkDevices:
            setReturnValue(osRepository.getNetworkDevices(getParameters().getOsId(), getParameters().getVersion()));
            break;
        case GetWatchDogModels:
            setReturnValue(osRepository.getWatchDogModels(getParameters().getOsId(), getParameters().getVersion()));
            break;
    }
}
#method_after
@Override
protected void executeQueryCommand() {
    switch(getParameters().getOsRepositoryVerb()) {
        case GetOsNames:
            setReturnValue(osRepository.getOsNames());
            break;
        case GetUniqueOsNames:
            setReturnValue(osRepository.getUniqueOsNames());
            break;
        case GetOsIds:
            setReturnValue(osRepository.getOsIds());
            break;
        case GetLinuxOss:
            setReturnValue(osRepository.getLinuxOss());
            break;
        case GetWindowsOss:
            setReturnValue(osRepository.getWindowsOss());
            break;
        case GetNicHotplugSupportMap:
            setReturnValue(osRepository.getNicHotplugSupportMap());
            break;
        case GetDiskHotpluggableInterfacesMap:
            setReturnValue(osRepository.getDiskHotpluggableInterfacesMap());
            break;
        case GetOsArchitectures:
            setReturnValue(osRepository.getOsArchitectures());
            break;
        case GetMaxOsRam:
            setReturnValue(osRepository.getMaximumRam(getParameters().getOsId(), getParameters().getVersion()));
            break;
        case GetMinimumOsRam:
            setReturnValue(osRepository.getMinimumRam(getParameters().getOsId(), getParameters().getVersion()));
            break;
        case GetDisplayTypes:
            setReturnValue(osRepository.getDisplayTypes());
            break;
        case HasNicHotplugSupport:
            setReturnValue(osRepository.hasNicHotplugSupport(getParameters().getOsId(), getParameters().getVersion()));
            break;
        case GetDiskInterfaces:
            setReturnValue(osRepository.getDiskInterfaces(getParameters().getOsId(), getParameters().getVersion()));
            break;
        case GetNetworkDevices:
            setReturnValue(osRepository.getNetworkDevices(getParameters().getOsId(), getParameters().getVersion()));
            break;
        case GetDiskHotpluggableInterfaces:
            setReturnValue(osRepository.getDiskHotpluggableInterfaces(getParameters().getOsId(), getParameters().getVersion()));
            break;
        case GetVmWatchdogTypes:
            setReturnValue(osRepository.getVmWatchdogTypes(getParameters().getOsId(), getParameters().getVersion()));
            break;
    }
}
#end_block

#method_before
public EntityModel getIsSoundcardEnabled() {
    return isSoundcardEnabled;
}
#method_after
public EntityModel<Boolean> getIsSoundcardEnabled() {
    return isSoundcardEnabled;
}
#end_block

#method_before
private void setIsSoundcardEnabled(NotChangableForVmInPoolEntityModel isSoundcardEnabled) {
    this.isSoundcardEnabled = isSoundcardEnabled;
}
#method_after
private void setIsSoundcardEnabled(NotChangableForVmInPoolEntityModel<Boolean> isSoundcardEnabled) {
    this.isSoundcardEnabled = isSoundcardEnabled;
}
#end_block

#method_before
public ListModel getDataCenterWithClustersList() {
    return dataCenterWithClustersList;
}
#method_after
public ListModel<DataCenterWithCluster> getDataCenterWithClustersList() {
    return dataCenterWithClustersList;
}
#end_block

#method_before
private void setDataCenterWithClustersList(NotChangableForVmInPoolListModel dataCenterWithClustersList) {
    this.dataCenterWithClustersList = dataCenterWithClustersList;
}
#method_after
private void setDataCenterWithClustersList(NotChangableForVmInPoolListModel<DataCenterWithCluster> dataCenterWithClustersList) {
    this.dataCenterWithClustersList = dataCenterWithClustersList;
}
#end_block

#method_before
public ListModel getNicsWithLogicalNetworks() {
    return nicsWithLogicalNetworks;
}
#method_after
public ListModel<VnicInstanceType> getNicsWithLogicalNetworks() {
    return nicsWithLogicalNetworks;
}
#end_block

#method_before
public void setNicsWithLogicalNetworks(ListModel nicsWithLogicalNetworks) {
    this.nicsWithLogicalNetworks = nicsWithLogicalNetworks;
}
#method_after
public void setNicsWithLogicalNetworks(ListModel<VnicInstanceType> nicsWithLogicalNetworks) {
    this.nicsWithLogicalNetworks = nicsWithLogicalNetworks;
}
#end_block

#method_before
public void setVmAttachedToPool(boolean value) {
    if (value) {
        // ==General Tab==
        getDataCenterWithClustersList().setIsChangable(!value);
        getQuota().setIsChangable(false);
        getDescription().setIsChangable(false);
        getComment().setIsChangable(false);
        getNumOfDesktops().setIsChangable(false);
        getPrestartedVms().setIsChangable(false);
        getMaxAssignedVmsPerUser().setIsChangable(false);
        getTemplate().setIsChangable(false);
        getMemSize().setIsChangable(false);
        getTotalCPUCores().setIsChangable(false);
        getCoresPerSocket().setIsChangable(false);
        getNumOfSockets().setIsChangable(false);
        getOSType().setIsChangable(false);
        getIsStateless().setIsChangable(false);
        getIsRunAndPause().setIsChangable(false);
        getIsDeleteProtected().setIsChangable(false);
        // ==Initial run Tab==
        getTimeZone().setIsChangable(false);
        getDomain().setIsChangable(false);
        // ==Console Tab==
        getDisplayProtocol().setIsChangable(false);
        getUsbPolicy().setIsChangable(false);
        getNumOfMonitors().setIsChangable(false);
        getIsSingleQxlEnabled().setIsAvailable(false);
        getIsSmartcardEnabled().setIsChangable(false);
        getAllowConsoleReconnect().setIsChangable(false);
        getVncKeyboardLayout().setIsChangable(false);
        // ==Host Tab==
        getIsAutoAssign().setIsChangable(false);
        getDefaultHost().setIsChangable(false);
        getHostCpu().setIsChangable(false);
        getMigrationMode().setIsChangable(false);
        getCpuPinning().setIsChangable(false);
        // ==Resource Allocation Tab==
        getMinAllocatedMemory().setIsChangable(false);
        getProvisioning().setIsChangable(false);
        getProvisioningThin_IsSelected().setIsChangable(false);
        getProvisioningClone_IsSelected().setIsChangable(false);
        getDisksAllocationModel().setIsChangable(false);
        // ==Boot Options Tab==
        getFirstBootDevice().setIsChangable(false);
        getSecondBootDevice().setIsChangable(false);
        getCdAttached().setIsChangable(false);
        getCdImage().setIsChangable(false);
        getKernel_path().setIsChangable(false);
        getInitrd_path().setIsChangable(false);
        getKernel_parameters().setIsChangable(false);
        // ==Custom Properties Tab==
        getCustomProperties().setIsChangable(false);
        vmAttachedToPool = true;
    }
}
#method_after
public void setVmAttachedToPool(boolean value) {
    if (value) {
        // ==General Tab==
        getDataCenterWithClustersList().setIsChangable(!value);
        getQuota().setIsChangable(false);
        getDescription().setIsChangable(false);
        getComment().setIsChangable(false);
        getNumOfDesktops().setIsChangable(false);
        getPrestartedVms().setIsChangable(false);
        getMaxAssignedVmsPerUser().setIsChangable(false);
        getTemplate().setIsChangable(false);
        getMemSize().setIsChangable(false);
        getTotalCPUCores().setIsChangable(false);
        getCoresPerSocket().setIsChangable(false);
        getNumOfSockets().setIsChangable(false);
        getOSType().setIsChangable(false);
        getIsStateless().setIsChangable(false);
        getIsRunAndPause().setIsChangable(false);
        getIsDeleteProtected().setIsChangable(false);
        // ==Initial run Tab==
        getTimeZone().setIsChangable(false);
        getDomain().setIsChangable(false);
        // ==Console Tab==
        getDisplayProtocol().setIsChangable(false);
        getUsbPolicy().setIsChangable(false);
        getNumOfMonitors().setIsChangable(false);
        getIsSingleQxlEnabled().setIsChangable(false);
        getIsSmartcardEnabled().setIsChangable(false);
        getAllowConsoleReconnect().setIsChangable(false);
        getVncKeyboardLayout().setIsChangable(false);
        getSsoMethodNone().setIsChangable(false);
        getSsoMethodGuestAgent().setIsChangable(false);
        // ==Host Tab==
        getIsAutoAssign().setIsChangable(false);
        getDefaultHost().setIsChangable(false);
        getHostCpu().setIsChangable(false);
        getMigrationMode().setIsChangable(false);
        getCpuPinning().setIsChangable(false);
        // ==Resource Allocation Tab==
        getMinAllocatedMemory().setIsChangable(false);
        getProvisioning().setIsChangable(false);
        getProvisioningThin_IsSelected().setIsChangable(false);
        getProvisioningClone_IsSelected().setIsChangable(false);
        getDisksAllocationModel().setIsChangable(false);
        // ==Boot Options Tab==
        getFirstBootDevice().setIsChangable(false);
        getSecondBootDevice().setIsChangable(false);
        getCdAttached().setIsChangable(false);
        getCdImage().setIsChangable(false);
        getKernel_path().setIsChangable(false);
        getInitrd_path().setIsChangable(false);
        getKernel_parameters().setIsChangable(false);
        // ==Custom Properties Tab==
        getCustomProperties().setIsChangable(false);
        vmAttachedToPool = true;
    }
}
#end_block

#method_before
public ListModel getStorageDomain() {
    return privateStorageDomain;
}
#method_after
public ListModel<StorageDomain> getStorageDomain() {
    return privateStorageDomain;
}
#end_block

#method_before
private void setStorageDomain(NotChangableForVmInPoolListModel value) {
    privateStorageDomain = value;
}
#method_after
private void setStorageDomain(NotChangableForVmInPoolListModel<StorageDomain> value) {
    privateStorageDomain = value;
}
#end_block

#method_before
public ListModel getTemplate() {
    return privateTemplate;
}
#method_after
public ListModel<VmTemplate> getTemplate() {
    return privateTemplate;
}
#end_block

#method_before
private void setTemplate(NotChangableForVmInPoolListModel value) {
    privateTemplate = value;
}
#method_after
private void setTemplate(NotChangableForVmInPoolListModel<VmTemplate> value) {
    privateTemplate = value;
}
#end_block

#method_before
public void setVmType(NotChangableForVmInPoolListModel vmType) {
    this.vmType = vmType;
}
#method_after
public void setVmType(NotChangableForVmInPoolListModel<VmType> vmType) {
    this.vmType = vmType;
}
#end_block

#method_before
public ListModel getVmType() {
    return vmType;
}
#method_after
public ListModel<VmType> getVmType() {
    return vmType;
}
#end_block

#method_before
public EntityModel getName() {
    return privateName;
}
#method_after
public EntityModel<String> getName() {
    return privateName;
}
#end_block

#method_before
private void setName(EntityModel value) {
    privateName = value;
}
#method_after
private void setName(EntityModel<String> value) {
    privateName = value;
}
#end_block

#method_before
public ListModel getOSType() {
    return privateOSType;
}
#method_after
public ListModel<Integer> getOSType() {
    return privateOSType;
}
#end_block

#method_before
private void setOSType(NotChangableForVmInPoolListModel value) {
    privateOSType = value;
}
#method_after
private void setOSType(NotChangableForVmInPoolListModel<Integer> value) {
    privateOSType = value;
}
#end_block

#method_before
public ListModel getNumOfMonitors() {
    return privateNumOfMonitors;
}
#method_after
public ListModel<Integer> getNumOfMonitors() {
    return privateNumOfMonitors;
}
#end_block

#method_before
private void setNumOfMonitors(NotChangableForVmInPoolListModel value) {
    privateNumOfMonitors = value;
}
#method_after
private void setNumOfMonitors(NotChangableForVmInPoolListModel<Integer> value) {
    privateNumOfMonitors = value;
}
#end_block

#method_before
public EntityModel getIsSingleQxlEnabled() {
    return privateIsSingleQxlEnabled;
}
#method_after
public EntityModel<Boolean> getIsSingleQxlEnabled() {
    return privateIsSingleQxlEnabled;
}
#end_block

#method_before
private void setIsSingleQxlEnabled(NotChangableForVmInPoolEntityModel value) {
    privateIsSingleQxlEnabled = value;
}
#method_after
private void setIsSingleQxlEnabled(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsSingleQxlEnabled = value;
}
#end_block

#method_before
public EntityModel getAllowConsoleReconnect() {
    return privateAllowConsoleReconnect;
}
#method_after
public EntityModel<Boolean> getAllowConsoleReconnect() {
    return privateAllowConsoleReconnect;
}
#end_block

#method_before
private void setAllowConsoleReconnect(NotChangableForVmInPoolEntityModel value) {
    privateAllowConsoleReconnect = value;
}
#method_after
private void setAllowConsoleReconnect(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateAllowConsoleReconnect = value;
}
#end_block

#method_before
public EntityModel getDescription() {
    return privateDescription;
}
#method_after
public EntityModel<String> getDescription() {
    return privateDescription;
}
#end_block

#method_before
private void setDescription(NotChangableForVmInPoolEntityModel value) {
    privateDescription = value;
}
#method_after
private void setDescription(NotChangableForVmInPoolEntityModel<String> value) {
    privateDescription = value;
}
#end_block

#method_before
public EntityModel getComment() {
    return privateComment;
}
#method_after
public EntityModel<String> getComment() {
    return privateComment;
}
#end_block

#method_before
private void setComment(NotChangableForVmInPoolEntityModel value) {
    privateComment = value;
}
#method_after
private void setComment(NotChangableForVmInPoolEntityModel<String> value) {
    privateComment = value;
}
#end_block

#method_before
public ListModel getDomain() {
    return privateDomain;
}
#method_after
public ListModel<String> getDomain() {
    return privateDomain;
}
#end_block

#method_before
private void setDomain(NotChangableForVmInPoolListModel value) {
    privateDomain = value;
}
#method_after
private void setDomain(NotChangableForVmInPoolListModel<String> value) {
    privateDomain = value;
}
#end_block

#method_before
public EntityModel getMemSize() {
    return privateMemSize;
}
#method_after
public EntityModel<Integer> getMemSize() {
    return privateMemSize;
}
#end_block

#method_before
private void setMemSize(NotChangableForVmInPoolEntityModel value) {
    privateMemSize = value;
}
#method_after
private void setMemSize(NotChangableForVmInPoolEntityModel<Integer> value) {
    privateMemSize = value;
}
#end_block

#method_before
public EntityModel getMinAllocatedMemory() {
    return privateMinAllocatedMemory;
}
#method_after
public EntityModel<Integer> getMinAllocatedMemory() {
    return privateMinAllocatedMemory;
}
#end_block

#method_before
private void setMinAllocatedMemory(NotChangableForVmInPoolEntityModel value) {
    privateMinAllocatedMemory = value;
}
#method_after
private void setMinAllocatedMemory(NotChangableForVmInPoolEntityModel<Integer> value) {
    privateMinAllocatedMemory = value;
}
#end_block

#method_before
public ListModel getQuota() {
    return privateQuota;
}
#method_after
public ListModel<Quota> getQuota() {
    return privateQuota;
}
#end_block

#method_before
private void setQuota(NotChangableForVmInPoolListModel value) {
    privateQuota = value;
}
#method_after
private void setQuota(NotChangableForVmInPoolListModel<Quota> value) {
    privateQuota = value;
}
#end_block

#method_before
public ListModel getUsbPolicy() {
    return privateUsbPolicy;
}
#method_after
public ListModel<UsbPolicy> getUsbPolicy() {
    return privateUsbPolicy;
}
#end_block

#method_before
private void setUsbPolicy(NotChangableForVmInPoolListModel value) {
    privateUsbPolicy = value;
}
#method_after
private void setUsbPolicy(NotChangableForVmInPoolListModel<UsbPolicy> value) {
    privateUsbPolicy = value;
}
#end_block

#method_before
public ListModel getTimeZone() {
    return privateTimeZone;
}
#method_after
public ListModel<TimeZoneModel> getTimeZone() {
    return privateTimeZone;
}
#end_block

#method_before
private void setTimeZone(NotChangableForVmInPoolListModel value) {
    privateTimeZone = value;
}
#method_after
private void setTimeZone(NotChangableForVmInPoolListModel<TimeZoneModel> value) {
    privateTimeZone = value;
}
#end_block

#method_before
public ListModel getNumOfSockets() {
    return privateNumOfSockets;
}
#method_after
public ListModel<Integer> getNumOfSockets() {
    return privateNumOfSockets;
}
#end_block

#method_before
private void setNumOfSockets(NotChangableForVmInPoolListModel value) {
    privateNumOfSockets = value;
}
#method_after
private void setNumOfSockets(NotChangableForVmInPoolListModel<Integer> value) {
    privateNumOfSockets = value;
}
#end_block

#method_before
public EntityModel getTotalCPUCores() {
    return privateTotalCPUCores;
}
#method_after
public EntityModel<String> getTotalCPUCores() {
    return privateTotalCPUCores;
}
#end_block

#method_before
private void setTotalCPUCores(NotChangableForVmInPoolEntityModel value) {
    privateTotalCPUCores = value;
}
#method_after
private void setTotalCPUCores(NotChangableForVmInPoolEntityModel<String> value) {
    privateTotalCPUCores = value;
}
#end_block

#method_before
public ListModel getCoresPerSocket() {
    return privateCoresPerSocket;
}
#method_after
public ListModel<Integer> getCoresPerSocket() {
    return privateCoresPerSocket;
}
#end_block

#method_before
private void setCoresPerSocket(NotChangableForVmInPoolListModel value) {
    privateCoresPerSocket = value;
}
#method_after
private void setCoresPerSocket(NotChangableForVmInPoolListModel<Integer> value) {
    privateCoresPerSocket = value;
}
#end_block

#method_before
public ListModel getDefaultHost() {
    return privateDefaultHost;
}
#method_after
public ListModel<VDS> getDefaultHost() {
    return privateDefaultHost;
}
#end_block

#method_before
private void setDefaultHost(NotChangableForVmInPoolListModel value) {
    privateDefaultHost = value;
}
#method_after
private void setDefaultHost(NotChangableForVmInPoolListModel<VDS> value) {
    privateDefaultHost = value;
}
#end_block

#method_before
public EntityModel getIsSmartcardEnabled() {
    return privateisSmartcardEnabled;
}
#method_after
public EntityModel<Boolean> getIsSmartcardEnabled() {
    return privateisSmartcardEnabled;
}
#end_block

#method_before
private void setIsSmartcardEnabled(NotChangableForVmInPoolEntityModel value) {
    privateisSmartcardEnabled = value;
}
#method_after
private void setIsSmartcardEnabled(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateisSmartcardEnabled = value;
}
#end_block

#method_before
public EntityModel getIsConsoleDeviceEnabled() {
    return isConsoleDeviceEnabled;
}
#method_after
public EntityModel<Boolean> getIsConsoleDeviceEnabled() {
    return isConsoleDeviceEnabled;
}
#end_block

#method_before
private void setConsoleDeviceEnabled(NotChangableForVmInPoolEntityModel consoleDeviceEnabled) {
    this.isConsoleDeviceEnabled = consoleDeviceEnabled;
}
#method_after
private void setConsoleDeviceEnabled(NotChangableForVmInPoolEntityModel<Boolean> consoleDeviceEnabled) {
    this.isConsoleDeviceEnabled = consoleDeviceEnabled;
}
#end_block

#method_before
public EntityModel getIsStateless() {
    return privateIsStateless;
}
#method_after
public EntityModel<Boolean> getIsStateless() {
    return privateIsStateless;
}
#end_block

#method_before
private void setIsStateless(NotChangableForVmInPoolEntityModel value) {
    privateIsStateless = value;
}
#method_after
private void setIsStateless(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsStateless = value;
}
#end_block

#method_before
public EntityModel getIsRunAndPause() {
    return privateIsRunAndPause;
}
#method_after
public EntityModel<Boolean> getIsRunAndPause() {
    return privateIsRunAndPause;
}
#end_block

#method_before
private void setIsRunAndPause(NotChangableForVmInPoolEntityModel value) {
    privateIsRunAndPause = value;
}
#method_after
private void setIsRunAndPause(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsRunAndPause = value;
}
#end_block

#method_before
public EntityModel getIsDeleteProtected() {
    return privateIsDeleteProtected;
}
#method_after
public EntityModel<Boolean> getIsDeleteProtected() {
    return privateIsDeleteProtected;
}
#end_block

#method_before
public void setIsDeleteProtected(NotChangableForVmInPoolEntityModel deleteProtected) {
    this.privateIsDeleteProtected = deleteProtected;
}
#method_after
public void setIsDeleteProtected(NotChangableForVmInPoolEntityModel<Boolean> deleteProtected) {
    this.privateIsDeleteProtected = deleteProtected;
}
#end_block

#method_before
public EntityModel getCopyPermissions() {
    return copyPermissions;
}
#method_after
public EntityModel<Boolean> getCopyPermissions() {
    return copyPermissions;
}
#end_block

#method_before
private void setCopyPermissions(NotChangableForVmInPoolEntityModel copyPermissions) {
    this.copyPermissions = copyPermissions;
}
#method_after
private void setCopyPermissions(NotChangableForVmInPoolEntityModel<Boolean> copyPermissions) {
    this.copyPermissions = copyPermissions;
}
#end_block

#method_before
public EntityModel getMemoryBalloonDeviceEnabled() {
    return memoryBalloonDeviceEnabled;
}
#method_after
public EntityModel<Boolean> getMemoryBalloonDeviceEnabled() {
    return memoryBalloonDeviceEnabled;
}
#end_block

#method_before
public void setMemoryBalloonDeviceEnabled(EntityModel memoryBalloonDeviceEnabled) {
    this.memoryBalloonDeviceEnabled = memoryBalloonDeviceEnabled;
}
#method_after
public void setMemoryBalloonDeviceEnabled(EntityModel<Boolean> memoryBalloonDeviceEnabled) {
    this.memoryBalloonDeviceEnabled = memoryBalloonDeviceEnabled;
}
#end_block

#method_before
public ListModel getDisplayProtocol() {
    return privateDisplayProtocol;
}
#method_after
public ListModel<EntityModel<DisplayType>> getDisplayProtocol() {
    return privateDisplayProtocol;
}
#end_block

#method_before
private void setDisplayProtocol(NotChangableForVmInPoolListModel value) {
    privateDisplayProtocol = value;
}
#method_after
private void setDisplayProtocol(NotChangableForVmInPoolListModel<EntityModel<DisplayType>> value) {
    privateDisplayProtocol = value;
}
#end_block

#method_before
public EntityModel getProvisioning() {
    return privateProvisioning;
}
#method_after
public EntityModel<Boolean> getProvisioning() {
    return privateProvisioning;
}
#end_block

#method_before
private void setProvisioning(NotChangableForVmInPoolEntityModel value) {
    privateProvisioning = value;
}
#method_after
private void setProvisioning(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateProvisioning = value;
}
#end_block

#method_before
public EntityModel getProvisioningThin_IsSelected() {
    return privateProvisioningThin_IsSelected;
}
#method_after
public EntityModel<Boolean> getProvisioningThin_IsSelected() {
    return privateProvisioningThin_IsSelected;
}
#end_block

#method_before
public void setProvisioningThin_IsSelected(NotChangableForVmInPoolEntityModel value) {
    privateProvisioningThin_IsSelected = value;
}
#method_after
public void setProvisioningThin_IsSelected(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateProvisioningThin_IsSelected = value;
}
#end_block

#method_before
public EntityModel getProvisioningClone_IsSelected() {
    return privateProvisioningClone_IsSelected;
}
#method_after
public EntityModel<Boolean> getProvisioningClone_IsSelected() {
    return privateProvisioningClone_IsSelected;
}
#end_block

#method_before
public void setProvisioningClone_IsSelected(NotChangableForVmInPoolEntityModel value) {
    privateProvisioningClone_IsSelected = value;
}
#method_after
public void setProvisioningClone_IsSelected(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateProvisioningClone_IsSelected = value;
}
#end_block

#method_before
public ListModel getPriority() {
    return privatePriority;
}
#method_after
public ListModel<EntityModel<Integer>> getPriority() {
    return privatePriority;
}
#end_block

#method_before
private void setPriority(NotChangableForVmInPoolListModel value) {
    privatePriority = value;
}
#method_after
private void setPriority(NotChangableForVmInPoolListModel<EntityModel<Integer>> value) {
    privatePriority = value;
}
#end_block

#method_before
public EntityModel getIsHighlyAvailable() {
    return privateIsHighlyAvailable;
}
#method_after
public EntityModel<Boolean> getIsHighlyAvailable() {
    return privateIsHighlyAvailable;
}
#end_block

#method_before
private void setIsHighlyAvailable(NotChangableForVmInPoolEntityModel value) {
    privateIsHighlyAvailable = value;
}
#method_after
private void setIsHighlyAvailable(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsHighlyAvailable = value;
}
#end_block

#method_before
public ListModel getFirstBootDevice() {
    return privateFirstBootDevice;
}
#method_after
public ListModel<EntityModel<BootSequence>> getFirstBootDevice() {
    return privateFirstBootDevice;
}
#end_block

#method_before
private void setFirstBootDevice(NotChangableForVmInPoolListModel value) {
    privateFirstBootDevice = value;
}
#method_after
private void setFirstBootDevice(NotChangableForVmInPoolListModel<EntityModel<BootSequence>> value) {
    privateFirstBootDevice = value;
}
#end_block

#method_before
public ListModel getSecondBootDevice() {
    return privateSecondBootDevice;
}
#method_after
public ListModel<EntityModel<BootSequence>> getSecondBootDevice() {
    return privateSecondBootDevice;
}
#end_block

#method_before
private void setSecondBootDevice(NotChangableForVmInPoolListModel value) {
    privateSecondBootDevice = value;
}
#method_after
private void setSecondBootDevice(NotChangableForVmInPoolListModel<EntityModel<BootSequence>> value) {
    privateSecondBootDevice = value;
}
#end_block

#method_before
public ListModel getCdImage() {
    return privateCdImage;
}
#method_after
public ListModel<String> getCdImage() {
    return privateCdImage;
}
#end_block

#method_before
private void setCdImage(NotChangableForVmInPoolListModel value) {
    privateCdImage = value;
}
#method_after
private void setCdImage(NotChangableForVmInPoolListModel<String> value) {
    privateCdImage = value;
}
#end_block

#method_before
public EntityModel getCdAttached() {
    return cdAttached;
}
#method_after
public EntityModel<Boolean> getCdAttached() {
    return cdAttached;
}
#end_block

#method_before
public void setCdAttached(NotChangableForVmInPoolEntityModel value) {
    cdAttached = value;
}
#method_after
public void setCdAttached(NotChangableForVmInPoolEntityModel<Boolean> value) {
    cdAttached = value;
}
#end_block

#method_before
public EntityModel getInitrd_path() {
    return privateInitrd_path;
}
#method_after
public EntityModel<String> getInitrd_path() {
    return privateInitrd_path;
}
#end_block

#method_before
private void setInitrd_path(NotChangableForVmInPoolEntityModel value) {
    privateInitrd_path = value;
}
#method_after
private void setInitrd_path(NotChangableForVmInPoolEntityModel<String> value) {
    privateInitrd_path = value;
}
#end_block

#method_before
public EntityModel getKernel_path() {
    return privateKernel_path;
}
#method_after
public EntityModel<String> getKernel_path() {
    return privateKernel_path;
}
#end_block

#method_before
private void setKernel_path(NotChangableForVmInPoolEntityModel value) {
    privateKernel_path = value;
}
#method_after
private void setKernel_path(NotChangableForVmInPoolEntityModel<String> value) {
    privateKernel_path = value;
}
#end_block

#method_before
public EntityModel getKernel_parameters() {
    return privateKernel_parameters;
}
#method_after
public EntityModel<String> getKernel_parameters() {
    return privateKernel_parameters;
}
#end_block

#method_before
private void setKernel_parameters(NotChangableForVmInPoolEntityModel value) {
    privateKernel_parameters = value;
}
#method_after
private void setKernel_parameters(NotChangableForVmInPoolEntityModel<String> value) {
    privateKernel_parameters = value;
}
#end_block

#method_before
public EntityModel getCustomProperties() {
    return privateCustomProperties;
}
#method_after
public EntityModel<String> getCustomProperties() {
    return privateCustomProperties;
}
#end_block

#method_before
private void setCustomProperties(NotChangableForVmInPoolEntityModel value) {
    privateCustomProperties = value;
}
#method_after
private void setCustomProperties(NotChangableForVmInPoolEntityModel<String> value) {
    privateCustomProperties = value;
}
#end_block

#method_before
public EntityModel getIsAutoAssign() {
    return privateIsAutoAssign;
}
#method_after
public EntityModel<Boolean> getIsAutoAssign() {
    return privateIsAutoAssign;
}
#end_block

#method_before
public void setIsAutoAssign(NotChangableForVmInPoolEntityModel value) {
    privateIsAutoAssign = value;
}
#method_after
public void setIsAutoAssign(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsAutoAssign = value;
}
#end_block

#method_before
public EntityModel getHostCpu() {
    return hostCpu;
}
#method_after
public EntityModel<Boolean> getHostCpu() {
    return hostCpu;
}
#end_block

#method_before
public void setHostCpu(NotChangableForVmInPoolEntityModel hostCpu) {
    this.hostCpu = hostCpu;
}
#method_after
public void setHostCpu(NotChangableForVmInPoolEntityModel<Boolean> hostCpu) {
    this.hostCpu = hostCpu;
}
#end_block

#method_before
public ListModel getMigrationMode() {
    return migrationMode;
}
#method_after
public ListModel<MigrationSupport> getMigrationMode() {
    return migrationMode;
}
#end_block

#method_before
public void setMigrationMode(NotChangableForVmInPoolListModel value) {
    migrationMode = value;
}
#method_after
public void setMigrationMode(NotChangableForVmInPoolListModel<MigrationSupport> value) {
    migrationMode = value;
}
#end_block

#method_before
public EntityModel getIsTemplatePublic() {
    return privateIsTemplatePublic;
}
#method_after
public EntityModel<Boolean> getIsTemplatePublic() {
    return privateIsTemplatePublic;
}
#end_block

#method_before
private void setIsTemplatePublic(NotChangableForVmInPoolEntityModel value) {
    privateIsTemplatePublic = value;
}
#method_after
private void setIsTemplatePublic(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsTemplatePublic = value;
}
#end_block

#method_before
public EntityModel getCpuPinning() {
    return cpuPinning;
}
#method_after
public EntityModel<String> getCpuPinning() {
    return cpuPinning;
}
#end_block

#method_before
public void setCpuPinning(NotChangableForVmInPoolEntityModel cpuPinning) {
    this.cpuPinning = cpuPinning;
}
#method_after
public void setCpuPinning(NotChangableForVmInPoolEntityModel<String> cpuPinning) {
    this.cpuPinning = cpuPinning;
}
#end_block

#method_before
public EntityModel getCpuSharesAmount() {
    return cpuSharesAmount;
}
#method_after
public EntityModel<Integer> getCpuSharesAmount() {
    return cpuSharesAmount;
}
#end_block

#method_before
public void setCpuSharesAmount(NotChangableForVmInPoolEntityModel cpuSharesAmount) {
    this.cpuSharesAmount = cpuSharesAmount;
}
#method_after
public void setCpuSharesAmount(NotChangableForVmInPoolEntityModel<Integer> cpuSharesAmount) {
    this.cpuSharesAmount = cpuSharesAmount;
}
#end_block

#method_before
public ListModel getCpuSharesAmountSelection() {
    return cpuSharesAmountSelection;
}
#method_after
public ListModel<CpuSharesAmount> getCpuSharesAmountSelection() {
    return cpuSharesAmountSelection;
}
#end_block

#method_before
public void setCpuSharesAmountSelection(NotChangableForVmInPoolListModel cpuSharesAmountSelection) {
    this.cpuSharesAmountSelection = cpuSharesAmountSelection;
}
#method_after
public void setCpuSharesAmountSelection(NotChangableForVmInPoolListModel<CpuSharesAmount> cpuSharesAmountSelection) {
    this.cpuSharesAmountSelection = cpuSharesAmountSelection;
}
#end_block

#method_before
public ListModel getVncKeyboardLayout() {
    return vncKeyboardLayout;
}
#method_after
public ListModel<String> getVncKeyboardLayout() {
    return vncKeyboardLayout;
}
#end_block

#method_before
public void setVncKeyboardLayout(ListModel vncKeyboardLayout) {
    this.vncKeyboardLayout = vncKeyboardLayout;
}
#method_after
public void setVncKeyboardLayout(ListModel<String> vncKeyboardLayout) {
    this.vncKeyboardLayout = vncKeyboardLayout;
}
#end_block

#method_before
public void initialize(SystemTreeItemModel SystemTreeSelectedItem) {
    super.initialize();
    setHash(getHashName() + new Date());
    getMemSize().setEntity(256);
    getMinAllocatedMemory().setEntity(256);
    getIsStateless().setEntity(false);
    getIsRunAndPause().setEntity(false);
    getIsSmartcardEnabled().setEntity(false);
    isConsoleDeviceEnabled.setEntity(false);
    getIsHighlyAvailable().setEntity(false);
    getIsAutoAssign().setEntity(true);
    getIsTemplatePublic().setEntity(true);
    getIsSingleQxlEnabled().setEntity(false);
    getHostCpu().setEntity(false);
    getMigrationMode().setIsChangable(true);
    getCdImage().setIsChangable(false);
    initOSType();
    initDisplayProtocol();
    initFirstBootDevice();
    initNumOfMonitors();
    initAllowConsoleReconnect();
    initMinimalVmMemSize();
    initMaximalVmMemSize32OS();
    initMigrationMode();
    initVncKeyboardLayout();
    behavior.initialize(SystemTreeSelectedItem);
}
#method_after
public void initialize(SystemTreeItemModel SystemTreeSelectedItem) {
    super.initialize();
    setHash(getHashName() + new Date());
    getMemSize().setEntity(256);
    getMinAllocatedMemory().setEntity(256);
    getIsStateless().setEntity(false);
    getIsRunAndPause().setEntity(false);
    getIsSmartcardEnabled().setEntity(false);
    isConsoleDeviceEnabled.setEntity(false);
    getIsHighlyAvailable().setEntity(false);
    getIsAutoAssign().setEntity(true);
    getIsTemplatePublic().setEntity(true);
    getBehavior().enableSinglePCI(false);
    getHostCpu().setEntity(false);
    getMigrationMode().setIsChangable(true);
    getCdImage().setIsChangable(false);
    initDisplayProtocol();
    initFirstBootDevice();
    initNumOfMonitors();
    initAllowConsoleReconnect();
    initMinimalVmMemSize();
    initMaximalVmMemSize32OS();
    initMigrationMode();
    initVncKeyboardLayout();
    behavior.initialize(SystemTreeSelectedItem);
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(Frontend.QueryStartedEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.QueryCompleteEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVmType()) {
            vmTypeChanged();
        } else if (sender == getDataCenterWithClustersList()) {
            dataCenterWithClusterSelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getTemplate()) {
            template_SelectedItemChanged(sender, args);
        } else if (sender == getTimeZone()) {
            timeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            defaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            oSType_SelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            firstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            displayProtocol_SelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            numOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            coresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getCpuSharesAmountSelection()) {
            behavior.updateCpuSharesAmountChangeability();
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        if (sender == getMemSize()) {
            memSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            totalCPUCores_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getProvisioning()) {
            provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if ((Boolean) getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if ((Boolean) getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        } else if (sender == getWatchdogModel()) {
            WatchdogModel_EntityChanged(sender, args);
        } else if (sender == getIsHighlyAvailable()) {
            behavior.updateMigrationAvailability();
        }
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(Frontend.getInstance().getQueryStartedEventDefinition()) && StringHelper.stringsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryCompleteEventDefinition()) && StringHelper.stringsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVmType()) {
            vmTypeChanged();
        } else if (sender == getDataCenterWithClustersList()) {
            dataCenterWithClusterSelectedItemChanged(sender, args);
            updateDisplayProtocol();
            initUsbPolicy();
        } else if (sender == getTemplate()) {
            template_SelectedItemChanged(sender, args);
        } else if (sender == getTimeZone()) {
            timeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            defaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            oSType_SelectedItemChanged(sender, args);
            updateDisplayProtocol();
            initUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            firstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            displayProtocol_SelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            numOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            coresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getCpuSharesAmountSelection()) {
            behavior.updateCpuSharesAmountChangeability();
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        if (sender == getMemSize()) {
            memSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            totalCPUCores_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getProvisioning()) {
            provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if (getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if (getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        } else if (sender == getWatchdogModel()) {
            WatchdogModel_EntityChanged(sender, args);
        } else if (sender == getIsHighlyAvailable()) {
            behavior.updateMigrationAvailability();
        }
    }
}
#end_block

#method_before
private void vmTypeChanged() {
    behavior.vmTypeChanged(((VmType) getVmType().getSelectedItem()));
}
#method_after
private void vmTypeChanged() {
    behavior.vmTypeChanged(getVmType().getSelectedItem());
}
#end_block

#method_before
protected void initNumOfMonitors() {
    AsyncDataProvider.getNumOfMonitorList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            Integer oldNumOfMonitors = null;
            if (model.getNumOfMonitors().getSelectedItem() != null) {
                oldNumOfMonitors = (Integer) model.getNumOfMonitors().getSelectedItem();
            }
            ArrayList<Integer> numOfMonitors = (ArrayList<Integer>) returnValue;
            model.getNumOfMonitors().setItems(numOfMonitors);
            if (oldNumOfMonitors != null) {
                model.getNumOfMonitors().setSelectedItem(oldNumOfMonitors);
            }
        }
    }, getHash()));
}
#method_after
protected void initNumOfMonitors() {
    AsyncDataProvider.getNumOfMonitorList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            Integer oldNumOfMonitors = null;
            if (model.getNumOfMonitors().getSelectedItem() != null) {
                oldNumOfMonitors = model.getNumOfMonitors().getSelectedItem();
            }
            ArrayList<Integer> numOfMonitors = (ArrayList<Integer>) returnValue;
            model.getNumOfMonitors().setItems(numOfMonitors);
            if (oldNumOfMonitors != null) {
                model.getNumOfMonitors().setSelectedItem(oldNumOfMonitors);
            }
        }
    }, getHash()));
}
#end_block

#method_before
protected void initAllowConsoleReconnect() {
    getAllowConsoleReconnect().setEntity(true);
}
#method_after
protected void initAllowConsoleReconnect() {
    getAllowConsoleReconnect().setEntity(getVmType().getSelectedItem() == VmType.Server);
}
#end_block

#method_before
private void initUsbPolicy() {
    VDSGroup cluster = getSelectedCluster();
    Integer osType = (Integer) getOSType().getSelectedItem();
    DisplayType displayType = (DisplayType) (getDisplayProtocol().getSelectedItem() != null ? ((EntityModel) getDisplayProtocol().getSelectedItem()).getEntity() : null);
    if (osType == null || cluster == null || displayType == null) {
        return;
    }
    getUsbPolicy().setIsChangable(true);
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) > 0) {
        if (AsyncDataProvider.isWindowsOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED));
            getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
            getUsbPolicy().setIsChangable(false);
        }
    }
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) <= 0) {
        if (AsyncDataProvider.isLinuxOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY, UsbPolicy.ENABLED_NATIVE));
        }
    }
    if (displayType != DisplayType.qxl) {
        getUsbPolicy().setIsChangable(false);
    }
    getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
}
#method_after
private void initUsbPolicy() {
    VDSGroup cluster = getSelectedCluster();
    Integer osType = getOSType().getSelectedItem();
    DisplayType displayType = (getDisplayProtocol().getSelectedItem() != null ? getDisplayProtocol().getSelectedItem().getEntity() : null);
    if (osType == null || cluster == null || displayType == null) {
        return;
    }
    getUsbPolicy().setIsChangable(true);
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) > 0) {
        if (AsyncDataProvider.isWindowsOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED));
            getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
            getUsbPolicy().setIsChangable(false);
        }
    }
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) <= 0) {
        if (AsyncDataProvider.isLinuxOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY, UsbPolicy.ENABLED_NATIVE));
        }
    }
    if (displayType != DisplayType.qxl) {
        getUsbPolicy().setIsChangable(false);
    }
    getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
}
#end_block

#method_before
private void updateMaximalVmMemSize() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return;
    }
    VDSGroup cluster = dataCenterWithCluster.getCluster();
    if (cluster != null) {
        AsyncDataProvider.getMaximalVmMemSize64OS(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                UnitVmModel vmModel = (UnitVmModel) target;
                vmModel.set_MaxMemSize64((Integer) returnValue);
            }
        }, getHash()), cluster.getcompatibility_version().toString());
    }
}
#method_after
private void updateMaximalVmMemSize() {
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return;
    }
    VDSGroup cluster = dataCenterWithCluster.getCluster();
    if (cluster != null) {
        AsyncDataProvider.getMaximalVmMemSize64OS(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                UnitVmModel vmModel = (UnitVmModel) target;
                vmModel.set_MaxMemSize64((Integer) returnValue);
            }
        }, getHash()), cluster.getcompatibility_version().toString());
    }
}
#end_block

#method_before
private void initDisplayProtocol() {
    ArrayList<EntityModel> displayProtocolOptions = new ArrayList<EntityModel>();
    EntityModel spiceProtocol = new EntityModel();
    spiceProtocol.setTitle(ConstantsManager.getInstance().getConstants().spiceTitle());
    spiceProtocol.setEntity(DisplayType.qxl);
    EntityModel vncProtocol = new EntityModel();
    vncProtocol.setTitle(ConstantsManager.getInstance().getConstants().VNCTitle());
    vncProtocol.setEntity(DisplayType.vnc);
    displayProtocolOptions.add(spiceProtocol);
    displayProtocolOptions.add(vncProtocol);
    getDisplayProtocol().setItems(displayProtocolOptions);
    getDisplayProtocol().getSelectedItemChangedEvent().addListener(this);
}
#method_after
private void initDisplayProtocol() {
    getDisplayProtocol().getSelectedItemChangedEvent().addListener(this);
}
#end_block

#method_before
private void initFirstBootDevice() {
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().hardDiskTitle());
    tempVar.setEntity(BootSequence.C);
    EntityModel hardDiskOption = tempVar;
    ArrayList<EntityModel> firstBootDeviceItems = new ArrayList<EntityModel>();
    firstBootDeviceItems.add(hardDiskOption);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cdromTitle());
    tempVar2.setEntity(BootSequence.D);
    firstBootDeviceItems.add(tempVar2);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().networkPXETitle());
    tempVar3.setEntity(BootSequence.N);
    firstBootDeviceItems.add(tempVar3);
    getFirstBootDevice().setItems(firstBootDeviceItems);
    getFirstBootDevice().setSelectedItem(hardDiskOption);
}
#method_after
private void initFirstBootDevice() {
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().hardDiskTitle());
    tempVar.setEntity(BootSequence.C);
    EntityModel hardDiskOption = tempVar;
    List<EntityModel<BootSequence>> firstBootDeviceItems = new ArrayList<EntityModel<BootSequence>>();
    firstBootDeviceItems.add(hardDiskOption);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cdromTitle());
    tempVar2.setEntity(BootSequence.D);
    firstBootDeviceItems.add(tempVar2);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().networkPXETitle());
    tempVar3.setEntity(BootSequence.N);
    firstBootDeviceItems.add(tempVar3);
    getFirstBootDevice().setItems(firstBootDeviceItems);
    getFirstBootDevice().setSelectedItem(hardDiskOption);
}
#end_block

#method_before
private void dataCenterWithClusterSelectedItemChanged(Object sender, EventArgs args) {
    behavior.dataCenterWithClusterSelectedItemChanged();
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster != null && dataCenterWithCluster.getDataCenter() != null) {
        getDisksAllocationModel().setQuotaEnforcementType(dataCenterWithCluster.getDataCenter().getQuotaEnforcementType());
    }
    updateMaximalVmMemSize();
}
#method_after
private void dataCenterWithClusterSelectedItemChanged(Object sender, EventArgs args) {
    behavior.dataCenterWithClusterSelectedItemChanged();
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster != null && dataCenterWithCluster.getDataCenter() != null) {
        getDisksAllocationModel().setQuotaEnforcementType(dataCenterWithCluster.getDataCenter().getQuotaEnforcementType());
    }
    updateMaximalVmMemSize();
    handleQxlClusterLevel();
    updateWatchdogModels();
}
#end_block

#method_before
private void template_SelectedItemChanged(Object sender, EventArgs args) {
    behavior.template_SelectedItemChanged();
}
#method_after
private void template_SelectedItemChanged(Object sender, EventArgs args) {
    behavior.template_SelectedItemChanged();
    behavior.updateMigrationForLocalSD();
}
#end_block

#method_before
private void oSType_SelectedItemChanged(Object sender, EventArgs args) {
    Integer osType = (Integer) getOSType().getSelectedItem();
    setIsWindowsOS(AsyncDataProvider.isWindowsOsType(osType));
    setIsLinuxOS(AsyncDataProvider.isLinuxOsType(osType));
    getInitrd_path().setIsChangable(getIsLinuxOS());
    getInitrd_path().setIsAvailable(getIsLinuxOS());
    getKernel_path().setIsChangable(getIsLinuxOS());
    getKernel_path().setIsAvailable(getIsLinuxOS());
    getKernel_parameters().setIsChangable(getIsLinuxOS());
    getKernel_parameters().setIsAvailable(getIsLinuxOS());
    getDomain().setIsChangable(getIsWindowsOS());
    getBehavior().updateDefaultTimeZone();
    updateWatchdogModels(osType);
}
#method_after
private void oSType_SelectedItemChanged(Object sender, EventArgs args) {
    Integer osType = getOSType().getSelectedItem();
    setIsWindowsOS(AsyncDataProvider.isWindowsOsType(osType));
    setIsLinuxOS(AsyncDataProvider.isLinuxOsType(osType));
    getInitrd_path().setIsChangable(getIsLinuxOS());
    getInitrd_path().setIsAvailable(getIsLinuxOS());
    getKernel_path().setIsChangable(getIsLinuxOS());
    getKernel_path().setIsAvailable(getIsLinuxOS());
    getKernel_parameters().setIsChangable(getIsLinuxOS());
    getKernel_parameters().setIsAvailable(getIsLinuxOS());
    getDomain().setIsChangable(getIsWindowsOS());
    getBehavior().updateDefaultTimeZone();
    handleQxlClusterLevel();
    updateWatchdogModels(osType);
}
#end_block

#method_before
private void updateWatchdogModels(Integer osType) {
    VDSGroup cluster = getSelectedCluster();
    if (osType != null && cluster != null) {
        AsyncQuery asyncQuery = new AsyncQuery();
        asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                ArrayList<String> watchDogModels = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
                watchDogModels.add(0, null);
                getWatchdogModel().setItems((ArrayList<String>) watchDogModels);
            }
        };
        AsyncDataProvider.getWatchDogModels(osType, cluster.getcompatibility_version(), asyncQuery);
    }
}
#method_after
private void updateWatchdogModels() {
    updateWatchdogModels((Integer) getOSType().getSelectedItem());
}
#end_block

#method_before
private void updateWatchdogModels(Integer osType) {
    VDSGroup cluster = getSelectedCluster();
    if (osType != null && cluster != null) {
        AsyncQuery asyncQuery = new AsyncQuery();
        asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                ArrayList<String> watchDogModels = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
                watchDogModels.add(0, null);
                getWatchdogModel().setItems((ArrayList<String>) watchDogModels);
            }
        };
        AsyncDataProvider.getWatchDogModels(osType, cluster.getcompatibility_version(), asyncQuery);
    }
}
#method_after
private void updateWatchdogModels(Integer osType) {
    VDSGroup cluster = getSelectedCluster();
    if (osType != null && cluster != null && getWatchdogModel() != null) {
        AsyncQuery asyncQuery = new AsyncQuery();
        asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                updateWatchdogItems((HashSet<VmWatchdogType>) ((VdcQueryReturnValue) returnValue).getReturnValue());
            }
        };
        AsyncDataProvider.getVmWatchdogTypes(osType, cluster.getcompatibility_version(), asyncQuery);
    }
}
#end_block

#method_before
private void firstBootDevice_SelectedItemChanged(Object sender, EventArgs args) {
    EntityModel entityModel = (EntityModel) getFirstBootDevice().getSelectedItem();
    BootSequence firstDevice = (BootSequence) entityModel.getEntity();
    ArrayList<EntityModel> list = new ArrayList<EntityModel>();
    for (Object item : getFirstBootDevice().getItems()) {
        EntityModel a = (EntityModel) item;
        if ((BootSequence) a.getEntity() != firstDevice) {
            list.add(a);
        }
    }
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().noneTitle());
    EntityModel noneOption = tempVar;
    list.add(0, noneOption);
    getSecondBootDevice().setItems(list);
    getSecondBootDevice().setSelectedItem(noneOption);
}
#method_after
private void firstBootDevice_SelectedItemChanged(Object sender, EventArgs args) {
    EntityModel<BootSequence> entityModel = getFirstBootDevice().getSelectedItem();
    BootSequence firstDevice = entityModel.getEntity();
    List<EntityModel<BootSequence>> list = new ArrayList<EntityModel<BootSequence>>();
    for (EntityModel<BootSequence> item : getFirstBootDevice().getItems()) {
        if (item.getEntity() != firstDevice) {
            list.add(item);
        }
    }
    EntityModel<BootSequence> tempVar = new EntityModel<BootSequence>();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().noneTitle());
    EntityModel<BootSequence> noneOption = tempVar;
    list.add(0, noneOption);
    getSecondBootDevice().setItems(list);
    getSecondBootDevice().setSelectedItem(noneOption);
}
#end_block

#method_before
private void displayProtocol_SelectedItemChanged(Object sender, EventArgs args) {
    EntityModel entityModel = (EntityModel) getDisplayProtocol().getSelectedItem();
    if (entityModel == null) {
        return;
    }
    DisplayType type = (DisplayType) entityModel.getEntity();
    if (type == DisplayType.vnc) {
        getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED);
        getIsSmartcardEnabled().setEntity(false);
    }
    getBehavior().updateSingleQxl(type == DisplayType.qxl);
    getUsbPolicy().setIsChangable(type == DisplayType.qxl);
    getIsSmartcardEnabled().setIsChangable(type == DisplayType.qxl);
    getVncKeyboardLayout().setIsAvailable(type == DisplayType.vnc);
    updateNumOfMonitors();
}
#method_after
private void displayProtocol_SelectedItemChanged(Object sender, EventArgs args) {
    if (getDisplayType() == null) {
        return;
    }
    DisplayType type = getDisplayType();
    if (type == DisplayType.vnc) {
        getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED);
        getIsSmartcardEnabled().setEntity(false);
    }
    handleQxlClusterLevel();
    getUsbPolicy().setIsChangable(type == DisplayType.qxl);
    getIsSmartcardEnabled().setIsChangable(type == DisplayType.qxl);
    getVncKeyboardLayout().setIsAvailable(type == DisplayType.vnc);
    updateNumOfMonitors();
}
#end_block

#method_before
private boolean isVncSelected() {
    boolean isVnc = false;
    if (getDisplayProtocol().getSelectedItem() != null) {
        DisplayType displayType = (DisplayType) ((EntityModel) getDisplayProtocol().getSelectedItem()).getEntity();
        isVnc = displayType == DisplayType.vnc;
    }
    return isVnc;
}
#method_after
private boolean isVncSelected() {
    boolean isVnc = false;
    if (getDisplayProtocol().getSelectedItem() != null) {
        DisplayType displayType = getDisplayProtocol().getSelectedItem().getEntity();
        isVnc = displayType == DisplayType.vnc;
    }
    return isVnc;
}
#end_block

#method_before
public BootSequence getBootSequence() {
    EntityModel firstSelectedItem = (EntityModel) getFirstBootDevice().getSelectedItem();
    EntityModel secondSelectedItem = (EntityModel) getSecondBootDevice().getSelectedItem();
    String firstSelectedString = // $NON-NLS-1$
    firstSelectedItem.getEntity() == null ? "" : firstSelectedItem.getEntity().toString();
    String secondSelectedString = // $NON-NLS-1$
    secondSelectedItem.getEntity() == null ? "" : secondSelectedItem.getEntity().toString();
    return BootSequence.valueOf(firstSelectedString + secondSelectedString);
}
#method_after
public BootSequence getBootSequence() {
    EntityModel<BootSequence> firstSelectedItem = getFirstBootDevice().getSelectedItem();
    EntityModel<BootSequence> secondSelectedItem = getSecondBootDevice().getSelectedItem();
    String firstSelectedString = // $NON-NLS-1$
    firstSelectedItem.getEntity() == null ? "" : firstSelectedItem.getEntity().toString();
    String secondSelectedString = // $NON-NLS-1$
    secondSelectedItem.getEntity() == null ? "" : secondSelectedItem.getEntity().toString();
    return BootSequence.valueOf(firstSelectedString + secondSelectedString);
}
#end_block

#method_before
public void setBootSequence(BootSequence value) {
    ArrayList<BootSequence> items = new ArrayList<BootSequence>();
    for (char a : value.toString().toCharArray()) {
        items.add(BootSequence.valueOf(String.valueOf(a)));
    }
    Object firstBootDevice = null;
    for (Object item : getFirstBootDevice().getItems()) {
        EntityModel a = (EntityModel) item;
        if ((BootSequence) a.getEntity() == Linq.firstOrDefault(items)) {
            firstBootDevice = a;
        }
    }
    getFirstBootDevice().setSelectedItem(firstBootDevice);
    ArrayList<EntityModel> secondDeviceOptions = Linq.<EntityModel>cast(getSecondBootDevice().getItems());
    if (items.size() > 1) {
        BootSequence last = items.get(items.size() - 1);
        for (EntityModel a : secondDeviceOptions) {
            if (a.getEntity() != null && (BootSequence) a.getEntity() == last) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    } else {
        for (EntityModel a : secondDeviceOptions) {
            if (a.getEntity() == null) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    }
}
#method_after
public void setBootSequence(BootSequence value) {
    ArrayList<BootSequence> items = new ArrayList<BootSequence>();
    for (char a : value.toString().toCharArray()) {
        items.add(BootSequence.valueOf(String.valueOf(a)));
    }
    EntityModel<BootSequence> firstBootDevice = null;
    for (EntityModel<BootSequence> item : getFirstBootDevice().getItems()) {
        if (item.getEntity() == Linq.firstOrDefault(items)) {
            firstBootDevice = item;
        }
    }
    getFirstBootDevice().setSelectedItem(firstBootDevice);
    Iterable<EntityModel<BootSequence>> secondDeviceOptions = getSecondBootDevice().getItems();
    if (items.size() > 1) {
        BootSequence last = items.get(items.size() - 1);
        for (EntityModel<BootSequence> a : secondDeviceOptions) {
            if (a.getEntity() != null && a.getEntity() == last) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    } else {
        for (EntityModel<BootSequence> a : secondDeviceOptions) {
            if (a.getEntity() == null) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    }
}
#end_block

#method_before
protected void setupDataCenterWithClustersFromSystemTree(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    StoragePool dataCenter = getDataCenterAccordingSystemTree(model, dataCenters);
    List<VDSGroup> possibleClusters = getClusterAccordingSystemTree(model, clusters);
    if (dataCenter == null || possibleClusters == null) {
        getDataCenterWithClustersList().setIsChangable(false);
        return;
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (VDSGroup cluster : possibleClusters) {
        if (cluster.getStoragePoolId().equals(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#method_after
protected void setupDataCenterWithClustersFromSystemTree(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    StoragePool dataCenter = getDataCenterAccordingSystemTree(model, dataCenters);
    // the dataCenters are the entities just downloaded from server while the dataCenter can be a cached one from the system tree
    dataCenter = dataCenter == null ? null : findDataCenterById(dataCenters, dataCenter.getId());
    List<VDSGroup> possibleClusters = getClusterAccordingSystemTree(model, clusters);
    if (dataCenter == null || possibleClusters == null) {
        getDataCenterWithClustersList().setIsChangable(false);
        return;
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (VDSGroup cluster : possibleClusters) {
        if (cluster.getStoragePoolId() != null && cluster.getStoragePoolId().equals(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#end_block

#method_before
protected void setupDataCenterWithClusters(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    Map<Guid, List<VDSGroup>> dataCenterToCluster = new HashMap<Guid, List<VDSGroup>>();
    for (VDSGroup cluster : clusters) {
        if (!dataCenterToCluster.containsKey(cluster.getStoragePoolId())) {
            dataCenterToCluster.put(cluster.getStoragePoolId(), new ArrayList<VDSGroup>());
        }
        dataCenterToCluster.get(cluster.getStoragePoolId()).add(cluster);
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (StoragePool dataCenter : dataCenters) {
        for (VDSGroup cluster : dataCenterToCluster.get(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#method_after
protected void setupDataCenterWithClusters(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    Map<Guid, List<VDSGroup>> dataCenterToCluster = new HashMap<Guid, List<VDSGroup>>();
    for (VDSGroup cluster : clusters) {
        if (cluster.getStoragePoolId() == null) {
            continue;
        }
        if (!dataCenterToCluster.containsKey(cluster.getStoragePoolId())) {
            dataCenterToCluster.put(cluster.getStoragePoolId(), new ArrayList<VDSGroup>());
        }
        dataCenterToCluster.get(cluster.getStoragePoolId()).add(cluster);
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (StoragePool dataCenter : dataCenters) {
        for (VDSGroup cluster : dataCenterToCluster.get(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#end_block

#method_before
protected void selectDataCenterWithCluster(UnitVmModel model, Guid selectedCluster, List<DataCenterWithCluster> dataCentersWithClusters) {
    if (selectedCluster == null) {
        getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters));
    } else {
        model.getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters, new Linq.DataCenterWithClusterAccordingClusterPredicate((Guid) selectedCluster)));
    }
}
#method_after
protected void selectDataCenterWithCluster(UnitVmModel model, Guid selectedCluster, List<DataCenterWithCluster> dataCentersWithClusters) {
    if (selectedCluster == null) {
        getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters));
    } else {
        model.getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters, new Linq.DataCenterWithClusterAccordingClusterPredicate(selectedCluster)));
    }
}
#end_block

#method_before
private StoragePool findDataCenterById(List<StoragePool> list, Guid id) {
    for (StoragePool dc : list) {
        if (dc.getId().equals(id)) {
            return dc;
        }
    }
    return null;
}
#method_after
private StoragePool findDataCenterById(List<StoragePool> list, Guid id) {
    if (id == null) {
        return null;
    }
    for (StoragePool dc : list) {
        if (dc.getId().equals(id)) {
            return dc;
        }
    }
    return null;
}
#end_block

#method_before
public boolean validate() {
    getDataCenterWithClustersList().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getMemSize().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getMinAllocatedMemory().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getOSType().validateSelectedItem(new NotEmptyValidation[] { new NotEmptyValidation() });
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter != null && dataCenter.getQuotaEnforcementType() == QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) {
        getQuota().validateSelectedItem(new IValidation[] { new NotEmptyQuotaValidation() });
    }
    getTotalCPUCores().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, behavior.maxCpus), new TotalCpuCoresComposableValidation() });
    if (getOSType().getIsValid()) {
        Integer osType = (Integer) getOSType().getSelectedItem();
        getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation((getBehavior() instanceof TemplateVmModelBehavior || getBehavior() instanceof NewTemplateVmModelBehavior) ? VM_TEMPLATE_NAME_MAX_LIMIT : AsyncDataProvider.isWindowsOsType(osType) ? WINDOWS_VM_NAME_MAX_LIMIT : NON_WINDOWS_VM_NAME_MAX_LIMIT), isPoolTabValid ? new PoolNameValidation() : new I18NNameValidation() });
        getDescription().validateEntity(new IValidation[] { new LengthValidation(DESCRIPTION_MAX_LIMIT), new SpecialAsciiI18NOrNoneValidation() });
        AsyncQuery asyncQuery = new AsyncQuery();
        asyncQuery.setModel(this);
        asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                validateMemorySize(getMemSize(), (Integer) ((VdcQueryReturnValue) returnValue).getReturnValue(), _minMemSize);
                if (!(((UnitVmModel) model).getBehavior() instanceof TemplateVmModelBehavior)) {
                    // Minimum 'Physical Memory Guaranteed' is 1MB
                    validateMemorySize(getMinAllocatedMemory(), (Integer) getMemSize().getEntity(), 1);
                }
            }
        };
        if (getSelectedCluster() != null) {
            AsyncDataProvider.getOsMaxRam(osType, ((VDSGroup) getSelectedCluster()).getcompatibility_version(), asyncQuery);
        }
        getComment().validateEntity(new IValidation[] { new SpecialAsciiI18NOrNoneValidation() });
    }
    if (getIsAutoAssign().getEntity() != null && ((Boolean) getIsAutoAssign().getEntity()) == false) {
        getDefaultHost().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getDefaultHost().setIsValid(true);
    }
    getTemplate().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getDisksAllocationModel().validateEntity(new IValidation[] {});
    getCdImage().setIsValid(true);
    if (getCdImage().getIsChangable()) {
        getCdImage().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    if (getIsLinuxOS()) {
        getKernel_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getInitrd_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getKernel_parameters().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        // initrd path and kernel params require kernel path to be filled
        if (StringHelper.isNullOrEmpty((String) getKernel_path().getEntity())) {
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (!StringHelper.isNullOrEmpty((String) getInitrd_path().getEntity())) {
                getInitrd_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getInitrd_path().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getKernel_path().setIsValid(false);
            }
            if (!StringHelper.isNullOrEmpty((String) getKernel_parameters().getEntity())) {
                getKernel_parameters().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_parameters().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_path().setIsValid(false);
            }
        }
    }
    if (getCpuSharesAmount().getIsAvailable()) {
        getCpuSharesAmount().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, 262144) });
    }
    boolean customPropertySheetValid = getCustomPropertySheet().validate();
    setIsBootSequenceTabValid(true);
    setIsAllocationTabValid(getIsBootSequenceTabValid());
    setIsDisplayTabValid(getIsAllocationTabValid());
    setIsFirstRunTabValid(getIsDisplayTabValid());
    setIsGeneralTabValid(getIsFirstRunTabValid());
    setIsGeneralTabValid(getName().getIsValid() && getDescription().getIsValid() && getComment().getIsValid() && getDataCenterWithClustersList().getIsValid() && getTemplate().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid());
    setIsFirstRunTabValid(getDomain().getIsValid() && getTimeZone().getIsValid());
    setIsDisplayTabValid(getUsbPolicy().getIsValid() && getNumOfMonitors().getIsValid());
    setIsHostTabValid(getDefaultHost().getIsValid());
    setIsAllocationTabValid(getDisksAllocationModel().getIsValid() && getMinAllocatedMemory().getIsValid() && getCpuSharesAmount().getIsValid());
    setIsBootSequenceTabValid(getCdImage().getIsValid() && getKernel_path().getIsValid());
    setIsCustomPropertiesTabValid(customPropertySheetValid);
    return getName().getIsValid() && getDescription().getIsValid() && getDataCenterWithClustersList().getIsValid() && getDisksAllocationModel().getIsValid() && getTemplate().getIsValid() && getComment().getIsValid() && getDefaultHost().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid() && getNumOfMonitors().getIsValid() && getDomain().getIsValid() && getUsbPolicy().getIsValid() && getTimeZone().getIsValid() && getOSType().getIsValid() && getCdImage().getIsValid() && getKernel_path().getIsValid() && getInitrd_path().getIsValid() && getKernel_parameters().getIsValid() && getCpuSharesAmount().getIsValid() && behavior.validate() && customPropertySheetValid && getQuota().getIsValid();
}
#method_after
public boolean validate() {
    getDataCenterWithClustersList().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getMemSize().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getMinAllocatedMemory().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getOSType().validateSelectedItem(new NotEmptyValidation[] { new NotEmptyValidation() });
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter != null && dataCenter.getQuotaEnforcementType() == QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) {
        getQuota().validateSelectedItem(new IValidation[] { new NotEmptyQuotaValidation() });
    }
    getTotalCPUCores().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, behavior.maxCpus), new TotalCpuCoresComposableValidation() });
    if (getOSType().getIsValid()) {
        Integer osType = getOSType().getSelectedItem();
        getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation((getBehavior() instanceof TemplateVmModelBehavior || getBehavior() instanceof NewTemplateVmModelBehavior) ? VM_TEMPLATE_NAME_MAX_LIMIT : AsyncDataProvider.isWindowsOsType(osType) ? AsyncDataProvider.getMaxVmNameLengthWin() : AsyncDataProvider.getMaxVmNameLengthNonWin()), isPoolTabValid ? new PoolNameValidation() : new I18NNameValidation() });
        getDescription().validateEntity(new IValidation[] { new LengthValidation(DESCRIPTION_MAX_LIMIT), new SpecialAsciiI18NOrNoneValidation() });
        AsyncQuery asyncQuery = new AsyncQuery();
        asyncQuery.setModel(this);
        asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                validateMemorySize(getMemSize(), (Integer) ((VdcQueryReturnValue) returnValue).getReturnValue(), _minMemSize);
                if (!(((UnitVmModel) model).getBehavior() instanceof TemplateVmModelBehavior)) {
                    // Minimum 'Physical Memory Guaranteed' is 1MB
                    validateMemorySize(getMinAllocatedMemory(), getMemSize().getEntity(), 1);
                }
            }
        };
        if (getSelectedCluster() != null) {
            AsyncDataProvider.getOsMaxRam(osType, getSelectedCluster().getcompatibility_version(), asyncQuery);
        }
        getComment().validateEntity(new IValidation[] { new SpecialAsciiI18NOrNoneValidation() });
    }
    if (getIsAutoAssign().getEntity() != null && getIsAutoAssign().getEntity() == false) {
        getDefaultHost().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getDefaultHost().setIsValid(true);
    }
    getTemplate().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getDisksAllocationModel().validateEntity(new IValidation[] {});
    getCdImage().setIsValid(true);
    if (getCdImage().getIsChangable()) {
        getCdImage().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    if (getIsLinuxOS()) {
        getKernel_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getInitrd_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getKernel_parameters().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        // initrd path and kernel params require kernel path to be filled
        if (StringHelper.isNullOrEmpty(getKernel_path().getEntity())) {
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (!StringHelper.isNullOrEmpty(getInitrd_path().getEntity())) {
                getInitrd_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getInitrd_path().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getKernel_path().setIsValid(false);
            }
            if (!StringHelper.isNullOrEmpty(getKernel_parameters().getEntity())) {
                getKernel_parameters().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_parameters().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_path().setIsValid(false);
            }
        }
    }
    if (getCpuSharesAmount().getIsAvailable()) {
        getCpuSharesAmount().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, 262144) });
    }
    boolean customPropertySheetValid = getCustomPropertySheet().validate();
    setIsBootSequenceTabValid(true);
    setIsAllocationTabValid(getIsBootSequenceTabValid());
    setIsDisplayTabValid(getIsAllocationTabValid());
    setIsFirstRunTabValid(getIsDisplayTabValid());
    setIsGeneralTabValid(getIsFirstRunTabValid());
    setIsGeneralTabValid(getName().getIsValid() && getDescription().getIsValid() && getComment().getIsValid() && getDataCenterWithClustersList().getIsValid() && getTemplate().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid());
    setIsFirstRunTabValid(getDomain().getIsValid() && getTimeZone().getIsValid());
    setIsDisplayTabValid(getUsbPolicy().getIsValid() && getNumOfMonitors().getIsValid());
    setIsHostTabValid(getDefaultHost().getIsValid());
    setIsAllocationTabValid(getDisksAllocationModel().getIsValid() && getMinAllocatedMemory().getIsValid() && getCpuSharesAmount().getIsValid());
    setIsBootSequenceTabValid(getCdImage().getIsValid() && getKernel_path().getIsValid());
    setIsCustomPropertiesTabValid(customPropertySheetValid);
    return getName().getIsValid() && getDescription().getIsValid() && getDataCenterWithClustersList().getIsValid() && getDisksAllocationModel().getIsValid() && getTemplate().getIsValid() && getComment().getIsValid() && getDefaultHost().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid() && getNumOfMonitors().getIsValid() && getDomain().getIsValid() && getUsbPolicy().getIsValid() && getTimeZone().getIsValid() && getOSType().getIsValid() && getCdImage().getIsValid() && getKernel_path().getIsValid() && getInitrd_path().getIsValid() && getKernel_parameters().getIsValid() && getCpuSharesAmount().getIsValid() && behavior.validate() && customPropertySheetValid && getQuota().getIsValid();
}
#end_block

#method_before
@Override
public ValidationResult validate(Object value) {
    boolean isOk = behavior.isNumOfSocketsCorrect(Integer.parseInt(getTotalCPUCores().getEntity().toString()));
    ValidationResult res = new ValidationResult();
    res.setSuccess(isOk);
    res.setReasons(Arrays.asList(ConstantsManager.getInstance().getMessages().incorrectVCPUNumber()));
    return res;
}
#method_after
@Override
public ValidationResult validate(Object value) {
    boolean isOk = behavior.isNumOfSocketsCorrect(Integer.parseInt(getTotalCPUCores().getEntity()));
    ValidationResult res = new ValidationResult();
    res.setSuccess(isOk);
    res.setReasons(Arrays.asList(ConstantsManager.getInstance().getMessages().incorrectVCPUNumber()));
    return res;
}
#end_block

#method_before
public ListModel getPoolType() {
    return poolType;
}
#method_after
public ListModel<EntityModel<VmPoolType>> getPoolType() {
    return poolType;
}
#end_block

#method_before
protected void setPoolType(NotChangableForVmInPoolListModel value) {
    poolType = value;
}
#method_after
protected void setPoolType(NotChangableForVmInPoolListModel<EntityModel<VmPoolType>> value) {
    poolType = value;
}
#end_block

#method_before
public EntityModel getNumOfDesktops() {
    return numOfDesktops;
}
#method_after
public EntityModel<Integer> getNumOfDesktops() {
    return numOfDesktops;
}
#end_block

#method_before
protected void setNumOfDesktops(NotChangableForVmInPoolEntityModel value) {
    numOfDesktops = value;
}
#method_after
protected void setNumOfDesktops(NotChangableForVmInPoolEntityModel<Integer> value) {
    numOfDesktops = value;
}
#end_block

#method_before
public EntityModel getAssignedVms() {
    return assignedVms;
}
#method_after
public EntityModel<Integer> getAssignedVms() {
    return assignedVms;
}
#end_block

#method_before
public void setAssignedVms(NotChangableForVmInPoolEntityModel value) {
    assignedVms = value;
}
#method_after
public void setAssignedVms(NotChangableForVmInPoolEntityModel<Integer> value) {
    assignedVms = value;
}
#end_block

#method_before
public EntityModel getPrestartedVms() {
    return prestartedVms;
}
#method_after
public EntityModel<Integer> getPrestartedVms() {
    return prestartedVms;
}
#end_block

#method_before
protected void setPrestartedVms(NotChangableForVmInPoolEntityModel value) {
    prestartedVms = value;
}
#method_after
protected void setPrestartedVms(NotChangableForVmInPoolEntityModel<Integer> value) {
    prestartedVms = value;
}
#end_block

#method_before
public EntityModel getMaxAssignedVmsPerUser() {
    return maxAssignedVmsPerUser;
}
#method_after
public EntityModel<Integer> getMaxAssignedVmsPerUser() {
    return maxAssignedVmsPerUser;
}
#end_block

#method_before
public void setMaxAssignedVmsPerUser(NotChangableForVmInPoolEntityModel maxAssignedVmsPerUser) {
    this.maxAssignedVmsPerUser = maxAssignedVmsPerUser;
}
#method_after
public void setMaxAssignedVmsPerUser(NotChangableForVmInPoolEntityModel<Integer> maxAssignedVmsPerUser) {
    this.maxAssignedVmsPerUser = maxAssignedVmsPerUser;
}
#end_block

#method_before
@Override
public ListModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool())
        super.setIsChangable(value);
    return this;
}
#method_after
@Override
public ListModel<T> setIsChangable(boolean value) {
    if (!isVmAttachedToPool()) {
        super.setIsChangable(value);
    }
    return this;
}
#end_block

#method_before
@Override
public EntityModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool())
        super.setIsChangable(value);
    return this;
}
#method_after
@Override
public EntityModel<T> setIsChangable(boolean value) {
    if (!isVmAttachedToPool()) {
        super.setIsChangable(value);
    }
    return this;
}
#end_block

#method_before
@Override
public KeyValueModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool())
        super.setIsChangable(value);
    return this;
}
#method_after
@Override
public KeyValueModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool()) {
        super.setIsChangable(value);
    }
    return this;
}
#end_block

#method_before
public ListModel getWatchdogModel() {
    return watchdogModel;
}
#method_after
public ListModel<String> getWatchdogModel() {
    return watchdogModel;
}
#end_block

#method_before
public void setWatchdogModel(ListModel watchdogModel) {
    this.watchdogModel = watchdogModel;
}
#method_after
public void setWatchdogModel(ListModel<String> watchdogModel) {
    this.watchdogModel = watchdogModel;
}
#end_block

#method_before
public ListModel getWatchdogAction() {
    return watchdogAction;
}
#method_after
public ListModel<String> getWatchdogAction() {
    return watchdogAction;
}
#end_block

#method_before
public void setWatchdogAction(ListModel watchdogAction) {
    this.watchdogAction = watchdogAction;
}
#method_after
public void setWatchdogAction(ListModel<String> watchdogAction) {
    this.watchdogAction = watchdogAction;
}
#end_block

#method_before
public StoragePool getSelectedDataCenter() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getDataCenter();
}
#method_after
public StoragePool getSelectedDataCenter() {
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getDataCenter();
}
#end_block

#method_before
public VDSGroup getSelectedCluster() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getCluster();
}
#method_after
public VDSGroup getSelectedCluster() {
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getCluster();
}
#end_block

#method_before
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.RunQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#method_after
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#end_block

#method_before
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
}
#method_after
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
    initDisplayTypes();
    initNicHotplugSupportMap();
    initDiskHotpluggableInterfacesMap();
    initOsArchitecture();
}
#end_block

#method_before
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#method_after
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#end_block

#method_before
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#method_after
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#end_block

#method_before
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#method_after
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#end_block

#method_before
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#method_after
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#end_block

#method_before
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#method_after
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#end_block

#method_before
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#method_after
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#end_block

#method_before
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#method_after
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#end_block

#method_before
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#method_after
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#end_block

#method_before
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.RunQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#method_after
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#end_block

#method_before
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#method_after
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#end_block

#method_before
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#method_after
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#end_block

#method_before
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#method_after
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#end_block

#method_before
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#method_after
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#method_after
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#method_after
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#end_block

#method_before
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.Model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#method_after
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#end_block

#method_before
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.RunQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#method_after
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#end_block

#method_before
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#method_after
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#end_block

#method_before
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#method_after
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#end_block

#method_before
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.RunQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#method_after
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#method_after
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#end_block

#method_before
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<permissions>) source : new ArrayList<permissions>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#method_after
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Permissions>) source : new ArrayList<Permissions>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#end_block

#method_before
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#method_after
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#end_block

#method_before
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#method_after
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#end_block

#method_before
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.RunQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#method_after
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#end_block

#method_before
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#method_after
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#end_block

#method_before
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#method_after
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#end_block

#method_before
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#method_after
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#end_block

#method_before
public static void getPmOptions(AsyncQuery aQuery, String pmType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.Data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.RunQuery(VdcQueryType.GetAgentFenceOptions, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getPmOptions(AsyncQuery aQuery, String pmType, String version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.getInstance().runQuery(VdcQueryType.GetAgentFenceOptions, new GetAgentFenceOptionsQueryParameters(version), aQuery);
}
#end_block

#method_before
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.RunQuery(VdcQueryType.Search, sp, aQuery);
}
#method_after
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#end_block

#method_before
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#method_after
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#end_block

#method_before
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#method_after
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#end_block

#method_before
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#method_after
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#end_block

#method_before
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                tags tag = (tags) source;
                tags root = new tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new tags();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                Tags tag = (Tags) source;
                Tags root = new Tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new Tags();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<tags> ret = new ArrayList<tags>();
                for (tags tags : (ArrayList<tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new tags();
        }
    };
}
#method_after
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<Tags> ret = new ArrayList<Tags>();
                for (Tags tags : (ArrayList<Tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new Tags();
        }
    };
}
#end_block

#method_before
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#method_after
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#end_block

#method_before
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.RunQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#method_after
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.getInstance().runQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#end_block

#method_before
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#method_after
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.getInstance().runQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#end_block

#method_before
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#method_after
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#end_block

#method_before
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#method_after
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#end_block

#method_before
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#end_block

#method_before
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#method_after
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#end_block

#method_before
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.RunQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#method_after
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#end_block

#method_before
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#method_after
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#end_block

#method_before
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.RunQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#method_after
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.getInstance().runQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#end_block

#method_before
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#method_after
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getInterfaceOptionsForEditNetwork(final AsyncQuery asyncQuery, final ArrayList<VdsNetworkInterface> interfaceList, final VdsNetworkInterface originalInterface, Network networkToEdit, final Guid vdsID, final StringBuilder defaultInterfaceName) {
    final ArrayList<VdsNetworkInterface> ifacesOptions = new ArrayList<VdsNetworkInterface>();
    for (VdsNetworkInterface i : interfaceList) {
        if (StringHelper.isNullOrEmpty(i.getNetworkName()) && StringHelper.isNullOrEmpty(i.getBondName())) {
            ifacesOptions.add(i);
        }
    }
    if (// no vlan:
    originalInterface.getVlanId() == null) {
        // Filter out the Interfaces that have child vlan Interfaces
        getAllChildVlanInterfaces(vdsID, ifacesOptions, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void executed(FrontendMultipleQueryAsyncResult result) {
                ArrayList<VdsNetworkInterface> ifacesOptionsTemp = new ArrayList<VdsNetworkInterface>();
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                for (int i = 0; i < returnValueList.size(); i++) {
                    VdcQueryReturnValue returnValue = returnValueList.get(i);
                    if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
                        ArrayList<VdsNetworkInterface> childVlanInterfaces = (ArrayList<VdsNetworkInterface>) (returnValue.getReturnValue());
                        if (childVlanInterfaces.size() == 0) {
                            ifacesOptionsTemp.add(ifacesOptions.get(i));
                        }
                    }
                }
                ifacesOptions.clear();
                ifacesOptions.addAll(ifacesOptionsTemp);
                if (originalInterface.getBonded() != null && originalInterface.getBonded()) {
                    // (note that choosing one of them will break the bond):
                    for (VdsNetworkInterface i : interfaceList) {
                        if (StringHelper.stringsEqual(i.getBondName(), originalInterface.getName())) {
                            ifacesOptions.add(i);
                        }
                    }
                }
                // add the original interface as an option and set it as the default option:
                ifacesOptions.add(originalInterface);
                defaultInterfaceName.append(originalInterface.getName());
                asyncQuery.asyncCallback.onSuccess(asyncQuery.Model, ifacesOptions);
            }
        });
    } else // vlan:
    {
        getVlanParentInterface(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                final VdsNetworkInterface vlanParent = (VdsNetworkInterface) returnValue;
                if (vlanParent != null && vlanParent.getBonded() != null && vlanParent.getBonded()) {
                    interfaceHasSiblingVlanInterfaces(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model, Object returnValue) {
                            Boolean interfaceHasSiblingVlanInterfaces = (Boolean) returnValue;
                            if (!interfaceHasSiblingVlanInterfaces) {
                                // vlanParent.name).ToList());
                                for (VdsNetworkInterface i : interfaceList) {
                                    if (StringHelper.stringsEqual(i.getBondName(), vlanParent.getName())) {
                                        ifacesOptions.add(i);
                                    }
                                }
                            }
                            // the vlanParent should already be in ifacesOptions
                            // (since it has no network_name or bond_name).
                            defaultInterfaceName.append(vlanParent.getName());
                            asyncQuery.asyncCallback.onSuccess(asyncQuery.Model, ifacesOptions);
                        }
                    }));
                } else {
                    // (since it has no network_name or bond_name).
                    if (vlanParent != null)
                        defaultInterfaceName.append(vlanParent.getName());
                    asyncQuery.asyncCallback.onSuccess(asyncQuery.Model, ifacesOptions);
                }
            }
        }));
    }
}
#method_after
public static void getInterfaceOptionsForEditNetwork(final AsyncQuery asyncQuery, final ArrayList<VdsNetworkInterface> interfaceList, final VdsNetworkInterface originalInterface, Network networkToEdit, final Guid vdsID, final StringBuilder defaultInterfaceName) {
    final ArrayList<VdsNetworkInterface> ifacesOptions = new ArrayList<VdsNetworkInterface>();
    for (VdsNetworkInterface i : interfaceList) {
        if (StringHelper.isNullOrEmpty(i.getNetworkName()) && StringHelper.isNullOrEmpty(i.getBondName())) {
            ifacesOptions.add(i);
        }
    }
    if (// no vlan:
    originalInterface.getVlanId() == null) {
        // Filter out the Interfaces that have child vlan Interfaces
        getAllChildVlanInterfaces(vdsID, ifacesOptions, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void executed(FrontendMultipleQueryAsyncResult result) {
                ArrayList<VdsNetworkInterface> ifacesOptionsTemp = new ArrayList<VdsNetworkInterface>();
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                for (int i = 0; i < returnValueList.size(); i++) {
                    VdcQueryReturnValue returnValue = returnValueList.get(i);
                    if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
                        ArrayList<VdsNetworkInterface> childVlanInterfaces = (ArrayList<VdsNetworkInterface>) (returnValue.getReturnValue());
                        if (childVlanInterfaces.size() == 0) {
                            ifacesOptionsTemp.add(ifacesOptions.get(i));
                        }
                    }
                }
                ifacesOptions.clear();
                ifacesOptions.addAll(ifacesOptionsTemp);
                if (originalInterface.getBonded() != null && originalInterface.getBonded()) {
                    // (note that choosing one of them will break the bond):
                    for (VdsNetworkInterface i : interfaceList) {
                        if (StringHelper.stringsEqual(i.getBondName(), originalInterface.getName())) {
                            ifacesOptions.add(i);
                        }
                    }
                }
                // add the original interface as an option and set it as the default option:
                ifacesOptions.add(originalInterface);
                defaultInterfaceName.append(originalInterface.getName());
                asyncQuery.asyncCallback.onSuccess(asyncQuery.model, ifacesOptions);
            }
        });
    } else // vlan:
    {
        getVlanParentInterface(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                final VdsNetworkInterface vlanParent = (VdsNetworkInterface) returnValue;
                if (vlanParent != null && vlanParent.getBonded() != null && vlanParent.getBonded()) {
                    interfaceHasSiblingVlanInterfaces(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model, Object returnValue) {
                            Boolean interfaceHasSiblingVlanInterfaces = (Boolean) returnValue;
                            if (!interfaceHasSiblingVlanInterfaces) {
                                // vlanParent.name).ToList());
                                for (VdsNetworkInterface i : interfaceList) {
                                    if (StringHelper.stringsEqual(i.getBondName(), vlanParent.getName())) {
                                        ifacesOptions.add(i);
                                    }
                                }
                            }
                            // the vlanParent should already be in ifacesOptions
                            // (since it has no network_name or bond_name).
                            defaultInterfaceName.append(vlanParent.getName());
                            asyncQuery.asyncCallback.onSuccess(asyncQuery.model, ifacesOptions);
                        }
                    }));
                } else {
                    // (since it has no network_name or bond_name).
                    if (vlanParent != null)
                        defaultInterfaceName.append(vlanParent.getName());
                    asyncQuery.asyncCallback.onSuccess(asyncQuery.model, ifacesOptions);
                }
            }
        }));
    }
}
#end_block

#method_before
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.RunMultipleQueries(queryTypeList, parametersList, callback);
}
#method_after
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.getInstance().runMultipleQueries(queryTypeList, parametersList, callback);
}
#end_block

#method_before
public static void fillTagsRecursive(tags tagToFill, List<tags> children) {
    ArrayList<tags> list = new ArrayList<tags>();
    for (tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#method_after
public static void fillTagsRecursive(Tags tagToFill, List<Tags> children) {
    ArrayList<Tags> list = new ArrayList<Tags>();
    for (Tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#end_block

#method_before
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.GetNotificationEvents();
}
#method_after
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.getNotificationEvents();
}
#end_block

#method_before
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#method_after
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#end_block

#method_before
public static ArrayList<DiskInterface> getDiskInterfaceList(Version clusterVersion) {
    ArrayList<DiskInterface> diskInterfaces = new ArrayList<DiskInterface>(Arrays.asList(new DiskInterface[] { DiskInterface.IDE, DiskInterface.VirtIO }));
    boolean isVirtIOScsiEnabled = clusterVersion != null ? (Boolean) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VirtIoScsiEnabled, clusterVersion.getValue()) : true;
    if (isVirtIOScsiEnabled) {
        diskInterfaces.add(DiskInterface.VirtIO_SCSI);
    }
    return diskInterfaces;
}
#method_after
public static void getDiskInterfaceList(int osId, Version clusterVersion, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> interfaces = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<DiskInterface> interfaceTypes = new ArrayList<DiskInterface>();
            for (String diskIfs : interfaces) {
                try {
                    interfaceTypes.add(DiskInterface.valueOf(diskIfs));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetDiskInterfaces, osId, clusterVersion), asyncQuery);
}
#end_block

#method_before
public static String getNewNicName(ArrayList<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#method_after
public static String getNewNicName(List<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#end_block

#method_before
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#method_after
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#end_block

#method_before
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#method_after
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#end_block

#method_before
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#method_after
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            // Initialize specific UI dependencies for search
            SimpleDependecyInjector.getInstance().bind(new OsValueAutoCompleter(uniqueOsNames));
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#end_block

#method_before
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#method_after
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#end_block

#method_before
public static void hasSpiceSupport(int osId, Version version, AsyncQuery callback) {
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.HasSpiceSupport, osId, version), callback);
}
#method_after
public static boolean hasSpiceSupport(int osId, Version version) {
    return getDisplayTypes(osId, version).contains(DisplayType.qxl);
}
#end_block

#method_before
public static List<Integer> getOsIds() {
    return osIds;
}
#method_after
public static List<Integer> getOsIds(ArchitectureType architectureType) {
    List<Integer> osIds = new ArrayList<Integer>();
    for (Entry<Integer, ArchitectureType> entry : osArchitectures.entrySet()) {
        if (entry.getValue() == architectureType) {
            osIds.add(entry.getKey());
        }
    }
    Collections.sort(osIds, new Comparator<Integer>() {

        @Override
        public int compare(Integer o1, Integer o2) {
            return osNames.get(o1).compareTo(osNames.get(o2));
        }
    });
    return osIds;
}
#end_block

#method_before
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#method_after
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#end_block

#method_before
public static ArrayList<Map.Entry<String, EntityModel>> getBondingOptionList(RefObject<Map.Entry<String, EntityModel>> defaultItem) {
    ArrayList<Map.Entry<String, EntityModel>> list = new ArrayList<Map.Entry<String, EntityModel>>();
    EntityModel entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 1) Active-Backup");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=1 miimon=100", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 2) Load balance (balance-xor)");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=2", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 4) Dynamic link aggregation (802.3ad)");
    // $NON-NLS-1$
    defaultItem.argvalue = new KeyValuePairCompat<String, EntityModel>("mode=4", entityModel);
    list.add(defaultItem.argvalue);
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 5) Adaptive transmit load balancing (balance-tlb)");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=5", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("custom", entityModel));
    return list;
}
#method_after
public static ArrayList<Map.Entry<String, EntityModel>> getBondingOptionList(RefObject<Map.Entry<String, EntityModel>> defaultItem) {
    ArrayList<Map.Entry<String, EntityModel>> list = new ArrayList<Map.Entry<String, EntityModel>>();
    EntityModel entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 1) Active-Backup");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=1 miimon=100", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 2) Load balance (balance-xor)");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=2 miimon=100", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 4) Dynamic link aggregation (802.3ad)");
    // $NON-NLS-1$
    defaultItem.argvalue = new KeyValuePairCompat<String, EntityModel>("mode=4 miimon=100", entityModel);
    list.add(defaultItem.argvalue);
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 5) Adaptive transmit load balancing (balance-tlb)");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=5 miimon=100", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("custom", entityModel));
    return list;
}
#end_block

#method_before
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#method_after
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#method_after
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    /**
     * If upserver is null and force action is true, then don't try for gluster host remove, simply remove the host
     * entry from database.
     */
    if (isGlusterEnabled() && upServer != null) {
        glusterHostRemove();
        if (!getSucceeded() && VdcBllErrors.GlusterHostIsNotPartOfCluster != getReturnValue().getFault().getError()) {
            return;
        }
    }
    /**
     * If the removing server is the last server in the cluster , then clear the gluster
     * volumes and hooks from the database
     * if not force, host remove would have failed if there were volumes, so safe to
     * clean up volumes in DB.
     */
    if (!clusterHasMultipleHosts()) {
        removeGlusterVolumesFromDb();
        removeGlusterHooksFromDb();
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            RemoveVdsStatisticsFromDb();
            RemoveVdsDynamicFromDb();
            RemoveVdsStaticFromDb();
            return null;
        }
    });
    RemoveVdsFromCollection();
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    /**
     * If upserver is null and force action is true, then don't try for gluster host remove, simply remove the host
     * entry from database.
     */
    if (isGlusterEnabled() && upServer != null) {
        glusterHostRemove();
        if (!getSucceeded()) {
            return;
        }
    }
    /**
     * If the removing server is the last server in the cluster , then clear the gluster
     * volumes and hooks from the database
     * if not force, host remove would have failed if there were volumes, so safe to
     * clean up volumes in DB.
     */
    if (!clusterHasMultipleHosts()) {
        removeGlusterVolumesFromDb();
        removeGlusterHooksFromDb();
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            RemoveVdsStatisticsFromDb();
            RemoveVdsDynamicFromDb();
            RemoveVdsStaticFromDb();
            return null;
        }
    });
    RemoveVdsFromCollection();
    setSucceeded(true);
}
#end_block

#method_before
private void glusterHostRemove() {
    if (clusterHasMultipleHosts() && !hasVolumeBricksOnServer()) {
        try (EngineLock lock = GlusterUtil.getInstance().acquireGlusterLockWait(getVdsGroupId())) {
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RemoveGlusterServer, new RemoveGlusterServerVDSParameters(upServer.getId(), getVds().getHostName(), getParameters().isForceAction()));
            setSucceeded(returnValue.getSucceeded());
            if (!getSucceeded()) {
                getReturnValue().getFault().setError(returnValue.getVdsError().getCode());
                getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage());
                errorType = AuditLogType.GLUSTER_SERVER_REMOVE_FAILED;
                return;
            }
        }
    }
}
#method_after
private void glusterHostRemove() {
    if (clusterHasMultipleHosts() && !hasVolumeBricksOnServer()) {
        try (EngineLock lock = GlusterUtil.getInstance().acquireGlusterLockWait(getVdsGroupId())) {
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RemoveGlusterServer, new RemoveGlusterServerVDSParameters(upServer.getId(), getVds().getHostName(), getParameters().isForceAction()));
            // If the host is already removed Cluster using Gluster CLI then we can setSucceeded to true.
            setSucceeded(returnValue.getSucceeded() || VdcBllErrors.GlusterHostIsNotPartOfCluster == returnValue.getVdsError().getCode());
            if (!getSucceeded()) {
                getReturnValue().getFault().setError(returnValue.getVdsError().getCode());
                getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage());
                errorType = AuditLogType.GLUSTER_SERVER_REMOVE_FAILED;
                return;
            }
        }
    }
}
#end_block

#method_before
protected boolean checkExistingStorageDomain() {
    // prevent importing DATA domain
    if (getParameters().getStorageDomain().getStorageDomainType() == StorageDomainType.Data) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMPORT_DATA_DOMAIN_PROHIBITED);
    }
    if (DbFacade.getInstance().getStorageDomainStaticDao().get(getStorageDomain().getId()) != null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
    }
    List<Guid> storageIds = (ArrayList<Guid>) runVdsCommand(VDSCommandType.HSMGetStorageDomainsList, new HSMGetStorageDomainsListVDSCommandParameters(getVdsId(), Guid.Empty, getStorageDomain().getStorageType(), getStorageDomain().getStorageDomainType(), "")).getReturnValue();
    if (!storageIds.contains(getStorageDomain().getId())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST);
    }
    Pair<StorageDomainStatic, SANState> domainFromIrs = (Pair<StorageDomainStatic, SANState>) runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new HSMGetStorageDomainInfoVDSCommandParameters(getVdsId(), getStorageDomain().getId())).getReturnValue();
    if (domainFromIrs != null && domainFromIrs.getFirst().getStorageDomainType() != getStorageDomain().getStorageDomainType()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_CHANGE_STORAGE_DOMAIN_TYPE);
    }
    return true;
}
#method_after
protected boolean checkExistingStorageDomain() {
    boolean returnValue = true;
    // prevent importing DATA domain
    if (getParameters().getStorageDomain().getStorageDomainType() == StorageDomainType.Data) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMPORT_DATA_DOMAIN_PROHIBITED);
        return false;
    }
    if (DbFacade.getInstance().getStorageDomainStaticDao().get(getStorageDomain().getId()) != null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
        returnValue = false;
    }
    if (returnValue) {
        java.util.ArrayList<Guid> storageIds = (java.util.ArrayList<Guid>) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.HSMGetStorageDomainsList, new HSMGetStorageDomainsListVDSCommandParameters(getVdsId(), Guid.Empty, getStorageDomain().getStorageType(), getStorageDomain().getStorageDomainType(), "")).getReturnValue();
        if (!storageIds.contains(getStorageDomain().getId())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST);
            returnValue = false;
        } else {
            Pair<StorageDomainStatic, SANState> domainFromIrs = (Pair<StorageDomainStatic, SANState>) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new HSMGetStorageDomainInfoVDSCommandParameters(getVdsId(), getStorageDomain().getId())).getReturnValue();
            if (domainFromIrs != null && domainFromIrs.getFirst().getStorageDomainType() != getStorageDomain().getStorageDomainType()) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_CHANGE_STORAGE_DOMAIN_TYPE);
                returnValue = false;
            }
            returnValue = returnValue && concreteCheckExistingStorageDomain(domainFromIrs);
        }
    }
    return returnValue;
}
#end_block

#method_before
@Override
protected boolean concreteCheckExistingStorageDomain(Pair<StorageDomainStatic, SANState> domain) {
    boolean returnValue = false;
    StorageDomainStatic domainFromIrs = domain.getFirst();
    if (StringUtils.isEmpty(getStorageDomain().getStorageStaticData().getStorage()) && StringUtils.isEmpty(domainFromIrs.getStorage()) && domainFromIrs.getConnection() != null && getStorageDomain().getStorageStaticData().getConnection() != null) {
        returnValue = (StringUtils.equals(domainFromIrs.getConnection().getconnection(), getStorageDomain().getStorageStaticData().getConnection().getconnection()));
    } else if (!StringUtils.isEmpty(getStorageDomain().getStorageStaticData().getStorage()) && !StringUtils.isEmpty(domainFromIrs.getStorage())) {
        returnValue = (StringUtils.equals(domainFromIrs.getStorage(), getStorageDomain().getStorageStaticData().getStorage()));
    }
    if (!returnValue) {
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_ADD_EXISTING_STORAGE_DOMAIN_CONNECTION_DATA_ILLEGAL);
    }
    return returnValue;
}
#method_after
protected boolean concreteCheckExistingStorageDomain(Pair<StorageDomainStatic, SANState> domain) {
    boolean returnValue = false;
    StorageDomainStatic domainFromIrs = domain.getFirst();
    if (StringUtils.isEmpty(getStorageDomain().getStorageStaticData().getStorage()) && StringUtils.isEmpty(domainFromIrs.getStorage()) && domainFromIrs.getConnection() != null && getStorageDomain().getStorageStaticData().getConnection() != null) {
        returnValue = (StringUtils.equals(domainFromIrs.getConnection().getconnection(), getStorageDomain().getStorageStaticData().getConnection().getconnection()));
    } else if (!StringUtils.isEmpty(getStorageDomain().getStorageStaticData().getStorage()) && !StringUtils.isEmpty(domainFromIrs.getStorage())) {
        returnValue = (StringUtils.equals(domainFromIrs.getStorage(), getStorageDomain().getStorageStaticData().getStorage()));
    }
    if (!returnValue) {
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_ADD_EXISTING_STORAGE_DOMAIN_CONNECTION_DATA_ILLEGAL);
    }
    return returnValue;
}
#end_block

#method_before
protected Pair<Boolean, Integer> connectStorage() {
    String connectionId = getStorageDomain().getStorage();
    StorageServerConnections connection = getStorageServerConnectionDAO().get(connectionId);
    List<StorageServerConnections> connections = Arrays.asList(connection);
    Map<String, String> result = (HashMap<String, String>) runVdsCommand(VDSCommandType.ConnectStorageServer, new StorageServerConnectionManagementVDSParameters(getParameters().getVdsId(), Guid.Empty, connection.getstorage_type(), connections)).getReturnValue();
    return new Pair<>(StorageHelperDirector.getInstance().getItem(connection.getstorage_type()).isConnectSucceeded(result, connections), Integer.parseInt(result.values().iterator().next()));
}
#method_after
protected Pair<Boolean, Integer> connectStorage() {
    String connectionId = getStorageDomain().getStorage();
    StorageServerConnections connection = getStorageServerConnectionDAO().get(connectionId);
    java.util.HashMap<String, String> result = (java.util.HashMap<String, String>) runVdsCommand(VDSCommandType.ConnectStorageServer, new StorageServerConnectionManagementVDSParameters(getParameters().getVdsId(), Guid.Empty, connection.getstorage_type(), new java.util.ArrayList<StorageServerConnections>(java.util.Arrays.asList(new StorageServerConnections[] { connection })))).getReturnValue();
    return new Pair<Boolean, Integer>(StorageHelperDirector.getInstance().getItem(connection.getstorage_type()).isConnectSucceeded(result, Arrays.asList(connection)), Integer.parseInt(result.values().iterator().next()));
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HOT_PLUG);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_DISK);
    if (getDiskAlias() != null) {
        addCanDoActionMessage(String.format("$%1$s %2$s", "diskAliases", getDiskAlias()));
    }
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HOT_PLUG);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_DISK);
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Map<String, Pair<String, String>> exclusiveLock = new HashMap<>();
    exclusiveLock.put(getDisk().getId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED));
    if (getDisk().isBoot()) {
        exclusiveLock.put(getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DISK_BOOT, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    return exclusiveLock;
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Map<String, Pair<String, String>> exclusiveLock = null;
    if (getDisk() != null) {
        exclusiveLock = new HashMap<>();
        exclusiveLock.put(getDisk().getId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED.name() + String.format("$diskAliases %1$s", getDiskAlias())));
        if (getDisk().isBoot()) {
            exclusiveLock.put(getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DISK_BOOT, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
        }
    }
    return exclusiveLock;
}
#end_block

#method_before
protected java.util.ArrayList<StorageDomain> parseVGList(Map<String, Object>[] vgList) {
    java.util.ArrayList<StorageDomain> result = new java.util.ArrayList<StorageDomain>(vgList.length);
    for (Map<String, Object> vg : vgList) {
        StorageDomain sDomain = new StorageDomain();
        if (vg.containsKey("name")) {
            try {
                sDomain.setId(new Guid(vg.get("name").toString()));
            } catch (java.lang.Exception e) {
                sDomain.setStorageName(vg.get("name").toString());
            }
        }
        sDomain.setStorage(vg.get("vgUUID").toString());
        Long size = IrsBrokerCommand.AssignLongValue(vg, "vgfree");
        if (size != null) {
            sDomain.setAvailableDiskSize((int) (size / SizeConverter.BYTES_IN_GB));
        }
        size = IrsBrokerCommand.AssignLongValue(vg, "vgsize");
        if (size != null && sDomain.getAvailableDiskSize() != null) {
            sDomain.setUsedDiskSize((int) (size / SizeConverter.BYTES_IN_GB) - sDomain.getAvailableDiskSize());
        }
        if (vg.containsKey("vgtype")) {
            sDomain.setStorageType(EnumUtils.valueOf(StorageType.class, vg.get("vgtype").toString(), true));
        } else {
            sDomain.setStorageType(StorageType.UNKNOWN);
        }
        result.add(sDomain);
    }
    return result;
}
#method_after
protected java.util.ArrayList<StorageDomain> parseVGList(Map<String, Object>[] vgList) {
    java.util.ArrayList<StorageDomain> result = new java.util.ArrayList<StorageDomain>(vgList.length);
    for (Map<String, Object> vg : vgList) {
        StorageDomain sDomain = new StorageDomain();
        if (vg.containsKey("name")) {
            try {
                sDomain.setId(new Guid(vg.get("name").toString()));
            } catch (java.lang.Exception e) {
                sDomain.setStorageName(vg.get("name").toString());
            }
        }
        sDomain.setStorage(vg.get("vgUUID").toString());
        Long size = IrsBrokerCommand.assignLongValue(vg, "vgfree");
        if (size != null) {
            sDomain.setAvailableDiskSize((int) (size / SizeConverter.BYTES_IN_GB));
        }
        size = IrsBrokerCommand.assignLongValue(vg, "vgsize");
        if (size != null && sDomain.getAvailableDiskSize() != null) {
            sDomain.setUsedDiskSize((int) (size / SizeConverter.BYTES_IN_GB) - sDomain.getAvailableDiskSize());
        }
        if (vg.containsKey("vgtype")) {
            sDomain.setStorageType(EnumUtils.valueOf(StorageType.class, vg.get("vgtype").toString(), true));
        } else {
            sDomain.setStorageType(StorageType.UNKNOWN);
        }
        result.add(sDomain);
    }
    return result;
}
#end_block

#method_before
public boolean validateDistriputedReplicateRemove(GlusterVolumeType volumeType, List<GlusterBrickEntity> selectedBricks, List<GlusterBrickEntity> brickList, RemoveBrickModel removeBrickModel) {
    int replicaCount = removeBrickModel.getReplicaCount();
    int distributions = brickList.size() / replicaCount;
    boolean isSubVolumeDeletion = false;
    boolean isReplicaCountReduction = false;
    if (selectedBricks.size() == brickList.size()) {
        return false;
    }
    for (int i = 0; i < distributions; i++) {
        List<GlusterBrickEntity> subBrickList = brickList.subList((i * replicaCount), (i * replicaCount) + replicaCount);
        if (subBrickList.containsAll(selectedBricks)) {
            return true;
        }
        int count = 0;
        for (GlusterBrickEntity brick : selectedBricks) {
            if (subBrickList.contains(brick)) {
                count++;
            }
        }
        if (((count == 0) || (count == replicaCount)) && (!isReplicaCountReduction)) {
            isSubVolumeDeletion = true;
            if (i == (distributions - 1)) {
                return true;
            }
        } else if (count == 1 && (!isSubVolumeDeletion)) {
            isReplicaCountReduction = true;
            if (i == (distributions - 1)) {
                removeBrickModel.setReplicaCount(removeBrickModel.getReplicaCount() - 1);
                removeBrickModel.setReduceReplica(true);
                return true;
            }
        } else if (count > 1) {
            return false;
        }
    }
    return false;
}
#method_after
public boolean validateDistriputedReplicateRemove(GlusterVolumeType volumeType, List<GlusterBrickEntity> selectedBricks, List<GlusterBrickEntity> brickList, RemoveBrickModel removeBrickModel) {
    int replicaCount = removeBrickModel.getReplicaCount();
    int distributions = brickList.size() / replicaCount;
    // Key - No.of.bricks selected in sub-volume
    // Value - No.of sub-volumes which has 'Key' no.of bricks selected
    Map<Integer, Integer> selectedBricksToSubVolumesMap = new HashMap<Integer, Integer>();
    for (int distIndex = 0; distIndex < distributions; distIndex++) {
        List<GlusterBrickEntity> bricksInSubVolumeList = brickList.subList((distIndex * replicaCount), (distIndex * replicaCount) + replicaCount);
        int selectedBricksInSubVolume = 0;
        for (GlusterBrickEntity brick : bricksInSubVolumeList) {
            if (selectedBricks.contains(brick)) {
                selectedBricksInSubVolume++;
            }
        }
        if (selectedBricksInSubVolume > 0) {
            if (!selectedBricksToSubVolumesMap.containsKey(selectedBricksInSubVolume)) {
                selectedBricksToSubVolumesMap.put(selectedBricksInSubVolume, 0);
            }
            selectedBricksToSubVolumesMap.put(selectedBricksInSubVolume, selectedBricksToSubVolumesMap.get(selectedBricksInSubVolume) + 1);
        }
    }
    // sub-volumes, hence not valid for removal.
    if (selectedBricksToSubVolumesMap.size() == 1) {
        // If the user has selected once brick from each sub-volume, then replica count needs to be reduced
        if (selectedBricksToSubVolumesMap.containsKey(1) && selectedBricksToSubVolumesMap.get(1) == distributions) {
            removeBrickModel.setReplicaCount(removeBrickModel.getReplicaCount() - 1);
            removeBrickModel.setReduceReplica(true);
            return true;
        } else if (selectedBricksToSubVolumesMap.containsKey(replicaCount)) {
            return true;
        }
        return false;
    }
    return false;
}
#end_block

#method_before
@Override
public void execute(int iterationId) {
    try {
        StorageHelperDirector.getInstance().getItem(getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(getStorageDomain(), getVdss().get(iterationId).getId());
    } catch (RuntimeException e) {
        log.errorFormat("Failed to connect host {0} to storage server (name: {1}, id: {2}). Exception: {3}", getVdss().get(iterationId).getName(), getStorageDomain().getName(), getStorageDomain().getId(), e);
    }
}
#method_after
@Override
public void execute(int iterationId) {
    VDS vds = getVdss().get(iterationId);
    try {
        StorageHelperDirector.getInstance().getItem(getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(getStorageDomain(), vds.getId());
    } catch (RuntimeException e) {
        log.errorFormat("Failed to connect host {0} to storage domain (name: {1}, id: {2}). Exception: {3}", vds.getName(), getStorageDomain().getName(), getStorageDomain().getId(), e);
    }
}
#end_block

#method_before
void initMemorySizeLabels() {
    this.physicalMemory = new MemorySizeLabel<Integer>(constants);
    this.usedMemory = new MemorySizeLabel<Integer>(constants);
    this.freeMemory = new MemorySizeLabel<Integer>(constants);
    this.swapTotal = new MemorySizeLabel<Long>(constants);
    this.usedSwap = new MemorySizeLabel<Long>(constants);
    this.swapFree = new MemorySizeLabel<Long>(constants);
    this.maxSchedulingMemory = new MemorySizeLabel<Float>(constants);
}
#method_after
void initMemorySizeLabels() {
    this.physicalMemory = new MemorySizeTextBoxLabel<Integer>(constants);
    this.usedMemory = new MemorySizeTextBoxLabel<Integer>(constants);
    this.freeMemory = new MemorySizeTextBoxLabel<Integer>(constants);
    this.swapTotal = new MemorySizeTextBoxLabel<Long>(constants);
    this.usedSwap = new MemorySizeTextBoxLabel<Long>(constants);
    this.swapFree = new MemorySizeTextBoxLabel<Long>(constants);
    this.maxSchedulingMemory = new MemorySizeTextBoxLabel<Float>(constants);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public void setMainTabSelectedItem(VDS selectedItem) {
    driver.edit(getDetailModel());
    automaticLargePage.setValue((VdsTransparentHugePagesState) getDetailModel().getAutomaticLargePage());
    ArrayList<ValueLabel<Integer>> physicalMemoryDetailsArray = new ArrayList<ValueLabel<Integer>>(Arrays.asList(physicalMemory, usedMemory, freeMemory));
    ArrayList<ValueLabel<Long>> swapSizeDetailsArray = new ArrayList<ValueLabel<Long>>(Arrays.asList(swapTotal, usedSwap, swapFree));
    physicalMemoryDetails.setValue(physicalMemoryDetailsArray);
    swapSizeDetails.setValue(swapSizeDetailsArray);
    maxSchedulingMemory.setValue(selectedItem.getMaxSchedulingMemory());
    formBuilder.update(getDetailModel());
}
#method_after
@SuppressWarnings("unchecked")
@Override
public void setMainTabSelectedItem(VDS selectedItem) {
    driver.edit(getDetailModel());
    automaticLargePage.setValue((VdsTransparentHugePagesState) getDetailModel().getAutomaticLargePage());
    ArrayList<TextBoxLabelBase<Integer>> physicalMemoryDetailsArray = new ArrayList<TextBoxLabelBase<Integer>>(Arrays.asList(physicalMemory, usedMemory, freeMemory));
    ArrayList<TextBoxLabelBase<Long>> swapSizeDetailsArray = new ArrayList<TextBoxLabelBase<Long>>(Arrays.asList(swapTotal, usedSwap, swapFree));
    physicalMemoryDetails.setValue(physicalMemoryDetailsArray);
    swapSizeDetails.setValue(swapSizeDetailsArray);
    maxSchedulingMemory.setValue(selectedItem.getMaxSchedulingMemory());
    formBuilder.update(getDetailModel());
}
#end_block

#method_before
public void addDomain(CLIParser parser) throws ManageDomainsResult {
    String authMode = LdapAuthModeEnum.GSSAPI.name();
    String currentDomains = configurationProvider.getConfigValue(ConfigValues.DomainName);
    DomainsConfigurationEntry domainNameEntry = new DomainsConfigurationEntry(currentDomains, DOMAIN_SEPERATOR, null);
    String domainName = parser.getArg(Arguments.domain.toString()).toLowerCase();
    String userName = parser.getArg(Arguments.user.toString());
    if (domainNameEntry.doesDomainExist(domainName)) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.DOMAIN_ALREADY_EXISTS_IN_CONFIGURATION, domainName);
    }
    List<String> ldapServers = getLdapServers(parser, domainName);
    validateKdcServers(authMode, domainName);
    domainNameEntry.setValueForDomain(domainName, null);
    String currentAdUserNameEntry = configurationProvider.getConfigValue(ConfigValues.AdUserName);
    String currentAdUserPasswordEntry = configurationProvider.getConfigValue(ConfigValues.AdUserPassword);
    String currentAuthModeEntry = configurationProvider.getConfigValue(ConfigValues.LDAPSecurityAuthentication);
    String currentLdapServersEntry = configurationProvider.getConfigValue(ConfigValues.LdapServers);
    String currentAdUserIdEntry = configurationProvider.getConfigValue(ConfigValues.AdUserId);
    String currentLDAPProviderTypes = configurationProvider.getConfigValue(ConfigValues.LDAPProviderTypes);
    String ldapServerPort = configurationProvider.getConfigValue(ConfigValues.LDAPServerPort);
    DomainsConfigurationEntry adUserNameEntry = new DomainsConfigurationEntry(currentAdUserNameEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserPasswordEntry = new PasswordDomainsConfigurationEntry(currentAdUserPasswordEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry authModeEntry = new DomainsConfigurationEntry(currentAuthModeEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapServersEntry = new DomainsConfigurationEntry(currentLdapServersEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserIdEntry = new DomainsConfigurationEntry(currentAdUserIdEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapProviderTypesEntry = new DomainsConfigurationEntry(currentLDAPProviderTypes, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    LdapProviderType ldapProviderType = getLdapProviderType(parser);
    adUserNameEntry.setValueForDomain(domainName, userName);
    adUserPasswordEntry.setValueForDomain(domainName, getPasswordInput(parser));
    authModeEntry.setValueForDomain(domainName, authMode);
    ldapProviderTypesEntry.setValueForDomain(domainName, ldapProviderType.name());
    String ldapServersStr = parser.getArg(Arguments.ldapServers.name());
    setLdapServersPerDomain(domainName, ldapServersEntry, ldapServersStr);
    testConfiguration(domainName, domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, adUserIdEntry, ldapProviderTypesEntry, ldapServersEntry, ldapServerPort, true, false, ldapServers);
    handleAddPermissions(domainName, userName, adUserIdEntry.getValueForDomain(domainName));
    // Update the configuration
    setConfigurationEntries(domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, ldapServersEntry, adUserIdEntry, ldapProviderTypesEntry);
    printSuccessMessage(domainName, "added");
}
#method_after
public void addDomain(CLIParser parser) throws ManageDomainsResult {
    String authMode = LdapAuthModeEnum.GSSAPI.name();
    String currentDomains = configurationProvider.getConfigValue(ConfigValues.DomainName);
    DomainsConfigurationEntry domainNameEntry = new DomainsConfigurationEntry(currentDomains, DOMAIN_SEPERATOR, null);
    String domainName = parser.getArg(Arguments.domain.toString()).toLowerCase();
    String userName = parser.getArg(Arguments.user.toString());
    if (domainNameEntry.doesDomainExist(domainName)) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.DOMAIN_ALREADY_EXISTS_IN_CONFIGURATION, domainName);
    }
    List<String> ldapServers = getLdapServers(parser, domainName);
    validateKdcServers(authMode, domainName);
    domainNameEntry.setValueForDomain(domainName, null);
    String currentAdUserNameEntry = configurationProvider.getConfigValue(ConfigValues.AdUserName);
    String currentAdUserPasswordEntry = configurationProvider.getConfigValue(ConfigValues.AdUserPassword);
    String currentAuthModeEntry = configurationProvider.getConfigValue(ConfigValues.LDAPSecurityAuthentication);
    String currentLdapServersEntry = configurationProvider.getConfigValue(ConfigValues.LdapServers);
    String currentAdUserIdEntry = configurationProvider.getConfigValue(ConfigValues.AdUserId);
    String currentLDAPProviderTypes = configurationProvider.getConfigValue(ConfigValues.LDAPProviderTypes);
    String ldapServerPort = configurationProvider.getConfigValue(ConfigValues.LDAPServerPort);
    DomainsConfigurationEntry adUserNameEntry = new DomainsConfigurationEntry(currentAdUserNameEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserPasswordEntry = new PasswordDomainsConfigurationEntry(currentAdUserPasswordEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry authModeEntry = new DomainsConfigurationEntry(currentAuthModeEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapServersEntry = new DomainsConfigurationEntry(currentLdapServersEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserIdEntry = new DomainsConfigurationEntry(currentAdUserIdEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapProviderTypesEntry = new DomainsConfigurationEntry(currentLDAPProviderTypes, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    LdapProviderType ldapProviderType = getLdapProviderType(parser);
    adUserNameEntry.setValueForDomain(domainName, userName);
    adUserPasswordEntry.setValueForDomain(domainName, getPasswordInput(parser));
    authModeEntry.setValueForDomain(domainName, authMode);
    ldapProviderTypesEntry.setValueForDomain(domainName, ldapProviderType.name());
    setLdapServersPerDomain(domainName, ldapServersEntry, StringUtils.join(ldapServers, ","));
    testConfiguration(domainName, domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, adUserIdEntry, ldapProviderTypesEntry, ldapServersEntry, ldapServerPort, true, false, ldapServers);
    handleAddPermissions(domainName, userName, adUserIdEntry.getValueForDomain(domainName));
    // Update the configuration
    setConfigurationEntries(domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, ldapServersEntry, adUserIdEntry, ldapProviderTypesEntry);
    printSuccessMessage(domainName, "added");
}
#end_block

#method_before
private static void deleteFile(String filePath) {
    File file = new File(filePath);
    if (file.exists()) {
        file.delete();
    }
}
#method_after
private static void deleteFile(String filePath) {
    File file = new File(filePath);
    if (file.exists()) {
        if (!file.delete()) {
            log.info("Failed deleting file " + file.getAbsolutePath() + ". Continuing anyway.");
        }
    }
}
#end_block

#method_before
private void localize(final ApplicationConstants constants) {
    startTimeEditor.setLabel(constants.rebalanceStartTime());
    volumeEditor.setLabel(constants.rebalanceVolumeName());
    clusterEditor.setLabel(constants.rebalanceClusterVolume());
    statusTimeEditor.setLabel(constants.rebalanceStatusTime());
    stopTimeEditor.setLabel(constants.rebalanceStopTime());
}
#method_after
private void localize(final ApplicationConstants constants) {
    status.setText(constants.rebalanceComplete());
    startTimeEditor.setLabel(constants.rebalanceStartTime());
    volumeEditor.setLabel(constants.rebalanceVolumeName());
    clusterEditor.setLabel(constants.rebalanceClusterVolume());
    statusTimeEditor.setLabel(constants.rebalanceStatusTime());
    stopTimeEditor.setLabel(constants.rebalanceStopTime());
}
#end_block

#method_before
@Override
public void edit(final VolumeRebalanceStatusModel object) {
    driver.edit(object);
    rebalanceHostsTable.asEditor().edit(object.getRebalanceSessions());
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            PropertyChangedEventArgs e = (PropertyChangedEventArgs) args;
            if (e.PropertyName.equals("IS_STATUS_APPLICABLE")) {
                // $NON-NLS-1$
                status.setText(constants.rebalanceComplete());
                status.setVisible(true);
            } else if (e.PropertyName.equals("STOP_TIME_UPDATED")) {
                // $NON-NLS-1$
                stopTimePanel.setVisible(object.isStopTimeVisible());
                status.setVisible(false);
            }
        }
    });
}
#method_after
@Override
public void edit(final VolumeRebalanceStatusModel object) {
    driver.edit(object);
    rebalanceHostsTable.asEditor().edit(object.getRebalanceSessions());
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            PropertyChangedEventArgs e = (PropertyChangedEventArgs) args;
            if (e.PropertyName.equals("STATUS_UPDATED")) {
                // $NON-NLS-1$
                status.setVisible(object.isStatusAvailable());
            } else if (e.PropertyName.equals("STOP_TIME_UPDATED")) {
                // $NON-NLS-1$
                stopTimePanel.setVisible(object.isStopTimeVisible());
            }
        }
    });
}
#end_block

#method_before
private void onAddBricksInternal() {
    cancelConfirmation();
    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) getWindow();
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    ArrayList<GlusterBrickEntity> brickList = new ArrayList<GlusterBrickEntity>();
    for (Object model : volumeBrickModel.getBricks().getItems()) {
        GlusterBrickEntity brickEntity = (GlusterBrickEntity) ((EntityModel) model).getEntity();
        brickEntity.setVolumeId(volumeEntity.getId());
        brickList.add(brickEntity);
    }
    volumeBrickModel.startProgress(null);
    GlusterVolumeBricksActionParameters parameter = new GlusterVolumeBricksActionParameters(volumeEntity.getId(), brickList, volumeBrickModel.getReplicaCountValue(), volumeBrickModel.getStripeCountValue());
    Frontend.RunAction(VdcActionType.AddBricksToGlusterVolume, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            VolumeBrickListModel localModel = (VolumeBrickListModel) result.getState();
            localModel.postOnAddBricks(result.getReturnValue());
        }
    }, this);
}
#method_after
private void onAddBricksInternal() {
    cancelConfirmation();
    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) getWindow();
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    ArrayList<GlusterBrickEntity> brickList = new ArrayList<GlusterBrickEntity>();
    for (Object model : volumeBrickModel.getBricks().getItems()) {
        GlusterBrickEntity brickEntity = (GlusterBrickEntity) ((EntityModel) model).getEntity();
        brickEntity.setVolumeId(volumeEntity.getId());
        brickList.add(brickEntity);
    }
    volumeBrickModel.startProgress(null);
    GlusterVolumeBricksActionParameters parameter = new GlusterVolumeBricksActionParameters(volumeEntity.getId(), brickList, volumeBrickModel.getReplicaCountValue(), volumeBrickModel.getStripeCountValue());
    Frontend.getInstance().runAction(VdcActionType.AddBricksToGlusterVolume, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            VolumeBrickListModel localModel = (VolumeBrickListModel) result.getState();
            localModel.postOnAddBricks(result.getReturnValue());
        }
    }, this);
}
#end_block

#method_before
private void onRemoveBricks() {
    if (getWindow() == null) {
        return;
    }
    RemoveBrickModel model = (RemoveBrickModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (getSelectedItems() == null || getSelectedItems().isEmpty()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), getSelectedItems());
    if (volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE) {
        parameter.setReplicaCount(volumeEntity.getReplicaCount() - 1);
    } else if (volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (model.isReduceReplica()) {
            parameter.setReplicaCount(volumeEntity.getReplicaCount() - 1);
        } else {
            parameter.setReplicaCount(volumeEntity.getReplicaCount());
        }
    }
    model.startProgress(null);
    boolean isMigrate = (Boolean) model.getMigrateData().getEntity();
    Frontend.RunAction(isMigrate ? VdcActionType.StartRemoveGlusterVolumeBricks : VdcActionType.GlusterVolumeRemoveBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setWindow(null);
        }
    }, model);
}
#method_after
private void onRemoveBricks() {
    if (getWindow() == null) {
        return;
    }
    RemoveBrickModel model = (RemoveBrickModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (getSelectedItems() == null || getSelectedItems().isEmpty()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), getSelectedItems());
    if (volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE) {
        parameter.setReplicaCount(volumeEntity.getReplicaCount() - 1);
    } else if (volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (model.isReduceReplica()) {
            parameter.setReplicaCount(volumeEntity.getReplicaCount() - 1);
        } else {
            parameter.setReplicaCount(volumeEntity.getReplicaCount());
        }
    }
    model.startProgress(null);
    boolean isMigrate = (Boolean) model.getMigrateData().getEntity();
    Frontend.getInstance().runAction(isMigrate ? VdcActionType.StartRemoveGlusterVolumeBricks : VdcActionType.GlusterVolumeRemoveBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setWindow(null);
        }
    }, model);
}
#end_block

#method_before
private void onStopRemoveBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.RunAction(VdcActionType.StopRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
            if (result.getReturnValue().getSucceeded()) {
                showRemoveBricksStatus();
            }
        }
    }, model);
}
#method_after
private void onStopRemoveBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.getInstance().runAction(VdcActionType.StopRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
            if (result.getReturnValue().getSucceeded()) {
                showRemoveBricksStatus();
            }
        }
    }, model);
}
#end_block

#method_before
private void onCommitRemoveBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.RunAction(VdcActionType.CommitRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
            if (result.getReturnValue().getSucceeded()) {
                disableRemoveBrickStatusPopUpActions();
            }
        }
    }, model);
}
#method_after
private void onCommitRemoveBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.getInstance().runAction(VdcActionType.CommitRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
            if (result.getReturnValue().getSucceeded()) {
                disableRemoveBrickStatusPopUpActions();
            }
        }
    }, model);
}
#end_block

#method_before
private void onRetainBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.RunAction(VdcActionType.StopRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
            if (result.getReturnValue().getSucceeded()) {
                showRemoveBricksStatus();
                disableRemoveBrickStatusPopUpActions();
            }
        }
    }, model);
}
#method_after
private void onRetainBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.getInstance().runAction(VdcActionType.StopRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
            if (result.getReturnValue().getSucceeded()) {
                showRemoveBricksStatus();
                disableRemoveBrickStatusPopUpActions();
            }
        }
    }, model);
}
#end_block

#method_before
private void onReplaceBrick() {
    ReplaceBrickModel replaceBrickModel = (ReplaceBrickModel) getWindow();
    if (replaceBrickModel == null) {
        return;
    }
    if (!replaceBrickModel.validate()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    GlusterBrickEntity existingBrick = (GlusterBrickEntity) getSelectedItem();
    if (existingBrick == null) {
        return;
    }
    VDS server = (VDS) replaceBrickModel.getServers().getSelectedItem();
    GlusterBrickEntity newBrick = new GlusterBrickEntity();
    newBrick.setVolumeId(volumeEntity.getId());
    newBrick.setServerId(server.getId());
    newBrick.setServerName(server.getHostName());
    newBrick.setBrickDirectory((String) replaceBrickModel.getBrickDirectory().getEntity());
    replaceBrickModel.startProgress(null);
    GlusterVolumeReplaceBrickActionParameters parameter = new GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), GlusterTaskOperation.START, existingBrick, newBrick, false);
    Frontend.RunAction(VdcActionType.ReplaceGlusterVolumeBrick, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ReplaceBrickModel localModel = (ReplaceBrickModel) result.getState();
            localModel.stopProgress();
            setWindow(null);
        }
    }, replaceBrickModel);
}
#method_after
private void onReplaceBrick() {
    ReplaceBrickModel replaceBrickModel = (ReplaceBrickModel) getWindow();
    if (replaceBrickModel == null) {
        return;
    }
    if (!replaceBrickModel.validate()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    GlusterBrickEntity existingBrick = (GlusterBrickEntity) getSelectedItem();
    if (existingBrick == null) {
        return;
    }
    VDS server = (VDS) replaceBrickModel.getServers().getSelectedItem();
    GlusterBrickEntity newBrick = new GlusterBrickEntity();
    newBrick.setVolumeId(volumeEntity.getId());
    newBrick.setServerId(server.getId());
    newBrick.setServerName(server.getHostName());
    newBrick.setBrickDirectory((String) replaceBrickModel.getBrickDirectory().getEntity());
    replaceBrickModel.startProgress(null);
    GlusterVolumeReplaceBrickActionParameters parameter = new GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), GlusterTaskOperation.START, existingBrick, newBrick, false);
    Frontend.getInstance().runAction(VdcActionType.ReplaceGlusterVolumeBrick, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ReplaceBrickModel localModel = (ReplaceBrickModel) result.getState();
            localModel.stopProgress();
            setWindow(null);
        }
    }, replaceBrickModel);
}
#end_block

#method_before
public static SchedulingManager getInstance() {
    if (instance == null) {
        synchronized (SchedulingManager.class) {
            if (instance == null) {
                instance = new SchedulingManager();
                EnableLoadBalancer();
            }
        }
    }
    return instance;
}
#method_after
public static SchedulingManager getInstance() {
    if (instance == null) {
        synchronized (SchedulingManager.class) {
            if (instance == null) {
                instance = new SchedulingManager();
                enableLoadBalancer();
            }
        }
    }
    return instance;
}
#end_block

#method_before
public void init() {
    log.info("Initializing Scheduling manager");
    loadPolicyUnits();
    loadClusterPolicies();
    if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled)) {
        log.info("Starting external scheduler dicovery thread");
        ExternalSchedulerDiscoveryThread discoveryThread = new ExternalSchedulerDiscoveryThread();
        discoveryThread.start();
    } else {
        log.info("External scheduler disabled, discovery skipped");
    }
    log.info("Initialized Scheduling manager");
}
#method_after
public void init() {
    log.info("Initializing Scheduling manager");
    loadPolicyUnits();
    loadClusterPolicies();
    ExternalSchedulerDiscoveryThread discoveryThread = new ExternalSchedulerDiscoveryThread();
    if (Config.<Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) {
        log.info("Starting external scheduler dicovery thread");
        discoveryThread.start();
    } else {
        discoveryThread.markAllExternalPoliciesAsDisabled();
        log.info("External scheduler disabled, discovery skipped");
    }
    log.info("Initialized Scheduling manager");
}
#end_block

#method_before
public Guid schedule(VDSGroup cluster, VM vm, List<Guid> hostBlackList, List<Guid> hostWhiteList, Guid destHostId, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    clusterLockMap.putIfAbsent(cluster.getId(), new Semaphore(1));
    try {
        if (!cluster.isSchedulerAllowOverbooking() || !Config.<Boolean>GetValue(ConfigValues.OptimizeSchedulerAllowOverBookingSupported)) {
            clusterLockMap.get(cluster.getId()).acquire();
        }
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
        updateInitialHostList(vdsList, hostBlackList, true);
        updateInitialHostList(vdsList, hostWhiteList, false);
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        Map<String, String> parameters = createClusterPolicyParameters(cluster);
        if (destHostId != null) {
            if (checkDestinationHost(vm, vdsList, destHostId, messages, policy, parameters, memoryChecker)) {
                return destHostId;
            } else if (vm.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
                return null;
            }
        }
        vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, memoryChecker);
        if (vdsList == null || vdsList.size() == 0) {
            return null;
        }
        if (policy.getFunctions() == null || policy.getFunctions().isEmpty()) {
            return vdsList.get(0).getId();
        }
        Guid bestHost = vdsList.get(0).getId();
        // is true and there are more than configurable requests pending skip weighing
        if (vdsList.size() > 1 && (!cluster.isSchedulerOptimizeForSpeed() || clusterLockMap.get(cluster.getId()).getQueueLength() <= Config.<Integer>GetValue(ConfigValues.OptimizeSchedulerForSpeedPendingRequests))) {
            bestHost = runFunctions(policy.getFunctions(), vdsList, vm, parameters);
        }
        if (bestHost != null) {
            getVdsDynamicDao().updatePartialVdsDynamicCalc(bestHost, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), vm.getVmMemSizeMb(), vm.getNumOfCpus());
        }
        return bestHost;
    } catch (InterruptedException e) {
        // ignore
        return null;
    } finally {
        clusterLockMap.get(cluster.getId()).release();
    }
}
#method_after
public Guid schedule(VDSGroup cluster, VM vm, List<Guid> hostBlackList, List<Guid> hostWhiteList, Guid destHostId, List<String> messages, VdsFreeMemoryChecker memoryChecker, String correlationId) {
    clusterLockMap.putIfAbsent(cluster.getId(), new Semaphore(1));
    try {
        log.debugFormat("scheduling started, correlation Id: {0}", correlationId);
        checkAllowOverbooking(cluster);
        clusterLockMap.get(cluster.getId()).acquire();
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
        updateInitialHostList(vdsList, hostBlackList, true);
        updateInitialHostList(vdsList, hostWhiteList, false);
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        Map<String, String> parameters = createClusterPolicyParameters(cluster);
        vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, memoryChecker, true, correlationId);
        if (vdsList == null || vdsList.size() == 0) {
            return null;
        }
        // it passed filters return it
        if (destHostId != null) {
            for (VDS vds : vdsList) {
                if (destHostId.equals(vds.getId())) {
                    return destHostId;
                }
            }
        }
        if (policy.getFunctions() == null || policy.getFunctions().isEmpty()) {
            return vdsList.get(0).getId();
        }
        Guid bestHost = null;
        if (shouldWeighClusterHosts(cluster, vdsList)) {
            bestHost = runFunctions(policy.getFunctions(), vdsList, vm, parameters);
        }
        if (bestHost == null && vdsList.size() > 0) {
            bestHost = vdsList.get(0).getId();
        }
        if (bestHost != null) {
            getVdsDynamicDao().updatePartialVdsDynamicCalc(bestHost, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), 0, 0);
        }
        return bestHost;
    } catch (InterruptedException e) {
        log.error("interrupted", e);
        return null;
    } finally {
        // ensuring setting the semaphore permits to 1
        synchronized (clusterLockMap.get(cluster.getId())) {
            clusterLockMap.get(cluster.getId()).drainPermits();
            clusterLockMap.get(cluster.getId()).release();
        }
        log.debugFormat("Scheduling ended, correlation Id: {0}", correlationId);
    }
}
#end_block

#method_before
public boolean canSchedule(VDSGroup cluster, VM vm, List<Guid> vdsBlackList, List<Guid> vdsWhiteList, Guid destVdsId, List<String> messages) {
    List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
    updateInitialHostList(vdsList, vdsBlackList, true);
    updateInitialHostList(vdsList, vdsWhiteList, false);
    ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
    Map<String, String> parameters = createClusterPolicyParameters(cluster);
    if (destVdsId != null) {
        if (checkDestinationHost(vm, vdsList, destVdsId, messages, policy, parameters, noWaitingMemoryChecker)) {
            return true;
        } else if (vm.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
            return false;
        }
    }
    vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingMemoryChecker);
    if (vdsList == null || vdsList.size() == 0) {
        return false;
    }
    return true;
}
#method_after
public boolean canSchedule(VDSGroup cluster, VM vm, List<Guid> vdsBlackList, List<Guid> vdsWhiteList, Guid destVdsId, List<String> messages) {
    List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
    updateInitialHostList(vdsList, vdsBlackList, true);
    updateInitialHostList(vdsList, vdsWhiteList, false);
    ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
    Map<String, String> parameters = createClusterPolicyParameters(cluster);
    vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingMemoryChecker, false, null);
    if (vdsList == null || vdsList.size() == 0) {
        return false;
    }
    return true;
}
#end_block

#method_before
private List<VDS> runFilters(ArrayList<Guid> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    ArrayList<PolicyUnitImpl> internalFilters = new ArrayList<PolicyUnitImpl>();
    ArrayList<PolicyUnitImpl> externalFilters = new ArrayList<PolicyUnitImpl>();
    sortFilters(filters, filterPositionMap);
    if (filters != null) {
        for (Guid filter : filters) {
            PolicyUnitImpl filterPolicyUnit = policyUnits.get(filter);
            if (filterPolicyUnit.isInternal()) {
                internalFilters.add(filterPolicyUnit);
            } else {
                if (filterPolicyUnit.isEnabled()) {
                    externalFilters.add(filterPolicyUnit);
                }
            }
        }
    }
    hostList = runInternalFilters(internalFilters, hostList, vm, parameters, filterPositionMap, messages, memoryChecker);
    if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled) && externalFilters.size() > 0 && hostList != null && hostList.size() > 0) {
        hostList = runExternalFilters(externalFilters, hostList, vm, parameters, messages);
    }
    return hostList;
}
#method_after
private List<VDS> runFilters(ArrayList<Guid> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker, boolean shouldRunExternalFilters, String correlationId) {
    SchedulingResult result = new SchedulingResult();
    ArrayList<PolicyUnitImpl> internalFilters = new ArrayList<PolicyUnitImpl>();
    ArrayList<PolicyUnitImpl> externalFilters = new ArrayList<PolicyUnitImpl>();
    sortFilters(filters, filterPositionMap);
    if (filters != null) {
        for (Guid filter : filters) {
            PolicyUnitImpl filterPolicyUnit = policyUnits.get(filter);
            if (filterPolicyUnit.isInternal()) {
                internalFilters.add(filterPolicyUnit);
            } else {
                if (filterPolicyUnit.isEnabled()) {
                    externalFilters.add(filterPolicyUnit);
                }
            }
        }
    }
    hostList = runInternalFilters(internalFilters, hostList, vm, parameters, filterPositionMap, messages, memoryChecker, correlationId, result);
    if (shouldRunExternalFilters && Config.<Boolean>getValue(ConfigValues.ExternalSchedulerEnabled) && externalFilters.size() > 0 && hostList != null && hostList.size() > 0) {
        hostList = runExternalFilters(externalFilters, hostList, vm, parameters, messages, correlationId, result);
    }
    if (hostList == null || hostList.size() == 0) {
        messages.add(VdcBllMessages.SCHEDULING_ALL_HOSTS_FILTERED_OUT.name());
        messages.addAll(result.getReasonMessages());
    }
    return hostList;
}
#end_block

#method_before
private List<VDS> runInternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    if (filters != null) {
        for (PolicyUnitImpl filterPolicyUnit : filters) {
            if (hostList == null || hostList.isEmpty()) {
                break;
            }
            filterPolicyUnit.setMemoryChecker(memoryChecker);
            hostList = filterPolicyUnit.filter(hostList, vm, parameters, messages);
        }
    }
    return hostList;
}
#method_after
private List<VDS> runInternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker, String correlationId, SchedulingResult result) {
    if (filters != null) {
        for (PolicyUnitImpl filterPolicyUnit : filters) {
            if (hostList == null || hostList.isEmpty()) {
                break;
            }
            filterPolicyUnit.setMemoryChecker(memoryChecker);
            List<VDS> currentHostList = new ArrayList<VDS>(hostList);
            hostList = filterPolicyUnit.filter(hostList, vm, parameters, messages);
            logFilterActions(currentHostList, toIdSet(hostList), VdcBllMessages.VAR__FILTERTYPE__INTERNAL, filterPolicyUnit.getName(), result, correlationId);
        }
    }
    return hostList;
}
#end_block

#method_before
private List<VDS> runExternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, List<String> messages) {
    List<Guid> filteredIDs = null;
    if (filters != null) {
        List<String> filterNames = new ArrayList<String>();
        for (PolicyUnitImpl filter : filters) {
            filterNames.add(filter.getName());
        }
        List<Guid> hostIDs = new ArrayList<Guid>();
        for (VDS host : hostList) {
            hostIDs.add(host.getId());
        }
        filteredIDs = ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters);
    }
    return intersectHosts(hostList, filteredIDs);
}
#method_after
private List<VDS> runExternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, List<String> messages, String correlationId, SchedulingResult result) {
    List<Guid> filteredIDs = null;
    if (filters != null) {
        List<String> filterNames = new ArrayList<String>();
        for (PolicyUnitImpl filter : filters) {
            filterNames.add(filter.getName());
        }
        List<Guid> hostIDs = new ArrayList<Guid>();
        for (VDS host : hostList) {
            hostIDs.add(host.getId());
        }
        filteredIDs = ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters);
        if (filteredIDs != null) {
            logFilterActions(hostList, new HashSet<Guid>(filteredIDs), VdcBllMessages.VAR__FILTERTYPE__EXTERNAL, Arrays.toString(filterNames.toArray()), result, correlationId);
        }
    }
    return intersectHosts(hostList, filteredIDs);
}
#end_block

#method_before
protected Guid runFunctions(ArrayList<Pair<Guid, Integer>> functions, List<VDS> hostList, VM vm, Map<String, String> parameters) {
    ArrayList<Pair<PolicyUnitImpl, Integer>> internalScoreFunctions = new ArrayList<Pair<PolicyUnitImpl, Integer>>();
    ArrayList<Pair<PolicyUnitImpl, Integer>> externalScoreFunctions = new ArrayList<Pair<PolicyUnitImpl, Integer>>();
    for (Pair<Guid, Integer> pair : functions) {
        PolicyUnitImpl currentPolicy = policyUnits.get(pair.getFirst());
        if (currentPolicy.isInternal()) {
            internalScoreFunctions.add(new Pair<PolicyUnitImpl, Integer>(currentPolicy, pair.getSecond()));
        } else {
            if (currentPolicy.isEnabled()) {
                externalScoreFunctions.add(new Pair<PolicyUnitImpl, Integer>(currentPolicy, pair.getSecond()));
            }
        }
    }
    Map<Guid, Integer> hostCostTable = runInternalFunctions(internalScoreFunctions, hostList, vm, parameters);
    if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled) && externalScoreFunctions.size() > 0) {
        runExternalFunctions(externalScoreFunctions, hostList, vm, parameters, hostCostTable);
    }
    Entry<Guid, Integer> bestHostEntry = null;
    for (Entry<Guid, Integer> entry : hostCostTable.entrySet()) {
        if (bestHostEntry == null || bestHostEntry.getValue() > entry.getValue()) {
            bestHostEntry = entry;
        }
    }
    if (bestHostEntry == null) {
        return null;
    }
    return bestHostEntry.getKey();
}
#method_after
protected Guid runFunctions(ArrayList<Pair<Guid, Integer>> functions, List<VDS> hostList, VM vm, Map<String, String> parameters) {
    ArrayList<Pair<PolicyUnitImpl, Integer>> internalScoreFunctions = new ArrayList<Pair<PolicyUnitImpl, Integer>>();
    ArrayList<Pair<PolicyUnitImpl, Integer>> externalScoreFunctions = new ArrayList<Pair<PolicyUnitImpl, Integer>>();
    for (Pair<Guid, Integer> pair : functions) {
        PolicyUnitImpl currentPolicy = policyUnits.get(pair.getFirst());
        if (currentPolicy.isInternal()) {
            internalScoreFunctions.add(new Pair<PolicyUnitImpl, Integer>(currentPolicy, pair.getSecond()));
        } else {
            if (currentPolicy.isEnabled()) {
                externalScoreFunctions.add(new Pair<PolicyUnitImpl, Integer>(currentPolicy, pair.getSecond()));
            }
        }
    }
    Map<Guid, Integer> hostCostTable = runInternalFunctions(internalScoreFunctions, hostList, vm, parameters);
    if (Config.<Boolean>getValue(ConfigValues.ExternalSchedulerEnabled) && externalScoreFunctions.size() > 0) {
        runExternalFunctions(externalScoreFunctions, hostList, vm, parameters, hostCostTable);
    }
    Entry<Guid, Integer> bestHostEntry = null;
    for (Entry<Guid, Integer> entry : hostCostTable.entrySet()) {
        if (bestHostEntry == null || bestHostEntry.getValue() > entry.getValue()) {
            bestHostEntry = entry;
        }
    }
    if (bestHostEntry == null) {
        return null;
    }
    return bestHostEntry.getKey();
}
#end_block

#method_before
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.RunQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#method_after
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#end_block

#method_before
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
    initHasSpiceSupport();
}
#method_after
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
    initDisplayTypes();
    initNicHotplugSupportMap();
    initDiskHotpluggableInterfacesMap();
    initOsArchitecture();
}
#end_block

#method_before
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#method_after
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#end_block

#method_before
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#method_after
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#end_block

#method_before
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#method_after
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#end_block

#method_before
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#method_after
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#end_block

#method_before
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#method_after
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#end_block

#method_before
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#method_after
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#end_block

#method_before
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#method_after
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#end_block

#method_before
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void isVirtioScsiEnabledForVm(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<VmDevice>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVirtioScsiControllers, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void isVirtioScsiEnabledForVm(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<VmDevice>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVirtioScsiControllers, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#method_after
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#end_block

#method_before
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.RunQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#method_after
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#end_block

#method_before
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#method_after
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#end_block

#method_before
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#method_after
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#end_block

#method_before
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#method_after
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#end_block

#method_before
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#method_after
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#method_after
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#method_after
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#end_block

#method_before
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.Model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.Model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#method_after
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#end_block

#method_before
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.RunQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#method_after
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#end_block

#method_before
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#method_after
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#end_block

#method_before
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#method_after
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#end_block

#method_before
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.RunQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#method_after
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getGlusterRebalanceStatus(AsyncQuery aQuery, Guid clusterId, Guid volumeId) {
    aQuery.converterCallback = new IAsyncConverter<GlusterVolumeTaskStatusEntity>() {

        @Override
        public GlusterVolumeTaskStatusEntity Convert(Object source, AsyncQuery _asyncQuery) {
            return (GlusterVolumeTaskStatusEntity) source;
        }
    };
    GlusterVolumeQueriesParameters parameters = new GlusterVolumeQueriesParameters(clusterId, volumeId);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeRebalanceStatus, parameters, aQuery);
}
#method_after
public static void getGlusterRebalanceStatus(AsyncQuery aQuery, Guid clusterId, Guid volumeId) {
    aQuery.setHandleFailure(true);
    GlusterVolumeQueriesParameters parameters = new GlusterVolumeQueriesParameters(clusterId, volumeId);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeRebalanceStatus, parameters, aQuery);
}
#end_block

#method_before
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#method_after
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#end_block

#method_before
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<permissions>) source : new ArrayList<permissions>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#method_after
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Permissions>) source : new ArrayList<Permissions>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#end_block

#method_before
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#method_after
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#end_block

#method_before
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#method_after
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#end_block

#method_before
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.RunQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#method_after
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#end_block

#method_before
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#method_after
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#end_block

#method_before
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#method_after
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#end_block

#method_before
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#method_after
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#end_block

#method_before
public static void getPmOptions(AsyncQuery aQuery, String pmType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.Data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.RunQuery(VdcQueryType.GetAgentFenceOptions, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getPmOptions(AsyncQuery aQuery, String pmType, String version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.Data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.getInstance().runQuery(VdcQueryType.GetAgentFenceOptions, new GetAgentFenceOptionsQueryParameters(version), aQuery);
}
#end_block

#method_before
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.RunQuery(VdcQueryType.Search, sp, aQuery);
}
#method_after
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#end_block

#method_before
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#method_after
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#end_block

#method_before
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#method_after
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#end_block

#method_before
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#method_after
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#end_block

#method_before
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                tags tag = (tags) source;
                tags root = new tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new tags();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                Tags tag = (Tags) source;
                Tags root = new Tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new Tags();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<tags> ret = new ArrayList<tags>();
                for (tags tags : (ArrayList<tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new tags();
        }
    };
}
#method_after
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<Tags> ret = new ArrayList<Tags>();
                for (Tags tags : (ArrayList<Tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new Tags();
        }
    };
}
#end_block

#method_before
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#method_after
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#end_block

#method_before
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.RunQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#method_after
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.getInstance().runQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#end_block

#method_before
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#method_after
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.getInstance().runQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#end_block

#method_before
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#method_after
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#end_block

#method_before
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#method_after
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#end_block

#method_before
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#end_block

#method_before
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#method_after
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#end_block

#method_before
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.RunQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#method_after
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#end_block

#method_before
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#method_after
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#end_block

#method_before
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.RunQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#method_after
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.getInstance().runQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#end_block

#method_before
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#method_after
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.RunMultipleQueries(queryTypeList, parametersList, callback);
}
#method_after
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.getInstance().runMultipleQueries(queryTypeList, parametersList, callback);
}
#end_block

#method_before
public static void fillTagsRecursive(tags tagToFill, List<tags> children) {
    ArrayList<tags> list = new ArrayList<tags>();
    for (tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#method_after
public static void fillTagsRecursive(Tags tagToFill, List<Tags> children) {
    ArrayList<Tags> list = new ArrayList<Tags>();
    for (Tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#end_block

#method_before
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.GetNotificationEvents();
}
#method_after
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.getNotificationEvents();
}
#end_block

#method_before
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#method_after
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#end_block

#method_before
public static ArrayList<DiskInterface> getDiskInterfaceList(Version clusterVersion) {
    ArrayList<DiskInterface> diskInterfaces = new ArrayList<DiskInterface>(Arrays.asList(new DiskInterface[] { DiskInterface.IDE, DiskInterface.VirtIO }));
    boolean isVirtIOScsiEnabled = clusterVersion != null ? (Boolean) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VirtIoScsiEnabled, clusterVersion.getValue()) : true;
    if (isVirtIOScsiEnabled) {
        diskInterfaces.add(DiskInterface.VirtIO_SCSI);
    }
    return diskInterfaces;
}
#method_after
public static void getDiskInterfaceList(int osId, Version clusterVersion, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> interfaces = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<DiskInterface> interfaceTypes = new ArrayList<DiskInterface>();
            for (String diskIfs : interfaces) {
                try {
                    interfaceTypes.add(DiskInterface.valueOf(diskIfs));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetDiskInterfaces, osId, clusterVersion), asyncQuery);
}
#end_block

#method_before
public static String getNewNicName(ArrayList<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#method_after
public static String getNewNicName(List<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#end_block

#method_before
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#method_after
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#end_block

#method_before
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#method_after
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#end_block

#method_before
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#method_after
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            // Initialize specific UI dependencies for search
            SimpleDependecyInjector.getInstance().bind(new OsValueAutoCompleter(uniqueOsNames));
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#end_block

#method_before
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#method_after
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#end_block

#method_before
public static Boolean hasSpiceSupport(int osId, Version version) {
    return spiceSupportMatrix.get(osId).get(version);
}
#method_after
public static boolean hasSpiceSupport(int osId, Version version) {
    return getDisplayTypes(osId, version).contains(DisplayType.qxl);
}
#end_block

#method_before
public static List<Integer> getOsIds() {
    return osIds;
}
#method_after
public static List<Integer> getOsIds(ArchitectureType architectureType) {
    List<Integer> osIds = new ArrayList<Integer>();
    for (Entry<Integer, ArchitectureType> entry : osArchitectures.entrySet()) {
        if (entry.getValue() == architectureType) {
            osIds.add(entry.getKey());
        }
    }
    Collections.sort(osIds, new Comparator<Integer>() {

        @Override
        public int compare(Integer o1, Integer o2) {
            return osNames.get(o1).compareTo(osNames.get(o2));
        }
    });
    return osIds;
}
#end_block

#method_before
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#method_after
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#end_block

#method_before
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#method_after
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#method_after
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#end_block

#method_before
public static Integer getMaxVmNameLengthWin() {
    Integer maxVmNameLengthWindows = (Integer) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MaxVmNameLengthWindows);
    return maxVmNameLengthWindows == null ? 15 : maxVmNameLengthWindows;
}
#method_after
public static Integer getMaxVmNameLengthWin() {
    Integer maxVmNameLengthWindows = (Integer) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MaxVmNameLengthWindows);
    if (maxVmNameLengthWindows == null) {
        return 15;
    }
    return maxVmNameLengthWindows;
}
#end_block

#method_before
public static Integer getMaxVmNameLengthNonWin() {
    Integer maxVmNameLengthNonWindows = (Integer) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MaxVmNameLengthNonWindows);
    return maxVmNameLengthNonWindows == null ? 64 : maxVmNameLengthNonWindows;
}
#method_after
public static Integer getMaxVmNameLengthNonWin() {
    Integer maxVmNameLengthNonWindows = (Integer) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MaxVmNameLengthNonWindows);
    if (maxVmNameLengthNonWindows == null) {
        return 64;
    }
    return maxVmNameLengthNonWindows;
}
#end_block

#method_before
public static int getOptimizeSchedulerForSpeedPendingRequests() {
    return (Integer) getConfigValuePreConverted(ConfigurationValues.OptimizeSchedulerForSpeedPendingRequests, getDefaultConfigurationVersion());
}
#method_after
public static int getOptimizeSchedulerForSpeedPendingRequests() {
    return (Integer) getConfigValuePreConverted(ConfigurationValues.SpeedOptimizationSchedulingThreshold, getDefaultConfigurationVersion());
}
#end_block

#method_before
public static boolean getScheudulingAllowOverbookingSupported() {
    return (Boolean) getConfigValuePreConverted(ConfigurationValues.OptimizeSchedulerAllowOverBookingSupported, getDefaultConfigurationVersion());
}
#method_after
public static boolean getScheudulingAllowOverbookingSupported() {
    return (Boolean) getConfigValuePreConverted(ConfigurationValues.SchedulerAllowOverBooking, getDefaultConfigurationVersion());
}
#end_block

#method_before
private void addStyles() {
    importGlusterConfigurationEditor.addContentWidgetStyleName(style.editorContentWidget());
    migrateOnErrorOption_NOEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_YESEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_HA_ONLYEditor.addContentWidgetStyleName(style.label());
    optimizationNoneEditor.setContentWidgetStyleName(style.fullWidth());
    optimizationForServerEditor.setContentWidgetStyleName(style.fullWidth());
    optimizationForDesktopEditor.setContentWidgetStyleName(style.fullWidth());
    optimizationCustomEditor.setContentWidgetStyleName(style.fullWidth());
    countThreadsAsCoresEditor.setContentWidgetStyleName(style.fullWidth());
    enableTrustedServiceEditor.setContentWidgetStyleName(style.fullWidth());
    allowOverbookingEditor.setContentWidgetStyleName(style.allowOverbookingContentWidget());
}
#method_after
private void addStyles() {
    importGlusterConfigurationEditor.addContentWidgetStyleName(style.editorContentWidget());
    migrateOnErrorOption_NOEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_YESEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_HA_ONLYEditor.addContentWidgetStyleName(style.label());
    countThreadsAsCoresEditor.setContentWidgetStyleName(style.fullWidth());
    enableTrustedServiceEditor.setContentWidgetStyleName(style.fullWidth());
}
#end_block

#method_before
private void localize(ApplicationConstants constants) {
    generalTab.setLabel(constants.clusterPopupGeneralTabLabel());
    dataCenterEditor.setLabel(constants.clusterPopupDataCenterLabel());
    nameEditor.setLabel(constants.clusterPopupNameLabel());
    descriptionEditor.setLabel(constants.clusterPopupDescriptionLabel());
    commentEditor.setLabel(constants.commentLabel());
    cPUEditor.setLabel(constants.clusterPopupCPULabel());
    versionEditor.setLabel(constants.clusterPopupVersionLabel());
    enableOvirtServiceEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    enableOvirtServiceOptionEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceOptionEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    importGlusterConfigurationEditor.setLabel(constants.clusterImportGlusterConfigurationLabel());
    importGlusterExplanationLabel.setText(constants.clusterImportGlusterConfigurationExplanationLabel());
    glusterHostAddressEditor.setLabel(constants.hostPopupHostAddressLabel());
    glusterHostFingerprintEditor.setLabel(constants.hostPopupHostFingerprintLabel());
    glusterHostPasswordEditor.setLabel(constants.hostPopupPasswordLabel());
    optimizationTab.setLabel(constants.clusterPopupOptimizationTabLabel());
    memoryOptimizationPanelTitle.setText(constants.clusterPopupMemoryOptimizationPanelTitle());
    optimizationNoneEditor.setLabel(constants.clusterPopupOptimizationNoneLabel());
    cpuThreadsPanelTitle.setText(constants.clusterPopupCpuThreadsPanelTitle());
    countThreadsAsCoresEditor.setLabel(constants.clusterPopupCountThreadsAsCoresLabel());
    resiliencePolicyTab.setLabel(constants.clusterPopupResiliencePolicyTabLabel());
    migrateOnErrorOption_YESEditor.setLabel(constants.clusterPopupMigrateOnError_YesLabel());
    migrateOnErrorOption_HA_ONLYEditor.setLabel(constants.clusterPopupMigrateOnError_HaLabel());
    migrateOnErrorOption_NOEditor.setLabel(constants.clusterPopupMigrateOnError_NoLabel());
    clusterPolicyTab.setLabel(constants.clusterPopupClusterPolicyTabLabel());
    additionPropsPanelTitle.setText(constants.clusterPolicyAdditionalPropsPanelTitle());
    enableTrustedServiceEditor.setLabel(constants.clusterPolicyEnableTrustedServiceLabel());
    clusterPolicyEditor.setLabel(constants.clusterPolicySelectPolicyLabel());
    enableBallooning.setLabel(constants.enableBallooningLabel());
    schedulerOptimizationPanelTitle.setText(constants.schedulerOptimizationPanelLabel());
    optimizeForUtilizationEditor.setLabel(constants.optimizeForUtilizationLabel());
    optimizeForSpeedEditor.setLabel(constants.optimizeForSpeedLabel());
    allowOverbookingEditor.setLabel(constants.allowOverbookingLabel());
}
#method_after
private void localize(ApplicationConstants constants) {
    generalTab.setLabel(constants.clusterPopupGeneralTabLabel());
    dataCenterEditor.setLabel(constants.clusterPopupDataCenterLabel());
    nameEditor.setLabel(constants.clusterPopupNameLabel());
    descriptionEditor.setLabel(constants.clusterPopupDescriptionLabel());
    commentEditor.setLabel(constants.commentLabel());
    cPUEditor.setLabel(constants.clusterPopupCPULabel());
    architectureEditor.setLabel(constants.clusterPopupArchitectureLabel());
    versionEditor.setLabel(constants.clusterPopupVersionLabel());
    enableOvirtServiceEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    enableOvirtServiceOptionEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceOptionEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    importGlusterConfigurationEditor.setLabel(constants.clusterImportGlusterConfigurationLabel());
    importGlusterExplanationLabel.setText(constants.clusterImportGlusterConfigurationExplanationLabel());
    glusterHostAddressEditor.setLabel(constants.hostPopupHostAddressLabel());
    glusterHostFingerprintEditor.setLabel(constants.hostPopupHostFingerprintLabel());
    glusterHostPasswordEditor.setLabel(constants.hostPopupPasswordLabel());
    optimizationTab.setLabel(constants.clusterPopupOptimizationTabLabel());
    memoryOptimizationPanelTitle.setText(constants.clusterPopupMemoryOptimizationPanelTitle());
    optimizationNoneEditor.asRadioButton().setHTML(templates.radioButtonLabel(constants.clusterPopupOptimizationNoneLabel()));
    cpuThreadsPanelTitle.setText(constants.clusterPopupCpuThreadsPanelTitle());
    countThreadsAsCoresEditor.setLabel(constants.clusterPopupCountThreadsAsCoresLabel());
    resiliencePolicyTab.setLabel(constants.clusterPopupResiliencePolicyTabLabel());
    migrateOnErrorOption_YESEditor.setLabel(constants.clusterPopupMigrateOnError_YesLabel());
    migrateOnErrorOption_HA_ONLYEditor.setLabel(constants.clusterPopupMigrateOnError_HaLabel());
    migrateOnErrorOption_NOEditor.setLabel(constants.clusterPopupMigrateOnError_NoLabel());
    clusterPolicyTab.setLabel(constants.clusterPopupClusterPolicyTabLabel());
    additionPropsPanelTitle.setText(constants.clusterPolicyAdditionalPropsPanelTitle());
    enableTrustedServiceEditor.setLabel(constants.clusterPolicyEnableTrustedServiceLabel());
    clusterPolicyEditor.setLabel(constants.clusterPolicySelectPolicyLabel());
    enableBallooning.setLabel(constants.enableBallooningLabel());
    schedulerOptimizationPanelTitle.setText(constants.schedulerOptimizationPanelLabel());
    optimizeForUtilizationEditor.setLabel(constants.optimizeForUtilizationLabel());
    optimizeForSpeedEditor.setLabel(constants.optimizeForSpeedLabel());
    guarantyResourcesEditor.setLabel(constants.guarantyResourcesLabel());
    allowOverbookingEditor.setLabel(constants.allowOverbookingLabel());
}
#end_block

#method_before
private void initRadioButtonEditors() {
    // $NON-NLS-1$
    enableOvirtServiceOptionEditor = new EntityModelRadioButtonEditor("service");
    // $NON-NLS-1$
    enableGlusterServiceOptionEditor = new EntityModelRadioButtonEditor("service");
    // $NON-NLS-1$
    optimizationNoneEditor = new EntityModelRadioButtonEditor("1");
    // $NON-NLS-1$
    optimizationForServerEditor = new EntityModelRadioButtonEditor("1");
    // $NON-NLS-1$
    optimizationForDesktopEditor = new EntityModelRadioButtonEditor("1");
    // $NON-NLS-1$
    optimizationCustomEditor = new EntityModelRadioButtonEditor("1");
    // $NON-NLS-1$
    migrateOnErrorOption_YESEditor = new EntityModelRadioButtonEditor("2");
    // $NON-NLS-1$
    migrateOnErrorOption_HA_ONLYEditor = new EntityModelRadioButtonEditor("2");
    // $NON-NLS-1$
    migrateOnErrorOption_NOEditor = new EntityModelRadioButtonEditor("2");
    // $NON-NLS-1$
    optimizeForUtilizationEditor = new EntityModelRadioButtonEditor("3");
    // $NON-NLS-1$
    optimizeForSpeedEditor = new EntityModelRadioButtonEditor("3");
}
#method_after
private void initRadioButtonEditors() {
    // $NON-NLS-1$
    enableOvirtServiceOptionEditor = new EntityModelRadioButtonEditor("service");
    // $NON-NLS-1$
    enableGlusterServiceOptionEditor = new EntityModelRadioButtonEditor("service");
    // $NON-NLS-1$
    optimizationNoneEditor = new EntityModelRadioButtonEditor("1");
    // $NON-NLS-1$
    optimizationForServerEditor = new EntityModelRadioButtonEditor("1");
    // $NON-NLS-1$
    optimizationForDesktopEditor = new EntityModelRadioButtonEditor("1");
    // $NON-NLS-1$
    optimizationCustomEditor = new EntityModelRadioButtonEditor("1");
    // $NON-NLS-1$
    migrateOnErrorOption_YESEditor = new EntityModelRadioButtonEditor("2");
    // $NON-NLS-1$
    migrateOnErrorOption_HA_ONLYEditor = new EntityModelRadioButtonEditor("2");
    // $NON-NLS-1$
    migrateOnErrorOption_NOEditor = new EntityModelRadioButtonEditor("2");
    // $NON-NLS-1$
    optimizeForUtilizationEditor = new EntityModelRadioButtonEditor("3");
    // $NON-NLS-1$
    optimizeForSpeedEditor = new EntityModelRadioButtonEditor("3");
    // $NON-NLS-1$
    guarantyResourcesEditor = new EntityModelRadioButtonEditor("4");
    // $NON-NLS-1$
    allowOverbookingEditor = new EntityModelRadioButtonEditor("4");
}
#end_block

#method_before
private void initListBoxEditors() {
    dataCenterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((StoragePool) object).getName();
        }
    });
    cPUEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((ServerCpu) object).getCpuName();
        }
    });
    versionEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Version) object).toString();
        }
    });
    clusterPolicyEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((ClusterPolicy) object).getName();
        }
    });
}
#method_after
private void initListBoxEditors() {
    dataCenterEditor = new ListModelListBoxEditor<StoragePool>(new NullSafeRenderer<StoragePool>() {

        @Override
        public String renderNullSafe(StoragePool object) {
            return object.getName();
        }
    });
    cPUEditor = new ListModelListBoxEditor<ServerCpu>(new NullSafeRenderer<ServerCpu>() {

        @Override
        public String renderNullSafe(ServerCpu object) {
            return object.getCpuName();
        }
    });
    versionEditor = new ListModelListBoxEditor<Version>(new NullSafeRenderer<Version>() {

        @Override
        public String renderNullSafe(Version object) {
            return object.toString();
        }
    });
    architectureEditor = new ListModelListBoxEditor<ArchitectureType>(new NullSafeRenderer<ArchitectureType>() {

        @Override
        public String renderNullSafe(ArchitectureType object) {
            return object.toString();
        }
    });
    clusterPolicyEditor = new ListModelListBoxEditor<ClusterPolicy>(new NullSafeRenderer<ClusterPolicy>() {

        @Override
        public String renderNullSafe(ClusterPolicy object) {
            return object.getName();
        }
    });
}
#end_block

#method_before
private void initCheckBoxEditors() {
    importGlusterConfigurationEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    countThreadsAsCoresEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    enableTrustedServiceEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    enableBallooning = new EntityModelCheckBoxEditor(Align.RIGHT);
    // $NON-NLS-1$
    enableBallooning.getContentWidgetContainer().setWidth("350px");
    allowOverbookingEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
}
#method_after
private void initCheckBoxEditors() {
    importGlusterConfigurationEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    countThreadsAsCoresEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    enableTrustedServiceEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    enableBallooning = new EntityModelCheckBoxEditor(Align.RIGHT);
    // $NON-NLS-1$
    enableBallooning.getContentWidgetContainer().setWidth("350px");
}
#end_block

#method_before
private void initInfoIcons(ApplicationResources resources, ApplicationConstants constants, ApplicationTemplates templates) {
    // $NON-NLS-1$
    memoryOptimizationInfo = new InfoIcon(templates.italicFixedWidth("465px", constants.clusterPopupMemoryOptimizationInfo()), resources);
    // $NON-NLS-1$
    cpuThreadsInfo = new InfoIcon(templates.italicFixedWidth("600px", constants.clusterPopupCpuThreadsInfo()), resources);
    schedulerOptimizationInfoIcon = new InfoIcon(SafeHtmlUtils.EMPTY_SAFE_HTML, resources);
    allowOverbookingInfoIcon = // $NON-NLS-1$
    new InfoIcon(templates.italicFixedWidth("350px", constants.allowSchedulingOverbookingInfo()), resources);
}
#method_after
private void initInfoIcons(ApplicationResources resources, ApplicationConstants constants, ApplicationTemplates templates) {
    // $NON-NLS-1$
    memoryOptimizationInfo = new InfoIcon(templates.italicFixedWidth("465px", constants.clusterPopupMemoryOptimizationInfo()), resources);
    // $NON-NLS-1$
    cpuThreadsInfo = new InfoIcon(templates.italicFixedWidth("600px", constants.clusterPopupCpuThreadsInfo()), resources);
    schedulerOptimizationInfoIcon = new InfoIcon(SafeHtmlUtils.EMPTY_SAFE_HTML, resources);
    allowOverbookingInfoIcon = new InfoIcon(SafeHtmlUtils.EMPTY_SAFE_HTML, resources);
}
#end_block

#method_before
@Override
public void edit(final ClusterModel object) {
    driver.edit(object);
    servicesCheckboxPanel.setVisible(object.getAllowClusterWithVirtGlusterEnabled());
    servicesRadioPanel.setVisible(!object.getAllowClusterWithVirtGlusterEnabled());
    optimizationForServerFormatter(object);
    optimizationForDesktopFormatter(object);
    optimizationCustomFormatter(object);
    object.getOptimizationForServer().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            optimizationForServerFormatter(object);
        }
    });
    object.getOptimizationForDesktop().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            optimizationForDesktopFormatter(object);
        }
    });
    object.getOptimizationCustom_IsSelected().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if ((Boolean) object.getOptimizationCustom_IsSelected().getEntity()) {
                optimizationCustomFormatter(object);
                optimizationCustomEditor.setVisible(true);
            }
        }
    });
    object.getDataCenter().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            resiliencePolicyTab.setVisible(object.getisResiliencePolicyTabAvailable());
            applyModeCustomizations();
        }
    });
    object.getEnableGlusterService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            importGlusterExplanationLabel.setVisible((Boolean) object.getEnableGlusterService().getEntity() && object.getIsNew());
        }
    });
    importGlusterExplanationLabel.setVisible((Boolean) object.getEnableGlusterService().getEntity() && object.getIsNew());
    object.getVersionSupportsCpuThreads().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            cpuThreadsPanel.setVisible((Boolean) object.getVersionSupportsCpuThreads().getEntity());
        }
    });
    object.getCustomPropertySheet().getKeyValueLines().getItemsChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            customPropertiesSheetEditor.edit(object.getCustomPropertySheet());
        }
    });
    schedulerOptimizationInfoIcon.setText(SafeHtmlUtils.fromTrustedString(// $NON-NLS-1$
    templates.italicFixedWidth(// $NON-NLS-1$
    "350px", object.getSchedulerOptimizationInfoMessage()).asString().replaceAll("(\r\n|\n)", // $NON-NLS-1$ //$NON-NLS-2$
    "<br />")));
    allowOverbookingInfoIcon.setVisible(allowOverbookingEditor.isVisible());
}
#method_after
@Override
public void edit(final ClusterModel object) {
    driver.edit(object);
    servicesCheckboxPanel.setVisible(object.getAllowClusterWithVirtGlusterEnabled());
    servicesRadioPanel.setVisible(!object.getAllowClusterWithVirtGlusterEnabled());
    optimizationForServerFormatter(object);
    optimizationForDesktopFormatter(object);
    optimizationCustomFormatter(object);
    object.getOptimizationForServer().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            optimizationForServerFormatter(object);
        }
    });
    object.getOptimizationForDesktop().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            optimizationForDesktopFormatter(object);
        }
    });
    object.getOptimizationCustom_IsSelected().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (object.getOptimizationCustom_IsSelected().getEntity()) {
                optimizationCustomFormatter(object);
                optimizationCustomEditor.setVisible(true);
            }
        }
    });
    object.getDataCenter().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            resiliencePolicyTab.setVisible(object.getisResiliencePolicyTabAvailable());
            applyModeCustomizations();
        }
    });
    object.getEnableGlusterService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            importGlusterExplanationLabel.setVisible(object.getEnableGlusterService().getEntity() && object.getIsNew());
        }
    });
    importGlusterExplanationLabel.setVisible(object.getEnableGlusterService().getEntity() && object.getIsNew());
    object.getCPU().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isCpuNameBlank = object.getCPU().getSelectedItem() == null;
            architectureEditor.setVisible(isCpuNameBlank);
        }
    });
    object.getVersionSupportsCpuThreads().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            cpuThreadsPanel.setVisible(object.getVersionSupportsCpuThreads().getEntity());
        }
    });
    object.getCustomPropertySheet().getKeyValueLines().getItemsChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            customPropertiesSheetEditor.edit(object.getCustomPropertySheet());
        }
    });
    schedulerOptimizationInfoIcon.setText(SafeHtmlUtils.fromTrustedString(// $NON-NLS-1$
    templates.italicFixedWidth(// $NON-NLS-1$
    "350px", object.getSchedulerOptimizationInfoMessage()).asString().replaceAll("(\r\n|\n)", // $NON-NLS-1$ //$NON-NLS-2$
    "<br />")));
    allowOverbookingInfoIcon.setText(SafeHtmlUtils.fromTrustedString(// $NON-NLS-1$
    templates.italicFixedWidth(// $NON-NLS-1$
    "350px", object.getAllowOverbookingInfoMessage()).asString().replaceAll("(\r\n|\n)", // $NON-NLS-1$ //$NON-NLS-2$
    "<br />")));
    allowOverbookingPanel.setVisible(allowOverbookingEditor.isVisible());
}
#end_block

#method_before
private void optimizationForServerFormatter(ClusterModel object) {
    if (object.getOptimizationForServer() != null && object.getOptimizationForServer().getEntity() != null) {
        optimizationForServerEditor.setLabel(messages.clusterPopupMemoryOptimizationForServerLabel(object.getOptimizationForServer().getEntity().toString()));
    }
}
#method_after
private void optimizationForServerFormatter(ClusterModel object) {
    if (object.getOptimizationForServer() != null && object.getOptimizationForServer().getEntity() != null) {
        optimizationForServerEditor.asRadioButton().setHTML(templates.radioButtonLabel(messages.clusterPopupMemoryOptimizationForServerLabel(object.getOptimizationForServer().getEntity().toString())));
    }
}
#end_block

#method_before
private void optimizationForDesktopFormatter(ClusterModel object) {
    if (object.getOptimizationForDesktop() != null && object.getOptimizationForDesktop().getEntity() != null) {
        optimizationForDesktopEditor.setLabel(messages.clusterPopupMemoryOptimizationForDesktopLabel(object.getOptimizationForDesktop().getEntity().toString()));
    }
}
#method_after
private void optimizationForDesktopFormatter(ClusterModel object) {
    if (object.getOptimizationForDesktop() != null && object.getOptimizationForDesktop().getEntity() != null) {
        optimizationForDesktopEditor.asRadioButton().setHTML(templates.radioButtonLabel(messages.clusterPopupMemoryOptimizationForDesktopLabel(object.getOptimizationForDesktop().getEntity().toString())));
    }
}
#end_block

#method_before
private void optimizationCustomFormatter(ClusterModel object) {
    if (object.getOptimizationCustom() != null && object.getOptimizationCustom().getEntity() != null) {
        // Use current value because object.getOptimizationCustom.getEntity() can be null
        optimizationCustomEditor.setLabel(messages.clusterPopupMemoryOptimizationCustomLabel(String.valueOf(object.getMemoryOverCommit())));
    }
}
#method_after
private void optimizationCustomFormatter(ClusterModel object) {
    if (object.getOptimizationCustom() != null && object.getOptimizationCustom().getEntity() != null) {
        // Use current value because object.getOptimizationCustom.getEntity() can be null
        optimizationCustomEditor.asRadioButton().setHTML(templates.radioButtonLabel(messages.clusterPopupMemoryOptimizationCustomLabel(String.valueOf(object.getMemoryOverCommit()))));
    }
}
#end_block

#method_before
// get { return SelectedItems == null ? new object[0] : SelectedItems.Cast<VDSGroup>().Select(a =>
protected Object[] getSelectedKeys() {
    if (getSelectedItems() == null) {
        return new Object[0];
    } else {
        ArrayList<Object> items = new ArrayList<Object>();
        for (Object i : getSelectedItems()) {
            items.add(((VDSGroup) i).getId());
        }
        return items.toArray(new Object[] {});
    }
}
#method_after
protected Object[] getSelectedKeys() {
    if (getSelectedItems() == null) {
        return new Object[0];
    } else {
        ArrayList<Object> items = new ArrayList<Object>();
        for (Object i : getSelectedItems()) {
            items.add(((VDSGroup) i).getId());
        }
        return items.toArray(new Object[] {});
    }
}
#end_block

#method_before
@Override
protected void syncSearch() {
    SearchParameters tempVar = new SearchParameters(getSearchString(), SearchType.Cluster);
    tempVar.setMaxCount(getSearchPageSize());
    super.syncSearch(VdcQueryType.Search, tempVar);
}
#method_after
@Override
protected void syncSearch() {
    SearchParameters tempVar = new SearchParameters(getSearchString(), SearchType.Cluster, isCaseSensitiveSearch());
    tempVar.setMaxCount(getSearchPageSize());
    super.syncSearch(VdcQueryType.Search, tempVar);
}
#end_block

#method_before
public void edit() {
    final VDSGroup cluster = (VDSGroup) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    final UIConstants constants = ConstantsManager.getInstance().getConstants();
    final ClusterModel clusterModel = new ClusterModel();
    clusterModel.setEntity(cluster);
    clusterModel.init(true);
    clusterModel.getEnableTrustedService().setEntity(cluster.supportsTrustedService());
    setWindow(clusterModel);
    clusterModel.setTitle(ConstantsManager.getInstance().getConstants().editClusterTitle());
    // $NON-NLS-1$
    clusterModel.setHashName("edit_cluster");
    clusterModel.setOriginalName(cluster.getName());
    clusterModel.getName().setEntity(cluster.getName());
    clusterModel.getEnableOvirtService().setEntity(cluster.supportsVirtService());
    clusterModel.getEnableOvirtService().setIsChangable(true);
    clusterModel.getEnableGlusterService().setEntity(cluster.supportsGlusterService());
    clusterModel.getEnableGlusterService().setIsChangable(true);
    clusterModel.getEnableBallooning().setEntity(cluster.isEnableBallooning());
    if (cluster.supportsTrustedService()) {
        clusterModel.getEnableGlusterService().setIsChangable(false);
    }
    if (cluster.supportsVirtService() && !cluster.supportsGlusterService()) {
        clusterModel.getEnableTrustedService().setIsChangable(true);
    } else {
        clusterModel.getEnableTrustedService().setIsChangable(false);
    }
    clusterModel.getOptimizeForSpeed().setEntity(cluster.isSchedulerOptimizeForSpeed());
    clusterModel.getAllowOverbooking().setEntity(cluster.isSchedulerAllowOverbooking());
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            final boolean isVirtGlusterAllowed = (Boolean) returnValue;
            AsyncQuery asyncQuery = new AsyncQuery();
            asyncQuery.setModel(clusterModel);
            asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<GlusterVolumeEntity> volumes = (ArrayList<GlusterVolumeEntity>) result;
                    if (volumes.size() > 0) {
                        clusterModel.getEnableGlusterService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableOvirtService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVolumeList(asyncQuery, cluster.getName());
            AsyncQuery asyncQuery1 = new AsyncQuery();
            asyncQuery1.setModel(clusterModel);
            asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VM> vmList = (ArrayList<VM>) result;
                    if (vmList.size() > 0) {
                        clusterModel.getEnableOvirtService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableGlusterService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVmListByClusterName(asyncQuery1, cluster.getName());
            AsyncQuery asyncQuery2 = new AsyncQuery();
            asyncQuery2.setModel(clusterModel);
            asyncQuery2.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VDS> vdsList = (ArrayList<VDS>) result;
                    if (vdsList.size() > 0) {
                        clusterModel.getEnableTrustedService().setIsChangable(false);
                        clusterModel.getEnableTrustedService().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().trustedServiceDisabled());
                    }
                }
            };
            AsyncDataProvider.getHostListByCluster(asyncQuery2, cluster.getName());
        }
    }));
    if (getSystemTreeSelectedItem() != null && (getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster || getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster_Gluster)) {
        clusterModel.getName().setIsChangable(false);
        clusterModel.getName().setChangeProhibitionReason(constants.cannotEditNameInTreeContext());
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    clusterModel.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    clusterModel.getCommands().add(tempVar2);
}
#method_after
public void edit() {
    final VDSGroup cluster = (VDSGroup) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    final UIConstants constants = ConstantsManager.getInstance().getConstants();
    final ClusterModel clusterModel = new ClusterModel();
    clusterModel.setEntity(cluster);
    clusterModel.init(true);
    clusterModel.getEnableTrustedService().setEntity(cluster.supportsTrustedService());
    setWindow(clusterModel);
    clusterModel.setTitle(ConstantsManager.getInstance().getConstants().editClusterTitle());
    // $NON-NLS-1$
    clusterModel.setHashName("edit_cluster");
    clusterModel.setOriginalName(cluster.getName());
    clusterModel.getName().setEntity(cluster.getName());
    clusterModel.getEnableOvirtService().setEntity(cluster.supportsVirtService());
    clusterModel.getEnableOvirtService().setIsChangable(true);
    clusterModel.getEnableGlusterService().setEntity(cluster.supportsGlusterService());
    clusterModel.getEnableGlusterService().setIsChangable(true);
    clusterModel.getEnableBallooning().setEntity(cluster.isEnableBallooning());
    clusterModel.getArchitecture().setSelectedItem(cluster.getArchitecture());
    if (cluster.supportsTrustedService()) {
        clusterModel.getEnableGlusterService().setIsChangable(false);
    }
    if (cluster.supportsVirtService() && !cluster.supportsGlusterService()) {
        clusterModel.getEnableTrustedService().setIsChangable(true);
    } else {
        clusterModel.getEnableTrustedService().setIsChangable(false);
    }
    clusterModel.getOptimizeForSpeed().setEntity(OptimizationType.OPTIMIZE_FOR_SPEED == cluster.getOptimizationType());
    clusterModel.getAllowOverbooking().setEntity(OptimizationType.ALLOW_OVERBOOKING == cluster.getOptimizationType());
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            final boolean isVirtGlusterAllowed = (Boolean) returnValue;
            AsyncQuery asyncQuery = new AsyncQuery();
            asyncQuery.setModel(clusterModel);
            asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<GlusterVolumeEntity> volumes = (ArrayList<GlusterVolumeEntity>) result;
                    if (volumes.size() > 0) {
                        clusterModel.getEnableGlusterService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableOvirtService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVolumeList(asyncQuery, cluster.getName());
            AsyncQuery asyncQuery1 = new AsyncQuery();
            asyncQuery1.setModel(clusterModel);
            asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VM> vmList = (ArrayList<VM>) result;
                    if (vmList.size() > 0) {
                        clusterModel.getEnableOvirtService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableGlusterService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVmListByClusterName(asyncQuery1, cluster.getName());
            AsyncQuery asyncQuery2 = new AsyncQuery();
            asyncQuery2.setModel(clusterModel);
            asyncQuery2.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VDS> vdsList = (ArrayList<VDS>) result;
                    if (vdsList.size() > 0) {
                        clusterModel.getEnableTrustedService().setIsChangable(false);
                        clusterModel.getEnableTrustedService().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().trustedServiceDisabled());
                    }
                }
            };
            AsyncDataProvider.getHostListByCluster(asyncQuery2, cluster.getName());
        }
    }));
    if (getSystemTreeSelectedItem() != null && (getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster || getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster_Gluster)) {
        clusterModel.getName().setIsChangable(false);
        clusterModel.getName().setChangeProhibitionReason(constants.cannotEditNameInTreeContext());
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    clusterModel.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    clusterModel.getCommands().add(tempVar2);
}
#end_block

#method_before
public void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeClusterTitle());
    // $NON-NLS-1$
    model.setHashName("remove_cluster");
    model.setMessage(ConstantsManager.getInstance().getConstants().clustersMsg());
    ArrayList<String> list = new ArrayList<String>();
    for (VDSGroup a : Linq.<VDSGroup>cast(getSelectedItems())) {
        list.add(a.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeClusterTitle());
    // $NON-NLS-1$
    model.setHashName("remove_cluster");
    ArrayList<String> list = new ArrayList<String>();
    for (VDSGroup a : Linq.<VDSGroup>cast(getSelectedItems())) {
        list.add(a.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
public void onRemove() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object a : getSelectedItems()) {
        prms.add(new VdsGroupParametersBase(((VDSGroup) a).getId()));
    }
    model.startProgress(null);
    Frontend.RunMultipleAction(VdcActionType.RemoveVdsGroup, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#method_after
public void onRemove() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object a : getSelectedItems()) {
        prms.add(new VdsGroupParametersBase(((VDSGroup) a).getId()));
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.RemoveVdsGroup, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#end_block

#method_before
public void onSave() {
    ClusterModel model = (ClusterModel) getWindow();
    boolean validateCpu = (model.getIsNew() && (Boolean) model.getEnableOvirtService().getEntity()) || (model.getIsEdit() && ((VDSGroup) getSelectedItem()).getcpu_name() != null);
    if (!model.validate(validateCpu)) {
        return;
    } else if (model.getIsNew()) {
        onPreSaveInternal(model);
    } else {
        onSaveConfirmCV(model);
    }
}
#method_after
public void onSave() {
    ClusterModel model = (ClusterModel) getWindow();
    boolean validateCpu = (model.getIsNew() && model.getEnableOvirtService().getEntity()) || (model.getIsEdit() && ((VDSGroup) getSelectedItem()).getcpu_name() != null);
    if (!model.validate(validateCpu)) {
        return;
    } else if (model.getIsNew()) {
        onPreSaveInternal(model);
    } else {
        onSaveConfirmCV(model);
    }
}
#end_block

#method_before
private void onSaveConfirmCV(ClusterModel model) {
    if (!((Version) model.getVersion().getSelectedItem()).equals(((VDSGroup) getSelectedItem()).getcompatibility_version())) {
        final ConfirmationModel confirmModel = new ConfirmationModel();
        setConfirmWindow(confirmModel);
        confirmModel.setTitle(ConstantsManager.getInstance().getConstants().changeClusterCompatibilityVersionTitle());
        // $NON-NLS-1$
        confirmModel.setHashName("change_cluster_compatibility_version");
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnSaveConfirmCpuThreads", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        getConfirmWindow().getCommands().add(tempVar);
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("CancelConfirmation", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        tempVar2.setIsCancel(true);
        getConfirmWindow().getCommands().add(tempVar2);
        checkForNonResponsiveHosts(confirmModel);
    } else {
        onSaveConfirmCpuThreads();
    }
}
#method_after
private void onSaveConfirmCV(ClusterModel model) {
    if (!model.getVersion().getSelectedItem().equals(((VDSGroup) getSelectedItem()).getcompatibility_version())) {
        final ConfirmationModel confirmModel = new ConfirmationModel();
        setConfirmWindow(confirmModel);
        confirmModel.setTitle(ConstantsManager.getInstance().getConstants().changeClusterCompatibilityVersionTitle());
        // $NON-NLS-1$
        confirmModel.setHashName("change_cluster_compatibility_version");
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnSaveConfirmCpuThreads", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        getConfirmWindow().getCommands().add(tempVar);
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("CancelConfirmation", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        tempVar2.setIsCancel(true);
        getConfirmWindow().getCommands().add(tempVar2);
        checkForNonResponsiveHosts(confirmModel);
    } else {
        onSaveConfirmCpuThreads();
    }
}
#end_block

#method_before
private void onSaveConfirmCpuThreads() {
    ClusterModel model = (ClusterModel) getWindow();
    // cancel confirm window if there is one
    cancelConfirmation();
    // CPU thread support is being turned off either explicitly or via version change
    if (!((Boolean) model.getVersionSupportsCpuThreads().getEntity() && (Boolean) model.getCountThreadsAsCores().getEntity()) && ((VDSGroup) getSelectedItem()).getCountThreadsAsCores()) {
        ConfirmationModel confirmModel = new ConfirmationModel();
        setConfirmWindow(confirmModel);
        confirmModel.setTitle(ConstantsManager.getInstance().getConstants().disableClusterCpuThreadSupportTitle());
        // $NON-NLS-1$
        confirmModel.setHashName("disable_cpu_thread_support");
        confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCpuThreadSupportMsg());
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnSaveInternal", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        getConfirmWindow().getCommands().add(tempVar);
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("CancelConfirmation", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        tempVar2.setIsCancel(true);
        getConfirmWindow().getCommands().add(tempVar2);
    } else {
        onSaveInternal();
    }
}
#method_after
private void onSaveConfirmCpuThreads() {
    ClusterModel model = (ClusterModel) getWindow();
    // cancel confirm window if there is one
    cancelConfirmation();
    // CPU thread support is being turned off either explicitly or via version change
    if (!model.getVersionSupportsCpuThreads().getEntity() && model.getCountThreadsAsCores().getEntity() && ((VDSGroup) getSelectedItem()).getCountThreadsAsCores()) {
        ConfirmationModel confirmModel = new ConfirmationModel();
        setConfirmWindow(confirmModel);
        confirmModel.setTitle(ConstantsManager.getInstance().getConstants().disableClusterCpuThreadSupportTitle());
        // $NON-NLS-1$
        confirmModel.setHashName("disable_cpu_thread_support");
        confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCpuThreadSupportMsg());
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnSaveConfirmCpuLevel", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        getConfirmWindow().getCommands().add(tempVar);
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("CancelConfirmation", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        tempVar2.setIsCancel(true);
        getConfirmWindow().getCommands().add(tempVar2);
    } else {
        onSaveConfirmCpuLevel();
    }
}
#end_block

#method_before
public void onPreSaveInternal(ClusterModel model) {
    if ((Boolean) model.getIsImportGlusterConfiguration().getEntity()) {
        fetchAndImportClusterHosts(model);
    } else {
        onSaveInternal();
    }
}
#method_after
public void onPreSaveInternal(ClusterModel model) {
    if (model.getIsImportGlusterConfiguration().getEntity()) {
        fetchAndImportClusterHosts(model);
    } else {
        onSaveInternal();
    }
}
#end_block

#method_before
private void onSaveInternalWithModel(final ClusterModel model) {
    VDSGroup cluster = model.getIsNew() ? new VDSGroup() : (VDSGroup) Cloner.clone(getSelectedItem());
    Version version = (Version) model.getVersion().getSelectedItem();
    cluster.setName((String) model.getName().getEntity());
    cluster.setdescription((String) model.getDescription().getEntity());
    cluster.setComment((String) model.getComment().getEntity());
    cluster.setStoragePoolId(((StoragePool) model.getDataCenter().getSelectedItem()).getId());
    if (model.getCPU().getSelectedItem() != null) {
        cluster.setcpu_name(((ServerCpu) model.getCPU().getSelectedItem()).getCpuName());
    }
    cluster.setmax_vds_memory_over_commit(model.getMemoryOverCommit());
    cluster.setCountThreadsAsCores(Boolean.TRUE.equals(model.getVersionSupportsCpuThreads().getEntity()) && Boolean.TRUE.equals(model.getCountThreadsAsCores().getEntity()));
    cluster.setEnableBallooning(Boolean.TRUE.equals(model.getEnableBallooning().getEntity()) && version.compareTo(Version.v3_3) >= 0);
    // $NON-NLS-1$
    cluster.setTransparentHugepages(version.compareTo(new Version("3.0")) >= 0);
    cluster.setcompatibility_version(version);
    cluster.setMigrateOnError(model.getMigrateOnErrorOption());
    cluster.setVirtService((Boolean) model.getEnableOvirtService().getEntity());
    cluster.setGlusterService((Boolean) model.getEnableGlusterService().getEntity());
    cluster.setTrustedService((Boolean) model.getEnableTrustedService().getEntity());
    cluster.setClusterPolicyId(((ClusterPolicy) model.getClusterPolicy().getSelectedItem()).getId());
    cluster.setClusterPolicyProperties(KeyValueModel.convertProperties(model.getCustomPropertySheet().getEntity()));
    cluster.setSchedulerOptimizeForSpeed((Boolean) model.getOptimizeForSpeed().getEntity());
    cluster.setSchedulerAllowOverbooking((Boolean) model.getAllowOverbooking().getEntity());
    model.startProgress(null);
    Frontend.RunAction(model.getIsNew() ? VdcActionType.AddVdsGroup : VdcActionType.UpdateVdsGroup, new VdsGroupOperationParameters(cluster), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ClusterListModel localModel = (ClusterListModel) result.getState();
            if ((Boolean) model.getIsImportGlusterConfiguration().getEntity()) {
                localModel.postOnSaveInternalWithImport(result.getReturnValue());
            } else {
                localModel.postOnSaveInternal(result.getReturnValue());
            }
        }
    }, this);
}
#method_after
private void onSaveInternalWithModel(final ClusterModel model) {
    VDSGroup cluster = model.getIsNew() ? new VDSGroup() : (VDSGroup) Cloner.clone(getSelectedItem());
    Version version = model.getVersion().getSelectedItem();
    cluster.setName(model.getName().getEntity());
    cluster.setdescription(model.getDescription().getEntity());
    cluster.setComment(model.getComment().getEntity());
    cluster.setStoragePoolId(model.getDataCenter().getSelectedItem().getId());
    if (model.getCPU().getSelectedItem() != null) {
        cluster.setcpu_name(model.getCPU().getSelectedItem().getCpuName());
    }
    cluster.setmax_vds_memory_over_commit(model.getMemoryOverCommit());
    cluster.setCountThreadsAsCores(Boolean.TRUE.equals(model.getVersionSupportsCpuThreads().getEntity()) && Boolean.TRUE.equals(model.getCountThreadsAsCores().getEntity()));
    cluster.setEnableBallooning(Boolean.TRUE.equals(model.getEnableBallooning().getEntity()) && version.compareTo(Version.v3_3) >= 0);
    // $NON-NLS-1$
    cluster.setTransparentHugepages(version.compareTo(new Version("3.0")) >= 0);
    cluster.setcompatibility_version(version);
    cluster.setMigrateOnError(model.getMigrateOnErrorOption());
    cluster.setVirtService(model.getEnableOvirtService().getEntity());
    cluster.setGlusterService(model.getEnableGlusterService().getEntity());
    cluster.setTrustedService(model.getEnableTrustedService().getEntity());
    cluster.setClusterPolicyId(model.getClusterPolicy().getSelectedItem().getId());
    cluster.setClusterPolicyProperties(KeyValueModel.convertProperties(model.getCustomPropertySheet().getEntity()));
    if (model.getOptimizeForSpeed().getEntity()) {
        cluster.setOptimizationType(OptimizationType.OPTIMIZE_FOR_SPEED);
    } else if (model.getAllowOverbooking().getEntity()) {
        cluster.setOptimizationType(OptimizationType.ALLOW_OVERBOOKING);
    } else {
        cluster.setOptimizationType(OptimizationType.NONE);
    }
    if (model.getCPU().getSelectedItem() == null) {
        cluster.setArchitecture(model.getArchitecture().getSelectedItem());
    } else {
        cluster.setArchitecture(null);
    }
    model.startProgress(null);
    Frontend.getInstance().runAction(model.getIsNew() ? VdcActionType.AddVdsGroup : VdcActionType.UpdateVdsGroup, new VdsGroupOperationParameters(cluster), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ClusterListModel localModel = (ClusterListModel) result.getState();
            if (model.getIsImportGlusterConfiguration().getEntity()) {
                localModel.postOnSaveInternalWithImport(result.getReturnValue());
            } else {
                localModel.postOnSaveInternal(result.getReturnValue());
            }
        }
    }, this);
}
#end_block

#method_before
private void fetchAndImportClusterHosts(final ClusterModel clusterModel) {
    getWindow().startProgress(null);
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.setHandleFailure(true);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            getWindow().stopProgress();
            VdcQueryReturnValue returnValue = (VdcQueryReturnValue) result;
            if (returnValue == null) {
                onEmptyGlusterHosts(clusterModel);
                return;
            } else if (!returnValue.getSucceeded()) {
                clusterModel.setMessage(Frontend.getAppErrorsTranslator().TranslateErrorTextSingle(returnValue.getExceptionString()));
                return;
            }
            Map<String, String> hostMap = (Map<String, String>) returnValue.getReturnValue();
            if (hostMap == null) {
                onEmptyGlusterHosts(clusterModel);
                return;
            }
            if (// $NON-NLS-1$
            hostMap.containsValue(null) || hostMap.containsValue("")) {
                onGlusterHostsWithoutFingerprint(hostMap, clusterModel);
                return;
            }
            ArrayList<EntityModel> list = new ArrayList<EntityModel>();
            for (Map.Entry<String, String> host : hostMap.entrySet()) {
                HostDetailModel hostModel = new HostDetailModel(host.getKey(), host.getValue());
                hostModel.setName(host.getKey());
                // $NON-NLS-1$
                hostModel.setPassword("");
                EntityModel entityModel = new EntityModel(hostModel);
                list.add(entityModel);
            }
            importClusterHosts(clusterModel, list);
        }
    };
    AsyncDataProvider.getGlusterHosts(aQuery, (String) clusterModel.getGlusterHostAddress().getEntity(), (String) clusterModel.getGlusterHostPassword().getEntity(), (String) clusterModel.getGlusterHostFingerprint().getEntity());
}
#method_after
private void fetchAndImportClusterHosts(final ClusterModel clusterModel) {
    getWindow().startProgress(null);
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.setHandleFailure(true);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            getWindow().stopProgress();
            VdcQueryReturnValue returnValue = (VdcQueryReturnValue) result;
            if (returnValue == null) {
                onEmptyGlusterHosts(clusterModel);
                return;
            } else if (!returnValue.getSucceeded()) {
                clusterModel.setMessage(Frontend.getInstance().getAppErrorsTranslator().translateErrorTextSingle(returnValue.getExceptionString()));
                return;
            }
            Map<String, String> hostMap = returnValue.getReturnValue();
            if (hostMap == null) {
                onEmptyGlusterHosts(clusterModel);
                return;
            }
            if (// $NON-NLS-1$
            hostMap.containsValue(null) || hostMap.containsValue("")) {
                onGlusterHostsWithoutFingerprint(hostMap, clusterModel);
                return;
            }
            ArrayList<EntityModel> list = new ArrayList<EntityModel>();
            for (Map.Entry<String, String> host : hostMap.entrySet()) {
                HostDetailModel hostModel = new HostDetailModel(host.getKey(), host.getValue());
                hostModel.setName(host.getKey());
                // $NON-NLS-1$
                hostModel.setPassword("");
                EntityModel entityModel = new EntityModel(hostModel);
                list.add(entityModel);
            }
            importClusterHosts(clusterModel, list);
        }
    };
    AsyncDataProvider.getGlusterHosts(aQuery, clusterModel.getGlusterHostAddress().getEntity(), clusterModel.getGlusterHostPassword().getEntity(), clusterModel.getGlusterHostFingerprint().getEntity());
}
#end_block

#method_before
private void addHosts(final MultipleHostsModel hostsModel) {
    hostsModel.startProgress(null);
    ArrayList<VdcActionParametersBase> parametersList = new ArrayList<VdcActionParametersBase>();
    for (Object object : hostsModel.getHosts().getItems()) {
        HostDetailModel hostDetailModel = (HostDetailModel) ((EntityModel) object).getEntity();
        VDS host = new VDS();
        host.setVdsName(hostDetailModel.getName());
        host.setHostName(hostDetailModel.getAddress());
        host.setSshKeyFingerprint(hostDetailModel.getFingerprint());
        host.setPort(54321);
        // TODO: get from UI, till then using defaults.
        host.setSshPort(22);
        // $NON-NLS-1$
        host.setSshUsername("root");
        host.setVdsGroupId(hostsModel.getClusterModel().getClusterId());
        host.setpm_enabled(false);
        AddVdsActionParameters parameters = new AddVdsActionParameters();
        parameters.setVdsId(host.getId());
        parameters.setvds(host);
        parameters.setPassword(hostDetailModel.getPassword());
        parameters.setOverrideFirewall(false);
        parameters.setRebootAfterInstallation(hostsModel.getClusterModel().getEnableOvirtService().getIsSelected());
        parametersList.add(parameters);
    }
    Frontend.RunMultipleAction(VdcActionType.AddVds, parametersList, true, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            hostsModel.stopProgress();
            boolean isAllCanDoPassed = true;
            for (VdcReturnValueBase returnValueBase : result.getReturnValue()) {
                isAllCanDoPassed = isAllCanDoPassed && returnValueBase.getCanDoAction();
                if (!isAllCanDoPassed) {
                    break;
                }
            }
            if (isAllCanDoPassed) {
                cancel();
            }
        }
    }, null);
}
#method_after
private void addHosts(final MultipleHostsModel hostsModel) {
    hostsModel.startProgress(null);
    ArrayList<VdcActionParametersBase> parametersList = new ArrayList<VdcActionParametersBase>();
    for (Object object : hostsModel.getHosts().getItems()) {
        HostDetailModel hostDetailModel = (HostDetailModel) ((EntityModel) object).getEntity();
        VDS host = new VDS();
        host.setVdsName(hostDetailModel.getName());
        host.setHostName(hostDetailModel.getAddress());
        host.setSshKeyFingerprint(hostDetailModel.getFingerprint());
        host.setPort(54321);
        // TODO: get from UI, till then using defaults.
        host.setSshPort(22);
        // $NON-NLS-1$
        host.setSshUsername("root");
        host.setVdsGroupId(hostsModel.getClusterModel().getClusterId());
        host.setpm_enabled(false);
        AddVdsActionParameters parameters = new AddVdsActionParameters();
        parameters.setVdsId(host.getId());
        parameters.setvds(host);
        parameters.setPassword(hostDetailModel.getPassword());
        parameters.setOverrideFirewall(false);
        parameters.setRebootAfterInstallation(hostsModel.getClusterModel().getEnableOvirtService().getIsSelected());
        parametersList.add(parameters);
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.AddVds, parametersList, true, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            hostsModel.stopProgress();
            boolean isAllCanDoPassed = true;
            for (VdcReturnValueBase returnValueBase : result.getReturnValue()) {
                isAllCanDoPassed = isAllCanDoPassed && returnValueBase.getCanDoAction();
                if (!isAllCanDoPassed) {
                    break;
                }
            }
            if (isAllCanDoPassed) {
                cancel();
            }
        }
    }, null);
}
#end_block

#method_before
@Override
public void executeCommand(UICommand command, Object... parameters) {
    if (command == getEditCommand() && parameters.length > 0 && Boolean.TRUE.equals(parameters[0])) {
        this.clusterPolicyFirst = true;
        super.executeCommand(command, parameters);
        this.clusterPolicyFirst = false;
    }
}
#method_after
@Override
public void executeCommand(UICommand command, Object... parameters) {
    if (command == getEditCommand() && parameters.length > 0 && Boolean.TRUE.equals(parameters[0])) {
        super.executeCommand(command, parameters);
    }
}
#end_block

#method_before
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command == getNewCommand()) {
        newEntity();
    } else if (command == getEditCommand()) {
        edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getGuideCommand()) {
        guide();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        onSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        onRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveConfirmCpuThreads")) {
        onSaveConfirmCpuThreads();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveInternal")) {
        onSaveInternal();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        cancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveHosts")) {
        onSaveHosts();
    }
}
#method_after
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command == getNewCommand()) {
        newEntity();
    } else if (command == getEditCommand()) {
        edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getGuideCommand()) {
        guide();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        onSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        onRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveConfirmCpuThreads")) {
        onSaveConfirmCpuThreads();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveConfirmCpuLevel")) {
        onSaveConfirmCpuLevel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveInternal")) {
        onSaveInternal();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        cancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveHosts")) {
        onSaveHosts();
    }
}
#end_block

#method_before
@SuppressWarnings("unchecked")
private void checkForNonResponsiveHosts(final ConfirmationModel confirmModel) {
    startProgress(null);
    Frontend.RunQuery(VdcQueryType.GetHostsByClusterId, new IdQueryParameters(((VDSGroup) getSelectedItem()).getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            ClusterListModel model = (ClusterListModel) target;
            ArrayList<VDS> hosts = null;
            if (returnValue instanceof ArrayList) {
                hosts = (ArrayList<VDS>) returnValue;
            } else if (returnValue instanceof VdcQueryReturnValue && ((VdcQueryReturnValue) returnValue).getReturnValue() instanceof ArrayList) {
                hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            }
            boolean foundNRHosts = false;
            if (hosts != null) {
                for (VDS host : hosts) {
                    if (VDSStatus.NonResponsive == host.getStatus()) {
                        foundNRHosts = true;
                        break;
                    }
                }
            }
            if (foundNRHosts) {
                confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCompatibilityVersionNonResponsiveHostsMsg());
            } else {
                confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCompatibilityVersionMsg());
            }
            model.stopProgress();
        }
    }));
}
#method_after
@SuppressWarnings("unchecked")
private void checkForNonResponsiveHosts(final ConfirmationModel confirmModel) {
    startProgress(null);
    Frontend.getInstance().runQuery(VdcQueryType.GetHostsByClusterId, new IdQueryParameters(((VDSGroup) getSelectedItem()).getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            ClusterListModel model = (ClusterListModel) target;
            ArrayList<VDS> hosts = null;
            if (returnValue instanceof ArrayList) {
                hosts = (ArrayList<VDS>) returnValue;
            } else if (returnValue instanceof VdcQueryReturnValue && ((VdcQueryReturnValue) returnValue).getReturnValue() instanceof ArrayList) {
                hosts = ((VdcQueryReturnValue) returnValue).getReturnValue();
            }
            boolean foundNRHosts = false;
            if (hosts != null) {
                for (VDS host : hosts) {
                    if (VDSStatus.NonResponsive == host.getStatus()) {
                        foundNRHosts = true;
                        break;
                    }
                }
            }
            if (foundNRHosts) {
                confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCompatibilityVersionNonResponsiveHostsMsg());
            } else {
                confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCompatibilityVersionMsg());
            }
            model.stopProgress();
        }
    }));
}
#end_block

#method_before
public ListModel getClusterPolicy() {
    return clusterPolicy;
}
#method_after
public ListModel<ClusterPolicy> getClusterPolicy() {
    return clusterPolicy;
}
#end_block

#method_before
public void setClusterPolicy(ListModel clusterPolicy) {
    this.clusterPolicy = clusterPolicy;
}
#method_after
public void setClusterPolicy(ListModel<ClusterPolicy> clusterPolicy) {
    this.clusterPolicy = clusterPolicy;
}
#end_block

#method_before
public EntityModel getName() {
    return privateName;
}
#method_after
public EntityModel<String> getName() {
    return privateName;
}
#end_block

#method_before
public void setName(EntityModel value) {
    privateName = value;
}
#method_after
public void setName(EntityModel<String> value) {
    privateName = value;
}
#end_block

#method_before
public EntityModel getDescription() {
    return privateDescription;
}
#method_after
public EntityModel<String> getDescription() {
    return privateDescription;
}
#end_block

#method_before
public void setDescription(EntityModel value) {
    privateDescription = value;
}
#method_after
public void setDescription(EntityModel<String> value) {
    privateDescription = value;
}
#end_block

#method_before
public EntityModel getComment() {
    return privateComment;
}
#method_after
public EntityModel<String> getComment() {
    return privateComment;
}
#end_block

#method_before
public void setComment(EntityModel value) {
    privateComment = value;
}
#method_after
public void setComment(EntityModel<String> value) {
    privateComment = value;
}
#end_block

#method_before
public ListModel getDataCenter() {
    return privateDataCenter;
}
#method_after
public ListModel<StoragePool> getDataCenter() {
    return privateDataCenter;
}
#end_block

#method_before
public void setDataCenter(ListModel value) {
    privateDataCenter = value;
}
#method_after
public void setDataCenter(ListModel<StoragePool> value) {
    privateDataCenter = value;
}
#end_block

#method_before
public ListModel getCPU() {
    return privateCPU;
}
#method_after
public ListModel<ServerCpu> getCPU() {
    return privateCPU;
}
#end_block

#method_before
public void setCPU(ListModel value) {
    privateCPU = value;
}
#method_after
public void setCPU(ListModel<ServerCpu> value) {
    privateCPU = value;
}
#end_block

#method_before
public ListModel getVersion() {
    return privateVersion;
}
#method_after
public ListModel<Version> getVersion() {
    return privateVersion;
}
#end_block

#method_before
public void setVersion(ListModel value) {
    privateVersion = value;
}
#method_after
public void setVersion(ListModel<Version> value) {
    privateVersion = value;
}
#end_block

#method_before
public EntityModel getEnableOvirtService() {
    return privateEnableOvirtService;
}
#method_after
public EntityModel<Boolean> getEnableOvirtService() {
    return privateEnableOvirtService;
}
#end_block

#method_before
public void setEnableOvirtService(EntityModel value) {
    this.privateEnableOvirtService = value;
}
#method_after
public void setEnableOvirtService(EntityModel<Boolean> value) {
    this.privateEnableOvirtService = value;
}
#end_block

#method_before
public EntityModel getEnableGlusterService() {
    return privateEnableGlusterService;
}
#method_after
public EntityModel<Boolean> getEnableGlusterService() {
    return privateEnableGlusterService;
}
#end_block

#method_before
public void setEnableGlusterService(EntityModel value) {
    this.privateEnableGlusterService = value;
}
#method_after
public void setEnableGlusterService(EntityModel<Boolean> value) {
    this.privateEnableGlusterService = value;
}
#end_block

#method_before
public EntityModel getIsImportGlusterConfiguration() {
    return isImportGlusterConfiguration;
}
#method_after
public EntityModel<Boolean> getIsImportGlusterConfiguration() {
    return isImportGlusterConfiguration;
}
#end_block

#method_before
public void setIsImportGlusterConfiguration(EntityModel value) {
    this.isImportGlusterConfiguration = value;
}
#method_after
public void setIsImportGlusterConfiguration(EntityModel<Boolean> value) {
    this.isImportGlusterConfiguration = value;
}
#end_block

#method_before
public EntityModel getGlusterHostAddress() {
    return glusterHostAddress;
}
#method_after
public EntityModel<String> getGlusterHostAddress() {
    return glusterHostAddress;
}
#end_block

#method_before
public void setGlusterHostAddress(EntityModel glusterHostAddress) {
    this.glusterHostAddress = glusterHostAddress;
}
#method_after
public void setGlusterHostAddress(EntityModel<String> glusterHostAddress) {
    this.glusterHostAddress = glusterHostAddress;
}
#end_block

#method_before
public EntityModel getGlusterHostFingerprint() {
    return glusterHostFingerprint;
}
#method_after
public EntityModel<String> getGlusterHostFingerprint() {
    return glusterHostFingerprint;
}
#end_block

#method_before
public void setGlusterHostFingerprint(EntityModel glusterHostFingerprint) {
    this.glusterHostFingerprint = glusterHostFingerprint;
}
#method_after
public void setGlusterHostFingerprint(EntityModel<String> glusterHostFingerprint) {
    this.glusterHostFingerprint = glusterHostFingerprint;
}
#end_block

#method_before
public EntityModel getGlusterHostPassword() {
    return glusterHostPassword;
}
#method_after
public EntityModel<String> getGlusterHostPassword() {
    return glusterHostPassword;
}
#end_block

#method_before
public void setGlusterHostPassword(EntityModel glusterHostPassword) {
    this.glusterHostPassword = glusterHostPassword;
}
#method_after
public void setGlusterHostPassword(EntityModel<String> glusterHostPassword) {
    this.glusterHostPassword = glusterHostPassword;
}
#end_block

#method_before
public EntityModel getOptimizationNone() {
    return privateOptimizationNone;
}
#method_after
public EntityModel<Integer> getOptimizationNone() {
    return privateOptimizationNone;
}
#end_block

#method_before
public void setOptimizationNone(EntityModel value) {
    privateOptimizationNone = value;
}
#method_after
public void setOptimizationNone(EntityModel<Integer> value) {
    privateOptimizationNone = value;
}
#end_block

#method_before
public EntityModel getOptimizationForServer() {
    return privateOptimizationForServer;
}
#method_after
public EntityModel<Integer> getOptimizationForServer() {
    return privateOptimizationForServer;
}
#end_block

#method_before
public void setOptimizationForServer(EntityModel value) {
    privateOptimizationForServer = value;
}
#method_after
public void setOptimizationForServer(EntityModel<Integer> value) {
    privateOptimizationForServer = value;
}
#end_block

#method_before
public EntityModel getOptimizationForDesktop() {
    return privateOptimizationForDesktop;
}
#method_after
public EntityModel<Integer> getOptimizationForDesktop() {
    return privateOptimizationForDesktop;
}
#end_block

#method_before
public void setOptimizationForDesktop(EntityModel value) {
    privateOptimizationForDesktop = value;
}
#method_after
public void setOptimizationForDesktop(EntityModel<Integer> value) {
    privateOptimizationForDesktop = value;
}
#end_block

#method_before
public EntityModel getOptimizationCustom() {
    return privateOptimizationCustom;
}
#method_after
public EntityModel<Integer> getOptimizationCustom() {
    return privateOptimizationCustom;
}
#end_block

#method_before
public void setOptimizationCustom(EntityModel value) {
    privateOptimizationCustom = value;
}
#method_after
public void setOptimizationCustom(EntityModel<Integer> value) {
    privateOptimizationCustom = value;
}
#end_block

#method_before
public EntityModel getOptimizationNone_IsSelected() {
    return privateOptimizationNone_IsSelected;
}
#method_after
public EntityModel<Boolean> getOptimizationNone_IsSelected() {
    return privateOptimizationNone_IsSelected;
}
#end_block

#method_before
public void setOptimizationNone_IsSelected(EntityModel value) {
    privateOptimizationNone_IsSelected = value;
}
#method_after
public void setOptimizationNone_IsSelected(EntityModel<Boolean> value) {
    privateOptimizationNone_IsSelected = value;
}
#end_block

#method_before
public EntityModel getOptimizationForServer_IsSelected() {
    return privateOptimizationForServer_IsSelected;
}
#method_after
public EntityModel<Boolean> getOptimizationForServer_IsSelected() {
    return privateOptimizationForServer_IsSelected;
}
#end_block

#method_before
public void setOptimizationForServer_IsSelected(EntityModel value) {
    privateOptimizationForServer_IsSelected = value;
}
#method_after
public void setOptimizationForServer_IsSelected(EntityModel<Boolean> value) {
    privateOptimizationForServer_IsSelected = value;
}
#end_block

#method_before
public EntityModel getOptimizationForDesktop_IsSelected() {
    return privateOptimizationForDesktop_IsSelected;
}
#method_after
public EntityModel<Boolean> getOptimizationForDesktop_IsSelected() {
    return privateOptimizationForDesktop_IsSelected;
}
#end_block

#method_before
public void setOptimizationForDesktop_IsSelected(EntityModel value) {
    privateOptimizationForDesktop_IsSelected = value;
}
#method_after
public void setOptimizationForDesktop_IsSelected(EntityModel<Boolean> value) {
    privateOptimizationForDesktop_IsSelected = value;
}
#end_block

#method_before
public EntityModel getOptimizationCustom_IsSelected() {
    return privateOptimizationCustom_IsSelected;
}
#method_after
public EntityModel<Boolean> getOptimizationCustom_IsSelected() {
    return privateOptimizationCustom_IsSelected;
}
#end_block

#method_before
public void setOptimizationCustom_IsSelected(EntityModel value) {
    privateOptimizationCustom_IsSelected = value;
}
#method_after
public void setOptimizationCustom_IsSelected(EntityModel<Boolean> value) {
    privateOptimizationCustom_IsSelected = value;
}
#end_block

#method_before
public EntityModel getCountThreadsAsCores() {
    return privateCountThreadsAsCores;
}
#method_after
public EntityModel<Boolean> getCountThreadsAsCores() {
    return privateCountThreadsAsCores;
}
#end_block

#method_before
public void setCountThreadsAsCores(EntityModel value) {
    privateCountThreadsAsCores = value;
}
#method_after
public void setCountThreadsAsCores(EntityModel<Boolean> value) {
    privateCountThreadsAsCores = value;
}
#end_block

#method_before
public EntityModel getVersionSupportsCpuThreads() {
    return privateVersionSupportsCpuThreads;
}
#method_after
public EntityModel<Boolean> getVersionSupportsCpuThreads() {
    return privateVersionSupportsCpuThreads;
}
#end_block

#method_before
public void setVersionSupportsCpuThreads(EntityModel value) {
    privateVersionSupportsCpuThreads = value;
}
#method_after
public void setVersionSupportsCpuThreads(EntityModel<Boolean> value) {
    privateVersionSupportsCpuThreads = value;
}
#end_block

#method_before
public EntityModel getMigrateOnErrorOption_NO() {
    return privateMigrateOnErrorOption_NO;
}
#method_after
public EntityModel<Boolean> getMigrateOnErrorOption_NO() {
    return privateMigrateOnErrorOption_NO;
}
#end_block

#method_before
public void setMigrateOnErrorOption_NO(EntityModel value) {
    privateMigrateOnErrorOption_NO = value;
}
#method_after
public void setMigrateOnErrorOption_NO(EntityModel<Boolean> value) {
    privateMigrateOnErrorOption_NO = value;
}
#end_block

#method_before
public EntityModel getMigrateOnErrorOption_YES() {
    return privateMigrateOnErrorOption_YES;
}
#method_after
public EntityModel<Boolean> getMigrateOnErrorOption_YES() {
    return privateMigrateOnErrorOption_YES;
}
#end_block

#method_before
public void setMigrateOnErrorOption_YES(EntityModel value) {
    privateMigrateOnErrorOption_YES = value;
}
#method_after
public void setMigrateOnErrorOption_YES(EntityModel<Boolean> value) {
    privateMigrateOnErrorOption_YES = value;
}
#end_block

#method_before
public EntityModel getMigrateOnErrorOption_HA_ONLY() {
    return privateMigrateOnErrorOption_HA_ONLY;
}
#method_after
public EntityModel<Boolean> getMigrateOnErrorOption_HA_ONLY() {
    return privateMigrateOnErrorOption_HA_ONLY;
}
#end_block

#method_before
public void setMigrateOnErrorOption_HA_ONLY(EntityModel value) {
    privateMigrateOnErrorOption_HA_ONLY = value;
}
#method_after
public void setMigrateOnErrorOption_HA_ONLY(EntityModel<Boolean> value) {
    privateMigrateOnErrorOption_HA_ONLY = value;
}
#end_block

#method_before
public EntityModel getEnableBallooning() {
    return enableBallooning;
}
#method_after
public EntityModel<Boolean> getEnableBallooning() {
    return enableBallooning;
}
#end_block

#method_before
public void setEnableBallooning(EntityModel enableBallooning) {
    this.enableBallooning = enableBallooning;
}
#method_after
public void setEnableBallooning(EntityModel<Boolean> enableBallooning) {
    this.enableBallooning = enableBallooning;
}
#end_block

#method_before
public EntityModel getOptimizeForUtilization() {
    return optimizeForUtilization;
}
#method_after
public EntityModel<Boolean> getOptimizeForUtilization() {
    return optimizeForUtilization;
}
#end_block

#method_before
public void setOptimizeForUtilization(EntityModel optimizeForUtilization) {
    this.optimizeForUtilization = optimizeForUtilization;
}
#method_after
public void setOptimizeForUtilization(EntityModel<Boolean> optimizeForUtilization) {
    this.optimizeForUtilization = optimizeForUtilization;
}
#end_block

#method_before
public EntityModel getOptimizeForSpeed() {
    return optimizeForSpeed;
}
#method_after
public EntityModel<Boolean> getOptimizeForSpeed() {
    return optimizeForSpeed;
}
#end_block

#method_before
public void setOptimizeForSpeed(EntityModel optimizeForSpeed) {
    this.optimizeForSpeed = optimizeForSpeed;
}
#method_after
public void setOptimizeForSpeed(EntityModel<Boolean> optimizeForSpeed) {
    this.optimizeForSpeed = optimizeForSpeed;
}
#end_block

#method_before
public EntityModel getAllowOverbooking() {
    return allowOverbooking;
}
#method_after
public EntityModel<Boolean> getAllowOverbooking() {
    return allowOverbooking;
}
#end_block

#method_before
public void setAllowOverbooking(EntityModel allowOverbooking) {
    this.allowOverbooking = allowOverbooking;
}
#method_after
public void setAllowOverbooking(EntityModel<Boolean> allowOverbooking) {
    this.allowOverbooking = allowOverbooking;
}
#end_block

#method_before
public MigrateOnErrorOptions getMigrateOnErrorOption() {
    if ((Boolean) getMigrateOnErrorOption_NO().getEntity() == true) {
        return MigrateOnErrorOptions.NO;
    } else if ((Boolean) getMigrateOnErrorOption_YES().getEntity() == true) {
        return MigrateOnErrorOptions.YES;
    } else if ((Boolean) getMigrateOnErrorOption_HA_ONLY().getEntity() == true) {
        return MigrateOnErrorOptions.HA_ONLY;
    }
    return MigrateOnErrorOptions.YES;
}
#method_after
public MigrateOnErrorOptions getMigrateOnErrorOption() {
    if (getMigrateOnErrorOption_NO().getEntity() == true) {
        return MigrateOnErrorOptions.NO;
    } else if (getMigrateOnErrorOption_YES().getEntity() == true) {
        return MigrateOnErrorOptions.YES;
    } else if (getMigrateOnErrorOption_HA_ONLY().getEntity() == true) {
        return MigrateOnErrorOptions.HA_ONLY;
    }
    return MigrateOnErrorOptions.YES;
}
#end_block

#method_before
public EntityModel getEnableTrustedService() {
    return privateEnableTrustedService;
}
#method_after
public EntityModel<Boolean> getEnableTrustedService() {
    return privateEnableTrustedService;
}
#end_block

#method_before
public void setEnableTrustedService(EntityModel value) {
    this.privateEnableTrustedService = value;
}
#method_after
public void setEnableTrustedService(EntityModel<Boolean> value) {
    this.privateEnableTrustedService = value;
}
#end_block

#method_before
public int getMemoryOverCommit() {
    if ((Boolean) getOptimizationNone_IsSelected().getEntity()) {
        return (Integer) getOptimizationNone().getEntity();
    }
    if ((Boolean) getOptimizationForServer_IsSelected().getEntity()) {
        return (Integer) getOptimizationForServer().getEntity();
    }
    if ((Boolean) getOptimizationForDesktop_IsSelected().getEntity()) {
        return (Integer) getOptimizationForDesktop().getEntity();
    }
    if ((Boolean) getOptimizationCustom_IsSelected().getEntity()) {
        return (Integer) getOptimizationCustom().getEntity();
    }
    return AsyncDataProvider.getClusterDefaultMemoryOverCommit();
}
#method_after
public int getMemoryOverCommit() {
    if (getOptimizationNone_IsSelected().getEntity()) {
        return getOptimizationNone().getEntity();
    }
    if (getOptimizationForServer_IsSelected().getEntity()) {
        return getOptimizationForServer().getEntity();
    }
    if (getOptimizationForDesktop_IsSelected().getEntity()) {
        return getOptimizationForDesktop().getEntity();
    }
    if (getOptimizationCustom_IsSelected().getEntity()) {
        return getOptimizationCustom().getEntity();
    }
    return AsyncDataProvider.getClusterDefaultMemoryOverCommit();
}
#end_block

#method_before
public void setMemoryOverCommit(int value) {
    getOptimizationNone_IsSelected().setEntity(value == (Integer) getOptimizationNone().getEntity());
    getOptimizationForServer_IsSelected().setEntity(value == (Integer) getOptimizationForServer().getEntity());
    getOptimizationForDesktop_IsSelected().setEntity(value == (Integer) getOptimizationForDesktop().getEntity());
    if (!(Boolean) getOptimizationNone_IsSelected().getEntity() && !(Boolean) getOptimizationForServer_IsSelected().getEntity() && !(Boolean) getOptimizationForDesktop_IsSelected().getEntity()) {
        getOptimizationCustom().setIsAvailable(true);
        getOptimizationCustom().setEntity(value);
        getOptimizationCustom_IsSelected().setIsAvailable(true);
        getOptimizationCustom_IsSelected().setEntity(true);
    }
}
#method_after
public void setMemoryOverCommit(int value) {
    getOptimizationNone_IsSelected().setEntity(value == getOptimizationNone().getEntity());
    getOptimizationForServer_IsSelected().setEntity(value == getOptimizationForServer().getEntity());
    getOptimizationForDesktop_IsSelected().setEntity(value == getOptimizationForDesktop().getEntity());
    if (!getOptimizationNone_IsSelected().getEntity() && !getOptimizationForServer_IsSelected().getEntity() && !getOptimizationForDesktop_IsSelected().getEntity()) {
        getOptimizationCustom().setIsAvailable(true);
        getOptimizationCustom().setEntity(value);
        getOptimizationCustom_IsSelected().setIsAvailable(true);
        getOptimizationCustom_IsSelected().setEntity(true);
    }
}
#end_block

#method_before
public void init(final boolean isEdit) {
    setIsEdit(isEdit);
    setName(new EntityModel());
    setDescription(new EntityModel());
    setComment(new EntityModel());
    setEnableTrustedService(new EntityModel(false));
    setAllowClusterWithVirtGlusterEnabled(true);
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            setAllowClusterWithVirtGlusterEnabled((Boolean) returnValue);
        }
    }));
    setEnableOvirtService(new EntityModel());
    setEnableGlusterService(new EntityModel());
    getEnableOvirtService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && (Boolean) getEnableOvirtService().getEntity()) {
                getEnableGlusterService().setEntity(Boolean.FALSE);
            }
            getEnableGlusterService().setIsChangable(true);
            getEnableTrustedService().setEntity(false);
            if (getEnableOvirtService().getEntity() != null && (Boolean) getEnableOvirtService().getEntity()) {
                if (getEnableGlusterService().getEntity() != null && !(Boolean) getEnableGlusterService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            } else {
                getEnableTrustedService().setIsChangable(false);
            }
        }
    });
    getEnableOvirtService().setEntity(ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    getEnableOvirtService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.VirtOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    initImportCluster(isEdit);
    getEnableGlusterService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && (Boolean) getEnableGlusterService().getEntity()) {
                getEnableOvirtService().setEntity(Boolean.FALSE);
            }
            if (!isEdit && getEnableGlusterService().getEntity() != null && (Boolean) getEnableGlusterService().getEntity()) {
                getIsImportGlusterConfiguration().setIsAvailable(true);
                getGlusterHostAddress().setIsAvailable(true);
                getGlusterHostFingerprint().setIsAvailable(true);
                getGlusterHostPassword().setIsAvailable(true);
            } else {
                getIsImportGlusterConfiguration().setIsAvailable(false);
                getIsImportGlusterConfiguration().setEntity(false);
                getGlusterHostAddress().setIsAvailable(false);
                getGlusterHostFingerprint().setIsAvailable(false);
                getGlusterHostPassword().setIsAvailable(false);
            }
            if (getEnableGlusterService().getEntity() != null && (Boolean) getEnableGlusterService().getEntity()) {
                getEnableTrustedService().setEntity(false);
                getEnableTrustedService().setIsChangable(false);
            } else {
                if (getEnableOvirtService().getEntity() != null && (Boolean) getEnableOvirtService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            }
        }
    });
    getEnableTrustedService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (getEnableTrustedService().getEntity() != null && (Boolean) getEnableTrustedService().getEntity()) {
                getEnableGlusterService().setEntity(false);
                getEnableGlusterService().setIsChangable(false);
            } else {
                getEnableGlusterService().setIsChangable(true);
            }
        }
    });
    getEnableGlusterService().setEntity(ApplicationModeHelper.getUiMode() == ApplicationMode.GlusterOnly);
    getEnableGlusterService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.GlusterOnly));
    setOptimizationNone(new EntityModel());
    setOptimizationForServer(new EntityModel());
    setOptimizationForDesktop(new EntityModel());
    setOptimizationCustom(new EntityModel());
    EntityModel tempVar = new EntityModel();
    tempVar.setEntity(false);
    setOptimizationNone_IsSelected(tempVar);
    getOptimizationNone_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setEntity(false);
    setOptimizationForServer_IsSelected(tempVar2);
    getOptimizationForServer_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setEntity(false);
    setOptimizationForDesktop_IsSelected(tempVar3);
    getOptimizationForDesktop_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar4 = new EntityModel();
    tempVar4.setEntity(false);
    tempVar4.setIsAvailable(false);
    setOptimizationCustom_IsSelected(tempVar4);
    getOptimizationCustom_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar5 = new EntityModel();
    tempVar5.setEntity(false);
    setMigrateOnErrorOption_YES(tempVar5);
    getMigrateOnErrorOption_YES().getEntityChangedEvent().addListener(this);
    EntityModel tempVar6 = new EntityModel();
    tempVar6.setEntity(false);
    setMigrateOnErrorOption_NO(tempVar6);
    getMigrateOnErrorOption_NO().getEntityChangedEvent().addListener(this);
    EntityModel tempVar7 = new EntityModel();
    tempVar7.setEntity(false);
    setMigrateOnErrorOption_HA_ONLY(tempVar7);
    getMigrateOnErrorOption_HA_ONLY().getEntityChangedEvent().addListener(this);
    setEnableBallooning(new EntityModel());
    getEnableBallooning().setEntity(false);
    // Optimization methods:
    // default value =100;
    setDefaultMemoryOvercommit(AsyncDataProvider.getClusterDefaultMemoryOverCommit());
    setCountThreadsAsCores(new EntityModel(AsyncDataProvider.getClusterDefaultCountThreadsAsCores()));
    setVersionSupportsCpuThreads(new EntityModel(true));
    setOptimizeForUtilization(new EntityModel());
    setOptimizeForSpeed(new EntityModel());
    getOptimizeForUtilization().setEntity(true);
    getOptimizeForSpeed().setEntity(false);
    getOptimizeForUtilization().getEntityChangedEvent().addListener(this);
    getOptimizeForSpeed().getEntityChangedEvent().addListener(this);
    setAllowOverbooking(new EntityModel());
    getAllowOverbooking().setEntity(false);
    getAllowOverbooking().setIsAvailable(AsyncDataProvider.getScheudulingAllowOverbookingSupported());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            clusterModel.setDesktopOverCommit((Integer) result);
            AsyncQuery _asyncQuery1 = new AsyncQuery();
            _asyncQuery1.setModel(clusterModel);
            _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result1) {
                    ClusterModel clusterModel1 = (ClusterModel) model1;
                    clusterModel1.setServerOverCommit((Integer) result1);
                    // temp is used for conversion purposes
                    EntityModel temp;
                    temp = clusterModel1.getOptimizationNone();
                    temp.setEntity(clusterModel1.getDefaultMemoryOvercommit());
                    // res1, res2 is used for conversion purposes.
                    boolean res1 = clusterModel1.getDesktopOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    boolean res2 = clusterModel1.getServerOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    temp = clusterModel1.getOptimizationNone_IsSelected();
                    setIsSelected(res1 && res2);
                    temp.setEntity(getIsSelected());
                    temp = clusterModel1.getOptimizationForServer();
                    temp.setEntity(clusterModel1.getServerOverCommit());
                    temp = clusterModel1.getOptimizationForServer_IsSelected();
                    temp.setEntity(clusterModel1.getServerOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationForDesktop();
                    temp.setEntity(clusterModel1.getDesktopOverCommit());
                    temp = clusterModel1.getOptimizationForDesktop_IsSelected();
                    temp.setEntity(clusterModel1.getDesktopOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationCustom();
                    temp.setIsAvailable(false);
                    temp.setIsChangable(false);
                    if (clusterModel1.getIsEdit()) {
                        clusterModel1.postInit();
                    }
                }
            };
            AsyncDataProvider.getClusterServerMemoryOverCommit(_asyncQuery1);
        }
    };
    AsyncDataProvider.getClusterDesktopMemoryOverCommit(_asyncQuery);
    setDataCenter(new ListModel());
    getDataCenter().getSelectedItemChangedEvent().addListener(this);
    getDataCenter().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setCPU(new ListModel());
    getCPU().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setVersion(new ListModel());
    getVersion().getSelectedItemChangedEvent().addListener(this);
    setMigrateOnErrorOption(MigrateOnErrorOptions.YES);
    setIsGeneralTabValid(true);
    setIsResiliencePolicyTabAvailable(true);
    setClusterPolicy(new ListModel());
    setCustomPropertySheet(new KeyValueModel());
    getClusterPolicy().getSelectedItemChangedEvent().addListener(this);
    Frontend.RunQuery(VdcQueryType.GetAllPolicyUnits, new VdcQueryParametersBase(), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<PolicyUnit> policyUnits = (ArrayList<PolicyUnit>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            policyUnitMap = new LinkedHashMap<Guid, PolicyUnit>();
            for (PolicyUnit policyUnit : policyUnits) {
                policyUnitMap.put(policyUnit.getId(), policyUnit);
            }
            Frontend.RunQuery(VdcQueryType.GetClusterPolicies, new VdcQueryParametersBase(), new AsyncQuery(model, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    ClusterModel clusterModel = (ClusterModel) model;
                    ArrayList<ClusterPolicy> list = (ArrayList<ClusterPolicy>) ((VdcQueryReturnValue) returnValue).getReturnValue();
                    clusterModel.getClusterPolicy().setItems(list);
                    ClusterPolicy defaultClusterPolicy = null;
                    ClusterPolicy selectedClusterPolicy = null;
                    for (ClusterPolicy clusterPolicy : list) {
                        if (clusterModel.getIsEdit() && getEntity() != null && clusterPolicy.getId().equals(getEntity().getClusterPolicyId())) {
                            selectedClusterPolicy = clusterPolicy;
                        }
                        if (clusterPolicy.isDefaultPolicy()) {
                            defaultClusterPolicy = clusterPolicy;
                        }
                    }
                    if (selectedClusterPolicy != null) {
                        clusterModel.getClusterPolicy().setSelectedItem(selectedClusterPolicy);
                    } else {
                        clusterModel.getClusterPolicy().setSelectedItem(defaultClusterPolicy);
                    }
                    clusterPolicyChanged();
                }
            }));
        }
    }));
}
#method_after
public void init(final boolean isEdit) {
    setIsEdit(isEdit);
    setName(new EntityModel<String>());
    setDescription(new EntityModel<String>());
    setComment(new EntityModel<String>());
    setEnableTrustedService(new EntityModel<Boolean>(false));
    setAllowClusterWithVirtGlusterEnabled(true);
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            setAllowClusterWithVirtGlusterEnabled((Boolean) returnValue);
        }
    }));
    setEnableOvirtService(new EntityModel<Boolean>());
    setEnableGlusterService(new EntityModel<Boolean>());
    getEnableOvirtService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && getEnableOvirtService().getEntity()) {
                getEnableGlusterService().setEntity(Boolean.FALSE);
            }
            getEnableGlusterService().setIsChangable(true);
            getEnableTrustedService().setEntity(false);
            if (getEnableOvirtService().getEntity() != null && getEnableOvirtService().getEntity()) {
                if (getEnableGlusterService().getEntity() != null && !getEnableGlusterService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            } else {
                getEnableTrustedService().setIsChangable(false);
            }
        }
    });
    getEnableOvirtService().setEntity(ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    getEnableOvirtService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.VirtOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    initImportCluster(isEdit);
    getEnableGlusterService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && getEnableGlusterService().getEntity()) {
                getEnableOvirtService().setEntity(Boolean.FALSE);
            }
            if (!isEdit && getEnableGlusterService().getEntity() != null && getEnableGlusterService().getEntity()) {
                getIsImportGlusterConfiguration().setIsAvailable(true);
                getGlusterHostAddress().setIsAvailable(true);
                getGlusterHostFingerprint().setIsAvailable(true);
                getGlusterHostPassword().setIsAvailable(true);
            } else {
                getIsImportGlusterConfiguration().setIsAvailable(false);
                getIsImportGlusterConfiguration().setEntity(false);
                getGlusterHostAddress().setIsAvailable(false);
                getGlusterHostFingerprint().setIsAvailable(false);
                getGlusterHostPassword().setIsAvailable(false);
            }
            if (getEnableGlusterService().getEntity() != null && getEnableGlusterService().getEntity()) {
                getEnableTrustedService().setEntity(false);
                getEnableTrustedService().setIsChangable(false);
            } else {
                if (getEnableOvirtService().getEntity() != null && getEnableOvirtService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            }
        }
    });
    getEnableTrustedService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (getEnableTrustedService().getEntity() != null && getEnableTrustedService().getEntity()) {
                getEnableGlusterService().setEntity(false);
                getEnableGlusterService().setIsChangable(false);
            } else {
                getEnableGlusterService().setIsChangable(true);
            }
        }
    });
    getEnableGlusterService().setEntity(ApplicationModeHelper.getUiMode() == ApplicationMode.GlusterOnly);
    getEnableGlusterService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.GlusterOnly));
    setOptimizationNone(new EntityModel<Integer>());
    setOptimizationForServer(new EntityModel<Integer>());
    setOptimizationForDesktop(new EntityModel<Integer>());
    setOptimizationCustom(new EntityModel<Integer>());
    EntityModel tempVar = new EntityModel<Boolean>();
    tempVar.setEntity(false);
    setOptimizationNone_IsSelected(tempVar);
    getOptimizationNone_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar2 = new EntityModel<Boolean>();
    tempVar2.setEntity(false);
    setOptimizationForServer_IsSelected(tempVar2);
    getOptimizationForServer_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar3 = new EntityModel<Boolean>();
    tempVar3.setEntity(false);
    setOptimizationForDesktop_IsSelected(tempVar3);
    getOptimizationForDesktop_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar4 = new EntityModel<Boolean>();
    tempVar4.setEntity(false);
    tempVar4.setIsAvailable(false);
    setOptimizationCustom_IsSelected(tempVar4);
    getOptimizationCustom_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar5 = new EntityModel<Boolean>();
    tempVar5.setEntity(false);
    setMigrateOnErrorOption_YES(tempVar5);
    getMigrateOnErrorOption_YES().getEntityChangedEvent().addListener(this);
    EntityModel tempVar6 = new EntityModel<Boolean>();
    tempVar6.setEntity(false);
    setMigrateOnErrorOption_NO(tempVar6);
    getMigrateOnErrorOption_NO().getEntityChangedEvent().addListener(this);
    EntityModel tempVar7 = new EntityModel<Boolean>();
    tempVar7.setEntity(false);
    setMigrateOnErrorOption_HA_ONLY(tempVar7);
    getMigrateOnErrorOption_HA_ONLY().getEntityChangedEvent().addListener(this);
    setEnableBallooning(new EntityModel<Boolean>());
    getEnableBallooning().setEntity(false);
    // Optimization methods:
    // default value =100;
    setDefaultMemoryOvercommit(AsyncDataProvider.getClusterDefaultMemoryOverCommit());
    setCountThreadsAsCores(new EntityModel(AsyncDataProvider.getClusterDefaultCountThreadsAsCores()));
    setVersionSupportsCpuThreads(new EntityModel<Boolean>(true));
    setOptimizeForUtilization(new EntityModel<Boolean>());
    setOptimizeForSpeed(new EntityModel<Boolean>());
    getOptimizeForUtilization().setEntity(true);
    getOptimizeForSpeed().setEntity(false);
    getOptimizeForUtilization().getEntityChangedEvent().addListener(this);
    getOptimizeForSpeed().getEntityChangedEvent().addListener(this);
    setGuarantyResources(new EntityModel<Boolean>());
    setAllowOverbooking(new EntityModel<Boolean>());
    getGuarantyResources().setEntity(true);
    getAllowOverbooking().setEntity(false);
    getAllowOverbooking().getEntityChangedEvent().addListener(this);
    getGuarantyResources().getEntityChangedEvent().addListener(this);
    boolean overbookingSupported = AsyncDataProvider.getScheudulingAllowOverbookingSupported();
    getAllowOverbooking().setIsAvailable(overbookingSupported);
    if (overbookingSupported) {
        getOptimizeForSpeed().getEntityChangedEvent().addListener(new IEventListener() {

            @Override
            public void eventRaised(Event ev, Object sender, EventArgs args) {
                Boolean entity = getOptimizeForSpeed().getEntity();
                if (entity) {
                    getGuarantyResources().setEntity(true);
                }
                getAllowOverbooking().setIsChangable(!entity);
            }
        });
        getAllowOverbooking().getEntityChangedEvent().addListener(new IEventListener() {

            @Override
            public void eventRaised(Event ev, Object sender, EventArgs args) {
                Boolean entity = getAllowOverbooking().getEntity();
                if (entity) {
                    getOptimizeForUtilization().setEntity(true);
                }
                getOptimizeForSpeed().setIsChangable(!entity);
            }
        });
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            clusterModel.setDesktopOverCommit((Integer) result);
            AsyncQuery _asyncQuery1 = new AsyncQuery();
            _asyncQuery1.setModel(clusterModel);
            _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result1) {
                    ClusterModel clusterModel1 = (ClusterModel) model1;
                    clusterModel1.setServerOverCommit((Integer) result1);
                    // temp is used for conversion purposes
                    EntityModel temp;
                    temp = clusterModel1.getOptimizationNone();
                    temp.setEntity(clusterModel1.getDefaultMemoryOvercommit());
                    // res1, res2 is used for conversion purposes.
                    boolean res1 = clusterModel1.getDesktopOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    boolean res2 = clusterModel1.getServerOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    temp = clusterModel1.getOptimizationNone_IsSelected();
                    setIsSelected(res1 && res2);
                    temp.setEntity(getIsSelected());
                    temp = clusterModel1.getOptimizationForServer();
                    temp.setEntity(clusterModel1.getServerOverCommit());
                    temp = clusterModel1.getOptimizationForServer_IsSelected();
                    temp.setEntity(clusterModel1.getServerOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationForDesktop();
                    temp.setEntity(clusterModel1.getDesktopOverCommit());
                    temp = clusterModel1.getOptimizationForDesktop_IsSelected();
                    temp.setEntity(clusterModel1.getDesktopOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationCustom();
                    temp.setIsAvailable(false);
                    temp.setIsChangable(false);
                    if (clusterModel1.getIsEdit()) {
                        clusterModel1.postInit();
                    }
                }
            };
            AsyncDataProvider.getClusterServerMemoryOverCommit(_asyncQuery1);
        }
    };
    AsyncDataProvider.getClusterDesktopMemoryOverCommit(_asyncQuery);
    setDataCenter(new ListModel<StoragePool>());
    getDataCenter().getSelectedItemChangedEvent().addListener(this);
    getDataCenter().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setCPU(new ListModel<ServerCpu>());
    getCPU().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setVersion(new ListModel<Version>());
    getVersion().getSelectedItemChangedEvent().addListener(this);
    setMigrateOnErrorOption(MigrateOnErrorOptions.YES);
    setArchitecture(new ListModel<ArchitectureType>());
    getArchitecture().setItems(new ArrayList<ArchitectureType>(Arrays.asList(ArchitectureType.values())));
    setIsGeneralTabValid(true);
    setIsResiliencePolicyTabAvailable(true);
    setClusterPolicy(new ListModel<ClusterPolicy>());
    setCustomPropertySheet(new KeyValueModel());
    getClusterPolicy().getSelectedItemChangedEvent().addListener(this);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllPolicyUnits, new VdcQueryParametersBase(), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<PolicyUnit> policyUnits = ((VdcQueryReturnValue) returnValue).getReturnValue();
            policyUnitMap = new LinkedHashMap<Guid, PolicyUnit>();
            for (PolicyUnit policyUnit : policyUnits) {
                policyUnitMap.put(policyUnit.getId(), policyUnit);
            }
            Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, new VdcQueryParametersBase(), new AsyncQuery(model, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    ClusterModel clusterModel = (ClusterModel) model;
                    ArrayList<ClusterPolicy> list = ((VdcQueryReturnValue) returnValue).getReturnValue();
                    clusterModel.getClusterPolicy().setItems(list);
                    ClusterPolicy defaultClusterPolicy = null;
                    ClusterPolicy selectedClusterPolicy = null;
                    for (ClusterPolicy clusterPolicy : list) {
                        if (clusterModel.getIsEdit() && getEntity() != null && clusterPolicy.getId().equals(getEntity().getClusterPolicyId())) {
                            selectedClusterPolicy = clusterPolicy;
                        }
                        if (clusterPolicy.isDefaultPolicy()) {
                            defaultClusterPolicy = clusterPolicy;
                        }
                    }
                    if (selectedClusterPolicy != null) {
                        clusterModel.getClusterPolicy().setSelectedItem(selectedClusterPolicy);
                    } else {
                        clusterModel.getClusterPolicy().setSelectedItem(defaultClusterPolicy);
                    }
                    clusterPolicyChanged();
                }
            }));
        }
    }));
}
#end_block

#method_before
private void initImportCluster(boolean isEdit) {
    setGlusterHostAddress(new EntityModel());
    getGlusterHostAddress().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            setIsFingerprintVerified(false);
            if (getGlusterHostAddress().getEntity() == null || ((String) getGlusterHostAddress().getEntity()).trim().length() == 0) {
                // $NON-NLS-1$
                getGlusterHostFingerprint().setEntity("");
                return;
            }
            fetchFingerprint((String) getGlusterHostAddress().getEntity());
        }
    });
    setGlusterHostFingerprint(new EntityModel());
    // $NON-NLS-1$
    getGlusterHostFingerprint().setEntity("");
    setIsFingerprintVerified(false);
    setGlusterHostPassword(new EntityModel());
    setIsImportGlusterConfiguration(new EntityModel());
    getIsImportGlusterConfiguration().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (getIsImportGlusterConfiguration().getEntity() != null && (Boolean) getIsImportGlusterConfiguration().getEntity()) {
                getGlusterHostAddress().setIsChangable(true);
                getGlusterHostPassword().setIsChangable(true);
            } else {
                getGlusterHostAddress().setIsChangable(false);
                getGlusterHostPassword().setIsChangable(false);
            }
        }
    });
    getIsImportGlusterConfiguration().setIsAvailable(false);
    getGlusterHostAddress().setIsAvailable(false);
    getGlusterHostFingerprint().setIsAvailable(false);
    getGlusterHostPassword().setIsAvailable(false);
    getIsImportGlusterConfiguration().setEntity(false);
}
#method_after
private void initImportCluster(boolean isEdit) {
    setGlusterHostAddress(new EntityModel<String>());
    getGlusterHostAddress().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            setIsFingerprintVerified(false);
            if (getGlusterHostAddress().getEntity() == null || (getGlusterHostAddress().getEntity()).trim().length() == 0) {
                // $NON-NLS-1$
                getGlusterHostFingerprint().setEntity("");
                return;
            }
            fetchFingerprint(getGlusterHostAddress().getEntity());
        }
    });
    setGlusterHostFingerprint(new EntityModel<String>());
    // $NON-NLS-1$
    getGlusterHostFingerprint().setEntity("");
    setIsFingerprintVerified(false);
    setGlusterHostPassword(new EntityModel<String>());
    setIsImportGlusterConfiguration(new EntityModel<Boolean>());
    getIsImportGlusterConfiguration().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (getIsImportGlusterConfiguration().getEntity() != null && getIsImportGlusterConfiguration().getEntity()) {
                getGlusterHostAddress().setIsChangable(true);
                getGlusterHostPassword().setIsChangable(true);
            } else {
                getGlusterHostAddress().setIsChangable(false);
                getGlusterHostPassword().setIsChangable(false);
            }
        }
    });
    getIsImportGlusterConfiguration().setIsAvailable(false);
    getGlusterHostAddress().setIsAvailable(false);
    getGlusterHostFingerprint().setIsAvailable(false);
    getGlusterHostPassword().setIsAvailable(false);
    getIsImportGlusterConfiguration().setEntity(false);
}
#end_block

#method_before
private void fetchFingerprint(String hostAddress) {
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            String fingerprint = (String) result;
            if (fingerprint != null && fingerprint.length() > 0) {
                getGlusterHostFingerprint().setEntity(result);
                setIsFingerprintVerified(true);
            } else {
                getGlusterHostFingerprint().setEntity(ConstantsManager.getInstance().getConstants().errorLoadingFingerprint());
                setIsFingerprintVerified(false);
            }
        }
    };
    AsyncDataProvider.getHostFingerprint(aQuery, hostAddress);
    getGlusterHostFingerprint().setEntity(ConstantsManager.getInstance().getConstants().loadingFingerprint());
}
#method_after
private void fetchFingerprint(String hostAddress) {
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            String fingerprint = (String) result;
            if (fingerprint != null && fingerprint.length() > 0) {
                getGlusterHostFingerprint().setEntity((String) result);
                setIsFingerprintVerified(true);
            } else {
                getGlusterHostFingerprint().setEntity(ConstantsManager.getInstance().getConstants().errorLoadingFingerprint());
                setIsFingerprintVerified(false);
            }
        }
    };
    AsyncDataProvider.getHostFingerprint(aQuery, hostAddress);
    getGlusterHostFingerprint().setEntity(ConstantsManager.getInstance().getConstants().loadingFingerprint());
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getDataCenter()) {
            storagePool_SelectedItemChanged(args);
        } else if (sender == getVersion()) {
            version_SelectedItemChanged(args);
        } else if (sender == getClusterPolicy()) {
            clusterPolicyChanged();
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        EntityModel senderEntityModel = (EntityModel) sender;
        if ((Boolean) senderEntityModel.getEntity()) {
            if (senderEntityModel == getOptimizationNone_IsSelected()) {
                getOptimizationForServer_IsSelected().setEntity(false);
                getOptimizationForDesktop_IsSelected().setEntity(false);
                getOptimizationCustom_IsSelected().setEntity(false);
            } else if (senderEntityModel == getOptimizationForServer_IsSelected()) {
                getOptimizationNone_IsSelected().setEntity(false);
                getOptimizationForDesktop_IsSelected().setEntity(false);
                getOptimizationCustom_IsSelected().setEntity(false);
            } else if (senderEntityModel == getOptimizationForDesktop_IsSelected()) {
                getOptimizationNone_IsSelected().setEntity(false);
                getOptimizationForServer_IsSelected().setEntity(false);
                getOptimizationCustom_IsSelected().setEntity(false);
            } else if (senderEntityModel == getOptimizationCustom_IsSelected()) {
                getOptimizationNone_IsSelected().setEntity(false);
                getOptimizationForServer_IsSelected().setEntity(false);
                getOptimizationForDesktop_IsSelected().setEntity(false);
            } else if (senderEntityModel == getMigrateOnErrorOption_YES()) {
                getMigrateOnErrorOption_NO().setEntity(false);
                getMigrateOnErrorOption_HA_ONLY().setEntity(false);
            } else if (senderEntityModel == getMigrateOnErrorOption_NO()) {
                getMigrateOnErrorOption_YES().setEntity(false);
                getMigrateOnErrorOption_HA_ONLY().setEntity(false);
            } else if (senderEntityModel == getMigrateOnErrorOption_HA_ONLY()) {
                getMigrateOnErrorOption_YES().setEntity(false);
                getMigrateOnErrorOption_NO().setEntity(false);
            } else if (senderEntityModel == getOptimizeForUtilization()) {
                getOptimizeForSpeed().setEntity(false);
            } else if (senderEntityModel == getOptimizeForSpeed()) {
                getOptimizeForUtilization().setEntity(false);
            }
        }
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getDataCenter()) {
            storagePool_SelectedItemChanged(args);
        } else if (sender == getVersion()) {
            version_SelectedItemChanged(args);
        } else if (sender == getClusterPolicy()) {
            clusterPolicyChanged();
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        EntityModel senderEntityModel = (EntityModel) sender;
        if ((Boolean) senderEntityModel.getEntity()) {
            if (senderEntityModel == getOptimizationNone_IsSelected()) {
                getOptimizationForServer_IsSelected().setEntity(false);
                getOptimizationForDesktop_IsSelected().setEntity(false);
                getOptimizationCustom_IsSelected().setEntity(false);
            } else if (senderEntityModel == getOptimizationForServer_IsSelected()) {
                getOptimizationNone_IsSelected().setEntity(false);
                getOptimizationForDesktop_IsSelected().setEntity(false);
                getOptimizationCustom_IsSelected().setEntity(false);
            } else if (senderEntityModel == getOptimizationForDesktop_IsSelected()) {
                getOptimizationNone_IsSelected().setEntity(false);
                getOptimizationForServer_IsSelected().setEntity(false);
                getOptimizationCustom_IsSelected().setEntity(false);
            } else if (senderEntityModel == getOptimizationCustom_IsSelected()) {
                getOptimizationNone_IsSelected().setEntity(false);
                getOptimizationForServer_IsSelected().setEntity(false);
                getOptimizationForDesktop_IsSelected().setEntity(false);
            } else if (senderEntityModel == getMigrateOnErrorOption_YES()) {
                getMigrateOnErrorOption_NO().setEntity(false);
                getMigrateOnErrorOption_HA_ONLY().setEntity(false);
            } else if (senderEntityModel == getMigrateOnErrorOption_NO()) {
                getMigrateOnErrorOption_YES().setEntity(false);
                getMigrateOnErrorOption_HA_ONLY().setEntity(false);
            } else if (senderEntityModel == getMigrateOnErrorOption_HA_ONLY()) {
                getMigrateOnErrorOption_YES().setEntity(false);
                getMigrateOnErrorOption_NO().setEntity(false);
            } else if (senderEntityModel == getOptimizeForUtilization()) {
                getOptimizeForSpeed().setEntity(false);
            } else if (senderEntityModel == getOptimizeForSpeed()) {
                getOptimizeForUtilization().setEntity(false);
            } else if (senderEntityModel == getGuarantyResources()) {
                getAllowOverbooking().setEntity(false);
            } else if (senderEntityModel == getAllowOverbooking()) {
                getGuarantyResources().setEntity(false);
            }
        }
    }
}
#end_block

#method_before
private void version_SelectedItemChanged(EventArgs e) {
    Version version;
    if (getVersion().getSelectedItem() != null) {
        version = (Version) getVersion().getSelectedItem();
    } else {
        version = ((StoragePool) getDataCenter().getSelectedItem()).getcompatibility_version();
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<ServerCpu> cpus = (ArrayList<ServerCpu>) result;
            ServerCpu oldSelectedCpu = (ServerCpu) clusterModel.getCPU().getSelectedItem();
            clusterModel.getCPU().setItems(cpus);
            clusterModel.getCPU().setSelectedItem(oldSelectedCpu != null ? Linq.firstOrDefault(cpus, new Linq.ServerCpuPredicate(oldSelectedCpu.getCpuName())) : null);
            if (clusterModel.getCPU().getSelectedItem() == null || !isCPUinitialized) {
                initCPU();
            }
        }
    };
    AsyncDataProvider.getCPUList(_asyncQuery, version);
    // CPU Thread support is only available for clusters of version 3.2 or greater
    getVersionSupportsCpuThreads().setEntity(version.compareTo(Version.v3_2) >= 0);
    getEnableBallooning().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().ballooningNotAvailable());
    getEnableBallooning().setIsChangable(version.compareTo(Version.v3_3) >= 0);
}
#method_after
private void version_SelectedItemChanged(EventArgs e) {
    Version version;
    if (getVersion().getSelectedItem() != null) {
        version = getVersion().getSelectedItem();
    } else {
        version = getDataCenter().getSelectedItem().getcompatibility_version();
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<ServerCpu> cpus = (ArrayList<ServerCpu>) result;
            ServerCpu oldSelectedCpu = clusterModel.getCPU().getSelectedItem();
            clusterModel.getCPU().setItems(cpus);
            clusterModel.getCPU().setSelectedItem(oldSelectedCpu != null ? Linq.firstOrDefault(cpus, new Linq.ServerCpuPredicate(oldSelectedCpu.getCpuName())) : null);
            if (clusterModel.getCPU().getSelectedItem() == null || !isCPUinitialized) {
                initCPU();
            }
        }
    };
    AsyncDataProvider.getCPUList(_asyncQuery, version);
    // CPU Thread support is only available for clusters of version 3.2 or greater
    getVersionSupportsCpuThreads().setEntity(version.compareTo(Version.v3_2) >= 0);
    getEnableBallooning().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().ballooningNotAvailable());
    getEnableBallooning().setIsChangable(version.compareTo(Version.v3_3) >= 0);
}
#end_block

#method_before
private void initCPU() {
    if (!isCPUinitialized && getIsEdit()) {
        isCPUinitialized = true;
        getCPU().setSelectedItem(null);
        for (ServerCpu a : (ArrayList<ServerCpu>) getCPU().getItems()) {
            if (StringHelper.stringsEqual(a.getCpuName(), getEntity().getcpu_name())) {
                getCPU().setSelectedItem(a);
                break;
            }
        }
    }
}
#method_after
private void initCPU() {
    if (!isCPUinitialized && getIsEdit()) {
        isCPUinitialized = true;
        getCPU().setSelectedItem(null);
        for (ServerCpu a : getCPU().getItems()) {
            if (StringHelper.stringsEqual(a.getCpuName(), getEntity().getcpu_name())) {
                getCPU().setSelectedItem(a);
                break;
            }
        }
    }
}
#end_block

#method_before
private void storagePool_SelectedItemChanged(EventArgs e) {
    // possible versions for new cluster (when editing cluster, this event won't occur)
    // are actually the possible versions for the data-center that the cluster is going
    // to be attached to.
    StoragePool selectedDataCenter = (StoragePool) getDataCenter().getSelectedItem();
    if (selectedDataCenter == null) {
        return;
    }
    if (selectedDataCenter.getStorageType() == StorageType.LOCALFS) {
        setIsResiliencePolicyTabAvailable(false);
    } else {
        setIsResiliencePolicyTabAvailable(true);
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<Version> versions = (ArrayList<Version>) result;
            clusterModel.getVersion().setItems(versions);
            if (!versions.contains(clusterModel.getVersion().getSelectedItem())) {
                if (versions.contains(((StoragePool) clusterModel.getDataCenter().getSelectedItem()).getcompatibility_version())) {
                    clusterModel.getVersion().setSelectedItem(((StoragePool) clusterModel.getDataCenter().getSelectedItem()).getcompatibility_version());
                } else {
                    clusterModel.getVersion().setSelectedItem(Linq.selectHighestVersion(versions));
                }
            } else if (clusterModel.getIsEdit()) {
                clusterModel.getVersion().setSelectedItem(Linq.firstOrDefault(versions, new Linq.VersionPredicate(clusterModel.getEntity().getcompatibility_version())));
            }
        }
    };
    AsyncDataProvider.getDataCenterVersions(_asyncQuery, selectedDataCenter.getId());
}
#method_after
private void storagePool_SelectedItemChanged(EventArgs e) {
    // possible versions for new cluster (when editing cluster, this event won't occur)
    // are actually the possible versions for the data-center that the cluster is going
    // to be attached to.
    StoragePool selectedDataCenter = getDataCenter().getSelectedItem();
    if (selectedDataCenter == null) {
        return;
    }
    if (selectedDataCenter.getStorageType() == StorageType.LOCALFS) {
        setIsResiliencePolicyTabAvailable(false);
    } else {
        setIsResiliencePolicyTabAvailable(true);
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<Version> versions = (ArrayList<Version>) result;
            Version selectedVersion = clusterModel.getVersion().getSelectedItem();
            clusterModel.getVersion().setItems(versions);
            if (selectedVersion == null || !versions.contains(selectedVersion)) {
                clusterModel.getVersion().setSelectedItem(Linq.selectHighestVersion(versions));
            } else if (clusterModel.getIsEdit()) {
                clusterModel.getVersion().setSelectedItem(Linq.firstOrDefault(versions, new Linq.VersionPredicate(clusterModel.getEntity().getcompatibility_version())));
            } else {
                clusterModel.getVersion().setSelectedItem(selectedVersion);
            }
        }
    };
    AsyncDataProvider.getDataCenterVersions(_asyncQuery, selectedDataCenter.getId());
}
#end_block

#method_before
private void clusterPolicyChanged() {
    ClusterPolicy clusterPolicy = (ClusterPolicy) getClusterPolicy().getSelectedItem();
    ArrayList<String> lines = new ArrayList<String>();
    Map<Guid, PolicyUnit> allPolicyUnits = new HashMap<Guid, PolicyUnit>();
    if (clusterPolicy.getFilters() != null) {
        for (Guid policyUnitId : clusterPolicy.getFilters()) {
            allPolicyUnits.put(policyUnitId, policyUnitMap.get(policyUnitId));
        }
    }
    if (clusterPolicy.getFunctions() != null) {
        for (Pair<Guid, Integer> pair : clusterPolicy.getFunctions()) {
            allPolicyUnits.put(pair.getFirst(), policyUnitMap.get(pair.getFirst()));
        }
    }
    if (clusterPolicy.getBalance() != null) {
        allPolicyUnits.put(clusterPolicy.getBalance(), policyUnitMap.get(clusterPolicy.getBalance()));
    }
    for (PolicyUnit policyUnit : allPolicyUnits.values()) {
        if (policyUnit.getParameterRegExMap() != null) {
            for (Map.Entry<String, String> keyValue : policyUnit.getParameterRegExMap().entrySet()) {
                lines.add(keyValue.getKey() + '=' + keyValue.getValue());
            }
        }
    }
    getCustomPropertySheet().setKeyValueString(lines);
    if (getIsEdit() && clusterPolicy.getId().equals(getEntity().getClusterPolicyId())) {
        getCustomPropertySheet().setEntity(KeyValueModel.convertProperties(getEntity().getClusterPolicyProperties()));
    } else {
        getCustomPropertySheet().setEntity(KeyValueModel.convertProperties(clusterPolicy.getParameterMap()));
    }
}
#method_after
private void clusterPolicyChanged() {
    ClusterPolicy clusterPolicy = getClusterPolicy().getSelectedItem();
    ArrayList<String> lines = new ArrayList<String>();
    Map<Guid, PolicyUnit> allPolicyUnits = new HashMap<Guid, PolicyUnit>();
    if (clusterPolicy.getFilters() != null) {
        for (Guid policyUnitId : clusterPolicy.getFilters()) {
            allPolicyUnits.put(policyUnitId, policyUnitMap.get(policyUnitId));
        }
    }
    if (clusterPolicy.getFunctions() != null) {
        for (Pair<Guid, Integer> pair : clusterPolicy.getFunctions()) {
            allPolicyUnits.put(pair.getFirst(), policyUnitMap.get(pair.getFirst()));
        }
    }
    if (clusterPolicy.getBalance() != null) {
        allPolicyUnits.put(clusterPolicy.getBalance(), policyUnitMap.get(clusterPolicy.getBalance()));
    }
    for (PolicyUnit policyUnit : allPolicyUnits.values()) {
        if (policyUnit.getParameterRegExMap() != null) {
            for (Map.Entry<String, String> keyValue : policyUnit.getParameterRegExMap().entrySet()) {
                lines.add(keyValue.getKey() + '=' + keyValue.getValue());
            }
        }
    }
    getCustomPropertySheet().setKeyValueString(lines);
    if (getIsEdit() && clusterPolicy.getId().equals(getEntity().getClusterPolicyId())) {
        getCustomPropertySheet().setEntity(KeyValueModel.convertProperties(getEntity().getClusterPolicyProperties()));
    } else {
        getCustomPropertySheet().setEntity(KeyValueModel.convertProperties(clusterPolicy.getParameterMap()));
    }
}
#end_block

#method_before
public boolean validate(boolean validateStoragePool, boolean validateCpu, boolean validateCustomProperties) {
    getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation(40), new I18NNameValidation() });
    if (validateStoragePool) {
        getDataCenter().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    if (validateCpu) {
        getCPU().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getCPU().validateSelectedItem(new IValidation[] {});
    }
    if (validateCustomProperties) {
        getCustomPropertySheet().setIsValid(getCustomPropertySheet().validate());
    }
    getVersion().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    // TODO: async validation for webadmin
    // string name = (string)Name.Entity;
    // //Check name unicitate.
    // if (String.Compare(name, OriginalName, true) != 0 && !DataProvider.IsClusterNameUnique(name))
    // {
    // Name.IsValid = false;
    // Name.InvalidityReasons.Add("Name must be unique.");
    // }
    boolean validService = true;
    if (getEnableOvirtService().getIsAvailable() && getEnableGlusterService().getIsAvailable()) {
        validService = ((Boolean) getEnableOvirtService().getEntity()) || ((Boolean) getEnableGlusterService().getEntity());
    }
    getGlusterHostAddress().validateEntity(new IValidation[] { new NotEmptyValidation() });
    getGlusterHostPassword().validateEntity(new IValidation[] { new NotEmptyValidation() });
    if (!validService) {
        setMessage(ConstantsManager.getInstance().getConstants().clusterServiceValidationMsg());
    } else if (((Boolean) getIsImportGlusterConfiguration().getEntity()) && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && !isFingerprintVerified()) {
        setMessage(ConstantsManager.getInstance().getConstants().fingerprintNotVerified());
    } else {
        setMessage(null);
    }
    setIsGeneralTabValid(getName().getIsValid() && getDataCenter().getIsValid() && getCPU().getIsValid() && getVersion().getIsValid() && validService && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && ((Boolean) getIsImportGlusterConfiguration().getEntity() ? (getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && isFingerprintVerified()) : true));
    return getName().getIsValid() && getDataCenter().getIsValid() && getCPU().getIsValid() && getVersion().getIsValid() && validService && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && ((Boolean) getIsImportGlusterConfiguration().getEntity() ? (getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && isFingerprintVerified()) : true) && getCustomPropertySheet().getIsValid();
}
#method_after
public boolean validate(boolean validateStoragePool, boolean validateCpu, boolean validateCustomProperties) {
    getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation(40), new I18NNameValidation() });
    if (validateStoragePool) {
        getDataCenter().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    if (validateCpu) {
        getCPU().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getCPU().validateSelectedItem(new IValidation[] {});
    }
    if (validateCustomProperties) {
        getCustomPropertySheet().setIsValid(getCustomPropertySheet().validate());
    }
    getVersion().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    // TODO: async validation for webadmin
    // string name = (string)Name.Entity;
    // //Check name unicitate.
    // if (String.Compare(name, OriginalName, true) != 0 && !DataProvider.IsClusterNameUnique(name))
    // {
    // Name.IsValid = false;
    // Name.InvalidityReasons.Add("Name must be unique.");
    // }
    boolean validService = true;
    if (getEnableOvirtService().getIsAvailable() && getEnableGlusterService().getIsAvailable()) {
        validService = getEnableOvirtService().getEntity() || getEnableGlusterService().getEntity();
    }
    getGlusterHostAddress().validateEntity(new IValidation[] { new NotEmptyValidation() });
    getGlusterHostPassword().validateEntity(new IValidation[] { new NotEmptyValidation() });
    if (!validService) {
        setMessage(ConstantsManager.getInstance().getConstants().clusterServiceValidationMsg());
    } else if (getIsImportGlusterConfiguration().getEntity() && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && !isFingerprintVerified()) {
        setMessage(ConstantsManager.getInstance().getConstants().fingerprintNotVerified());
    } else {
        setMessage(null);
    }
    setIsGeneralTabValid(getName().getIsValid() && getDataCenter().getIsValid() && getCPU().getIsValid() && getVersion().getIsValid() && validService && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && (getIsImportGlusterConfiguration().getEntity() ? (getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && isFingerprintVerified()) : true));
    return getName().getIsValid() && getDataCenter().getIsValid() && getCPU().getIsValid() && getVersion().getIsValid() && validService && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && (getIsImportGlusterConfiguration().getEntity() ? (getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && isFingerprintVerified()) : true) && getCustomPropertySheet().getIsValid();
}
#end_block

#method_before
public ListModel getClusterPolicy() {
    return clusterPolicy;
}
#method_after
public ListModel<ClusterPolicy> getClusterPolicy() {
    return clusterPolicy;
}
#end_block

#method_before
public void setClusterPolicy(ListModel clusterPolicy) {
    this.clusterPolicy = clusterPolicy;
}
#method_after
public void setClusterPolicy(ListModel<ClusterPolicy> clusterPolicy) {
    this.clusterPolicy = clusterPolicy;
}
#end_block

#method_before
public EntityModel getName() {
    return privateName;
}
#method_after
public EntityModel<String> getName() {
    return privateName;
}
#end_block

#method_before
public void setName(EntityModel value) {
    privateName = value;
}
#method_after
public void setName(EntityModel<String> value) {
    privateName = value;
}
#end_block

#method_before
public EntityModel getDescription() {
    return privateDescription;
}
#method_after
public EntityModel<String> getDescription() {
    return privateDescription;
}
#end_block

#method_before
public void setDescription(EntityModel value) {
    privateDescription = value;
}
#method_after
public void setDescription(EntityModel<String> value) {
    privateDescription = value;
}
#end_block

#method_before
public EntityModel getComment() {
    return privateComment;
}
#method_after
public EntityModel<String> getComment() {
    return privateComment;
}
#end_block

#method_before
public void setComment(EntityModel value) {
    privateComment = value;
}
#method_after
public void setComment(EntityModel<String> value) {
    privateComment = value;
}
#end_block

#method_before
public ListModel getDataCenter() {
    return privateDataCenter;
}
#method_after
public ListModel<StoragePool> getDataCenter() {
    return privateDataCenter;
}
#end_block

#method_before
public void setDataCenter(ListModel value) {
    privateDataCenter = value;
}
#method_after
public void setDataCenter(ListModel<StoragePool> value) {
    privateDataCenter = value;
}
#end_block

#method_before
public ListModel getCPU() {
    return privateCPU;
}
#method_after
public ListModel<ServerCpu> getCPU() {
    return privateCPU;
}
#end_block

#method_before
public void setCPU(ListModel value) {
    privateCPU = value;
}
#method_after
public void setCPU(ListModel<ServerCpu> value) {
    privateCPU = value;
}
#end_block

#method_before
public ListModel getVersion() {
    return privateVersion;
}
#method_after
public ListModel<Version> getVersion() {
    return privateVersion;
}
#end_block

#method_before
public void setVersion(ListModel value) {
    privateVersion = value;
}
#method_after
public void setVersion(ListModel<Version> value) {
    privateVersion = value;
}
#end_block

#method_before
public EntityModel getEnableOvirtService() {
    return privateEnableOvirtService;
}
#method_after
public EntityModel<Boolean> getEnableOvirtService() {
    return privateEnableOvirtService;
}
#end_block

#method_before
public void setEnableOvirtService(EntityModel value) {
    this.privateEnableOvirtService = value;
}
#method_after
public void setEnableOvirtService(EntityModel<Boolean> value) {
    this.privateEnableOvirtService = value;
}
#end_block

#method_before
public EntityModel getEnableGlusterService() {
    return privateEnableGlusterService;
}
#method_after
public EntityModel<Boolean> getEnableGlusterService() {
    return privateEnableGlusterService;
}
#end_block

#method_before
public void setEnableGlusterService(EntityModel value) {
    this.privateEnableGlusterService = value;
}
#method_after
public void setEnableGlusterService(EntityModel<Boolean> value) {
    this.privateEnableGlusterService = value;
}
#end_block

#method_before
public EntityModel getIsImportGlusterConfiguration() {
    return isImportGlusterConfiguration;
}
#method_after
public EntityModel<Boolean> getIsImportGlusterConfiguration() {
    return isImportGlusterConfiguration;
}
#end_block

#method_before
public void setIsImportGlusterConfiguration(EntityModel value) {
    this.isImportGlusterConfiguration = value;
}
#method_after
public void setIsImportGlusterConfiguration(EntityModel<Boolean> value) {
    this.isImportGlusterConfiguration = value;
}
#end_block

#method_before
public EntityModel getGlusterHostAddress() {
    return glusterHostAddress;
}
#method_after
public EntityModel<String> getGlusterHostAddress() {
    return glusterHostAddress;
}
#end_block

#method_before
public void setGlusterHostAddress(EntityModel glusterHostAddress) {
    this.glusterHostAddress = glusterHostAddress;
}
#method_after
public void setGlusterHostAddress(EntityModel<String> glusterHostAddress) {
    this.glusterHostAddress = glusterHostAddress;
}
#end_block

#method_before
public EntityModel getGlusterHostFingerprint() {
    return glusterHostFingerprint;
}
#method_after
public EntityModel<String> getGlusterHostFingerprint() {
    return glusterHostFingerprint;
}
#end_block

#method_before
public void setGlusterHostFingerprint(EntityModel glusterHostFingerprint) {
    this.glusterHostFingerprint = glusterHostFingerprint;
}
#method_after
public void setGlusterHostFingerprint(EntityModel<String> glusterHostFingerprint) {
    this.glusterHostFingerprint = glusterHostFingerprint;
}
#end_block

#method_before
public EntityModel getGlusterHostPassword() {
    return glusterHostPassword;
}
#method_after
public EntityModel<String> getGlusterHostPassword() {
    return glusterHostPassword;
}
#end_block

#method_before
public void setGlusterHostPassword(EntityModel glusterHostPassword) {
    this.glusterHostPassword = glusterHostPassword;
}
#method_after
public void setGlusterHostPassword(EntityModel<String> glusterHostPassword) {
    this.glusterHostPassword = glusterHostPassword;
}
#end_block

#method_before
public EntityModel getOptimizationNone() {
    return privateOptimizationNone;
}
#method_after
public EntityModel<Integer> getOptimizationNone() {
    return privateOptimizationNone;
}
#end_block

#method_before
public void setOptimizationNone(EntityModel value) {
    privateOptimizationNone = value;
}
#method_after
public void setOptimizationNone(EntityModel<Integer> value) {
    privateOptimizationNone = value;
}
#end_block

#method_before
public EntityModel getOptimizationForServer() {
    return privateOptimizationForServer;
}
#method_after
public EntityModel<Integer> getOptimizationForServer() {
    return privateOptimizationForServer;
}
#end_block

#method_before
public void setOptimizationForServer(EntityModel value) {
    privateOptimizationForServer = value;
}
#method_after
public void setOptimizationForServer(EntityModel<Integer> value) {
    privateOptimizationForServer = value;
}
#end_block

#method_before
public EntityModel getOptimizationForDesktop() {
    return privateOptimizationForDesktop;
}
#method_after
public EntityModel<Integer> getOptimizationForDesktop() {
    return privateOptimizationForDesktop;
}
#end_block

#method_before
public void setOptimizationForDesktop(EntityModel value) {
    privateOptimizationForDesktop = value;
}
#method_after
public void setOptimizationForDesktop(EntityModel<Integer> value) {
    privateOptimizationForDesktop = value;
}
#end_block

#method_before
public EntityModel getOptimizationCustom() {
    return privateOptimizationCustom;
}
#method_after
public EntityModel<Integer> getOptimizationCustom() {
    return privateOptimizationCustom;
}
#end_block

#method_before
public void setOptimizationCustom(EntityModel value) {
    privateOptimizationCustom = value;
}
#method_after
public void setOptimizationCustom(EntityModel<Integer> value) {
    privateOptimizationCustom = value;
}
#end_block

#method_before
public EntityModel getOptimizationNone_IsSelected() {
    return privateOptimizationNone_IsSelected;
}
#method_after
public EntityModel<Boolean> getOptimizationNone_IsSelected() {
    return privateOptimizationNone_IsSelected;
}
#end_block

#method_before
public void setOptimizationNone_IsSelected(EntityModel value) {
    privateOptimizationNone_IsSelected = value;
}
#method_after
public void setOptimizationNone_IsSelected(EntityModel<Boolean> value) {
    privateOptimizationNone_IsSelected = value;
}
#end_block

#method_before
public EntityModel getOptimizationForServer_IsSelected() {
    return privateOptimizationForServer_IsSelected;
}
#method_after
public EntityModel<Boolean> getOptimizationForServer_IsSelected() {
    return privateOptimizationForServer_IsSelected;
}
#end_block

#method_before
public void setOptimizationForServer_IsSelected(EntityModel value) {
    privateOptimizationForServer_IsSelected = value;
}
#method_after
public void setOptimizationForServer_IsSelected(EntityModel<Boolean> value) {
    privateOptimizationForServer_IsSelected = value;
}
#end_block

#method_before
public EntityModel getOptimizationForDesktop_IsSelected() {
    return privateOptimizationForDesktop_IsSelected;
}
#method_after
public EntityModel<Boolean> getOptimizationForDesktop_IsSelected() {
    return privateOptimizationForDesktop_IsSelected;
}
#end_block

#method_before
public void setOptimizationForDesktop_IsSelected(EntityModel value) {
    privateOptimizationForDesktop_IsSelected = value;
}
#method_after
public void setOptimizationForDesktop_IsSelected(EntityModel<Boolean> value) {
    privateOptimizationForDesktop_IsSelected = value;
}
#end_block

#method_before
public EntityModel getOptimizationCustom_IsSelected() {
    return privateOptimizationCustom_IsSelected;
}
#method_after
public EntityModel<Boolean> getOptimizationCustom_IsSelected() {
    return privateOptimizationCustom_IsSelected;
}
#end_block

#method_before
public void setOptimizationCustom_IsSelected(EntityModel value) {
    privateOptimizationCustom_IsSelected = value;
}
#method_after
public void setOptimizationCustom_IsSelected(EntityModel<Boolean> value) {
    privateOptimizationCustom_IsSelected = value;
}
#end_block

#method_before
public EntityModel getCountThreadsAsCores() {
    return privateCountThreadsAsCores;
}
#method_after
public EntityModel<Boolean> getCountThreadsAsCores() {
    return privateCountThreadsAsCores;
}
#end_block

#method_before
public void setCountThreadsAsCores(EntityModel value) {
    privateCountThreadsAsCores = value;
}
#method_after
public void setCountThreadsAsCores(EntityModel<Boolean> value) {
    privateCountThreadsAsCores = value;
}
#end_block

#method_before
public EntityModel getVersionSupportsCpuThreads() {
    return privateVersionSupportsCpuThreads;
}
#method_after
public EntityModel<Boolean> getVersionSupportsCpuThreads() {
    return privateVersionSupportsCpuThreads;
}
#end_block

#method_before
public void setVersionSupportsCpuThreads(EntityModel value) {
    privateVersionSupportsCpuThreads = value;
}
#method_after
public void setVersionSupportsCpuThreads(EntityModel<Boolean> value) {
    privateVersionSupportsCpuThreads = value;
}
#end_block

#method_before
public EntityModel getMigrateOnErrorOption_NO() {
    return privateMigrateOnErrorOption_NO;
}
#method_after
public EntityModel<Boolean> getMigrateOnErrorOption_NO() {
    return privateMigrateOnErrorOption_NO;
}
#end_block

#method_before
public void setMigrateOnErrorOption_NO(EntityModel value) {
    privateMigrateOnErrorOption_NO = value;
}
#method_after
public void setMigrateOnErrorOption_NO(EntityModel<Boolean> value) {
    privateMigrateOnErrorOption_NO = value;
}
#end_block

#method_before
public EntityModel getMigrateOnErrorOption_YES() {
    return privateMigrateOnErrorOption_YES;
}
#method_after
public EntityModel<Boolean> getMigrateOnErrorOption_YES() {
    return privateMigrateOnErrorOption_YES;
}
#end_block

#method_before
public void setMigrateOnErrorOption_YES(EntityModel value) {
    privateMigrateOnErrorOption_YES = value;
}
#method_after
public void setMigrateOnErrorOption_YES(EntityModel<Boolean> value) {
    privateMigrateOnErrorOption_YES = value;
}
#end_block

#method_before
public EntityModel getMigrateOnErrorOption_HA_ONLY() {
    return privateMigrateOnErrorOption_HA_ONLY;
}
#method_after
public EntityModel<Boolean> getMigrateOnErrorOption_HA_ONLY() {
    return privateMigrateOnErrorOption_HA_ONLY;
}
#end_block

#method_before
public void setMigrateOnErrorOption_HA_ONLY(EntityModel value) {
    privateMigrateOnErrorOption_HA_ONLY = value;
}
#method_after
public void setMigrateOnErrorOption_HA_ONLY(EntityModel<Boolean> value) {
    privateMigrateOnErrorOption_HA_ONLY = value;
}
#end_block

#method_before
public EntityModel getEnableBallooning() {
    return enableBallooning;
}
#method_after
public EntityModel<Boolean> getEnableBallooning() {
    return enableBallooning;
}
#end_block

#method_before
public void setEnableBallooning(EntityModel enableBallooning) {
    this.enableBallooning = enableBallooning;
}
#method_after
public void setEnableBallooning(EntityModel<Boolean> enableBallooning) {
    this.enableBallooning = enableBallooning;
}
#end_block

#method_before
public EntityModel getOptimizeForUtilization() {
    return optimizeForUtilization;
}
#method_after
public EntityModel<Boolean> getOptimizeForUtilization() {
    return optimizeForUtilization;
}
#end_block

#method_before
public void setOptimizeForUtilization(EntityModel optimizeForUtilization) {
    this.optimizeForUtilization = optimizeForUtilization;
}
#method_after
public void setOptimizeForUtilization(EntityModel<Boolean> optimizeForUtilization) {
    this.optimizeForUtilization = optimizeForUtilization;
}
#end_block

#method_before
public EntityModel getOptimizeForSpeed() {
    return optimizeForSpeed;
}
#method_after
public EntityModel<Boolean> getOptimizeForSpeed() {
    return optimizeForSpeed;
}
#end_block

#method_before
public void setOptimizeForSpeed(EntityModel optimizeForSpeed) {
    this.optimizeForSpeed = optimizeForSpeed;
}
#method_after
public void setOptimizeForSpeed(EntityModel<Boolean> optimizeForSpeed) {
    this.optimizeForSpeed = optimizeForSpeed;
}
#end_block

#method_before
public MigrateOnErrorOptions getMigrateOnErrorOption() {
    if ((Boolean) getMigrateOnErrorOption_NO().getEntity() == true) {
        return MigrateOnErrorOptions.NO;
    } else if ((Boolean) getMigrateOnErrorOption_YES().getEntity() == true) {
        return MigrateOnErrorOptions.YES;
    } else if ((Boolean) getMigrateOnErrorOption_HA_ONLY().getEntity() == true) {
        return MigrateOnErrorOptions.HA_ONLY;
    }
    return MigrateOnErrorOptions.YES;
}
#method_after
public MigrateOnErrorOptions getMigrateOnErrorOption() {
    if (getMigrateOnErrorOption_NO().getEntity() == true) {
        return MigrateOnErrorOptions.NO;
    } else if (getMigrateOnErrorOption_YES().getEntity() == true) {
        return MigrateOnErrorOptions.YES;
    } else if (getMigrateOnErrorOption_HA_ONLY().getEntity() == true) {
        return MigrateOnErrorOptions.HA_ONLY;
    }
    return MigrateOnErrorOptions.YES;
}
#end_block

#method_before
public EntityModel getEnableTrustedService() {
    return privateEnableTrustedService;
}
#method_after
public EntityModel<Boolean> getEnableTrustedService() {
    return privateEnableTrustedService;
}
#end_block

#method_before
public void setEnableTrustedService(EntityModel value) {
    this.privateEnableTrustedService = value;
}
#method_after
public void setEnableTrustedService(EntityModel<Boolean> value) {
    this.privateEnableTrustedService = value;
}
#end_block

#method_before
public int getMemoryOverCommit() {
    if ((Boolean) getOptimizationNone_IsSelected().getEntity()) {
        return (Integer) getOptimizationNone().getEntity();
    }
    if ((Boolean) getOptimizationForServer_IsSelected().getEntity()) {
        return (Integer) getOptimizationForServer().getEntity();
    }
    if ((Boolean) getOptimizationForDesktop_IsSelected().getEntity()) {
        return (Integer) getOptimizationForDesktop().getEntity();
    }
    if ((Boolean) getOptimizationCustom_IsSelected().getEntity()) {
        return (Integer) getOptimizationCustom().getEntity();
    }
    return AsyncDataProvider.getClusterDefaultMemoryOverCommit();
}
#method_after
public int getMemoryOverCommit() {
    if (getOptimizationNone_IsSelected().getEntity()) {
        return getOptimizationNone().getEntity();
    }
    if (getOptimizationForServer_IsSelected().getEntity()) {
        return getOptimizationForServer().getEntity();
    }
    if (getOptimizationForDesktop_IsSelected().getEntity()) {
        return getOptimizationForDesktop().getEntity();
    }
    if (getOptimizationCustom_IsSelected().getEntity()) {
        return getOptimizationCustom().getEntity();
    }
    return AsyncDataProvider.getClusterDefaultMemoryOverCommit();
}
#end_block

#method_before
public void setMemoryOverCommit(int value) {
    getOptimizationNone_IsSelected().setEntity(value == (Integer) getOptimizationNone().getEntity());
    getOptimizationForServer_IsSelected().setEntity(value == (Integer) getOptimizationForServer().getEntity());
    getOptimizationForDesktop_IsSelected().setEntity(value == (Integer) getOptimizationForDesktop().getEntity());
    if (!(Boolean) getOptimizationNone_IsSelected().getEntity() && !(Boolean) getOptimizationForServer_IsSelected().getEntity() && !(Boolean) getOptimizationForDesktop_IsSelected().getEntity()) {
        getOptimizationCustom().setIsAvailable(true);
        getOptimizationCustom().setEntity(value);
        getOptimizationCustom_IsSelected().setIsAvailable(true);
        getOptimizationCustom_IsSelected().setEntity(true);
    }
}
#method_after
public void setMemoryOverCommit(int value) {
    getOptimizationNone_IsSelected().setEntity(value == getOptimizationNone().getEntity());
    getOptimizationForServer_IsSelected().setEntity(value == getOptimizationForServer().getEntity());
    getOptimizationForDesktop_IsSelected().setEntity(value == getOptimizationForDesktop().getEntity());
    if (!getOptimizationNone_IsSelected().getEntity() && !getOptimizationForServer_IsSelected().getEntity() && !getOptimizationForDesktop_IsSelected().getEntity()) {
        getOptimizationCustom().setIsAvailable(true);
        getOptimizationCustom().setEntity(value);
        getOptimizationCustom_IsSelected().setIsAvailable(true);
        getOptimizationCustom_IsSelected().setEntity(true);
    }
}
#end_block

#method_before
public void init(final boolean isEdit) {
    setIsEdit(isEdit);
    setName(new EntityModel());
    setDescription(new EntityModel());
    setComment(new EntityModel());
    setEnableTrustedService(new EntityModel(false));
    setAllowClusterWithVirtGlusterEnabled(true);
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            setAllowClusterWithVirtGlusterEnabled((Boolean) returnValue);
        }
    }));
    setEnableOvirtService(new EntityModel());
    setEnableGlusterService(new EntityModel());
    getEnableOvirtService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && (Boolean) getEnableOvirtService().getEntity()) {
                getEnableGlusterService().setEntity(Boolean.FALSE);
            }
            getEnableGlusterService().setIsChangable(true);
            getEnableTrustedService().setEntity(false);
            if (getEnableOvirtService().getEntity() != null && (Boolean) getEnableOvirtService().getEntity()) {
                if (getEnableGlusterService().getEntity() != null && !(Boolean) getEnableGlusterService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            } else {
                getEnableTrustedService().setIsChangable(false);
            }
        }
    });
    getEnableOvirtService().setEntity(ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    getEnableOvirtService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.VirtOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    initImportCluster(isEdit);
    getEnableGlusterService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && (Boolean) getEnableGlusterService().getEntity()) {
                getEnableOvirtService().setEntity(Boolean.FALSE);
            }
            if (!isEdit && getEnableGlusterService().getEntity() != null && (Boolean) getEnableGlusterService().getEntity()) {
                getIsImportGlusterConfiguration().setIsAvailable(true);
                getGlusterHostAddress().setIsAvailable(true);
                getGlusterHostFingerprint().setIsAvailable(true);
                getGlusterHostPassword().setIsAvailable(true);
            } else {
                getIsImportGlusterConfiguration().setIsAvailable(false);
                getIsImportGlusterConfiguration().setEntity(false);
                getGlusterHostAddress().setIsAvailable(false);
                getGlusterHostFingerprint().setIsAvailable(false);
                getGlusterHostPassword().setIsAvailable(false);
            }
            if (getEnableGlusterService().getEntity() != null && (Boolean) getEnableGlusterService().getEntity()) {
                getEnableTrustedService().setEntity(false);
                getEnableTrustedService().setIsChangable(false);
            } else {
                if (getEnableOvirtService().getEntity() != null && (Boolean) getEnableOvirtService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            }
        }
    });
    getEnableTrustedService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (getEnableTrustedService().getEntity() != null && (Boolean) getEnableTrustedService().getEntity()) {
                getEnableGlusterService().setEntity(false);
                getEnableGlusterService().setIsChangable(false);
            } else {
                getEnableGlusterService().setIsChangable(true);
            }
        }
    });
    getEnableGlusterService().setEntity(ApplicationModeHelper.getUiMode() == ApplicationMode.GlusterOnly);
    getEnableGlusterService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.GlusterOnly));
    setOptimizationNone(new EntityModel());
    setOptimizationForServer(new EntityModel());
    setOptimizationForDesktop(new EntityModel());
    setOptimizationCustom(new EntityModel());
    EntityModel tempVar = new EntityModel();
    tempVar.setEntity(false);
    setOptimizationNone_IsSelected(tempVar);
    getOptimizationNone_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setEntity(false);
    setOptimizationForServer_IsSelected(tempVar2);
    getOptimizationForServer_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setEntity(false);
    setOptimizationForDesktop_IsSelected(tempVar3);
    getOptimizationForDesktop_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar4 = new EntityModel();
    tempVar4.setEntity(false);
    tempVar4.setIsAvailable(false);
    setOptimizationCustom_IsSelected(tempVar4);
    getOptimizationCustom_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar5 = new EntityModel();
    tempVar5.setEntity(false);
    setMigrateOnErrorOption_YES(tempVar5);
    getMigrateOnErrorOption_YES().getEntityChangedEvent().addListener(this);
    EntityModel tempVar6 = new EntityModel();
    tempVar6.setEntity(false);
    setMigrateOnErrorOption_NO(tempVar6);
    getMigrateOnErrorOption_NO().getEntityChangedEvent().addListener(this);
    EntityModel tempVar7 = new EntityModel();
    tempVar7.setEntity(false);
    setMigrateOnErrorOption_HA_ONLY(tempVar7);
    getMigrateOnErrorOption_HA_ONLY().getEntityChangedEvent().addListener(this);
    setEnableBallooning(new EntityModel());
    getEnableBallooning().setEntity(false);
    // Optimization methods:
    // default value =100;
    setDefaultMemoryOvercommit(AsyncDataProvider.getClusterDefaultMemoryOverCommit());
    setCountThreadsAsCores(new EntityModel(AsyncDataProvider.getClusterDefaultCountThreadsAsCores()));
    setVersionSupportsCpuThreads(new EntityModel(true));
    setOptimizeForUtilization(new EntityModel());
    setOptimizeForSpeed(new EntityModel());
    getOptimizeForUtilization().setEntity(true);
    getOptimizeForSpeed().setEntity(false);
    getOptimizeForUtilization().getEntityChangedEvent().addListener(this);
    getOptimizeForSpeed().getEntityChangedEvent().addListener(this);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            clusterModel.setDesktopOverCommit((Integer) result);
            AsyncQuery _asyncQuery1 = new AsyncQuery();
            _asyncQuery1.setModel(clusterModel);
            _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result1) {
                    ClusterModel clusterModel1 = (ClusterModel) model1;
                    clusterModel1.setServerOverCommit((Integer) result1);
                    // temp is used for conversion purposes
                    EntityModel temp;
                    temp = clusterModel1.getOptimizationNone();
                    temp.setEntity(clusterModel1.getDefaultMemoryOvercommit());
                    // res1, res2 is used for conversion purposes.
                    boolean res1 = clusterModel1.getDesktopOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    boolean res2 = clusterModel1.getServerOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    temp = clusterModel1.getOptimizationNone_IsSelected();
                    setIsSelected(res1 && res2);
                    temp.setEntity(getIsSelected());
                    temp = clusterModel1.getOptimizationForServer();
                    temp.setEntity(clusterModel1.getServerOverCommit());
                    temp = clusterModel1.getOptimizationForServer_IsSelected();
                    temp.setEntity(clusterModel1.getServerOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationForDesktop();
                    temp.setEntity(clusterModel1.getDesktopOverCommit());
                    temp = clusterModel1.getOptimizationForDesktop_IsSelected();
                    temp.setEntity(clusterModel1.getDesktopOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationCustom();
                    temp.setIsAvailable(false);
                    temp.setIsChangable(false);
                    if (clusterModel1.getIsEdit()) {
                        clusterModel1.postInit();
                    }
                }
            };
            AsyncDataProvider.getClusterServerMemoryOverCommit(_asyncQuery1);
        }
    };
    AsyncDataProvider.getClusterDesktopMemoryOverCommit(_asyncQuery);
    setDataCenter(new ListModel());
    getDataCenter().getSelectedItemChangedEvent().addListener(this);
    getDataCenter().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setCPU(new ListModel());
    getCPU().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setVersion(new ListModel());
    getVersion().getSelectedItemChangedEvent().addListener(this);
    setMigrateOnErrorOption(MigrateOnErrorOptions.YES);
    setIsGeneralTabValid(true);
    setIsResiliencePolicyTabAvailable(true);
    setClusterPolicy(new ListModel());
    setCustomPropertySheet(new KeyValueModel());
    getClusterPolicy().getSelectedItemChangedEvent().addListener(this);
    Frontend.RunQuery(VdcQueryType.GetAllPolicyUnits, new VdcQueryParametersBase(), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<PolicyUnit> policyUnits = (ArrayList<PolicyUnit>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            policyUnitMap = new LinkedHashMap<Guid, PolicyUnit>();
            for (PolicyUnit policyUnit : policyUnits) {
                policyUnitMap.put(policyUnit.getId(), policyUnit);
            }
            Frontend.RunQuery(VdcQueryType.GetClusterPolicies, new VdcQueryParametersBase(), new AsyncQuery(model, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    ClusterModel clusterModel = (ClusterModel) model;
                    ArrayList<ClusterPolicy> list = (ArrayList<ClusterPolicy>) ((VdcQueryReturnValue) returnValue).getReturnValue();
                    clusterModel.getClusterPolicy().setItems(list);
                    ClusterPolicy defaultClusterPolicy = null;
                    ClusterPolicy selectedClusterPolicy = null;
                    for (ClusterPolicy clusterPolicy : list) {
                        if (clusterModel.getIsEdit() && getEntity() != null && clusterPolicy.getId().equals(getEntity().getClusterPolicyId())) {
                            selectedClusterPolicy = clusterPolicy;
                        }
                        if (clusterPolicy.isDefaultPolicy()) {
                            defaultClusterPolicy = clusterPolicy;
                        }
                    }
                    if (selectedClusterPolicy != null) {
                        clusterModel.getClusterPolicy().setSelectedItem(selectedClusterPolicy);
                    } else {
                        clusterModel.getClusterPolicy().setSelectedItem(defaultClusterPolicy);
                    }
                    clusterPolicyChanged();
                }
            }));
        }
    }));
}
#method_after
public void init(final boolean isEdit) {
    setIsEdit(isEdit);
    setName(new EntityModel<String>());
    setDescription(new EntityModel<String>());
    setComment(new EntityModel<String>());
    setEnableTrustedService(new EntityModel<Boolean>(false));
    setAllowClusterWithVirtGlusterEnabled(true);
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            setAllowClusterWithVirtGlusterEnabled((Boolean) returnValue);
        }
    }));
    setEnableOvirtService(new EntityModel<Boolean>());
    setEnableGlusterService(new EntityModel<Boolean>());
    getEnableOvirtService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && getEnableOvirtService().getEntity()) {
                getEnableGlusterService().setEntity(Boolean.FALSE);
            }
            getEnableGlusterService().setIsChangable(true);
            getEnableTrustedService().setEntity(false);
            if (getEnableOvirtService().getEntity() != null && getEnableOvirtService().getEntity()) {
                if (getEnableGlusterService().getEntity() != null && !getEnableGlusterService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            } else {
                getEnableTrustedService().setIsChangable(false);
            }
        }
    });
    getEnableOvirtService().setEntity(ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    getEnableOvirtService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.VirtOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    initImportCluster(isEdit);
    getEnableGlusterService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && getEnableGlusterService().getEntity()) {
                getEnableOvirtService().setEntity(Boolean.FALSE);
            }
            if (!isEdit && getEnableGlusterService().getEntity() != null && getEnableGlusterService().getEntity()) {
                getIsImportGlusterConfiguration().setIsAvailable(true);
                getGlusterHostAddress().setIsAvailable(true);
                getGlusterHostFingerprint().setIsAvailable(true);
                getGlusterHostPassword().setIsAvailable(true);
            } else {
                getIsImportGlusterConfiguration().setIsAvailable(false);
                getIsImportGlusterConfiguration().setEntity(false);
                getGlusterHostAddress().setIsAvailable(false);
                getGlusterHostFingerprint().setIsAvailable(false);
                getGlusterHostPassword().setIsAvailable(false);
            }
            if (getEnableGlusterService().getEntity() != null && getEnableGlusterService().getEntity()) {
                getEnableTrustedService().setEntity(false);
                getEnableTrustedService().setIsChangable(false);
            } else {
                if (getEnableOvirtService().getEntity() != null && getEnableOvirtService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            }
        }
    });
    getEnableTrustedService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (getEnableTrustedService().getEntity() != null && getEnableTrustedService().getEntity()) {
                getEnableGlusterService().setEntity(false);
                getEnableGlusterService().setIsChangable(false);
            } else {
                getEnableGlusterService().setIsChangable(true);
            }
        }
    });
    getEnableGlusterService().setEntity(ApplicationModeHelper.getUiMode() == ApplicationMode.GlusterOnly);
    getEnableGlusterService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.GlusterOnly));
    setOptimizationNone(new EntityModel<Integer>());
    setOptimizationForServer(new EntityModel<Integer>());
    setOptimizationForDesktop(new EntityModel<Integer>());
    setOptimizationCustom(new EntityModel<Integer>());
    EntityModel tempVar = new EntityModel<Boolean>();
    tempVar.setEntity(false);
    setOptimizationNone_IsSelected(tempVar);
    getOptimizationNone_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar2 = new EntityModel<Boolean>();
    tempVar2.setEntity(false);
    setOptimizationForServer_IsSelected(tempVar2);
    getOptimizationForServer_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar3 = new EntityModel<Boolean>();
    tempVar3.setEntity(false);
    setOptimizationForDesktop_IsSelected(tempVar3);
    getOptimizationForDesktop_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar4 = new EntityModel<Boolean>();
    tempVar4.setEntity(false);
    tempVar4.setIsAvailable(false);
    setOptimizationCustom_IsSelected(tempVar4);
    getOptimizationCustom_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar5 = new EntityModel<Boolean>();
    tempVar5.setEntity(false);
    setMigrateOnErrorOption_YES(tempVar5);
    getMigrateOnErrorOption_YES().getEntityChangedEvent().addListener(this);
    EntityModel tempVar6 = new EntityModel<Boolean>();
    tempVar6.setEntity(false);
    setMigrateOnErrorOption_NO(tempVar6);
    getMigrateOnErrorOption_NO().getEntityChangedEvent().addListener(this);
    EntityModel tempVar7 = new EntityModel<Boolean>();
    tempVar7.setEntity(false);
    setMigrateOnErrorOption_HA_ONLY(tempVar7);
    getMigrateOnErrorOption_HA_ONLY().getEntityChangedEvent().addListener(this);
    setEnableBallooning(new EntityModel<Boolean>());
    getEnableBallooning().setEntity(false);
    // Optimization methods:
    // default value =100;
    setDefaultMemoryOvercommit(AsyncDataProvider.getClusterDefaultMemoryOverCommit());
    setCountThreadsAsCores(new EntityModel(AsyncDataProvider.getClusterDefaultCountThreadsAsCores()));
    setVersionSupportsCpuThreads(new EntityModel<Boolean>(true));
    setOptimizeForUtilization(new EntityModel<Boolean>());
    setOptimizeForSpeed(new EntityModel<Boolean>());
    getOptimizeForUtilization().setEntity(true);
    getOptimizeForSpeed().setEntity(false);
    getOptimizeForUtilization().getEntityChangedEvent().addListener(this);
    getOptimizeForSpeed().getEntityChangedEvent().addListener(this);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            clusterModel.setDesktopOverCommit((Integer) result);
            AsyncQuery _asyncQuery1 = new AsyncQuery();
            _asyncQuery1.setModel(clusterModel);
            _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result1) {
                    ClusterModel clusterModel1 = (ClusterModel) model1;
                    clusterModel1.setServerOverCommit((Integer) result1);
                    // temp is used for conversion purposes
                    EntityModel temp;
                    temp = clusterModel1.getOptimizationNone();
                    temp.setEntity(clusterModel1.getDefaultMemoryOvercommit());
                    // res1, res2 is used for conversion purposes.
                    boolean res1 = clusterModel1.getDesktopOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    boolean res2 = clusterModel1.getServerOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    temp = clusterModel1.getOptimizationNone_IsSelected();
                    setIsSelected(res1 && res2);
                    temp.setEntity(getIsSelected());
                    temp = clusterModel1.getOptimizationForServer();
                    temp.setEntity(clusterModel1.getServerOverCommit());
                    temp = clusterModel1.getOptimizationForServer_IsSelected();
                    temp.setEntity(clusterModel1.getServerOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationForDesktop();
                    temp.setEntity(clusterModel1.getDesktopOverCommit());
                    temp = clusterModel1.getOptimizationForDesktop_IsSelected();
                    temp.setEntity(clusterModel1.getDesktopOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationCustom();
                    temp.setIsAvailable(false);
                    temp.setIsChangable(false);
                    if (clusterModel1.getIsEdit()) {
                        clusterModel1.postInit();
                    }
                }
            };
            AsyncDataProvider.getClusterServerMemoryOverCommit(_asyncQuery1);
        }
    };
    AsyncDataProvider.getClusterDesktopMemoryOverCommit(_asyncQuery);
    setDataCenter(new ListModel<StoragePool>());
    getDataCenter().getSelectedItemChangedEvent().addListener(this);
    getDataCenter().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setCPU(new ListModel<ServerCpu>());
    getCPU().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setVersion(new ListModel<Version>());
    getVersion().getSelectedItemChangedEvent().addListener(this);
    setMigrateOnErrorOption(MigrateOnErrorOptions.YES);
    setArchitecture(new ListModel<ArchitectureType>());
    getArchitecture().setItems(new ArrayList<ArchitectureType>(Arrays.asList(ArchitectureType.values())));
    setIsGeneralTabValid(true);
    setIsResiliencePolicyTabAvailable(true);
    setClusterPolicy(new ListModel<ClusterPolicy>());
    setCustomPropertySheet(new KeyValueModel());
    getClusterPolicy().getSelectedItemChangedEvent().addListener(this);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllPolicyUnits, new VdcQueryParametersBase(), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<PolicyUnit> policyUnits = ((VdcQueryReturnValue) returnValue).getReturnValue();
            policyUnitMap = new LinkedHashMap<Guid, PolicyUnit>();
            for (PolicyUnit policyUnit : policyUnits) {
                policyUnitMap.put(policyUnit.getId(), policyUnit);
            }
            Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, new VdcQueryParametersBase(), new AsyncQuery(model, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    ClusterModel clusterModel = (ClusterModel) model;
                    ArrayList<ClusterPolicy> list = ((VdcQueryReturnValue) returnValue).getReturnValue();
                    clusterModel.getClusterPolicy().setItems(list);
                    ClusterPolicy defaultClusterPolicy = null;
                    ClusterPolicy selectedClusterPolicy = null;
                    for (ClusterPolicy clusterPolicy : list) {
                        if (clusterModel.getIsEdit() && getEntity() != null && clusterPolicy.getId().equals(getEntity().getClusterPolicyId())) {
                            selectedClusterPolicy = clusterPolicy;
                        }
                        if (clusterPolicy.isDefaultPolicy()) {
                            defaultClusterPolicy = clusterPolicy;
                        }
                    }
                    if (selectedClusterPolicy != null) {
                        clusterModel.getClusterPolicy().setSelectedItem(selectedClusterPolicy);
                    } else {
                        clusterModel.getClusterPolicy().setSelectedItem(defaultClusterPolicy);
                    }
                    clusterPolicyChanged();
                }
            }));
        }
    }));
}
#end_block

#method_before
private void initImportCluster(boolean isEdit) {
    setGlusterHostAddress(new EntityModel());
    getGlusterHostAddress().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            setIsFingerprintVerified(false);
            if (getGlusterHostAddress().getEntity() == null || ((String) getGlusterHostAddress().getEntity()).trim().length() == 0) {
                // $NON-NLS-1$
                getGlusterHostFingerprint().setEntity("");
                return;
            }
            fetchFingerprint((String) getGlusterHostAddress().getEntity());
        }
    });
    setGlusterHostFingerprint(new EntityModel());
    // $NON-NLS-1$
    getGlusterHostFingerprint().setEntity("");
    setIsFingerprintVerified(false);
    setGlusterHostPassword(new EntityModel());
    setIsImportGlusterConfiguration(new EntityModel());
    getIsImportGlusterConfiguration().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (getIsImportGlusterConfiguration().getEntity() != null && (Boolean) getIsImportGlusterConfiguration().getEntity()) {
                getGlusterHostAddress().setIsChangable(true);
                getGlusterHostPassword().setIsChangable(true);
            } else {
                getGlusterHostAddress().setIsChangable(false);
                getGlusterHostPassword().setIsChangable(false);
            }
        }
    });
    getIsImportGlusterConfiguration().setIsAvailable(false);
    getGlusterHostAddress().setIsAvailable(false);
    getGlusterHostFingerprint().setIsAvailable(false);
    getGlusterHostPassword().setIsAvailable(false);
    getIsImportGlusterConfiguration().setEntity(false);
}
#method_after
private void initImportCluster(boolean isEdit) {
    setGlusterHostAddress(new EntityModel<String>());
    getGlusterHostAddress().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            setIsFingerprintVerified(false);
            if (getGlusterHostAddress().getEntity() == null || (getGlusterHostAddress().getEntity()).trim().length() == 0) {
                // $NON-NLS-1$
                getGlusterHostFingerprint().setEntity("");
                return;
            }
            fetchFingerprint(getGlusterHostAddress().getEntity());
        }
    });
    setGlusterHostFingerprint(new EntityModel<String>());
    // $NON-NLS-1$
    getGlusterHostFingerprint().setEntity("");
    setIsFingerprintVerified(false);
    setGlusterHostPassword(new EntityModel<String>());
    setIsImportGlusterConfiguration(new EntityModel<Boolean>());
    getIsImportGlusterConfiguration().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (getIsImportGlusterConfiguration().getEntity() != null && getIsImportGlusterConfiguration().getEntity()) {
                getGlusterHostAddress().setIsChangable(true);
                getGlusterHostPassword().setIsChangable(true);
            } else {
                getGlusterHostAddress().setIsChangable(false);
                getGlusterHostPassword().setIsChangable(false);
            }
        }
    });
    getIsImportGlusterConfiguration().setIsAvailable(false);
    getGlusterHostAddress().setIsAvailable(false);
    getGlusterHostFingerprint().setIsAvailable(false);
    getGlusterHostPassword().setIsAvailable(false);
    getIsImportGlusterConfiguration().setEntity(false);
}
#end_block

#method_before
private void fetchFingerprint(String hostAddress) {
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            String fingerprint = (String) result;
            if (fingerprint != null && fingerprint.length() > 0) {
                getGlusterHostFingerprint().setEntity(result);
                setIsFingerprintVerified(true);
            } else {
                getGlusterHostFingerprint().setEntity(ConstantsManager.getInstance().getConstants().errorLoadingFingerprint());
                setIsFingerprintVerified(false);
            }
        }
    };
    AsyncDataProvider.getHostFingerprint(aQuery, hostAddress);
    getGlusterHostFingerprint().setEntity(ConstantsManager.getInstance().getConstants().loadingFingerprint());
}
#method_after
private void fetchFingerprint(String hostAddress) {
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            String fingerprint = (String) result;
            if (fingerprint != null && fingerprint.length() > 0) {
                getGlusterHostFingerprint().setEntity((String) result);
                setIsFingerprintVerified(true);
            } else {
                getGlusterHostFingerprint().setEntity(ConstantsManager.getInstance().getConstants().errorLoadingFingerprint());
                setIsFingerprintVerified(false);
            }
        }
    };
    AsyncDataProvider.getHostFingerprint(aQuery, hostAddress);
    getGlusterHostFingerprint().setEntity(ConstantsManager.getInstance().getConstants().loadingFingerprint());
}
#end_block

#method_before
private void version_SelectedItemChanged(EventArgs e) {
    Version version;
    if (getVersion().getSelectedItem() != null) {
        version = (Version) getVersion().getSelectedItem();
    } else {
        version = ((StoragePool) getDataCenter().getSelectedItem()).getcompatibility_version();
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<ServerCpu> cpus = (ArrayList<ServerCpu>) result;
            ServerCpu oldSelectedCpu = (ServerCpu) clusterModel.getCPU().getSelectedItem();
            clusterModel.getCPU().setItems(cpus);
            clusterModel.getCPU().setSelectedItem(oldSelectedCpu != null ? Linq.firstOrDefault(cpus, new Linq.ServerCpuPredicate(oldSelectedCpu.getCpuName())) : null);
            if (clusterModel.getCPU().getSelectedItem() == null || !isCPUinitialized) {
                initCPU();
            }
        }
    };
    AsyncDataProvider.getCPUList(_asyncQuery, version);
    // CPU Thread support is only available for clusters of version 3.2 or greater
    getVersionSupportsCpuThreads().setEntity(version.compareTo(Version.v3_2) >= 0);
    getEnableBallooning().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().ballooningNotAvailable());
    getEnableBallooning().setIsChangable(version.compareTo(Version.v3_3) >= 0);
}
#method_after
private void version_SelectedItemChanged(EventArgs e) {
    Version version;
    if (getVersion().getSelectedItem() != null) {
        version = getVersion().getSelectedItem();
    } else {
        version = getDataCenter().getSelectedItem().getcompatibility_version();
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<ServerCpu> cpus = (ArrayList<ServerCpu>) result;
            ServerCpu oldSelectedCpu = clusterModel.getCPU().getSelectedItem();
            clusterModel.getCPU().setItems(cpus);
            clusterModel.getCPU().setSelectedItem(oldSelectedCpu != null ? Linq.firstOrDefault(cpus, new Linq.ServerCpuPredicate(oldSelectedCpu.getCpuName())) : null);
            if (clusterModel.getCPU().getSelectedItem() == null || !isCPUinitialized) {
                initCPU();
            }
        }
    };
    AsyncDataProvider.getCPUList(_asyncQuery, version);
    // CPU Thread support is only available for clusters of version 3.2 or greater
    getVersionSupportsCpuThreads().setEntity(version.compareTo(Version.v3_2) >= 0);
    getEnableBallooning().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().ballooningNotAvailable());
    getEnableBallooning().setIsChangable(version.compareTo(Version.v3_3) >= 0);
}
#end_block

#method_before
private void initCPU() {
    if (!isCPUinitialized && getIsEdit()) {
        isCPUinitialized = true;
        getCPU().setSelectedItem(null);
        for (ServerCpu a : (ArrayList<ServerCpu>) getCPU().getItems()) {
            if (StringHelper.stringsEqual(a.getCpuName(), getEntity().getcpu_name())) {
                getCPU().setSelectedItem(a);
                break;
            }
        }
    }
}
#method_after
private void initCPU() {
    if (!isCPUinitialized && getIsEdit()) {
        isCPUinitialized = true;
        getCPU().setSelectedItem(null);
        for (ServerCpu a : getCPU().getItems()) {
            if (StringHelper.stringsEqual(a.getCpuName(), getEntity().getcpu_name())) {
                getCPU().setSelectedItem(a);
                break;
            }
        }
    }
}
#end_block

#method_before
private void storagePool_SelectedItemChanged(EventArgs e) {
    // possible versions for new cluster (when editing cluster, this event won't occur)
    // are actually the possible versions for the data-center that the cluster is going
    // to be attached to.
    StoragePool selectedDataCenter = (StoragePool) getDataCenter().getSelectedItem();
    if (selectedDataCenter == null) {
        return;
    }
    if (selectedDataCenter.getStorageType() == StorageType.LOCALFS) {
        setIsResiliencePolicyTabAvailable(false);
    } else {
        setIsResiliencePolicyTabAvailable(true);
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<Version> versions = (ArrayList<Version>) result;
            clusterModel.getVersion().setItems(versions);
            if (!versions.contains(clusterModel.getVersion().getSelectedItem())) {
                if (versions.contains(((StoragePool) clusterModel.getDataCenter().getSelectedItem()).getcompatibility_version())) {
                    clusterModel.getVersion().setSelectedItem(((StoragePool) clusterModel.getDataCenter().getSelectedItem()).getcompatibility_version());
                } else {
                    clusterModel.getVersion().setSelectedItem(Linq.selectHighestVersion(versions));
                }
            } else if (clusterModel.getIsEdit()) {
                clusterModel.getVersion().setSelectedItem(Linq.firstOrDefault(versions, new Linq.VersionPredicate(clusterModel.getEntity().getcompatibility_version())));
            }
        }
    };
    AsyncDataProvider.getDataCenterVersions(_asyncQuery, selectedDataCenter.getId());
}
#method_after
private void storagePool_SelectedItemChanged(EventArgs e) {
    // possible versions for new cluster (when editing cluster, this event won't occur)
    // are actually the possible versions for the data-center that the cluster is going
    // to be attached to.
    StoragePool selectedDataCenter = getDataCenter().getSelectedItem();
    if (selectedDataCenter == null) {
        return;
    }
    if (selectedDataCenter.getStorageType() == StorageType.LOCALFS) {
        setIsResiliencePolicyTabAvailable(false);
    } else {
        setIsResiliencePolicyTabAvailable(true);
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<Version> versions = (ArrayList<Version>) result;
            Version selectedVersion = clusterModel.getVersion().getSelectedItem();
            clusterModel.getVersion().setItems(versions);
            if (selectedVersion == null || !versions.contains(selectedVersion)) {
                clusterModel.getVersion().setSelectedItem(Linq.selectHighestVersion(versions));
            } else if (clusterModel.getIsEdit()) {
                clusterModel.getVersion().setSelectedItem(Linq.firstOrDefault(versions, new Linq.VersionPredicate(clusterModel.getEntity().getcompatibility_version())));
            } else {
                clusterModel.getVersion().setSelectedItem(selectedVersion);
            }
        }
    };
    AsyncDataProvider.getDataCenterVersions(_asyncQuery, selectedDataCenter.getId());
}
#end_block

#method_before
private void clusterPolicyChanged() {
    ClusterPolicy clusterPolicy = (ClusterPolicy) getClusterPolicy().getSelectedItem();
    ArrayList<String> lines = new ArrayList<String>();
    Map<Guid, PolicyUnit> allPolicyUnits = new HashMap<Guid, PolicyUnit>();
    if (clusterPolicy.getFilters() != null) {
        for (Guid policyUnitId : clusterPolicy.getFilters()) {
            allPolicyUnits.put(policyUnitId, policyUnitMap.get(policyUnitId));
        }
    }
    if (clusterPolicy.getFunctions() != null) {
        for (Pair<Guid, Integer> pair : clusterPolicy.getFunctions()) {
            allPolicyUnits.put(pair.getFirst(), policyUnitMap.get(pair.getFirst()));
        }
    }
    if (clusterPolicy.getBalance() != null) {
        allPolicyUnits.put(clusterPolicy.getBalance(), policyUnitMap.get(clusterPolicy.getBalance()));
    }
    for (PolicyUnit policyUnit : allPolicyUnits.values()) {
        if (policyUnit.getParameterRegExMap() != null) {
            for (Map.Entry<String, String> keyValue : policyUnit.getParameterRegExMap().entrySet()) {
                lines.add(keyValue.getKey() + '=' + keyValue.getValue());
            }
        }
    }
    getCustomPropertySheet().setKeyValueString(lines);
    if (getIsEdit() && clusterPolicy.getId().equals(getEntity().getClusterPolicyId())) {
        getCustomPropertySheet().setEntity(KeyValueModel.convertProperties(getEntity().getClusterPolicyProperties()));
    } else {
        getCustomPropertySheet().setEntity(KeyValueModel.convertProperties(clusterPolicy.getParameterMap()));
    }
}
#method_after
private void clusterPolicyChanged() {
    ClusterPolicy clusterPolicy = getClusterPolicy().getSelectedItem();
    ArrayList<String> lines = new ArrayList<String>();
    Map<Guid, PolicyUnit> allPolicyUnits = new HashMap<Guid, PolicyUnit>();
    if (clusterPolicy.getFilters() != null) {
        for (Guid policyUnitId : clusterPolicy.getFilters()) {
            allPolicyUnits.put(policyUnitId, policyUnitMap.get(policyUnitId));
        }
    }
    if (clusterPolicy.getFunctions() != null) {
        for (Pair<Guid, Integer> pair : clusterPolicy.getFunctions()) {
            allPolicyUnits.put(pair.getFirst(), policyUnitMap.get(pair.getFirst()));
        }
    }
    if (clusterPolicy.getBalance() != null) {
        allPolicyUnits.put(clusterPolicy.getBalance(), policyUnitMap.get(clusterPolicy.getBalance()));
    }
    for (PolicyUnit policyUnit : allPolicyUnits.values()) {
        if (policyUnit.getParameterRegExMap() != null) {
            for (Map.Entry<String, String> keyValue : policyUnit.getParameterRegExMap().entrySet()) {
                lines.add(keyValue.getKey() + '=' + keyValue.getValue());
            }
        }
    }
    getCustomPropertySheet().setKeyValueString(lines);
    if (getIsEdit() && clusterPolicy.getId().equals(getEntity().getClusterPolicyId())) {
        getCustomPropertySheet().setEntity(KeyValueModel.convertProperties(getEntity().getClusterPolicyProperties()));
    } else {
        getCustomPropertySheet().setEntity(KeyValueModel.convertProperties(clusterPolicy.getParameterMap()));
    }
}
#end_block

#method_before
public boolean validate(boolean validateStoragePool, boolean validateCpu, boolean validateCustomProperties) {
    getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation(40), new I18NNameValidation() });
    if (validateStoragePool) {
        getDataCenter().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    if (validateCpu) {
        getCPU().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getCPU().validateSelectedItem(new IValidation[] {});
    }
    if (validateCustomProperties) {
        getCustomPropertySheet().setIsValid(getCustomPropertySheet().validate());
    }
    getVersion().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    // TODO: async validation for webadmin
    // string name = (string)Name.Entity;
    // //Check name unicitate.
    // if (String.Compare(name, OriginalName, true) != 0 && !DataProvider.IsClusterNameUnique(name))
    // {
    // Name.IsValid = false;
    // Name.InvalidityReasons.Add("Name must be unique.");
    // }
    boolean validService = true;
    if (getEnableOvirtService().getIsAvailable() && getEnableGlusterService().getIsAvailable()) {
        validService = ((Boolean) getEnableOvirtService().getEntity()) || ((Boolean) getEnableGlusterService().getEntity());
    }
    getGlusterHostAddress().validateEntity(new IValidation[] { new NotEmptyValidation() });
    getGlusterHostPassword().validateEntity(new IValidation[] { new NotEmptyValidation() });
    if (!validService) {
        setMessage(ConstantsManager.getInstance().getConstants().clusterServiceValidationMsg());
    } else if (((Boolean) getIsImportGlusterConfiguration().getEntity()) && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && !isFingerprintVerified()) {
        setMessage(ConstantsManager.getInstance().getConstants().fingerprintNotVerified());
    } else {
        setMessage(null);
    }
    setIsGeneralTabValid(getName().getIsValid() && getDataCenter().getIsValid() && getCPU().getIsValid() && getVersion().getIsValid() && validService && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && ((Boolean) getIsImportGlusterConfiguration().getEntity() ? (getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && isFingerprintVerified()) : true));
    return getName().getIsValid() && getDataCenter().getIsValid() && getCPU().getIsValid() && getVersion().getIsValid() && validService && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && ((Boolean) getIsImportGlusterConfiguration().getEntity() ? (getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && isFingerprintVerified()) : true) && getCustomPropertySheet().getIsValid();
}
#method_after
public boolean validate(boolean validateStoragePool, boolean validateCpu, boolean validateCustomProperties) {
    getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation(40), new I18NNameValidation() });
    if (validateStoragePool) {
        getDataCenter().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    if (validateCpu) {
        getCPU().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getCPU().validateSelectedItem(new IValidation[] {});
    }
    if (validateCustomProperties) {
        getCustomPropertySheet().setIsValid(getCustomPropertySheet().validate());
    }
    getVersion().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    // TODO: async validation for webadmin
    // string name = (string)Name.Entity;
    // //Check name unicitate.
    // if (String.Compare(name, OriginalName, true) != 0 && !DataProvider.IsClusterNameUnique(name))
    // {
    // Name.IsValid = false;
    // Name.InvalidityReasons.Add("Name must be unique.");
    // }
    boolean validService = true;
    if (getEnableOvirtService().getIsAvailable() && getEnableGlusterService().getIsAvailable()) {
        validService = getEnableOvirtService().getEntity() || getEnableGlusterService().getEntity();
    }
    getGlusterHostAddress().validateEntity(new IValidation[] { new NotEmptyValidation() });
    getGlusterHostPassword().validateEntity(new IValidation[] { new NotEmptyValidation() });
    if (!validService) {
        setMessage(ConstantsManager.getInstance().getConstants().clusterServiceValidationMsg());
    } else if (getIsImportGlusterConfiguration().getEntity() && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && !isFingerprintVerified()) {
        setMessage(ConstantsManager.getInstance().getConstants().fingerprintNotVerified());
    } else {
        setMessage(null);
    }
    setIsGeneralTabValid(getName().getIsValid() && getDataCenter().getIsValid() && getCPU().getIsValid() && getVersion().getIsValid() && validService && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && (getIsImportGlusterConfiguration().getEntity() ? (getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && isFingerprintVerified()) : true));
    return getName().getIsValid() && getDataCenter().getIsValid() && getCPU().getIsValid() && getVersion().getIsValid() && validService && getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && (getIsImportGlusterConfiguration().getEntity() ? (getGlusterHostAddress().getIsValid() && getGlusterHostPassword().getIsValid() && isFingerprintVerified()) : true) && getCustomPropertySheet().getIsValid();
}
#end_block

#method_before
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.RunQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#method_after
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#end_block

#method_before
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
    initHasSpiceSupport();
}
#method_after
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
    initDisplayTypes();
    initNicHotplugSupportMap();
    initDiskHotpluggableInterfacesMap();
    initOsArchitecture();
}
#end_block

#method_before
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#method_after
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#end_block

#method_before
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#method_after
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#end_block

#method_before
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#method_after
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#end_block

#method_before
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#method_after
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#end_block

#method_before
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#method_after
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#end_block

#method_before
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#method_after
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#end_block

#method_before
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#method_after
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#end_block

#method_before
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void isVirtioScsiEnabledForVm(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<VmDevice>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVirtioScsiControllers, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void isVirtioScsiEnabledForVm(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<VmDevice>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVirtioScsiControllers, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#method_after
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#end_block

#method_before
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.RunQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#method_after
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#end_block

#method_before
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#method_after
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#end_block

#method_before
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#method_after
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#end_block

#method_before
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#method_after
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#end_block

#method_before
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#method_after
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#method_after
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#method_after
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#end_block

#method_before
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.Model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.Model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#method_after
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#end_block

#method_before
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.RunQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#method_after
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#end_block

#method_before
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#method_after
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#end_block

#method_before
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#method_after
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#end_block

#method_before
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.RunQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#method_after
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getGlusterRebalanceStatus(AsyncQuery aQuery, Guid clusterId, Guid volumeId) {
    aQuery.converterCallback = new IAsyncConverter<GlusterVolumeTaskStatusEntity>() {

        @Override
        public GlusterVolumeTaskStatusEntity Convert(Object source, AsyncQuery _asyncQuery) {
            return (GlusterVolumeTaskStatusEntity) source;
        }
    };
    GlusterVolumeQueriesParameters parameters = new GlusterVolumeQueriesParameters(clusterId, volumeId);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeRebalanceStatus, parameters, aQuery);
}
#method_after
public static void getGlusterRebalanceStatus(AsyncQuery aQuery, Guid clusterId, Guid volumeId) {
    aQuery.setHandleFailure(true);
    GlusterVolumeQueriesParameters parameters = new GlusterVolumeQueriesParameters(clusterId, volumeId);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeRebalanceStatus, parameters, aQuery);
}
#end_block

#method_before
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#method_after
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#end_block

#method_before
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<permissions>) source : new ArrayList<permissions>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#method_after
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Permissions>) source : new ArrayList<Permissions>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#end_block

#method_before
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#method_after
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#end_block

#method_before
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#method_after
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#end_block

#method_before
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.RunQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#method_after
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#end_block

#method_before
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#method_after
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#end_block

#method_before
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#method_after
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#end_block

#method_before
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#method_after
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#end_block

#method_before
public static void getPmOptions(AsyncQuery aQuery, String pmType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.Data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.RunQuery(VdcQueryType.GetAgentFenceOptions, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getPmOptions(AsyncQuery aQuery, String pmType, String version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.Data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.getInstance().runQuery(VdcQueryType.GetAgentFenceOptions, new GetAgentFenceOptionsQueryParameters(version), aQuery);
}
#end_block

#method_before
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.RunQuery(VdcQueryType.Search, sp, aQuery);
}
#method_after
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#end_block

#method_before
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#method_after
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#end_block

#method_before
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#method_after
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#end_block

#method_before
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#method_after
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#end_block

#method_before
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                tags tag = (tags) source;
                tags root = new tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new tags();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                Tags tag = (Tags) source;
                Tags root = new Tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new Tags();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<tags> ret = new ArrayList<tags>();
                for (tags tags : (ArrayList<tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new tags();
        }
    };
}
#method_after
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<Tags> ret = new ArrayList<Tags>();
                for (Tags tags : (ArrayList<Tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new Tags();
        }
    };
}
#end_block

#method_before
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#method_after
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#end_block

#method_before
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.RunQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#method_after
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.getInstance().runQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#end_block

#method_before
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#method_after
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.getInstance().runQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#end_block

#method_before
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#method_after
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#end_block

#method_before
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#method_after
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#end_block

#method_before
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#end_block

#method_before
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#method_after
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#end_block

#method_before
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.RunQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#method_after
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#end_block

#method_before
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#method_after
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#end_block

#method_before
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.RunQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#method_after
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.getInstance().runQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#end_block

#method_before
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#method_after
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.RunMultipleQueries(queryTypeList, parametersList, callback);
}
#method_after
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.getInstance().runMultipleQueries(queryTypeList, parametersList, callback);
}
#end_block

#method_before
public static void fillTagsRecursive(tags tagToFill, List<tags> children) {
    ArrayList<tags> list = new ArrayList<tags>();
    for (tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#method_after
public static void fillTagsRecursive(Tags tagToFill, List<Tags> children) {
    ArrayList<Tags> list = new ArrayList<Tags>();
    for (Tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#end_block

#method_before
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.GetNotificationEvents();
}
#method_after
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.getNotificationEvents();
}
#end_block

#method_before
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#method_after
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#end_block

#method_before
public static ArrayList<DiskInterface> getDiskInterfaceList(Version clusterVersion) {
    ArrayList<DiskInterface> diskInterfaces = new ArrayList<DiskInterface>(Arrays.asList(new DiskInterface[] { DiskInterface.IDE, DiskInterface.VirtIO }));
    boolean isVirtIOScsiEnabled = clusterVersion != null ? (Boolean) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VirtIoScsiEnabled, clusterVersion.getValue()) : true;
    if (isVirtIOScsiEnabled) {
        diskInterfaces.add(DiskInterface.VirtIO_SCSI);
    }
    return diskInterfaces;
}
#method_after
public static void getDiskInterfaceList(int osId, Version clusterVersion, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> interfaces = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<DiskInterface> interfaceTypes = new ArrayList<DiskInterface>();
            for (String diskIfs : interfaces) {
                try {
                    interfaceTypes.add(DiskInterface.valueOf(diskIfs));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetDiskInterfaces, osId, clusterVersion), asyncQuery);
}
#end_block

#method_before
public static String getNewNicName(ArrayList<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#method_after
public static String getNewNicName(List<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#end_block

#method_before
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#method_after
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#end_block

#method_before
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#method_after
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#end_block

#method_before
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#method_after
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            // Initialize specific UI dependencies for search
            SimpleDependecyInjector.getInstance().bind(new OsValueAutoCompleter(uniqueOsNames));
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#end_block

#method_before
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#method_after
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#end_block

#method_before
public static Boolean hasSpiceSupport(int osId, Version version) {
    return spiceSupportMatrix.get(osId).get(version);
}
#method_after
public static boolean hasSpiceSupport(int osId, Version version) {
    return getDisplayTypes(osId, version).contains(DisplayType.qxl);
}
#end_block

#method_before
public static List<Integer> getOsIds() {
    return osIds;
}
#method_after
public static List<Integer> getOsIds(ArchitectureType architectureType) {
    List<Integer> osIds = new ArrayList<Integer>();
    for (Entry<Integer, ArchitectureType> entry : osArchitectures.entrySet()) {
        if (entry.getValue() == architectureType) {
            osIds.add(entry.getKey());
        }
    }
    Collections.sort(osIds, new Comparator<Integer>() {

        @Override
        public int compare(Integer o1, Integer o2) {
            return osNames.get(o1).compareTo(osNames.get(o2));
        }
    });
    return osIds;
}
#end_block

#method_before
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#method_after
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#end_block

#method_before
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#method_after
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#method_after
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#end_block

#method_before
public static Integer getMaxVmNameLengthWin() {
    Integer maxVmNameLengthWindows = (Integer) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MaxVmNameLengthWindows);
    return maxVmNameLengthWindows == null ? 15 : maxVmNameLengthWindows;
}
#method_after
public static Integer getMaxVmNameLengthWin() {
    Integer maxVmNameLengthWindows = (Integer) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MaxVmNameLengthWindows);
    if (maxVmNameLengthWindows == null) {
        return 15;
    }
    return maxVmNameLengthWindows;
}
#end_block

#method_before
public static Integer getMaxVmNameLengthNonWin() {
    Integer maxVmNameLengthNonWindows = (Integer) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MaxVmNameLengthNonWindows);
    return maxVmNameLengthNonWindows == null ? 64 : maxVmNameLengthNonWindows;
}
#method_after
public static Integer getMaxVmNameLengthNonWin() {
    Integer maxVmNameLengthNonWindows = (Integer) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MaxVmNameLengthNonWindows);
    if (maxVmNameLengthNonWindows == null) {
        return 64;
    }
    return maxVmNameLengthNonWindows;
}
#end_block

#method_before
public static int getOptimizeSchedulerForSpeedPendingRequests() {
    return (Integer) getConfigValuePreConverted(ConfigurationValues.OptimizeSchedulerForSpeedPendingRequests, getDefaultConfigurationVersion());
}
#method_after
public static int getOptimizeSchedulerForSpeedPendingRequests() {
    return (Integer) getConfigValuePreConverted(ConfigurationValues.SpeedOptimizationSchedulingThreshold, getDefaultConfigurationVersion());
}
#end_block

#method_before
private void addStyles() {
    importGlusterConfigurationEditor.addContentWidgetStyleName(style.editorContentWidget());
    migrateOnErrorOption_NOEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_YESEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_HA_ONLYEditor.addContentWidgetStyleName(style.label());
    optimizationNoneEditor.setContentWidgetStyleName(style.fullWidth());
    optimizationForServerEditor.setContentWidgetStyleName(style.fullWidth());
    optimizationForDesktopEditor.setContentWidgetStyleName(style.fullWidth());
    optimizationCustomEditor.setContentWidgetStyleName(style.fullWidth());
    countThreadsAsCoresEditor.setContentWidgetStyleName(style.fullWidth());
    enableTrustedServiceEditor.setContentWidgetStyleName(style.fullWidth());
}
#method_after
private void addStyles() {
    importGlusterConfigurationEditor.addContentWidgetStyleName(style.editorContentWidget());
    migrateOnErrorOption_NOEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_YESEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_HA_ONLYEditor.addContentWidgetStyleName(style.label());
    countThreadsAsCoresEditor.setContentWidgetStyleName(style.fullWidth());
    enableTrustedServiceEditor.setContentWidgetStyleName(style.fullWidth());
}
#end_block

#method_before
private void localize(ApplicationConstants constants) {
    generalTab.setLabel(constants.clusterPopupGeneralTabLabel());
    dataCenterEditor.setLabel(constants.clusterPopupDataCenterLabel());
    nameEditor.setLabel(constants.clusterPopupNameLabel());
    descriptionEditor.setLabel(constants.clusterPopupDescriptionLabel());
    commentEditor.setLabel(constants.commentLabel());
    cPUEditor.setLabel(constants.clusterPopupCPULabel());
    versionEditor.setLabel(constants.clusterPopupVersionLabel());
    enableOvirtServiceEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    enableOvirtServiceOptionEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceOptionEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    importGlusterConfigurationEditor.setLabel(constants.clusterImportGlusterConfigurationLabel());
    importGlusterExplanationLabel.setText(constants.clusterImportGlusterConfigurationExplanationLabel());
    glusterHostAddressEditor.setLabel(constants.hostPopupHostAddressLabel());
    glusterHostFingerprintEditor.setLabel(constants.hostPopupHostFingerprintLabel());
    glusterHostPasswordEditor.setLabel(constants.hostPopupPasswordLabel());
    optimizationTab.setLabel(constants.clusterPopupOptimizationTabLabel());
    memoryOptimizationPanelTitle.setText(constants.clusterPopupMemoryOptimizationPanelTitle());
    optimizationNoneEditor.setLabel(constants.clusterPopupOptimizationNoneLabel());
    cpuThreadsPanelTitle.setText(constants.clusterPopupCpuThreadsPanelTitle());
    countThreadsAsCoresEditor.setLabel(constants.clusterPopupCountThreadsAsCoresLabel());
    resiliencePolicyTab.setLabel(constants.clusterPopupResiliencePolicyTabLabel());
    migrateOnErrorOption_YESEditor.setLabel(constants.clusterPopupMigrateOnError_YesLabel());
    migrateOnErrorOption_HA_ONLYEditor.setLabel(constants.clusterPopupMigrateOnError_HaLabel());
    migrateOnErrorOption_NOEditor.setLabel(constants.clusterPopupMigrateOnError_NoLabel());
    clusterPolicyTab.setLabel(constants.clusterPopupClusterPolicyTabLabel());
    additionPropsPanelTitle.setText(constants.clusterPolicyAdditionalPropsPanelTitle());
    enableTrustedServiceEditor.setLabel(constants.clusterPolicyEnableTrustedServiceLabel());
    clusterPolicyEditor.setLabel(constants.clusterPolicySelectPolicyLabel());
    enableBallooning.setLabel(constants.enableBallooningLabel());
    schedulerOptimizationPanelTitle.setText(constants.schedulerOptimizationPanelLabel());
    optimizeForUtilizationEditor.setLabel(constants.optimizeForUtilizationLabel());
    optimizeForSpeedEditor.setLabel(constants.optimizeForSpeedLabel());
}
#method_after
private void localize(ApplicationConstants constants) {
    generalTab.setLabel(constants.clusterPopupGeneralTabLabel());
    dataCenterEditor.setLabel(constants.clusterPopupDataCenterLabel());
    nameEditor.setLabel(constants.clusterPopupNameLabel());
    descriptionEditor.setLabel(constants.clusterPopupDescriptionLabel());
    commentEditor.setLabel(constants.commentLabel());
    cPUEditor.setLabel(constants.clusterPopupCPULabel());
    architectureEditor.setLabel(constants.clusterPopupArchitectureLabel());
    versionEditor.setLabel(constants.clusterPopupVersionLabel());
    enableOvirtServiceEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    enableOvirtServiceOptionEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceOptionEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    importGlusterConfigurationEditor.setLabel(constants.clusterImportGlusterConfigurationLabel());
    importGlusterExplanationLabel.setText(constants.clusterImportGlusterConfigurationExplanationLabel());
    glusterHostAddressEditor.setLabel(constants.hostPopupHostAddressLabel());
    glusterHostFingerprintEditor.setLabel(constants.hostPopupHostFingerprintLabel());
    glusterHostPasswordEditor.setLabel(constants.hostPopupPasswordLabel());
    optimizationTab.setLabel(constants.clusterPopupOptimizationTabLabel());
    memoryOptimizationPanelTitle.setText(constants.clusterPopupMemoryOptimizationPanelTitle());
    optimizationNoneEditor.asRadioButton().setHTML(templates.radioButtonLabel(constants.clusterPopupOptimizationNoneLabel()));
    cpuThreadsPanelTitle.setText(constants.clusterPopupCpuThreadsPanelTitle());
    countThreadsAsCoresEditor.setLabel(constants.clusterPopupCountThreadsAsCoresLabel());
    resiliencePolicyTab.setLabel(constants.clusterPopupResiliencePolicyTabLabel());
    migrateOnErrorOption_YESEditor.setLabel(constants.clusterPopupMigrateOnError_YesLabel());
    migrateOnErrorOption_HA_ONLYEditor.setLabel(constants.clusterPopupMigrateOnError_HaLabel());
    migrateOnErrorOption_NOEditor.setLabel(constants.clusterPopupMigrateOnError_NoLabel());
    clusterPolicyTab.setLabel(constants.clusterPopupClusterPolicyTabLabel());
    additionPropsPanelTitle.setText(constants.clusterPolicyAdditionalPropsPanelTitle());
    enableTrustedServiceEditor.setLabel(constants.clusterPolicyEnableTrustedServiceLabel());
    clusterPolicyEditor.setLabel(constants.clusterPolicySelectPolicyLabel());
    enableBallooning.setLabel(constants.enableBallooningLabel());
    schedulerOptimizationPanelTitle.setText(constants.schedulerOptimizationPanelLabel());
    optimizeForUtilizationEditor.setLabel(constants.optimizeForUtilizationLabel());
    optimizeForSpeedEditor.setLabel(constants.optimizeForSpeedLabel());
}
#end_block

#method_before
private void initListBoxEditors() {
    dataCenterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((StoragePool) object).getName();
        }
    });
    cPUEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((ServerCpu) object).getCpuName();
        }
    });
    versionEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Version) object).toString();
        }
    });
    clusterPolicyEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((ClusterPolicy) object).getName();
        }
    });
}
#method_after
private void initListBoxEditors() {
    dataCenterEditor = new ListModelListBoxEditor<StoragePool>(new NullSafeRenderer<StoragePool>() {

        @Override
        public String renderNullSafe(StoragePool object) {
            return object.getName();
        }
    });
    cPUEditor = new ListModelListBoxEditor<ServerCpu>(new NullSafeRenderer<ServerCpu>() {

        @Override
        public String renderNullSafe(ServerCpu object) {
            return object.getCpuName();
        }
    });
    versionEditor = new ListModelListBoxEditor<Version>(new NullSafeRenderer<Version>() {

        @Override
        public String renderNullSafe(Version object) {
            return object.toString();
        }
    });
    architectureEditor = new ListModelListBoxEditor<ArchitectureType>(new NullSafeRenderer<ArchitectureType>() {

        @Override
        public String renderNullSafe(ArchitectureType object) {
            return object.toString();
        }
    });
    clusterPolicyEditor = new ListModelListBoxEditor<ClusterPolicy>(new NullSafeRenderer<ClusterPolicy>() {

        @Override
        public String renderNullSafe(ClusterPolicy object) {
            return object.getName();
        }
    });
}
#end_block

#method_before
@Override
public void edit(final ClusterModel object) {
    driver.edit(object);
    servicesCheckboxPanel.setVisible(object.getAllowClusterWithVirtGlusterEnabled());
    servicesRadioPanel.setVisible(!object.getAllowClusterWithVirtGlusterEnabled());
    optimizationForServerFormatter(object);
    optimizationForDesktopFormatter(object);
    optimizationCustomFormatter(object);
    object.getOptimizationForServer().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            optimizationForServerFormatter(object);
        }
    });
    object.getOptimizationForDesktop().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            optimizationForDesktopFormatter(object);
        }
    });
    object.getOptimizationCustom_IsSelected().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if ((Boolean) object.getOptimizationCustom_IsSelected().getEntity()) {
                optimizationCustomFormatter(object);
                optimizationCustomEditor.setVisible(true);
            }
        }
    });
    object.getDataCenter().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            resiliencePolicyTab.setVisible(object.getisResiliencePolicyTabAvailable());
            applyModeCustomizations();
        }
    });
    object.getEnableGlusterService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            importGlusterExplanationLabel.setVisible((Boolean) object.getEnableGlusterService().getEntity() && object.getIsNew());
        }
    });
    importGlusterExplanationLabel.setVisible((Boolean) object.getEnableGlusterService().getEntity() && object.getIsNew());
    object.getVersionSupportsCpuThreads().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            cpuThreadsPanel.setVisible((Boolean) object.getVersionSupportsCpuThreads().getEntity());
        }
    });
    object.getCustomPropertySheet().getKeyValueLines().getItemsChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            customPropertiesSheetEditor.edit(object.getCustomPropertySheet());
        }
    });
    schedulerOptimizationInfoIcon.setText(SafeHtmlUtils.fromTrustedString(// $NON-NLS-1$
    templates.italicFixedWidth(// $NON-NLS-1$
    "350px", object.getSchedulerOptimizationInfoMessage()).asString().replaceAll("(\r\n|\n)", // $NON-NLS-1$ //$NON-NLS-2$
    "<br />")));
}
#method_after
@Override
public void edit(final ClusterModel object) {
    driver.edit(object);
    servicesCheckboxPanel.setVisible(object.getAllowClusterWithVirtGlusterEnabled());
    servicesRadioPanel.setVisible(!object.getAllowClusterWithVirtGlusterEnabled());
    optimizationForServerFormatter(object);
    optimizationForDesktopFormatter(object);
    optimizationCustomFormatter(object);
    object.getOptimizationForServer().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            optimizationForServerFormatter(object);
        }
    });
    object.getOptimizationForDesktop().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            optimizationForDesktopFormatter(object);
        }
    });
    object.getOptimizationCustom_IsSelected().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (object.getOptimizationCustom_IsSelected().getEntity()) {
                optimizationCustomFormatter(object);
                optimizationCustomEditor.setVisible(true);
            }
        }
    });
    object.getDataCenter().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            resiliencePolicyTab.setVisible(object.getisResiliencePolicyTabAvailable());
            applyModeCustomizations();
        }
    });
    object.getEnableGlusterService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            importGlusterExplanationLabel.setVisible(object.getEnableGlusterService().getEntity() && object.getIsNew());
        }
    });
    importGlusterExplanationLabel.setVisible(object.getEnableGlusterService().getEntity() && object.getIsNew());
    object.getCPU().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isCpuNameBlank = object.getCPU().getSelectedItem() == null;
            architectureEditor.setVisible(isCpuNameBlank);
        }
    });
    object.getVersionSupportsCpuThreads().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            cpuThreadsPanel.setVisible(object.getVersionSupportsCpuThreads().getEntity());
        }
    });
    object.getCustomPropertySheet().getKeyValueLines().getItemsChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            customPropertiesSheetEditor.edit(object.getCustomPropertySheet());
        }
    });
    schedulerOptimizationInfoIcon.setText(SafeHtmlUtils.fromTrustedString(// $NON-NLS-1$
    templates.italicFixedWidth(// $NON-NLS-1$
    "350px", object.getSchedulerOptimizationInfoMessage()).asString().replaceAll("(\r\n|\n)", // $NON-NLS-1$ //$NON-NLS-2$
    "<br />")));
}
#end_block

#method_before
private void optimizationForServerFormatter(ClusterModel object) {
    if (object.getOptimizationForServer() != null && object.getOptimizationForServer().getEntity() != null) {
        optimizationForServerEditor.setLabel(messages.clusterPopupMemoryOptimizationForServerLabel(object.getOptimizationForServer().getEntity().toString()));
    }
}
#method_after
private void optimizationForServerFormatter(ClusterModel object) {
    if (object.getOptimizationForServer() != null && object.getOptimizationForServer().getEntity() != null) {
        optimizationForServerEditor.asRadioButton().setHTML(templates.radioButtonLabel(messages.clusterPopupMemoryOptimizationForServerLabel(object.getOptimizationForServer().getEntity().toString())));
    }
}
#end_block

#method_before
private void optimizationForDesktopFormatter(ClusterModel object) {
    if (object.getOptimizationForDesktop() != null && object.getOptimizationForDesktop().getEntity() != null) {
        optimizationForDesktopEditor.setLabel(messages.clusterPopupMemoryOptimizationForDesktopLabel(object.getOptimizationForDesktop().getEntity().toString()));
    }
}
#method_after
private void optimizationForDesktopFormatter(ClusterModel object) {
    if (object.getOptimizationForDesktop() != null && object.getOptimizationForDesktop().getEntity() != null) {
        optimizationForDesktopEditor.asRadioButton().setHTML(templates.radioButtonLabel(messages.clusterPopupMemoryOptimizationForDesktopLabel(object.getOptimizationForDesktop().getEntity().toString())));
    }
}
#end_block

#method_before
private void optimizationCustomFormatter(ClusterModel object) {
    if (object.getOptimizationCustom() != null && object.getOptimizationCustom().getEntity() != null) {
        // Use current value because object.getOptimizationCustom.getEntity() can be null
        optimizationCustomEditor.setLabel(messages.clusterPopupMemoryOptimizationCustomLabel(String.valueOf(object.getMemoryOverCommit())));
    }
}
#method_after
private void optimizationCustomFormatter(ClusterModel object) {
    if (object.getOptimizationCustom() != null && object.getOptimizationCustom().getEntity() != null) {
        // Use current value because object.getOptimizationCustom.getEntity() can be null
        optimizationCustomEditor.asRadioButton().setHTML(templates.radioButtonLabel(messages.clusterPopupMemoryOptimizationCustomLabel(String.valueOf(object.getMemoryOverCommit()))));
    }
}
#end_block

#method_before
@Override
public VDSGroup getByName(String name) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_group_name", name);
    return (VDSGroup) DbFacadeUtils.asSingleResult(getCallsHandler().executeReadList("GetVdsGroupByVdsGroupName", VdsGroupRowMapper.instance, parameterSource));
}
#method_after
@Override
public VDSGroup getByName(String name) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_group_name", name).addValue("is_case_sensitive", true);
    return (VDSGroup) DbFacadeUtils.asSingleResult(getCallsHandler().executeReadList("GetVdsGroupByVdsGroupName", VdsGroupRowMapper.instance, parameterSource));
}
#end_block

#method_before
@Override
public VDSGroup getByName(String name, Guid userID, boolean isFiltered) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_group_name", name).addValue("user_id", userID).addValue("is_filtered", isFiltered);
    return (VDSGroup) DbFacadeUtils.asSingleResult(getCallsHandler().executeReadList("GetVdsGroupForUserByVdsGroupName", VdsGroupRowMapper.instance, parameterSource));
}
#method_after
@Override
public List<VDSGroup> getByName(String name, boolean isCaseSensitive) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_group_name", name).addValue("is_case_sensitive", isCaseSensitive);
    return getCallsHandler().executeReadList("GetVdsGroupByVdsGroupName", VdsGroupRowMapper.instance, parameterSource);
}
#end_block

#method_before
private MapSqlParameterSource getVdsGroupParamSource(VDSGroup group) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", group.getdescription()).addValue("name", group.getName()).addValue("free_text_comment", group.getComment()).addValue("vds_group_id", group.getId()).addValue("cpu_name", group.getcpu_name()).addValue("storage_pool_id", group.getStoragePoolId()).addValue("max_vds_memory_over_commit", group.getmax_vds_memory_over_commit()).addValue("count_threads_as_cores", group.getCountThreadsAsCores()).addValue("transparent_hugepages", group.getTransparentHugepages()).addValue("compatibility_version", group.getcompatibility_version()).addValue("migrate_on_error", group.getMigrateOnError()).addValue("virt_service", group.supportsVirtService()).addValue("gluster_service", group.supportsGlusterService()).addValue("tunnel_migration", group.isTunnelMigration()).addValue("emulated_machine", group.getEmulatedMachine()).addValue("detect_emulated_machine", group.isDetectEmulatedMachine()).addValue("trusted_service", group.supportsTrustedService()).addValue("cluster_policy_id", group.getClusterPolicyId()).addValue("cluster_policy_custom_properties", SerializationFactory.getSerializer().serialize(group.getClusterPolicyProperties())).addValue("enable_balloon", group.isEnableBallooning()).addValue("optimize_for_speed", group.isSchedulerOptimizeForSpeed());
    return parameterSource;
}
#method_after
private MapSqlParameterSource getVdsGroupParamSource(VDSGroup group) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", group.getdescription()).addValue("name", group.getName()).addValue("free_text_comment", group.getComment()).addValue("vds_group_id", group.getId()).addValue("cpu_name", group.getcpu_name()).addValue("storage_pool_id", group.getStoragePoolId()).addValue("max_vds_memory_over_commit", group.getmax_vds_memory_over_commit()).addValue("count_threads_as_cores", group.getCountThreadsAsCores()).addValue("transparent_hugepages", group.getTransparentHugepages()).addValue("compatibility_version", group.getcompatibility_version()).addValue("migrate_on_error", group.getMigrateOnError()).addValue("virt_service", group.supportsVirtService()).addValue("gluster_service", group.supportsGlusterService()).addValue("tunnel_migration", group.isTunnelMigration()).addValue("emulated_machine", group.getEmulatedMachine()).addValue("detect_emulated_machine", group.isDetectEmulatedMachine()).addValue("trusted_service", group.supportsTrustedService()).addValue("cluster_policy_id", group.getClusterPolicyId()).addValue("cluster_policy_custom_properties", SerializationFactory.getSerializer().serialize(group.getClusterPolicyProperties())).addValue("architecture", group.getArchitecture()).addValue("enable_balloon", group.isEnableBallooning()).addValue("optimization_type", group.getOptimizationType());
    return parameterSource;
}
#end_block

#method_before
@Override
public VDSGroup mapRow(ResultSet rs, int rowNum) throws SQLException {
    VDSGroup entity = new VDSGroup();
    entity.setdescription(rs.getString("description"));
    entity.setName(rs.getString("name"));
    entity.setId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setComment(rs.getString("free_text_comment"));
    entity.setcpu_name(rs.getString("cpu_name"));
    entity.setStoragePoolId(getGuid(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setmax_vds_memory_over_commit(rs.getInt("max_vds_memory_over_commit"));
    entity.setCountThreadsAsCores(rs.getBoolean("count_threads_as_cores"));
    entity.setTransparentHugepages(rs.getBoolean("transparent_hugepages"));
    entity.setcompatibility_version(new Version(rs.getString("compatibility_version")));
    entity.setMigrateOnError(MigrateOnErrorOptions.forValue(rs.getInt("migrate_on_error")));
    entity.setVirtService(rs.getBoolean("virt_service"));
    entity.setGlusterService(rs.getBoolean("gluster_service"));
    entity.setTunnelMigration(rs.getBoolean("tunnel_migration"));
    entity.setEmulatedMachine(rs.getString("emulated_machine"));
    entity.setDetectEmulatedMachine(rs.getBoolean("detect_emulated_machine"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setClusterPolicyId(Guid.createGuidFromString(rs.getString("cluster_policy_id")));
    entity.setClusterPolicyName(rs.getString("cluster_policy_name"));
    entity.setClusterPolicyProperties(SerializationFactory.getDeserializer().deserializeOrCreateNew(rs.getString("cluster_policy_custom_properties"), LinkedHashMap.class));
    entity.setEnableBallooning(rs.getBoolean("enable_balloon"));
    entity.setSchedulerOptimizeForSpeed(rs.getBoolean("optimize_for_speed"));
    return entity;
}
#method_after
@Override
public VDSGroup mapRow(ResultSet rs, int rowNum) throws SQLException {
    VDSGroup entity = new VDSGroup();
    entity.setdescription(rs.getString("description"));
    entity.setName(rs.getString("name"));
    entity.setId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setComment(rs.getString("free_text_comment"));
    entity.setcpu_name(rs.getString("cpu_name"));
    entity.setStoragePoolId(getGuid(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setmax_vds_memory_over_commit(rs.getInt("max_vds_memory_over_commit"));
    entity.setCountThreadsAsCores(rs.getBoolean("count_threads_as_cores"));
    entity.setTransparentHugepages(rs.getBoolean("transparent_hugepages"));
    entity.setcompatibility_version(new Version(rs.getString("compatibility_version")));
    entity.setMigrateOnError(MigrateOnErrorOptions.forValue(rs.getInt("migrate_on_error")));
    entity.setVirtService(rs.getBoolean("virt_service"));
    entity.setGlusterService(rs.getBoolean("gluster_service"));
    entity.setTunnelMigration(rs.getBoolean("tunnel_migration"));
    entity.setEmulatedMachine(rs.getString("emulated_machine"));
    entity.setDetectEmulatedMachine(rs.getBoolean("detect_emulated_machine"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setClusterPolicyId(Guid.createGuidFromString(rs.getString("cluster_policy_id")));
    entity.setClusterPolicyName(rs.getString("cluster_policy_name"));
    entity.setClusterPolicyProperties(SerializationFactory.getDeserializer().deserializeOrCreateNew(rs.getString("cluster_policy_custom_properties"), LinkedHashMap.class));
    entity.setEnableBallooning(rs.getBoolean("enable_balloon"));
    entity.setArchitecture(ArchitectureType.forValue(rs.getInt("architecture")));
    entity.setOptimizationType(OptimizationType.from(rs.getInt("optimization_type")));
    return entity;
}
#end_block

#method_before
public static SchedulingManager getInstance() {
    if (instance == null) {
        synchronized (SchedulingManager.class) {
            if (instance == null) {
                instance = new SchedulingManager();
                EnableLoadBalancer();
            }
        }
    }
    return instance;
}
#method_after
public static SchedulingManager getInstance() {
    if (instance == null) {
        synchronized (SchedulingManager.class) {
            if (instance == null) {
                instance = new SchedulingManager();
                enableLoadBalancer();
            }
        }
    }
    return instance;
}
#end_block

#method_before
public void init() {
    log.info("Initializing Scheduling manager");
    loadPolicyUnits();
    loadClusterPolicies();
    if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled)) {
        log.info("Starting external scheduler dicovery thread");
        ExternalSchedulerDiscoveryThread discoveryThread = new ExternalSchedulerDiscoveryThread();
        discoveryThread.start();
    } else {
        log.info("External scheduler disabled, discovery skipped");
    }
    log.info("Initialized Scheduling manager");
}
#method_after
public void init() {
    log.info("Initializing Scheduling manager");
    loadPolicyUnits();
    loadClusterPolicies();
    ExternalSchedulerDiscoveryThread discoveryThread = new ExternalSchedulerDiscoveryThread();
    if (Config.<Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) {
        log.info("Starting external scheduler dicovery thread");
        discoveryThread.start();
    } else {
        discoveryThread.markAllExternalPoliciesAsDisabled();
        log.info("External scheduler disabled, discovery skipped");
    }
    log.info("Initialized Scheduling manager");
}
#end_block

#method_before
public Guid schedule(VDSGroup cluster, VM vm, List<Guid> hostBlackList, List<Guid> hostWhiteList, Guid destHostId, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    clusterLockMap.putIfAbsent(cluster.getId(), new Semaphore(1));
    try {
        clusterLockMap.get(cluster.getId()).acquire();
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
        updateInitialHostList(vdsList, hostBlackList, true);
        updateInitialHostList(vdsList, hostWhiteList, false);
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        Map<String, String> parameters = createClusterPolicyParameters(cluster);
        if (destHostId != null) {
            if (checkDestinationHost(vm, vdsList, destHostId, messages, policy, parameters, memoryChecker)) {
                return destHostId;
            } else if (vm.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
                return null;
            }
        }
        vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, memoryChecker);
        if (vdsList == null || vdsList.size() == 0) {
            return null;
        }
        if (policy.getFunctions() == null || policy.getFunctions().isEmpty()) {
            return vdsList.get(0).getId();
        }
        Guid bestHost = vdsList.get(0).getId();
        // is true and there are more than configurable requests pending skip weighing
        if (vdsList.size() > 1 && (!cluster.isSchedulerOptimizeForSpeed() || clusterLockMap.get(cluster.getId()).getQueueLength() <= Config.<Integer>GetValue(ConfigValues.OptimizeSchedulerForSpeedPendingRequests))) {
            bestHost = runFunctions(policy.getFunctions(), vdsList, vm, parameters);
        }
        if (bestHost != null) {
            getVdsDynamicDao().updatePartialVdsDynamicCalc(bestHost, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), vm.getVmMemSizeMb(), vm.getNumOfCpus());
        }
        return bestHost;
    } catch (InterruptedException e) {
        // ignore
        return null;
    } finally {
        clusterLockMap.get(cluster.getId()).release();
    }
}
#method_after
public Guid schedule(VDSGroup cluster, VM vm, List<Guid> hostBlackList, List<Guid> hostWhiteList, Guid destHostId, List<String> messages, VdsFreeMemoryChecker memoryChecker, String correlationId) {
    clusterLockMap.putIfAbsent(cluster.getId(), new Semaphore(1));
    try {
        clusterLockMap.get(cluster.getId()).acquire();
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
        updateInitialHostList(vdsList, hostBlackList, true);
        updateInitialHostList(vdsList, hostWhiteList, false);
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        Map<String, String> parameters = createClusterPolicyParameters(cluster);
        vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, memoryChecker, true, correlationId);
        if (vdsList == null || vdsList.size() == 0) {
            return null;
        }
        // it passed filters return it
        if (destHostId != null) {
            for (VDS vds : vdsList) {
                if (destHostId.equals(vds.getId())) {
                    return destHostId;
                }
            }
        }
        if (policy.getFunctions() == null || policy.getFunctions().isEmpty()) {
            return vdsList.get(0).getId();
        }
        Guid bestHost = null;
        if (shouldWeighClusterHosts(cluster, vdsList)) {
            bestHost = runFunctions(policy.getFunctions(), vdsList, vm, parameters);
        }
        if (bestHost == null && vdsList.size() > 0) {
            bestHost = vdsList.get(0).getId();
        }
        if (bestHost != null) {
            getVdsDynamicDao().updatePartialVdsDynamicCalc(bestHost, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), 0, 0);
        }
        return bestHost;
    } catch (InterruptedException e) {
        log.error("interrupted", e);
        return null;
    } finally {
        clusterLockMap.get(cluster.getId()).release();
    }
}
#end_block

#method_before
public boolean canSchedule(VDSGroup cluster, VM vm, List<Guid> vdsBlackList, List<Guid> vdsWhiteList, Guid destVdsId, List<String> messages) {
    List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
    updateInitialHostList(vdsList, vdsBlackList, true);
    updateInitialHostList(vdsList, vdsWhiteList, false);
    ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
    Map<String, String> parameters = createClusterPolicyParameters(cluster);
    if (destVdsId != null) {
        if (checkDestinationHost(vm, vdsList, destVdsId, messages, policy, parameters, noWaitingMemoryChecker)) {
            return true;
        } else if (vm.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
            return false;
        }
    }
    vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingMemoryChecker);
    if (vdsList == null || vdsList.size() == 0) {
        return false;
    }
    return true;
}
#method_after
public boolean canSchedule(VDSGroup cluster, VM vm, List<Guid> vdsBlackList, List<Guid> vdsWhiteList, Guid destVdsId, List<String> messages) {
    List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
    updateInitialHostList(vdsList, vdsBlackList, true);
    updateInitialHostList(vdsList, vdsWhiteList, false);
    ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
    Map<String, String> parameters = createClusterPolicyParameters(cluster);
    vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingMemoryChecker, false, null);
    if (vdsList == null || vdsList.size() == 0) {
        return false;
    }
    return true;
}
#end_block

#method_before
private List<VDS> runFilters(ArrayList<Guid> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    ArrayList<PolicyUnitImpl> internalFilters = new ArrayList<PolicyUnitImpl>();
    ArrayList<PolicyUnitImpl> externalFilters = new ArrayList<PolicyUnitImpl>();
    sortFilters(filters, filterPositionMap);
    if (filters != null) {
        for (Guid filter : filters) {
            PolicyUnitImpl filterPolicyUnit = policyUnits.get(filter);
            if (filterPolicyUnit.isInternal()) {
                internalFilters.add(filterPolicyUnit);
            } else {
                if (filterPolicyUnit.isEnabled()) {
                    externalFilters.add(filterPolicyUnit);
                }
            }
        }
    }
    hostList = runInternalFilters(internalFilters, hostList, vm, parameters, filterPositionMap, messages, memoryChecker);
    if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled) && externalFilters.size() > 0 && hostList != null && hostList.size() > 0) {
        hostList = runExternalFilters(externalFilters, hostList, vm, parameters, messages);
    }
    return hostList;
}
#method_after
private List<VDS> runFilters(ArrayList<Guid> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker, boolean shouldRunExternalFilters, String correlationId) {
    SchedulingResult result = new SchedulingResult();
    ArrayList<PolicyUnitImpl> internalFilters = new ArrayList<PolicyUnitImpl>();
    ArrayList<PolicyUnitImpl> externalFilters = new ArrayList<PolicyUnitImpl>();
    sortFilters(filters, filterPositionMap);
    if (filters != null) {
        for (Guid filter : filters) {
            PolicyUnitImpl filterPolicyUnit = policyUnits.get(filter);
            if (filterPolicyUnit.isInternal()) {
                internalFilters.add(filterPolicyUnit);
            } else {
                if (filterPolicyUnit.isEnabled()) {
                    externalFilters.add(filterPolicyUnit);
                }
            }
        }
    }
    hostList = runInternalFilters(internalFilters, hostList, vm, parameters, filterPositionMap, messages, memoryChecker, correlationId, result);
    if (shouldRunExternalFilters && Config.<Boolean>getValue(ConfigValues.ExternalSchedulerEnabled) && externalFilters.size() > 0 && hostList != null && hostList.size() > 0) {
        hostList = runExternalFilters(externalFilters, hostList, vm, parameters, messages, correlationId, result);
    }
    if (hostList == null || hostList.size() == 0) {
        messages.add(VdcBllMessages.SCHEDULING_ALL_HOSTS_FILTERED_OUT.name());
        messages.addAll(result.getReasonMessages());
    }
    return hostList;
}
#end_block

#method_before
private List<VDS> runInternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    if (filters != null) {
        for (PolicyUnitImpl filterPolicyUnit : filters) {
            if (hostList == null || hostList.isEmpty()) {
                break;
            }
            filterPolicyUnit.setMemoryChecker(memoryChecker);
            hostList = filterPolicyUnit.filter(hostList, vm, parameters, messages);
        }
    }
    return hostList;
}
#method_after
private List<VDS> runInternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker, String correlationId, SchedulingResult result) {
    if (filters != null) {
        for (PolicyUnitImpl filterPolicyUnit : filters) {
            if (hostList == null || hostList.isEmpty()) {
                break;
            }
            filterPolicyUnit.setMemoryChecker(memoryChecker);
            List<VDS> currentHostList = new ArrayList<VDS>(hostList);
            hostList = filterPolicyUnit.filter(hostList, vm, parameters, messages);
            logFilterActions(currentHostList, toIdSet(hostList), VdcBllMessages.VAR__FILTERTYPE__INTERNAL, filterPolicyUnit.getName(), result, correlationId);
        }
    }
    return hostList;
}
#end_block

#method_before
private List<VDS> runExternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, List<String> messages) {
    List<Guid> filteredIDs = null;
    if (filters != null) {
        List<String> filterNames = new ArrayList<String>();
        for (PolicyUnitImpl filter : filters) {
            filterNames.add(filter.getName());
        }
        List<Guid> hostIDs = new ArrayList<Guid>();
        for (VDS host : hostList) {
            hostIDs.add(host.getId());
        }
        filteredIDs = ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters);
    }
    return intersectHosts(hostList, filteredIDs);
}
#method_after
private List<VDS> runExternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, List<String> messages, String correlationId, SchedulingResult result) {
    List<Guid> filteredIDs = null;
    if (filters != null) {
        List<String> filterNames = new ArrayList<String>();
        for (PolicyUnitImpl filter : filters) {
            filterNames.add(filter.getName());
        }
        List<Guid> hostIDs = new ArrayList<Guid>();
        for (VDS host : hostList) {
            hostIDs.add(host.getId());
        }
        filteredIDs = ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters);
        if (filteredIDs != null) {
            logFilterActions(hostList, new HashSet<Guid>(filteredIDs), VdcBllMessages.VAR__FILTERTYPE__EXTERNAL, Arrays.toString(filterNames.toArray()), result, correlationId);
        }
    }
    return intersectHosts(hostList, filteredIDs);
}
#end_block

#method_before
protected Guid runFunctions(ArrayList<Pair<Guid, Integer>> functions, List<VDS> hostList, VM vm, Map<String, String> parameters) {
    ArrayList<Pair<PolicyUnitImpl, Integer>> internalScoreFunctions = new ArrayList<Pair<PolicyUnitImpl, Integer>>();
    ArrayList<Pair<PolicyUnitImpl, Integer>> externalScoreFunctions = new ArrayList<Pair<PolicyUnitImpl, Integer>>();
    for (Pair<Guid, Integer> pair : functions) {
        PolicyUnitImpl currentPolicy = policyUnits.get(pair.getFirst());
        if (currentPolicy.isInternal()) {
            internalScoreFunctions.add(new Pair<PolicyUnitImpl, Integer>(currentPolicy, pair.getSecond()));
        } else {
            if (currentPolicy.isEnabled()) {
                externalScoreFunctions.add(new Pair<PolicyUnitImpl, Integer>(currentPolicy, pair.getSecond()));
            }
        }
    }
    Map<Guid, Integer> hostCostTable = runInternalFunctions(internalScoreFunctions, hostList, vm, parameters);
    if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled) && externalScoreFunctions.size() > 0) {
        runExternalFunctions(externalScoreFunctions, hostList, vm, parameters, hostCostTable);
    }
    Entry<Guid, Integer> bestHostEntry = null;
    for (Entry<Guid, Integer> entry : hostCostTable.entrySet()) {
        if (bestHostEntry == null || bestHostEntry.getValue() > entry.getValue()) {
            bestHostEntry = entry;
        }
    }
    if (bestHostEntry == null) {
        return null;
    }
    return bestHostEntry.getKey();
}
#method_after
protected Guid runFunctions(ArrayList<Pair<Guid, Integer>> functions, List<VDS> hostList, VM vm, Map<String, String> parameters) {
    ArrayList<Pair<PolicyUnitImpl, Integer>> internalScoreFunctions = new ArrayList<Pair<PolicyUnitImpl, Integer>>();
    ArrayList<Pair<PolicyUnitImpl, Integer>> externalScoreFunctions = new ArrayList<Pair<PolicyUnitImpl, Integer>>();
    for (Pair<Guid, Integer> pair : functions) {
        PolicyUnitImpl currentPolicy = policyUnits.get(pair.getFirst());
        if (currentPolicy.isInternal()) {
            internalScoreFunctions.add(new Pair<PolicyUnitImpl, Integer>(currentPolicy, pair.getSecond()));
        } else {
            if (currentPolicy.isEnabled()) {
                externalScoreFunctions.add(new Pair<PolicyUnitImpl, Integer>(currentPolicy, pair.getSecond()));
            }
        }
    }
    Map<Guid, Integer> hostCostTable = runInternalFunctions(internalScoreFunctions, hostList, vm, parameters);
    if (Config.<Boolean>getValue(ConfigValues.ExternalSchedulerEnabled) && externalScoreFunctions.size() > 0) {
        runExternalFunctions(externalScoreFunctions, hostList, vm, parameters, hostCostTable);
    }
    Entry<Guid, Integer> bestHostEntry = null;
    for (Entry<Guid, Integer> entry : hostCostTable.entrySet()) {
        if (bestHostEntry == null || bestHostEntry.getValue() > entry.getValue()) {
            bestHostEntry = entry;
        }
    }
    if (bestHostEntry == null) {
        return null;
    }
    return bestHostEntry.getKey();
}
#end_block

#method_before
// get { return SelectedItems == null ? new object[0] : SelectedItems.Cast<VDSGroup>().Select(a =>
protected Object[] getSelectedKeys() {
    if (getSelectedItems() == null) {
        return new Object[0];
    } else {
        ArrayList<Object> items = new ArrayList<Object>();
        for (Object i : getSelectedItems()) {
            items.add(((VDSGroup) i).getId());
        }
        return items.toArray(new Object[] {});
    }
}
#method_after
protected Object[] getSelectedKeys() {
    if (getSelectedItems() == null) {
        return new Object[0];
    } else {
        ArrayList<Object> items = new ArrayList<Object>();
        for (Object i : getSelectedItems()) {
            items.add(((VDSGroup) i).getId());
        }
        return items.toArray(new Object[] {});
    }
}
#end_block

#method_before
@Override
protected void syncSearch() {
    SearchParameters tempVar = new SearchParameters(getSearchString(), SearchType.Cluster);
    tempVar.setMaxCount(getSearchPageSize());
    super.syncSearch(VdcQueryType.Search, tempVar);
}
#method_after
@Override
protected void syncSearch() {
    SearchParameters tempVar = new SearchParameters(getSearchString(), SearchType.Cluster, isCaseSensitiveSearch());
    tempVar.setMaxCount(getSearchPageSize());
    super.syncSearch(VdcQueryType.Search, tempVar);
}
#end_block

#method_before
public void edit() {
    final VDSGroup cluster = (VDSGroup) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    final UIConstants constants = ConstantsManager.getInstance().getConstants();
    final ClusterModel clusterModel = new ClusterModel();
    clusterModel.setEntity(cluster);
    clusterModel.init(true);
    clusterModel.getEnableTrustedService().setEntity(cluster.supportsTrustedService());
    setWindow(clusterModel);
    clusterModel.setTitle(ConstantsManager.getInstance().getConstants().editClusterTitle());
    // $NON-NLS-1$
    clusterModel.setHashName("edit_cluster");
    clusterModel.setOriginalName(cluster.getName());
    clusterModel.getName().setEntity(cluster.getName());
    clusterModel.getEnableOvirtService().setEntity(cluster.supportsVirtService());
    clusterModel.getEnableOvirtService().setIsChangable(true);
    clusterModel.getEnableGlusterService().setEntity(cluster.supportsGlusterService());
    clusterModel.getEnableGlusterService().setIsChangable(true);
    clusterModel.getEnableBallooning().setEntity(cluster.isEnableBallooning());
    if (cluster.supportsTrustedService()) {
        clusterModel.getEnableGlusterService().setIsChangable(false);
    }
    if (cluster.supportsVirtService() && !cluster.supportsGlusterService()) {
        clusterModel.getEnableTrustedService().setIsChangable(true);
    } else {
        clusterModel.getEnableTrustedService().setIsChangable(false);
    }
    clusterModel.getOptimizeForSpeed().setEntity(cluster.isSchedulerOptimizeForSpeed());
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            final boolean isVirtGlusterAllowed = (Boolean) returnValue;
            AsyncQuery asyncQuery = new AsyncQuery();
            asyncQuery.setModel(clusterModel);
            asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<GlusterVolumeEntity> volumes = (ArrayList<GlusterVolumeEntity>) result;
                    if (volumes.size() > 0) {
                        clusterModel.getEnableGlusterService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableOvirtService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVolumeList(asyncQuery, cluster.getName());
            AsyncQuery asyncQuery1 = new AsyncQuery();
            asyncQuery1.setModel(clusterModel);
            asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VM> vmList = (ArrayList<VM>) result;
                    if (vmList.size() > 0) {
                        clusterModel.getEnableOvirtService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableGlusterService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVmListByClusterName(asyncQuery1, cluster.getName());
            AsyncQuery asyncQuery2 = new AsyncQuery();
            asyncQuery2.setModel(clusterModel);
            asyncQuery2.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VDS> vdsList = (ArrayList<VDS>) result;
                    if (vdsList.size() > 0) {
                        clusterModel.getEnableTrustedService().setIsChangable(false);
                        clusterModel.getEnableTrustedService().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().trustedServiceDisabled());
                    }
                }
            };
            AsyncDataProvider.getHostListByCluster(asyncQuery2, cluster.getName());
        }
    }));
    if (getSystemTreeSelectedItem() != null && (getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster || getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster_Gluster)) {
        clusterModel.getName().setIsChangable(false);
        clusterModel.getName().setChangeProhibitionReason(constants.cannotEditNameInTreeContext());
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    clusterModel.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    clusterModel.getCommands().add(tempVar2);
}
#method_after
public void edit() {
    final VDSGroup cluster = (VDSGroup) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    final UIConstants constants = ConstantsManager.getInstance().getConstants();
    final ClusterModel clusterModel = new ClusterModel();
    clusterModel.setEntity(cluster);
    clusterModel.init(true);
    clusterModel.getEnableTrustedService().setEntity(cluster.supportsTrustedService());
    setWindow(clusterModel);
    clusterModel.setTitle(ConstantsManager.getInstance().getConstants().editClusterTitle());
    // $NON-NLS-1$
    clusterModel.setHashName("edit_cluster");
    clusterModel.setOriginalName(cluster.getName());
    clusterModel.getName().setEntity(cluster.getName());
    clusterModel.getEnableOvirtService().setEntity(cluster.supportsVirtService());
    clusterModel.getEnableOvirtService().setIsChangable(true);
    clusterModel.getEnableGlusterService().setEntity(cluster.supportsGlusterService());
    clusterModel.getEnableGlusterService().setIsChangable(true);
    clusterModel.getEnableBallooning().setEntity(cluster.isEnableBallooning());
    clusterModel.getArchitecture().setSelectedItem(cluster.getArchitecture());
    if (cluster.supportsTrustedService()) {
        clusterModel.getEnableGlusterService().setIsChangable(false);
    }
    if (cluster.supportsVirtService() && !cluster.supportsGlusterService()) {
        clusterModel.getEnableTrustedService().setIsChangable(true);
    } else {
        clusterModel.getEnableTrustedService().setIsChangable(false);
    }
    clusterModel.getOptimizeForSpeed().setEntity(OptimizationType.OPTIMIZE_FOR_SPEED == cluster.getOptimizationType());
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            final boolean isVirtGlusterAllowed = (Boolean) returnValue;
            AsyncQuery asyncQuery = new AsyncQuery();
            asyncQuery.setModel(clusterModel);
            asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<GlusterVolumeEntity> volumes = (ArrayList<GlusterVolumeEntity>) result;
                    if (volumes.size() > 0) {
                        clusterModel.getEnableGlusterService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableOvirtService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVolumeList(asyncQuery, cluster.getName());
            AsyncQuery asyncQuery1 = new AsyncQuery();
            asyncQuery1.setModel(clusterModel);
            asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VM> vmList = (ArrayList<VM>) result;
                    if (vmList.size() > 0) {
                        clusterModel.getEnableOvirtService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableGlusterService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVmListByClusterName(asyncQuery1, cluster.getName());
            AsyncQuery asyncQuery2 = new AsyncQuery();
            asyncQuery2.setModel(clusterModel);
            asyncQuery2.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VDS> vdsList = (ArrayList<VDS>) result;
                    if (vdsList.size() > 0) {
                        clusterModel.getEnableTrustedService().setIsChangable(false);
                        clusterModel.getEnableTrustedService().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().trustedServiceDisabled());
                    }
                }
            };
            AsyncDataProvider.getHostListByCluster(asyncQuery2, cluster.getName());
        }
    }));
    if (getSystemTreeSelectedItem() != null && (getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster || getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster_Gluster)) {
        clusterModel.getName().setIsChangable(false);
        clusterModel.getName().setChangeProhibitionReason(constants.cannotEditNameInTreeContext());
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    clusterModel.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    clusterModel.getCommands().add(tempVar2);
}
#end_block

#method_before
public void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeClusterTitle());
    // $NON-NLS-1$
    model.setHashName("remove_cluster");
    model.setMessage(ConstantsManager.getInstance().getConstants().clustersMsg());
    ArrayList<String> list = new ArrayList<String>();
    for (VDSGroup a : Linq.<VDSGroup>cast(getSelectedItems())) {
        list.add(a.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeClusterTitle());
    // $NON-NLS-1$
    model.setHashName("remove_cluster");
    ArrayList<String> list = new ArrayList<String>();
    for (VDSGroup a : Linq.<VDSGroup>cast(getSelectedItems())) {
        list.add(a.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
public void onRemove() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object a : getSelectedItems()) {
        prms.add(new VdsGroupParametersBase(((VDSGroup) a).getId()));
    }
    model.startProgress(null);
    Frontend.RunMultipleAction(VdcActionType.RemoveVdsGroup, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#method_after
public void onRemove() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object a : getSelectedItems()) {
        prms.add(new VdsGroupParametersBase(((VDSGroup) a).getId()));
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.RemoveVdsGroup, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#end_block

#method_before
public void onSave() {
    ClusterModel model = (ClusterModel) getWindow();
    boolean validateCpu = (model.getIsNew() && (Boolean) model.getEnableOvirtService().getEntity()) || (model.getIsEdit() && ((VDSGroup) getSelectedItem()).getcpu_name() != null);
    if (!model.validate(validateCpu)) {
        return;
    } else if (model.getIsNew()) {
        onPreSaveInternal(model);
    } else {
        onSaveConfirmCV(model);
    }
}
#method_after
public void onSave() {
    ClusterModel model = (ClusterModel) getWindow();
    boolean validateCpu = (model.getIsNew() && model.getEnableOvirtService().getEntity()) || (model.getIsEdit() && ((VDSGroup) getSelectedItem()).getcpu_name() != null);
    if (!model.validate(validateCpu)) {
        return;
    } else if (model.getIsNew()) {
        onPreSaveInternal(model);
    } else {
        onSaveConfirmCV(model);
    }
}
#end_block

#method_before
private void onSaveConfirmCV(ClusterModel model) {
    if (!((Version) model.getVersion().getSelectedItem()).equals(((VDSGroup) getSelectedItem()).getcompatibility_version())) {
        final ConfirmationModel confirmModel = new ConfirmationModel();
        setConfirmWindow(confirmModel);
        confirmModel.setTitle(ConstantsManager.getInstance().getConstants().changeClusterCompatibilityVersionTitle());
        // $NON-NLS-1$
        confirmModel.setHashName("change_cluster_compatibility_version");
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnSaveConfirmCpuThreads", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        getConfirmWindow().getCommands().add(tempVar);
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("CancelConfirmation", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        tempVar2.setIsCancel(true);
        getConfirmWindow().getCommands().add(tempVar2);
        checkForNonResponsiveHosts(confirmModel);
    } else {
        onSaveConfirmCpuThreads();
    }
}
#method_after
private void onSaveConfirmCV(ClusterModel model) {
    if (!model.getVersion().getSelectedItem().equals(((VDSGroup) getSelectedItem()).getcompatibility_version())) {
        final ConfirmationModel confirmModel = new ConfirmationModel();
        setConfirmWindow(confirmModel);
        confirmModel.setTitle(ConstantsManager.getInstance().getConstants().changeClusterCompatibilityVersionTitle());
        // $NON-NLS-1$
        confirmModel.setHashName("change_cluster_compatibility_version");
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnSaveConfirmCpuThreads", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        getConfirmWindow().getCommands().add(tempVar);
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("CancelConfirmation", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        tempVar2.setIsCancel(true);
        getConfirmWindow().getCommands().add(tempVar2);
        checkForNonResponsiveHosts(confirmModel);
    } else {
        onSaveConfirmCpuThreads();
    }
}
#end_block

#method_before
private void onSaveConfirmCpuThreads() {
    ClusterModel model = (ClusterModel) getWindow();
    // cancel confirm window if there is one
    cancelConfirmation();
    // CPU thread support is being turned off either explicitly or via version change
    if (!((Boolean) model.getVersionSupportsCpuThreads().getEntity() && (Boolean) model.getCountThreadsAsCores().getEntity()) && ((VDSGroup) getSelectedItem()).getCountThreadsAsCores()) {
        ConfirmationModel confirmModel = new ConfirmationModel();
        setConfirmWindow(confirmModel);
        confirmModel.setTitle(ConstantsManager.getInstance().getConstants().disableClusterCpuThreadSupportTitle());
        // $NON-NLS-1$
        confirmModel.setHashName("disable_cpu_thread_support");
        confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCpuThreadSupportMsg());
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnSaveInternal", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        getConfirmWindow().getCommands().add(tempVar);
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("CancelConfirmation", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        tempVar2.setIsCancel(true);
        getConfirmWindow().getCommands().add(tempVar2);
    } else {
        onSaveInternal();
    }
}
#method_after
private void onSaveConfirmCpuThreads() {
    ClusterModel model = (ClusterModel) getWindow();
    // cancel confirm window if there is one
    cancelConfirmation();
    // CPU thread support is being turned off either explicitly or via version change
    if (!model.getVersionSupportsCpuThreads().getEntity() && model.getCountThreadsAsCores().getEntity() && ((VDSGroup) getSelectedItem()).getCountThreadsAsCores()) {
        ConfirmationModel confirmModel = new ConfirmationModel();
        setConfirmWindow(confirmModel);
        confirmModel.setTitle(ConstantsManager.getInstance().getConstants().disableClusterCpuThreadSupportTitle());
        // $NON-NLS-1$
        confirmModel.setHashName("disable_cpu_thread_support");
        confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCpuThreadSupportMsg());
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnSaveConfirmCpuLevel", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        getConfirmWindow().getCommands().add(tempVar);
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("CancelConfirmation", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        tempVar2.setIsCancel(true);
        getConfirmWindow().getCommands().add(tempVar2);
    } else {
        onSaveConfirmCpuLevel();
    }
}
#end_block

#method_before
public void onPreSaveInternal(ClusterModel model) {
    if ((Boolean) model.getIsImportGlusterConfiguration().getEntity()) {
        fetchAndImportClusterHosts(model);
    } else {
        onSaveInternal();
    }
}
#method_after
public void onPreSaveInternal(ClusterModel model) {
    if (model.getIsImportGlusterConfiguration().getEntity()) {
        fetchAndImportClusterHosts(model);
    } else {
        onSaveInternal();
    }
}
#end_block

#method_before
private void onSaveInternalWithModel(final ClusterModel model) {
    VDSGroup cluster = model.getIsNew() ? new VDSGroup() : (VDSGroup) Cloner.clone(getSelectedItem());
    Version version = (Version) model.getVersion().getSelectedItem();
    cluster.setName((String) model.getName().getEntity());
    cluster.setdescription((String) model.getDescription().getEntity());
    cluster.setComment((String) model.getComment().getEntity());
    cluster.setStoragePoolId(((StoragePool) model.getDataCenter().getSelectedItem()).getId());
    if (model.getCPU().getSelectedItem() != null) {
        cluster.setcpu_name(((ServerCpu) model.getCPU().getSelectedItem()).getCpuName());
    }
    cluster.setmax_vds_memory_over_commit(model.getMemoryOverCommit());
    cluster.setCountThreadsAsCores(Boolean.TRUE.equals(model.getVersionSupportsCpuThreads().getEntity()) && Boolean.TRUE.equals(model.getCountThreadsAsCores().getEntity()));
    cluster.setEnableBallooning(Boolean.TRUE.equals(model.getEnableBallooning().getEntity()) && version.compareTo(Version.v3_3) >= 0);
    // $NON-NLS-1$
    cluster.setTransparentHugepages(version.compareTo(new Version("3.0")) >= 0);
    cluster.setcompatibility_version(version);
    cluster.setMigrateOnError(model.getMigrateOnErrorOption());
    cluster.setVirtService((Boolean) model.getEnableOvirtService().getEntity());
    cluster.setGlusterService((Boolean) model.getEnableGlusterService().getEntity());
    cluster.setTrustedService((Boolean) model.getEnableTrustedService().getEntity());
    cluster.setClusterPolicyId(((ClusterPolicy) model.getClusterPolicy().getSelectedItem()).getId());
    cluster.setClusterPolicyProperties(KeyValueModel.convertProperties(model.getCustomPropertySheet().getEntity()));
    cluster.setSchedulerOptimizeForSpeed((Boolean) model.getOptimizeForSpeed().getEntity());
    model.startProgress(null);
    Frontend.RunAction(model.getIsNew() ? VdcActionType.AddVdsGroup : VdcActionType.UpdateVdsGroup, new VdsGroupOperationParameters(cluster), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ClusterListModel localModel = (ClusterListModel) result.getState();
            if ((Boolean) model.getIsImportGlusterConfiguration().getEntity()) {
                localModel.postOnSaveInternalWithImport(result.getReturnValue());
            } else {
                localModel.postOnSaveInternal(result.getReturnValue());
            }
        }
    }, this);
}
#method_after
private void onSaveInternalWithModel(final ClusterModel model) {
    VDSGroup cluster = model.getIsNew() ? new VDSGroup() : (VDSGroup) Cloner.clone(getSelectedItem());
    Version version = model.getVersion().getSelectedItem();
    cluster.setName(model.getName().getEntity());
    cluster.setdescription(model.getDescription().getEntity());
    cluster.setComment(model.getComment().getEntity());
    cluster.setStoragePoolId(model.getDataCenter().getSelectedItem().getId());
    if (model.getCPU().getSelectedItem() != null) {
        cluster.setcpu_name(model.getCPU().getSelectedItem().getCpuName());
    }
    cluster.setmax_vds_memory_over_commit(model.getMemoryOverCommit());
    cluster.setCountThreadsAsCores(Boolean.TRUE.equals(model.getVersionSupportsCpuThreads().getEntity()) && Boolean.TRUE.equals(model.getCountThreadsAsCores().getEntity()));
    cluster.setEnableBallooning(Boolean.TRUE.equals(model.getEnableBallooning().getEntity()) && version.compareTo(Version.v3_3) >= 0);
    // $NON-NLS-1$
    cluster.setTransparentHugepages(version.compareTo(new Version("3.0")) >= 0);
    cluster.setcompatibility_version(version);
    cluster.setMigrateOnError(model.getMigrateOnErrorOption());
    cluster.setVirtService(model.getEnableOvirtService().getEntity());
    cluster.setGlusterService(model.getEnableGlusterService().getEntity());
    cluster.setTrustedService(model.getEnableTrustedService().getEntity());
    cluster.setClusterPolicyId(model.getClusterPolicy().getSelectedItem().getId());
    cluster.setClusterPolicyProperties(KeyValueModel.convertProperties(model.getCustomPropertySheet().getEntity()));
    cluster.setOptimizationType(model.getOptimizeForSpeed().getEntity() ? OptimizationType.OPTIMIZE_FOR_SPEED : OptimizationType.NONE);
    if (model.getCPU().getSelectedItem() == null) {
        cluster.setArchitecture(model.getArchitecture().getSelectedItem());
    } else {
        cluster.setArchitecture(null);
    }
    model.startProgress(null);
    Frontend.getInstance().runAction(model.getIsNew() ? VdcActionType.AddVdsGroup : VdcActionType.UpdateVdsGroup, new VdsGroupOperationParameters(cluster), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ClusterListModel localModel = (ClusterListModel) result.getState();
            if (model.getIsImportGlusterConfiguration().getEntity()) {
                localModel.postOnSaveInternalWithImport(result.getReturnValue());
            } else {
                localModel.postOnSaveInternal(result.getReturnValue());
            }
        }
    }, this);
}
#end_block

#method_before
private void fetchAndImportClusterHosts(final ClusterModel clusterModel) {
    getWindow().startProgress(null);
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.setHandleFailure(true);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            getWindow().stopProgress();
            VdcQueryReturnValue returnValue = (VdcQueryReturnValue) result;
            if (returnValue == null) {
                onEmptyGlusterHosts(clusterModel);
                return;
            } else if (!returnValue.getSucceeded()) {
                clusterModel.setMessage(Frontend.getAppErrorsTranslator().TranslateErrorTextSingle(returnValue.getExceptionString()));
                return;
            }
            Map<String, String> hostMap = (Map<String, String>) returnValue.getReturnValue();
            if (hostMap == null) {
                onEmptyGlusterHosts(clusterModel);
                return;
            }
            if (// $NON-NLS-1$
            hostMap.containsValue(null) || hostMap.containsValue("")) {
                onGlusterHostsWithoutFingerprint(hostMap, clusterModel);
                return;
            }
            ArrayList<EntityModel> list = new ArrayList<EntityModel>();
            for (Map.Entry<String, String> host : hostMap.entrySet()) {
                HostDetailModel hostModel = new HostDetailModel(host.getKey(), host.getValue());
                hostModel.setName(host.getKey());
                // $NON-NLS-1$
                hostModel.setPassword("");
                EntityModel entityModel = new EntityModel(hostModel);
                list.add(entityModel);
            }
            importClusterHosts(clusterModel, list);
        }
    };
    AsyncDataProvider.getGlusterHosts(aQuery, (String) clusterModel.getGlusterHostAddress().getEntity(), (String) clusterModel.getGlusterHostPassword().getEntity(), (String) clusterModel.getGlusterHostFingerprint().getEntity());
}
#method_after
private void fetchAndImportClusterHosts(final ClusterModel clusterModel) {
    getWindow().startProgress(null);
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.setHandleFailure(true);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            getWindow().stopProgress();
            VdcQueryReturnValue returnValue = (VdcQueryReturnValue) result;
            if (returnValue == null) {
                onEmptyGlusterHosts(clusterModel);
                return;
            } else if (!returnValue.getSucceeded()) {
                clusterModel.setMessage(Frontend.getInstance().getAppErrorsTranslator().translateErrorTextSingle(returnValue.getExceptionString()));
                return;
            }
            Map<String, String> hostMap = returnValue.getReturnValue();
            if (hostMap == null) {
                onEmptyGlusterHosts(clusterModel);
                return;
            }
            if (// $NON-NLS-1$
            hostMap.containsValue(null) || hostMap.containsValue("")) {
                onGlusterHostsWithoutFingerprint(hostMap, clusterModel);
                return;
            }
            ArrayList<EntityModel> list = new ArrayList<EntityModel>();
            for (Map.Entry<String, String> host : hostMap.entrySet()) {
                HostDetailModel hostModel = new HostDetailModel(host.getKey(), host.getValue());
                hostModel.setName(host.getKey());
                // $NON-NLS-1$
                hostModel.setPassword("");
                EntityModel entityModel = new EntityModel(hostModel);
                list.add(entityModel);
            }
            importClusterHosts(clusterModel, list);
        }
    };
    AsyncDataProvider.getGlusterHosts(aQuery, clusterModel.getGlusterHostAddress().getEntity(), clusterModel.getGlusterHostPassword().getEntity(), clusterModel.getGlusterHostFingerprint().getEntity());
}
#end_block

#method_before
private void addHosts(final MultipleHostsModel hostsModel) {
    hostsModel.startProgress(null);
    ArrayList<VdcActionParametersBase> parametersList = new ArrayList<VdcActionParametersBase>();
    for (Object object : hostsModel.getHosts().getItems()) {
        HostDetailModel hostDetailModel = (HostDetailModel) ((EntityModel) object).getEntity();
        VDS host = new VDS();
        host.setVdsName(hostDetailModel.getName());
        host.setHostName(hostDetailModel.getAddress());
        host.setSshKeyFingerprint(hostDetailModel.getFingerprint());
        host.setPort(54321);
        // TODO: get from UI, till then using defaults.
        host.setSshPort(22);
        // $NON-NLS-1$
        host.setSshUsername("root");
        host.setVdsGroupId(hostsModel.getClusterModel().getClusterId());
        host.setpm_enabled(false);
        AddVdsActionParameters parameters = new AddVdsActionParameters();
        parameters.setVdsId(host.getId());
        parameters.setvds(host);
        parameters.setPassword(hostDetailModel.getPassword());
        parameters.setOverrideFirewall(false);
        parameters.setRebootAfterInstallation(hostsModel.getClusterModel().getEnableOvirtService().getIsSelected());
        parametersList.add(parameters);
    }
    Frontend.RunMultipleAction(VdcActionType.AddVds, parametersList, true, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            hostsModel.stopProgress();
            boolean isAllCanDoPassed = true;
            for (VdcReturnValueBase returnValueBase : result.getReturnValue()) {
                isAllCanDoPassed = isAllCanDoPassed && returnValueBase.getCanDoAction();
                if (!isAllCanDoPassed) {
                    break;
                }
            }
            if (isAllCanDoPassed) {
                cancel();
            }
        }
    }, null);
}
#method_after
private void addHosts(final MultipleHostsModel hostsModel) {
    hostsModel.startProgress(null);
    ArrayList<VdcActionParametersBase> parametersList = new ArrayList<VdcActionParametersBase>();
    for (Object object : hostsModel.getHosts().getItems()) {
        HostDetailModel hostDetailModel = (HostDetailModel) ((EntityModel) object).getEntity();
        VDS host = new VDS();
        host.setVdsName(hostDetailModel.getName());
        host.setHostName(hostDetailModel.getAddress());
        host.setSshKeyFingerprint(hostDetailModel.getFingerprint());
        host.setPort(54321);
        // TODO: get from UI, till then using defaults.
        host.setSshPort(22);
        // $NON-NLS-1$
        host.setSshUsername("root");
        host.setVdsGroupId(hostsModel.getClusterModel().getClusterId());
        host.setpm_enabled(false);
        AddVdsActionParameters parameters = new AddVdsActionParameters();
        parameters.setVdsId(host.getId());
        parameters.setvds(host);
        parameters.setPassword(hostDetailModel.getPassword());
        parameters.setOverrideFirewall(false);
        parameters.setRebootAfterInstallation(hostsModel.getClusterModel().getEnableOvirtService().getIsSelected());
        parametersList.add(parameters);
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.AddVds, parametersList, true, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            hostsModel.stopProgress();
            boolean isAllCanDoPassed = true;
            for (VdcReturnValueBase returnValueBase : result.getReturnValue()) {
                isAllCanDoPassed = isAllCanDoPassed && returnValueBase.getCanDoAction();
                if (!isAllCanDoPassed) {
                    break;
                }
            }
            if (isAllCanDoPassed) {
                cancel();
            }
        }
    }, null);
}
#end_block

#method_before
@Override
public void executeCommand(UICommand command, Object... parameters) {
    if (command == getEditCommand() && parameters.length > 0 && Boolean.TRUE.equals(parameters[0])) {
        this.clusterPolicyFirst = true;
        super.executeCommand(command, parameters);
        this.clusterPolicyFirst = false;
    }
}
#method_after
@Override
public void executeCommand(UICommand command, Object... parameters) {
    if (command == getEditCommand() && parameters.length > 0 && Boolean.TRUE.equals(parameters[0])) {
        super.executeCommand(command, parameters);
    }
}
#end_block

#method_before
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command == getNewCommand()) {
        newEntity();
    } else if (command == getEditCommand()) {
        edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getGuideCommand()) {
        guide();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        onSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        onRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveConfirmCpuThreads")) {
        onSaveConfirmCpuThreads();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveInternal")) {
        onSaveInternal();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        cancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveHosts")) {
        onSaveHosts();
    }
}
#method_after
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command == getNewCommand()) {
        newEntity();
    } else if (command == getEditCommand()) {
        edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getGuideCommand()) {
        guide();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        onSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        onRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveConfirmCpuThreads")) {
        onSaveConfirmCpuThreads();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveConfirmCpuLevel")) {
        onSaveConfirmCpuLevel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveInternal")) {
        onSaveInternal();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        cancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveHosts")) {
        onSaveHosts();
    }
}
#end_block

#method_before
@SuppressWarnings("unchecked")
private void checkForNonResponsiveHosts(final ConfirmationModel confirmModel) {
    startProgress(null);
    Frontend.RunQuery(VdcQueryType.GetHostsByClusterId, new IdQueryParameters(((VDSGroup) getSelectedItem()).getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            ClusterListModel model = (ClusterListModel) target;
            ArrayList<VDS> hosts = null;
            if (returnValue instanceof ArrayList) {
                hosts = (ArrayList<VDS>) returnValue;
            } else if (returnValue instanceof VdcQueryReturnValue && ((VdcQueryReturnValue) returnValue).getReturnValue() instanceof ArrayList) {
                hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            }
            boolean foundNRHosts = false;
            if (hosts != null) {
                for (VDS host : hosts) {
                    if (VDSStatus.NonResponsive == host.getStatus()) {
                        foundNRHosts = true;
                        break;
                    }
                }
            }
            if (foundNRHosts) {
                confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCompatibilityVersionNonResponsiveHostsMsg());
            } else {
                confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCompatibilityVersionMsg());
            }
            model.stopProgress();
        }
    }));
}
#method_after
@SuppressWarnings("unchecked")
private void checkForNonResponsiveHosts(final ConfirmationModel confirmModel) {
    startProgress(null);
    Frontend.getInstance().runQuery(VdcQueryType.GetHostsByClusterId, new IdQueryParameters(((VDSGroup) getSelectedItem()).getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            ClusterListModel model = (ClusterListModel) target;
            ArrayList<VDS> hosts = null;
            if (returnValue instanceof ArrayList) {
                hosts = (ArrayList<VDS>) returnValue;
            } else if (returnValue instanceof VdcQueryReturnValue && ((VdcQueryReturnValue) returnValue).getReturnValue() instanceof ArrayList) {
                hosts = ((VdcQueryReturnValue) returnValue).getReturnValue();
            }
            boolean foundNRHosts = false;
            if (hosts != null) {
                for (VDS host : hosts) {
                    if (VDSStatus.NonResponsive == host.getStatus()) {
                        foundNRHosts = true;
                        break;
                    }
                }
            }
            if (foundNRHosts) {
                confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCompatibilityVersionNonResponsiveHostsMsg());
            } else {
                confirmModel.setMessage(ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCompatibilityVersionMsg());
            }
            model.stopProgress();
        }
    }));
}
#end_block

#method_before
public String getComment() {
    return comment;
}
#method_after
@Override
public String getComment() {
    return comment;
}
#end_block

#method_before
public void setComment(String value) {
    comment = value;
}
#method_after
@Override
public void setComment(String value) {
    comment = value;
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((compatVersion == null) ? 0 : compatVersion.hashCode());
    result = prime * result + ((compatibility_version == null) ? 0 : compatibility_version.hashCode());
    result = prime * result + ((cpu_name == null) ? 0 : cpu_name.hashCode());
    result = prime * result + ((description == null) ? 0 : description.hashCode());
    result = prime * result + max_vds_memory_over_commit;
    result = prime * result + (countThreadsAsCores ? 1231 : 1237);
    result = prime * result + ((migrateOnError == null) ? 0 : migrateOnError.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((storagePoolId == null) ? 0 : storagePoolId.hashCode());
    result = prime * result + ((storagePoolName == null) ? 0 : storagePoolName.hashCode());
    result = prime * result + (transparentHugepages ? 1231 : 1237);
    result = prime * result + (virtService ? 1231 : 1237);
    result = prime * result + (glusterService ? 1231 : 1237);
    result = prime * result + (tunnelMigration ? 1231 : 1237);
    result = prime * result + (emulatedMachine == null ? 0 : emulatedMachine.hashCode());
    result = prime * result + (trustedService ? 1231 : 1237);
    result = prime * result + ((clusterPolicyName == null) ? 0 : clusterPolicyName.hashCode());
    result = prime * result + (clusterPolicyProperties == null ? 0 : clusterPolicyProperties.hashCode());
    result = prime * result + (enableBallooning ? 1231 : 1237);
    result = prime * result + (schedulerOptimizeForSpeed ? 1231 : 1237);
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((compatVersion == null) ? 0 : compatVersion.hashCode());
    result = prime * result + ((compatibility_version == null) ? 0 : compatibility_version.hashCode());
    result = prime * result + ((cpu_name == null) ? 0 : cpu_name.hashCode());
    result = prime * result + ((description == null) ? 0 : description.hashCode());
    result = prime * result + max_vds_memory_over_commit;
    result = prime * result + (countThreadsAsCores ? 1231 : 1237);
    result = prime * result + ((migrateOnError == null) ? 0 : migrateOnError.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((storagePoolId == null) ? 0 : storagePoolId.hashCode());
    result = prime * result + ((storagePoolName == null) ? 0 : storagePoolName.hashCode());
    result = prime * result + (transparentHugepages ? 1231 : 1237);
    result = prime * result + (virtService ? 1231 : 1237);
    result = prime * result + (glusterService ? 1231 : 1237);
    result = prime * result + (tunnelMigration ? 1231 : 1237);
    result = prime * result + (emulatedMachine == null ? 0 : emulatedMachine.hashCode());
    result = prime * result + (trustedService ? 1231 : 1237);
    result = prime * result + ((clusterPolicyName == null) ? 0 : clusterPolicyName.hashCode());
    result = prime * result + (clusterPolicyProperties == null ? 0 : clusterPolicyProperties.hashCode());
    result = prime * result + (enableBallooning ? 1231 : 1237);
    result = prime * result + ((optimizationType == null) ? 0 : optimizationType.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VDSGroup other = (VDSGroup) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(compatVersion, other.compatVersion) && ObjectUtils.objectsEqual(compatibility_version, other.compatibility_version) && ObjectUtils.objectsEqual(cpu_name, other.cpu_name) && ObjectUtils.objectsEqual(description, other.description) && max_vds_memory_over_commit == other.max_vds_memory_over_commit && countThreadsAsCores == other.countThreadsAsCores && migrateOnError == other.migrateOnError && ObjectUtils.objectsEqual(name, other.name) && ObjectUtils.objectsEqual(storagePoolId, other.storagePoolId) && ObjectUtils.objectsEqual(storagePoolName, other.storagePoolName) && transparentHugepages == other.transparentHugepages && virtService == other.virtService && glusterService == other.glusterService && tunnelMigration == other.tunnelMigration && ObjectUtils.objectsEqual(emulatedMachine, other.emulatedMachine) && trustedService == other.trustedService && ObjectUtils.objectsEqual(clusterPolicyId, other.clusterPolicyId) && ObjectUtils.objectsEqual(clusterPolicyName, other.clusterPolicyName) && ObjectUtils.objectsEqual(clusterPolicyProperties, other.clusterPolicyProperties) && enableBallooning == other.enableBallooning && detectEmulatedMachine == other.detectEmulatedMachine && schedulerOptimizeForSpeed == other.schedulerOptimizeForSpeed);
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VDSGroup other = (VDSGroup) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(compatVersion, other.compatVersion) && ObjectUtils.objectsEqual(compatibility_version, other.compatibility_version) && ObjectUtils.objectsEqual(cpu_name, other.cpu_name) && ObjectUtils.objectsEqual(description, other.description) && max_vds_memory_over_commit == other.max_vds_memory_over_commit && countThreadsAsCores == other.countThreadsAsCores && migrateOnError == other.migrateOnError && ObjectUtils.objectsEqual(name, other.name) && ObjectUtils.objectsEqual(storagePoolId, other.storagePoolId) && ObjectUtils.objectsEqual(storagePoolName, other.storagePoolName) && transparentHugepages == other.transparentHugepages && virtService == other.virtService && glusterService == other.glusterService && tunnelMigration == other.tunnelMigration && ObjectUtils.objectsEqual(emulatedMachine, other.emulatedMachine) && trustedService == other.trustedService && ObjectUtils.objectsEqual(clusterPolicyId, other.clusterPolicyId) && ObjectUtils.objectsEqual(clusterPolicyName, other.clusterPolicyName) && ObjectUtils.objectsEqual(clusterPolicyProperties, other.clusterPolicyProperties) && enableBallooning == other.enableBallooning && detectEmulatedMachine == other.detectEmulatedMachine && optimizationType == other.optimizationType);
}
#end_block

#method_before
protected void initMainTable() {
    this.table = new ListModelObjectCellTable<Object, ImportVmModel>();
    CheckboxColumn<Object> collapseSnapshotsColumn = new CheckboxColumn<Object>(new FieldUpdater<Object, Boolean>() {

        @Override
        public void update(int index, Object model, Boolean value) {
            ((ImportVmData) model).getCollapseSnapshots().setEntity(value);
            customSelectionCellFormatType.setEnabledWithToolTip(value, constants.importAllocationModifiedCollapse());
            diskTable.asEditor().edit(importModel.getImportDiskListModel());
        }
    }) {

        @Override
        public Boolean getValue(Object model) {
            return (Boolean) ((ImportVmData) model).getCollapseSnapshots().getEntity();
        }

        @Override
        protected boolean canEdit(Object model) {
            return ((ImportVmData) model).getCollapseSnapshots().getIsChangable();
        }

        @Override
        protected String getDisabledMessage(Object model) {
            return ((ImportVmData) model).getCollapseSnapshots().getChangeProhibitionReason();
        }
    };
    // $NON-NLS-1$
    table.addColumn(collapseSnapshotsColumn, constants.collapseSnapshots(), "10px");
    CheckboxColumn<Object> cloneVMColumn = new CheckboxColumn<Object>(new FieldUpdater<Object, Boolean>() {

        @Override
        public void update(int index, Object model, Boolean value) {
            ((ImportVmData) model).getClone().setEntity(value);
            table.asEditor().edit(importModel);
        }
    }) {

        @Override
        public Boolean getValue(Object model) {
            return (Boolean) ((ImportVmData) model).getClone().getEntity();
        }

        @Override
        protected boolean canEdit(Object model) {
            return ((ImportVmData) model).getClone().getIsChangable();
        }

        @Override
        protected String getDisabledMessage(Object model) {
            return ((ImportVmData) model).getClone().getChangeProhibitionReason();
        }
    };
    // $NON-NLS-1$
    table.addColumn(cloneVMColumn, constants.cloneVM(), "50px");
    TextColumnWithTooltip<Object> nameColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return ((ImportVmData) object).getVm().getName();
        }
    };
    // $NON-NLS-1$
    table.addColumn(nameColumn, constants.nameVm(), "150px");
    TextColumnWithTooltip<Object> originColumn = new EnumColumn<Object, OriginType>() {

        @Override
        protected OriginType getRawValue(Object object) {
            return ((ImportVmData) object).getVm().getOrigin();
        }
    };
    // $NON-NLS-1$
    table.addColumn(originColumn, constants.originVm(), "100px");
    table.addColumn(new WebAdminImageResourceColumn<Object>() {

        @Override
        public com.google.gwt.resources.client.ImageResource getValue(Object object) {
            return new VmTypeColumn().getValue(((ImportVmData) object).getVm());
        }
    }, constants.empty(), // $NON-NLS-1$
    "30px");
    TextColumnWithTooltip<Object> memoryColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            // $NON-NLS-1$
            return String.valueOf(((ImportVmData) object).getVm().getVmMemSizeMb()) + " MB";
        }
    };
    // $NON-NLS-1$
    table.addColumn(memoryColumn, constants.memoryVm(), "100px");
    TextColumnWithTooltip<Object> cpuColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return String.valueOf(((ImportVmData) object).getVm().getNumOfCpus());
        }
    };
    // $NON-NLS-1$
    table.addColumn(cpuColumn, constants.cpusVm(), "50px");
    TextColumnWithTooltip<Object> archColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return String.valueOf(((ImportVmData) object).getVm().getArchitecture());
        }
    };
    // $NON-NLS-1$
    table.addColumn(archColumn, constants.architectureVm(), "50px");
    TextColumnWithTooltip<Object> diskColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return String.valueOf(((ImportVmData) object).getVm().getDiskMap().size());
        }
    };
    // $NON-NLS-1$
    table.addColumn(diskColumn, constants.disksVm(), "50px");
    isObjectInSystemColumn = new ImageResourceColumn<Object>() {

        @Override
        public ImageResource getValue(Object object) {
            return ((ImportVmData) object).isExistsInSystem() ? getCommonResources().logNormalImage() : null;
        }
    };
    // $NON-NLS-1$
    table.addColumn(isObjectInSystemColumn, constants.vmInSetup(), "60px");
    table.getSelectionModel().addSelectionChangeHandler(new SelectionChangeEvent.Handler() {

        @Override
        public void onSelectionChange(SelectionChangeEvent event) {
            ImportVmData selectedObject = ((SingleSelectionModel<ImportVmData>) event.getSource()).getSelectedObject();
            customSelectionCellFormatType.setEnabledWithToolTip((Boolean) selectedObject.getCollapseSnapshots().getEntity(), constants.importAllocationModifiedCollapse());
        // diskTable.edit(importVmModel.getImportDiskListModel());
        }
    });
    ScrollPanel sp = new ScrollPanel();
    sp.add(table);
    splitLayoutPanel.add(sp);
    table.getElement().getStyle().setPosition(Position.RELATIVE);
}
#method_after
protected void initMainTable() {
    this.table = new ListModelObjectCellTable<Object, ImportVmModel>();
    CheckboxColumn<Object> collapseSnapshotsColumn = new CheckboxColumn<Object>(new FieldUpdater<Object, Boolean>() {

        @Override
        public void update(int index, Object model, Boolean value) {
            ((ImportVmData) model).getCollapseSnapshots().setEntity(value);
            customSelectionCellFormatType.setEnabledWithToolTip(value, constants.importAllocationModifiedCollapse());
            diskTable.asEditor().edit(importModel.getImportDiskListModel());
        }
    }) {

        @Override
        public Boolean getValue(Object model) {
            return (Boolean) ((ImportVmData) model).getCollapseSnapshots().getEntity();
        }

        @Override
        protected boolean canEdit(Object model) {
            return ((ImportVmData) model).getCollapseSnapshots().getIsChangable();
        }

        @Override
        protected String getDisabledMessage(Object model) {
            return ((ImportVmData) model).getCollapseSnapshots().getChangeProhibitionReason();
        }
    };
    // $NON-NLS-1$
    table.addColumn(collapseSnapshotsColumn, constants.collapseSnapshots(), "10px");
    CheckboxColumn<Object> cloneVMColumn = new CheckboxColumn<Object>(new FieldUpdater<Object, Boolean>() {

        @Override
        public void update(int index, Object model, Boolean value) {
            ((ImportVmData) model).getClone().setEntity(value);
            table.asEditor().edit(importModel);
        }
    }) {

        @Override
        public Boolean getValue(Object model) {
            return (Boolean) ((ImportVmData) model).getClone().getEntity();
        }

        @Override
        protected boolean canEdit(Object model) {
            return ((ImportVmData) model).getClone().getIsChangable();
        }

        @Override
        protected String getDisabledMessage(Object model) {
            return ((ImportVmData) model).getClone().getChangeProhibitionReason();
        }
    };
    // $NON-NLS-1$
    table.addColumn(cloneVMColumn, constants.cloneVM(), "50px");
    TextColumnWithTooltip<Object> nameColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return ((ImportVmData) object).getVm().getName();
        }
    };
    // $NON-NLS-1$
    table.addColumn(nameColumn, constants.nameVm(), "150px");
    TextColumnWithTooltip<Object> originColumn = new EnumColumn<Object, OriginType>() {

        @Override
        protected OriginType getRawValue(Object object) {
            return ((ImportVmData) object).getVm().getOrigin();
        }
    };
    // $NON-NLS-1$
    table.addColumn(originColumn, constants.originVm(), "100px");
    table.addColumn(new WebAdminImageResourceColumn<Object>() {

        @Override
        public com.google.gwt.resources.client.ImageResource getValue(Object object) {
            return new VmTypeColumn().getValue(((ImportVmData) object).getVm());
        }
    }, constants.empty(), // $NON-NLS-1$
    "30px");
    TextColumnWithTooltip<Object> memoryColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            // $NON-NLS-1$
            return String.valueOf(((ImportVmData) object).getVm().getVmMemSizeMb()) + " MB";
        }
    };
    // $NON-NLS-1$
    table.addColumn(memoryColumn, constants.memoryVm(), "100px");
    TextColumnWithTooltip<Object> cpuColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return String.valueOf(((ImportVmData) object).getVm().getNumOfCpus());
        }
    };
    // $NON-NLS-1$
    table.addColumn(cpuColumn, constants.cpusVm(), "50px");
    TextColumnWithTooltip<Object> archColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return String.valueOf(((ImportVmData) object).getVm().getClusterArch());
        }
    };
    // $NON-NLS-1$
    table.addColumn(archColumn, constants.architectureVm(), "50px");
    TextColumnWithTooltip<Object> diskColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return String.valueOf(((ImportVmData) object).getVm().getDiskMap().size());
        }
    };
    // $NON-NLS-1$
    table.addColumn(diskColumn, constants.disksVm(), "50px");
    isObjectInSystemColumn = new ImageResourceColumn<Object>() {

        @Override
        public ImageResource getValue(Object object) {
            return ((ImportVmData) object).isExistsInSystem() ? getCommonResources().logNormalImage() : null;
        }
    };
    // $NON-NLS-1$
    table.addColumn(isObjectInSystemColumn, constants.vmInSetup(), "60px");
    table.getSelectionModel().addSelectionChangeHandler(new SelectionChangeEvent.Handler() {

        @Override
        public void onSelectionChange(SelectionChangeEvent event) {
            ImportVmData selectedObject = ((SingleSelectionModel<ImportVmData>) event.getSource()).getSelectedObject();
            customSelectionCellFormatType.setEnabledWithToolTip((Boolean) selectedObject.getCollapseSnapshots().getEntity(), constants.importAllocationModifiedCollapse());
        // diskTable.edit(importVmModel.getImportDiskListModel());
        }
    });
    ScrollPanel sp = new ScrollPanel();
    sp.add(table);
    splitLayoutPanel.add(sp);
    table.getElement().getStyle().setPosition(Position.RELATIVE);
}
#end_block

#method_before
private void initNicsTable() {
    nicTable = new ListModelObjectCellTable<VmNetworkInterface, SearchableListModel>();
    TextColumnWithTooltip<VmNetworkInterface> nameColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    nicTable.addColumn(nameColumn, constants.nameInterface(), "150px");
    TextColumnWithTooltip<VmNetworkInterface> networkColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getNetworkName();
        }
    };
    // $NON-NLS-1$
    nicTable.addColumn(networkColumn, constants.networkNameInterface(), "150px");
    TextColumnWithTooltip<VmNetworkInterface> profileColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getVnicProfileName();
        }
    };
    // $NON-NLS-1$
    nicTable.addColumn(profileColumn, constants.profileNameInterface(), "150px");
    TextColumnWithTooltip<VmNetworkInterface> typeColumn = new EnumColumn<VmNetworkInterface, VmInterfaceType>() {

        @Override
        protected VmInterfaceType getRawValue(VmNetworkInterface object) {
            return VmInterfaceType.forValue(object.getType());
        }
    };
    // $NON-NLS-1$
    nicTable.addColumn(typeColumn, constants.typeInterface(), "150px");
    TextColumnWithTooltip<VmNetworkInterface> macColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getMacAddress();
        }
    };
    // $NON-NLS-1$
    nicTable.addColumn(macColumn, constants.macInterface(), "150px");
    nicTable.getElement().getStyle().setPosition(Position.RELATIVE);
}
#method_after
private void initNicsTable() {
    nicTable = new ListModelObjectCellTable<VmNetworkInterface, SearchableListModel>();
    nicTable.enableColumnResizing();
    TextColumnWithTooltip<VmNetworkInterface> nameColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    nicTable.addColumn(nameColumn, constants.nameInterface(), "150px");
    TextColumnWithTooltip<VmNetworkInterface> networkColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getNetworkName();
        }
    };
    // $NON-NLS-1$
    nicTable.addColumn(networkColumn, constants.networkNameInterface(), "150px");
    TextColumnWithTooltip<VmNetworkInterface> profileColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getVnicProfileName();
        }
    };
    // $NON-NLS-1$
    nicTable.addColumn(profileColumn, constants.profileNameInterface(), "150px");
    TextColumnWithTooltip<VmNetworkInterface> typeColumn = new EnumColumn<VmNetworkInterface, VmInterfaceType>() {

        @Override
        protected VmInterfaceType getRawValue(VmNetworkInterface object) {
            return VmInterfaceType.forValue(object.getType());
        }
    };
    // $NON-NLS-1$
    nicTable.addColumn(typeColumn, constants.typeInterface(), "150px");
    TextColumnWithTooltip<VmNetworkInterface> macColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getMacAddress();
        }
    };
    // $NON-NLS-1$
    nicTable.addColumn(macColumn, constants.macInterface(), "150px");
    nicTable.getElement().getStyle().setPosition(Position.RELATIVE);
}
#end_block

#method_before
private void initDiskTable() {
    diskTable = new ListModelObjectCellTable<DiskImage, SearchableListModel>();
    TextColumnWithTooltip<DiskImage> nameColumn = new TextColumnWithTooltip<DiskImage>() {

        @Override
        public String getValue(DiskImage object) {
            return object.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    diskTable.addColumn(nameColumn, constants.nameDisk(), "100px");
    DiskSizeColumn<DiskImage> sizeColumn = new DiskSizeColumn<DiskImage>() {

        @Override
        protected Long getRawValue(DiskImage object) {
            return object.getSize();
        }
    };
    // $NON-NLS-1$
    diskTable.addColumn(sizeColumn, constants.provisionedSizeDisk(), "100px");
    DiskSizeColumn<DiskImage> actualSizeColumn = new DiskSizeColumn<DiskImage>() {

        @Override
        protected Long getRawValue(DiskImage object) {
            return object.getActualSizeInBytes();
        }
    };
    // $NON-NLS-1$
    diskTable.addColumn(actualSizeColumn, constants.sizeDisk(), "100px");
    TextColumnWithTooltip<DiskImage> dateCreatedColumn = new FullDateTimeColumn<DiskImage>() {

        @Override
        protected Date getRawValue(DiskImage object) {
            return object.getCreationDate();
        }
    };
    // $NON-NLS-1$
    diskTable.addColumn(dateCreatedColumn, constants.dateCreatedInterface(), "100px");
    diskTable.setSelectionModel(new NoSelectionModel<DiskImage>());
    addAllocationColumn();
    diskTable.getElement().getStyle().setPosition(Position.RELATIVE);
}
#method_after
private void initDiskTable() {
    diskTable = new ListModelObjectCellTable<DiskImage, SearchableListModel>();
    diskTable.enableColumnResizing();
    TextColumnWithTooltip<DiskImage> aliasColumn = new TextColumnWithTooltip<DiskImage>() {

        @Override
        public String getValue(DiskImage object) {
            return object.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    diskTable.addColumn(aliasColumn, constants.aliasDisk(), "100px");
    ImageResourceColumn<DiskImage> bootableDiskColumn = new ImageResourceColumn<DiskImage>() {

        @Override
        public ImageResource getValue(DiskImage object) {
            setTitle(object.isBoot() ? getDefaultTitle() : null);
            return object.isBoot() ? getDefaultImage() : null;
        }

        @Override
        public String getDefaultTitle() {
            return constants.bootableDisk();
        }

        @Override
        public ImageResource getDefaultImage() {
            return resources.bootableDiskIcon();
        }
    };
    // $NON-NLS-1$
    diskTable.addColumnWithHtmlHeader(bootableDiskColumn, bootableDiskColumn.getHeaderHtml(), "30px");
    DiskSizeColumn<DiskImage> sizeColumn = new DiskSizeColumn<DiskImage>() {

        @Override
        protected Long getRawValue(DiskImage object) {
            return object.getSize();
        }
    };
    // $NON-NLS-1$
    diskTable.addColumn(sizeColumn, constants.provisionedSizeDisk(), "130px");
    DiskSizeColumn<DiskImage> actualSizeColumn = new DiskSizeColumn<DiskImage>() {

        @Override
        protected Long getRawValue(DiskImage object) {
            return object.getActualSizeInBytes();
        }
    };
    // $NON-NLS-1$
    diskTable.addColumn(actualSizeColumn, constants.sizeDisk(), "130px");
    TextColumnWithTooltip<DiskImage> dateCreatedColumn = new FullDateTimeColumn<DiskImage>() {

        @Override
        protected Date getRawValue(DiskImage object) {
            return object.getCreationDate();
        }
    };
    // $NON-NLS-1$
    diskTable.addColumn(dateCreatedColumn, constants.dateCreatedInterface(), "120px");
    diskTable.setSelectionModel(new NoSelectionModel<DiskImage>());
    addAllocationColumn();
    diskTable.getElement().getStyle().setPosition(Position.RELATIVE);
}
#end_block

#method_before
protected void addAllocationColumn() {
    ArrayList<String> allocationTypes = new ArrayList<String>();
    allocationTypes.add(constants.thinAllocation());
    allocationTypes.add(constants.preallocatedAllocation());
    customSelectionCellFormatType = new CustomSelectionCell(allocationTypes);
    customSelectionCellFormatType.setStyle(style.cellSelectBox());
    Column<DiskImage, String> allocationColumn = new Column<DiskImage, String>(customSelectionCellFormatType) {

        @Override
        public String getValue(DiskImage disk) {
            ImportDiskData importData = importModel.getDiskImportData(disk.getId());
            if (importData == null) {
                return "";
            }
            return new EnumRenderer<VolumeType>().render(VolumeType.forValue(importData.getSelectedVolumeType().getValue()));
        }
    };
    allocationColumn.setFieldUpdater(new FieldUpdater<DiskImage, String>() {

        @Override
        public void update(int index, DiskImage disk, String value) {
            VolumeType tempVolumeType = VolumeType.Sparse;
            if (value.equals(constants.thinAllocation())) {
                tempVolumeType = VolumeType.Sparse;
            } else if (value.equals(constants.preallocatedAllocation())) {
                tempVolumeType = VolumeType.Preallocated;
            }
            ImportDiskData importData = importModel.getDiskImportData(disk.getId());
            if (importData != null) {
                importData.setSelectedVolumeType(tempVolumeType);
            }
        }
    });
    // $NON-NLS-1$
    diskTable.addColumn(allocationColumn, constants.allocationDisk(), "80px");
}
#method_after
protected void addAllocationColumn() {
    ArrayList<String> allocationTypes = new ArrayList<String>();
    allocationTypes.add(constants.thinAllocation());
    allocationTypes.add(constants.preallocatedAllocation());
    customSelectionCellFormatType = new CustomSelectionCell(allocationTypes);
    customSelectionCellFormatType.setStyle(style.cellSelectBox());
    Column<DiskImage, String> allocationColumn = new Column<DiskImage, String>(customSelectionCellFormatType) {

        @Override
        public String getValue(DiskImage disk) {
            ImportDiskData importData = importModel.getDiskImportData(disk.getId());
            if (importData == null) {
                return "";
            }
            return new EnumRenderer<VolumeType>().render(VolumeType.forValue(importData.getSelectedVolumeType().getValue()));
        }
    };
    allocationColumn.setFieldUpdater(new FieldUpdater<DiskImage, String>() {

        @Override
        public void update(int index, DiskImage disk, String value) {
            VolumeType tempVolumeType = VolumeType.Sparse;
            if (value.equals(constants.thinAllocation())) {
                tempVolumeType = VolumeType.Sparse;
            } else if (value.equals(constants.preallocatedAllocation())) {
                tempVolumeType = VolumeType.Preallocated;
            }
            ImportDiskData importData = importModel.getDiskImportData(disk.getId());
            if (importData != null) {
                importData.setSelectedVolumeType(tempVolumeType);
            }
        }
    });
    // $NON-NLS-1$
    diskTable.addColumn(allocationColumn, constants.allocationDisk(), "150px");
}
#end_block

#method_before
private void addStorageDomainsColumn() {
    customSelectionCellStorageDomain = new CustomSelectionCell(new ArrayList<String>());
    customSelectionCellStorageDomain.setStyle(style.cellSelectBox());
    storageDomainsColumn = new Column<DiskImage, String>(customSelectionCellStorageDomain) {

        @Override
        public String getValue(DiskImage disk) {
            ImportDiskData importData = importModel.getDiskImportData(disk.getId());
            ArrayList<String> storageDomainsNameList = new ArrayList<String>();
            StorageDomain selectedStorageDomain = null;
            if (importData != null && importData.getStorageDomains() != null) {
                for (StorageDomain storageDomain : importData.getStorageDomains()) {
                    storageDomainsNameList.add(new StorageDomainFreeSpaceRenderer<StorageDomain>().render(storageDomain));
                    if (importData.getSelectedStorageDomain() != null) {
                        if (storageDomain.getId().equals(importData.getSelectedStorageDomain().getId())) {
                            selectedStorageDomain = storageDomain;
                        }
                    }
                }
            }
            ((CustomSelectionCell) getCell()).setOptions(storageDomainsNameList);
            if (!storageDomainsNameList.isEmpty()) {
                if (selectedStorageDomain != null) {
                    return new StorageDomainFreeSpaceRenderer<StorageDomain>().render(selectedStorageDomain);
                } else {
                    return storageDomainsNameList.get(0);
                }
            }
            return "";
        }
    };
    storageDomainsColumn.setFieldUpdater(new FieldUpdater<DiskImage, String>() {

        @Override
        public void update(int index, DiskImage disk, String value) {
            // $NON-NLS-1$
            String storageDomainName = value.substring(0, value.lastIndexOf(" ("));
            importModel.getDiskImportData(disk.getId()).setSelectedStorageDomainString(storageDomainName);
            diskTable.asEditor().edit(importModel.getImportDiskListModel());
        }
    });
    // $NON-NLS-1$
    diskTable.addColumn(storageDomainsColumn, constants.storageDomainDisk(), "100px");
}
#method_after
private void addStorageDomainsColumn() {
    customSelectionCellStorageDomain = new CustomSelectionCell(new ArrayList<String>());
    customSelectionCellStorageDomain.setStyle(style.cellSelectBox());
    storageDomainsColumn = new Column<DiskImage, String>(customSelectionCellStorageDomain) {

        @Override
        public String getValue(DiskImage disk) {
            ImportDiskData importData = importModel.getDiskImportData(disk.getId());
            ArrayList<String> storageDomainsNameList = new ArrayList<String>();
            StorageDomain selectedStorageDomain = null;
            if (importData != null && importData.getStorageDomains() != null) {
                for (StorageDomain storageDomain : importData.getStorageDomains()) {
                    storageDomainsNameList.add(new StorageDomainFreeSpaceRenderer<StorageDomain>().render(storageDomain));
                    if (importData.getSelectedStorageDomain() != null) {
                        if (storageDomain.getId().equals(importData.getSelectedStorageDomain().getId())) {
                            selectedStorageDomain = storageDomain;
                        }
                    }
                }
            }
            ((CustomSelectionCell) getCell()).setOptions(storageDomainsNameList);
            if (!storageDomainsNameList.isEmpty()) {
                if (selectedStorageDomain != null) {
                    return new StorageDomainFreeSpaceRenderer<StorageDomain>().render(selectedStorageDomain);
                } else {
                    return storageDomainsNameList.get(0);
                }
            }
            return "";
        }
    };
    storageDomainsColumn.setFieldUpdater(new FieldUpdater<DiskImage, String>() {

        @Override
        public void update(int index, DiskImage disk, String value) {
            // $NON-NLS-1$
            String storageDomainName = value.substring(0, value.lastIndexOf(" ("));
            importModel.getDiskImportData(disk.getId()).setSelectedStorageDomainString(storageDomainName);
            diskTable.asEditor().edit(importModel.getImportDiskListModel());
        }
    });
    // $NON-NLS-1$
    diskTable.addColumn(storageDomainsColumn, constants.storageDomainDisk(), "180px");
}
#end_block

#method_before
void initTable(final ApplicationConstants constants) {
    getTable().enableColumnResizing();
    TextColumnWithTooltip<VmTemplate> nameColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameTemplate(), "160px");
    TextColumnWithTooltip<VmTemplate> originColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            return object.getOrigin() == null ? messageConstants.notSpecifiedLabel() : object.getOrigin().toString();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(originColumn, constants.originTemplate(), "160px");
    TextColumnWithTooltip<VmTemplate> memoryColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            // $NON-NLS-1$
            return String.valueOf(object.getMemSizeMb()) + " MB";
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memoryColumn, constants.memoryTemplate(), "160px");
    TextColumnWithTooltip<VmTemplate> cpuColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            return String.valueOf(object.getNumOfCpus());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpusVm(), "160px");
    TextColumnWithTooltip<VmTemplate> archColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            return String.valueOf(object.getArchitecture());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(archColumn, constants.architectureVm(), "160px");
    TextColumnWithTooltip<VmTemplate> diskColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            return String.valueOf(object.getDiskList().size());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(diskColumn, constants.disksTemplate(), "160px");
    TextColumnWithTooltip<VmTemplate> creationDateColumn = new GeneralDateTimeColumn<VmTemplate>() {

        @Override
        protected Date getRawValue(VmTemplate object) {
            return object.getCreationDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(creationDateColumn, constants.creationDateTemplate(), "160px");
    TextColumnWithTooltip<VmTemplate> exportDateColumn = new GeneralDateTimeColumn<VmTemplate>() {

        @Override
        protected Date getRawValue(VmTemplate object) {
            return object.getExportDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(exportDateColumn, constants.exportDateTemplate(), "160px");
    getTable().addActionButton(new WebAdminButtonDefinition<VmTemplate>(constants.restoreVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRestoreCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VmTemplate>(constants.removeTemplate()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRemoveCommand();
        }
    });
    getTable().showRefreshButton();
}
#method_after
void initTable(final ApplicationConstants constants) {
    getTable().enableColumnResizing();
    TextColumnWithTooltip<VmTemplate> nameColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameTemplate(), "160px");
    TextColumnWithTooltip<VmTemplate> originColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            return object.getOrigin() == null ? messageConstants.notSpecifiedLabel() : object.getOrigin().toString();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(originColumn, constants.originTemplate(), "160px");
    TextColumnWithTooltip<VmTemplate> memoryColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            // $NON-NLS-1$
            return String.valueOf(object.getMemSizeMb()) + " MB";
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memoryColumn, constants.memoryTemplate(), "160px");
    TextColumnWithTooltip<VmTemplate> cpuColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            return String.valueOf(object.getNumOfCpus());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpusVm(), "160px");
    TextColumnWithTooltip<VmTemplate> archColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            return String.valueOf(object.getClusterArch());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(archColumn, constants.architectureVm(), "160px");
    TextColumnWithTooltip<VmTemplate> diskColumn = new TextColumnWithTooltip<VmTemplate>() {

        @Override
        public String getValue(VmTemplate object) {
            return String.valueOf(object.getDiskList().size());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(diskColumn, constants.disksTemplate(), "160px");
    TextColumnWithTooltip<VmTemplate> creationDateColumn = new GeneralDateTimeColumn<VmTemplate>() {

        @Override
        protected Date getRawValue(VmTemplate object) {
            return object.getCreationDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(creationDateColumn, constants.creationDateTemplate(), "160px");
    TextColumnWithTooltip<VmTemplate> exportDateColumn = new GeneralDateTimeColumn<VmTemplate>() {

        @Override
        protected Date getRawValue(VmTemplate object) {
            return object.getExportDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(exportDateColumn, constants.exportDateTemplate(), "160px");
    getTable().addActionButton(new WebAdminButtonDefinition<VmTemplate>(constants.restoreVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRestoreCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VmTemplate>(constants.removeTemplate()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRemoveCommand();
        }
    });
    getTable().showRefreshButton();
}
#end_block

#method_before
void initVmTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new VmStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VM> nameColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameVm(), "95px");
    TextColumnWithTooltip<VM> templateColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getVmtName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(templateColumn, constants.templateVm(), "95px");
    TextColumnWithTooltip<VM> originColumn = new EnumColumn<VM, OriginType>() {

        @Override
        protected OriginType getRawValue(VM object) {
            return object.getOrigin();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(originColumn, constants.originVm(), "95px");
    TextColumnWithTooltip<VM> memoryColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            // $NON-NLS-1$
            return String.valueOf(object.getVmMemSizeMb()) + " MB";
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memoryColumn, constants.memoryVm(), "95px");
    TextColumnWithTooltip<VM> cpuColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return String.valueOf(object.getNumOfCpus());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpusVm(), "95px");
    TextColumnWithTooltip<VM> archColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return String.valueOf(object.getArchitecture());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(archColumn, constants.architectureVm(), "95px");
    TextColumnWithTooltip<VM> diskColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return String.valueOf(object.getDiskMap().size());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(diskColumn, constants.disksVm(), "95px");
    TextColumnWithTooltip<VM> creationDateColumn = new GeneralDateTimeColumn<VM>() {

        @Override
        protected Date getRawValue(VM object) {
            return object.getVmCreationDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(creationDateColumn, constants.creationDateVm(), "95px");
    TextColumnWithTooltip<VM> exportDateColumn = new GeneralDateTimeColumn<VM>() {

        @Override
        protected Date getRawValue(VM object) {
            return object.getExportDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(exportDateColumn, constants.exportDateVm(), "95px");
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.restoreVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRestoreCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.removeVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRemoveCommand();
        }
    });
    getTable().showRefreshButton();
}
#method_after
void initVmTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new VmStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VM> nameColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameVm(), "95px");
    TextColumnWithTooltip<VM> templateColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getVmtName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(templateColumn, constants.templateVm(), "95px");
    TextColumnWithTooltip<VM> originColumn = new EnumColumn<VM, OriginType>() {

        @Override
        protected OriginType getRawValue(VM object) {
            return object.getOrigin();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(originColumn, constants.originVm(), "95px");
    TextColumnWithTooltip<VM> memoryColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            // $NON-NLS-1$
            return String.valueOf(object.getVmMemSizeMb()) + " MB";
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memoryColumn, constants.memoryVm(), "95px");
    TextColumnWithTooltip<VM> cpuColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return String.valueOf(object.getNumOfCpus());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpusVm(), "95px");
    TextColumnWithTooltip<VM> archColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return String.valueOf(object.getClusterArch());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(archColumn, constants.architectureVm(), "95px");
    TextColumnWithTooltip<VM> diskColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return String.valueOf(object.getDiskMap().size());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(diskColumn, constants.disksVm(), "95px");
    TextColumnWithTooltip<VM> creationDateColumn = new GeneralDateTimeColumn<VM>() {

        @Override
        protected Date getRawValue(VM object) {
            return object.getVmCreationDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(creationDateColumn, constants.creationDateVm(), "95px");
    TextColumnWithTooltip<VM> exportDateColumn = new GeneralDateTimeColumn<VM>() {

        @Override
        protected Date getRawValue(VM object) {
            return object.getExportDate();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(exportDateColumn, constants.exportDateVm(), "95px");
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.restoreVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRestoreCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.removeVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRemoveCommand();
        }
    });
    getTable().showRefreshButton();
}
#end_block

#method_before
public void init(Guid storageDomainId) {
    // get Storage pool
    AsyncDataProvider.getDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) returnValue;
            if (pools == null || pools.size() != 1) {
                return;
            }
            StoragePool dataCenter = pools.get(0);
            setStoragePool(dataCenter);
            // show quota
            if (dataCenter != null && dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
                hasQuota = true;
            }
            if (hasQuota) {
                getClusterQuota().setIsAvailable(true);
                getCluster().getSelectedItemChangedEvent().addListener(quotaClusterListener);
            }
            // get cluster
            if (dataCenter != null) {
                AsyncDataProvider.getClusterByServiceList(new AsyncQuery(ImportVmModel.this, new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object model, Object returnValue) {
                        ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
                        ImportVmModel importModel = (ImportVmModel) model;
                        ArchitectureType targetArch = importModel.getTargetArchitecture();
                        if (targetArch != null) {
                            List<VDSGroup> filteredClusters = AsyncDataProvider.filterByArchitecture(clusters, targetArch);
                            getCluster().setItems(filteredClusters);
                            getCluster().setSelectedItem(Linq.firstOrDefault(filteredClusters));
                        } else {
                            getCluster().setItems(clusters);
                            getCluster().setSelectedItem(Linq.firstOrDefault(clusters));
                        }
                        // get storage domains
                        AsyncDataProvider.getStorageDomainList(new AsyncQuery(ImportVmModel.this, new INewAsyncCallback() {

                            @Override
                            public void onSuccess(Object model, Object returnValue) {
                                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
                                // filter storage domains
                                filteredStorageDomains = new ArrayList<StorageDomain>();
                                for (StorageDomain domain : storageDomains) {
                                    if (Linq.isDataActiveStorageDomain(domain)) {
                                        filteredStorageDomains.add(domain);
                                    }
                                }
                                getStorage().setItems(filteredStorageDomains);
                                if (hasQuota) {
                                    initQuotaForStorageDomains();
                                } else {
                                    initDisksStorageDomainsList();
                                }
                            }
                        }), getStoragePool().getId());
                    }
                }), dataCenter.getId(), true, false);
            }
        }
    }), storageDomainId);
}
#method_after
public void init(List items, final Guid storageDomainId) {
    setItems(items, storageDomainId);
}
#end_block

#method_before
private void initQuotaForStorageDomains() {
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    ArrayList<VdcQueryParametersBase> queryParamsList = new ArrayList<VdcQueryParametersBase>();
    for (StorageDomain storage : filteredStorageDomains) {
        queryTypeList.add(VdcQueryType.GetAllRelevantQuotasForStorage);
        queryParamsList.add(new IdQueryParameters(storage.getId()));
    }
    storageQuotaMap = new HashMap<Guid, ArrayList<Quota>>();
    Frontend.RunMultipleQueries(queryTypeList, queryParamsList, new IFrontendMultipleQueryAsyncCallback() {

        @Override
        public void executed(FrontendMultipleQueryAsyncResult result) {
            List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
            boolean noQuota = true;
            for (int i = 0; i < filteredStorageDomains.size(); i++) {
                ArrayList<Quota> quotaList = (ArrayList<Quota>) returnValueList.get(i).getReturnValue();
                if (noQuota && !quotaList.isEmpty()) {
                    noQuota = false;
                }
                storageQuotaMap.put(filteredStorageDomains.get(i).getId(), quotaList);
            }
            if (noQuota && QuotaEnforcementTypeEnum.HARD_ENFORCEMENT.equals(storagePool.getQuotaEnforcementType())) {
                showCloseMessage(ConstantsManager.getInstance().getConstants().missingQuotaStorageEnforceMode());
            }
            initDisksStorageDomainsList();
        }
    });
}
#method_after
private void initQuotaForStorageDomains() {
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    ArrayList<VdcQueryParametersBase> queryParamsList = new ArrayList<VdcQueryParametersBase>();
    for (StorageDomain storage : filteredStorageDomains) {
        queryTypeList.add(VdcQueryType.GetAllRelevantQuotasForStorage);
        queryParamsList.add(new IdQueryParameters(storage.getId()));
    }
    storageQuotaMap = new HashMap<Guid, ArrayList<Quota>>();
    Frontend.getInstance().runMultipleQueries(queryTypeList, queryParamsList, new IFrontendMultipleQueryAsyncCallback() {

        @Override
        public void executed(FrontendMultipleQueryAsyncResult result) {
            List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
            boolean noQuota = true;
            for (int i = 0; i < filteredStorageDomains.size(); i++) {
                ArrayList<Quota> quotaList = (ArrayList<Quota>) returnValueList.get(i).getReturnValue();
                if (noQuota && !quotaList.isEmpty()) {
                    noQuota = false;
                }
                storageQuotaMap.put(filteredStorageDomains.get(i).getId(), quotaList);
            }
            if (noQuota && QuotaEnforcementTypeEnum.HARD_ENFORCEMENT.equals(storagePool.getQuotaEnforcementType())) {
                showCloseMessage(ConstantsManager.getInstance().getConstants().missingQuotaStorageEnforceMode());
            }
            initDisksStorageDomainsList();
        }
    });
}
#end_block

#method_before
protected void initDisksStorageDomainsList() {
    for (Object item : getItems()) {
        ImportVmData importVmData = (ImportVmData) item;
        VM vm = importVmData.getVm();
        if (!Guid.Empty.equals(vm.getVmtGuid())) {
            if (!templateDiskMap.containsKey(vm.getVmtGuid())) {
                templateDiskMap.put(vm.getVmtGuid(), new ArrayList<Disk>());
            }
            templateDiskMap.get(vm.getVmtGuid()).addAll(vm.getDiskMap().values());
        }
        for (Disk disk : vm.getDiskMap().values()) {
            DiskImage diskImage = (DiskImage) disk;
            addDiskImportData(diskImage.getId(), filteredStorageDomains, diskImage.getVolumeType(), importVmData.getCollapseSnapshots());
        }
    }
    if (!templateDiskMap.isEmpty()) {
        ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
        final ArrayList<VdcQueryParametersBase> queryParamsList = new ArrayList<VdcQueryParametersBase>();
        for (Guid templateId : templateDiskMap.keySet()) {
            queryTypeList.add(VdcQueryType.GetVmTemplatesDisks);
            queryParamsList.add(new IdQueryParameters(templateId));
        }
        Frontend.RunMultipleQueries(queryTypeList, queryParamsList, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void executed(FrontendMultipleQueryAsyncResult result) {
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                Map<Guid, ArrayList<StorageDomain>> templateDisksStorageDomains = new HashMap<Guid, ArrayList<StorageDomain>>();
                for (VdcQueryReturnValue returnValue : returnValueList) {
                    for (DiskImage diskImage : (ArrayList<DiskImage>) returnValue.getReturnValue()) {
                        templateDisksStorageDomains.put(diskImage.getImageId(), getStorageDomainsByIds(diskImage.getStorageIds()));
                    }
                }
                for (Entry<Guid, List<Disk>> guidListEntry : templateDiskMap.entrySet()) {
                    for (Disk disk : guidListEntry.getValue()) {
                        DiskImage diskImage = (DiskImage) disk;
                        if (diskImage.getParentId() != null && !Guid.Empty.equals(diskImage.getParentId())) {
                            ArrayList<StorageDomain> storageDomains = templateDisksStorageDomains.get(diskImage.getParentId());
                            if (storageDomains == null) {
                                missingTemplateDiskMap.put(guidListEntry.getKey(), guidListEntry.getValue());
                            }
                        }
                    }
                }
                if (!missingTemplateDiskMap.keySet().isEmpty()) {
                    getTemplatesFromExportDomain();
                } else {
                    postInitDisks();
                }
            }
        });
    } else {
        postInitDisks();
    }
}
#method_after
protected void initDisksStorageDomainsList() {
    for (Object item : getItems()) {
        ImportVmData importVmData = (ImportVmData) item;
        VM vm = importVmData.getVm();
        if (!Guid.Empty.equals(vm.getVmtGuid())) {
            if (!templateDiskMap.containsKey(vm.getVmtGuid())) {
                templateDiskMap.put(vm.getVmtGuid(), new ArrayList<Disk>());
            }
            templateDiskMap.get(vm.getVmtGuid()).addAll(extractRootDisks(vm));
        }
        for (Disk disk : vm.getDiskMap().values()) {
            DiskImage diskImage = (DiskImage) disk;
            addDiskImportData(diskImage.getId(), filteredStorageDomains, diskImage.getVolumeType(), importVmData.getCollapseSnapshots());
        }
    }
    if (!templateDiskMap.isEmpty()) {
        ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
        final ArrayList<VdcQueryParametersBase> queryParamsList = new ArrayList<VdcQueryParametersBase>();
        for (Guid templateId : templateDiskMap.keySet()) {
            queryTypeList.add(VdcQueryType.GetVmTemplatesDisks);
            queryParamsList.add(new IdQueryParameters(templateId));
        }
        Frontend.getInstance().runMultipleQueries(queryTypeList, queryParamsList, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void executed(FrontendMultipleQueryAsyncResult result) {
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                Map<Guid, ArrayList<StorageDomain>> templateDisksStorageDomains = new HashMap<Guid, ArrayList<StorageDomain>>();
                for (VdcQueryReturnValue returnValue : returnValueList) {
                    for (DiskImage diskImage : (ArrayList<DiskImage>) returnValue.getReturnValue()) {
                        templateDisksStorageDomains.put(diskImage.getImageId(), getStorageDomainsByIds(diskImage.getStorageIds()));
                    }
                }
                for (Entry<Guid, List<Disk>> guidListEntry : templateDiskMap.entrySet()) {
                    for (Disk disk : guidListEntry.getValue()) {
                        DiskImage diskImage = (DiskImage) disk;
                        if (diskImage.getParentId() != null && !Guid.Empty.equals(diskImage.getParentId())) {
                            ArrayList<StorageDomain> storageDomains = templateDisksStorageDomains.get(diskImage.getParentId());
                            if (storageDomains == null) {
                                missingTemplateDiskMap.put(guidListEntry.getKey(), guidListEntry.getValue());
                            }
                        }
                    }
                }
                if (!missingTemplateDiskMap.keySet().isEmpty()) {
                    getTemplatesFromExportDomain();
                } else {
                    postInitDisks();
                }
            }
        });
    } else {
        postInitDisks();
    }
}
#end_block

#method_before
protected void getTemplatesFromExportDomain() {
    GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(storagePool.getId(), ((StorageDomain) getEntity()).getId());
    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar, new AsyncQuery(ImportVmModel.this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            Map<VmTemplate, List<DiskImage>> dictionary = (HashMap<VmTemplate, List<DiskImage>>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            Map<Guid, Guid> tempMap = new HashMap<Guid, Guid>();
            for (Entry<VmTemplate, List<DiskImage>> entry : dictionary.entrySet()) {
                tempMap.put(entry.getKey().getId(), null);
            }
            for (Entry<Guid, List<Disk>> missingTemplateEntry : missingTemplateDiskMap.entrySet()) {
                if (tempMap.containsKey(missingTemplateEntry.getKey())) {
                    for (Disk disk : missingTemplateEntry.getValue()) {
                        addDiskImportData(disk.getId(), filteredStorageDomains, ((DiskImage) disk).getVolumeType(), new EntityModel(true));
                    }
                } else {
                    showCloseMessage(ConstantsManager.getInstance().getConstants().errorTemplateCannotBeFoundMessage());
                    return;
                }
            }
            ImportVmModel.this.setMessage(ConstantsManager.getInstance().getConstants().importMissingStorages());
            for (ImportVmData vmData : (List<ImportVmData>) getItems()) {
                if (!Guid.Empty.equals(vmData.getVm().getVmtGuid()) && missingTemplateDiskMap.containsKey(vmData.getVm().getVmtGuid())) {
                    vmData.setTemplateExistsInSetup(false);
                }
            }
            postInitDisks();
        }
    }));
}
#method_after
protected void getTemplatesFromExportDomain() {
    GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(storagePool.getId(), ((StorageDomain) getEntity()).getId());
    Frontend.getInstance().runQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar, new AsyncQuery(ImportVmModel.this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            Map<VmTemplate, List<DiskImage>> dictionary = (HashMap<VmTemplate, List<DiskImage>>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            Map<Guid, Guid> tempMap = new HashMap<Guid, Guid>();
            for (Entry<VmTemplate, List<DiskImage>> entry : dictionary.entrySet()) {
                tempMap.put(entry.getKey().getId(), null);
            }
            for (Entry<Guid, List<Disk>> missingTemplateEntry : missingTemplateDiskMap.entrySet()) {
                if (tempMap.containsKey(missingTemplateEntry.getKey())) {
                    for (Disk disk : missingTemplateEntry.getValue()) {
                        addDiskImportData(disk.getId(), filteredStorageDomains, ((DiskImage) disk).getVolumeType(), new EntityModel(true));
                    }
                } else {
                    showCloseMessage(ConstantsManager.getInstance().getConstants().errorTemplateCannotBeFoundMessage());
                    return;
                }
            }
            ImportVmModel.this.setMessage(ConstantsManager.getInstance().getConstants().importMissingStorages());
            for (ImportVmData vmData : (List<ImportVmData>) getItems()) {
                if (!Guid.Empty.equals(vmData.getVm().getVmtGuid()) && missingTemplateDiskMap.containsKey(vmData.getVm().getVmtGuid())) {
                    vmData.setTemplateExistsInSetup(false);
                }
            }
            postInitDisks();
        }
    }));
}
#end_block

#method_before
@Override
public void setItems(final Iterable value) {
    // $NON-NLS-1$
    String vm_guidKey = "ID =";
    // $NON-NLS-1$
    String orKey = " or ";
    StringBuilder searchPattern = new StringBuilder();
    // $NON-NLS-1$
    searchPattern.append("VM: ");
    final List<VM> list = (List<VM>) value;
    for (int i = 0; i < list.size(); i++) {
        VM vm = list.get(i);
        searchPattern.append(vm_guidKey);
        searchPattern.append(vm.getId().toString());
        if (i < list.size() - 1) {
            searchPattern.append(orKey);
        }
    }
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(searchPattern.toString(), SearchType.VM), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            List<VM> vmList = (List<VM>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<ImportVmData> vmDataList = new ArrayList<ImportVmData>();
            for (VM vm : (Iterable<VM>) value) {
                ImportVmData vmData = new ImportVmData(vm);
                boolean vmExistsInSystem = vmList.contains(vm);
                vmData.setExistsInSystem(vmExistsInSystem);
                if (vmExistsInSystem) {
                    vmData.getClone().setEntity(true);
                    vmData.getClone().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().importVMThatExistsInSystemMustClone());
                    vmData.getClone().setIsChangable(false);
                }
                vmDataList.add(vmData);
            }
            ImportVmModel.super.setItems(vmDataList);
        }
    }));
}
#method_after
public void setItems(final Iterable value, final Guid storageDomainId) {
    // $NON-NLS-1$
    String vm_guidKey = "ID =";
    // $NON-NLS-1$
    String orKey = " or ";
    StringBuilder searchPattern = new StringBuilder();
    // $NON-NLS-1$
    searchPattern.append("VM: ");
    final List<VM> list = (List<VM>) value;
    for (int i = 0; i < list.size(); i++) {
        VM vm = list.get(i);
        searchPattern.append(vm_guidKey);
        searchPattern.append(vm.getId().toString());
        if (i < list.size() - 1) {
            searchPattern.append(orKey);
        }
    }
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters(searchPattern.toString(), SearchType.VM), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            List<VM> vmList = (List<VM>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<ImportVmData> vmDataList = new ArrayList<ImportVmData>();
            for (VM vm : (Iterable<VM>) value) {
                ImportVmData vmData = new ImportVmData(vm);
                boolean vmExistsInSystem = vmList.contains(vm);
                vmData.setExistsInSystem(vmExistsInSystem);
                if (vmExistsInSystem) {
                    vmData.getClone().setEntity(true);
                    vmData.getClone().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().importVMThatExistsInSystemMustClone());
                    vmData.getClone().setIsChangable(false);
                }
                vmDataList.add(vmData);
            }
            ImportVmModel.super.setItems(vmDataList);
            doInit(storageDomainId);
        }
    }));
}
#end_block

#method_before
@Override
protected void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeBackedUpTemplatesTitle());
    // $NON-NLS-1$
    model.setHashName("remove_backed_up_template");
    model.setMessage(ConstantsManager.getInstance().getConstants().templatesMsg());
    ArrayList<String> items = new ArrayList<String>();
    for (Object a : getSelectedItems()) {
        VmTemplate template = (VmTemplate) a;
        items.add(template.getName());
    }
    model.setItems(items);
    model.setNote(ConstantsManager.getInstance().getConstants().noteTheDeletedItemsMightStillAppearOntheSubTab());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
@Override
protected void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeBackedUpTemplatesTitle());
    // $NON-NLS-1$
    model.setHashName("remove_backed_up_template");
    ArrayList<String> items = new ArrayList<String>();
    for (Object a : getSelectedItems()) {
        VmTemplate template = (VmTemplate) a;
        items.add(template.getName());
    }
    model.setItems(items);
    model.setNote(ConstantsManager.getInstance().getConstants().noteTheDeletedItemsMightStillAppearOntheSubTab());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void onRemove() {
    AsyncDataProvider.getDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            TemplateBackupModel templateBackupModel = (TemplateBackupModel) model;
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) returnValue;
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
                for (Object a : templateBackupModel.getSelectedItems()) {
                    VmTemplate template = (VmTemplate) a;
                    prms.add(new VmTemplateImportExportParameters(template.getId(), getEntity().getId(), pool.getId()));
                }
                Frontend.RunMultipleAction(VdcActionType.RemoveVmTemplateFromImportExport, prms);
            }
        }
    }), getEntity().getId());
    cancel();
}
#method_after
private void onRemove() {
    AsyncDataProvider.getDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            TemplateBackupModel templateBackupModel = (TemplateBackupModel) model;
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) returnValue;
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
                for (Object a : templateBackupModel.getSelectedItems()) {
                    VmTemplate template = (VmTemplate) a;
                    prms.add(new VmTemplateImportExportParameters(template.getId(), getEntity().getId(), pool.getId()));
                }
                Frontend.getInstance().runMultipleAction(VdcActionType.RemoveVmTemplateFromImportExport, prms);
            }
        }
    }), getEntity().getId());
    cancel();
}
#end_block

#method_before
@Override
protected ArchitectureType getArchitectureFromItem(Object item) {
    VmBase template = (VmBase) item;
    return template.getArchitecture();
}
#method_after
@Override
protected ArchitectureType getArchitectureFromItem(Object item) {
    VmTemplate template = (VmTemplate) item;
    return template.getClusterArch();
}
#end_block

#method_before
@Override
protected void executeImport() {
    ImportTemplateModel model = (ImportTemplateModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object object : importModel.getItems()) {
        ImportTemplateData importData = (ImportTemplateData) object;
        VmTemplate template = importData.getTemplate();
        ImportVmTemplateParameters importVmTemplateParameters = new ImportVmTemplateParameters(model.getStoragePool().getId(), getEntity().getId(), Guid.Empty, ((VDSGroup) model.getCluster().getSelectedItem()).getId(), template);
        if (importModel.getClusterQuota().getSelectedItem() != null && importModel.getClusterQuota().getIsAvailable()) {
            importVmTemplateParameters.setQuotaId(((Quota) importModel.getClusterQuota().getSelectedItem()).getId());
        }
        Map<Guid, Guid> map = new HashMap<Guid, Guid>();
        for (DiskImage disk : template.getDiskList()) {
            map.put(disk.getId(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getId());
            if (importModel.getDiskImportData(disk.getId()).getSelectedQuota() != null) {
                disk.setQuotaId(importModel.getDiskImportData(disk.getId()).getSelectedQuota().getId());
            }
        }
        importVmTemplateParameters.setImageToDestinationDomainMap(map);
        if (importData.isExistsInSystem() || (Boolean) importData.getClone().getEntity()) {
            if (!cloneObjectMap.containsKey(template.getId())) {
                continue;
            }
            importVmTemplateParameters.setImportAsNewEntity(true);
            importVmTemplateParameters.getVmTemplate().setName(((ImportTemplateData) cloneObjectMap.get(template.getId())).getTemplate().getName());
        }
        prms.add(importVmTemplateParameters);
    }
    model.startProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ImportVmTemplate, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            TemplateBackupModel templateBackupModel = (TemplateBackupModel) result.getState();
            templateBackupModel.getWindow().stopProgress();
            templateBackupModel.cancel();
            ArrayList<VdcReturnValueBase> retVals = (ArrayList<VdcReturnValueBase>) result.getReturnValue();
            if (retVals != null && templateBackupModel.getSelectedItems().size() == retVals.size()) {
                StringBuilder importedTemplates = new StringBuilder();
                int counter = 0;
                boolean toShowConfirmWindow = false;
                for (Object a : templateBackupModel.getSelectedItems()) {
                    VmTemplate template = (VmTemplate) a;
                    if (retVals.get(counter) != null && retVals.get(counter).getCanDoAction()) {
                        // $NON-NLS-1$
                        importedTemplates.append(template.getName()).append(", ");
                        toShowConfirmWindow = true;
                    }
                    counter++;
                }
                if (toShowConfirmWindow) {
                    ConfirmationModel confirmModel = new ConfirmationModel();
                    templateBackupModel.setConfirmWindow(confirmModel);
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().importTemplatesTitle());
                    // $NON-NLS-1$
                    confirmModel.setHashName("import_template");
                    confirmModel.setMessage(ConstantsManager.getInstance().getMessages().importProcessHasBegunForTemplates(StringHelper.trimEnd(importedTemplates.toString().trim(), ',')));
                    // $NON-NLS-1$
                    UICommand tempVar = new UICommand("CancelConfirm", templateBackupModel);
                    tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
                    tempVar.setIsDefault(true);
                    tempVar.setIsCancel(true);
                    confirmModel.getCommands().add(tempVar);
                }
            }
        }
    }, this);
}
#method_after
@Override
protected void executeImport() {
    ImportTemplateModel model = (ImportTemplateModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object object : importModel.getItems()) {
        ImportTemplateData importData = (ImportTemplateData) object;
        VmTemplate template = importData.getTemplate();
        ImportVmTemplateParameters importVmTemplateParameters = new ImportVmTemplateParameters(model.getStoragePool().getId(), getEntity().getId(), Guid.Empty, ((VDSGroup) model.getCluster().getSelectedItem()).getId(), template);
        if (importModel.getClusterQuota().getSelectedItem() != null && importModel.getClusterQuota().getIsAvailable()) {
            importVmTemplateParameters.setQuotaId(((Quota) importModel.getClusterQuota().getSelectedItem()).getId());
        }
        Map<Guid, Guid> map = new HashMap<Guid, Guid>();
        for (DiskImage disk : template.getDiskList()) {
            map.put(disk.getId(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getId());
            if (importModel.getDiskImportData(disk.getId()).getSelectedQuota() != null) {
                disk.setQuotaId(importModel.getDiskImportData(disk.getId()).getSelectedQuota().getId());
            }
        }
        importVmTemplateParameters.setImageToDestinationDomainMap(map);
        if (importData.isExistsInSystem() || (Boolean) importData.getClone().getEntity()) {
            if (!cloneObjectMap.containsKey(template.getId())) {
                continue;
            }
            importVmTemplateParameters.setImportAsNewEntity(true);
            importVmTemplateParameters.getVmTemplate().setName(((ImportTemplateData) cloneObjectMap.get(template.getId())).getTemplate().getName());
        }
        prms.add(importVmTemplateParameters);
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.ImportVmTemplate, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            TemplateBackupModel templateBackupModel = (TemplateBackupModel) result.getState();
            templateBackupModel.getWindow().stopProgress();
            templateBackupModel.cancel();
            ArrayList<VdcReturnValueBase> retVals = (ArrayList<VdcReturnValueBase>) result.getReturnValue();
            if (retVals != null && templateBackupModel.getSelectedItems().size() == retVals.size()) {
                StringBuilder importedTemplates = new StringBuilder();
                int counter = 0;
                boolean toShowConfirmWindow = false;
                for (Object a : templateBackupModel.getSelectedItems()) {
                    VmTemplate template = (VmTemplate) a;
                    if (retVals.get(counter) != null && retVals.get(counter).getCanDoAction()) {
                        // $NON-NLS-1$
                        importedTemplates.append(template.getName()).append(", ");
                        toShowConfirmWindow = true;
                    }
                    counter++;
                }
                if (toShowConfirmWindow) {
                    ConfirmationModel confirmModel = new ConfirmationModel();
                    templateBackupModel.setConfirmWindow(confirmModel);
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().importTemplatesTitle());
                    // $NON-NLS-1$
                    confirmModel.setHashName("import_template");
                    confirmModel.setMessage(ConstantsManager.getInstance().getMessages().importProcessHasBegunForTemplates(StringHelper.trimEnd(importedTemplates.toString().trim(), ',')));
                    // $NON-NLS-1$
                    UICommand tempVar = new UICommand("CancelConfirm", templateBackupModel);
                    tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
                    tempVar.setIsDefault(true);
                    tempVar.setIsCancel(true);
                    confirmModel.getCommands().add(tempVar);
                }
            }
        }
    }, this);
}
#end_block

#method_before
@Override
protected void syncSearch() {
    if (getEntity() == null || getEntity().getStorageDomainType() != StorageDomainType.ImportExport || getEntity().getStorageDomainSharedStatus() != StorageDomainSharedStatus.Active) {
        setItems(Collections.emptyList());
    } else {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object ReturnValue) {
                TemplateBackupModel backupModel = (TemplateBackupModel) model;
                ArrayList<StoragePool> list = (ArrayList<StoragePool>) ReturnValue;
                if (list != null && list.size() > 0) {
                    StoragePool dataCenter = list.get(0);
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(backupModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model1, Object ReturnValue1) {
                            TemplateBackupModel backupModel1 = (TemplateBackupModel) model1;
                            ArrayList<Map.Entry<VmTemplate, List<DiskImage>>> items = new ArrayList<Map.Entry<VmTemplate, List<DiskImage>>>();
                            HashMap<VmTemplate, List<DiskImage>> dictionary = (HashMap<VmTemplate, List<DiskImage>>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
                            for (Map.Entry<VmTemplate, List<DiskImage>> item : dictionary.entrySet()) {
                                items.add(item);
                                VmTemplate template = item.getKey();
                                template.setDiskList(new ArrayList<DiskImage>());
                                template.getDiskList().addAll(item.getValue());
                                list.add(template);
                            }
                            backupModel1.setItems(list);
                            TemplateBackupModel.this.extendedItems = items;
                        }
                    };
                    GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(dataCenter.getId(), backupModel.getEntity().getId());
                    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar, _asyncQuery1);
                }
            }
        };
        AsyncDataProvider.getDataCentersByStorageDomain(_asyncQuery, getEntity().getId());
    }
}
#method_after
@Override
protected void syncSearch() {
    if (getEntity() == null || getEntity().getStorageDomainType() != StorageDomainType.ImportExport || getEntity().getStorageDomainSharedStatus() != StorageDomainSharedStatus.Active) {
        setItems(Collections.emptyList());
    } else {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object ReturnValue) {
                TemplateBackupModel backupModel = (TemplateBackupModel) model;
                ArrayList<StoragePool> list = (ArrayList<StoragePool>) ReturnValue;
                if (list != null && list.size() > 0) {
                    StoragePool dataCenter = list.get(0);
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(backupModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model1, Object ReturnValue1) {
                            TemplateBackupModel backupModel1 = (TemplateBackupModel) model1;
                            ArrayList<Map.Entry<VmTemplate, List<DiskImage>>> items = new ArrayList<Map.Entry<VmTemplate, List<DiskImage>>>();
                            HashMap<VmTemplate, List<DiskImage>> dictionary = (HashMap<VmTemplate, List<DiskImage>>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
                            for (Map.Entry<VmTemplate, List<DiskImage>> item : dictionary.entrySet()) {
                                items.add(item);
                                VmTemplate template = item.getKey();
                                template.setDiskList(new ArrayList<DiskImage>());
                                template.getDiskList().addAll(item.getValue());
                                list.add(template);
                            }
                            backupModel1.setItems(list);
                            TemplateBackupModel.this.extendedItems = items;
                        }
                    };
                    GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(dataCenter.getId(), backupModel.getEntity().getId());
                    Frontend.getInstance().runQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar, _asyncQuery1);
                }
            }
        };
        AsyncDataProvider.getDataCentersByStorageDomain(_asyncQuery, getEntity().getId());
    }
}
#end_block

#method_before
@Override
protected void remove() {
    super.remove();
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeBackedUpVMsTitle());
    // $NON-NLS-1$
    model.setHashName("remove_backed_up_vm");
    model.setMessage(ConstantsManager.getInstance().getConstants().vmsMsg());
    ArrayList<String> items = new ArrayList<String>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        items.add(vm.getName());
    }
    model.setItems(items);
    model.setNote(ConstantsManager.getInstance().getConstants().noteTheDeletedItemsMightStillAppearOntheSubTab());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
@Override
protected void remove() {
    super.remove();
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeBackedUpVMsTitle());
    // $NON-NLS-1$
    model.setHashName("remove_backed_up_vm");
    ArrayList<String> items = new ArrayList<String>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        items.add(vm.getName());
    }
    model.setItems(items);
    model.setNote(ConstantsManager.getInstance().getConstants().noteTheDeletedItemsMightStillAppearOntheSubTab());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void onRemove() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    model.startProgress(null);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.Model = this;
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) returnValue;
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                VmBackupModel backupModel = (VmBackupModel) model;
                ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
                for (Object item : backupModel.getSelectedItems()) {
                    VM vm = (VM) item;
                    list.add(new RemoveVmFromImportExportParameters(vm.getId(), backupModel.getEntity().getId(), pool.getId()));
                }
                Frontend.RunMultipleAction(VdcActionType.RemoveVmFromImportExport, list, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void executed(FrontendMultipleActionAsyncResult result) {
                        ConfirmationModel localModel = (ConfirmationModel) result.getState();
                        localModel.stopProgress();
                        cancel();
                        onEntityChanged();
                    }
                }, backupModel.getWindow());
            }
        }
    };
    AsyncDataProvider.getDataCentersByStorageDomain(_asyncQuery, getEntity().getId());
}
#method_after
private void onRemove() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    model.startProgress(null);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.Model = this;
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) returnValue;
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                VmBackupModel backupModel = (VmBackupModel) model;
                ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
                for (Object item : backupModel.getSelectedItems()) {
                    VM vm = (VM) item;
                    list.add(new RemoveVmFromImportExportParameters(vm.getId(), backupModel.getEntity().getId(), pool.getId()));
                }
                Frontend.getInstance().runMultipleAction(VdcActionType.RemoveVmFromImportExport, list, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void executed(FrontendMultipleActionAsyncResult result) {
                        ConfirmationModel localModel = (ConfirmationModel) result.getState();
                        localModel.stopProgress();
                        cancel();
                        onEntityChanged();
                    }
                }, backupModel.getWindow());
            }
        }
    };
    AsyncDataProvider.getDataCentersByStorageDomain(_asyncQuery, getEntity().getId());
}
#end_block

#method_before
protected ArchitectureType getArchitectureFromItem(Object item) {
    VM vm = (VM) item;
    return vm.getArchitecture();
}
#method_after
protected ArchitectureType getArchitectureFromItem(Object item) {
    VM vm = (VM) item;
    return vm.getClusterArch();
}
#end_block

#method_before
@Override
protected void restore() {
    super.restore();
    if (getWindow() != null) {
        return;
    }
    // Checks if there are selected VMs of multiple architectures
    ArchitectureType firstArch = null;
    boolean multipleArchs = false;
    for (Object item : getSelectedItems()) {
        ArchitectureType arch = getArchitectureFromItem(item);
        if (firstArch == null) {
            firstArch = arch;
        } else {
            if (!firstArch.equals(arch)) {
                multipleArchs = true;
            }
        }
    }
    if (multipleArchs) {
        ConfirmationModel confirmModel = new ConfirmationModel();
        setConfirmWindow(confirmModel);
        confirmModel.setTitle(ConstantsManager.getInstance().getConstants().invalidImportTitle());
        // $NON-NLS-1$
        confirmModel.setHashName("multiple_archs_dialog");
        confirmModel.setMessage(ConstantsManager.getInstance().getConstants().invalidImportMsg());
        // $NON-NLS-1$
        UICommand command = new UICommand("multipleArchsOK", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().ok());
        command.setIsDefault(true);
        confirmModel.getCommands().add(command);
        setConfirmWindow(confirmModel);
        return;
    }
    ImportVmModel model = getImportModel();
    setWindow(model);
    model.startProgress(null);
    UICommand restoreCommand;
    // $NON-NLS-1$
    restoreCommand = new UICommand("OnRestore", this);
    restoreCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    restoreCommand.setIsDefault(true);
    model.getCommands().add(restoreCommand);
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("Cancel", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar3.setIsCancel(true);
    model.getCommands().add(tempVar3);
    model.setItems(getSelectedItems());
    model.init(getEntity().getId());
    model.setTargetArchitecture(firstArch);
    // Add 'Close' command
    // $NON-NLS-1$
    UICommand closeCommand = new UICommand("Cancel", this);
    closeCommand.setTitle(ConstantsManager.getInstance().getConstants().close());
    closeCommand.setIsDefault(true);
    closeCommand.setIsCancel(true);
    model.setCloseCommand(closeCommand);
}
#method_after
@Override
protected void restore() {
    super.restore();
    if (getWindow() != null) {
        return;
    }
    // Checks if there are selected VMs of multiple architectures
    ArchitectureType firstArch = null;
    boolean multipleArchs = false;
    for (Object item : getSelectedItems()) {
        ArchitectureType arch = getArchitectureFromItem(item);
        if (firstArch == null) {
            firstArch = arch;
        } else {
            if (!firstArch.equals(arch)) {
                multipleArchs = true;
                break;
            }
        }
    }
    if (multipleArchs) {
        ConfirmationModel confirmModel = new ConfirmationModel();
        setConfirmWindow(confirmModel);
        confirmModel.setTitle(ConstantsManager.getInstance().getConstants().invalidImportTitle());
        // $NON-NLS-1$
        confirmModel.setHashName("multiple_archs_dialog");
        confirmModel.setMessage(ConstantsManager.getInstance().getConstants().invalidImportMsg());
        // $NON-NLS-1$
        UICommand command = new UICommand("multipleArchsOK", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().ok());
        command.setIsDefault(true);
        confirmModel.getCommands().add(command);
        setConfirmWindow(confirmModel);
        return;
    }
    ImportVmModel model = getImportModel();
    setWindow(model);
    model.startProgress(null);
    UICommand restoreCommand;
    // $NON-NLS-1$
    restoreCommand = new UICommand("OnRestore", this);
    restoreCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    restoreCommand.setIsDefault(true);
    model.getCommands().add(restoreCommand);
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("Cancel", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar3.setIsCancel(true);
    model.getCommands().add(tempVar3);
    model.init(getSelectedItems(), getEntity().getId());
    model.setTargetArchitecture(firstArch);
    // Add 'Close' command
    // $NON-NLS-1$
    UICommand closeCommand = new UICommand("Cancel", this);
    closeCommand.setTitle(ConstantsManager.getInstance().getConstants().close());
    closeCommand.setIsDefault(true);
    closeCommand.setIsCancel(true);
    model.setCloseCommand(closeCommand);
}
#end_block

#method_before
protected int getMaxClonedNameLength(Object object) {
    VM vm = ((ImportVmData) object).getVm();
    return AsyncDataProvider.isWindowsOsType(vm.getOs()) ? UnitVmModel.WINDOWS_VM_NAME_MAX_LIMIT : UnitVmModel.NON_WINDOWS_VM_NAME_MAX_LIMIT;
}
#method_after
protected int getMaxClonedNameLength(Object object) {
    VM vm = ((ImportVmData) object).getVm();
    return AsyncDataProvider.isWindowsOsType(vm.getOs()) ? AsyncDataProvider.getMaxVmNameLengthWin() : AsyncDataProvider.getMaxVmNameLengthNonWin();
}
#end_block

#method_before
protected void executeImport() {
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object item : importModel.getItems()) {
        VM vm = ((ImportVmData) item).getVm();
        ImportVmParameters prm = new ImportVmParameters(vm, getEntity().getId(), Guid.Empty, importModel.getStoragePool().getId(), ((VDSGroup) importModel.getCluster().getSelectedItem()).getId());
        if (importModel.getClusterQuota().getSelectedItem() != null && importModel.getClusterQuota().getIsAvailable()) {
            prm.setQuotaId(((Quota) importModel.getClusterQuota().getSelectedItem()).getId());
        }
        prm.setForceOverride(true);
        prm.setCopyCollapse((Boolean) ((ImportVmData) item).getCollapseSnapshots().getEntity());
        Map<Guid, Guid> map = new HashMap<Guid, Guid>();
        for (Map.Entry<Guid, Disk> entry : vm.getDiskMap().entrySet()) {
            DiskImage disk = (DiskImage) entry.getValue();
            map.put(disk.getId(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getId());
            disk.setvolumeFormat(AsyncDataProvider.getDiskVolumeFormat(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getStorageType()));
            disk.setVolumeType(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType());
            if (importModel.getDiskImportData(disk.getId()).getSelectedQuota() != null) {
                disk.setQuotaId(importModel.getDiskImportData(disk.getId()).getSelectedQuota().getId());
            }
        }
        prm.setImageToDestinationDomainMap(map);
        if (((ImportVmData) item).isExistsInSystem() || (Boolean) ((ImportVmData) item).getClone().getEntity()) {
            if (!cloneObjectMap.containsKey(vm.getId())) {
                continue;
            }
            prm.setImportAsNewEntity(true);
            prm.setCopyCollapse(true);
            prm.getVm().setName(((ImportVmData) cloneObjectMap.get(vm.getId())).getVm().getName());
        }
        prms.add(prm);
    }
    importModel.startProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ImportVm, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            VmBackupModel vmBackupModel = (VmBackupModel) result.getState();
            vmBackupModel.getWindow().stopProgress();
            vmBackupModel.cancel();
            ArrayList<VdcReturnValueBase> retVals = (ArrayList<VdcReturnValueBase>) result.getReturnValue();
            if (retVals != null && vmBackupModel.getSelectedItems().size() == retVals.size()) {
                StringBuilder importedVms = new StringBuilder();
                int counter = 0;
                boolean toShowConfirmWindow = false;
                for (Object item : vmBackupModel.getSelectedItems()) {
                    VM vm = (VM) item;
                    if (retVals.get(counter) != null && retVals.get(counter).getCanDoAction()) {
                        // $NON-NLS-1$
                        importedVms.append(vm.getName()).append(", ");
                        toShowConfirmWindow = true;
                    }
                    counter++;
                }
                // VM
                if (toShowConfirmWindow) {
                    ConfirmationModel confirmModel = new ConfirmationModel();
                    vmBackupModel.setConfirmWindow(confirmModel);
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle());
                    // $NON-NLS-1$
                    confirmModel.setHashName("import_virtual_machine");
                    confirmModel.setMessage(ConstantsManager.getInstance().getMessages().importProcessHasBegunForVms(StringHelper.trimEnd(importedVms.toString().trim(), ',')));
                    UICommand tempVar2 = new // $NON-NLS-1$
                    UICommand(// $NON-NLS-1$
                    "CancelConfirm", vmBackupModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                    tempVar2.setIsDefault(true);
                    tempVar2.setIsCancel(true);
                    confirmModel.getCommands().add(tempVar2);
                }
            }
        }
    }, this);
}
#method_after
protected void executeImport() {
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object item : importModel.getItems()) {
        VM vm = ((ImportVmData) item).getVm();
        ImportVmParameters prm = new ImportVmParameters(vm, getEntity().getId(), Guid.Empty, importModel.getStoragePool().getId(), ((VDSGroup) importModel.getCluster().getSelectedItem()).getId());
        if (importModel.getClusterQuota().getSelectedItem() != null && importModel.getClusterQuota().getIsAvailable()) {
            prm.setQuotaId(((Quota) importModel.getClusterQuota().getSelectedItem()).getId());
        }
        prm.setForceOverride(true);
        prm.setCopyCollapse((Boolean) ((ImportVmData) item).getCollapseSnapshots().getEntity());
        Map<Guid, Guid> map = new HashMap<Guid, Guid>();
        for (Map.Entry<Guid, Disk> entry : vm.getDiskMap().entrySet()) {
            DiskImage disk = (DiskImage) entry.getValue();
            map.put(disk.getId(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getId());
            disk.setvolumeFormat(AsyncDataProvider.getDiskVolumeFormat(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getStorageType()));
            disk.setVolumeType(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType());
            if (importModel.getDiskImportData(disk.getId()).getSelectedQuota() != null) {
                disk.setQuotaId(importModel.getDiskImportData(disk.getId()).getSelectedQuota().getId());
            }
        }
        prm.setImageToDestinationDomainMap(map);
        if (((ImportVmData) item).isExistsInSystem() || (Boolean) ((ImportVmData) item).getClone().getEntity()) {
            if (!cloneObjectMap.containsKey(vm.getId())) {
                continue;
            }
            prm.setImportAsNewEntity(true);
            prm.setCopyCollapse(true);
            prm.getVm().setName(((ImportVmData) cloneObjectMap.get(vm.getId())).getVm().getName());
        }
        prms.add(prm);
    }
    importModel.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.ImportVm, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            VmBackupModel vmBackupModel = (VmBackupModel) result.getState();
            vmBackupModel.getWindow().stopProgress();
            vmBackupModel.cancel();
            ArrayList<VdcReturnValueBase> retVals = (ArrayList<VdcReturnValueBase>) result.getReturnValue();
            if (retVals != null && vmBackupModel.getSelectedItems().size() == retVals.size()) {
                StringBuilder importedVms = new StringBuilder();
                int counter = 0;
                boolean toShowConfirmWindow = false;
                for (Object item : vmBackupModel.getSelectedItems()) {
                    VM vm = (VM) item;
                    if (retVals.get(counter) != null && retVals.get(counter).getCanDoAction()) {
                        // $NON-NLS-1$
                        importedVms.append(vm.getName()).append(", ");
                        toShowConfirmWindow = true;
                    }
                    counter++;
                }
                // VM
                if (toShowConfirmWindow) {
                    ConfirmationModel confirmModel = new ConfirmationModel();
                    vmBackupModel.setConfirmWindow(confirmModel);
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle());
                    // $NON-NLS-1$
                    confirmModel.setHashName("import_virtual_machine");
                    confirmModel.setMessage(ConstantsManager.getInstance().getMessages().importProcessHasBegunForVms(StringHelper.trimEnd(importedVms.toString().trim(), ',')));
                    UICommand tempVar2 = new // $NON-NLS-1$
                    UICommand(// $NON-NLS-1$
                    "CancelConfirm", vmBackupModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                    tempVar2.setIsDefault(true);
                    tempVar2.setIsCancel(true);
                    confirmModel.getCommands().add(tempVar2);
                }
            }
        }
    }, this);
}
#end_block

#method_before
@Override
protected void syncSearch() {
    super.syncSearch();
    if (getEntity() == null || getEntity().getStorageDomainType() != StorageDomainType.ImportExport || getEntity().getStorageDomainSharedStatus() != StorageDomainSharedStatus.Active) {
        setItems(Collections.emptyList());
    } else {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object ReturnValue) {
                VmBackupModel backupModel = (VmBackupModel) model;
                ArrayList<StoragePool> list = (ArrayList<StoragePool>) ReturnValue;
                if (list != null && list.size() > 0) {
                    StoragePool dataCenter = list.get(0);
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(backupModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model1, Object ReturnValue1) {
                            VmBackupModel backupModel1 = (VmBackupModel) model1;
                            backupModel1.setItems((ArrayList<VM>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue());
                        }
                    };
                    GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(dataCenter.getId(), backupModel.getEntity().getId());
                    Frontend.RunQuery(VdcQueryType.GetVmsFromExportDomain, tempVar, _asyncQuery1);
                }
            }
        };
        AsyncDataProvider.getDataCentersByStorageDomain(_asyncQuery, getEntity().getId());
    }
}
#method_after
@Override
protected void syncSearch() {
    super.syncSearch();
    if (getEntity() == null || getEntity().getStorageDomainType() != StorageDomainType.ImportExport || getEntity().getStorageDomainSharedStatus() != StorageDomainSharedStatus.Active) {
        setItems(Collections.emptyList());
    } else {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object ReturnValue) {
                VmBackupModel backupModel = (VmBackupModel) model;
                ArrayList<StoragePool> list = (ArrayList<StoragePool>) ReturnValue;
                if (list != null && list.size() > 0) {
                    StoragePool dataCenter = list.get(0);
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(backupModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model1, Object ReturnValue1) {
                            VmBackupModel backupModel1 = (VmBackupModel) model1;
                            backupModel1.setItems((ArrayList<VM>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue());
                        }
                    };
                    GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(dataCenter.getId(), backupModel.getEntity().getId());
                    Frontend.getInstance().runQuery(VdcQueryType.GetVmsFromExportDomain, tempVar, _asyncQuery1);
                }
            }
        };
        AsyncDataProvider.getDataCentersByStorageDomain(_asyncQuery, getEntity().getId());
    }
}
#end_block

#method_before
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.RunQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#method_after
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#end_block

#method_before
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
    initOsArchitecture();
}
#method_after
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
    initDisplayTypes();
    initNicHotplugSupportMap();
    initDiskHotpluggableInterfacesMap();
    initOsArchitecture();
}
#end_block

#method_before
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#method_after
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#end_block

#method_before
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#method_after
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#end_block

#method_before
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#method_after
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#end_block

#method_before
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#method_after
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#end_block

#method_before
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#method_after
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#end_block

#method_before
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#method_after
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#end_block

#method_before
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#method_after
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#end_block

#method_before
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#method_after
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#end_block

#method_before
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.RunQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#method_after
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#end_block

#method_before
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#method_after
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#end_block

#method_before
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#method_after
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#end_block

#method_before
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#method_after
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#end_block

#method_before
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#method_after
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#method_after
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#method_after
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#end_block

#method_before
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.Model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.Model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#method_after
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#end_block

#method_before
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.RunQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#method_after
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#end_block

#method_before
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#method_after
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#end_block

#method_before
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#method_after
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#end_block

#method_before
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.RunQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#method_after
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#method_after
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#end_block

#method_before
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<permissions>) source : new ArrayList<permissions>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#method_after
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Permissions>) source : new ArrayList<Permissions>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#end_block

#method_before
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#method_after
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#end_block

#method_before
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#method_after
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#end_block

#method_before
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.RunQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#method_after
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#end_block

#method_before
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#method_after
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#end_block

#method_before
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#method_after
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#end_block

#method_before
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#method_after
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#end_block

#method_before
public static void getPmOptions(AsyncQuery aQuery, String pmType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.Data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.RunQuery(VdcQueryType.GetAgentFenceOptions, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getPmOptions(AsyncQuery aQuery, String pmType, String version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.Data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.getInstance().runQuery(VdcQueryType.GetAgentFenceOptions, new GetAgentFenceOptionsQueryParameters(version), aQuery);
}
#end_block

#method_before
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.RunQuery(VdcQueryType.Search, sp, aQuery);
}
#method_after
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#end_block

#method_before
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#method_after
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#end_block

#method_before
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#method_after
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#end_block

#method_before
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#method_after
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#end_block

#method_before
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                tags tag = (tags) source;
                tags root = new tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new tags();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                Tags tag = (Tags) source;
                Tags root = new Tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new Tags();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<tags> ret = new ArrayList<tags>();
                for (tags tags : (ArrayList<tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new tags();
        }
    };
}
#method_after
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<Tags> ret = new ArrayList<Tags>();
                for (Tags tags : (ArrayList<Tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new Tags();
        }
    };
}
#end_block

#method_before
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#method_after
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#end_block

#method_before
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.RunQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#method_after
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.getInstance().runQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#end_block

#method_before
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#method_after
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.getInstance().runQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#end_block

#method_before
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#method_after
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#end_block

#method_before
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#method_after
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#end_block

#method_before
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#end_block

#method_before
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#method_after
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#end_block

#method_before
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.RunQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#method_after
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#end_block

#method_before
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#method_after
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#end_block

#method_before
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.RunQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#method_after
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.getInstance().runQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#end_block

#method_before
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#method_after
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
public static void GetExternalProviderHostList(AsyncQuery aQuery, Guid providerId, boolean filterOutExistingHosts, String searchFilter) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDS>();
            }
            return source;
        }
    };
    GetHostListFromExternalProviderParameters params = new GetHostListFromExternalProviderParameters();
    params.setFilterOutExistingHosts(filterOutExistingHosts);
    params.setProviderId(providerId);
    params.setSearchFilter(searchFilter);
    Frontend.RunQuery(VdcQueryType.GetHostListFromExternalProvider, params, aQuery);
}
#method_after
public static void GetExternalProviderHostList(AsyncQuery aQuery, Guid providerId, boolean filterOutExistingHosts, String searchFilter) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDS>();
            }
            return source;
        }
    };
    GetHostListFromExternalProviderParameters params = new GetHostListFromExternalProviderParameters();
    params.setFilterOutExistingHosts(filterOutExistingHosts);
    params.setProviderId(providerId);
    params.setSearchFilter(searchFilter);
    Frontend.getInstance().runQuery(VdcQueryType.GetHostListFromExternalProvider, params, aQuery);
}
#end_block

#method_before
public static void GetAllProvidersByType(AsyncQuery aQuery, ProviderType providerType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Provider>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllProviders, new GetAllProvidersParameters(providerType), aQuery);
}
#method_after
public static void GetAllProvidersByType(AsyncQuery aQuery, ProviderType providerType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Provider>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllProviders, new GetAllProvidersParameters(providerType), aQuery);
}
#end_block

#method_before
public static void GetProviderCertificateChain(AsyncQuery aQuery, Provider provider) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetProviderCertificateChain, new ProviderQueryParameters(provider), aQuery);
}
#method_after
public static void GetProviderCertificateChain(AsyncQuery aQuery, Provider provider) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetProviderCertificateChain, new ProviderQueryParameters(provider), aQuery);
}
#end_block

#method_before
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.RunMultipleQueries(queryTypeList, parametersList, callback);
}
#method_after
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.getInstance().runMultipleQueries(queryTypeList, parametersList, callback);
}
#end_block

#method_before
public static void fillTagsRecursive(tags tagToFill, List<tags> children) {
    ArrayList<tags> list = new ArrayList<tags>();
    for (tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#method_after
public static void fillTagsRecursive(Tags tagToFill, List<Tags> children) {
    ArrayList<Tags> list = new ArrayList<Tags>();
    for (Tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#end_block

#method_before
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.GetNotificationEvents();
}
#method_after
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.getNotificationEvents();
}
#end_block

#method_before
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#method_after
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#end_block

#method_before
public static ArrayList<DiskInterface> getDiskInterfaceList(Version clusterVersion) {
    ArrayList<DiskInterface> diskInterfaces = new ArrayList<DiskInterface>(Arrays.asList(new DiskInterface[] { DiskInterface.IDE, DiskInterface.VirtIO }));
    boolean isVirtIOScsiEnabled = clusterVersion != null ? (Boolean) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VirtIoScsiEnabled, clusterVersion.getValue()) : true;
    if (isVirtIOScsiEnabled) {
        diskInterfaces.add(DiskInterface.VirtIO_SCSI);
    }
    return diskInterfaces;
}
#method_after
public static void getDiskInterfaceList(int osId, Version clusterVersion, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> interfaces = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<DiskInterface> interfaceTypes = new ArrayList<DiskInterface>();
            for (String diskIfs : interfaces) {
                try {
                    interfaceTypes.add(DiskInterface.valueOf(diskIfs));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetDiskInterfaces, osId, clusterVersion), asyncQuery);
}
#end_block

#method_before
public static String getNewNicName(ArrayList<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#method_after
public static String getNewNicName(List<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#end_block

#method_before
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#method_after
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#end_block

#method_before
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#method_after
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#end_block

#method_before
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#method_after
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            // Initialize specific UI dependencies for search
            SimpleDependecyInjector.getInstance().bind(new OsValueAutoCompleter(uniqueOsNames));
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#end_block

#method_before
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#method_after
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#end_block

#method_before
public static void initOsArchitecture() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osArchitectures = (HashMap<Integer, ArchitectureType>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsArchitectures), callback);
}
#method_after
public static void initOsArchitecture() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osArchitectures = (HashMap<Integer, ArchitectureType>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsArchitectures), callback);
}
#end_block

#method_before
public static void hasSpiceSupport(int osId, Version version, AsyncQuery callback) {
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.HasSpiceSupport, osId, version), callback);
}
#method_after
public static boolean hasSpiceSupport(int osId, Version version) {
    return getDisplayTypes(osId, version).contains(DisplayType.qxl);
}
#end_block

#method_before
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#method_after
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#end_block

#method_before
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#method_after
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#method_after
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#end_block

#method_before
@Override
protected void readOsSection(XmlNode section) {
    _vmTemplate.setId(new Guid(section.Attributes.get("ovf:id").getValue()));
    XmlNode node = section.SelectSingleNode("Description");
    if (node != null) {
        // backward compatibility code - os id of type Other is now 0 . "Unassigned" is removed but its Id is in use.
        if (node.InnerText.equals(String.valueOf(OsRepository.OLD_OTHER_ID))) {
            node.InnerText = String.valueOf(OsRepository.DEFAULT_OS);
        }
        int osId = osRepository.getOsIdByUniqueName(node.InnerText);
        _vmTemplate.setOsId(osId);
        _vmTemplate.setArchitecture(osRepository.getArchitectureFromOS(osId));
    } else {
        _vmTemplate.setArchitecture(ArchitectureType.undefined);
    }
}
#method_after
@Override
protected void readOsSection(XmlNode section) {
    _vmTemplate.setId(new Guid(section.attributes.get("ovf:id").getValue()));
    XmlNode node = section.SelectSingleNode("Description");
    if (node != null) {
        int osId = osRepository.getOsIdByUniqueName(node.innerText);
        _vmTemplate.setOsId(osId);
        _vmTemplate.setClusterArch(osRepository.getArchitectureFromOS(osId));
    } else {
        _vmTemplate.setClusterArch(ArchitectureType.undefined);
    }
}
#end_block

#method_before
@Override
protected void readHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        int resourceType = Integer.parseInt(node.SelectSingleNode("rasd:ResourceType", _xmlNS).InnerText);
        switch(resourceType) {
            // CPU
            case 3:
                _vmTemplate.setNumOfSockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).InnerText));
                _vmTemplate.setCpuPerSocket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).InnerText));
                break;
            // Memory
            case 4:
                _vmTemplate.setMemSizeMb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
                break;
            // Image
            case 17:
                final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText);
                DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                    @Override
                    public boolean eval(DiskImage diskImage) {
                        return diskImage.getImageId().equals(guid);
                    }
                });
                image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).InnerText));
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText)) {
                    image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText));
                }
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText)) {
                    image.setImageTemplateId(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText));
                }
                image.setAppList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).InnerText);
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText)) {
                    image.setStorageIds(new ArrayList<Guid>(Arrays.asList(new Guid(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText))));
                }
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText)) {
                    image.setStoragePoolId(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText));
                }
                final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).InnerText);
                if (creationDate != null) {
                    image.setCreationDate(creationDate);
                }
                final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).InnerText);
                if (lastModified != null) {
                    image.setLastModified(lastModified);
                }
                readVmDevice(node, _vmTemplate, image.getId(), Boolean.TRUE);
                break;
            // Network
            case 10:
                VmNetworkInterface iface = getNetwotkInterface(node);
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).InnerText)) {
                    iface.setType(Integer.parseInt(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).InnerText));
                }
                String resourceSubNetworkName = node.SelectSingleNode(OvfProperties.VMD_CONNECTION, _xmlNS).InnerText;
                iface.setNetworkName(StringUtils.defaultIfEmpty(resourceSubNetworkName, null));
                XmlNode vnicProfileNameNode = node.SelectSingleNode(OvfProperties.VMD_VNIC_PROFILE_NAME, _xmlNS);
                iface.setVnicProfileName(vnicProfileNameNode == null ? null : StringUtils.defaultIfEmpty(vnicProfileNameNode.InnerText, null));
                XmlNode linkedNode = node.SelectSingleNode(OvfProperties.VMD_LINKED, _xmlNS);
                iface.setLinked(linkedNode == null ? true : Boolean.valueOf(linkedNode.InnerText));
                iface.setName(node.SelectSingleNode("rasd:Name", _xmlNS).InnerText);
                iface.setSpeed((node.SelectSingleNode("rasd:speed", _xmlNS) != null) ? Integer.parseInt(node.SelectSingleNode("rasd:speed", _xmlNS).InnerText) : VmInterfaceType.forValue(iface.getType()).getSpeed());
                _vmTemplate.getInterfaces().add(iface);
                readVmDevice(node, _vmTemplate, iface.getId(), Boolean.TRUE);
                break;
            // CDROM
            case 15:
                readVmDevice(node, _vmTemplate, Guid.newGuid(), Boolean.TRUE);
                break;
            // USB
            case 23:
                _vmTemplate.setUsbPolicy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).InnerText));
                break;
            // Monitor
            case 20:
                _vmTemplate.setNumOfMonitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
                if (node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS) != null) {
                    _vmTemplate.setSingleQxlPci(Boolean.parseBoolean(node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS).InnerText));
                }
                readVmDevice(node, _vmTemplate, Guid.newGuid(), Boolean.TRUE);
                break;
            // OTHER
            case 0:
                readVmDevice(node, _vmTemplate, Guid.newGuid(), Boolean.FALSE);
                break;
        }
    }
}
#method_after
@Override
protected void readHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        int resourceType = Integer.parseInt(node.SelectSingleNode("rasd:ResourceType", _xmlNS).innerText);
        switch(resourceType) {
            // CPU
            case 3:
                _vmTemplate.setNumOfSockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).innerText));
                _vmTemplate.setCpuPerSocket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).innerText));
                break;
            // Memory
            case 4:
                _vmTemplate.setMemSizeMb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).innerText));
                break;
            // Image
            case 17:
                final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).innerText);
                DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                    @Override
                    public boolean eval(DiskImage diskImage) {
                        return diskImage.getImageId().equals(guid);
                    }
                });
                image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).innerText));
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).innerText)) {
                    image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).innerText));
                }
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).innerText)) {
                    image.setImageTemplateId(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).innerText));
                }
                image.setAppList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).innerText);
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StorageId", _xmlNS).innerText)) {
                    image.setStorageIds(new ArrayList<Guid>(Arrays.asList(new Guid(node.SelectSingleNode("rasd:StorageId", _xmlNS).innerText))));
                }
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).innerText)) {
                    image.setStoragePoolId(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).innerText));
                }
                final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).innerText);
                if (creationDate != null) {
                    image.setCreationDate(creationDate);
                }
                final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).innerText);
                if (lastModified != null) {
                    image.setLastModified(lastModified);
                }
                readVmDevice(node, _vmTemplate, image.getId(), Boolean.TRUE);
                break;
            // Network
            case 10:
                VmNetworkInterface iface = getNetwotkInterface(node);
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).innerText)) {
                    iface.setType(Integer.parseInt(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).innerText));
                }
                String resourceSubNetworkName = node.SelectSingleNode(OvfProperties.VMD_CONNECTION, _xmlNS).innerText;
                iface.setNetworkName(StringUtils.defaultIfEmpty(resourceSubNetworkName, null));
                XmlNode vnicProfileNameNode = node.SelectSingleNode(OvfProperties.VMD_VNIC_PROFILE_NAME, _xmlNS);
                iface.setVnicProfileName(vnicProfileNameNode == null ? null : StringUtils.defaultIfEmpty(vnicProfileNameNode.innerText, null));
                XmlNode linkedNode = node.SelectSingleNode(OvfProperties.VMD_LINKED, _xmlNS);
                iface.setLinked(linkedNode == null ? true : Boolean.valueOf(linkedNode.innerText));
                iface.setName(node.SelectSingleNode("rasd:Name", _xmlNS).innerText);
                iface.setSpeed((node.SelectSingleNode("rasd:speed", _xmlNS) != null) ? Integer.parseInt(node.SelectSingleNode("rasd:speed", _xmlNS).innerText) : VmInterfaceType.forValue(iface.getType()).getSpeed());
                _vmTemplate.getInterfaces().add(iface);
                readVmDevice(node, _vmTemplate, iface.getId(), Boolean.TRUE);
                break;
            // CDROM
            case 15:
                readVmDevice(node, _vmTemplate, Guid.newGuid(), Boolean.TRUE);
                break;
            // USB
            case 23:
                _vmTemplate.setUsbPolicy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).innerText));
                break;
            // Monitor
            case 20:
                _vmTemplate.setNumOfMonitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).innerText));
                if (node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS) != null) {
                    _vmTemplate.setSingleQxlPci(Boolean.parseBoolean(node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS).innerText));
                }
                readVmDevice(node, _vmTemplate, Guid.newGuid(), Boolean.TRUE);
                break;
            // OTHER
            case 0:
                boolean addAsManaged = false;
                if (node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS) != null && StringUtils.isNotEmpty(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).innerText)) {
                    VmDeviceGeneralType type = VmDeviceGeneralType.forValue(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).innerText);
                    String device = node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).innerText;
                    // special devices are treated as managed devices but still have the OTHER OVF ResourceType
                    addAsManaged = VmDeviceCommonUtils.isSpecialDevice(device, type);
                }
                readVmDevice(node, _vmTemplate, Guid.newGuid(), addAsManaged);
                break;
        }
    }
}
#end_block

#method_before
@Override
protected void readGeneralData(XmlNode content) {
    // General Vm
    XmlNode node = content.SelectSingleNode("Name");
    if (node != null) {
        _vmTemplate.setName(node.InnerText);
        name = _vmTemplate.getName();
    }
    node = content.SelectSingleNode("TemplateId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            _vmTemplate.setId(new Guid(node.InnerText));
        }
    }
    node = content.SelectSingleNode("IsDisabled");
    if (node != null) {
        _vmTemplate.setDisabled(Boolean.parseBoolean(node.InnerText));
    }
    node = content.SelectSingleNode("TrustedService");
    if (node != null) {
        _vmTemplate.setTrustedService(Boolean.parseBoolean(node.InnerText));
    }
}
#method_after
@Override
protected void readGeneralData(XmlNode content) {
    // General Vm
    XmlNode node = content.SelectSingleNode("Name");
    if (node != null) {
        _vmTemplate.setName(node.innerText);
        name = _vmTemplate.getName();
    }
    node = content.SelectSingleNode("TemplateId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            _vmTemplate.setId(new Guid(node.innerText));
        }
    }
    node = content.SelectSingleNode("IsDisabled");
    if (node != null) {
        _vmTemplate.setDisabled(Boolean.parseBoolean(node.innerText));
    }
    node = content.SelectSingleNode("TrustedService");
    if (node != null) {
        _vmTemplate.setTrustedService(Boolean.parseBoolean(node.innerText));
    }
    node = content.SelectSingleNode("TemplateType");
    if (node != null) {
        _vmTemplate.setTemplateType(VmEntityType.valueOf(node.innerText));
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retVal = true;
    if (getVmTemplate() == null) {
        retVal = false;
    } else {
        setDescription(getVmTemplateName());
    }
    // check that the storage pool is valid
    retVal = retVal && checkStoragePool();
    if (retVal) {
        retVal = isVDSGroupCompatible();
    }
    if (retVal) {
        // set the source domain and check that it is ImportExport type and active
        setSourceDomainId(getParameters().getSourceDomainId());
        StorageDomainValidator sourceDomainValidator = new StorageDomainValidator(getSourceDomain());
        retVal = validate(sourceDomainValidator.isDomainExistAndActive());
    }
    if (retVal && getSourceDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // Set the template images from the Export domain and change each image id storage is to the import domain
        GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId());
        VdcQueryReturnValue qretVal = getBackend().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar);
        retVal = qretVal.getSucceeded();
        if (retVal) {
            Map<VmTemplate, List<DiskImage>> templates = (Map) qretVal.getReturnValue();
            ArrayList<DiskImage> images = new ArrayList<DiskImage>();
            for (Map.Entry<VmTemplate, List<DiskImage>> entry : templates.entrySet()) {
                if (entry.getKey().getId().equals(getVmTemplate().getId())) {
                    images = new ArrayList<DiskImage>(entry.getValue());
                    getVmTemplate().setInterfaces(entry.getKey().getInterfaces());
                    getVmTemplate().setOvfVersion(entry.getKey().getOvfVersion());
                    break;
                }
            }
            getParameters().setImages(images);
            getVmTemplate().setImages(images);
            ensureDomainMap(getParameters().getImages(), getParameters().getDestDomainId());
            Map<Guid, DiskImage> imageMap = new HashMap<Guid, DiskImage>();
            for (DiskImage image : images) {
                if (Guid.Empty.equals(image.getVmSnapshotId())) {
                    retVal = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID);
                    break;
                }
                StorageDomain storageDomain = getStorageDomain(imageToDestinationDomainMap.get(image.getId()));
                StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
                retVal = validate(validator.isDomainExistAndActive()) && validate(validator.domainIsValidDestination());
                if (!retVal) {
                    break;
                }
                StorageDomainStatic targetDomain = storageDomain.getStorageStaticData();
                changeRawToCowIfSparseOnBlockDevice(targetDomain.getStorageType(), image);
                retVal = ImagesHandler.CheckImageConfiguration(targetDomain, image, getReturnValue().getCanDoActionMessages());
                if (!retVal) {
                    break;
                } else {
                    image.setStoragePoolId(getParameters().getStoragePoolId());
                    image.setStorageIds(new ArrayList<Guid>(Arrays.asList(storageDomain.getId())));
                    imageMap.put(image.getImageId(), image);
                }
            }
            getVmTemplate().setDiskImageMap(imageMap);
        }
    }
    if (retVal && getParameters().isImportAsNewEntity()) {
        initImportClonedTemplate();
    }
    if (retVal) {
        VmTemplate duplicateTemplate = getVmTemplateDAO().get(getParameters().getVmTemplate().getId());
        // check that the template does not exists in the target domain
        if (duplicateTemplate != null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_IMPORT_TEMPLATE_EXISTS);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", duplicateTemplate.getName()));
            retVal = false;
        } else if (isVmTemplateWithSameNameExist()) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_TEMPLATE_NAME_EXISTS);
            retVal = false;
        }
    }
    if (retVal) {
        retVal = validateNoDuplicateDiskImages(getParameters().getImages());
    }
    if (retVal && getParameters().getImages() != null && !getParameters().getImages().isEmpty()) {
        Map<StorageDomain, Integer> domainMap = getSpaceRequirementsForStorageDomains(new ArrayList<DiskImage>(getVmTemplate().getDiskImageMap().values()));
        if (domainMap.isEmpty()) {
            int sz = 0;
            if (getVmTemplate().getDiskImageMap() != null) {
                for (DiskImage image : getVmTemplate().getDiskImageMap().values()) {
                    sz += image.getSize();
                }
            }
            domainMap.put(getStorageDomain(), sz);
        }
        for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
            if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
                return false;
            }
        }
    }
    if (retVal) {
        retVal = validateMacAddress(Entities.<VmNic, VmNetworkInterface>upcast(getVmTemplate().getInterfaces()));
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TEMPLATE);
    }
    return retVal;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retVal = true;
    if (getVmTemplate() == null) {
        retVal = false;
    } else {
        setDescription(getVmTemplateName());
    }
    // check that the storage pool is valid
    retVal = retVal && checkStoragePool();
    if (retVal) {
        retVal = validateTemplateArchitecture();
    }
    if (retVal) {
        retVal = isVDSGroupCompatible();
    }
    if (retVal) {
        // set the source domain and check that it is ImportExport type and active
        setSourceDomainId(getParameters().getSourceDomainId());
        StorageDomainValidator sourceDomainValidator = new StorageDomainValidator(getSourceDomain());
        retVal = validate(sourceDomainValidator.isDomainExistAndActive());
    }
    if (retVal && getSourceDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // Set the template images from the Export domain and change each image id storage is to the import domain
        GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId());
        VdcQueryReturnValue qretVal = getBackend().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar);
        retVal = qretVal.getSucceeded();
        if (retVal) {
            Map<VmTemplate, List<DiskImage>> templates = qretVal.getReturnValue();
            ArrayList<DiskImage> images = new ArrayList<DiskImage>();
            for (Map.Entry<VmTemplate, List<DiskImage>> entry : templates.entrySet()) {
                if (entry.getKey().getId().equals(getVmTemplate().getId())) {
                    images = new ArrayList<DiskImage>(entry.getValue());
                    getVmTemplate().setInterfaces(entry.getKey().getInterfaces());
                    getVmTemplate().setOvfVersion(entry.getKey().getOvfVersion());
                    break;
                }
            }
            getParameters().setImages(images);
            getVmTemplate().setImages(images);
            ensureDomainMap(getParameters().getImages(), getParameters().getDestDomainId());
            HashMap<Guid, DiskImage> imageMap = new HashMap<Guid, DiskImage>();
            for (DiskImage image : images) {
                if (Guid.Empty.equals(image.getVmSnapshotId())) {
                    retVal = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID);
                    break;
                }
                StorageDomain storageDomain = getStorageDomain(imageToDestinationDomainMap.get(image.getId()));
                StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
                retVal = validate(validator.isDomainExistAndActive()) && validate(validator.domainIsValidDestination());
                if (!retVal) {
                    break;
                }
                StorageDomainStatic targetDomain = storageDomain.getStorageStaticData();
                changeRawToCowIfSparseOnBlockDevice(targetDomain.getStorageType(), image);
                retVal = ImagesHandler.checkImageConfiguration(targetDomain, image, getReturnValue().getCanDoActionMessages());
                if (!retVal) {
                    break;
                } else {
                    image.setStoragePoolId(getParameters().getStoragePoolId());
                    image.setStorageIds(new ArrayList<Guid>(Arrays.asList(storageDomain.getId())));
                    imageMap.put(image.getImageId(), image);
                }
            }
            getVmTemplate().setDiskImageMap(imageMap);
        }
    }
    if (retVal && getParameters().isImportAsNewEntity()) {
        initImportClonedTemplate();
    }
    if (retVal) {
        VmTemplate duplicateTemplate = getVmTemplateDAO().get(getParameters().getVmTemplate().getId());
        // check that the template does not exists in the target domain
        if (duplicateTemplate != null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_IMPORT_TEMPLATE_EXISTS);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", duplicateTemplate.getName()));
            retVal = false;
        } else if (isVmTemplateWithSameNameExist()) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_TEMPLATE_NAME_EXISTS);
            retVal = false;
        }
    }
    if (retVal) {
        retVal = validateNoDuplicateDiskImages(getParameters().getImages());
    }
    if (retVal && getParameters().getImages() != null && !getParameters().getImages().isEmpty()) {
        Map<StorageDomain, Integer> domainMap = getSpaceRequirementsForStorageDomains(new ArrayList<DiskImage>(getVmTemplate().getDiskImageMap().values()));
        if (domainMap.isEmpty()) {
            int sz = 0;
            if (getVmTemplate().getDiskImageMap() != null) {
                for (DiskImage image : getVmTemplate().getDiskImageMap().values()) {
                    sz += image.getSize();
                }
            }
            domainMap.put(getStorageDomain(), sz);
        }
        for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
            if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
                return false;
            }
        }
    }
    if (retVal) {
        retVal = validateMacAddress(Entities.<VmNic, VmNetworkInterface>upcast(getVmTemplate().getInterfaces()));
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TEMPLATE);
    }
    return retVal;
}
#end_block

#method_before
private boolean isVDSGroupCompatible() {
    VDSGroup vdsGroup = getVdsGroup();
    if (vdsGroup.getArchitectureType() != getVmTemplate().getArchitecture()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_TEMPLATE_ARCHITECTURE_NOT_SUPPORTED_BY_CLUSTER);
        return false;
    }
    return true;
}
#method_after
protected boolean isVDSGroupCompatible() {
    if (getVdsGroup().getArchitecture() != getVmTemplate().getClusterArch()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_TEMPLATE_ARCHITECTURE_NOT_SUPPORTED_BY_CLUSTER);
        return false;
    }
    return true;
}
#end_block

#method_before
private void initImportClonedTemplateDisks() {
    for (DiskImage image : getParameters().getImages()) {
        diskGuidList.add(image.getId());
        imageGuidList.add(image.getImageId());
        if (getParameters().isImportAsNewEntity()) {
            image.setId(Guid.newGuid());
            image.setImageId(Guid.newGuid());
        }
    }
}
#method_after
private void initImportClonedTemplateDisks() {
    for (DiskImage image : getParameters().getImages()) {
        if (getParameters().isImportAsNewEntity()) {
            generateNewDiskId(image);
            updateManagedDeviceMap(image, getVmTemplate().getManagedDeviceMap());
        } else {
            newDiskIdForDisk.put(image.getId(), image);
        }
    }
}
#end_block

#method_before
@Override
protected void moveOrCopyAllImageGroups(final Guid containerID, final Iterable<DiskImage> disks) {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            int i = 0;
            for (DiskImage disk : disks) {
                Guid destinationDomain = imageToDestinationDomainMap.get(diskGuidList.get(i));
                MoveOrCopyImageGroupParameters tempVar = new MoveOrCopyImageGroupParameters(containerID, diskGuidList.get(i), imageGuidList.get(i), disk.getId(), disk.getImageId(), destinationDomain, getMoveOrCopyImageOperation());
                tempVar.setParentCommand(getActionType());
                tempVar.setUseCopyCollapse(true);
                tempVar.setVolumeType(disk.getVolumeType());
                tempVar.setVolumeFormat(disk.getVolumeFormat());
                tempVar.setCopyVolumeType(CopyVolumeType.SharedVol);
                tempVar.setSourceDomainId(getParameters().getSourceDomainId());
                tempVar.setForceOverride(getParameters().getForceOverride());
                tempVar.setImportEntity(true);
                tempVar.setEntityInfo(new EntityInfo(VdcObjectType.VmTemplate, containerID));
                for (DiskImage diskImage : getParameters().getVmTemplate().getDiskList()) {
                    if (diskGuidList.get(i).equals(diskImage.getId())) {
                        tempVar.setQuotaId(diskImage.getQuotaId());
                        break;
                    }
                }
                MoveOrCopyImageGroupParameters p = tempVar;
                p.setParentParameters(getParameters());
                VdcReturnValueBase vdcRetValue = Backend.getInstance().runInternalAction(VdcActionType.CopyImageGroup, p, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
                if (!vdcRetValue.getSucceeded()) {
                    throw ((vdcRetValue.getFault() != null) ? new VdcBLLException(vdcRetValue.getFault().getError()) : new VdcBLLException(VdcBllErrors.ENGINE));
                }
                getReturnValue().getVdsmTaskIdList().addAll(vdcRetValue.getInternalVdsmTaskIdList());
                i++;
            }
            return null;
        }
    });
}
#method_after
@Override
protected void moveOrCopyAllImageGroups(final Guid containerID, final Iterable<DiskImage> disks) {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            for (DiskImage disk : disks) {
                Guid originalDiskId = newDiskIdForDisk.get(disk.getId()).getId();
                Guid destinationDomain = imageToDestinationDomainMap.get(originalDiskId);
                MoveOrCopyImageGroupParameters tempVar = new MoveOrCopyImageGroupParameters(containerID, originalDiskId, newDiskIdForDisk.get(disk.getId()).getImageId(), disk.getId(), disk.getImageId(), destinationDomain, getMoveOrCopyImageOperation());
                tempVar.setParentCommand(getActionType());
                tempVar.setUseCopyCollapse(true);
                tempVar.setVolumeType(disk.getVolumeType());
                tempVar.setVolumeFormat(disk.getVolumeFormat());
                tempVar.setCopyVolumeType(CopyVolumeType.SharedVol);
                tempVar.setSourceDomainId(getParameters().getSourceDomainId());
                tempVar.setForceOverride(getParameters().getForceOverride());
                tempVar.setImportEntity(true);
                tempVar.setEntityInfo(new EntityInfo(VdcObjectType.VmTemplate, containerID));
                tempVar.setRevertDbOperationScope(ImageDbOperationScope.IMAGE);
                for (DiskImage diskImage : getParameters().getVmTemplate().getDiskList()) {
                    if (originalDiskId.equals(diskImage.getId())) {
                        tempVar.setQuotaId(diskImage.getQuotaId());
                        break;
                    }
                }
                MoveOrCopyImageGroupParameters p = tempVar;
                p.setParentParameters(getParameters());
                VdcReturnValueBase vdcRetValue = Backend.getInstance().runInternalAction(VdcActionType.CopyImageGroup, p, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
                if (!vdcRetValue.getSucceeded()) {
                    throw ((vdcRetValue.getFault() != null) ? new VdcBLLException(vdcRetValue.getFault().getError()) : new VdcBLLException(VdcBllErrors.ENGINE));
                }
                getReturnValue().getVdsmTaskIdList().addAll(vdcRetValue.getInternalVdsmTaskIdList());
            }
            return null;
        }
    });
}
#end_block

#method_before
protected void addVmInterfaces() {
    VmInterfaceManager vmInterfaceManager = new VmInterfaceManager();
    List<VmNetworkInterface> interfaces = getVmTemplate().getInterfaces();
    List<String> invalidNetworkNames = new ArrayList<String>();
    List<String> invalidIfaceNames = new ArrayList<String>();
    Map<String, Network> networksInVdsByName = Entities.entitiesByName(getNetworkDAO().getAllForCluster(getVmTemplate().getVdsGroupId()));
    List<VnicProfileView> vnicProfilesInDc = getDbFacade().getVnicProfileViewDao().getAllForDataCenter(getStoragePoolId());
    for (VmNetworkInterface iface : interfaces) {
        if (iface.getId() == null) {
            iface.setId(Guid.newGuid());
        }
        iface.setVmId(getVmTemplateId());
        VmNic nic = new VmNic();
        nic.setId(iface.getId());
        nic.setVmTemplateId(getVmTemplateId());
        nic.setName(iface.getName());
        nic.setLinked(iface.isLinked());
        nic.setSpeed(iface.getSpeed());
        nic.setType(iface.getType());
        if (!vmInterfaceManager.updateNicWithVnicProfile(iface, getVdsGroup().getcompatibility_version(), networksInVdsByName, vnicProfilesInDc, getCurrentUser().getUserId())) {
            invalidNetworkNames.add(iface.getNetworkName());
            invalidIfaceNames.add(iface.getName());
        }
        nic.setVnicProfileId(iface.getVnicProfileId());
        getVmNicDao().save(nic);
        getCompensationContext().snapshotNewEntity(nic);
        VmNetworkStatistics iStat = new VmNetworkStatistics();
        nic.setStatistics(iStat);
        iStat.setId(iface.getId());
        iStat.setVmId(getVmTemplateId());
        getDbFacade().getVmNetworkStatisticsDao().save(iStat);
        getCompensationContext().snapshotNewEntity(iStat);
    }
    auditInvalidInterfaces(invalidNetworkNames, invalidIfaceNames);
}
#method_after
protected void addVmInterfaces() {
    VnicProfileHelper vnicProfileHelper = new VnicProfileHelper(getVmTemplate().getVdsGroupId(), getStoragePoolId(), getVdsGroup().getcompatibility_version(), AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE_INVALID_INTERFACES);
    for (VmNetworkInterface iface : getVmTemplate().getInterfaces()) {
        if (iface.getId() == null) {
            iface.setId(Guid.newGuid());
        }
        iface.setVmId(getVmTemplateId());
        VmNic nic = new VmNic();
        nic.setId(iface.getId());
        nic.setVmTemplateId(getVmTemplateId());
        nic.setName(iface.getName());
        nic.setLinked(iface.isLinked());
        nic.setSpeed(iface.getSpeed());
        nic.setType(iface.getType());
        vnicProfileHelper.updateNicWithVnicProfileForUser(iface, getCurrentUser());
        nic.setVnicProfileId(iface.getVnicProfileId());
        getVmNicDao().save(nic);
        getCompensationContext().snapshotNewEntity(nic);
        VmNetworkStatistics iStat = new VmNetworkStatistics();
        nic.setStatistics(iStat);
        iStat.setId(iface.getId());
        iStat.setVmId(getVmTemplateId());
        getDbFacade().getVmNetworkStatisticsDao().save(iStat);
        getCompensationContext().snapshotNewEntity(iStat);
    }
    vnicProfileHelper.auditInvalidInterfaces(getVmTemplateName());
}
#end_block

#method_before
@Override
protected void endActionOnAllImageGroups() {
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        p.setTaskGroupSuccess(getParameters().getTaskGroupSuccess());
        getBackend().EndAction(getImagesActionType(), p);
    }
}
#method_after
@Override
protected void endActionOnAllImageGroups() {
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        p.setTaskGroupSuccess(getParameters().getTaskGroupSuccess());
        getBackend().endAction(getImagesActionType(), p);
    }
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getSharedLocks() {
    return Collections.singletonMap(getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.REMOTE_VM, getVmIsBeingImportedMessage()));
}
#method_after
@Override
protected Map<String, Pair<String, String>> getSharedLocks() {
    return Collections.singletonMap(getParameters().getContainerId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.REMOTE_VM, getVmIsBeingImportedMessage()));
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    Map<Guid, StorageDomain> domainsMap = new HashMap<Guid, StorageDomain>();
    if (!canDoActionBeforeCloneVm(domainsMap)) {
        return false;
    }
    if (getParameters().isImportAsNewEntity()) {
        initImportClonedVm();
    }
    return canDoActionAfterCloneVm(domainsMap);
}
#method_after
@Override
protected boolean canDoAction() {
    Map<Guid, StorageDomain> domainsMap = new HashMap<Guid, StorageDomain>();
    if (!canDoActionBeforeCloneVm(domainsMap)) {
        return false;
    }
    if (getParameters().isImportAsNewEntity()) {
        initImportClonedVm();
        if (getVm().getInterfaces().size() > MacPoolManager.getInstance().getAvailableMacsCount()) {
            addCanDoActionMessage(VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES);
            return false;
        }
    }
    return canDoActionAfterCloneVm(domainsMap);
}
#end_block

#method_before
private boolean canDoActionBeforeCloneVm(Map<Guid, StorageDomain> domainsMap) {
    List<String> canDoActionMessages = getReturnValue().getCanDoActionMessages();
    if (getVm() != null) {
        setDescription(getVmName());
    }
    if (!checkStoragePool()) {
        return false;
    }
    Set<Guid> destGuids = new HashSet<Guid>(imageToDestinationDomainMap.values());
    for (Guid destGuid : destGuids) {
        StorageDomain storageDomain = getStorageDomain(destGuid);
        StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
        if (!validate(validator.isDomainExistAndActive()) || !validate(validator.domainIsValidDestination())) {
            return false;
        }
        domainsMap.put(destGuid, storageDomain);
    }
    if (getParameters().isImportAsNewEntity() && !getParameters().getCopyCollapse()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMPORT_CLONE_NOT_COLLAPSED);
    }
    setSourceDomainId(getParameters().getSourceDomainId());
    StorageDomainValidator validator = new StorageDomainValidator(getSourceDomain());
    if (validator.isDomainExistAndActive().isValid() && getSourceDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    List<VM> vms = getVmsFromExportDomain();
    if (vms == null) {
        return false;
    }
    VM vm = LinqUtils.firstOrNull(vms, new Predicate<VM>() {

        @Override
        public boolean eval(VM evalVm) {
            return evalVm.getId().equals(getParameters().getVm().getId());
        }
    });
    if (vm != null) {
        // At this point we should work with the VM that was read from
        // the OVF
        setVm(vm);
        // Iterate over all the VM images (active image and snapshots)
        for (DiskImage image : getVm().getImages()) {
            if (Guid.Empty.equals(image.getVmSnapshotId())) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID);
            }
            if (getParameters().getCopyCollapse()) {
                // a match with the image from the VM.
                for (DiskImage p : imageList) {
                    // only if requested by the user
                    if (p.getImageId().equals(image.getImageId())) {
                        if (p.getVolumeFormat() != null) {
                            image.setvolumeFormat(p.getVolumeFormat());
                        }
                        if (p.getVolumeType() != null) {
                            image.setVolumeType(p.getVolumeType());
                        }
                        // Validate the configuration of the image got from the parameters.
                        if (!validateImageConfig(canDoActionMessages, domainsMap, image)) {
                            return false;
                        }
                        break;
                    }
                }
            } else {
                // If no copy collapse sent, validate each image configuration (snapshot or active image).
                if (!validateImageConfig(canDoActionMessages, domainsMap, image)) {
                    return false;
                }
            }
            image.setStoragePoolId(getParameters().getStoragePoolId());
            // we put the source domain id in order that copy will
            // work properly.
            // we fix it to DestDomainId in
            // MoveOrCopyAllImageGroups();
            image.setStorageIds(new ArrayList<Guid>(Arrays.asList(getParameters().getSourceDomainId())));
        }
        Map<Guid, List<DiskImage>> images = ImagesHandler.getImagesLeaf(getVm().getImages());
        for (Map.Entry<Guid, List<DiskImage>> entry : images.entrySet()) {
            Guid id = entry.getKey();
            List<DiskImage> diskList = entry.getValue();
            getVm().getDiskMap().put(id, ImagesHandler.getActiveVolumeDisk(diskList));
        }
    }
    return true;
}
#method_after
private boolean canDoActionBeforeCloneVm(Map<Guid, StorageDomain> domainsMap) {
    List<String> canDoActionMessages = getReturnValue().getCanDoActionMessages();
    if (getVm() != null) {
        setDescription(getVmName());
    }
    if (!checkStoragePool()) {
        return false;
    }
    Set<Guid> destGuids = new HashSet<Guid>(imageToDestinationDomainMap.values());
    for (Guid destGuid : destGuids) {
        StorageDomain storageDomain = getStorageDomain(destGuid);
        StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
        if (!validate(validator.isDomainExistAndActive()) || !validate(validator.domainIsValidDestination())) {
            return false;
        }
        domainsMap.put(destGuid, storageDomain);
    }
    if (getParameters().isImportAsNewEntity() && !getParameters().getCopyCollapse()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMPORT_CLONE_NOT_COLLAPSED);
    }
    setSourceDomainId(getParameters().getSourceDomainId());
    StorageDomainValidator validator = new StorageDomainValidator(getSourceDomain());
    if (validator.isDomainExistAndActive().isValid() && getSourceDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    List<VM> vms = getVmsFromExportDomain();
    if (vms == null) {
        return false;
    }
    VM vm = LinqUtils.firstOrNull(vms, new Predicate<VM>() {

        @Override
        public boolean eval(VM evalVm) {
            return evalVm.getId().equals(getParameters().getVm().getId());
        }
    });
    if (vm != null) {
        // At this point we should work with the VM that was read from
        // the OVF
        setVm(vm);
        // Iterate over all the VM images (active image and snapshots)
        for (DiskImage image : getVm().getImages()) {
            if (Guid.Empty.equals(image.getVmSnapshotId())) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID);
            }
            if (getParameters().getCopyCollapse()) {
                // a match with the image from the VM.
                for (DiskImage p : imageList) {
                    // only if requested by the user
                    if (p.getImageId().equals(image.getImageId())) {
                        if (p.getVolumeFormat() != null) {
                            image.setvolumeFormat(p.getVolumeFormat());
                        }
                        if (p.getVolumeType() != null) {
                            image.setVolumeType(p.getVolumeType());
                        }
                        // Validate the configuration of the image got from the parameters.
                        if (!validateImageConfig(canDoActionMessages, domainsMap, image)) {
                            return false;
                        }
                        break;
                    }
                }
            } else {
                // If no copy collapse sent, validate each image configuration (snapshot or active image).
                if (!validateImageConfig(canDoActionMessages, domainsMap, image)) {
                    return false;
                }
            }
            image.setStoragePoolId(getParameters().getStoragePoolId());
            // we put the source domain id in order that copy will
            // work properly.
            // we fix it to DestDomainId in
            // MoveOrCopyAllImageGroups();
            image.setStorageIds(new ArrayList<Guid>(Arrays.asList(getParameters().getSourceDomainId())));
        }
        Map<Guid, List<DiskImage>> images = ImagesHandler.getImagesLeaf(getVm().getImages());
        for (Map.Entry<Guid, List<DiskImage>> entry : images.entrySet()) {
            Guid id = entry.getKey();
            List<DiskImage> diskList = entry.getValue();
            getVm().getDiskMap().put(id, getActiveVolumeDisk(diskList));
        }
    }
    return true;
}
#end_block

#method_before
protected List<VM> getVmsFromExportDomain() {
    GetAllFromExportDomainQueryParameters p = new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId());
    VdcQueryReturnValue qRetVal = getBackend().runInternalQuery(VdcQueryType.GetVmsFromExportDomain, p);
    return qRetVal.getSucceeded() ? (List<VM>) qRetVal.getReturnValue() : null;
}
#method_after
protected List<VM> getVmsFromExportDomain() {
    GetAllFromExportDomainQueryParameters p = new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId());
    VdcQueryReturnValue qRetVal = getBackend().runInternalQuery(VdcQueryType.GetVmsFromExportDomain, p);
    return qRetVal.getSucceeded() ? qRetVal.<List<VM>>getReturnValue() : null;
}
#end_block

#method_before
private boolean validateImageConfig(List<String> canDoActionMessages, Map<Guid, StorageDomain> domainsMap, DiskImage image) {
    return ImagesHandler.CheckImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(image.getId())).getStorageStaticData(), image, canDoActionMessages);
}
#method_after
private boolean validateImageConfig(List<String> canDoActionMessages, Map<Guid, StorageDomain> domainsMap, DiskImage image) {
    return ImagesHandler.checkImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(image.getId())).getStorageStaticData(), image, canDoActionMessages);
}
#end_block

#method_before
private boolean canDoActionAfterCloneVm(Map<Guid, StorageDomain> domainsMap) {
    VM vm = getParameters().getVm();
    // check that the imported vm guid is not in engine
    if (!validateNoDuplicateVm()) {
        return false;
    }
    if (!validateNoDuplicateDiskImages(imageList)) {
        return false;
    }
    if (!validateDiskInterface(imageList)) {
        return false;
    }
    setVmTemplateId(getVm().getVmtGuid());
    if (!templateExists() || !checkTemplateInStorageDomain() || !checkImagesGUIDsLegal() || !canAddVm()) {
        return false;
    }
    if (!VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid()) && getVmTemplate() != null && getVmTemplate().getStatus() == VmTemplateStatus.Locked) {
        return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (getParameters().getCopyCollapse() && vm.getDiskMap() != null) {
        for (Disk disk : vm.getDiskMap().values()) {
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage key = (DiskImage) getVm().getDiskMap().get(disk.getId());
                if (key != null) {
                    if (!ImagesHandler.CheckImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(key.getId())).getStorageStaticData(), (DiskImageBase) disk, getReturnValue().getCanDoActionMessages())) {
                        return false;
                    }
                }
            }
        }
    }
    // (backup) domain
    if (getParameters().getCopyCollapse() && !isTemplateExistsOnExportDomain()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMPORTED_TEMPLATE_IS_MISSING);
        addCanDoActionMessage(String.format("$DomainName %1$s", getStorageDomainStaticDAO().get(getParameters().getSourceDomainId()).getStorageName()));
        return false;
    }
    if (!validateVdsCluster()) {
        return false;
    }
    Map<StorageDomain, Integer> domainMap = getSpaceRequirementsForStorageDomains(imageList);
    if (!setDomainsForMemoryImages(domainMap)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NO_SUITABLE_DOMAIN_FOUND);
    }
    for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
        if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
            return false;
        }
    }
    if (!validateUsbPolicy()) {
        return false;
    }
    if (!validateMacAddress(Entities.<VmNic, VmNetworkInterface>upcast(getVm().getInterfaces()))) {
        return false;
    }
    return true;
}
#method_after
private boolean canDoActionAfterCloneVm(Map<Guid, StorageDomain> domainsMap) {
    VM vm = getParameters().getVm();
    // check that the imported vm guid is not in engine
    if (!validateNoDuplicateVm()) {
        return false;
    }
    if (!validateNoDuplicateDiskImages(imageList)) {
        return false;
    }
    if (!validateDiskInterface(imageList)) {
        return false;
    }
    setVmTemplateId(getVm().getVmtGuid());
    if (!templateExists() || !checkTemplateInStorageDomain() || !checkImagesGUIDsLegal() || !canAddVm()) {
        return false;
    }
    if (!VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid()) && getVmTemplate() != null && getVmTemplate().getStatus() == VmTemplateStatus.Locked) {
        return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (getParameters().getCopyCollapse() && vm.getDiskMap() != null) {
        for (Disk disk : vm.getDiskMap().values()) {
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage key = (DiskImage) getVm().getDiskMap().get(disk.getId());
                if (key != null) {
                    if (!ImagesHandler.checkImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(key.getId())).getStorageStaticData(), (DiskImageBase) disk, getReturnValue().getCanDoActionMessages())) {
                        return false;
                    }
                }
            }
        }
    }
    // (backup) domain
    if (getParameters().getCopyCollapse() && !isTemplateExistsOnExportDomain()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMPORTED_TEMPLATE_IS_MISSING, String.format("$DomainName %1$s", getStorageDomainStaticDAO().get(getParameters().getSourceDomainId()).getStorageName()));
    }
    if (!validateVmArchitecture()) {
        return false;
    }
    if (!validateVdsCluster()) {
        return false;
    }
    Map<StorageDomain, Integer> domainMap = getSpaceRequirementsForStorageDomains(imageList);
    if (!setDomainsForMemoryImages(domainMap)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NO_SUITABLE_DOMAIN_FOUND);
    }
    for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
        if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
            return false;
        }
    }
    if (!validateUsbPolicy()) {
        return false;
    }
    if (!validateMacAddress(Entities.<VmNic, VmNetworkInterface>upcast(getVm().getInterfaces()))) {
        return false;
    }
    return true;
}
#end_block

#method_before
private boolean setDomainsForMemoryImages(Map<StorageDomain, Integer> domain2requiredSize) {
    Map<String, String> handledMemoryVolumes = new HashMap<String, String>();
    for (Snapshot snapshot : getVm().getSnapshots()) {
        String memoryVolume = snapshot.getMemoryVolume();
        if (memoryVolume.isEmpty()) {
            continue;
        }
        if (handledMemoryVolumes.containsKey(memoryVolume)) {
            // replace the volume representation with the one with the correct domain & pool
            snapshot.setMemoryVolume(handledMemoryVolumes.get(memoryVolume));
            continue;
        }
        VM vm = getVmFromSnapshot(snapshot);
        int requiredSizeForMemory = (int) Math.ceil((vm.getTotalMemorySizeInBytes() + HibernateVmCommand.META_DATA_SIZE_IN_BYTES) * 1.0 / BYTES_IN_GB);
        StorageDomain storageDomain = VmHandler.findStorageDomainForMemory(getParameters().getStoragePoolId(), requiredSizeForMemory, domain2requiredSize);
        if (storageDomain == null) {
            return false;
        }
        domain2requiredSize.put(storageDomain, domain2requiredSize.get(storageDomain) + requiredSizeForMemory);
        String modifiedMemoryVolume = MemoryUtils.changeStorageDomainAndPoolInMemoryState(memoryVolume, storageDomain.getId(), getParameters().getStoragePoolId());
        // replace the volume representation with the one with the correct domain & pool
        snapshot.setMemoryVolume(modifiedMemoryVolume);
        // save it in case we'll find other snapshots with the same memory volume
        handledMemoryVolumes.put(memoryVolume, modifiedMemoryVolume);
    }
    return true;
}
#method_after
private boolean setDomainsForMemoryImages(Map<StorageDomain, Integer> domain2requiredSize) {
    Map<String, String> handledMemoryVolumes = new HashMap<String, String>();
    for (Snapshot snapshot : getVm().getSnapshots()) {
        String memoryVolume = snapshot.getMemoryVolume();
        if (memoryVolume.isEmpty()) {
            continue;
        }
        if (handledMemoryVolumes.containsKey(memoryVolume)) {
            // replace the volume representation with the one with the correct domain & pool
            snapshot.setMemoryVolume(handledMemoryVolumes.get(memoryVolume));
            continue;
        }
        VM vm = getVmFromSnapshot(snapshot);
        int requiredSizeForMemory = (int) Math.ceil((vm.getTotalMemorySizeInBytes() + HibernateVmCommand.META_DATA_SIZE_IN_BYTES) * 1.0 / BYTES_IN_GB);
        StorageDomain storageDomain = VmHandler.findStorageDomainForMemory(getParameters().getStoragePoolId(), requiredSizeForMemory, domain2requiredSize);
        if (storageDomain == null) {
            return false;
        }
        int requiredSizeInDomainIncludingMemoryVolumes = domain2requiredSize.containsKey(storageDomain) ? domain2requiredSize.get(storageDomain) + requiredSizeForMemory : requiredSizeForMemory;
        domain2requiredSize.put(storageDomain, requiredSizeInDomainIncludingMemoryVolumes);
        String modifiedMemoryVolume = MemoryUtils.changeStorageDomainAndPoolInMemoryState(memoryVolume, storageDomain.getId(), getParameters().getStoragePoolId());
        // replace the volume representation with the one with the correct domain & pool
        snapshot.setMemoryVolume(modifiedMemoryVolume);
        // save it in case we'll find other snapshots with the same memory volume
        handledMemoryVolumes.put(memoryVolume, modifiedMemoryVolume);
    }
    return true;
}
#end_block

#method_before
protected boolean validateNoDuplicateVm() {
    VmStatic duplicateVm = getVmStaticDAO().get(getVm().getId());
    if (duplicateVm != null) {
        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_VM_EXISTS);
        addCanDoActionMessage(String.format("$VmName %1$s", duplicateVm.getName()));
        return false;
    }
    return true;
}
#method_after
protected boolean validateNoDuplicateVm() {
    VmStatic duplicateVm = getVmStaticDAO().get(getVm().getId());
    if (duplicateVm != null) {
        return failCanDoAction(VdcBllMessages.VM_CANNOT_IMPORT_VM_EXISTS, String.format("$VmName %1$s", duplicateVm.getName()));
    }
    return true;
}
#end_block

#method_before
protected boolean validateVdsCluster() {
    List<VDSGroup> groups = getVdsGroupDAO().getAllForStoragePool(getParameters().getStoragePoolId());
    for (VDSGroup group : groups) {
        if (group.getId().equals(getParameters().getVdsGroupId())) {
            if (group.getArchitectureType() != getVm().getArchitecture()) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_VM_ARCHITECTURE_NOT_SUPPORTED_BY_CLUSTER);
            }
            return true;
        }
    }
    return failCanDoAction(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
}
#method_after
protected boolean validateVdsCluster() {
    List<VDSGroup> groups = getVdsGroupDAO().getAllForStoragePool(getParameters().getStoragePoolId());
    for (VDSGroup group : groups) {
        if (group.getId().equals(getParameters().getVdsGroupId())) {
            if (group.getArchitecture() != getVm().getClusterArch()) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_VM_ARCHITECTURE_NOT_SUPPORTED_BY_CLUSTER);
            }
            return true;
        }
    }
    return failCanDoAction(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
}
#end_block

#method_before
private boolean isTemplateExistsOnExportDomain() {
    if (VmTemplateHandler.BlankVmTemplateId.equals(getParameters().getVm().getVmtGuid())) {
        return true;
    }
    VdcQueryReturnValue qRetVal = Backend.getInstance().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId()));
    if (qRetVal.getSucceeded()) {
        Map<VmTemplate, ?> templates = (Map<VmTemplate, ?>) qRetVal.getReturnValue();
        for (VmTemplate template : templates.keySet()) {
            if (getParameters().getVm().getVmtGuid().equals(template.getId())) {
                return true;
            }
        }
    }
    return false;
}
#method_after
private boolean isTemplateExistsOnExportDomain() {
    if (VmTemplateHandler.BlankVmTemplateId.equals(getParameters().getVm().getVmtGuid())) {
        return true;
    }
    VdcQueryReturnValue qRetVal = Backend.getInstance().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId()));
    if (qRetVal.getSucceeded()) {
        Map<VmTemplate, ?> templates = qRetVal.getReturnValue();
        for (VmTemplate template : templates.keySet()) {
            if (getParameters().getVm().getVmtGuid().equals(template.getId())) {
                return true;
            }
        }
    }
    return false;
}
#end_block

#method_before
protected boolean checkTemplateInStorageDomain() {
    boolean retValue = getParameters().isImportAsNewEntity() || checkIfDisksExist(imageList);
    if (retValue && !VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid()) && !getParameters().getCopyCollapse()) {
        List<StorageDomain> domains = (List<StorageDomain>) Backend.getInstance().runInternalQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(getVm().getVmtGuid())).getReturnValue();
        List<Guid> domainsId = LinqUtils.foreach(domains, new Function<StorageDomain, Guid>() {

            @Override
            public Guid eval(StorageDomain storageDomainStatic) {
                return storageDomainStatic.getId();
            }
        });
        if (Collections.disjoint(domainsId, imageToDestinationDomainMap.values())) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
        }
    }
    return retValue;
}
#method_after
protected boolean checkTemplateInStorageDomain() {
    boolean retValue = getParameters().isImportAsNewEntity() || checkIfDisksExist(imageList);
    if (retValue && !VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid()) && !getParameters().getCopyCollapse()) {
        List<StorageDomain> domains = Backend.getInstance().runInternalQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(getVm().getVmtGuid())).getReturnValue();
        List<Guid> domainsId = LinqUtils.foreach(domains, new Function<StorageDomain, Guid>() {

            @Override
            public Guid eval(StorageDomain storageDomainStatic) {
                return storageDomainStatic.getId();
            }
        });
        if (Collections.disjoint(domainsId, imageToDestinationDomainMap.values())) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
        }
    }
    return retValue;
}
#end_block

#method_before
private void processImages() {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            addVmImagesAndSnapshots();
            updateSnapshotsFromExport();
            moveOrCopyAllImageGroups();
            VmDeviceUtils.addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity());
            VmHandler.LockVm(getVm().getId());
            if (getParameters().isImportAsNewEntity()) {
                getParameters().setVm(getVm());
                setVmId(getVm().getId());
            }
            return null;
        }
    });
}
#method_after
private void processImages() {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            addVmImagesAndSnapshots();
            updateSnapshotsFromExport();
            moveOrCopyAllImageGroups();
            VmDeviceUtils.addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity());
            VmHandler.lockVm(getVm().getId());
            if (getParameters().isImportAsNewEntity()) {
                getParameters().setVm(getVm());
                setVmId(getVm().getId());
            }
            return null;
        }
    });
}
#end_block

#method_before
@Override
protected void moveOrCopyAllImageGroups() {
    moveOrCopyAllImageGroups(getVm().getId(), ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), false, false));
    copyAllMemoryImages(getVm().getId());
}
#method_after
@Override
protected void moveOrCopyAllImageGroups() {
    moveOrCopyAllImageGroups(getVm().getId(), ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), false, false, true));
    copyAllMemoryImages(getVm().getId());
}
#end_block

#method_before
private MoveOrCopyImageGroupParameters buildMoveOrCopyImageGroupParametersForDisk(DiskImage disk, Guid containerID) {
    Guid originalDiskId = newDiskIdForDisk.get(disk.getId()).getId();
    Guid destinationDomain = imageToDestinationDomainMap.get(originalDiskId);
    MoveOrCopyImageGroupParameters params = new MoveOrCopyImageGroupParameters(containerID, originalDiskId, newDiskIdForDisk.get(disk.getId()).getImageId(), disk.getId(), disk.getImageId(), destinationDomain, getMoveOrCopyImageOperation());
    params.setParentCommand(getActionType());
    params.setUseCopyCollapse(getParameters().getCopyCollapse());
    params.setCopyVolumeType(CopyVolumeType.LeafVol);
    params.setForceOverride(getParameters().getForceOverride());
    params.setSourceDomainId(getParameters().getSourceDomainId());
    params.setStoragePoolId(getParameters().getStoragePoolId());
    params.setImportEntity(true);
    params.setEntityInfo(new EntityInfo(VdcObjectType.VM, getVm().getId()));
    params.setQuotaId(disk.getQuotaId() != null ? disk.getQuotaId() : getParameters().getQuotaId());
    if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(originalDiskId)) {
        DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(originalDiskId);
        params.setVolumeType(diskImageBase.getVolumeType());
        params.setVolumeFormat(diskImageBase.getVolumeFormat());
    }
    params.setParentParameters(getParameters());
    return params;
}
#method_after
private MoveOrCopyImageGroupParameters buildMoveOrCopyImageGroupParametersForDisk(DiskImage disk, Guid containerID) {
    Guid originalDiskId = newDiskIdForDisk.get(disk.getId()).getId();
    Guid destinationDomain = imageToDestinationDomainMap.get(originalDiskId);
    MoveOrCopyImageGroupParameters params = new MoveOrCopyImageGroupParameters(containerID, originalDiskId, newDiskIdForDisk.get(disk.getId()).getImageId(), disk.getId(), disk.getImageId(), destinationDomain, getMoveOrCopyImageOperation());
    params.setParentCommand(getActionType());
    params.setUseCopyCollapse(getParameters().getCopyCollapse());
    params.setCopyVolumeType(CopyVolumeType.LeafVol);
    params.setForceOverride(getParameters().getForceOverride());
    params.setSourceDomainId(getParameters().getSourceDomainId());
    params.setStoragePoolId(getParameters().getStoragePoolId());
    params.setImportEntity(true);
    params.setEntityInfo(new EntityInfo(VdcObjectType.VM, getVm().getId()));
    params.setRevertDbOperationScope(ImageDbOperationScope.IMAGE);
    params.setQuotaId(disk.getQuotaId() != null ? disk.getQuotaId() : getParameters().getQuotaId());
    if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(originalDiskId)) {
        DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(originalDiskId);
        params.setVolumeType(diskImageBase.getVolumeType());
        params.setVolumeFormat(diskImageBase.getVolumeFormat());
    }
    params.setParentParameters(getParameters());
    return params;
}
#end_block

#method_before
protected void addVmImagesAndSnapshots() {
    Map<Guid, List<DiskImage>> images = ImagesHandler.getImagesLeaf(getVm().getImages());
    if (getParameters().getCopyCollapse()) {
        Guid snapshotId = Guid.newGuid();
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = ImagesHandler.getActiveVolumeDisk(diskList);
            disk.setParentId(VmTemplateHandler.BlankVmTemplateId);
            disk.setImageTemplateId(VmTemplateHandler.BlankVmTemplateId);
            disk.setVmSnapshotId(snapshotId);
            disk.setActive(true);
            if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(disk.getId())) {
                DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(disk.getId());
                disk.setvolumeFormat(diskImageBase.getVolumeFormat());
                disk.setVolumeType(diskImageBase.getVolumeType());
            }
            setDiskStorageDomainInfo(disk);
            if (getParameters().isImportAsNewEntity()) {
                generateNewDiskId(diskList, disk);
            } else {
                newDiskIdForDisk.put(disk.getId(), disk);
            }
            disk.setCreationDate(new Date());
            saveImage(disk);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            saveBaseDisk(disk);
            saveDiskImageDynamic(disk);
        }
        Snapshot snapshot = addActiveSnapshot(snapshotId);
        getVm().setSnapshots(Arrays.asList(snapshot));
    } else {
        Guid snapshotId = null;
        for (DiskImage disk : getVm().getImages()) {
            disk.setActive(false);
            setDiskStorageDomainInfo(disk);
            saveImage(disk);
            snapshotId = disk.getVmSnapshotId();
            saveSnapshotIfNotExists(snapshotId, disk);
            saveDiskImageDynamic(disk);
        }
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = ImagesHandler.getActiveVolumeDisk(diskList);
            newDiskIdForDisk.put(disk.getId(), disk);
            snapshotId = disk.getVmSnapshotId();
            disk.setActive(true);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            updateImage(disk);
            saveBaseDisk(disk);
        }
        // Update active snapshot's data, since it was inserted as a regular snapshot.
        updateActiveSnapshot(snapshotId);
    }
}
#method_after
protected void addVmImagesAndSnapshots() {
    Map<Guid, List<DiskImage>> images = ImagesHandler.getImagesLeaf(getVm().getImages());
    if (getParameters().getCopyCollapse()) {
        Guid snapshotId = Guid.newGuid();
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = getActiveVolumeDisk(diskList);
            disk.setParentId(VmTemplateHandler.BlankVmTemplateId);
            disk.setImageTemplateId(VmTemplateHandler.BlankVmTemplateId);
            disk.setVmSnapshotId(snapshotId);
            disk.setActive(true);
            if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(disk.getId())) {
                DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(disk.getId());
                disk.setvolumeFormat(diskImageBase.getVolumeFormat());
                disk.setVolumeType(diskImageBase.getVolumeType());
            }
            setDiskStorageDomainInfo(disk);
            if (getParameters().isImportAsNewEntity()) {
                generateNewDiskId(diskList, disk);
                updateManagedDeviceMap(disk, getVm().getStaticData().getManagedDeviceMap());
            } else {
                newDiskIdForDisk.put(disk.getId(), disk);
            }
            disk.setCreationDate(new Date());
            saveImage(disk);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            saveBaseDisk(disk);
            saveDiskImageDynamic(disk);
        }
        Snapshot snapshot = addActiveSnapshot(snapshotId);
        getVm().setSnapshots(Arrays.asList(snapshot));
    } else {
        Guid snapshotId = null;
        for (DiskImage disk : getVm().getImages()) {
            disk.setActive(false);
            setDiskStorageDomainInfo(disk);
            saveImage(disk);
            snapshotId = disk.getVmSnapshotId();
            saveSnapshotIfNotExists(snapshotId, disk);
            saveDiskImageDynamic(disk);
        }
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = getActiveVolumeDisk(diskList);
            newDiskIdForDisk.put(disk.getId(), disk);
            snapshotId = disk.getVmSnapshotId();
            disk.setActive(true);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            updateImage(disk);
            saveBaseDisk(disk);
        }
        // Update active snapshot's data, since it was inserted as a regular snapshot.
        updateActiveSnapshot(snapshotId);
    }
}
#end_block

#method_before
protected void addVmInterfaces() {
    VmInterfaceManager vmInterfaceManager = new VmInterfaceManager();
    List<String> invalidNetworkNames = new ArrayList<>();
    List<String> invalidIfaceNames = new ArrayList<>();
    Map<String, Network> networksInClusterByName = Entities.entitiesByName(getNetworkDAO().getAllForCluster(getVm().getVdsGroupId()));
    List<VnicProfileView> vnicProfilesInDc = getDbFacade().getVnicProfileViewDao().getAllForDataCenter(getStoragePoolId());
    for (VmNetworkInterface iface : getVm().getInterfaces()) {
        initInterface(iface);
        if (!vmInterfaceManager.updateNicWithVnicProfile(iface, getVdsGroup().getcompatibility_version(), networksInClusterByName, vnicProfilesInDc, getCurrentUser().getUserId())) {
            markNicHasNoProfile(invalidNetworkNames, invalidIfaceNames, iface);
        }
        vmInterfaceManager.add(iface, getCompensationContext(), getParameters().isImportAsNewEntity(), getVdsGroup().getcompatibility_version());
        macsAdded.add(iface.getMacAddress());
    }
    auditInvalidInterfaces(invalidNetworkNames, invalidIfaceNames);
}
#method_after
protected void addVmInterfaces() {
    VmInterfaceManager vmInterfaceManager = new VmInterfaceManager();
    VnicProfileHelper vnicProfileHelper = new VnicProfileHelper(getVm().getVdsGroupId(), getStoragePoolId(), getVdsGroup().getcompatibility_version(), AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES);
    for (VmNetworkInterface iface : getVm().getInterfaces()) {
        initInterface(iface);
        vnicProfileHelper.updateNicWithVnicProfileForUser(iface, getCurrentUser());
        vmInterfaceManager.add(iface, getCompensationContext(), getParameters().isImportAsNewEntity(), getVm().getOs(), getVdsGroup().getcompatibility_version());
        macsAdded.add(iface.getMacAddress());
    }
    vnicProfileHelper.auditInvalidInterfaces(getVmName());
}
#end_block

#method_before
private void addVmDynamic() {
    VmDynamic tempVar = new VmDynamic();
    tempVar.setId(getVmId());
    tempVar.setStatus(VMStatus.ImageLocked);
    tempVar.setVmHost("");
    tempVar.setVmIp("");
    tempVar.setAppList(getParameters().getVm().getDynamicData().getAppList());
    getVmDynamicDAO().save(tempVar);
    getCompensationContext().snapshotNewEntity(tempVar);
}
#method_after
private void addVmDynamic() {
    VmDynamic tempVar = new VmDynamic();
    tempVar.setId(getVmId());
    tempVar.setStatus(VMStatus.ImageLocked);
    tempVar.setVmHost("");
    tempVar.setVmIp("");
    tempVar.setVmFQDN("");
    tempVar.setAppList(getParameters().getVm().getDynamicData().getAppList());
    getVmDynamicDAO().save(tempVar);
    getCompensationContext().snapshotNewEntity(tempVar);
}
#end_block

#method_before
@Override
protected void endActionOnAllImageGroups() {
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        p.setTaskGroupSuccess(getParameters().getTaskGroupSuccess());
        getBackend().EndAction(getImagesActionType(), p);
    }
}
#method_after
@Override
protected void endActionOnAllImageGroups() {
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        p.setTaskGroupSuccess(getParameters().getTaskGroupSuccess());
        getBackend().endAction(getImagesActionType(), p);
    }
}
#end_block

#method_before
@Override
protected void endWithFailure() {
    // Going to try and refresh the VM by re-loading it form DB
    setVm(null);
    if (getVm() != null) {
        removeVmSnapshots(getVm());
        endActionOnAllImageGroups();
        removeVmNetworkInterfaces();
        getVmDynamicDAO().remove(getVmId());
        getVmStatisticsDAO().remove(getVmId());
        getVmStaticDAO().remove(getVmId());
        setSucceeded(true);
    } else {
        // Setting VM from params, for logging purposes
        setVm(getParameters().getVm());
        // No point in trying to end action again, as the imported VM does not exist in the DB.
        getReturnValue().setEndActionTryAgain(false);
    }
}
#method_after
@Override
protected void endWithFailure() {
    // Going to try and refresh the VM by re-loading it form DB
    setVm(null);
    if (getVm() != null) {
        removeVmSnapshots();
        endActionOnAllImageGroups();
        removeVmNetworkInterfaces();
        getVmDynamicDAO().remove(getVmId());
        getVmStatisticsDAO().remove(getVmId());
        getVmStaticDAO().remove(getVmId());
        setSucceeded(true);
    } else {
        // Setting VM from params, for logging purposes
        setVm(getParameters().getVm());
        // No point in trying to end action again, as the imported VM does not exist in the DB.
        getReturnValue().setEndActionTryAgain(false);
    }
}
#end_block

#method_before
private void removeVmSnapshots(VM vm) {
    Set<String> memoryStates = snapshotsManager.removeSnapshots(vm.getId());
    if (!memoryStates.isEmpty()) {
        new MemoryImageRemoverOnDataDomain(vm, this).remove(memoryStates);
    }
}
#method_after
private void removeVmSnapshots() {
    Guid vmId = getVmId();
    Set<String> memoryStates = snapshotsManager.removeSnapshots(vmId);
    for (String memoryState : memoryStates) {
        removeMemoryVolumes(memoryState, vmId);
    }
}
#end_block

#method_before
private void endVmRelatedOps() {
    setVm(null);
    if (getVm() != null) {
        VmHandler.UnLockVm(getVm());
    } else {
        setCommandShouldBeLogged(false);
        log.warn("ImportVmCommand::EndImportCommand: Vm is null - not performing full EndAction");
    }
}
#method_after
private void endVmRelatedOps() {
    setVm(null);
    if (getVm() != null) {
        VmHandler.unLockVm(getVm());
    } else {
        setCommandShouldBeLogged(false);
        log.warn("ImportVmCommand::EndImportCommand: Vm is null - not performing full endAction");
    }
}
#end_block

#method_before
// /////////////////////////////////////
// TaskHandlerCommand Implementation //
// /////////////////////////////////////
public T getParameters() {
    return super.getParameters();
}
#method_after
// /////////////////////////////////////
// TaskHandlerCommand Implementation //
// /////////////////////////////////////
@Override
public T getParameters() {
    return super.getParameters();
}
#end_block

#method_before
public VdcActionType getActionType() {
    return super.getActionType();
}
#method_after
@Override
public VdcActionType getActionType() {
    return super.getActionType();
}
#end_block

#method_before
public VdcReturnValueBase getReturnValue() {
    return super.getReturnValue();
}
#method_after
@Override
public VdcReturnValueBase getReturnValue() {
    return super.getReturnValue();
}
#end_block

#method_before
public ExecutionContext getExecutionContext() {
    return super.getExecutionContext();
}
#method_after
@Override
public ExecutionContext getExecutionContext() {
    return super.getExecutionContext();
}
#end_block

#method_before
public void setExecutionContext(ExecutionContext executionContext) {
    super.setExecutionContext(executionContext);
}
#method_after
@Override
public void setExecutionContext(ExecutionContext executionContext) {
    super.setExecutionContext(executionContext);
}
#end_block

#method_before
public Guid createTask(Guid taskId, AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand, VdcObjectType entityType, Guid... entityIds) {
    return super.createTaskInCurrentTransaction(taskId, asyncTaskCreationInfo, parentCommand, entityType, entityIds);
}
#method_after
@Override
public Guid createTask(Guid taskId, AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand, VdcObjectType entityType, Guid... entityIds) {
    return super.createTaskInCurrentTransaction(taskId, asyncTaskCreationInfo, parentCommand, entityType, entityIds);
}
#end_block

#method_before
public Guid createTask(Guid taskId, AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand) {
    return super.createTask(taskId, asyncTaskCreationInfo, parentCommand);
}
#method_after
@Override
public Guid createTask(Guid taskId, AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand) {
    return super.createTask(taskId, asyncTaskCreationInfo, parentCommand);
}
#end_block

#method_before
public ArrayList<Guid> getTaskIdList() {
    return super.getTaskIdList();
}
#method_after
@Override
public ArrayList<Guid> getTaskIdList() {
    return super.getTaskIdList();
}
#end_block

#method_before
public void preventRollback() {
    throw new NotImplementedException();
}
#method_after
@Override
public void preventRollback() {
    throw new NotImplementedException();
}
#end_block

#method_before
public Guid persistAsyncTaskPlaceHolder() {
    return super.persistAsyncTaskPlaceHolder(getActionType());
}
#method_after
@Override
public Guid persistAsyncTaskPlaceHolder() {
    return super.persistAsyncTaskPlaceHolder(getActionType());
}
#end_block

#method_before
public Guid persistAsyncTaskPlaceHolder(String taskKey) {
    return super.persistAsyncTaskPlaceHolder(getActionType(), taskKey);
}
#method_after
@Override
public Guid persistAsyncTaskPlaceHolder(String taskKey) {
    return super.persistAsyncTaskPlaceHolder(getActionType(), taskKey);
}
#end_block

#method_before
@Override
protected void readOsSection(XmlNode section) {
    _vm.getStaticData().setId(new Guid(section.Attributes.get("ovf:id").getValue()));
    XmlNode node = section.SelectSingleNode("Description");
    if (node != null) {
        // backward compatibility code - os id of type Other is now 0 . "Unassigned" is removed but its Id is in use
        if (node.InnerText.equals(String.valueOf(OsRepository.OLD_OTHER_ID))) {
            node.InnerText = String.valueOf(OsRepository.DEFAULT_OS);
        }
        int osId = osRepository.getOsIdByUniqueName(node.InnerText);
        _vm.getStaticData().setOsId(osId);
        _vm.setArchitecture(osRepository.getArchitectureFromOS(osId));
    } else {
        _vm.setArchitecture(ArchitectureType.undefined);
    }
}
#method_after
@Override
protected void readOsSection(XmlNode section) {
    _vm.getStaticData().setId(new Guid(section.attributes.get("ovf:id").getValue()));
    XmlNode node = section.SelectSingleNode("Description");
    if (node != null) {
        int osId = osRepository.getOsIdByUniqueName(node.innerText);
        _vm.getStaticData().setOsId(osId);
        _vm.setClusterArch(osRepository.getArchitectureFromOS(osId));
    } else {
        _vm.setClusterArch(ArchitectureType.undefined);
    }
}
#end_block

#method_before
@Override
protected void readHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        String resourceType = node.SelectSingleNode("rasd:ResourceType", _xmlNS).InnerText;
        if (OvfHardware.CPU.equals(resourceType)) {
            _vm.getStaticData().setNumOfSockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).InnerText));
            _vm.getStaticData().setCpuPerSocket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).InnerText));
        } else if (OvfHardware.Memory.equals(resourceType)) {
            _vm.getStaticData().setMemSizeMb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
        } else if (OvfHardware.DiskImage.equals(resourceType)) {
            final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText);
            DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                @Override
                public boolean eval(DiskImage diskImage) {
                    return diskImage.getImageId().equals(guid);
                }
            });
            image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).InnerText));
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText)) {
                image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText)) {
                image.setImageTemplateId(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText));
            }
            image.setAppList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).InnerText);
            XmlNode storageNode = node.SelectSingleNode("rasd:StorageId", _xmlNS);
            if (storageNode != null && StringUtils.isNotEmpty(storageNode.InnerText)) {
                image.setStorageIds(new ArrayList<Guid>(Arrays.asList(new Guid(storageNode.InnerText))));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText)) {
                image.setStoragePoolId(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText));
            }
            final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).InnerText);
            if (creationDate != null) {
                image.setCreationDate(creationDate);
            }
            final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).InnerText);
            if (lastModified != null) {
                image.setLastModified(lastModified);
            }
            final Date last_modified_date = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:last_modified_date", _xmlNS).InnerText);
            if (last_modified_date != null) {
                image.setLastModifiedDate(last_modified_date);
            }
            VmDevice readDevice = readVmDevice(node, _vm.getStaticData(), image.getId(), Boolean.TRUE);
            image.setPlugged(readDevice.getIsPlugged());
        } else if (OvfHardware.Network.equals(resourceType)) {
            VmNetworkInterface iface = getNetwotkInterface(node);
            updateSingleNic(node, iface);
            _vm.getInterfaces().add(iface);
            readVmDevice(node, _vm.getStaticData(), iface.getId(), Boolean.TRUE);
        } else if (OvfHardware.USB.equals(resourceType)) {
            _vm.getStaticData().setUsbPolicy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).InnerText));
        } else if (OvfHardware.Monitor.equals(resourceType)) {
            _vm.getStaticData().setNumOfMonitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
            if (node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS) != null) {
                _vm.setSingleQxlPci(Boolean.parseBoolean(node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS).InnerText));
            }
            readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
        } else if (OvfHardware.CD.equals(resourceType)) {
            readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
        } else if (OvfHardware.OTHER.equals(resourceType)) {
            if (node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS) != null && StringUtils.isNotEmpty(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText)) {
                VmDeviceGeneralType type = VmDeviceGeneralType.forValue(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText));
                String device = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).InnerText);
                // special devices are treated as managed devices but still have the OTHER OVF ResourceType
                if (VmDeviceCommonUtils.isSpecialDevice(device, type)) {
                    readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
                } else {
                    readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.FALSE);
                }
            } else {
                readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.FALSE);
            }
        }
    }
}
#method_after
@Override
protected void readHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        String resourceType = node.SelectSingleNode("rasd:ResourceType", _xmlNS).innerText;
        if (OvfHardware.CPU.equals(resourceType)) {
            _vm.getStaticData().setNumOfSockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).innerText));
            _vm.getStaticData().setCpuPerSocket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).innerText));
        } else if (OvfHardware.Memory.equals(resourceType)) {
            _vm.getStaticData().setMemSizeMb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).innerText));
        } else if (OvfHardware.DiskImage.equals(resourceType)) {
            final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).innerText);
            DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                @Override
                public boolean eval(DiskImage diskImage) {
                    return diskImage.getImageId().equals(guid);
                }
            });
            image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).innerText));
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).innerText)) {
                image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).innerText));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).innerText)) {
                image.setImageTemplateId(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).innerText));
            }
            image.setAppList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).innerText);
            XmlNode storageNode = node.SelectSingleNode("rasd:StorageId", _xmlNS);
            if (storageNode != null && StringUtils.isNotEmpty(storageNode.innerText)) {
                image.setStorageIds(new ArrayList<Guid>(Arrays.asList(new Guid(storageNode.innerText))));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).innerText)) {
                image.setStoragePoolId(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).innerText));
            }
            final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).innerText);
            if (creationDate != null) {
                image.setCreationDate(creationDate);
            }
            final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).innerText);
            if (lastModified != null) {
                image.setLastModified(lastModified);
            }
            final Date last_modified_date = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:last_modified_date", _xmlNS).innerText);
            if (last_modified_date != null) {
                image.setLastModifiedDate(last_modified_date);
            }
            VmDevice readDevice = readVmDevice(node, _vm.getStaticData(), image.getId(), Boolean.TRUE);
            image.setPlugged(readDevice.getIsPlugged());
            image.setReadOnly(readDevice.getIsReadOnly());
        } else if (OvfHardware.Network.equals(resourceType)) {
            VmNetworkInterface iface = getNetwotkInterface(node);
            updateSingleNic(node, iface);
            _vm.getInterfaces().add(iface);
            readVmDevice(node, _vm.getStaticData(), iface.getId(), Boolean.TRUE);
        } else if (OvfHardware.USB.equals(resourceType)) {
            _vm.getStaticData().setUsbPolicy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).innerText));
        } else if (OvfHardware.Monitor.equals(resourceType)) {
            _vm.getStaticData().setNumOfMonitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).innerText));
            if (node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS) != null) {
                _vm.setSingleQxlPci(Boolean.parseBoolean(node.SelectSingleNode("rasd:SinglePciQxl", _xmlNS).innerText));
            }
            readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
        } else if (OvfHardware.CD.equals(resourceType)) {
            readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
        } else if (OvfHardware.OTHER.equals(resourceType)) {
            if (node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS) != null && StringUtils.isNotEmpty(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).innerText)) {
                VmDeviceGeneralType type = VmDeviceGeneralType.forValue(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).innerText));
                String device = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).innerText);
                // special devices are treated as managed devices but still have the OTHER OVF ResourceType
                if (VmDeviceCommonUtils.isSpecialDevice(device, type)) {
                    readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.TRUE);
                } else {
                    readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.FALSE);
                }
            } else {
                readVmDevice(node, _vm.getStaticData(), Guid.newGuid(), Boolean.FALSE);
            }
        }
    }
}
#end_block

#method_before
@Override
protected void readGeneralData(XmlNode content) {
    // General Vm
    XmlNode node = content.SelectSingleNode("Name");
    if (node != null) {
        _vm.getStaticData().setName(node.InnerText);
        name = _vm.getStaticData().getName();
    }
    node = content.SelectSingleNode("TemplateId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            _vm.getStaticData().setVmtGuid(new Guid(node.InnerText));
        }
    }
    node = content.SelectSingleNode("TemplateName");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            _vm.setVmtName(node.InnerText);
        }
    }
    node = content.SelectSingleNode("IsInitilized");
    if (node != null) {
        _vm.getStaticData().setInitialized(Boolean.parseBoolean(node.InnerText));
    }
    node = content.SelectSingleNode("TimeZone");
    if (node != null) {
        _vm.getStaticData().setTimeZone(node.InnerText);
    }
    node = content.SelectSingleNode("quota_id");
    if (node != null) {
        _vm.getStaticData().setQuotaId(new Guid(node.InnerText));
    }
    OvfLogEventHandler<VmStatic> handler = new VMStaticOvfLogHandler(_vm.getStaticData());
    // Gets a list of all the aliases of the fields that should be logged in
    // ovd For each one of these fields, the proper value will be read from
    // the ovf and field in vm static
    List<String> aliases = handler.getAliases();
    for (String alias : aliases) {
        String value = readEventLogValue(content, alias);
        if (StringUtils.isNotEmpty(value)) {
            handler.addValueForAlias(alias, value);
        }
    }
    node = content.SelectSingleNode("app_list");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            _vm.setAppList(node.InnerText);
        }
    } else // if no app list in VM, get it from one of the leafs
    if (_images != null && _images.size() > 0) {
        int root = GetFirstImage(_images, _images.get(0));
        if (root != -1) {
            for (int i = 0; i < _images.size(); i++) {
                int x = GetNextImage(_images, _images.get(i));
                if (x == -1) {
                    _vm.setAppList(_images.get(i).getAppList());
                }
            }
        } else {
            _vm.setAppList(_images.get(0).getAppList());
        }
    }
    node = content.SelectSingleNode("TrustedService");
    if (node != null) {
        _vm.setTrustedService(Boolean.parseBoolean(node.InnerText));
    }
}
#method_after
@Override
protected void readGeneralData(XmlNode content) {
    // General Vm
    XmlNode node = content.SelectSingleNode("Name");
    if (node != null) {
        _vm.getStaticData().setName(node.innerText);
        name = _vm.getStaticData().getName();
    }
    node = content.SelectSingleNode("TemplateId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            _vm.getStaticData().setVmtGuid(new Guid(node.innerText));
        }
    }
    node = content.SelectSingleNode("TemplateName");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            _vm.setVmtName(node.innerText);
        }
    }
    node = content.SelectSingleNode("InstanceTypeId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            _vm.setInstanceTypeId(new Guid(node.innerText));
        }
    }
    node = content.SelectSingleNode("ImageTypeId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            _vm.setImageTypeId(new Guid(node.innerText));
        }
    }
    node = content.SelectSingleNode("IsInitilized");
    if (node != null) {
        _vm.getStaticData().setInitialized(Boolean.parseBoolean(node.innerText));
    }
    node = content.SelectSingleNode("quota_id");
    if (node != null) {
        Guid quotaId = new Guid(node.innerText);
        if (!Guid.Empty.equals(quotaId)) {
            _vm.getStaticData().setQuotaId(quotaId);
        }
    }
    OvfLogEventHandler<VmStatic> handler = new VMStaticOvfLogHandler(_vm.getStaticData());
    // Gets a list of all the aliases of the fields that should be logged in
    // ovd For each one of these fields, the proper value will be read from
    // the ovf and field in vm static
    List<String> aliases = handler.getAliases();
    for (String alias : aliases) {
        String value = readEventLogValue(content, alias);
        if (StringUtils.isNotEmpty(value)) {
            handler.addValueForAlias(alias, value);
        }
    }
    node = content.SelectSingleNode("app_list");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            _vm.setAppList(node.innerText);
        }
    } else // if no app list in VM, get it from one of the leafs
    if (_images != null && _images.size() > 0) {
        int root = GetFirstImage(_images, _images.get(0));
        if (root != -1) {
            for (int i = 0; i < _images.size(); i++) {
                int x = GetNextImage(_images, _images.get(i));
                if (x == -1) {
                    _vm.setAppList(_images.get(i).getAppList());
                }
            }
        } else {
            _vm.setAppList(_images.get(0).getAppList());
        }
    }
    node = content.SelectSingleNode("TrustedService");
    if (node != null) {
        _vm.setTrustedService(Boolean.parseBoolean(node.innerText));
    }
}
#end_block

#method_before
private String readEventLogValue(XmlNode content, String name) {
    StringBuilder fullNameSB = new StringBuilder(EXPORT_ONLY_PREFIX);
    fullNameSB.append(name);
    XmlNode node = content.SelectSingleNode(fullNameSB.toString());
    if (node != null) {
        return node.InnerText;
    }
    return null;
}
#method_after
private String readEventLogValue(XmlNode content, String name) {
    StringBuilder fullNameSB = new StringBuilder(EXPORT_ONLY_PREFIX);
    fullNameSB.append(name);
    XmlNode node = content.SelectSingleNode(fullNameSB.toString());
    if (node != null) {
        return node.innerText;
    }
    return null;
}
#end_block

#method_before
@Override
protected void readSnapshotsSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Snapshot");
    ArrayList<Snapshot> snapshots = new ArrayList<Snapshot>();
    _vm.setSnapshots(snapshots);
    for (XmlNode node : list) {
        XmlNode vmConfiguration = node.SelectSingleNode("VmConfiguration", _xmlNS);
        Snapshot snapshot = new Snapshot(vmConfiguration != null);
        snapshot.setId(new Guid(node.Attributes.get("ovf:id").getValue()));
        snapshot.setVmId(_vm.getId());
        snapshot.setType(SnapshotType.valueOf(node.SelectSingleNode("Type", _xmlNS).InnerText));
        snapshot.setStatus(SnapshotStatus.OK);
        snapshot.setDescription(node.SelectSingleNode("Description", _xmlNS).InnerText);
        XmlNode memory = node.SelectSingleNode("Memory", _xmlNS);
        if (memory != null) {
            snapshot.setMemoryVolume(memory.InnerText);
        }
        final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("CreationDate", _xmlNS).InnerText);
        if (creationDate != null) {
            snapshot.setCreationDate(creationDate);
        }
        snapshot.setVmConfiguration(vmConfiguration == null ? null : new String(Base64.decodeBase64(vmConfiguration.InnerText)));
        XmlNode appList = node.SelectSingleNode("ApplicationList", _xmlNS);
        if (appList != null) {
            snapshot.setAppList(appList.InnerText);
        }
        snapshots.add(snapshot);
    }
}
#method_after
@Override
protected void readSnapshotsSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Snapshot");
    ArrayList<Snapshot> snapshots = new ArrayList<Snapshot>();
    _vm.setSnapshots(snapshots);
    for (XmlNode node : list) {
        XmlNode vmConfiguration = node.SelectSingleNode("VmConfiguration", _xmlNS);
        Snapshot snapshot = new Snapshot(vmConfiguration != null);
        snapshot.setId(new Guid(node.attributes.get("ovf:id").getValue()));
        snapshot.setVmId(_vm.getId());
        snapshot.setType(SnapshotType.valueOf(node.SelectSingleNode("Type", _xmlNS).innerText));
        snapshot.setStatus(SnapshotStatus.OK);
        snapshot.setDescription(node.SelectSingleNode("Description", _xmlNS).innerText);
        XmlNode memory = node.SelectSingleNode("Memory", _xmlNS);
        if (memory != null) {
            snapshot.setMemoryVolume(memory.innerText);
        }
        final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("CreationDate", _xmlNS).innerText);
        if (creationDate != null) {
            snapshot.setCreationDate(creationDate);
        }
        snapshot.setVmConfiguration(vmConfiguration == null ? null : new String(Base64.decodeBase64(vmConfiguration.innerText)));
        XmlNode appList = node.SelectSingleNode("ApplicationList", _xmlNS);
        if (appList != null) {
            snapshot.setAppList(appList.innerText);
        }
        snapshots.add(snapshot);
    }
}
#end_block

#method_before
public EntityModel getIsSoundcardEnabled() {
    return isSoundcardEnabled;
}
#method_after
public EntityModel<Boolean> getIsSoundcardEnabled() {
    return isSoundcardEnabled;
}
#end_block

#method_before
private void setIsSoundcardEnabled(NotChangableForVmInPoolEntityModel isSoundcardEnabled) {
    this.isSoundcardEnabled = isSoundcardEnabled;
}
#method_after
private void setIsSoundcardEnabled(NotChangableForVmInPoolEntityModel<Boolean> isSoundcardEnabled) {
    this.isSoundcardEnabled = isSoundcardEnabled;
}
#end_block

#method_before
public ListModel getDataCenterWithClustersList() {
    return dataCenterWithClustersList;
}
#method_after
public ListModel<DataCenterWithCluster> getDataCenterWithClustersList() {
    return dataCenterWithClustersList;
}
#end_block

#method_before
private void setDataCenterWithClustersList(NotChangableForVmInPoolListModel dataCenterWithClustersList) {
    this.dataCenterWithClustersList = dataCenterWithClustersList;
}
#method_after
private void setDataCenterWithClustersList(NotChangableForVmInPoolListModel<DataCenterWithCluster> dataCenterWithClustersList) {
    this.dataCenterWithClustersList = dataCenterWithClustersList;
}
#end_block

#method_before
public ListModel getNicsWithLogicalNetworks() {
    return nicsWithLogicalNetworks;
}
#method_after
public ListModel<VnicInstanceType> getNicsWithLogicalNetworks() {
    return nicsWithLogicalNetworks;
}
#end_block

#method_before
public void setNicsWithLogicalNetworks(ListModel nicsWithLogicalNetworks) {
    this.nicsWithLogicalNetworks = nicsWithLogicalNetworks;
}
#method_after
public void setNicsWithLogicalNetworks(ListModel<VnicInstanceType> nicsWithLogicalNetworks) {
    this.nicsWithLogicalNetworks = nicsWithLogicalNetworks;
}
#end_block

#method_before
public void setVmAttachedToPool(boolean value) {
    if (value) {
        // ==General Tab==
        getDataCenterWithClustersList().setIsChangable(!value);
        getQuota().setIsChangable(false);
        getDescription().setIsChangable(false);
        getComment().setIsChangable(false);
        getNumOfDesktops().setIsChangable(false);
        getPrestartedVms().setIsChangable(false);
        getMaxAssignedVmsPerUser().setIsChangable(false);
        getTemplate().setIsChangable(false);
        getMemSize().setIsChangable(false);
        getTotalCPUCores().setIsChangable(false);
        getCoresPerSocket().setIsChangable(false);
        getNumOfSockets().setIsChangable(false);
        getOSType().setIsChangable(false);
        getIsStateless().setIsChangable(false);
        getIsRunAndPause().setIsChangable(false);
        getIsDeleteProtected().setIsChangable(false);
        // ==Initial run Tab==
        getTimeZone().setIsChangable(false);
        getDomain().setIsChangable(false);
        // ==Console Tab==
        getDisplayProtocol().setIsChangable(false);
        getUsbPolicy().setIsChangable(false);
        getNumOfMonitors().setIsChangable(false);
        getIsSingleQxlEnabled().setIsAvailable(false);
        getIsSmartcardEnabled().setIsChangable(false);
        getAllowConsoleReconnect().setIsChangable(false);
        getVncKeyboardLayout().setIsChangable(false);
        // ==Host Tab==
        getIsAutoAssign().setIsChangable(false);
        getDefaultHost().setIsChangable(false);
        getHostCpu().setIsChangable(false);
        getMigrationMode().setIsChangable(false);
        getCpuPinning().setIsChangable(false);
        // ==Resource Allocation Tab==
        getMinAllocatedMemory().setIsChangable(false);
        getProvisioning().setIsChangable(false);
        getProvisioningThin_IsSelected().setIsChangable(false);
        getProvisioningClone_IsSelected().setIsChangable(false);
        getDisksAllocationModel().setIsChangable(false);
        // ==Boot Options Tab==
        getFirstBootDevice().setIsChangable(false);
        getSecondBootDevice().setIsChangable(false);
        getCdAttached().setIsChangable(false);
        getCdImage().setIsChangable(false);
        getKernel_path().setIsChangable(false);
        getInitrd_path().setIsChangable(false);
        getKernel_parameters().setIsChangable(false);
        // ==Custom Properties Tab==
        getCustomProperties().setIsChangable(false);
        vmAttachedToPool = true;
    }
}
#method_after
public void setVmAttachedToPool(boolean value) {
    if (value) {
        // ==General Tab==
        getDataCenterWithClustersList().setIsChangable(!value);
        getQuota().setIsChangable(false);
        getDescription().setIsChangable(false);
        getComment().setIsChangable(false);
        getNumOfDesktops().setIsChangable(false);
        getPrestartedVms().setIsChangable(false);
        getMaxAssignedVmsPerUser().setIsChangable(false);
        getTemplate().setIsChangable(false);
        getMemSize().setIsChangable(false);
        getTotalCPUCores().setIsChangable(false);
        getCoresPerSocket().setIsChangable(false);
        getNumOfSockets().setIsChangable(false);
        getOSType().setIsChangable(false);
        getIsStateless().setIsChangable(false);
        getIsRunAndPause().setIsChangable(false);
        getIsDeleteProtected().setIsChangable(false);
        // ==Initial run Tab==
        getTimeZone().setIsChangable(false);
        getDomain().setIsChangable(false);
        // ==Console Tab==
        getDisplayProtocol().setIsChangable(false);
        getUsbPolicy().setIsChangable(false);
        getNumOfMonitors().setIsChangable(false);
        getIsSingleQxlEnabled().setIsChangable(false);
        getIsSmartcardEnabled().setIsChangable(false);
        getAllowConsoleReconnect().setIsChangable(false);
        getVncKeyboardLayout().setIsChangable(false);
        getSsoMethodNone().setIsChangable(false);
        getSsoMethodGuestAgent().setIsChangable(false);
        // ==Host Tab==
        getIsAutoAssign().setIsChangable(false);
        getDefaultHost().setIsChangable(false);
        getHostCpu().setIsChangable(false);
        getMigrationMode().setIsChangable(false);
        getCpuPinning().setIsChangable(false);
        // ==Resource Allocation Tab==
        getMinAllocatedMemory().setIsChangable(false);
        getProvisioning().setIsChangable(false);
        getProvisioningThin_IsSelected().setIsChangable(false);
        getProvisioningClone_IsSelected().setIsChangable(false);
        getDisksAllocationModel().setIsChangable(false);
        // ==Boot Options Tab==
        getFirstBootDevice().setIsChangable(false);
        getSecondBootDevice().setIsChangable(false);
        getCdAttached().setIsChangable(false);
        getCdImage().setIsChangable(false);
        getKernel_path().setIsChangable(false);
        getInitrd_path().setIsChangable(false);
        getKernel_parameters().setIsChangable(false);
        // ==Custom Properties Tab==
        getCustomProperties().setIsChangable(false);
        vmAttachedToPool = true;
    }
}
#end_block

#method_before
public ListModel getStorageDomain() {
    return privateStorageDomain;
}
#method_after
public ListModel<StorageDomain> getStorageDomain() {
    return privateStorageDomain;
}
#end_block

#method_before
private void setStorageDomain(NotChangableForVmInPoolListModel value) {
    privateStorageDomain = value;
}
#method_after
private void setStorageDomain(NotChangableForVmInPoolListModel<StorageDomain> value) {
    privateStorageDomain = value;
}
#end_block

#method_before
public ListModel getTemplate() {
    return privateTemplate;
}
#method_after
public ListModel<VmTemplate> getTemplate() {
    return privateTemplate;
}
#end_block

#method_before
private void setTemplate(NotChangableForVmInPoolListModel value) {
    privateTemplate = value;
}
#method_after
private void setTemplate(NotChangableForVmInPoolListModel<VmTemplate> value) {
    privateTemplate = value;
}
#end_block

#method_before
public void setVmType(NotChangableForVmInPoolListModel vmType) {
    this.vmType = vmType;
}
#method_after
public void setVmType(NotChangableForVmInPoolListModel<VmType> vmType) {
    this.vmType = vmType;
}
#end_block

#method_before
public ListModel getVmType() {
    return vmType;
}
#method_after
public ListModel<VmType> getVmType() {
    return vmType;
}
#end_block

#method_before
public EntityModel getName() {
    return privateName;
}
#method_after
public EntityModel<String> getName() {
    return privateName;
}
#end_block

#method_before
private void setName(EntityModel value) {
    privateName = value;
}
#method_after
private void setName(EntityModel<String> value) {
    privateName = value;
}
#end_block

#method_before
public ListModel getOSType() {
    return privateOSType;
}
#method_after
public ListModel<Integer> getOSType() {
    return privateOSType;
}
#end_block

#method_before
private void setOSType(NotChangableForVmInPoolListModel value) {
    privateOSType = value;
}
#method_after
private void setOSType(NotChangableForVmInPoolListModel<Integer> value) {
    privateOSType = value;
}
#end_block

#method_before
public ListModel getNumOfMonitors() {
    return privateNumOfMonitors;
}
#method_after
public ListModel<Integer> getNumOfMonitors() {
    return privateNumOfMonitors;
}
#end_block

#method_before
private void setNumOfMonitors(NotChangableForVmInPoolListModel value) {
    privateNumOfMonitors = value;
}
#method_after
private void setNumOfMonitors(NotChangableForVmInPoolListModel<Integer> value) {
    privateNumOfMonitors = value;
}
#end_block

#method_before
public EntityModel getIsSingleQxlEnabled() {
    return privateIsSingleQxlEnabled;
}
#method_after
public EntityModel<Boolean> getIsSingleQxlEnabled() {
    return privateIsSingleQxlEnabled;
}
#end_block

#method_before
private void setIsSingleQxlEnabled(NotChangableForVmInPoolEntityModel value) {
    privateIsSingleQxlEnabled = value;
}
#method_after
private void setIsSingleQxlEnabled(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsSingleQxlEnabled = value;
}
#end_block

#method_before
public EntityModel getAllowConsoleReconnect() {
    return privateAllowConsoleReconnect;
}
#method_after
public EntityModel<Boolean> getAllowConsoleReconnect() {
    return privateAllowConsoleReconnect;
}
#end_block

#method_before
private void setAllowConsoleReconnect(NotChangableForVmInPoolEntityModel value) {
    privateAllowConsoleReconnect = value;
}
#method_after
private void setAllowConsoleReconnect(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateAllowConsoleReconnect = value;
}
#end_block

#method_before
public EntityModel getDescription() {
    return privateDescription;
}
#method_after
public EntityModel<String> getDescription() {
    return privateDescription;
}
#end_block

#method_before
private void setDescription(NotChangableForVmInPoolEntityModel value) {
    privateDescription = value;
}
#method_after
private void setDescription(NotChangableForVmInPoolEntityModel<String> value) {
    privateDescription = value;
}
#end_block

#method_before
public EntityModel getComment() {
    return privateComment;
}
#method_after
public EntityModel<String> getComment() {
    return privateComment;
}
#end_block

#method_before
private void setComment(NotChangableForVmInPoolEntityModel value) {
    privateComment = value;
}
#method_after
private void setComment(NotChangableForVmInPoolEntityModel<String> value) {
    privateComment = value;
}
#end_block

#method_before
public ListModel getDomain() {
    return privateDomain;
}
#method_after
public ListModel<String> getDomain() {
    return privateDomain;
}
#end_block

#method_before
private void setDomain(NotChangableForVmInPoolListModel value) {
    privateDomain = value;
}
#method_after
private void setDomain(NotChangableForVmInPoolListModel<String> value) {
    privateDomain = value;
}
#end_block

#method_before
public EntityModel getMemSize() {
    return privateMemSize;
}
#method_after
public EntityModel<Integer> getMemSize() {
    return privateMemSize;
}
#end_block

#method_before
private void setMemSize(NotChangableForVmInPoolEntityModel value) {
    privateMemSize = value;
}
#method_after
private void setMemSize(NotChangableForVmInPoolEntityModel<Integer> value) {
    privateMemSize = value;
}
#end_block

#method_before
public EntityModel getMinAllocatedMemory() {
    return privateMinAllocatedMemory;
}
#method_after
public EntityModel<Integer> getMinAllocatedMemory() {
    return privateMinAllocatedMemory;
}
#end_block

#method_before
private void setMinAllocatedMemory(NotChangableForVmInPoolEntityModel value) {
    privateMinAllocatedMemory = value;
}
#method_after
private void setMinAllocatedMemory(NotChangableForVmInPoolEntityModel<Integer> value) {
    privateMinAllocatedMemory = value;
}
#end_block

#method_before
public ListModel getQuota() {
    return privateQuota;
}
#method_after
public ListModel<Quota> getQuota() {
    return privateQuota;
}
#end_block

#method_before
private void setQuota(NotChangableForVmInPoolListModel value) {
    privateQuota = value;
}
#method_after
private void setQuota(NotChangableForVmInPoolListModel<Quota> value) {
    privateQuota = value;
}
#end_block

#method_before
public ListModel getUsbPolicy() {
    return privateUsbPolicy;
}
#method_after
public ListModel<UsbPolicy> getUsbPolicy() {
    return privateUsbPolicy;
}
#end_block

#method_before
private void setUsbPolicy(NotChangableForVmInPoolListModel value) {
    privateUsbPolicy = value;
}
#method_after
private void setUsbPolicy(NotChangableForVmInPoolListModel<UsbPolicy> value) {
    privateUsbPolicy = value;
}
#end_block

#method_before
public ListModel getTimeZone() {
    return privateTimeZone;
}
#method_after
public ListModel<TimeZoneModel> getTimeZone() {
    return privateTimeZone;
}
#end_block

#method_before
private void setTimeZone(NotChangableForVmInPoolListModel value) {
    privateTimeZone = value;
}
#method_after
private void setTimeZone(NotChangableForVmInPoolListModel<TimeZoneModel> value) {
    privateTimeZone = value;
}
#end_block

#method_before
public ListModel getNumOfSockets() {
    return privateNumOfSockets;
}
#method_after
public ListModel<Integer> getNumOfSockets() {
    return privateNumOfSockets;
}
#end_block

#method_before
private void setNumOfSockets(NotChangableForVmInPoolListModel value) {
    privateNumOfSockets = value;
}
#method_after
private void setNumOfSockets(NotChangableForVmInPoolListModel<Integer> value) {
    privateNumOfSockets = value;
}
#end_block

#method_before
public EntityModel getTotalCPUCores() {
    return privateTotalCPUCores;
}
#method_after
public EntityModel<String> getTotalCPUCores() {
    return privateTotalCPUCores;
}
#end_block

#method_before
private void setTotalCPUCores(NotChangableForVmInPoolEntityModel value) {
    privateTotalCPUCores = value;
}
#method_after
private void setTotalCPUCores(NotChangableForVmInPoolEntityModel<String> value) {
    privateTotalCPUCores = value;
}
#end_block

#method_before
public ListModel getCoresPerSocket() {
    return privateCoresPerSocket;
}
#method_after
public ListModel<Integer> getCoresPerSocket() {
    return privateCoresPerSocket;
}
#end_block

#method_before
private void setCoresPerSocket(NotChangableForVmInPoolListModel value) {
    privateCoresPerSocket = value;
}
#method_after
private void setCoresPerSocket(NotChangableForVmInPoolListModel<Integer> value) {
    privateCoresPerSocket = value;
}
#end_block

#method_before
public ListModel getDefaultHost() {
    return privateDefaultHost;
}
#method_after
public ListModel<VDS> getDefaultHost() {
    return privateDefaultHost;
}
#end_block

#method_before
private void setDefaultHost(NotChangableForVmInPoolListModel value) {
    privateDefaultHost = value;
}
#method_after
private void setDefaultHost(NotChangableForVmInPoolListModel<VDS> value) {
    privateDefaultHost = value;
}
#end_block

#method_before
public EntityModel getIsSmartcardEnabled() {
    return privateisSmartcardEnabled;
}
#method_after
public EntityModel<Boolean> getIsSmartcardEnabled() {
    return privateisSmartcardEnabled;
}
#end_block

#method_before
private void setIsSmartcardEnabled(NotChangableForVmInPoolEntityModel value) {
    privateisSmartcardEnabled = value;
}
#method_after
private void setIsSmartcardEnabled(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateisSmartcardEnabled = value;
}
#end_block

#method_before
public EntityModel getIsConsoleDeviceEnabled() {
    return isConsoleDeviceEnabled;
}
#method_after
public EntityModel<Boolean> getIsConsoleDeviceEnabled() {
    return isConsoleDeviceEnabled;
}
#end_block

#method_before
private void setConsoleDeviceEnabled(NotChangableForVmInPoolEntityModel consoleDeviceEnabled) {
    this.isConsoleDeviceEnabled = consoleDeviceEnabled;
}
#method_after
private void setConsoleDeviceEnabled(NotChangableForVmInPoolEntityModel<Boolean> consoleDeviceEnabled) {
    this.isConsoleDeviceEnabled = consoleDeviceEnabled;
}
#end_block

#method_before
public EntityModel getIsStateless() {
    return privateIsStateless;
}
#method_after
public EntityModel<Boolean> getIsStateless() {
    return privateIsStateless;
}
#end_block

#method_before
private void setIsStateless(NotChangableForVmInPoolEntityModel value) {
    privateIsStateless = value;
}
#method_after
private void setIsStateless(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsStateless = value;
}
#end_block

#method_before
public EntityModel getIsRunAndPause() {
    return privateIsRunAndPause;
}
#method_after
public EntityModel<Boolean> getIsRunAndPause() {
    return privateIsRunAndPause;
}
#end_block

#method_before
private void setIsRunAndPause(NotChangableForVmInPoolEntityModel value) {
    privateIsRunAndPause = value;
}
#method_after
private void setIsRunAndPause(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsRunAndPause = value;
}
#end_block

#method_before
public EntityModel getIsDeleteProtected() {
    return privateIsDeleteProtected;
}
#method_after
public EntityModel<Boolean> getIsDeleteProtected() {
    return privateIsDeleteProtected;
}
#end_block

#method_before
public void setIsDeleteProtected(NotChangableForVmInPoolEntityModel deleteProtected) {
    this.privateIsDeleteProtected = deleteProtected;
}
#method_after
public void setIsDeleteProtected(NotChangableForVmInPoolEntityModel<Boolean> deleteProtected) {
    this.privateIsDeleteProtected = deleteProtected;
}
#end_block

#method_before
public EntityModel getCopyPermissions() {
    return copyPermissions;
}
#method_after
public EntityModel<Boolean> getCopyPermissions() {
    return copyPermissions;
}
#end_block

#method_before
private void setCopyPermissions(NotChangableForVmInPoolEntityModel copyPermissions) {
    this.copyPermissions = copyPermissions;
}
#method_after
private void setCopyPermissions(NotChangableForVmInPoolEntityModel<Boolean> copyPermissions) {
    this.copyPermissions = copyPermissions;
}
#end_block

#method_before
public EntityModel getMemoryBalloonDeviceEnabled() {
    return memoryBalloonDeviceEnabled;
}
#method_after
public EntityModel<Boolean> getMemoryBalloonDeviceEnabled() {
    return memoryBalloonDeviceEnabled;
}
#end_block

#method_before
public void setMemoryBalloonDeviceEnabled(EntityModel memoryBalloonDeviceEnabled) {
    this.memoryBalloonDeviceEnabled = memoryBalloonDeviceEnabled;
}
#method_after
public void setMemoryBalloonDeviceEnabled(EntityModel<Boolean> memoryBalloonDeviceEnabled) {
    this.memoryBalloonDeviceEnabled = memoryBalloonDeviceEnabled;
}
#end_block

#method_before
public ListModel getDisplayProtocol() {
    return privateDisplayProtocol;
}
#method_after
public ListModel<EntityModel<DisplayType>> getDisplayProtocol() {
    return privateDisplayProtocol;
}
#end_block

#method_before
private void setDisplayProtocol(NotChangableForVmInPoolListModel value) {
    privateDisplayProtocol = value;
}
#method_after
private void setDisplayProtocol(NotChangableForVmInPoolListModel<EntityModel<DisplayType>> value) {
    privateDisplayProtocol = value;
}
#end_block

#method_before
public EntityModel getProvisioning() {
    return privateProvisioning;
}
#method_after
public EntityModel<Boolean> getProvisioning() {
    return privateProvisioning;
}
#end_block

#method_before
private void setProvisioning(NotChangableForVmInPoolEntityModel value) {
    privateProvisioning = value;
}
#method_after
private void setProvisioning(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateProvisioning = value;
}
#end_block

#method_before
public EntityModel getProvisioningThin_IsSelected() {
    return privateProvisioningThin_IsSelected;
}
#method_after
public EntityModel<Boolean> getProvisioningThin_IsSelected() {
    return privateProvisioningThin_IsSelected;
}
#end_block

#method_before
public void setProvisioningThin_IsSelected(NotChangableForVmInPoolEntityModel value) {
    privateProvisioningThin_IsSelected = value;
}
#method_after
public void setProvisioningThin_IsSelected(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateProvisioningThin_IsSelected = value;
}
#end_block

#method_before
public EntityModel getProvisioningClone_IsSelected() {
    return privateProvisioningClone_IsSelected;
}
#method_after
public EntityModel<Boolean> getProvisioningClone_IsSelected() {
    return privateProvisioningClone_IsSelected;
}
#end_block

#method_before
public void setProvisioningClone_IsSelected(NotChangableForVmInPoolEntityModel value) {
    privateProvisioningClone_IsSelected = value;
}
#method_after
public void setProvisioningClone_IsSelected(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateProvisioningClone_IsSelected = value;
}
#end_block

#method_before
public ListModel getPriority() {
    return privatePriority;
}
#method_after
public ListModel<EntityModel<Integer>> getPriority() {
    return privatePriority;
}
#end_block

#method_before
private void setPriority(NotChangableForVmInPoolListModel value) {
    privatePriority = value;
}
#method_after
private void setPriority(NotChangableForVmInPoolListModel<EntityModel<Integer>> value) {
    privatePriority = value;
}
#end_block

#method_before
public EntityModel getIsHighlyAvailable() {
    return privateIsHighlyAvailable;
}
#method_after
public EntityModel<Boolean> getIsHighlyAvailable() {
    return privateIsHighlyAvailable;
}
#end_block

#method_before
private void setIsHighlyAvailable(NotChangableForVmInPoolEntityModel value) {
    privateIsHighlyAvailable = value;
}
#method_after
private void setIsHighlyAvailable(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsHighlyAvailable = value;
}
#end_block

#method_before
public ListModel getFirstBootDevice() {
    return privateFirstBootDevice;
}
#method_after
public ListModel<EntityModel<BootSequence>> getFirstBootDevice() {
    return privateFirstBootDevice;
}
#end_block

#method_before
private void setFirstBootDevice(NotChangableForVmInPoolListModel value) {
    privateFirstBootDevice = value;
}
#method_after
private void setFirstBootDevice(NotChangableForVmInPoolListModel<EntityModel<BootSequence>> value) {
    privateFirstBootDevice = value;
}
#end_block

#method_before
public ListModel getSecondBootDevice() {
    return privateSecondBootDevice;
}
#method_after
public ListModel<EntityModel<BootSequence>> getSecondBootDevice() {
    return privateSecondBootDevice;
}
#end_block

#method_before
private void setSecondBootDevice(NotChangableForVmInPoolListModel value) {
    privateSecondBootDevice = value;
}
#method_after
private void setSecondBootDevice(NotChangableForVmInPoolListModel<EntityModel<BootSequence>> value) {
    privateSecondBootDevice = value;
}
#end_block

#method_before
public ListModel getCdImage() {
    return privateCdImage;
}
#method_after
public ListModel<String> getCdImage() {
    return privateCdImage;
}
#end_block

#method_before
private void setCdImage(NotChangableForVmInPoolListModel value) {
    privateCdImage = value;
}
#method_after
private void setCdImage(NotChangableForVmInPoolListModel<String> value) {
    privateCdImage = value;
}
#end_block

#method_before
public EntityModel getCdAttached() {
    return cdAttached;
}
#method_after
public EntityModel<Boolean> getCdAttached() {
    return cdAttached;
}
#end_block

#method_before
public void setCdAttached(NotChangableForVmInPoolEntityModel value) {
    cdAttached = value;
}
#method_after
public void setCdAttached(NotChangableForVmInPoolEntityModel<Boolean> value) {
    cdAttached = value;
}
#end_block

#method_before
public EntityModel getInitrd_path() {
    return privateInitrd_path;
}
#method_after
public EntityModel<String> getInitrd_path() {
    return privateInitrd_path;
}
#end_block

#method_before
private void setInitrd_path(NotChangableForVmInPoolEntityModel value) {
    privateInitrd_path = value;
}
#method_after
private void setInitrd_path(NotChangableForVmInPoolEntityModel<String> value) {
    privateInitrd_path = value;
}
#end_block

#method_before
public EntityModel getKernel_path() {
    return privateKernel_path;
}
#method_after
public EntityModel<String> getKernel_path() {
    return privateKernel_path;
}
#end_block

#method_before
private void setKernel_path(NotChangableForVmInPoolEntityModel value) {
    privateKernel_path = value;
}
#method_after
private void setKernel_path(NotChangableForVmInPoolEntityModel<String> value) {
    privateKernel_path = value;
}
#end_block

#method_before
public EntityModel getKernel_parameters() {
    return privateKernel_parameters;
}
#method_after
public EntityModel<String> getKernel_parameters() {
    return privateKernel_parameters;
}
#end_block

#method_before
private void setKernel_parameters(NotChangableForVmInPoolEntityModel value) {
    privateKernel_parameters = value;
}
#method_after
private void setKernel_parameters(NotChangableForVmInPoolEntityModel<String> value) {
    privateKernel_parameters = value;
}
#end_block

#method_before
public EntityModel getCustomProperties() {
    return privateCustomProperties;
}
#method_after
public EntityModel<String> getCustomProperties() {
    return privateCustomProperties;
}
#end_block

#method_before
private void setCustomProperties(NotChangableForVmInPoolEntityModel value) {
    privateCustomProperties = value;
}
#method_after
private void setCustomProperties(NotChangableForVmInPoolEntityModel<String> value) {
    privateCustomProperties = value;
}
#end_block

#method_before
public EntityModel getIsAutoAssign() {
    return privateIsAutoAssign;
}
#method_after
public EntityModel<Boolean> getIsAutoAssign() {
    return privateIsAutoAssign;
}
#end_block

#method_before
public void setIsAutoAssign(NotChangableForVmInPoolEntityModel value) {
    privateIsAutoAssign = value;
}
#method_after
public void setIsAutoAssign(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsAutoAssign = value;
}
#end_block

#method_before
public EntityModel getHostCpu() {
    return hostCpu;
}
#method_after
public EntityModel<Boolean> getHostCpu() {
    return hostCpu;
}
#end_block

#method_before
public void setHostCpu(NotChangableForVmInPoolEntityModel hostCpu) {
    this.hostCpu = hostCpu;
}
#method_after
public void setHostCpu(NotChangableForVmInPoolEntityModel<Boolean> hostCpu) {
    this.hostCpu = hostCpu;
}
#end_block

#method_before
public ListModel getMigrationMode() {
    return migrationMode;
}
#method_after
public ListModel<MigrationSupport> getMigrationMode() {
    return migrationMode;
}
#end_block

#method_before
public void setMigrationMode(NotChangableForVmInPoolListModel value) {
    migrationMode = value;
}
#method_after
public void setMigrationMode(NotChangableForVmInPoolListModel<MigrationSupport> value) {
    migrationMode = value;
}
#end_block

#method_before
public EntityModel getIsTemplatePublic() {
    return privateIsTemplatePublic;
}
#method_after
public EntityModel<Boolean> getIsTemplatePublic() {
    return privateIsTemplatePublic;
}
#end_block

#method_before
private void setIsTemplatePublic(NotChangableForVmInPoolEntityModel value) {
    privateIsTemplatePublic = value;
}
#method_after
private void setIsTemplatePublic(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsTemplatePublic = value;
}
#end_block

#method_before
public EntityModel getCpuPinning() {
    return cpuPinning;
}
#method_after
public EntityModel<String> getCpuPinning() {
    return cpuPinning;
}
#end_block

#method_before
public void setCpuPinning(NotChangableForVmInPoolEntityModel cpuPinning) {
    this.cpuPinning = cpuPinning;
}
#method_after
public void setCpuPinning(NotChangableForVmInPoolEntityModel<String> cpuPinning) {
    this.cpuPinning = cpuPinning;
}
#end_block

#method_before
public EntityModel getCpuSharesAmount() {
    return cpuSharesAmount;
}
#method_after
public EntityModel<Integer> getCpuSharesAmount() {
    return cpuSharesAmount;
}
#end_block

#method_before
public void setCpuSharesAmount(NotChangableForVmInPoolEntityModel cpuSharesAmount) {
    this.cpuSharesAmount = cpuSharesAmount;
}
#method_after
public void setCpuSharesAmount(NotChangableForVmInPoolEntityModel<Integer> cpuSharesAmount) {
    this.cpuSharesAmount = cpuSharesAmount;
}
#end_block

#method_before
public ListModel getCpuSharesAmountSelection() {
    return cpuSharesAmountSelection;
}
#method_after
public ListModel<CpuSharesAmount> getCpuSharesAmountSelection() {
    return cpuSharesAmountSelection;
}
#end_block

#method_before
public void setCpuSharesAmountSelection(NotChangableForVmInPoolListModel cpuSharesAmountSelection) {
    this.cpuSharesAmountSelection = cpuSharesAmountSelection;
}
#method_after
public void setCpuSharesAmountSelection(NotChangableForVmInPoolListModel<CpuSharesAmount> cpuSharesAmountSelection) {
    this.cpuSharesAmountSelection = cpuSharesAmountSelection;
}
#end_block

#method_before
public ListModel getVncKeyboardLayout() {
    return vncKeyboardLayout;
}
#method_after
public ListModel<String> getVncKeyboardLayout() {
    return vncKeyboardLayout;
}
#end_block

#method_before
public void setVncKeyboardLayout(ListModel vncKeyboardLayout) {
    this.vncKeyboardLayout = vncKeyboardLayout;
}
#method_after
public void setVncKeyboardLayout(ListModel<String> vncKeyboardLayout) {
    this.vncKeyboardLayout = vncKeyboardLayout;
}
#end_block

#method_before
public void initialize(SystemTreeItemModel SystemTreeSelectedItem) {
    super.initialize();
    setHash(getHashName() + new Date());
    getMemSize().setEntity(256);
    getMinAllocatedMemory().setEntity(256);
    getIsStateless().setEntity(false);
    getIsRunAndPause().setEntity(false);
    getIsSmartcardEnabled().setEntity(false);
    isConsoleDeviceEnabled.setEntity(false);
    getIsHighlyAvailable().setEntity(false);
    getIsAutoAssign().setEntity(true);
    getIsTemplatePublic().setEntity(true);
    getIsSingleQxlEnabled().setEntity(false);
    getHostCpu().setEntity(false);
    getMigrationMode().setIsChangable(true);
    getCdImage().setIsChangable(false);
    initDisplayProtocol();
    initFirstBootDevice();
    initNumOfMonitors();
    initAllowConsoleReconnect();
    initMinimalVmMemSize();
    initMaximalVmMemSize32OS();
    initMigrationMode();
    initVncKeyboardLayout();
    behavior.initialize(SystemTreeSelectedItem);
}
#method_after
public void initialize(SystemTreeItemModel SystemTreeSelectedItem) {
    super.initialize();
    setHash(getHashName() + new Date());
    getMemSize().setEntity(256);
    getMinAllocatedMemory().setEntity(256);
    getIsStateless().setEntity(false);
    getIsRunAndPause().setEntity(false);
    getIsSmartcardEnabled().setEntity(false);
    isConsoleDeviceEnabled.setEntity(false);
    getIsHighlyAvailable().setEntity(false);
    getIsAutoAssign().setEntity(true);
    getIsTemplatePublic().setEntity(true);
    getBehavior().enableSinglePCI(false);
    getHostCpu().setEntity(false);
    getMigrationMode().setIsChangable(true);
    getCdImage().setIsChangable(false);
    initDisplayProtocol();
    initFirstBootDevice();
    initNumOfMonitors();
    initAllowConsoleReconnect();
    initMinimalVmMemSize();
    initMaximalVmMemSize32OS();
    initMigrationMode();
    initVncKeyboardLayout();
    behavior.initialize(SystemTreeSelectedItem);
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(Frontend.QueryStartedEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.QueryCompleteEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVmType()) {
            vmTypeChanged();
        } else if (sender == getDataCenterWithClustersList()) {
            dataCenterWithClusterSelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getTemplate()) {
            template_SelectedItemChanged(sender, args);
        } else if (sender == getTimeZone()) {
            timeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            defaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            oSType_SelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            firstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            displayProtocol_SelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            numOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            coresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getCpuSharesAmountSelection()) {
            behavior.updateCpuSharesAmountChangeability();
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        if (sender == getMemSize()) {
            memSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            totalCPUCores_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getProvisioning()) {
            provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if ((Boolean) getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if ((Boolean) getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        } else if (sender == getWatchdogModel()) {
            WatchdogModel_EntityChanged(sender, args);
        } else if (sender == getIsHighlyAvailable()) {
            behavior.updateMigrationAvailability();
        }
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(Frontend.getInstance().getQueryStartedEventDefinition()) && StringHelper.stringsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryCompleteEventDefinition()) && StringHelper.stringsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVmType()) {
            vmTypeChanged();
        } else if (sender == getDataCenterWithClustersList()) {
            dataCenterWithClusterSelectedItemChanged(sender, args);
            updateDisplayProtocol();
            initUsbPolicy();
        } else if (sender == getTemplate()) {
            template_SelectedItemChanged(sender, args);
        } else if (sender == getTimeZone()) {
            timeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            defaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            oSType_SelectedItemChanged(sender, args);
            updateDisplayProtocol();
            initUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            firstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            displayProtocol_SelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            numOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            coresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getCpuSharesAmountSelection()) {
            behavior.updateCpuSharesAmountChangeability();
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        if (sender == getMemSize()) {
            memSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            totalCPUCores_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getProvisioning()) {
            provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if (getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if (getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        } else if (sender == getWatchdogModel()) {
            WatchdogModel_EntityChanged(sender, args);
        } else if (sender == getIsHighlyAvailable()) {
            behavior.updateMigrationAvailability();
        }
    }
}
#end_block

#method_before
private void vmTypeChanged() {
    behavior.vmTypeChanged(((VmType) getVmType().getSelectedItem()));
}
#method_after
private void vmTypeChanged() {
    behavior.vmTypeChanged(getVmType().getSelectedItem());
}
#end_block

#method_before
protected void initNumOfMonitors() {
    AsyncDataProvider.getNumOfMonitorList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            Integer oldNumOfMonitors = null;
            if (model.getNumOfMonitors().getSelectedItem() != null) {
                oldNumOfMonitors = (Integer) model.getNumOfMonitors().getSelectedItem();
            }
            ArrayList<Integer> numOfMonitors = (ArrayList<Integer>) returnValue;
            model.getNumOfMonitors().setItems(numOfMonitors);
            if (oldNumOfMonitors != null) {
                model.getNumOfMonitors().setSelectedItem(oldNumOfMonitors);
            }
        }
    }, getHash()));
}
#method_after
protected void initNumOfMonitors() {
    AsyncDataProvider.getNumOfMonitorList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            Integer oldNumOfMonitors = null;
            if (model.getNumOfMonitors().getSelectedItem() != null) {
                oldNumOfMonitors = model.getNumOfMonitors().getSelectedItem();
            }
            ArrayList<Integer> numOfMonitors = (ArrayList<Integer>) returnValue;
            model.getNumOfMonitors().setItems(numOfMonitors);
            if (oldNumOfMonitors != null) {
                model.getNumOfMonitors().setSelectedItem(oldNumOfMonitors);
            }
        }
    }, getHash()));
}
#end_block

#method_before
protected void initAllowConsoleReconnect() {
    getAllowConsoleReconnect().setEntity(true);
}
#method_after
protected void initAllowConsoleReconnect() {
    getAllowConsoleReconnect().setEntity(getVmType().getSelectedItem() == VmType.Server);
}
#end_block

#method_before
private void initUsbPolicy() {
    VDSGroup cluster = getSelectedCluster();
    Integer osType = (Integer) getOSType().getSelectedItem();
    DisplayType displayType = (DisplayType) (getDisplayProtocol().getSelectedItem() != null ? ((EntityModel) getDisplayProtocol().getSelectedItem()).getEntity() : null);
    if (osType == null || cluster == null || displayType == null) {
        return;
    }
    getUsbPolicy().setIsChangable(true);
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) > 0) {
        if (AsyncDataProvider.isWindowsOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED));
            getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
            getUsbPolicy().setIsChangable(false);
        }
    }
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) <= 0) {
        if (AsyncDataProvider.isLinuxOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY, UsbPolicy.ENABLED_NATIVE));
        }
    }
    if (displayType != DisplayType.qxl) {
        getUsbPolicy().setIsChangable(false);
    }
    getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
}
#method_after
private void initUsbPolicy() {
    VDSGroup cluster = getSelectedCluster();
    Integer osType = getOSType().getSelectedItem();
    DisplayType displayType = (getDisplayProtocol().getSelectedItem() != null ? getDisplayProtocol().getSelectedItem().getEntity() : null);
    if (osType == null || cluster == null || displayType == null) {
        return;
    }
    getUsbPolicy().setIsChangable(true);
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) > 0) {
        if (AsyncDataProvider.isWindowsOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED));
            getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
            getUsbPolicy().setIsChangable(false);
        }
    }
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) <= 0) {
        if (AsyncDataProvider.isLinuxOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY, UsbPolicy.ENABLED_NATIVE));
        }
    }
    if (displayType != DisplayType.qxl) {
        getUsbPolicy().setIsChangable(false);
    }
    getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
}
#end_block

#method_before
private void updateMaximalVmMemSize() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return;
    }
    VDSGroup cluster = dataCenterWithCluster.getCluster();
    if (cluster != null) {
        AsyncDataProvider.getMaximalVmMemSize64OS(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                UnitVmModel vmModel = (UnitVmModel) target;
                vmModel.set_MaxMemSize64((Integer) returnValue);
            }
        }, getHash()), cluster.getcompatibility_version().toString());
    }
}
#method_after
private void updateMaximalVmMemSize() {
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return;
    }
    VDSGroup cluster = dataCenterWithCluster.getCluster();
    if (cluster != null) {
        AsyncDataProvider.getMaximalVmMemSize64OS(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                UnitVmModel vmModel = (UnitVmModel) target;
                vmModel.set_MaxMemSize64((Integer) returnValue);
            }
        }, getHash()), cluster.getcompatibility_version().toString());
    }
}
#end_block

#method_before
private void initDisplayProtocol() {
    ArrayList<EntityModel> displayProtocolOptions = new ArrayList<EntityModel>();
    EntityModel spiceProtocol = new EntityModel();
    spiceProtocol.setTitle(ConstantsManager.getInstance().getConstants().spiceTitle());
    spiceProtocol.setEntity(DisplayType.qxl);
    EntityModel vncProtocol = new EntityModel();
    vncProtocol.setTitle(ConstantsManager.getInstance().getConstants().VNCTitle());
    vncProtocol.setEntity(DisplayType.vnc);
    displayProtocolOptions.add(spiceProtocol);
    displayProtocolOptions.add(vncProtocol);
    getDisplayProtocol().setItems(displayProtocolOptions);
    getDisplayProtocol().getSelectedItemChangedEvent().addListener(this);
}
#method_after
private void initDisplayProtocol() {
    getDisplayProtocol().getSelectedItemChangedEvent().addListener(this);
}
#end_block

#method_before
private void initFirstBootDevice() {
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().hardDiskTitle());
    tempVar.setEntity(BootSequence.C);
    EntityModel hardDiskOption = tempVar;
    ArrayList<EntityModel> firstBootDeviceItems = new ArrayList<EntityModel>();
    firstBootDeviceItems.add(hardDiskOption);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cdromTitle());
    tempVar2.setEntity(BootSequence.D);
    firstBootDeviceItems.add(tempVar2);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().networkPXETitle());
    tempVar3.setEntity(BootSequence.N);
    firstBootDeviceItems.add(tempVar3);
    getFirstBootDevice().setItems(firstBootDeviceItems);
    getFirstBootDevice().setSelectedItem(hardDiskOption);
}
#method_after
private void initFirstBootDevice() {
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().hardDiskTitle());
    tempVar.setEntity(BootSequence.C);
    EntityModel hardDiskOption = tempVar;
    List<EntityModel<BootSequence>> firstBootDeviceItems = new ArrayList<EntityModel<BootSequence>>();
    firstBootDeviceItems.add(hardDiskOption);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cdromTitle());
    tempVar2.setEntity(BootSequence.D);
    firstBootDeviceItems.add(tempVar2);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().networkPXETitle());
    tempVar3.setEntity(BootSequence.N);
    firstBootDeviceItems.add(tempVar3);
    getFirstBootDevice().setItems(firstBootDeviceItems);
    getFirstBootDevice().setSelectedItem(hardDiskOption);
}
#end_block

#method_before
private void dataCenterWithClusterSelectedItemChanged(Object sender, EventArgs args) {
    behavior.dataCenterWithClusterSelectedItemChanged();
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster != null && dataCenterWithCluster.getDataCenter() != null) {
        getDisksAllocationModel().setQuotaEnforcementType(dataCenterWithCluster.getDataCenter().getQuotaEnforcementType());
    }
    updateMaximalVmMemSize();
}
#method_after
private void dataCenterWithClusterSelectedItemChanged(Object sender, EventArgs args) {
    behavior.dataCenterWithClusterSelectedItemChanged();
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster != null && dataCenterWithCluster.getDataCenter() != null) {
        getDisksAllocationModel().setQuotaEnforcementType(dataCenterWithCluster.getDataCenter().getQuotaEnforcementType());
    }
    updateMaximalVmMemSize();
    handleQxlClusterLevel();
}
#end_block

#method_before
private void template_SelectedItemChanged(Object sender, EventArgs args) {
    behavior.template_SelectedItemChanged();
}
#method_after
private void template_SelectedItemChanged(Object sender, EventArgs args) {
    behavior.template_SelectedItemChanged();
    behavior.updateMigrationForLocalSD();
}
#end_block

#method_before
private void oSType_SelectedItemChanged(Object sender, EventArgs args) {
    Integer osType = (Integer) getOSType().getSelectedItem();
    setIsWindowsOS(AsyncDataProvider.isWindowsOsType(osType));
    setIsLinuxOS(AsyncDataProvider.isLinuxOsType(osType));
    getInitrd_path().setIsChangable(getIsLinuxOS());
    getInitrd_path().setIsAvailable(getIsLinuxOS());
    getKernel_path().setIsChangable(getIsLinuxOS());
    getKernel_path().setIsAvailable(getIsLinuxOS());
    getKernel_parameters().setIsChangable(getIsLinuxOS());
    getKernel_parameters().setIsAvailable(getIsLinuxOS());
    getDomain().setIsChangable(getIsWindowsOS());
    getBehavior().updateDefaultTimeZone();
}
#method_after
private void oSType_SelectedItemChanged(Object sender, EventArgs args) {
    Integer osType = getOSType().getSelectedItem();
    setIsWindowsOS(AsyncDataProvider.isWindowsOsType(osType));
    setIsLinuxOS(AsyncDataProvider.isLinuxOsType(osType));
    getInitrd_path().setIsChangable(getIsLinuxOS());
    getInitrd_path().setIsAvailable(getIsLinuxOS());
    getKernel_path().setIsChangable(getIsLinuxOS());
    getKernel_path().setIsAvailable(getIsLinuxOS());
    getKernel_parameters().setIsChangable(getIsLinuxOS());
    getKernel_parameters().setIsAvailable(getIsLinuxOS());
    getDomain().setIsChangable(getIsWindowsOS());
    getBehavior().updateDefaultTimeZone();
    handleQxlClusterLevel();
}
#end_block

#method_before
private void firstBootDevice_SelectedItemChanged(Object sender, EventArgs args) {
    EntityModel entityModel = (EntityModel) getFirstBootDevice().getSelectedItem();
    BootSequence firstDevice = (BootSequence) entityModel.getEntity();
    ArrayList<EntityModel> list = new ArrayList<EntityModel>();
    for (Object item : getFirstBootDevice().getItems()) {
        EntityModel a = (EntityModel) item;
        if ((BootSequence) a.getEntity() != firstDevice) {
            list.add(a);
        }
    }
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().noneTitle());
    EntityModel noneOption = tempVar;
    list.add(0, noneOption);
    getSecondBootDevice().setItems(list);
    getSecondBootDevice().setSelectedItem(noneOption);
}
#method_after
private void firstBootDevice_SelectedItemChanged(Object sender, EventArgs args) {
    EntityModel<BootSequence> entityModel = getFirstBootDevice().getSelectedItem();
    BootSequence firstDevice = entityModel.getEntity();
    List<EntityModel<BootSequence>> list = new ArrayList<EntityModel<BootSequence>>();
    for (EntityModel<BootSequence> item : getFirstBootDevice().getItems()) {
        if (item.getEntity() != firstDevice) {
            list.add(item);
        }
    }
    EntityModel<BootSequence> tempVar = new EntityModel<BootSequence>();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().noneTitle());
    EntityModel<BootSequence> noneOption = tempVar;
    list.add(0, noneOption);
    getSecondBootDevice().setItems(list);
    getSecondBootDevice().setSelectedItem(noneOption);
}
#end_block

#method_before
private void displayProtocol_SelectedItemChanged(Object sender, EventArgs args) {
    EntityModel entityModel = (EntityModel) getDisplayProtocol().getSelectedItem();
    if (entityModel == null) {
        return;
    }
    DisplayType type = (DisplayType) entityModel.getEntity();
    if (type == DisplayType.vnc) {
        getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED);
        getIsSmartcardEnabled().setEntity(false);
    }
    getBehavior().updateSingleQxl(type == DisplayType.qxl);
    getUsbPolicy().setIsChangable(type == DisplayType.qxl);
    getIsSmartcardEnabled().setIsChangable(type == DisplayType.qxl);
    getVncKeyboardLayout().setIsAvailable(type == DisplayType.vnc);
    updateNumOfMonitors();
}
#method_after
private void displayProtocol_SelectedItemChanged(Object sender, EventArgs args) {
    if (getDisplayType() == null) {
        return;
    }
    DisplayType type = getDisplayType();
    if (type == DisplayType.vnc) {
        getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED);
        getIsSmartcardEnabled().setEntity(false);
    }
    handleQxlClusterLevel();
    getUsbPolicy().setIsChangable(type == DisplayType.qxl);
    getIsSmartcardEnabled().setIsChangable(type == DisplayType.qxl);
    getVncKeyboardLayout().setIsAvailable(type == DisplayType.vnc);
    updateNumOfMonitors();
}
#end_block

#method_before
private boolean isVncSelected() {
    boolean isVnc = false;
    if (getDisplayProtocol().getSelectedItem() != null) {
        DisplayType displayType = (DisplayType) ((EntityModel) getDisplayProtocol().getSelectedItem()).getEntity();
        isVnc = displayType == DisplayType.vnc;
    }
    return isVnc;
}
#method_after
private boolean isVncSelected() {
    boolean isVnc = false;
    if (getDisplayProtocol().getSelectedItem() != null) {
        DisplayType displayType = getDisplayProtocol().getSelectedItem().getEntity();
        isVnc = displayType == DisplayType.vnc;
    }
    return isVnc;
}
#end_block

#method_before
public BootSequence getBootSequence() {
    EntityModel firstSelectedItem = (EntityModel) getFirstBootDevice().getSelectedItem();
    EntityModel secondSelectedItem = (EntityModel) getSecondBootDevice().getSelectedItem();
    String firstSelectedString = // $NON-NLS-1$
    firstSelectedItem.getEntity() == null ? "" : firstSelectedItem.getEntity().toString();
    String secondSelectedString = // $NON-NLS-1$
    secondSelectedItem.getEntity() == null ? "" : secondSelectedItem.getEntity().toString();
    return BootSequence.valueOf(firstSelectedString + secondSelectedString);
}
#method_after
public BootSequence getBootSequence() {
    EntityModel<BootSequence> firstSelectedItem = getFirstBootDevice().getSelectedItem();
    EntityModel<BootSequence> secondSelectedItem = getSecondBootDevice().getSelectedItem();
    String firstSelectedString = // $NON-NLS-1$
    firstSelectedItem.getEntity() == null ? "" : firstSelectedItem.getEntity().toString();
    String secondSelectedString = // $NON-NLS-1$
    secondSelectedItem.getEntity() == null ? "" : secondSelectedItem.getEntity().toString();
    return BootSequence.valueOf(firstSelectedString + secondSelectedString);
}
#end_block

#method_before
public void setBootSequence(BootSequence value) {
    ArrayList<BootSequence> items = new ArrayList<BootSequence>();
    for (char a : value.toString().toCharArray()) {
        items.add(BootSequence.valueOf(String.valueOf(a)));
    }
    Object firstBootDevice = null;
    for (Object item : getFirstBootDevice().getItems()) {
        EntityModel a = (EntityModel) item;
        if ((BootSequence) a.getEntity() == Linq.firstOrDefault(items)) {
            firstBootDevice = a;
        }
    }
    getFirstBootDevice().setSelectedItem(firstBootDevice);
    ArrayList<EntityModel> secondDeviceOptions = Linq.<EntityModel>cast(getSecondBootDevice().getItems());
    if (items.size() > 1) {
        BootSequence last = items.get(items.size() - 1);
        for (EntityModel a : secondDeviceOptions) {
            if (a.getEntity() != null && (BootSequence) a.getEntity() == last) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    } else {
        for (EntityModel a : secondDeviceOptions) {
            if (a.getEntity() == null) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    }
}
#method_after
public void setBootSequence(BootSequence value) {
    ArrayList<BootSequence> items = new ArrayList<BootSequence>();
    for (char a : value.toString().toCharArray()) {
        items.add(BootSequence.valueOf(String.valueOf(a)));
    }
    EntityModel<BootSequence> firstBootDevice = null;
    for (EntityModel<BootSequence> item : getFirstBootDevice().getItems()) {
        if (item.getEntity() == Linq.firstOrDefault(items)) {
            firstBootDevice = item;
        }
    }
    getFirstBootDevice().setSelectedItem(firstBootDevice);
    Iterable<EntityModel<BootSequence>> secondDeviceOptions = getSecondBootDevice().getItems();
    if (items.size() > 1) {
        BootSequence last = items.get(items.size() - 1);
        for (EntityModel<BootSequence> a : secondDeviceOptions) {
            if (a.getEntity() != null && a.getEntity() == last) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    } else {
        for (EntityModel<BootSequence> a : secondDeviceOptions) {
            if (a.getEntity() == null) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    }
}
#end_block

#method_before
protected void setupDataCenterWithClustersFromSystemTree(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    StoragePool dataCenter = getDataCenterAccordingSystemTree(model, dataCenters);
    List<VDSGroup> possibleClusters = getClusterAccordingSystemTree(model, clusters);
    if (dataCenter == null || possibleClusters == null) {
        getDataCenterWithClustersList().setIsChangable(false);
        return;
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (VDSGroup cluster : possibleClusters) {
        if (cluster.getStoragePoolId().equals(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#method_after
protected void setupDataCenterWithClustersFromSystemTree(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    StoragePool dataCenter = getDataCenterAccordingSystemTree(model, dataCenters);
    // the dataCenters are the entities just downloaded from server while the dataCenter can be a cached one from the system tree
    dataCenter = dataCenter == null ? null : findDataCenterById(dataCenters, dataCenter.getId());
    List<VDSGroup> possibleClusters = getClusterAccordingSystemTree(model, clusters);
    if (dataCenter == null || possibleClusters == null) {
        getDataCenterWithClustersList().setIsChangable(false);
        return;
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (VDSGroup cluster : possibleClusters) {
        if (cluster.getStoragePoolId() != null && cluster.getStoragePoolId().equals(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#end_block

#method_before
protected void setupDataCenterWithClusters(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    Map<Guid, List<VDSGroup>> dataCenterToCluster = new HashMap<Guid, List<VDSGroup>>();
    for (VDSGroup cluster : clusters) {
        if (!dataCenterToCluster.containsKey(cluster.getStoragePoolId())) {
            dataCenterToCluster.put(cluster.getStoragePoolId(), new ArrayList<VDSGroup>());
        }
        dataCenterToCluster.get(cluster.getStoragePoolId()).add(cluster);
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (StoragePool dataCenter : dataCenters) {
        for (VDSGroup cluster : dataCenterToCluster.get(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#method_after
protected void setupDataCenterWithClusters(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    Map<Guid, List<VDSGroup>> dataCenterToCluster = new HashMap<Guid, List<VDSGroup>>();
    for (VDSGroup cluster : clusters) {
        if (cluster.getStoragePoolId() == null) {
            continue;
        }
        if (!dataCenterToCluster.containsKey(cluster.getStoragePoolId())) {
            dataCenterToCluster.put(cluster.getStoragePoolId(), new ArrayList<VDSGroup>());
        }
        dataCenterToCluster.get(cluster.getStoragePoolId()).add(cluster);
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (StoragePool dataCenter : dataCenters) {
        for (VDSGroup cluster : dataCenterToCluster.get(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#end_block

#method_before
protected void selectDataCenterWithCluster(UnitVmModel model, Guid selectedCluster, List<DataCenterWithCluster> dataCentersWithClusters) {
    if (selectedCluster == null) {
        getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters));
    } else {
        model.getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters, new Linq.DataCenterWithClusterAccordingClusterPredicate((Guid) selectedCluster)));
    }
}
#method_after
protected void selectDataCenterWithCluster(UnitVmModel model, Guid selectedCluster, List<DataCenterWithCluster> dataCentersWithClusters) {
    if (selectedCluster == null) {
        getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters));
    } else {
        model.getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters, new Linq.DataCenterWithClusterAccordingClusterPredicate(selectedCluster)));
    }
}
#end_block

#method_before
private StoragePool findDataCenterById(List<StoragePool> list, Guid id) {
    for (StoragePool dc : list) {
        if (dc.getId().equals(id)) {
            return dc;
        }
    }
    return null;
}
#method_after
private StoragePool findDataCenterById(List<StoragePool> list, Guid id) {
    if (id == null) {
        return null;
    }
    for (StoragePool dc : list) {
        if (dc.getId().equals(id)) {
            return dc;
        }
    }
    return null;
}
#end_block

#method_before
public boolean validate() {
    getDataCenterWithClustersList().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getMemSize().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getMinAllocatedMemory().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getOSType().validateSelectedItem(new NotEmptyValidation[] { new NotEmptyValidation() });
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter != null && dataCenter.getQuotaEnforcementType() == QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) {
        getQuota().validateSelectedItem(new IValidation[] { new NotEmptyQuotaValidation() });
    }
    getTotalCPUCores().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, behavior.maxCpus), new TotalCpuCoresComposableValidation() });
    if (getOSType().getIsValid()) {
        Integer osType = (Integer) getOSType().getSelectedItem();
        getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation((getBehavior() instanceof TemplateVmModelBehavior || getBehavior() instanceof NewTemplateVmModelBehavior) ? VM_TEMPLATE_NAME_MAX_LIMIT : AsyncDataProvider.isWindowsOsType(osType) ? WINDOWS_VM_NAME_MAX_LIMIT : NON_WINDOWS_VM_NAME_MAX_LIMIT), isPoolTabValid ? new PoolNameValidation() : new I18NNameValidation() });
        getDescription().validateEntity(new IValidation[] { new LengthValidation(DESCRIPTION_MAX_LIMIT), new SpecialAsciiI18NOrNoneValidation() });
        AsyncQuery asyncQuery = new AsyncQuery();
        asyncQuery.setModel(this);
        asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                validateMemorySize(getMemSize(), (Integer) ((VdcQueryReturnValue) returnValue).getReturnValue(), _minMemSize);
                if (!(((UnitVmModel) model).getBehavior() instanceof TemplateVmModelBehavior)) {
                    // Minimum 'Physical Memory Guaranteed' is 1MB
                    validateMemorySize(getMinAllocatedMemory(), (Integer) getMemSize().getEntity(), 1);
                }
            }
        };
        if (getSelectedCluster() != null) {
            AsyncDataProvider.getOsMaxRam(osType, ((VDSGroup) getSelectedCluster()).getcompatibility_version(), asyncQuery);
        }
        getComment().validateEntity(new IValidation[] { new SpecialAsciiI18NOrNoneValidation() });
    }
    if (getIsAutoAssign().getEntity() != null && ((Boolean) getIsAutoAssign().getEntity()) == false) {
        getDefaultHost().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getDefaultHost().setIsValid(true);
    }
    getTemplate().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getDisksAllocationModel().validateEntity(new IValidation[] {});
    getCdImage().setIsValid(true);
    if (getCdImage().getIsChangable()) {
        getCdImage().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    if (getIsLinuxOS()) {
        getKernel_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getInitrd_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getKernel_parameters().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        // initrd path and kernel params require kernel path to be filled
        if (StringHelper.isNullOrEmpty((String) getKernel_path().getEntity())) {
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (!StringHelper.isNullOrEmpty((String) getInitrd_path().getEntity())) {
                getInitrd_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getInitrd_path().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getKernel_path().setIsValid(false);
            }
            if (!StringHelper.isNullOrEmpty((String) getKernel_parameters().getEntity())) {
                getKernel_parameters().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_parameters().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_path().setIsValid(false);
            }
        }
    }
    if (getCpuSharesAmount().getIsAvailable()) {
        getCpuSharesAmount().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, 262144) });
    }
    boolean customPropertySheetValid = getCustomPropertySheet().validate();
    setIsBootSequenceTabValid(true);
    setIsAllocationTabValid(getIsBootSequenceTabValid());
    setIsDisplayTabValid(getIsAllocationTabValid());
    setIsFirstRunTabValid(getIsDisplayTabValid());
    setIsGeneralTabValid(getIsFirstRunTabValid());
    setIsGeneralTabValid(getName().getIsValid() && getDescription().getIsValid() && getComment().getIsValid() && getDataCenterWithClustersList().getIsValid() && getTemplate().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid());
    setIsFirstRunTabValid(getDomain().getIsValid() && getTimeZone().getIsValid());
    setIsDisplayTabValid(getUsbPolicy().getIsValid() && getNumOfMonitors().getIsValid());
    setIsHostTabValid(getDefaultHost().getIsValid());
    setIsAllocationTabValid(getDisksAllocationModel().getIsValid() && getMinAllocatedMemory().getIsValid() && getCpuSharesAmount().getIsValid());
    setIsBootSequenceTabValid(getCdImage().getIsValid() && getKernel_path().getIsValid());
    setIsCustomPropertiesTabValid(customPropertySheetValid);
    return getName().getIsValid() && getDescription().getIsValid() && getDataCenterWithClustersList().getIsValid() && getDisksAllocationModel().getIsValid() && getTemplate().getIsValid() && getComment().getIsValid() && getDefaultHost().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid() && getNumOfMonitors().getIsValid() && getDomain().getIsValid() && getUsbPolicy().getIsValid() && getTimeZone().getIsValid() && getOSType().getIsValid() && getCdImage().getIsValid() && getKernel_path().getIsValid() && getInitrd_path().getIsValid() && getKernel_parameters().getIsValid() && getCpuSharesAmount().getIsValid() && behavior.validate() && customPropertySheetValid && getQuota().getIsValid();
}
#method_after
public boolean validate() {
    getDataCenterWithClustersList().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getMemSize().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getMinAllocatedMemory().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getOSType().validateSelectedItem(new NotEmptyValidation[] { new NotEmptyValidation() });
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter != null && dataCenter.getQuotaEnforcementType() == QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) {
        getQuota().validateSelectedItem(new IValidation[] { new NotEmptyQuotaValidation() });
    }
    getTotalCPUCores().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, behavior.maxCpus), new TotalCpuCoresComposableValidation() });
    if (getOSType().getIsValid()) {
        Integer osType = getOSType().getSelectedItem();
        getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation((getBehavior() instanceof TemplateVmModelBehavior || getBehavior() instanceof NewTemplateVmModelBehavior) ? VM_TEMPLATE_NAME_MAX_LIMIT : AsyncDataProvider.isWindowsOsType(osType) ? AsyncDataProvider.getMaxVmNameLengthWin() : AsyncDataProvider.getMaxVmNameLengthNonWin()), isPoolTabValid ? new PoolNameValidation() : new I18NNameValidation() });
        getDescription().validateEntity(new IValidation[] { new LengthValidation(DESCRIPTION_MAX_LIMIT), new SpecialAsciiI18NOrNoneValidation() });
        AsyncQuery asyncQuery = new AsyncQuery();
        asyncQuery.setModel(this);
        asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                validateMemorySize(getMemSize(), (Integer) ((VdcQueryReturnValue) returnValue).getReturnValue(), _minMemSize);
                if (!(((UnitVmModel) model).getBehavior() instanceof TemplateVmModelBehavior)) {
                    // Minimum 'Physical Memory Guaranteed' is 1MB
                    validateMemorySize(getMinAllocatedMemory(), getMemSize().getEntity(), 1);
                }
            }
        };
        if (getSelectedCluster() != null) {
            AsyncDataProvider.getOsMaxRam(osType, getSelectedCluster().getcompatibility_version(), asyncQuery);
        }
        getComment().validateEntity(new IValidation[] { new SpecialAsciiI18NOrNoneValidation() });
    }
    if (getIsAutoAssign().getEntity() != null && getIsAutoAssign().getEntity() == false) {
        getDefaultHost().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getDefaultHost().setIsValid(true);
    }
    getTemplate().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getDisksAllocationModel().validateEntity(new IValidation[] {});
    getCdImage().setIsValid(true);
    if (getCdImage().getIsChangable()) {
        getCdImage().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    if (getIsLinuxOS()) {
        getKernel_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getInitrd_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getKernel_parameters().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        // initrd path and kernel params require kernel path to be filled
        if (StringHelper.isNullOrEmpty(getKernel_path().getEntity())) {
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (!StringHelper.isNullOrEmpty(getInitrd_path().getEntity())) {
                getInitrd_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getInitrd_path().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getKernel_path().setIsValid(false);
            }
            if (!StringHelper.isNullOrEmpty(getKernel_parameters().getEntity())) {
                getKernel_parameters().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_parameters().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_path().setIsValid(false);
            }
        }
    }
    if (getCpuSharesAmount().getIsAvailable()) {
        getCpuSharesAmount().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, 262144) });
    }
    boolean customPropertySheetValid = getCustomPropertySheet().validate();
    setIsBootSequenceTabValid(true);
    setIsAllocationTabValid(getIsBootSequenceTabValid());
    setIsDisplayTabValid(getIsAllocationTabValid());
    setIsFirstRunTabValid(getIsDisplayTabValid());
    setIsGeneralTabValid(getIsFirstRunTabValid());
    setIsGeneralTabValid(getName().getIsValid() && getDescription().getIsValid() && getComment().getIsValid() && getDataCenterWithClustersList().getIsValid() && getTemplate().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid());
    setIsFirstRunTabValid(getDomain().getIsValid() && getTimeZone().getIsValid());
    setIsDisplayTabValid(getUsbPolicy().getIsValid() && getNumOfMonitors().getIsValid());
    setIsHostTabValid(getDefaultHost().getIsValid());
    setIsAllocationTabValid(getDisksAllocationModel().getIsValid() && getMinAllocatedMemory().getIsValid() && getCpuSharesAmount().getIsValid());
    setIsBootSequenceTabValid(getCdImage().getIsValid() && getKernel_path().getIsValid());
    setIsCustomPropertiesTabValid(customPropertySheetValid);
    return getName().getIsValid() && getDescription().getIsValid() && getDataCenterWithClustersList().getIsValid() && getDisksAllocationModel().getIsValid() && getTemplate().getIsValid() && getComment().getIsValid() && getDefaultHost().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid() && getNumOfMonitors().getIsValid() && getDomain().getIsValid() && getUsbPolicy().getIsValid() && getTimeZone().getIsValid() && getOSType().getIsValid() && getCdImage().getIsValid() && getKernel_path().getIsValid() && getInitrd_path().getIsValid() && getKernel_parameters().getIsValid() && getCpuSharesAmount().getIsValid() && behavior.validate() && customPropertySheetValid && getQuota().getIsValid();
}
#end_block

#method_before
@Override
public ValidationResult validate(Object value) {
    boolean isOk = behavior.isNumOfSocketsCorrect(Integer.parseInt(getTotalCPUCores().getEntity().toString()));
    ValidationResult res = new ValidationResult();
    res.setSuccess(isOk);
    res.setReasons(Arrays.asList(ConstantsManager.getInstance().getMessages().incorrectVCPUNumber()));
    return res;
}
#method_after
@Override
public ValidationResult validate(Object value) {
    boolean isOk = behavior.isNumOfSocketsCorrect(Integer.parseInt(getTotalCPUCores().getEntity()));
    ValidationResult res = new ValidationResult();
    res.setSuccess(isOk);
    res.setReasons(Arrays.asList(ConstantsManager.getInstance().getMessages().incorrectVCPUNumber()));
    return res;
}
#end_block

#method_before
public ListModel getPoolType() {
    return poolType;
}
#method_after
public ListModel<EntityModel<VmPoolType>> getPoolType() {
    return poolType;
}
#end_block

#method_before
protected void setPoolType(NotChangableForVmInPoolListModel value) {
    poolType = value;
}
#method_after
protected void setPoolType(NotChangableForVmInPoolListModel<EntityModel<VmPoolType>> value) {
    poolType = value;
}
#end_block

#method_before
public EntityModel getNumOfDesktops() {
    return numOfDesktops;
}
#method_after
public EntityModel<Integer> getNumOfDesktops() {
    return numOfDesktops;
}
#end_block

#method_before
protected void setNumOfDesktops(NotChangableForVmInPoolEntityModel value) {
    numOfDesktops = value;
}
#method_after
protected void setNumOfDesktops(NotChangableForVmInPoolEntityModel<Integer> value) {
    numOfDesktops = value;
}
#end_block

#method_before
public EntityModel getAssignedVms() {
    return assignedVms;
}
#method_after
public EntityModel<Integer> getAssignedVms() {
    return assignedVms;
}
#end_block

#method_before
public void setAssignedVms(NotChangableForVmInPoolEntityModel value) {
    assignedVms = value;
}
#method_after
public void setAssignedVms(NotChangableForVmInPoolEntityModel<Integer> value) {
    assignedVms = value;
}
#end_block

#method_before
public EntityModel getPrestartedVms() {
    return prestartedVms;
}
#method_after
public EntityModel<Integer> getPrestartedVms() {
    return prestartedVms;
}
#end_block

#method_before
protected void setPrestartedVms(NotChangableForVmInPoolEntityModel value) {
    prestartedVms = value;
}
#method_after
protected void setPrestartedVms(NotChangableForVmInPoolEntityModel<Integer> value) {
    prestartedVms = value;
}
#end_block

#method_before
public EntityModel getMaxAssignedVmsPerUser() {
    return maxAssignedVmsPerUser;
}
#method_after
public EntityModel<Integer> getMaxAssignedVmsPerUser() {
    return maxAssignedVmsPerUser;
}
#end_block

#method_before
public void setMaxAssignedVmsPerUser(NotChangableForVmInPoolEntityModel maxAssignedVmsPerUser) {
    this.maxAssignedVmsPerUser = maxAssignedVmsPerUser;
}
#method_after
public void setMaxAssignedVmsPerUser(NotChangableForVmInPoolEntityModel<Integer> maxAssignedVmsPerUser) {
    this.maxAssignedVmsPerUser = maxAssignedVmsPerUser;
}
#end_block

#method_before
@Override
public ListModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool())
        super.setIsChangable(value);
    return this;
}
#method_after
@Override
public ListModel<T> setIsChangable(boolean value) {
    if (!isVmAttachedToPool()) {
        super.setIsChangable(value);
    }
    return this;
}
#end_block

#method_before
@Override
public EntityModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool())
        super.setIsChangable(value);
    return this;
}
#method_after
@Override
public EntityModel<T> setIsChangable(boolean value) {
    if (!isVmAttachedToPool()) {
        super.setIsChangable(value);
    }
    return this;
}
#end_block

#method_before
@Override
public KeyValueModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool())
        super.setIsChangable(value);
    return this;
}
#method_after
@Override
public KeyValueModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool()) {
        super.setIsChangable(value);
    }
    return this;
}
#end_block

#method_before
public ListModel getWatchdogModel() {
    return watchdogModel;
}
#method_after
public ListModel<String> getWatchdogModel() {
    return watchdogModel;
}
#end_block

#method_before
public void setWatchdogModel(ListModel watchdogModel) {
    this.watchdogModel = watchdogModel;
}
#method_after
public void setWatchdogModel(ListModel<String> watchdogModel) {
    this.watchdogModel = watchdogModel;
}
#end_block

#method_before
public ListModel getWatchdogAction() {
    return watchdogAction;
}
#method_after
public ListModel<String> getWatchdogAction() {
    return watchdogAction;
}
#end_block

#method_before
public void setWatchdogAction(ListModel watchdogAction) {
    this.watchdogAction = watchdogAction;
}
#method_after
public void setWatchdogAction(ListModel<String> watchdogAction) {
    this.watchdogAction = watchdogAction;
}
#end_block

#method_before
public StoragePool getSelectedDataCenter() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getDataCenter();
}
#method_after
public StoragePool getSelectedDataCenter() {
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getDataCenter();
}
#end_block

#method_before
public VDSGroup getSelectedCluster() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getCluster();
}
#method_after
public VDSGroup getSelectedCluster() {
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getCluster();
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getVmType().setIsChangable(true);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    AsyncDataProvider.getDataCenterById(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            if (returnValue != null) {
                StoragePool dataCenter = (StoragePool) returnValue;
                final List<StoragePool> dataCenters = new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { dataCenter }));
                initClusters(dataCenters);
            } else {
                ExistingVmModelBehavior behavior = (ExistingVmModelBehavior) model.getBehavior();
                VM currentVm = behavior.vm;
                VDSGroup tempVar = new VDSGroup();
                tempVar.setId(currentVm.getVdsGroupId());
                tempVar.setName(currentVm.getVdsGroupName());
                tempVar.setcompatibility_version(currentVm.getVdsGroupCompatibilityVersion());
                tempVar.setStoragePoolId(currentVm.getStoragePoolId());
                VDSGroup cluster = tempVar;
                DataCenterWithCluster dataCenterWithCluster = new DataCenterWithCluster(null, cluster);
                model.getDataCenterWithClustersList().setItems(Arrays.asList(dataCenterWithCluster));
                model.getDataCenterWithClustersList().setSelectedItem(Arrays.asList(dataCenterWithCluster));
                behavior.initTemplate();
                behavior.initCdImage();
                behavior.initSoundCard(vm.getId());
            }
        }
    }, getModel().getHash()), vm.getStoragePoolId());
    AsyncDataProvider.GetWatchdogByVmId(new AsyncQuery(this.getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            VdcQueryReturnValue val = (VdcQueryReturnValue) returnValue;
            @SuppressWarnings("unchecked")
            Collection<VmWatchdog> watchdogs = (Collection<VmWatchdog>) val.getReturnValue();
            for (VmWatchdog watchdog : watchdogs) {
                model.getWatchdogAction().setSelectedItem(watchdog.getAction() == null ? null : watchdog.getAction().name().toLowerCase());
                model.getWatchdogModel().setSelectedItem(watchdog.getModel() == null ? "" : watchdog.getModel().name());
            }
        }
    }), vm.getId());
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getVmType().setIsChangable(true);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    AsyncQuery getVmNicsQuery = new AsyncQuery();
    getVmNicsQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            networkInerfaces = (List<VmNetworkInterface>) result;
            postNetworkInterfacesLoaded();
        }
    };
    AsyncDataProvider.getVmNicList(getVmNicsQuery, vm.getId());
    AsyncDataProvider.getWatchdogByVmId(new AsyncQuery(this.getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            VdcQueryReturnValue val = (VdcQueryReturnValue) returnValue;
            @SuppressWarnings("unchecked")
            Collection<VmWatchdog> watchdogs = val.getReturnValue();
            for (VmWatchdog watchdog : watchdogs) {
                model.getWatchdogAction().setSelectedItem(watchdog.getAction() == null ? null : watchdog.getAction().name().toLowerCase());
                model.getWatchdogModel().setSelectedItem(watchdog.getModel() == null ? "" : watchdog.getModel().name());
            }
        }
    }), vm.getId());
}
#end_block

#method_before
@Override
public void template_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    getModel().getName().setEntity(vm.getName());
    getModel().getDescription().setEntity(vm.getVmDescription());
    getModel().getComment().setEntity(vm.getComment());
    getModel().getMemSize().setEntity(vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(vm.getVmOsId());
    getModel().getDomain().setSelectedItem(vm.getVmDomain());
    getModel().getUsbPolicy().setSelectedItem(vm.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(vm.getNumOfMonitors());
    getModel().getIsSingleQxlEnabled().setEntity(vm.getSingleQxlPci());
    getModel().getAllowConsoleReconnect().setEntity(vm.getAllowConsoleReconnect());
    getModel().setBootSequence(vm.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(vm.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(vm.getNumOfCpus()));
    getModel().getTotalCPUCores().setIsChangable(!vm.isRunning());
    getModel().getIsStateless().setEntity(vm.isStateless());
    getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsRunAndPause().setEntity(vm.isRunAndPause());
    getModel().getIsRunAndPause().setIsChangable(!vm.isRunning());
    getModel().getIsRunAndPause().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsSmartcardEnabled().setEntity(vm.isSmartcardEnabled());
    getModel().getIsDeleteProtected().setEntity(vm.isDeleteProtected());
    getModel().getNumOfSockets().setSelectedItem(vm.getNumOfSockets());
    getModel().getNumOfSockets().setIsChangable(!vm.isRunning());
    getModel().getCoresPerSocket().setIsChangable(!vm.isRunning());
    getModel().getKernel_parameters().setEntity(vm.getKernelParams());
    getModel().getKernel_path().setEntity(vm.getKernelUrl());
    getModel().getInitrd_path().setEntity(vm.getInitrdUrl());
    getModel().getCustomProperties().setEntity(vm.getCustomProperties());
    getModel().getCustomPropertySheet().setEntity(vm.getCustomProperties());
    getModel().getCpuPinning().setEntity(vm.getCpuPinning());
    getModel().getCpuSharesAmount().setEntity(vm.getCpuShares());
    updateCpuSharesSelection();
    Frontend.RunQuery(VdcQueryType.GetWatchdog, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            @SuppressWarnings("unchecked")
            List<VmWatchdog> watchdogs = (List<VmWatchdog>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (watchdogs.isEmpty()) {
                getModel().getWatchdogAction().setSelectedItem(null);
                getModel().getWatchdogModel().setSelectedItem(null);
            } else {
                VmWatchdog vmWatchdog = watchdogs.get(0);
                getModel().getWatchdogAction().setSelectedItem(vmWatchdog.getAction() == null ? null : vmWatchdog.getAction().name().toLowerCase());
                getModel().getWatchdogModel().setSelectedItem(vmWatchdog.getModel() == null ? "" : vmWatchdog.getModel().name());
            }
        }
    }));
    updateConsoleDevice(getVm().getId());
    getModel().getVncKeyboardLayout().setSelectedItem(vm.getVncKeyboardLayout());
    Frontend.RunQuery(VdcQueryType.IsBalloonEnabled, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            getModel().getMemoryBalloonDeviceEnabled().setEntity(((VdcQueryReturnValue) returnValue).getReturnValue());
        }
    }));
    if (vm.isInitialized()) {
        getModel().getTimeZone().setChangeProhibitionReason(// $NON-NLS-1$
        "Time Zone cannot be change since the Virtual Machine was booted at the first time.");
        getModel().getTimeZone().setIsChangable(false);
    }
    updateTimeZone(vm.getTimeZone());
    // Update domain list
    updateDomain();
    updateHostPinning(vm.getMigrationSupport());
    getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
    // Select display protocol.
    for (Object item : getModel().getDisplayProtocol().getItems()) {
        EntityModel model = (EntityModel) item;
        DisplayType displayType = (DisplayType) model.getEntity();
        if (displayType == vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(item);
            break;
        }
    }
    initPriority(vm.getPriority());
}
#method_after
@Override
public void template_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    getModel().getName().setEntity(vm.getName());
    getModel().getDescription().setEntity(vm.getVmDescription());
    getModel().getComment().setEntity(vm.getComment());
    getModel().getMemSize().setEntity(vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(vm.getVmOsId());
    getModel().getDomain().setSelectedItem(vm.getVmDomain());
    getModel().getUsbPolicy().setSelectedItem(vm.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(vm.getNumOfMonitors());
    getModel().getIsSingleQxlEnabled().setEntity(vm.getSingleQxlPci());
    getModel().getAllowConsoleReconnect().setEntity(vm.getAllowConsoleReconnect());
    getModel().setBootSequence(vm.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(vm.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(vm.getNumOfCpus()));
    getModel().getTotalCPUCores().setIsChangable(!vm.isRunning());
    getModel().getIsStateless().setEntity(vm.isStateless());
    getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsRunAndPause().setEntity(vm.isRunAndPause());
    getModel().getIsRunAndPause().setIsChangable(!vm.isRunning());
    getModel().getIsRunAndPause().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsSmartcardEnabled().setEntity(vm.isSmartcardEnabled());
    getModel().getIsDeleteProtected().setEntity(vm.isDeleteProtected());
    getModel().selectSsoMethod(vm.getSsoMethod());
    getModel().getNumOfSockets().setSelectedItem(vm.getNumOfSockets());
    getModel().getNumOfSockets().setIsChangable(!vm.isRunning());
    getModel().getCoresPerSocket().setIsChangable(!vm.isRunning());
    getModel().getKernel_parameters().setEntity(vm.getKernelParams());
    getModel().getKernel_path().setEntity(vm.getKernelUrl());
    getModel().getInitrd_path().setEntity(vm.getInitrdUrl());
    getModel().getCustomProperties().setEntity(vm.getCustomProperties());
    getModel().getCustomPropertySheet().setEntity(vm.getCustomProperties());
    getModel().getCpuSharesAmount().setEntity(vm.getCpuShares());
    updateCpuSharesSelection();
    Frontend.getInstance().runQuery(VdcQueryType.GetWatchdog, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            @SuppressWarnings("unchecked")
            List<VmWatchdog> watchdogs = ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (watchdogs.isEmpty()) {
                getModel().getWatchdogAction().setSelectedItem(null);
                getModel().getWatchdogModel().setSelectedItem(null);
            } else {
                VmWatchdog vmWatchdog = watchdogs.get(0);
                getModel().getWatchdogAction().setSelectedItem(vmWatchdog.getAction() == null ? null : vmWatchdog.getAction().name().toLowerCase());
                getModel().getWatchdogModel().setSelectedItem(vmWatchdog.getModel() == null ? "" : vmWatchdog.getModel().name());
            }
        }
    }));
    updateConsoleDevice(getVm().getId());
    updateVirtioScsiEnabled(getVm().getId());
    getModel().getVncKeyboardLayout().setSelectedItem(vm.getVncKeyboardLayout());
    Frontend.getInstance().runQuery(VdcQueryType.IsBalloonEnabled, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            getModel().getMemoryBalloonDeviceEnabled().setEntity((Boolean) ((VdcQueryReturnValue) returnValue).getReturnValue());
        }
    }));
    if (vm.isInitialized()) {
        UIConstants constants = ConstantsManager.getInstance().getConstants();
        getModel().getTimeZone().setChangeProhibitionReason(constants.timeZoneCannotBeChangedAfterVMInit());
        getModel().getTimeZone().setIsChangable(false);
    }
    updateTimeZone(vm.getTimeZone());
    // Update domain list
    updateDomain();
    updateHostPinning(vm.getMigrationSupport());
    getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
    // Select display protocol.
    for (EntityModel<DisplayType> model : getModel().getDisplayProtocol().getItems()) {
        DisplayType displayType = model.getEntity();
        if (displayType == vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(model);
            break;
        }
    }
    getModel().getCpuPinning().setEntity(vm.getCpuPinning());
    initPriority(vm.getPriority());
}
#end_block

#method_before
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateNumOfSockets();
    updateQuotaByCluster(vm.getQuotaId(), vm.getQuotaName());
    updateCpuPinningVisibility();
    initNetworkInterfaces();
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateOSValues();
}
#method_after
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateNumOfSockets();
    updateQuotaByCluster(vm.getQuotaId(), vm.getQuotaName());
    updateCpuPinningVisibility();
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateNetworkInterfaces(networkBehavior, networkInerfaces);
    updateVirtioScsiAvailability();
    updateOSValues();
}
#end_block

#method_before
@Override
public void updateMinAllocatedMemory() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getModel().getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return;
    }
    VDSGroup cluster = dataCenterWithCluster.getCluster();
    if (cluster == null) {
        return;
    }
    if ((Integer) getModel().getMemSize().getEntity() < vm.getVmMemSizeMb()) {
        double overCommitFactor = 100.0 / cluster.getmax_vds_memory_over_commit();
        getModel().getMinAllocatedMemory().setEntity((int) ((Integer) getModel().getMemSize().getEntity() * overCommitFactor));
    } else {
        getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    }
}
#method_after
@Override
public void updateMinAllocatedMemory() {
    DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return;
    }
    VDSGroup cluster = dataCenterWithCluster.getCluster();
    if (cluster == null) {
        return;
    }
    if (getModel().getMemSize().getEntity() < vm.getVmMemSizeMb()) {
        double overCommitFactor = 100.0 / cluster.getmax_vds_memory_over_commit();
        getModel().getMinAllocatedMemory().setEntity((int) ((Integer) getModel().getMemSize().getEntity() * overCommitFactor));
    } else {
        getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    }
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    AsyncDataProvider.getDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final ArrayList<StoragePool> dataCenters = new ArrayList<StoragePool>();
            for (StoragePool a : (ArrayList<StoragePool>) returnValue) {
                if (a.getstatus() == StoragePoolStatus.Up) {
                    dataCenters.add(a);
                }
            }
            AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                @Override
                public void onSuccess(Object target, Object returnValue) {
                    UnitVmModel model = (UnitVmModel) target;
                    model.setDataCentersAndClusters(model, dataCenters, (List<VDSGroup>) returnValue, null);
                    initCdImage();
                }
            }, getModel().getHash()), true, false);
        }
    }, getModel().getHash()), true, false);
    initPriority(0);
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    AsyncDataProvider.getDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final ArrayList<StoragePool> dataCenters = new ArrayList<StoragePool>();
            for (StoragePool a : (ArrayList<StoragePool>) returnValue) {
                if (a.getStatus() == StoragePoolStatus.Up) {
                    dataCenters.add(a);
                }
            }
            if (!dataCenters.isEmpty()) {
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        model.setDataCentersAndClusters(model, dataCenters, (List<VDSGroup>) returnValue, null);
                        initCdImage();
                    }
                }, getModel().getHash()), true, false);
            } else {
                getModel().disableEditing();
            }
        }
    }, getModel().getHash()), true, false);
    initPriority(0);
}
#end_block

#method_before
@Override
public void template_SelectedItemChanged() {
    VmTemplate template = (VmTemplate) getModel().getTemplate().getSelectedItem();
    if (template != null) {
        // If this a blank template, use the proper value for the default OS
        if (template.getId().equals(Guid.Empty)) {
            List<Integer> osIds = (List<Integer>) getModel().getOSType().getItems();
            getModel().getOSType().setSelectedItem(Collections.min(osIds));
        } else {
            getModel().getOSType().setSelectedItem(template.getOsId());
        }
        getModel().getTotalCPUCores().setEntity(Integer.toString(template.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(template.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(template.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(template.getSingleQxlPci());
        getModel().getDomain().setSelectedItem(template.getDomain());
        getModel().getMemSize().setEntity(template.getMemSizeMb());
        getModel().setBootSequence(template.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(template.isAutoStartup());
        updateHostPinning(template.getMigrationSupport());
        doChangeDefautlHost(template.getDedicatedVmForVds());
        getModel().getIsDeleteProtected().setEntity(template.isDeleteProtected());
        getModel().getIsStateless().setEntity(template.isStateless());
        getModel().getAllowConsoleReconnect().setEntity(template.isAllowConsoleReconnect());
        boolean hasCd = !StringHelper.isNullOrEmpty(template.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(template.getIsoPath());
        }
        updateConsoleDevice(template.getId());
        updateTimeZone(template.getTimeZone());
        // Update domain list
        updateDomain();
        // Update display protocol selected item
        EntityModel displayProtocol = null;
        boolean isFirst = true;
        for (Object item : getModel().getDisplayProtocol().getItems()) {
            EntityModel a = (EntityModel) item;
            if (isFirst) {
                displayProtocol = a;
                isFirst = false;
            }
            DisplayType dt = (DisplayType) a.getEntity();
            if (dt == template.getDefaultDisplayType()) {
                displayProtocol = a;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(template.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(template.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(template.isSmartcardEnabled());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(template.getKernelUrl());
        getModel().getKernel_parameters().setEntity(template.getKernelParams());
        getModel().getInitrd_path().setEntity(template.getInitrdUrl());
        if (!template.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().getProvisioning().setIsChangable(true);
            getModel().getVmType().setSelectedItem(template.getVmType());
            getModel().setIsBlankTemplate(false);
            getModel().getCopyPermissions().setIsAvailable(true);
            initDisks();
            initSoundCard(template.getId());
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().getProvisioning().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().getCopyPermissions().setIsAvailable(false);
            getModel().setDisks(null);
        }
        initPriority(template.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (template.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(template.getMinAllocatedMem());
        }
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
        updateNetworkInterfacesByTemplate(template);
    }
}
#method_after
@Override
public void template_SelectedItemChanged() {
    VmTemplate template = getModel().getTemplate().getSelectedItem();
    if (template != null) {
        // If this a blank template, use the proper value for the default OS
        if (template.getId().equals(Guid.Empty)) {
            List<Integer> osIds = (List<Integer>) getModel().getOSType().getItems();
            if (!osIds.isEmpty()) {
                getModel().getOSType().setSelectedItem(Collections.min(osIds));
            }
        } else {
            getModel().getOSType().setSelectedItem(template.getOsId());
        }
        getModel().getTotalCPUCores().setEntity(Integer.toString(template.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(template.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(template.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(template.getSingleQxlPci());
        getModel().getDomain().setSelectedItem(template.getDomain());
        getModel().getMemSize().setEntity(template.getMemSizeMb());
        getModel().setBootSequence(template.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(template.isAutoStartup());
        updateHostPinning(template.getMigrationSupport());
        doChangeDefautlHost(template.getDedicatedVmForVds());
        getModel().getIsDeleteProtected().setEntity(template.isDeleteProtected());
        getModel().selectSsoMethod(template.getSsoMethod());
        getModel().getIsStateless().setEntity(template.isStateless());
        boolean hasCd = !StringHelper.isNullOrEmpty(template.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(template.getIsoPath());
        }
        updateConsoleDevice(template.getId());
        updateVirtioScsiEnabled(template.getId());
        updateTimeZone(template.getTimeZone());
        // Update domain list
        updateDomain();
        // Update display protocol selected item
        EntityModel<DisplayType> displayProtocol = null;
        boolean isFirst = true;
        for (EntityModel<DisplayType> item : getModel().getDisplayProtocol().getItems()) {
            if (isFirst) {
                displayProtocol = item;
                isFirst = false;
            }
            DisplayType dt = item.getEntity();
            if (dt == template.getDefaultDisplayType()) {
                displayProtocol = item;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(template.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(template.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(template.isSmartcardEnabled());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(template.getKernelUrl());
        getModel().getKernel_parameters().setEntity(template.getKernelParams());
        getModel().getInitrd_path().setEntity(template.getInitrdUrl());
        if (!template.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().getProvisioning().setIsChangable(true);
            getModel().getVmType().setSelectedItem(template.getVmType());
            getModel().setIsBlankTemplate(false);
            getModel().getCopyPermissions().setIsAvailable(true);
            getModel().getAllowConsoleReconnect().setEntity(template.isAllowConsoleReconnect());
            initDisks();
            initSoundCard(template.getId());
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().getProvisioning().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().getCopyPermissions().setIsAvailable(false);
            getModel().setDisks(null);
        }
        initPriority(template.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (template.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(template.getMinAllocatedMem());
        }
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
        updateNetworkInterfacesByTemplate(template);
    }
}
#end_block

#method_before
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateMinAllocatedMemory();
    updateNumOfSockets();
    if (getModel().getTemplate().getSelectedItem() != null) {
        VmTemplate template = (VmTemplate) getModel().getTemplate().getSelectedItem();
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    }
    updateCpuPinningVisibility();
    updateTemplate();
    initNetworkInterfaces(networkBehavior, null);
    updateOSValues();
    updateMemoryBalloon();
    updateCpuSharesAvailability();
}
#method_after
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateMinAllocatedMemory();
    updateNumOfSockets();
    if (getModel().getTemplate().getSelectedItem() != null) {
        VmTemplate template = getModel().getTemplate().getSelectedItem();
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    }
    updateCpuPinningVisibility();
    updateTemplate();
    updateNetworkInterfaces(networkBehavior, null);
    updateOSValues();
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateVirtioScsiAvailability();
}
#end_block

#method_before
private void updateNetworkInterfacesByTemplate(VmTemplate template) {
    AsyncQuery query = new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue == null) {
                return;
            }
            List<VmNetworkInterface> nics = (List<VmNetworkInterface>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initNetworkInterfaces(networkBehavior, nics);
        }
    });
    Frontend.RunQuery(VdcQueryType.GetTemplateInterfacesByTemplateId, new IdQueryParameters(template.getId()), query);
}
#method_after
private void updateNetworkInterfacesByTemplate(VmTemplate template) {
    AsyncQuery query = new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue == null) {
                return;
            }
            List<VmNetworkInterface> nics = (List<VmNetworkInterface>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            updateNetworkInterfaces(networkBehavior, nics);
        }
    });
    Frontend.getInstance().runQuery(VdcQueryType.GetTemplateInterfacesByTemplateId, new IdQueryParameters(template.getId()), query);
}
#end_block

#method_before
@Override
public void provisioning_SelectedItemChanged() {
    boolean provisioning = (Boolean) getModel().getProvisioning().getEntity();
    getModel().getProvisioningThin_IsSelected().setEntity(!provisioning);
    getModel().getProvisioningClone_IsSelected().setEntity(provisioning);
    getModel().getDisksAllocationModel().setIsVolumeFormatAvailable(true);
    getModel().getDisksAllocationModel().setIsVolumeFormatChangable(provisioning);
    getModel().getDisksAllocationModel().setIsAliasChangable(true);
    initStorageDomains();
}
#method_after
@Override
public void provisioning_SelectedItemChanged() {
    boolean provisioning = getModel().getProvisioning().getEntity();
    getModel().getProvisioningThin_IsSelected().setEntity(!provisioning);
    getModel().getProvisioningClone_IsSelected().setEntity(provisioning);
    getModel().getDisksAllocationModel().setIsVolumeFormatAvailable(true);
    getModel().getDisksAllocationModel().setIsVolumeFormatChangable(provisioning);
    getModel().getDisksAllocationModel().setIsAliasChangable(true);
    initStorageDomains();
}
#end_block

#method_before
@Override
public void updateMinAllocatedMemory() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getModel().getDataCenterWithClustersList().getSelectedItem();
    VDSGroup cluster = dataCenterWithCluster == null ? null : dataCenterWithCluster.getCluster();
    if (cluster == null) {
        return;
    }
    double overCommitFactor = 100.0 / cluster.getmax_vds_memory_over_commit();
    getModel().getMinAllocatedMemory().setEntity((int) ((Integer) getModel().getMemSize().getEntity() * overCommitFactor));
}
#method_after
@Override
public void updateMinAllocatedMemory() {
    DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem();
    VDSGroup cluster = dataCenterWithCluster == null ? null : dataCenterWithCluster.getCluster();
    if (cluster == null) {
        return;
    }
    double overCommitFactor = 100.0 / cluster.getmax_vds_memory_over_commit();
    getModel().getMinAllocatedMemory().setEntity((int) (getModel().getMemSize().getEntity() * overCommitFactor));
}
#end_block

#method_before
private void updateTemplate() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getModel().getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter == null) {
        return;
    }
    // Filter according to system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        StorageDomain storage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(new Object[] { this, storage }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target1, Object returnValue1) {
                Object[] array1 = (Object[]) target1;
                NewVmModelBehavior behavior1 = (NewVmModelBehavior) array1[0];
                StorageDomain storage1 = (StorageDomain) array1[1];
                AsyncDataProvider.getTemplateListByStorage(new AsyncQuery(new Object[] { behavior1, returnValue1 }, new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target2, Object returnValue2) {
                        Object[] array2 = (Object[]) target2;
                        NewVmModelBehavior behavior2 = (NewVmModelBehavior) array2[0];
                        ArrayList<VmTemplate> templatesByDataCenter = (ArrayList<VmTemplate>) array2[1];
                        ArrayList<VmTemplate> templatesByStorage = (ArrayList<VmTemplate>) returnValue2;
                        VmTemplate blankTemplate = Linq.firstOrDefault(templatesByDataCenter, new Linq.TemplatePredicate(Guid.Empty));
                        if (blankTemplate != null) {
                            templatesByStorage.add(0, blankTemplate);
                        }
                        behavior2.postInitTemplate((ArrayList<VmTemplate>) returnValue2);
                    }
                }), storage1.getId());
            }
        }, getModel().getHash()), dataCenter.getId());
    } else {
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                NewVmModelBehavior behavior = (NewVmModelBehavior) target;
                behavior.postInitTemplate((ArrayList<VmTemplate>) returnValue);
            }
        }, getModel().getHash()), dataCenter.getId());
    }
}
#method_after
private void updateTemplate() {
    DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter == null) {
        return;
    }
    // Filter according to system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        StorageDomain storage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(new Object[] { this, storage }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target1, Object returnValue1) {
                Object[] array1 = (Object[]) target1;
                NewVmModelBehavior behavior1 = (NewVmModelBehavior) array1[0];
                StorageDomain storage1 = (StorageDomain) array1[1];
                AsyncDataProvider.getTemplateListByStorage(new AsyncQuery(new Object[] { behavior1, returnValue1 }, new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target2, Object returnValue2) {
                        Object[] array2 = (Object[]) target2;
                        NewVmModelBehavior behavior2 = (NewVmModelBehavior) array2[0];
                        ArrayList<VmTemplate> templatesByDataCenter = (ArrayList<VmTemplate>) array2[1];
                        ArrayList<VmTemplate> templatesByStorage = (ArrayList<VmTemplate>) returnValue2;
                        VmTemplate blankTemplate = Linq.firstOrDefault(templatesByDataCenter, new Linq.TemplatePredicate(Guid.Empty));
                        if (blankTemplate != null) {
                            templatesByStorage.add(0, blankTemplate);
                        }
                        behavior2.postInitTemplate((ArrayList<VmTemplate>) returnValue2);
                    }
                }), storage1.getId());
            }
        }, getModel().getHash()), dataCenter.getId());
    } else {
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                NewVmModelBehavior behavior = (NewVmModelBehavior) target;
                behavior.postInitTemplate((ArrayList<VmTemplate>) returnValue);
            }
        }, getModel().getHash()), dataCenter.getId());
    }
}
#end_block

#method_before
private void postInitTemplate(ArrayList<VmTemplate> templates) {
    // If there was some template selected before, try select it again.
    VmTemplate oldTemplate = (VmTemplate) getModel().getTemplate().getSelectedItem();
    getModel().getTemplate().setItems(templates);
    getModel().getTemplate().setSelectedItem(Linq.firstOrDefault(templates, oldTemplate != null ? new Linq.TemplatePredicate(oldTemplate.getId()) : new Linq.TemplatePredicate(Guid.Empty)));
    updateIsDisksAvailable();
}
#method_after
private void postInitTemplate(ArrayList<VmTemplate> templates) {
    // If there was some template selected before, try select it again.
    VmTemplate oldTemplate = getModel().getTemplate().getSelectedItem();
    getModel().getTemplate().setItems(templates);
    getModel().getTemplate().setSelectedItem(Linq.firstOrDefault(templates, oldTemplate != null ? new Linq.TemplatePredicate(oldTemplate.getId()) : new Linq.TemplatePredicate(Guid.Empty)));
    updateIsDisksAvailable();
}
#end_block

#method_before
public void initCdImage() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getModel().getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null || dataCenterWithCluster.getDataCenter() == null) {
        return;
    }
    updateUserCdImage(dataCenterWithCluster.getDataCenter().getId());
}
#method_after
public void initCdImage() {
    DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null || dataCenterWithCluster.getDataCenter() == null) {
        return;
    }
    updateUserCdImage(dataCenterWithCluster.getDataCenter().getId());
}
#end_block

#method_before
@Override
public void updateIsDisksAvailable() {
    getModel().setIsDisksAvailable(getModel().getDisks() != null && getModel().getProvisioning().getIsChangable());
}
#method_after
@Override
public void updateIsDisksAvailable() {
    getModel().setIsDisksAvailable(getModel().getDisks() != null && !getModel().getDisks().isEmpty() && getModel().getProvisioning().getIsChangable());
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getDisksAllocationModel().setIsVolumeFormatAvailable(false);
    getModel().getDisksAllocationModel().setIsAliasChangable(true);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(false);
    AsyncDataProvider.getDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            final List<StoragePool> dataCenters = new ArrayList<StoragePool>();
            for (StoragePool a : (ArrayList<StoragePool>) returnValue) {
                if (a.getstatus() == StoragePoolStatus.Up) {
                    dataCenters.add(a);
                }
            }
            AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                @Override
                public void onSuccess(Object target, Object returnValue) {
                    UnitVmModel model = (UnitVmModel) target;
                    model.setDataCentersAndClusters(model, dataCenters, (List<VDSGroup>) returnValue, null);
                    initTemplate();
                    initCdImage();
                    getPoolModelBehaviorInitializedEvent().raise(this, EventArgs.Empty);
                }
            }, getModel().getHash()), true, false);
        }
    }, getModel().getHash()), true, false);
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getDisksAllocationModel().setIsVolumeFormatAvailable(false);
    getModel().getDisksAllocationModel().setIsAliasChangable(true);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(false);
    AsyncDataProvider.getDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final List<StoragePool> dataCenters = new ArrayList<StoragePool>();
            for (StoragePool a : (ArrayList<StoragePool>) returnValue) {
                if (a.getStatus() == StoragePoolStatus.Up) {
                    dataCenters.add(a);
                }
            }
            if (!dataCenters.isEmpty()) {
                postDataCentersLoaded(dataCenters);
            } else {
                getModel().disableEditing();
            }
        }
    }, getModel().getHash()), true, false);
}
#end_block

#method_before
protected void setupWindowModelFrom(VmBase vmBase, Guid dataCenterId) {
    if (vmBase != null) {
        updateQuotaByCluster(vmBase.getQuotaId(), vmBase.getQuotaName());
        // Copy VM parameters from template.
        getModel().getOSType().setSelectedItem(vmBase.getOsId());
        getModel().getTotalCPUCores().setEntity(Integer.toString(vmBase.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(vmBase.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(vmBase.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(vmBase.getSingleQxlPci());
        getModel().getDomain().setSelectedItem(vmBase.getDomain());
        getModel().getMemSize().setEntity(vmBase.getMemSizeMb());
        getModel().setBootSequence(vmBase.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(vmBase.isAutoStartup());
        getModel().getIsDeleteProtected().setEntity(vmBase.isDeleteProtected());
        getModel().getIsRunAndPause().setEntity(false);
        boolean hasCd = !StringHelper.isNullOrEmpty(vmBase.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(vmBase.getIsoPath());
        }
        updateTimeZone(vmBase.getTimeZone());
        updateConsoleDevice(vmBase.getId());
        // Update domain list
        updateDomain();
        List<DataCenterWithCluster> dataCenterWithClusters = (List<DataCenterWithCluster>) getModel().getDataCenterWithClustersList().getItems();
        DataCenterWithCluster selectDataCenterWithCluster = Linq.firstOrDefault(dataCenterWithClusters, new Linq.DataCenterWithClusterPredicate(dataCenterId, vmBase.getVdsGroupId()));
        getModel().getDataCenterWithClustersList().setSelectedItem((selectDataCenterWithCluster != null) ? selectDataCenterWithCluster : Linq.firstOrDefault(dataCenterWithClusters));
        // Update display protocol selected item
        EntityModel displayProtocol = null;
        boolean isFirst = true;
        for (Object item : getModel().getDisplayProtocol().getItems()) {
            EntityModel a = (EntityModel) item;
            if (isFirst) {
                displayProtocol = a;
                isFirst = false;
            }
            DisplayType dt = (DisplayType) a.getEntity();
            if (dt == extractDisplayType(vmBase)) {
                displayProtocol = a;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(vmBase.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(vmBase.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(vmBase.isSmartcardEnabled());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(vmBase.getKernelUrl());
        getModel().getKernel_parameters().setEntity(vmBase.getKernelParams());
        getModel().getInitrd_path().setEntity(vmBase.getInitrdUrl());
        if (!vmBase.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().setIsBlankTemplate(false);
            initDisks();
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().setDisks(null);
        }
        getModel().getProvisioning().setEntity(false);
        initPriority(vmBase.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (vmBase.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(vmBase.getMinAllocatedMem());
        }
        initSoundCard(vmBase.getId());
    }
}
#method_after
protected void setupWindowModelFrom(VmBase vmBase) {
    if (vmBase != null) {
        updateQuotaByCluster(vmBase.getQuotaId(), vmBase.getQuotaName());
        // Copy VM parameters from template.
        getModel().getOSType().setSelectedItem(vmBase.getOsId());
        getModel().getTotalCPUCores().setEntity(Integer.toString(vmBase.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(vmBase.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(vmBase.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(vmBase.getSingleQxlPci());
        getModel().getDomain().setSelectedItem(vmBase.getDomain());
        getModel().getMemSize().setEntity(vmBase.getMemSizeMb());
        getModel().setBootSequence(vmBase.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(vmBase.isAutoStartup());
        getModel().getIsDeleteProtected().setEntity(vmBase.isDeleteProtected());
        getModel().selectSsoMethod(vmBase.getSsoMethod());
        getModel().getIsRunAndPause().setEntity(false);
        boolean hasCd = !StringHelper.isNullOrEmpty(vmBase.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(vmBase.getIsoPath());
        }
        updateTimeZone(vmBase.getTimeZone());
        updateConsoleDevice(vmBase.getId());
        updateVirtioScsiEnabled(vmBase.getId());
        // Update domain list
        updateDomain();
        // Update display protocol selected item
        EntityModel<DisplayType> displayProtocol = null;
        boolean isFirst = true;
        for (EntityModel<DisplayType> item : getModel().getDisplayProtocol().getItems()) {
            if (isFirst) {
                displayProtocol = item;
                isFirst = false;
            }
            DisplayType dt = item.getEntity();
            if (dt == extractDisplayType(vmBase)) {
                displayProtocol = item;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(vmBase.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(vmBase.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(vmBase.isSmartcardEnabled());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(vmBase.getKernelUrl());
        getModel().getKernel_parameters().setEntity(vmBase.getKernelParams());
        getModel().getInitrd_path().setEntity(vmBase.getInitrdUrl());
        if (!vmBase.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().setIsBlankTemplate(false);
            initDisks();
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().setDisks(null);
        }
        getModel().getProvisioning().setEntity(false);
        initPriority(vmBase.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (vmBase.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(vmBase.getMinAllocatedMem());
        }
        initSoundCard(vmBase.getId());
        getModel().getAllowConsoleReconnect().setEntity(vmBase.isAllowConsoleReconnect());
    }
}
#end_block

#method_before
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateMinAllocatedMemory();
    updateNumOfSockets();
    updateOSValues();
    if ((VmTemplate) getModel().getTemplate().getSelectedItem() != null) {
        VmTemplate template = (VmTemplate) getModel().getTemplate().getSelectedItem();
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    }
    updateMemoryBalloon();
    updateCpuSharesAvailability();
}
#method_after
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateMinAllocatedMemory();
    updateNumOfSockets();
    updateOSValues();
    if (getModel().getTemplate().getSelectedItem() != null) {
        VmTemplate template = getModel().getTemplate().getSelectedItem();
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    }
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateVirtioScsiAvailability();
    updateTemplate();
}
#end_block

#method_before
@Override
public void updateMinAllocatedMemory() {
    VDSGroup cluster = (VDSGroup) getModel().getSelectedCluster();
    if (cluster == null) {
        return;
    }
    double overCommitFactor = 100.0 / cluster.getmax_vds_memory_over_commit();
    getModel().getMinAllocatedMemory().setEntity((int) ((Integer) getModel().getMemSize().getEntity() * overCommitFactor));
}
#method_after
@Override
public void updateMinAllocatedMemory() {
    VDSGroup cluster = (VDSGroup) getModel().getSelectedCluster();
    if (cluster == null) {
        return;
    }
    double overCommitFactor = 100.0 / cluster.getmax_vds_memory_over_commit();
    getModel().getMinAllocatedMemory().setEntity((int) (getModel().getMemSize().getEntity() * overCommitFactor));
}
#end_block

#method_before
private void postInitTemplate(ArrayList<VmTemplate> templates) {
    // If there was some template selected before, try select it again.
    VmTemplate oldTemplate = (VmTemplate) getModel().getTemplate().getSelectedItem();
    getModel().getTemplate().setItems(templates);
    getModel().getTemplate().setSelectedItem(Linq.firstOrDefault(templates, oldTemplate != null ? new Linq.TemplatePredicate(oldTemplate.getId()) : new Linq.TemplatePredicate(Guid.Empty)));
}
#method_after
private void postInitTemplate(ArrayList<VmTemplate> templates) {
    // If there was some template selected before, try select it again.
    VmTemplate oldTemplate = getModel().getTemplate().getSelectedItem();
    getModel().getTemplate().setItems(templates);
    getModel().getTemplate().setSelectedItem(Linq.firstOrDefault(templates, oldTemplate != null ? new Linq.TemplatePredicate(oldTemplate.getId()) : new Linq.TemplatePredicate(Guid.Empty)));
}
#end_block

#method_before
@Override
public boolean validate() {
    boolean isNew = getModel().getIsNew();
    int maxAllowedVms = getMaxVmsInPool();
    int assignedVms = getModel().getAssignedVms().asConvertible().integer();
    getModel().getNumOfDesktops().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation(4), new IntegerValidation(isNew ? 1 : 0, isNew ? maxAllowedVms : maxAllowedVms - assignedVms) });
    getModel().getPrestartedVms().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, assignedVms) });
    getModel().getMaxAssignedVmsPerUser().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, Integer.MAX_VALUE) });
    getModel().setIsGeneralTabValid(getModel().getIsGeneralTabValid() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid() && getModel().getMaxAssignedVmsPerUser().getIsValid());
    getModel().setIsPoolTabValid(true);
    return super.validate() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid() && getModel().getMaxAssignedVmsPerUser().getIsValid();
}
#method_after
@Override
public boolean validate() {
    boolean isNew = getModel().getIsNew();
    int maxAllowedVms = getMaxVmsInPool();
    int assignedVms = getModel().getAssignedVms().asConvertible().integer();
    getModel().getNumOfDesktops().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation(4), new IntegerValidation(isNew ? 1 : 0, isNew ? maxAllowedVms : maxAllowedVms - assignedVms) });
    getModel().getPrestartedVms().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, assignedVms) });
    getModel().getMaxAssignedVmsPerUser().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, Short.MAX_VALUE) });
    getModel().setIsGeneralTabValid(getModel().getIsGeneralTabValid() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid() && getModel().getMaxAssignedVmsPerUser().getIsValid());
    getModel().setIsPoolTabValid(true);
    return super.validate() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid() && getModel().getMaxAssignedVmsPerUser().getIsValid();
}
#end_block

#method_before
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.RunQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#method_after
private static void getDefaultConfigurationVersion(Object target) {
    AsyncQuery callback = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            if (returnValue != null) {
                _defaultConfigurationVersion = (String) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                _defaultConfigurationVersion = GENERAL;
            }
            LoginModel loginModel = (LoginModel) model;
            loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty);
        }
    });
    callback.setHandleFailure(true);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new VdcQueryParametersBase(), callback);
}
#end_block

#method_before
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
    initOsArchitecture();
}
#method_after
public static void initCache(LoginModel loginModel) {
    AsyncDataProvider.cacheConfigValues(new AsyncQuery(loginModel, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            getDefaultConfigurationVersion(target);
        }
    }));
    initOsNames();
    initUniqueOsNames();
    initLinuxOsTypes();
    initWindowsOsTypes();
    initDisplayTypes();
    initNicHotplugSupportMap();
    initDiskHotpluggableInterfacesMap();
    initOsArchitecture();
}
#end_block

#method_before
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainListViaPublic(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#method_after
public static void getIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    IdQueryParameters getIsoParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#end_block

#method_before
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#method_after
public static void getExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    IdQueryParameters getExportParams = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#end_block

#method_before
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#method_after
public static void getIrsImageList(AsyncQuery aQuery, Guid storagePoolId, boolean forceRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.ISO);
    parameters.setForceRefresh(forceRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#end_block

#method_before
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#method_after
public static void getFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoImage> repoList = (ArrayList<RepoImage>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoImage repoImage : repoList) {
                    fileNameList.add(repoImage.getRepoImageId());
                }
                Collections.sort(fileNameList, String.CASE_INSENSITIVE_ORDER);
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageFileType.Floppy), aQuery);
}
#end_block

#method_before
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getClusterById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupById, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#method_after
public static void getClusterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Cluster: name=" + name + " sortby name", SearchType.Cluster), aQuery);
}
#end_block

#method_before
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#method_after
public static void getPoolById(AsyncQuery aQuery, Guid poolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmPoolById, new IdQueryParameters(poolId), aQuery);
}
#end_block

#method_before
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmById(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$
    new SearchParameters("DataCenter: sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#method_after
public static void getDataCenterByClusterServiceList(AsyncQuery aQuery, boolean supportsVirtService, boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            // sort data centers
            final ArrayList<StoragePool> storagePoolList = (ArrayList<StoragePool>) source;
            Collections.sort(storagePoolList, new NameableComparator());
            return source;
        }
    };
    final GetStoragePoolsByClusterServiceParameters parameters = new GetStoragePoolsByClusterServiceParameters();
    parameters.setSupportsVirtService(supportsVirtService);
    parameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByClusterService, parameters, aQuery);
}
#end_block

#method_before
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#method_after
public static void getDataCenterListByName(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("DataCenter: name=" + name + " sortby name", SearchType.StoragePool), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getClusterByServiceList(AsyncQuery aQuery, Guid dataCenterId, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDSGroup>();
            }
            final ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
            return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void isSoundcardEnabled(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return ((List<String>) source).size() > 0;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetSoundDevices, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterListByService(AsyncQuery aQuery, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = getClusterByServiceList((ArrayList<VDSGroup>) source, supportsVirtService, supportsGlusterService);
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getClusterList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new NameableComparator());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getTemplateDiskList(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<DiskImage>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesDisks, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#method_after
public static void getTemplateListByStorage(AsyncQuery aQuery, Guid storageId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getStatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new NameableComparator());
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new IdQueryParameters(storageId), aQuery);
}
#end_block

#method_before
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#method_after
public static void getStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new IdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.RunQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#method_after
public static void getDefaultTimeZone(AsyncQuery aQuery, TimeZoneType timeZoneType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            // $NON-NLS-1$
            return "";
        }
    };
    TimeZoneQueryParams params = new TimeZoneQueryParams();
    params.setTimeZoneType(timeZoneType);
    Frontend.getInstance().runQuery(VdcQueryType.GetDefaultTimeZone, params, aQuery);
}
#end_block

#method_before
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getHostById(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVdsByVdsId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#method_after
public static void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#end_block

#method_before
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#method_after
public static void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid vmId, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<DiskImage>();
        }
    };
    IdQueryParameters params = new IdQueryParameters(vmId);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, params, aQuery);
}
#end_block

#method_before
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.RunQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#method_after
public static void getDomainList(AsyncQuery aQuery, boolean filterInternalDomain) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<String>((ArrayList<String>) source) : new ArrayList<String>();
        }
    };
    GetDomainListParameters tempVar = new GetDomainListParameters();
    tempVar.setFilterInternalDomain(filterInternalDomain);
    Frontend.getInstance().runQuery(VdcQueryType.GetDomainList, tempVar, aQuery);
}
#end_block

#method_before
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#method_after
public static void getRoleList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Role>) source : new ArrayList<Role>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllRoles, new MultilevelAdministrationsQueriesParameters(), aQuery);
}
#end_block

#method_before
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainById, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#method_after
public static void getClusterNetworkList(AsyncQuery aQuery, Guid clusterId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<Network>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new IdQueryParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getDataCenterById(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolById, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#method_after
public static void getTemplateById(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplate, new GetVmTemplateParameters(templateId), aQuery);
}
#end_block

#method_before
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getHostListByStatus(AsyncQuery aQuery, VDSStatus status) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: " + (status == null ? "" : ("status=" + status.name())), SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#method_after
public static void getHostsForStorageOperation(AsyncQuery aQuery, Guid storagePoolId, boolean localFsOnly) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return source;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetHostsForStorageOperation, new GetHostsForStorageOperationParameters(storagePoolId, localFsOnly), aQuery);
}
#end_block

#method_before
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.Model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getVolumeList(AsyncQuery aQuery, String clusterName) {
    if ((ApplicationModeHelper.getUiMode().getValue() & ApplicationMode.GlusterOnly.getValue()) == 0) {
        aQuery.asyncCallback.onSuccess(aQuery.Model, new ArrayList<GlusterVolumeEntity>());
        return;
    }
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<GlusterVolumeEntity> list = (ArrayList<GlusterVolumeEntity>) source;
                return list;
            }
            return new ArrayList<GlusterVolumeEntity>();
        }
    };
    SearchParameters searchParameters;
    searchParameters = // $NON-NLS-1$
    clusterName == null ? // $NON-NLS-1$
    new SearchParameters("Volumes:", SearchType.GlusterVolume) : // $NON-NLS-1$
    new SearchParameters("Volumes: cluster.name=" + clusterName, SearchType.GlusterVolume);
    searchParameters.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterVolumeOptionInfoList(AsyncQuery aQuery, Guid clusterId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeOptionsInfo, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#method_after
public static void getHostFingerprint(AsyncQuery aQuery, String hostAddress) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(hostAddress), aQuery);
}
#end_block

#method_before
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getHostPublicKey(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetServerSSHPublicKey, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.RunQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#method_after
public static void getGlusterHosts(AsyncQuery aQuery, String hostAddress, String rootPassword, String fingerprint) {
    GlusterServersQueryParameters parameters = new GlusterServersQueryParameters(hostAddress, rootPassword);
    parameters.setFingerprint(fingerprint);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServersForImport, parameters, aQuery);
}
#end_block

#method_before
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void getGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#method_after
public static void getGlusterHostsNewlyAdded(AsyncQuery aQuery, Guid clusterId, boolean isFingerprintRequired) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery);
}
#end_block

#method_before
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#method_after
public static void getGlusterHooks(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterHookEntity>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHooks, new GlusterParameters(clusterId), aQuery);
}
#end_block

#method_before
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#method_after
public static void getGlusterHook(AsyncQuery aQuery, Guid hookId, boolean includeServerHooks) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new GlusterHookQueryParameters(hookId, includeServerHooks), aQuery);
}
#end_block

#method_before
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.RunQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#method_after
public static void getGlusterHookContent(AsyncQuery aQuery, Guid hookId, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? source : "";
        }
    };
    GlusterHookContentQueryParameters parameters = new GlusterHookContentQueryParameters(hookId);
    parameters.setGlusterServerId(serverId);
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookContent, parameters, aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServices(AsyncQuery aQuery, Guid serverId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByServerId, new GlusterServiceQueryParameters(serverId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getClusterGlusterSwiftService(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                List<GlusterClusterService> serviceList = (List<GlusterClusterService>) source;
                if (!serviceList.isEmpty()) {
                    return serviceList.get(0);
                }
                return null;
            } else {
                return source;
            }
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterClusterServiceByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#method_after
public static void getGlusterSwiftServerServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new ArrayList<GlusterServerService>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetGlusterServerServicesByClusterId, new GlusterServiceQueryParameters(clusterId, ServiceType.GLUSTER_SWIFT), aQuery);
}
#end_block

#method_before
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.RunPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#method_after
public static void getUserMessageOfTheDayViaPublic(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            // $NON-NLS-1$
            return source != null ? (String) source : "";
        }
    };
    Frontend.getInstance().runPublicQuery(VdcQueryType.GetConfigurationValue, new GetConfigurationValueParameters(ConfigurationValues.UserMessageOfTheDay, getDefaultConfigurationVersion()), aQuery);
}
#end_block

#method_before
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getCustomPropertiesList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            Map<Version, String> map = source != null ? (HashMap<Version, String>) source : new HashMap<Version, String>();
            Map<Version, ArrayList<String>> retMap = new HashMap<Version, ArrayList<String>>();
            for (Map.Entry<Version, String> keyValuePair : map.entrySet()) {
                // $NON-NLS-1$
                String[] split = keyValuePair.getValue().split("[;]", -1);
                if (split.length == 1 && (split[0] == null || split[0].isEmpty())) {
                    retMap.put(keyValuePair.getKey(), null);
                } else {
                    retMap.put(keyValuePair.getKey(), new ArrayList<String>());
                    for (String s : split) {
                        retMap.get(keyValuePair.getKey()).add(s);
                    }
                }
            }
            return retMap;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmCustomProperties, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<permissions>) source : new ArrayList<permissions>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#method_after
public static void getPermissionsByAdElementId(AsyncQuery aQuery, Guid userId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Permissions>) source : new ArrayList<Permissions>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new IdQueryParameters(userId), aQuery);
}
#end_block

#method_before
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#method_after
public static void getRoleActionGroupsByRoleId(AsyncQuery aQuery, Guid roleId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ActionGroup>) source : new ArrayList<ActionGroup>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRoleActionGroupsByRoleId, new IdQueryParameters(roleId), aQuery);
}
#end_block

#method_before
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isTemplateNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmTemlateWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isVmNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? !((Boolean) source).booleanValue() : false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmWithSameNameExist, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#method_after
public static void getDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StoragePool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.getInstance().runQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#end_block

#method_before
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void getVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.RunQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#method_after
public static void getAllVmTemplates(AsyncQuery aQuery, final boolean refresh) {
    aQuery.converterCallback = new TemplateConverter();
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(refresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmTemplates, params, aQuery);
}
#end_block

#method_before
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.RunQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#method_after
public static void getStorageConnectionById(AsyncQuery aQuery, String id, boolean isRefresh) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageServerConnections) source : null;
        }
    };
    StorageServerConnectionQueryParametersBase params = new StorageServerConnectionQueryParametersBase(id);
    params.setRefresh(isRefresh);
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageServerConnectionById, params, aQuery);
}
#end_block

#method_before
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#method_after
public static void getDataCentersByStorageDomain(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StoragePool>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), aQuery);
}
#end_block

#method_before
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#method_after
public static void getDataCenterVersions(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Version>();
            } else {
                ArrayList<Version> list = (ArrayList<Version>) source;
                Collections.sort(list);
                return list;
            }
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(dataCenterId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAvailableClusterVersionsByStoragePool, tempVar, aQuery);
}
#end_block

#method_before
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#method_after
public static void getCPUList(AsyncQuery aQuery, Version version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<ServerCpu>) source : new ArrayList<ServerCpu>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(version), aQuery);
}
#end_block

#method_before
public static void getPmOptions(AsyncQuery aQuery, String pmType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.Data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.RunQuery(VdcQueryType.GetAgentFenceOptions, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getPmOptions(AsyncQuery aQuery, String pmType, String version) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            String pmtype = (String) _asyncQuery.Data[0];
            HashMap<String, ArrayList<String>> cachedPmMap = new HashMap<String, ArrayList<String>>();
            HashMap<String, HashMap<String, Object>> dict = (HashMap<String, HashMap<String, Object>>) source;
            for (Map.Entry<String, HashMap<String, Object>> pair : dict.entrySet()) {
                ArrayList<String> list = new ArrayList<String>();
                for (Map.Entry<String, Object> p : pair.getValue().entrySet()) {
                    list.add(p.getKey());
                }
                cachedPmMap.put(pair.getKey(), list);
            }
            return cachedPmMap.get(pmtype);
        }
    };
    aQuery.setData(new Object[] { pmType });
    Frontend.getInstance().runQuery(VdcQueryType.GetAgentFenceOptions, new GetAgentFenceOptionsQueryParameters(version), aQuery);
}
#end_block

#method_before
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#method_after
public static void getNetworkList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Network>) source : new ArrayList<Network>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworks, new IdQueryParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.RunQuery(VdcQueryType.Search, sp, aQuery);
}
#method_after
public static void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#end_block

#method_before
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#method_after
public static void getStorageDomainsByConnection(AsyncQuery aQuery, Guid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId);
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#end_block

#method_before
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#method_after
public static void getExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, StorageType storageType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, path), aQuery);
}
#end_block

#method_before
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#method_after
public static void isStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#end_block

#method_before
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                tags tag = (tags) source;
                tags root = new tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new tags();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                Tags tag = (Tags) source;
                Tags root = new Tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new Tags();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<tags> ret = new ArrayList<tags>();
                for (tags tags : (ArrayList<tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new tags();
        }
    };
}
#method_after
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<Tags> ret = new ArrayList<Tags>();
                for (Tags tags : (ArrayList<Tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new Tags();
        }
    };
}
#end_block

#method_before
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToVm(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVmId, new GetTagsByVmIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUser(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserId, new GetTagsByUserIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToUserGroup(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByUserGroupId, new GetTagsByUserGroupIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.RunQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#method_after
public static void getAttachedTagsToHost(AsyncQuery aQuery, Guid id) {
    setAttachedTagsConverter(aQuery);
    Frontend.getInstance().runQuery(VdcQueryType.GetTagsByVdsId, new GetTagsByVdsIdParameters(id.toString()), aQuery);
}
#end_block

#method_before
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#method_after
public static void getoVirtISOsList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<RpmVersion>((ArrayList<RpmVersion>) source) : new ArrayList<RpmVersion>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetoVirtISOs, new VdsIdParametersBase(id), aQuery);
}
#end_block

#method_before
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.RunQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#method_after
public static void getLunsByVgId(AsyncQuery aQuery, String vgId, Guid vdsId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<LUNs>) source : new ArrayList<LUNs>();
        }
    };
    GetLunsByVgIdParameters params = new GetLunsByVgIdParameters(vgId, vdsId);
    Frontend.getInstance().runQuery(VdcQueryType.GetLunsByVgId, params, aQuery);
}
#end_block

#method_before
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#method_after
public static void getAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    Frontend.getInstance().runQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#end_block

#method_before
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void getUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.RunQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#method_after
public static void getClusterListByStorageDomain(AsyncQuery _AsyncQuery, Guid storageDomainId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), new AsyncQuery(_AsyncQuery, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<StoragePool> pools = (ArrayList<StoragePool>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (pools != null && pools.size() > 0) {
                StoragePool pool = pools.get(0);
                getClusterList((AsyncQuery) model, pool.getId());
            }
        }
    }));
}
#end_block

#method_before
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmNicList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? new ArrayList<VmNetworkInterface>((ArrayList<VmNetworkInterface>) source) : new ArrayList<VmNetworkInterface>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmSnapshotList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Snapshot>) source : new ArrayList<Snapshot>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#method_after
public static void getVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(id), aQuery);
}
#end_block

#method_before
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#method_after
public static void getVmList(AsyncQuery aQuery, String poolName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    // $NON-NLS-1$
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: pool=" + poolName, SearchType.VM), aQuery);
}
#end_block

#method_before
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void getVmListByClusterName(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = Linq.<VM>cast((ArrayList<IVdcQueryable>) source);
            return vms;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("Vms: cluster=" + clusterName, SearchType.VM), // $NON-NLS-1$
    aQuery);
}
#end_block

#method_before
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void getDiskList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<DiskImage>) source : new ArrayList<DiskImage>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Disks:", SearchType.Disk);
    searchParams.setMaxCount(9999);
    Frontend.getInstance().runQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getNextAvailableDiskAliasNameByVMId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetNextAvailableDiskAliasNameByVMId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#method_after
public static void isPoolNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return !(Boolean) source;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsVmPoolWithSameNameExists, new NameQueryParameters(name), aQuery);
}
#end_block

#method_before
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#method_after
public static void getVmConfigurationBySnapshot(AsyncQuery aQuery, Guid snapshotSourceId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (VM) source : null;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmConfigurationBySnapshot, new IdQueryParameters(snapshotSourceId), aQuery);
}
#end_block

#method_before
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.RunQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#method_after
public static void getAllAttachableDisks(AsyncQuery aQuery, Guid storagePoolId, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<Disk>) source : new ArrayList<Disk>();
        }
    };
    GetAllAttachableDisks params = new GetAllAttachableDisks(storagePoolId);
    params.setVmId(vmId);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery);
}
#end_block

#method_before
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#method_after
public static void getPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.getInstance().runQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#end_block

#method_before
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.RunQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#method_after
public static void isCommandCompatible(AsyncQuery aQuery, final VdcActionType vdcActionType, final Version cluster, final Version dc) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            cachedCommandsCompatibilityVersions = (HashMap<VdcActionType, CommandVersionsInfo>) source;
            return isCommandCompatible(vdcActionType, cluster, dc);
        }
    };
    if (cachedCommandsCompatibilityVersions != null) {
        aQuery.asyncCallback.onSuccess(aQuery.getModel(), isCommandCompatible(vdcActionType, cluster, dc));
    } else {
        Frontend.getInstance().runQuery(VdcQueryType.GetCommandsCompatibilityVersions, new VdcQueryParametersBase(), aQuery);
    }
}
#end_block

#method_before
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#method_after
private static void cacheConfigValues(AsyncQuery aQuery) {
    getDefaultConfigurationVersion();
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery _asyncQuery) {
            if (returnValue != null) {
                cachedConfigValuesPreConvert.putAll((HashMap<KeyValuePairCompat<ConfigurationValues, String>, Object>) returnValue);
            }
            return cachedConfigValuesPreConvert;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetConfigurationValues, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void getVlanParentInterface(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVlanParent, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void interfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
public static void GetExternalProviderHostList(AsyncQuery aQuery, Guid providerId, boolean filterOutExistingHosts, String searchFilter) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDS>();
            }
            return source;
        }
    };
    GetHostListFromExternalProviderParameters params = new GetHostListFromExternalProviderParameters();
    params.setFilterOutExistingHosts(filterOutExistingHosts);
    params.setProviderId(providerId);
    params.setSearchFilter(searchFilter);
    Frontend.RunQuery(VdcQueryType.GetHostListFromExternalProvider, params, aQuery);
}
#method_after
public static void GetExternalProviderHostList(AsyncQuery aQuery, Guid providerId, boolean filterOutExistingHosts, String searchFilter) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VDS>();
            }
            return source;
        }
    };
    GetHostListFromExternalProviderParameters params = new GetHostListFromExternalProviderParameters();
    params.setFilterOutExistingHosts(filterOutExistingHosts);
    params.setProviderId(providerId);
    params.setSearchFilter(searchFilter);
    Frontend.getInstance().runQuery(VdcQueryType.GetHostListFromExternalProvider, params, aQuery);
}
#end_block

#method_before
public static void GetAllProvidersByType(AsyncQuery aQuery, ProviderType providerType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Provider>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllProviders, new GetAllProvidersParameters(providerType), aQuery);
}
#method_after
public static void GetAllProvidersByType(AsyncQuery aQuery, ProviderType providerType) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<Provider>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllProviders, new GetAllProvidersParameters(providerType), aQuery);
}
#end_block

#method_before
public static void GetProviderCertificateChain(AsyncQuery aQuery, Provider provider) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetProviderCertificateChain, new ProviderQueryParameters(provider), aQuery);
}
#method_after
public static void GetProviderCertificateChain(AsyncQuery aQuery, Provider provider) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetProviderCertificateChain, new ProviderQueryParameters(provider), aQuery);
}
#end_block

#method_before
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.RunMultipleQueries(queryTypeList, parametersList, callback);
}
#method_after
private static void getAllChildVlanInterfaces(Guid vdsID, List<VdsNetworkInterface> ifaces, IFrontendMultipleQueryAsyncCallback callback) {
    ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    for (final VdsNetworkInterface iface : ifaces) {
        queryTypeList.add(VdcQueryType.GetAllChildVlanInterfaces);
        parametersList.add(new InterfaceAndIdQueryParameters(vdsID, iface));
    }
    Frontend.getInstance().runMultipleQueries(queryTypeList, parametersList, callback);
}
#end_block

#method_before
public static void fillTagsRecursive(tags tagToFill, List<tags> children) {
    ArrayList<tags> list = new ArrayList<tags>();
    for (tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#method_after
public static void fillTagsRecursive(Tags tagToFill, List<Tags> children) {
    ArrayList<Tags> list = new ArrayList<Tags>();
    for (Tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#end_block

#method_before
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.GetNotificationEvents();
}
#method_after
public static Map<EventNotificationEntity, HashSet<AuditLogType>> getAvailableNotificationEvents() {
    return VdcEventNotificationUtils.getNotificationEvents();
}
#end_block

#method_before
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#method_after
public static void getNicTypeList(final int osId, Version version, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> nics = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<VmInterfaceType> interfaceTypes = new ArrayList<VmInterfaceType>();
            for (String nic : nics) {
                try {
                    interfaceTypes.add(VmInterfaceType.valueOf(nic));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetNetworkDevices, osId, version), asyncQuery);
}
#end_block

#method_before
public static ArrayList<DiskInterface> getDiskInterfaceList(Version clusterVersion) {
    ArrayList<DiskInterface> diskInterfaces = new ArrayList<DiskInterface>(Arrays.asList(new DiskInterface[] { DiskInterface.IDE, DiskInterface.VirtIO }));
    boolean isVirtIOScsiEnabled = clusterVersion != null ? (Boolean) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VirtIoScsiEnabled, clusterVersion.getValue()) : true;
    if (isVirtIOScsiEnabled) {
        diskInterfaces.add(DiskInterface.VirtIO_SCSI);
    }
    return diskInterfaces;
}
#method_after
public static void getDiskInterfaceList(int osId, Version clusterVersion, AsyncQuery asyncQuery) {
    final INewAsyncCallback chainedCallback = asyncQuery.asyncCallback;
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<String> interfaces = (ArrayList<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<DiskInterface> interfaceTypes = new ArrayList<DiskInterface>();
            for (String diskIfs : interfaces) {
                try {
                    interfaceTypes.add(DiskInterface.valueOf(diskIfs));
                } catch (IllegalArgumentException e) {
                // ignore if we can't find the enum value.
                }
            }
            chainedCallback.onSuccess(model, interfaceTypes);
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetDiskInterfaces, osId, clusterVersion), asyncQuery);
}
#end_block

#method_before
public static String getNewNicName(ArrayList<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#method_after
public static String getNewNicName(List<VmNetworkInterface> existingInterfaces) {
    int maxIfaceNumber = 0;
    if (existingInterfaces != null) {
        for (VmNetworkInterface iface : existingInterfaces) {
            // name of Interface is "eth<n>" (<n>: integer).
            if (iface.getName().length() > 3) {
                final Integer ifaceNumber = IntegerCompat.tryParse(iface.getName().substring(3));
                if (ifaceNumber != null && ifaceNumber > maxIfaceNumber) {
                    maxIfaceNumber = ifaceNumber;
                }
            }
        }
    }
    // $NON-NLS-1$
    return "nic" + (maxIfaceNumber + 1);
}
#end_block

#method_before
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#method_after
public static void initWindowsOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            windowsOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetWindowsOss), callback);
}
#end_block

#method_before
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#method_after
public static void initLinuxOsTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            linuxOsIds = (ArrayList<Integer>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetLinuxOss), callback);
}
#end_block

#method_before
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#method_after
public static void initUniqueOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            uniqueOsNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            // Initialize specific UI dependencies for search
            SimpleDependecyInjector.getInstance().bind(new OsValueAutoCompleter(uniqueOsNames));
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetUniqueOsNames), callback);
}
#end_block

#method_before
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#method_after
public static void initOsNames() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            osNames = (HashMap<Integer, String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            initOsIds();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetOsNames), callback);
}
#end_block

#method_before
public static void hasSpiceSupport(int osId, Version version, AsyncQuery callback) {
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.HasSpiceSupport, osId, version), callback);
}
#method_after
public static boolean hasSpiceSupport(int osId, Version version) {
    return getDisplayTypes(osId, version).contains(DisplayType.qxl);
}
#end_block

#method_before
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.RunQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#method_after
public static void getOsMaxRam(int osId, Version version, AsyncQuery asyncQuery) {
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetMaxOsRam, osId, version), asyncQuery);
}
#end_block

#method_before
public static ArchitectureType getArchitectureTypeByOsId(int osId) {
    return osArchitectures.get(osId);
}
#method_after
public static ArchitectureType getArchitectureTypeByOsId(Integer osId) {
    if ((osId != null) && (osArchitectures != null) && (!osArchitectures.isEmpty())) {
        return osArchitectures.get(osId);
    } else {
        return ArchitectureType.undefined;
    }
}
#end_block

#method_before
public static ArrayList<Map.Entry<String, EntityModel>> getBondingOptionList(RefObject<Map.Entry<String, EntityModel>> defaultItem) {
    ArrayList<Map.Entry<String, EntityModel>> list = new ArrayList<Map.Entry<String, EntityModel>>();
    EntityModel entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 1) Active-Backup");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=1 miimon=100", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 2) Load balance (balance-xor)");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=2", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 4) Dynamic link aggregation (802.3ad)");
    // $NON-NLS-1$
    defaultItem.argvalue = new KeyValuePairCompat<String, EntityModel>("mode=4", entityModel);
    list.add(defaultItem.argvalue);
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 5) Adaptive transmit load balancing (balance-tlb)");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=5", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("custom", entityModel));
    return list;
}
#method_after
public static ArrayList<Map.Entry<String, EntityModel>> getBondingOptionList(RefObject<Map.Entry<String, EntityModel>> defaultItem) {
    ArrayList<Map.Entry<String, EntityModel>> list = new ArrayList<Map.Entry<String, EntityModel>>();
    EntityModel entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 1) Active-Backup");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=1 miimon=100", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 2) Load balance (balance-xor)");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=2 miimon=100", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 4) Dynamic link aggregation (802.3ad)");
    // $NON-NLS-1$
    defaultItem.argvalue = new KeyValuePairCompat<String, EntityModel>("mode=4 miimon=100", entityModel);
    list.add(defaultItem.argvalue);
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("(Mode 5) Adaptive transmit load balancing (balance-tlb)");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("mode=5 miimon=100", entityModel));
    entityModel = new EntityModel();
    // $NON-NLS-1$
    entityModel.setEntity("");
    // $NON-NLS-1$
    list.add(new KeyValuePairCompat<String, EntityModel>("custom", entityModel));
    return list;
}
#end_block

#method_before
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#method_after
public static void getVmGuestAgentInterfacesByVmId(AsyncQuery aQuery, Guid vmId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VmGuestAgentInterface>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new IdQueryParameters(vmId), aQuery);
}
#end_block

#method_before
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getAllVnicProfiles(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVnicProfiles, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#method_after
public static void getVnicProfilesByNetworkId(AsyncQuery aQuery, Guid networkId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VnicProfileView>();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByNetworkId, new IdQueryParameters(networkId), aQuery);
}
#end_block

#method_before
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.RunQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#method_after
public static void getVnicProfilesByDcId(AsyncQuery aQuery, Guid dcId) {
    // do not replace a converter = just add if none provided
    if (aQuery.converterCallback == null) {
        aQuery.converterCallback = new IAsyncConverter() {

            @Override
            public Object Convert(Object source, AsyncQuery _asyncQuery) {
                if (source == null) {
                    return new ArrayList<VnicProfileView>();
                }
                return source;
            }
        };
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetVnicProfilesByDataCenterId, new IdQueryParameters(dcId), aQuery);
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getTemplate().setIsChangable(false);
    getModel().getVmType().setIsChangable(true);
    getModel().getCopyPermissions().setIsAvailable(true);
    DisksAllocationModel disksAllocationModel = getModel().getDisksAllocationModel();
    disksAllocationModel.setIsAliasChangable(true);
    AsyncDataProvider.getDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) target;
            final StoragePool dataCenter = (StoragePool) returnValue;
            if (dataCenter == null) {
                disableNewTemplateModel(ConstantsManager.getInstance().getConstants().dataCenterIsNotAccessibleMsg());
            } else {
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        List<VDSGroup> clusters = (List<VDSGroup>) returnValue;
                        model.setDataCentersAndClusters(model, Arrays.asList(dataCenter), clusters, vm.getVdsGroupId());
                        initTemplate();
                    }
                }, getModel().getHash()), true, false);
                AsyncDataProvider.isSoundcardEnabled(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object model, Object returnValue) {
                        getModel().getIsSoundcardEnabled().setEntity(returnValue);
                    }
                }, getModel().getHash()), vm.getId());
            }
        }
    }, getModel().getHash()), vm.getStoragePoolId());
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getTemplate().setIsChangable(false);
    getModel().getVmType().setIsChangable(true);
    getModel().getCopyPermissions().setIsAvailable(true);
    DisksAllocationModel disksAllocationModel = getModel().getDisksAllocationModel();
    disksAllocationModel.setIsAliasChangable(true);
    AsyncDataProvider.getDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final StoragePool dataCenter = (StoragePool) returnValue;
            if (dataCenter == null) {
                disableNewTemplateModel(ConstantsManager.getInstance().getConstants().dataCenterIsNotAccessibleMsg());
            } else {
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        List<VDSGroup> clusters = (List<VDSGroup>) returnValue;
                        model.setDataCentersAndClusters(model, Arrays.asList(dataCenter), clusters, vm.getVdsGroupId());
                        initTemplate();
                    }
                }, getModel().getHash()), true, false);
                AsyncDataProvider.isSoundcardEnabled(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object model, Object returnValue) {
                        getModel().getIsSoundcardEnabled().setEntity((Boolean) returnValue);
                    }
                }, getModel().getHash()), vm.getId());
            }
        }
    }, getModel().getHash()), vm.getStoragePoolId());
}
#end_block

#method_before
@Override
public void dataCenterWithClusterSelectedItemChanged() {
    super.dataCenterWithClusterSelectedItemChanged();
    // If a VM has at least one disk, present its storage domain.
    AsyncDataProvider.getVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) target;
            ArrayList<Disk> imageDisks = new ArrayList<Disk>();
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) returnValue;
            for (Disk disk : vmDisks) {
                if (disk.getDiskStorageType() == DiskStorageType.IMAGE && !disk.isShareable()) {
                    imageDisks.add(disk);
                }
            }
            behavior.initStorageDomains();
            initDisks(imageDisks);
            VmModelHelper.sendWarningForNonExportableDisks(getModel(), vmDisks, VmModelHelper.WarningType.VM_TEMPLATE);
        }
    }, getModel().getHash()), vm.getId(), true);
}
#method_after
@Override
public void dataCenterWithClusterSelectedItemChanged() {
    super.dataCenterWithClusterSelectedItemChanged();
    // If a VM has at least one disk, present its storage domain.
    AsyncDataProvider.getVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) target;
            ArrayList<Disk> imageDisks = new ArrayList<Disk>();
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) returnValue;
            for (Disk disk : vmDisks) {
                if (disk.getDiskStorageType() == DiskStorageType.IMAGE && !disk.isShareable() && !disk.isDiskSnapshot()) {
                    imageDisks.add(disk);
                }
            }
            behavior.initStorageDomains();
            initDisks(imageDisks);
            VmModelHelper.sendWarningForNonExportableDisks(getModel(), vmDisks, VmModelHelper.WarningType.VM_TEMPLATE);
        }
    }, getModel().getHash()), vm.getId(), true);
}
#end_block

#method_before
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateQuotaByCluster(null, null);
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateOSValues();
}
#method_after
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateQuotaByCluster(null, null);
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateVirtioScsiAvailability();
    updateOSValues();
}
#end_block

#method_before
private void initTemplate() {
    // Update model state according to VM properties.
    getModel().getMemSize().setEntity(this.vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(this.vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(this.vm.getVmOsId());
    getModel().getDomain().setSelectedItem(this.vm.getVmDomain());
    getModel().getNumOfMonitors().setSelectedItem(this.vm.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(this.vm.getAllowConsoleReconnect());
    getModel().setBootSequence(this.vm.getDefaultBootSequence());
    getModel().getTotalCPUCores().setEntity(Integer.toString(this.vm.getNumOfCpus()));
    getModel().getNumOfSockets().setSelectedItem(this.vm.getNumOfSockets());
    getModel().getIsStateless().setEntity(this.vm.isStateless());
    getModel().getIsRunAndPause().setEntity(this.vm.isRunAndPause());
    getModel().getIsDeleteProtected().setEntity(this.vm.isDeleteProtected());
    updateSelectedCdImage(this.vm.getStaticData());
    updateTimeZone(this.vm.getTimeZone());
    updateConsoleDevice(this.vm.getId());
    // Update domain list
    updateDomain();
    getModel().getStorageDomain().setIsChangable(true);
    getModel().getProvisioning().setIsAvailable(false);
    // Select display protocol.
    for (Object item : getModel().getDisplayProtocol().getItems()) {
        EntityModel model = (EntityModel) item;
        DisplayType displayType = (DisplayType) model.getEntity();
        if (displayType == this.vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(item);
            break;
        }
    }
    getModel().getUsbPolicy().setSelectedItem(this.vm.getUsbPolicy());
    getModel().getIsSmartcardEnabled().setEntity(this.vm.isSmartcardEnabled());
    getModel().getVncKeyboardLayout().setSelectedItem(this.vm.getVncKeyboardLayout());
    initPriority(this.vm.getPriority());
}
#method_after
private void initTemplate() {
    // Update model state according to VM properties.
    getModel().getMemSize().setEntity(this.vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(this.vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(this.vm.getVmOsId());
    getModel().getDomain().setSelectedItem(this.vm.getVmDomain());
    getModel().getNumOfMonitors().setSelectedItem(this.vm.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(this.vm.getAllowConsoleReconnect());
    getModel().setBootSequence(this.vm.getDefaultBootSequence());
    getModel().getTotalCPUCores().setEntity(Integer.toString(this.vm.getNumOfCpus()));
    getModel().getNumOfSockets().setSelectedItem(this.vm.getNumOfSockets());
    getModel().getIsStateless().setEntity(this.vm.isStateless());
    getModel().getIsRunAndPause().setEntity(this.vm.isRunAndPause());
    getModel().getIsDeleteProtected().setEntity(this.vm.isDeleteProtected());
    getModel().selectSsoMethod(this.vm.getSsoMethod());
    updateSelectedCdImage(this.vm.getStaticData());
    updateTimeZone(this.vm.getTimeZone());
    updateConsoleDevice(this.vm.getId());
    // Update domain list
    updateDomain();
    getModel().getStorageDomain().setIsChangable(true);
    getModel().getProvisioning().setIsAvailable(false);
    // Select display protocol.
    for (EntityModel<DisplayType> model : getModel().getDisplayProtocol().getItems()) {
        DisplayType displayType = model.getEntity();
        if (displayType == this.vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(model);
            break;
        }
    }
    getModel().getUsbPolicy().setSelectedItem(this.vm.getUsbPolicy());
    getModel().getIsSmartcardEnabled().setEntity(this.vm.isSmartcardEnabled());
    getModel().getVncKeyboardLayout().setSelectedItem(this.vm.getVncKeyboardLayout());
    initPriority(this.vm.getPriority());
}
#end_block

#method_before
public void dataCenterWithClusterSelectedItemChanged() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getModel().getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return;
    }
    StoragePool dataCenter = dataCenterWithCluster.getDataCenter();
    if (dataCenter == null) {
        return;
    }
    getModel().setIsHostAvailable(dataCenter.getStorageType() != StorageType.LOCALFS);
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
    postDataCenterWithClusterSelectedItemChanged();
}
#method_after
public void dataCenterWithClusterSelectedItemChanged() {
    DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return;
    }
    StoragePool dataCenter = dataCenterWithCluster.getDataCenter();
    if (dataCenter == null) {
        return;
    }
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
    postDataCenterWithClusterSelectedItemChanged();
}
#end_block

#method_before
protected void setImagesToModel(UnitVmModel model, List<String> images) {
    String oldCdImage = (String) model.getCdImage().getSelectedItem();
    model.getCdImage().setItems(images);
    model.getCdImage().setSelectedItem((oldCdImage != null) ? oldCdImage : Linq.firstOrDefault(images));
}
#method_after
protected void setImagesToModel(UnitVmModel model, List<String> images) {
    String oldCdImage = model.getCdImage().getSelectedItem();
    model.getCdImage().setItems(images);
    model.getCdImage().setSelectedItem((oldCdImage != null) ? oldCdImage : Linq.firstOrDefault(images));
}
#end_block

#method_before
protected void updateDefaultTimeZone() {
    TimeZoneModel.withLoadedDefaultTimeZoneKey(getTimeZoneType(), new Runnable() {

        @Override
        public void run() {
            doUpdateTimeZone(null);
        }
    });
}
#method_after
protected void updateDefaultTimeZone() {
    doUpdateTimeZone(null);
}
#end_block

#method_before
private void doUpdateTimeZone(final String selectedTimeZone) {
    TimeZoneModel.withLoadedTimeZones(getTimeZoneType(), new Runnable() {

        @Override
        public void run() {
            final Iterable<TimeZoneModel> timeZones = TimeZoneModel.getTimeZones(getTimeZoneType());
            getModel().getTimeZone().setItems(timeZones);
            getModel().getTimeZone().setSelectedItem(Linq.firstOrDefault(timeZones, new Linq.TimeZonePredicate(selectedTimeZone)));
            getModel().getTimeZone().setChangeProhibitionReason(constants.timeZoneNotChangeableForLinuxVms());
            getModel().getTimeZone().setIsChangable(!getModel().getIsLinuxOS());
        }
    });
}
#method_after
private void doUpdateTimeZone(final String selectedTimeZone) {
    final Iterable<TimeZoneModel> timeZones = TimeZoneModel.getTimeZones(getTimeZoneType());
    getModel().getTimeZone().setItems(timeZones);
    getModel().getTimeZone().setSelectedItem(Linq.firstOrDefault(timeZones, new Linq.TimeZonePredicate(selectedTimeZone)));
    getModel().getTimeZone().setChangeProhibitionReason(constants.timeZoneNotChangeableForLinuxVms());
    getModel().getTimeZone().setIsChangable(!getModel().getIsLinuxOS());
}
#end_block

#method_before
public TimeZoneType getTimeZoneType() {
    // can be null as a consequence of setItems on ListModel
    Integer vmOsType = (Integer) getModel().getOSType().getSelectedItem();
    return AsyncDataProvider.isWindowsOsType(vmOsType) ? TimeZoneType.WINDOWS_TIMEZONE : TimeZoneType.GENERAL_TIMEZONE;
}
#method_after
public TimeZoneType getTimeZoneType() {
    // can be null as a consequence of setItems on ListModel
    Integer vmOsType = getModel().getOSType().getSelectedItem();
    return AsyncDataProvider.isWindowsOsType(vmOsType) ? TimeZoneType.WINDOWS_TIMEZONE : TimeZoneType.GENERAL_TIMEZONE;
}
#end_block

#method_before
protected void updateDomain() {
    AsyncDataProvider.getDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmModelBehaviorBase behavior = (VmModelBehaviorBase) target;
            List<String> domains = (List<String>) returnValue;
            String oldDomain = (String) behavior.getModel().getDomain().getSelectedItem();
            if (// $NON-NLS-1$
            oldDomain != null && !oldDomain.equals("") && !domains.contains(oldDomain)) {
                domains.add(0, oldDomain);
            }
            behavior.getModel().getDomain().setItems(domains);
            behavior.getModel().getDomain().setSelectedItem((oldDomain != null) ? oldDomain : Linq.firstOrDefault(domains));
        }
    }, getModel().getHash()), true);
}
#method_after
protected void updateDomain() {
    AsyncDataProvider.getDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmModelBehaviorBase behavior = (VmModelBehaviorBase) target;
            List<String> domains = (List<String>) returnValue;
            String oldDomain = behavior.getModel().getDomain().getSelectedItem();
            if (// $NON-NLS-1$
            oldDomain != null && !oldDomain.equals("") && !domains.contains(oldDomain)) {
                domains.add(0, oldDomain);
            }
            behavior.getModel().getDomain().setItems(domains);
            behavior.getModel().getDomain().setSelectedItem((oldDomain != null) ? oldDomain : Linq.firstOrDefault(domains));
        }
    }, getModel().getHash()), true);
}
#end_block

#method_before
private void postUpdatePriority() {
    ArrayList<EntityModel> items = new ArrayList<EntityModel>();
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().lowTitle());
    tempVar.setEntity(1);
    items.add(tempVar);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().mediumTitle());
    tempVar2.setEntity(cachedMaxPriority / 2);
    items.add(tempVar2);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().highTitle());
    tempVar3.setEntity(cachedMaxPriority);
    items.add(tempVar3);
    // If there was some priority selected before, try select it again.
    EntityModel oldPriority = (EntityModel) getModel().getPriority().getSelectedItem();
    getModel().getPriority().setItems(items);
    if (oldPriority != null) {
        for (EntityModel item : items) {
            Integer val1 = (Integer) item.getEntity();
            Integer val2 = (Integer) oldPriority.getEntity();
            if (val1 != null && val1.equals(val2)) {
                getModel().getPriority().setSelectedItem(item);
                break;
            }
        }
    } else {
        getModel().getPriority().setSelectedItem(Linq.firstOrDefault(items));
    }
}
#method_after
private void postUpdatePriority() {
    List<EntityModel<Integer>> items = new ArrayList<EntityModel<Integer>>();
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().lowTitle());
    tempVar.setEntity(1);
    items.add(tempVar);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().mediumTitle());
    tempVar2.setEntity(cachedMaxPriority / 2);
    items.add(tempVar2);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().highTitle());
    tempVar3.setEntity(cachedMaxPriority);
    items.add(tempVar3);
    // If there was some priority selected before, try select it again.
    EntityModel<Integer> oldPriority = getModel().getPriority().getSelectedItem();
    getModel().getPriority().setItems(items);
    if (oldPriority != null) {
        for (EntityModel<Integer> item : items) {
            Integer val1 = item.getEntity();
            Integer val2 = oldPriority.getEntity();
            if (val1 != null && val1.equals(val2)) {
                getModel().getPriority().setSelectedItem(item);
                break;
            }
        }
    } else {
        getModel().getPriority().setSelectedItem(Linq.firstOrDefault(items));
    }
}
#end_block

#method_before
protected void updateDefaultHost() {
    VDSGroup cluster = getModel().getSelectedCluster();
    if (cluster == null) {
        getModel().getDefaultHost().setItems(new ArrayList<VDS>());
        getModel().getDefaultHost().setSelectedItem(null);
        return;
    }
    AsyncQuery query = new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            ArrayList<VDS> hosts = null;
            if (returnValue instanceof ArrayList) {
                hosts = (ArrayList<VDS>) returnValue;
            } else if (returnValue instanceof VdcQueryReturnValue && ((VdcQueryReturnValue) returnValue).getReturnValue() instanceof ArrayList) {
                hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                // $NON-NLS-1$
                throw new IllegalArgumentException("The return value should be ArrayList<VDS> or VdcQueryReturnValue with return value ArrayList<VDS>");
            }
            VDS oldDefaultHost = (VDS) model.getDefaultHost().getSelectedItem();
            if (model.getBehavior().getSystemTreeSelectedItem() != null && model.getBehavior().getSystemTreeSelectedItem().getType() == SystemTreeItemType.Host) {
                VDS host = (VDS) model.getBehavior().getSystemTreeSelectedItem().getEntity();
                for (VDS vds : hosts) {
                    if (host.getId().equals(vds.getId())) {
                        model.getDefaultHost().setItems(new ArrayList<VDS>(Arrays.asList(new VDS[] { vds })));
                        model.getDefaultHost().setSelectedItem(vds);
                        model.getDefaultHost().setIsChangable(false);
                        // $NON-NLS-1$
                        model.getDefaultHost().setInfo("Cannot choose other Host in tree context");
                        break;
                    }
                }
            } else {
                model.getDefaultHost().setItems(hosts);
                model.getDefaultHost().setSelectedItem(oldDefaultHost != null ? Linq.firstOrDefault(hosts, new Linq.HostPredicate(oldDefaultHost.getId())) : Linq.firstOrDefault(hosts));
            }
            changeDefualtHost();
        }
    }, getModel().getHash());
    getHostListByCluster(cluster, query);
}
#method_after
protected void updateDefaultHost() {
    VDSGroup cluster = getModel().getSelectedCluster();
    final UIConstants constants = ConstantsManager.getInstance().getConstants();
    if (cluster == null) {
        getModel().getDefaultHost().setItems(new ArrayList<VDS>());
        getModel().getDefaultHost().setSelectedItem(null);
        return;
    }
    AsyncQuery query = new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            ArrayList<VDS> hosts = null;
            if (returnValue instanceof ArrayList) {
                hosts = (ArrayList<VDS>) returnValue;
            } else if (returnValue instanceof VdcQueryReturnValue && ((VdcQueryReturnValue) returnValue).getReturnValue() instanceof ArrayList) {
                hosts = ((VdcQueryReturnValue) returnValue).getReturnValue();
            } else {
                // $NON-NLS-1$
                throw new IllegalArgumentException("The return value should be ArrayList<VDS> or VdcQueryReturnValue with return value ArrayList<VDS>");
            }
            VDS oldDefaultHost = model.getDefaultHost().getSelectedItem();
            if (model.getBehavior().getSystemTreeSelectedItem() != null && model.getBehavior().getSystemTreeSelectedItem().getType() == SystemTreeItemType.Host) {
                VDS host = (VDS) model.getBehavior().getSystemTreeSelectedItem().getEntity();
                for (VDS vds : hosts) {
                    if (host.getId().equals(vds.getId())) {
                        model.getDefaultHost().setItems(new ArrayList<VDS>(Arrays.asList(new VDS[] { vds })));
                        model.getDefaultHost().setSelectedItem(vds);
                        model.getDefaultHost().setIsChangable(false);
                        model.getDefaultHost().setChangeProhibitionReason(constants.cannotChangeHostInTreeContext());
                        break;
                    }
                }
            } else {
                model.getDefaultHost().setItems(hosts);
                model.getDefaultHost().setSelectedItem(oldDefaultHost != null ? Linq.firstOrDefault(hosts, new Linq.HostPredicate(oldDefaultHost.getId())) : Linq.firstOrDefault(hosts));
            }
            changeDefualtHost();
        }
    }, getModel().getHash());
    getHostListByCluster(cluster, query);
}
#end_block

#method_before
public void initDisks() {
    VmTemplate template = (VmTemplate) getModel().getTemplate().getSelectedItem();
    AsyncDataProvider.getTemplateDiskList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            ArrayList<DiskImage> disks = (ArrayList<DiskImage>) returnValue;
            Collections.sort(disks, new Linq.DiskByAliasComparer());
            ArrayList<DiskModel> list = new ArrayList<DiskModel>();
            for (Disk disk : disks) {
                DiskModel diskModel = new DiskModel();
                diskModel.getAlias().setEntity(disk.getDiskAlias());
                if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                    DiskImage diskImage = (DiskImage) disk;
                    EntityModel tempVar = new EntityModel();
                    tempVar.setEntity(diskImage.getSizeInGigabytes());
                    diskModel.setSize(tempVar);
                    ListModel tempVar2 = new ListModel();
                    tempVar2.setItems((diskImage.getVolumeType() == VolumeType.Preallocated ? new ArrayList<VolumeType>(Arrays.asList(new VolumeType[] { VolumeType.Preallocated })) : AsyncDataProvider.getVolumeTypeList()));
                    tempVar2.setSelectedItem(diskImage.getVolumeType());
                    diskModel.setVolumeType(tempVar2);
                    diskModel.getVolumeType().setIsAvailable(false);
                }
                diskModel.setDisk(disk);
                list.add(diskModel);
            }
            model.setDisks(list);
            updateIsDisksAvailable();
            initStorageDomains();
        }
    }, getModel().getHash()), template.getId());
}
#method_after
public void initDisks() {
    VmTemplate template = getModel().getTemplate().getSelectedItem();
    AsyncDataProvider.getTemplateDiskList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            ArrayList<DiskImage> disks = (ArrayList<DiskImage>) returnValue;
            Collections.sort(disks, new Linq.DiskByAliasComparer());
            ArrayList<DiskModel> list = new ArrayList<DiskModel>();
            for (Disk disk : disks) {
                DiskModel diskModel = new DiskModel();
                diskModel.getAlias().setEntity(disk.getDiskAlias());
                if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                    DiskImage diskImage = (DiskImage) disk;
                    EntityModel tempVar = new EntityModel();
                    tempVar.setEntity(diskImage.getSizeInGigabytes());
                    diskModel.setSize(tempVar);
                    ListModel tempVar2 = new ListModel();
                    tempVar2.setItems((diskImage.getVolumeType() == VolumeType.Preallocated ? new ArrayList<VolumeType>(Arrays.asList(new VolumeType[] { VolumeType.Preallocated })) : AsyncDataProvider.getVolumeTypeList()));
                    tempVar2.setSelectedItem(diskImage.getVolumeType());
                    diskModel.setVolumeType(tempVar2);
                    diskModel.getVolumeType().setIsAvailable(false);
                }
                diskModel.setDisk(disk);
                list.add(diskModel);
            }
            model.setDisks(list);
            updateIsDisksAvailable();
            initStorageDomains();
        }
    }, getModel().getHash()), template.getId());
}
#end_block

#method_before
public void initStorageDomains() {
    if (getModel().getDisks() == null) {
        return;
    }
    VmTemplate template = (VmTemplate) getModel().getTemplate().getSelectedItem();
    if (template != null && !template.getId().equals(Guid.Empty)) {
        postInitStorageDomains();
    } else {
        getModel().getStorageDomain().setItems(new ArrayList<StorageDomain>());
        getModel().getStorageDomain().setSelectedItem(null);
        getModel().getStorageDomain().setIsChangable(false);
    }
}
#method_after
public void initStorageDomains() {
    if (getModel().getDisks() == null) {
        return;
    }
    VmTemplate template = getModel().getTemplate().getSelectedItem();
    if (template != null && !template.getId().equals(Guid.Empty)) {
        postInitStorageDomains();
    } else {
        getModel().getStorageDomain().setItems(new ArrayList<StorageDomain>());
        getModel().getStorageDomain().setSelectedItem(null);
        getModel().getStorageDomain().setIsChangable(false);
    }
}
#end_block

#method_before
protected void postInitStorageDomains() {
    if (getModel().getDisks() == null) {
        return;
    }
    StoragePool dataCenter = (StoragePool) getModel().getSelectedDataCenter();
    AsyncDataProvider.getPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmModelBehaviorBase behavior = (VmModelBehaviorBase) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            ArrayList<StorageDomain> activeStorageDomains = filterStorageDomains(storageDomains);
            boolean provisioning = (Boolean) behavior.getModel().getProvisioning().getEntity();
            ArrayList<DiskModel> disks = (ArrayList<DiskModel>) behavior.getModel().getDisks();
            Collections.sort(activeStorageDomains, new NameableComparator());
            for (DiskModel diskModel : disks) {
                ArrayList<StorageDomain> availableDiskStorageDomains;
                diskModel.getQuota().setItems(behavior.getModel().getQuota().getItems());
                ArrayList<Guid> storageIds = ((DiskImage) diskModel.getDisk()).getStorageIds();
                // Active storage domains that the disk resides on
                ArrayList<StorageDomain> activeDiskStorageDomains = Linq.getStorageDomainsByIds(storageIds, activeStorageDomains);
                // Set target storage domains
                availableDiskStorageDomains = provisioning ? activeStorageDomains : activeDiskStorageDomains;
                Collections.sort(availableDiskStorageDomains, new NameableComparator());
                diskModel.getStorageDomain().setItems(availableDiskStorageDomains);
                diskModel.getStorageDomain().setChangeProhibitionReason(constants.noActiveTargetStorageDomainAvailableMsg());
                diskModel.getStorageDomain().setIsChangable(!availableDiskStorageDomains.isEmpty());
            }
        }
    }, getModel().getHash()), dataCenter.getId(), ActionGroup.CREATE_VM);
}
#method_after
protected void postInitStorageDomains() {
    if (getModel().getDisks() == null) {
        return;
    }
    StoragePool dataCenter = getModel().getSelectedDataCenter();
    AsyncDataProvider.getPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmModelBehaviorBase behavior = (VmModelBehaviorBase) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            ArrayList<StorageDomain> activeStorageDomains = filterStorageDomains(storageDomains);
            boolean provisioning = behavior.getModel().getProvisioning().getEntity();
            ArrayList<DiskModel> disks = (ArrayList<DiskModel>) behavior.getModel().getDisks();
            Collections.sort(activeStorageDomains, new NameableComparator());
            for (DiskModel diskModel : disks) {
                ArrayList<StorageDomain> availableDiskStorageDomains;
                diskModel.getQuota().setItems(behavior.getModel().getQuota().getItems());
                ArrayList<Guid> storageIds = ((DiskImage) diskModel.getDisk()).getStorageIds();
                // Active storage domains that the disk resides on
                ArrayList<StorageDomain> activeDiskStorageDomains = Linq.getStorageDomainsByIds(storageIds, activeStorageDomains);
                // Set target storage domains
                availableDiskStorageDomains = provisioning ? activeStorageDomains : activeDiskStorageDomains;
                Collections.sort(availableDiskStorageDomains, new NameableComparator());
                diskModel.getStorageDomain().setItems(availableDiskStorageDomains);
                diskModel.getStorageDomain().setChangeProhibitionReason(constants.noActiveTargetStorageDomainAvailableMsg());
                diskModel.getStorageDomain().setIsChangable(!availableDiskStorageDomains.isEmpty());
            }
        }
    }, getModel().getHash()), dataCenter.getId(), ActionGroup.CREATE_VM);
}
#end_block

#method_before
protected void updateQuotaByCluster(final Guid defaultQuota, final String quotaName) {
    if (getModel().getQuota().getIsAvailable()) {
        VDSGroup cluster = getModel().getSelectedCluster();
        if (cluster == null) {
            return;
        }
        Frontend.RunQuery(VdcQueryType.GetAllRelevantQuotasForVdsGroup, new IdQueryParameters(cluster.getId()), new AsyncQuery(getModel(), new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                UnitVmModel vmModel = (UnitVmModel) model;
                ArrayList<Quota> quotaList = (ArrayList<Quota>) ((VdcQueryReturnValue) returnValue).getReturnValue();
                if (quotaList != null && !quotaList.isEmpty()) {
                    vmModel.getQuota().setItems(quotaList);
                }
                if (defaultQuota != null && !Guid.Empty.equals(defaultQuota)) {
                    boolean hasQuotaInList = false;
                    for (Quota quota : quotaList) {
                        if (quota.getId().equals(defaultQuota)) {
                            vmModel.getQuota().setSelectedItem(quota);
                            hasQuotaInList = true;
                            break;
                        }
                    }
                    if (!hasQuotaInList) {
                        Quota quota = new Quota();
                        quota.setId(defaultQuota);
                        quota.setQuotaName(quotaName);
                        quotaList.add(quota);
                        vmModel.getQuota().setItems(quotaList);
                        vmModel.getQuota().setSelectedItem(quota);
                    }
                }
            }
        }));
    }
}
#method_after
protected void updateQuotaByCluster(final Guid defaultQuota, final String quotaName) {
    if (getModel().getQuota().getIsAvailable()) {
        VDSGroup cluster = getModel().getSelectedCluster();
        if (cluster == null) {
            return;
        }
        Frontend.getInstance().runQuery(VdcQueryType.GetAllRelevantQuotasForVdsGroup, new IdQueryParameters(cluster.getId()), new AsyncQuery(getModel(), new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                UnitVmModel vmModel = (UnitVmModel) model;
                ArrayList<Quota> quotaList = ((VdcQueryReturnValue) returnValue).getReturnValue();
                if (quotaList != null && !quotaList.isEmpty()) {
                    vmModel.getQuota().setItems(quotaList);
                }
                if (defaultQuota != null && !Guid.Empty.equals(defaultQuota)) {
                    boolean hasQuotaInList = false;
                    for (Quota quota : quotaList) {
                        if (quota.getId().equals(defaultQuota)) {
                            vmModel.getQuota().setSelectedItem(quota);
                            hasQuotaInList = true;
                            break;
                        }
                    }
                    // Add the quota to the list only in edit mode
                    if (!hasQuotaInList && !getModel().getIsNew()) {
                        Quota quota = new Quota();
                        quota.setId(defaultQuota);
                        quota.setQuotaName(quotaName);
                        quotaList.add(quota);
                        vmModel.getQuota().setItems(quotaList);
                        vmModel.getQuota().setSelectedItem(quota);
                    }
                }
            }
        }));
    }
}
#end_block

#method_before
protected void updateCpuPinningVisibility() {
    if (getModel().getSelectedCluster() != null) {
        VDSGroup cluster = getModel().getSelectedCluster();
        String compatibilityVersion = cluster.getcompatibility_version().toString();
        boolean hasCpuPinning = Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity());
        if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled, compatibilityVersion))) {
            hasCpuPinning = false;
        } else if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, AsyncDataProvider.getDefaultConfigurationVersion())) && isVmMigratable()) {
            hasCpuPinning = false;
        }
        if (!hasCpuPinning) {
            getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailable());
            getModel().getCpuPinning().setEntity("");
        }
        getModel().getCpuPinning().setIsChangable(hasCpuPinning);
    }
}
#method_after
protected void updateCpuPinningVisibility() {
    if (getModel().getSelectedCluster() != null) {
        VDSGroup cluster = getModel().getSelectedCluster();
        String compatibilityVersion = cluster.getcompatibility_version().toString();
        boolean isLocalSD = getModel().getSelectedDataCenter() != null && StorageType.LOCALFS.equals(getModel().getSelectedDataCenter().getStorageType());
        // cpu pinning is available on Local SD with no consideration for auto assign value
        boolean hasCpuPinning = Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity()) || isLocalSD;
        if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled, compatibilityVersion))) {
            hasCpuPinning = false;
        } else if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, AsyncDataProvider.getDefaultConfigurationVersion())) && isVmMigratable() && !isLocalSD) {
            hasCpuPinning = false;
        }
        if (!hasCpuPinning) {
            if (isLocalSD) {
                getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailableLocalStorage());
            } else {
                getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailable());
            }
            getModel().getCpuPinning().setEntity("");
        }
        getModel().getCpuPinning().setIsChangable(hasCpuPinning);
    }
}
#end_block

#method_before
public void updateMigrationAvailability() {
    Boolean haHost = (Boolean) getModel().getIsHighlyAvailable().getEntity();
    if (haHost) {
        getModel().getMigrationMode().setChangeProhibitionReason(constants.hostIsHa());
        getModel().getMigrationMode().setSelectedItem(MigrationSupport.MIGRATABLE);
    }
    getModel().getMigrationMode().setIsChangable(!haHost);
}
#method_after
public void updateMigrationAvailability() {
    Boolean haHost = getModel().getIsHighlyAvailable().getEntity();
    if (haHost) {
        getModel().getMigrationMode().setChangeProhibitionReason(constants.hostIsHa());
        getModel().getMigrationMode().setSelectedItem(MigrationSupport.MIGRATABLE);
    }
    getModel().getMigrationMode().setIsChangable(!haHost);
}
#end_block

#method_before
public void updateCpuSharesAmountChangeability() {
    boolean changeable = getModel().getCpuSharesAmountSelection().getSelectedItem() == UnitVmModel.CpuSharesAmount.CUSTOM;
    boolean none = getModel().getCpuSharesAmountSelection().getSelectedItem() == UnitVmModel.CpuSharesAmount.DISABLED;
    getModel().getCpuSharesAmount().setIsChangable(changeable);
    getModel().getCpuSharesAmount().setEntity(changeable || none ? // $NON-NLS-1$
    "" : ((UnitVmModel.CpuSharesAmount) getModel().getCpuSharesAmountSelection().getSelectedItem()).getValue());
}
#method_after
public void updateCpuSharesAmountChangeability() {
    boolean changeable = getModel().getCpuSharesAmountSelection().getSelectedItem() == UnitVmModel.CpuSharesAmount.CUSTOM;
    boolean none = getModel().getCpuSharesAmountSelection().getSelectedItem() == UnitVmModel.CpuSharesAmount.DISABLED;
    getModel().getCpuSharesAmount().setEntity(changeable || none ? // $NON-NLS-1$
    null : getModel().getCpuSharesAmountSelection().getSelectedItem().getValue());
}
#end_block

#method_before
public void updateCpuSharesSelection() {
    boolean foundEnum = false;
    for (UnitVmModel.CpuSharesAmount cpuSharesAmount : UnitVmModel.CpuSharesAmount.values()) {
        if (cpuSharesAmount.getValue() == (Integer) getModel().getCpuSharesAmount().getEntity()) {
            getModel().getCpuSharesAmountSelection().setSelectedItem(cpuSharesAmount);
            foundEnum = true;
            break;
        }
    }
    if (!foundEnum) {
        // saving the value - because when Custom is selected the value automatically clears.
        int currentVal = Integer.parseInt(getModel().getCpuSharesAmount().getEntity().toString());
        getModel().getCpuSharesAmountSelection().setSelectedItem(UnitVmModel.CpuSharesAmount.CUSTOM);
        getModel().getCpuSharesAmount().setEntity(currentVal);
    }
}
#method_after
public void updateCpuSharesSelection() {
    boolean foundEnum = false;
    for (UnitVmModel.CpuSharesAmount cpuSharesAmount : UnitVmModel.CpuSharesAmount.values()) {
        if (cpuSharesAmount.getValue() == getModel().getCpuSharesAmount().getEntity()) {
            getModel().getCpuSharesAmountSelection().setSelectedItem(cpuSharesAmount);
            foundEnum = true;
            break;
        }
    }
    if (!foundEnum) {
        // saving the value - because when Custom is selected the value automatically clears.
        Integer currentVal = getModel().getCpuSharesAmount().getEntity();
        getModel().getCpuSharesAmountSelection().setSelectedItem(UnitVmModel.CpuSharesAmount.CUSTOM);
        getModel().getCpuSharesAmount().setEntity(currentVal);
    }
}
#end_block

#method_before
protected int getTotalCpuCores() {
    try {
        return getModel().getTotalCPUCores().getEntity() != null ? Integer.parseInt(getModel().getTotalCPUCores().getEntity().toString()) : 0;
    } catch (NumberFormatException e) {
        return 0;
    }
}
#method_after
protected int getTotalCpuCores() {
    try {
        return getModel().getTotalCPUCores().getEntity() != null ? Integer.parseInt(getModel().getTotalCPUCores().getEntity()) : 0;
    } catch (NumberFormatException e) {
        return 0;
    }
}
#end_block

#method_before
protected void updateOSValues() {
    List<Integer> vmOsValues;
    VDSGroup cluster = getModel().getSelectedCluster();
    if (cluster != null) {
        vmOsValues = AsyncDataProvider.getOsIds(cluster.getArchitectureType());
        getModel().getOSType().setItems(vmOsValues);
    }
}
#method_after
protected void updateOSValues() {
    List<Integer> vmOsValues;
    VDSGroup cluster = getModel().getSelectedCluster();
    if (cluster != null) {
        vmOsValues = AsyncDataProvider.getOsIds(cluster.getArchitecture());
        getModel().getOSType().setItems(vmOsValues);
        postOsItemChanged();
    }
}
#end_block

#method_before
protected void updateConsoleDevice(Guid vmId) {
    Frontend.RunQuery(VdcQueryType.GetConsoleDevices, new IdQueryParameters(vmId), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            List<String> consoleDevices = (List<String>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            getModel().getIsConsoleDeviceEnabled().setEntity(!consoleDevices.isEmpty());
        }
    }));
}
#method_after
protected void updateConsoleDevice(Guid vmId) {
    Frontend.getInstance().runQuery(VdcQueryType.GetConsoleDevices, new IdQueryParameters(vmId), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            List<String> consoleDevices = ((VdcQueryReturnValue) returnValue).getReturnValue();
            getModel().getIsConsoleDeviceEnabled().setEntity(!consoleDevices.isEmpty());
        }
    }));
}
#end_block

#method_before
public void vmTypeChanged(VmType vmType) {
    getModel().getIsSoundcardEnabled().setEntity(vmType == VmType.Desktop);
}
#method_after
public void vmTypeChanged(VmType vmType) {
    getModel().getIsSoundcardEnabled().setEntity(vmType == VmType.Desktop);
    getModel().getAllowConsoleReconnect().setEntity(vmType == VmType.Server);
}
#end_block

#method_before
protected void initSoundCard(Guid id) {
    AsyncDataProvider.isSoundcardEnabled(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            getModel().getIsSoundcardEnabled().setEntity(returnValue);
        }
    }), id);
}
#method_after
protected void initSoundCard(Guid id) {
    AsyncDataProvider.isSoundcardEnabled(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            getModel().getIsSoundcardEnabled().setEntity((Boolean) returnValue);
        }
    }), id);
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getTemplate().setIsChangable(false);
    getModel().getProvisioning().setIsChangable(false);
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    if (template.getStoragePoolId() != null && !template.getStoragePoolId().equals(Guid.Empty)) {
        AsyncDataProvider.getDataCenterById(new AsyncQuery(getModel(), new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                final StoragePool dataCenter = (StoragePool) returnValue;
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
                        ArrayList<VDSGroup> filteredClusters = new ArrayList<VDSGroup>();
                        // filter clusters supporting virt service only
                        for (VDSGroup cluster : clusters) {
                            if (cluster.supportsVirtService()) {
                                filteredClusters.add(cluster);
                            }
                        }
                        model.setDataCentersAndClusters(model, new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { dataCenter })), filteredClusters, template.getVdsGroupId());
                        AsyncDataProvider.isSoundcardEnabled(new AsyncQuery(getModel(), new INewAsyncCallback() {

                            @Override
                            public void onSuccess(Object model, Object returnValue) {
                                getModel().getIsSoundcardEnabled().setEntity(returnValue);
                                initTemplate();
                                initCdImage();
                            }
                        }), template.getId());
                    }
                }, getModel().getHash()), true, false);
            }
        }, getModel().getHash()), template.getStoragePoolId());
    }
    AsyncDataProvider.GetWatchdogByVmId(new AsyncQuery(this.getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            @SuppressWarnings("unchecked")
            Collection<VmWatchdog> watchdogs = (Collection<VmWatchdog>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            for (VmWatchdog watchdog : watchdogs) {
                model.getWatchdogAction().setSelectedItem(watchdog.getAction().name().toLowerCase());
                model.getWatchdogModel().setSelectedItem(watchdog.getModel().name());
            }
        }
    }), template.getId());
    getModel().getMigrationMode().setSelectedItem(template.getMigrationSupport());
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getTemplate().setIsChangable(false);
    getModel().getProvisioning().setIsChangable(false);
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    if (template.getStoragePoolId() != null && !template.getStoragePoolId().equals(Guid.Empty)) {
        AsyncDataProvider.getDataCenterById(new AsyncQuery(getModel(), new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                final StoragePool dataCenter = (StoragePool) returnValue;
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
                        ArrayList<VDSGroup> filteredClusters = new ArrayList<VDSGroup>();
                        // filter clusters supporting virt service only
                        for (VDSGroup cluster : clusters) {
                            if (cluster.supportsVirtService()) {
                                filteredClusters.add(cluster);
                            }
                        }
                        model.setDataCentersAndClusters(model, new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { dataCenter })), filteredClusters, template.getVdsGroupId());
                        AsyncDataProvider.isSoundcardEnabled(new AsyncQuery(getModel(), new INewAsyncCallback() {

                            @Override
                            public void onSuccess(Object model, Object returnValue) {
                                getModel().getIsSoundcardEnabled().setEntity((Boolean) returnValue);
                                initTemplate();
                                initCdImage();
                            }
                        }), template.getId());
                    }
                }, getModel().getHash()), true, false);
            }
        }, getModel().getHash()), template.getStoragePoolId());
    }
    AsyncDataProvider.getWatchdogByVmId(new AsyncQuery(this.getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            @SuppressWarnings("unchecked")
            Collection<VmWatchdog> watchdogs = ((VdcQueryReturnValue) returnValue).getReturnValue();
            for (VmWatchdog watchdog : watchdogs) {
                model.getWatchdogAction().setSelectedItem(watchdog.getAction().name().toLowerCase());
                model.getWatchdogModel().setSelectedItem(watchdog.getModel().name());
            }
        }
    }), template.getId());
    getModel().getMigrationMode().setSelectedItem(template.getMigrationSupport());
}
#end_block

#method_before
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateNumOfSockets();
    updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateOSValues();
}
#method_after
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateNumOfSockets();
    updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateVirtioScsiAvailability();
    updateMigrationForLocalSD();
    updateOSValues();
}
#end_block

#method_before
private void initTemplate() {
    // Update model state according to VM properties.
    getModel().getName().setEntity(this.template.getName());
    getModel().getDescription().setEntity(this.template.getDescription());
    getModel().getComment().setEntity(this.template.getComment());
    getModel().getMinAllocatedMemory().setEntity(this.template.getMinAllocatedMem());
    getModel().getMinAllocatedMemory().setIsChangable(false);
    getModel().getMemSize().setEntity(this.template.getMemSizeMb());
    getModel().getOSType().setSelectedItem(this.template.getOsId());
    getModel().getDomain().setSelectedItem(this.template.getDomain());
    getModel().getUsbPolicy().setSelectedItem(this.template.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(this.template.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(this.template.isAllowConsoleReconnect());
    getModel().setBootSequence(this.template.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(this.template.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(this.template.getNumOfCpus()));
    getModel().getNumOfSockets().setSelectedItem(this.template.getNumOfSockets());
    getModel().getIsStateless().setEntity(this.template.isStateless());
    getModel().getIsRunAndPause().setEntity(this.template.isRunAndPause());
    getModel().getIsDeleteProtected().setEntity(this.template.isDeleteProtected());
    getModel().getIsSmartcardEnabled().setEntity(this.template.isSmartcardEnabled());
    getModel().getVncKeyboardLayout().setSelectedItem(this.template.getVncKeyboardLayout());
    getModel().getKernel_parameters().setEntity(this.template.getKernelParams());
    getModel().getKernel_path().setEntity(this.template.getKernelUrl());
    getModel().getInitrd_path().setEntity(this.template.getInitrdUrl());
    getModel().getIsSingleQxlEnabled().setEntity(this.template.getSingleQxlPci());
    updateTimeZone(template.getTimeZone());
    // Update domain list
    updateDomain();
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    // Select display protocol.
    for (Object item : getModel().getDisplayProtocol().getItems()) {
        EntityModel model = (EntityModel) item;
        DisplayType displayType = (DisplayType) model.getEntity();
        if (displayType == this.template.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(item);
            break;
        }
    }
    updateConsoleDevice(template.getId());
    initPriority(this.template.getPriority());
}
#method_after
private void initTemplate() {
    // Update model state according to VM properties.
    getModel().getName().setEntity(this.template.getName());
    getModel().getDescription().setEntity(this.template.getDescription());
    getModel().getComment().setEntity(this.template.getComment());
    getModel().getMinAllocatedMemory().setEntity(this.template.getMinAllocatedMem());
    getModel().getMinAllocatedMemory().setIsChangable(false);
    getModel().getMemSize().setEntity(this.template.getMemSizeMb());
    getModel().getOSType().setSelectedItem(this.template.getOsId());
    getModel().getDomain().setSelectedItem(this.template.getDomain());
    getModel().getUsbPolicy().setSelectedItem(this.template.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(this.template.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(this.template.isAllowConsoleReconnect());
    getModel().setBootSequence(this.template.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(this.template.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(this.template.getNumOfCpus()));
    getModel().getNumOfSockets().setSelectedItem(this.template.getNumOfSockets());
    getModel().getIsStateless().setEntity(this.template.isStateless());
    getModel().getIsRunAndPause().setEntity(this.template.isRunAndPause());
    getModel().getIsDeleteProtected().setEntity(this.template.isDeleteProtected());
    getModel().selectSsoMethod(this.template.getSsoMethod());
    getModel().getIsSmartcardEnabled().setEntity(this.template.isSmartcardEnabled());
    getModel().getVncKeyboardLayout().setSelectedItem(this.template.getVncKeyboardLayout());
    getModel().getKernel_parameters().setEntity(this.template.getKernelParams());
    getModel().getKernel_path().setEntity(this.template.getKernelUrl());
    getModel().getInitrd_path().setEntity(this.template.getInitrdUrl());
    getModel().getIsSingleQxlEnabled().setEntity(this.template.getSingleQxlPci());
    updateTimeZone(template.getTimeZone());
    // Update domain list
    updateDomain();
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    // Select display protocol.
    for (EntityModel<DisplayType> model : getModel().getDisplayProtocol().getItems()) {
        DisplayType displayType = model.getEntity();
        if (displayType == this.template.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(model);
            break;
        }
    }
    updateConsoleDevice(template.getId());
    initPriority(this.template.getPriority());
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    clusterId = getParameters().getClusterId();
    detailRequired = getParameters().isDetailRequired();
    volumeId = getParameters().getVolumeId();
    if (volumeId != null) {
        GlusterVolumeEntity volume = getGlusterVolumeDao().getById(volumeId);
        if (volume == null) {
            throw new RuntimeException(String.format("Invalid volume id %s", volumeId));
        }
        brick = getBrick(getParameters().getBrickId());
        getQueryReturnValue().setReturnValue(fetchAdvancedDetails(volume.getName()));
    } else {
        GlusterVolumeAdvancedDetails serviceDetails = getServiceInfo();
        if (serviceDetails != null) {
            List<GlusterServerService> serviceList = serviceDetails.getServiceInfo();
            if (serviceList != null) {
                for (GlusterServerService service : serviceList) {
                    String hostName = GlusterDBUtils.getInstance().getHostNameOrIP(service.getGlusterHostUuid());
                    if (hostName != null) {
                        service.setHostName(hostName);
                    }
                }
            }
        }
        getQueryReturnValue().setReturnValue(serviceDetails);
    }
}
#method_after
@Override
protected void executeQueryCommand() {
    clusterId = getParameters().getClusterId();
    detailRequired = getParameters().isDetailRequired();
    volumeId = getParameters().getVolumeId();
    if (volumeId != null) {
        GlusterVolumeEntity volume = getGlusterVolumeDao().getById(volumeId);
        if (volume == null) {
            throw new RuntimeException(VdcBllMessages.GLUSTER_VOLUME_ID_INVALID.toString());
        }
        brick = getBrick(getParameters().getBrickId());
        getQueryReturnValue().setReturnValue(fetchAdvancedDetails(volume.getName()));
    } else {
        GlusterVolumeAdvancedDetails advancedDetails = getServiceInfo();
        if (advancedDetails != null) {
            List<GlusterServerService> serviceList = advancedDetails.getServiceInfo();
            if (serviceList != null) {
                for (GlusterServerService service : serviceList) {
                    String hostName = GlusterDBUtils.getInstance().getHostNameOrIP(service.getGlusterHostUuid());
                    if (hostName != null) {
                        service.setHostName(hostName);
                    }
                }
            }
        }
        getQueryReturnValue().setReturnValue(advancedDetails);
    }
}
#end_block

#method_before
private GlusterServerService parseServiceInfo(Map<String, Object> volumeServiceInfo) {
    GlusterServerService serviceInfo = new GlusterServerService();
    if (volumeServiceInfo.containsKey(HOSTNAME)) {
        serviceInfo.setHostName((String) volumeServiceInfo.get(HOSTNAME));
    }
    if (volumeServiceInfo.containsKey(HOST_UUID)) {
        serviceInfo.setGlusterHostUuid(Guid.createGuidFromString((String) volumeServiceInfo.get(HOST_UUID)));
    }
    if (volumeServiceInfo.containsKey(STATUS)) {
        String brickStatus = (String) volumeServiceInfo.get(STATUS);
        if (brickStatus.toUpperCase().equals(ONLINE)) {
            serviceInfo.setStatus(GlusterServiceStatus.RUNNING);
            // parse the port and pid only if the brick is online.
            if (volumeServiceInfo.containsKey(PORT)) {
                serviceInfo.setPort(Integer.parseInt((String) volumeServiceInfo.get(PORT)));
            }
            if (volumeServiceInfo.containsKey(PID)) {
                serviceInfo.setPid(Integer.parseInt((String) volumeServiceInfo.get(PID)));
            }
        } else {
            serviceInfo.setStatus(GlusterServiceStatus.STOPPED);
        }
    }
    return serviceInfo;
}
#method_after
private GlusterServerService parseServiceInfo(Map<String, Object> volumeServiceInfo) {
    GlusterServerService serviceInfo = new GlusterServerService();
    if (volumeServiceInfo.containsKey(HOSTNAME)) {
        serviceInfo.setHostName((String) volumeServiceInfo.get(HOSTNAME));
    }
    if (volumeServiceInfo.containsKey(HOST_UUID)) {
        serviceInfo.setGlusterHostUuid(Guid.createGuidFromString((String) volumeServiceInfo.get(HOST_UUID)));
    }
    if (volumeServiceInfo.containsKey(STATUS)) {
        String brickStatus = (String) volumeServiceInfo.get(STATUS);
        if (brickStatus.toUpperCase().equals(ONLINE)) {
            serviceInfo.setStatus(GlusterServiceStatus.RUNNING);
            // parse the port and pid only if the service is running.
            if (volumeServiceInfo.containsKey(PORT) && StringUtils.isNumeric((String) volumeServiceInfo.get(PORT))) {
                serviceInfo.setPort(Integer.parseInt((String) volumeServiceInfo.get(PORT)));
            }
            if (volumeServiceInfo.containsKey(PID) && StringUtils.isNumeric((String) volumeServiceInfo.get(PID))) {
                serviceInfo.setPid(Integer.parseInt((String) volumeServiceInfo.get(PID)));
            }
        } else {
            serviceInfo.setStatus(GlusterServiceStatus.STOPPED);
        }
    }
    return serviceInfo;
}
#end_block

#method_before
private BrickProperties getBrickProperties(GlusterVolumeEntity volume, Map<String, Object> brick) {
    BrickProperties brickProperties = new BrickProperties();
    GlusterBrickEntity brickEntity = GlusterCoreUtil.getBrickByQualifiedName(volume.getBricks(), (String) brick.get(BRICK));
    if (brickEntity != null) {
        brickProperties.setBrickId(brickEntity.getId());
    }
    if (brick.containsKey(STATUS)) {
        String brickStatus = (String) brick.get(STATUS);
        if (brickStatus.toUpperCase().equals(ONLINE)) {
            brickProperties.setStatus(GlusterStatus.UP);
            if (brick.containsKey(PORT)) {
                brickProperties.setPort(Integer.parseInt((String) brick.get(PORT)));
            }
            if (brick.containsKey(PID)) {
                brickProperties.setPid(Integer.parseInt((String) brick.get(PID)));
            }
        } else {
            brickProperties.setStatus(GlusterStatus.DOWN);
        }
    }
    // Fetch the volume status detail
    if (brick.containsKey(DETAIL_SIZE_TOTAL)) {
        brickProperties.setTotalSize(Double.valueOf((String) brick.get(DETAIL_SIZE_TOTAL)));
    }
    if (brick.containsKey(DETAIL_SIZE_FREE)) {
        brickProperties.setFreeSize(Double.valueOf((String) brick.get(DETAIL_SIZE_FREE)));
    }
    if (brick.containsKey(DETAIL_DEVICE)) {
        brickProperties.setDevice((String) brick.get(DETAIL_DEVICE));
    }
    if (brick.containsKey(DETAIL_BLOCK_SIZE)) {
        brickProperties.setBlockSize(Integer.valueOf((String) brick.get(DETAIL_BLOCK_SIZE)));
    }
    if (brick.containsKey(DETAIL_MNT_OPTIONS)) {
        brickProperties.setMntOptions((String) brick.get(DETAIL_MNT_OPTIONS));
    }
    if (brick.containsKey(DETAIL_FS_NAME)) {
        brickProperties.setFsName((String) brick.get(DETAIL_FS_NAME));
    }
    return brickProperties;
}
#method_after
private BrickProperties getBrickProperties(GlusterVolumeEntity volume, Map<String, Object> brick) {
    BrickProperties brickProperties = new BrickProperties();
    GlusterBrickEntity brickEntity = GlusterCoreUtil.getBrickByQualifiedName(volume.getBricks(), (String) brick.get(BRICK));
    if (brickEntity != null) {
        brickProperties.setBrickId(brickEntity.getId());
    }
    if (brick.containsKey(STATUS)) {
        String brickStatus = (String) brick.get(STATUS);
        if (brickStatus.toUpperCase().equals(ONLINE)) {
            brickProperties.setStatus(GlusterStatus.UP);
            if (brick.containsKey(PORT)) {
                if (StringUtils.isNumeric((String) brick.get(PORT))) {
                    brickProperties.setPort(Integer.parseInt((String) brick.get(PORT)));
                } else {
                    // if there's no port registered, then the brick status is down.
                    brickProperties.setStatus(GlusterStatus.DOWN);
                }
            }
            if (brick.containsKey(PID) && StringUtils.isNumeric((String) brick.get(PID))) {
                brickProperties.setPid(Integer.parseInt((String) brick.get(PID)));
            }
        } else {
            brickProperties.setStatus(GlusterStatus.DOWN);
        }
    }
    // Fetch the volume status detail
    if (brick.containsKey(DETAIL_SIZE_TOTAL)) {
        brickProperties.setTotalSize(Double.valueOf((String) brick.get(DETAIL_SIZE_TOTAL)));
    }
    if (brick.containsKey(DETAIL_SIZE_FREE)) {
        brickProperties.setFreeSize(Double.valueOf((String) brick.get(DETAIL_SIZE_FREE)));
    }
    if (brick.containsKey(DETAIL_DEVICE)) {
        brickProperties.setDevice((String) brick.get(DETAIL_DEVICE));
    }
    if (brick.containsKey(DETAIL_BLOCK_SIZE)) {
        brickProperties.setBlockSize(Integer.valueOf((String) brick.get(DETAIL_BLOCK_SIZE)));
    }
    if (brick.containsKey(DETAIL_MNT_OPTIONS)) {
        brickProperties.setMntOptions((String) brick.get(DETAIL_MNT_OPTIONS));
    }
    if (brick.containsKey(DETAIL_FS_NAME)) {
        brickProperties.setFsName((String) brick.get(DETAIL_FS_NAME));
    }
    return brickProperties;
}
#end_block

#method_before
@Override
protected void updateDetailsAvailability() {
    if (getSelectedItem() != null) {
        Disk disk = (Disk) getSelectedItem();
        diskVmListModel.setIsAvailable(disk.getVmEntityType().isVmType());
        diskTemplateListModel.setIsAvailable(disk.getVmEntityType().isTemplateType());
        diskStorageListModel.setIsAvailable(disk.getDiskStorageType() == DiskStorageType.IMAGE);
    }
}
#method_after
@Override
protected void updateDetailsAvailability() {
    if (getSelectedItem() != null) {
        Disk disk = (Disk) getSelectedItem();
        diskVmListModel.setIsAvailable(disk.getVmEntityType() == null || !disk.getVmEntityType().isTemplateType());
        diskTemplateListModel.setIsAvailable(disk.getVmEntityType() != null && disk.getVmEntityType().isTemplateType());
        diskStorageListModel.setIsAvailable(disk.getDiskStorageType() == DiskStorageType.IMAGE);
    }
}
#end_block

#method_before
private void scanAlignment() {
    ArrayList<VdcActionParametersBase> parameterList = new ArrayList<VdcActionParametersBase>();
    for (Disk disk : (ArrayList<Disk>) getSelectedItems()) {
        parameterList.add(new GetDiskAlignmentParameters(disk.getId()));
    }
    Frontend.RunMultipleAction(VdcActionType.GetDiskAlignment, parameterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
        }
    }, this);
}
#method_after
private void scanAlignment() {
    ArrayList<VdcActionParametersBase> parameterList = new ArrayList<VdcActionParametersBase>();
    for (Disk disk : (ArrayList<Disk>) getSelectedItems()) {
        parameterList.add(new GetDiskAlignmentParameters(disk.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.GetDiskAlignment, parameterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
        }
    }, this);
}
#end_block

#method_before
private void onChangeQuota() {
    ChangeQuotaModel model = (ChangeQuotaModel) getWindow();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    for (Object item : model.getItems()) {
        ChangeQuotaItemModel itemModel = (ChangeQuotaItemModel) item;
        DiskImage disk = (DiskImage) itemModel.getEntity();
        VdcActionParametersBase parameters = new ChangeQuotaParameters(((Quota) itemModel.getQuota().getSelectedItem()).getId(), disk.getId(), itemModel.getStorageDomainId(), disk.getStoragePoolId());
        paramerterList.add(parameters);
    }
    model.startProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ChangeQuotaForDisk, paramerterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            DiskListModel localModel = (DiskListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, this);
}
#method_after
private void onChangeQuota() {
    ChangeQuotaModel model = (ChangeQuotaModel) getWindow();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    for (Object item : model.getItems()) {
        ChangeQuotaItemModel itemModel = (ChangeQuotaItemModel) item;
        DiskImage disk = (DiskImage) itemModel.getEntity();
        VdcActionParametersBase parameters = new ChangeQuotaParameters(((Quota) itemModel.getQuota().getSelectedItem()).getId(), disk.getId(), itemModel.getStorageDomainId(), disk.getStoragePoolId());
        paramerterList.add(parameters);
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.ChangeQuotaForDisk, paramerterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            DiskListModel localModel = (DiskListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, this);
}
#end_block

#method_before
private void onRemove() {
    RemoveDiskModel model = (RemoveDiskModel) getWindow();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    for (Object item : getSelectedItems()) {
        Disk disk = (Disk) item;
        VdcActionParametersBase parameters = new RemoveDiskParameters(disk.getId());
        paramerterList.add(parameters);
    }
    model.startProgress(null);
    Frontend.RunMultipleAction(VdcActionType.RemoveDisk, paramerterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            DiskListModel localModel = (DiskListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, this);
}
#method_after
private void onRemove() {
    RemoveDiskModel model = (RemoveDiskModel) getWindow();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    for (Object item : getSelectedItems()) {
        Disk disk = (Disk) item;
        VdcActionParametersBase parameters = new RemoveDiskParameters(disk.getId());
        paramerterList.add(parameters);
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.RemoveDisk, paramerterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            DiskListModel localModel = (DiskListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, this);
}
#end_block

#method_before
private void updateCopyAndMoveCommandAvailability(List<Disk> disks) {
    boolean isCopyAllowed = true;
    boolean isMoveAllowed = true;
    if (disks == null || disks.isEmpty() || disks.get(0).getDiskStorageType() != DiskStorageType.IMAGE) {
        disableMoveAndCopyCommands();
        return;
    }
    Guid datacenterId = ((DiskImage) disks.get(0)).getStoragePoolId();
    for (Disk disk : disks) {
        if ((!isCopyAllowed && !isMoveAllowed) || disk.getDiskStorageType() != DiskStorageType.IMAGE) {
            disableMoveAndCopyCommands();
            return;
        }
        DiskImage diskImage = (DiskImage) disk;
        if (diskImage.getImageStatus() != ImageStatus.OK || !datacenterId.equals(diskImage.getStoragePoolId())) {
            disableMoveAndCopyCommands();
            return;
        }
        if (disk.getVmEntityType().isTemplateType()) {
            isMoveAllowed = false;
        } else {
            isCopyAllowed = false;
        }
    }
    getCopyCommand().setIsExecutionAllowed(isCopyAllowed);
    getMoveCommand().setIsExecutionAllowed(isMoveAllowed);
}
#method_after
private void updateCopyAndMoveCommandAvailability(List<Disk> disks) {
    boolean isCopyAllowed = true;
    boolean isMoveAllowed = true;
    if (disks == null || disks.isEmpty() || disks.get(0).getDiskStorageType() != DiskStorageType.IMAGE) {
        disableMoveAndCopyCommands();
        return;
    }
    Guid datacenterId = ((DiskImage) disks.get(0)).getStoragePoolId();
    for (Disk disk : disks) {
        if ((!isCopyAllowed && !isMoveAllowed) || disk.getDiskStorageType() != DiskStorageType.IMAGE) {
            disableMoveAndCopyCommands();
            return;
        }
        DiskImage diskImage = (DiskImage) disk;
        if (diskImage.getImageStatus() != ImageStatus.OK || !datacenterId.equals(diskImage.getStoragePoolId())) {
            disableMoveAndCopyCommands();
            return;
        }
        if (disk.getVmEntityType() != null && disk.getVmEntityType().isTemplateType()) {
            isMoveAllowed = false;
        } else {
            isCopyAllowed = false;
        }
    }
    getCopyCommand().setIsExecutionAllowed(isCopyAllowed);
    getMoveCommand().setIsExecutionAllowed(isMoveAllowed);
}
#end_block

#method_before
private boolean isRemoveCommandAvailable() {
    ArrayList<Disk> disks = getSelectedItems() != null ? Linq.<Disk>cast(getSelectedItems()) : new ArrayList<Disk>();
    for (Disk disk : disks) {
        boolean isTemplateDisk = disk.getVmEntityType().isTemplateType();
        boolean isImageLocked = disk.getDiskStorageType() == DiskStorageType.IMAGE && ((DiskImage) disk).getImageStatus() == ImageStatus.LOCKED;
        if (isTemplateDisk || isImageLocked) {
            return false;
        }
    }
    return true;
}
#method_after
private boolean isRemoveCommandAvailable() {
    ArrayList<Disk> disks = getSelectedItems() != null ? Linq.<Disk>cast(getSelectedItems()) : new ArrayList<Disk>();
    for (Disk disk : disks) {
        boolean isTemplateDisk = disk.getVmEntityType() != null && disk.getVmEntityType().isTemplateType();
        boolean isImageLocked = disk.getDiskStorageType() == DiskStorageType.IMAGE && ((DiskImage) disk).getImageStatus() == ImageStatus.LOCKED;
        if (isTemplateDisk || isImageLocked) {
            return false;
        }
    }
    return true;
}
#end_block

#method_before
protected boolean checkOperationIsCorrect() {
    if (getParameters().getOperation() == ImageOperation.Copy && !getImage().getVmEntityType().isTemplateType()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_IS_NOT_TEMPLATE_DISK);
    }
    if (getParameters().getOperation() == ImageOperation.Move && !getImage().getVmEntityType().isVmType()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK);
    }
    return true;
}
#method_after
protected boolean checkOperationIsCorrect() {
    if (getParameters().getOperation() == ImageOperation.Copy && (getImage().getVmEntityType() == null || !getImage().getVmEntityType().isTemplateType())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_IS_NOT_TEMPLATE_DISK);
    }
    if (getParameters().getOperation() == ImageOperation.Move && getImage().getVmEntityType() != null && getImage().getVmEntityType().isTemplateType()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK);
    }
    return true;
}
#end_block

#method_before
protected boolean checkCanBeMoveInVm() {
    List<Pair<VM, VmDevice>> vmsForDisk = getVmsWithVmDeviceInfoForDiskId();
    for (Pair<VM, VmDevice> pair : vmsForDisk) {
        VM currVm = pair.getFirst();
        if (VMStatus.Down != currVm.getStatus()) {
            if (pair.getSecond().getIsPlugged()) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN);
                return false;
            }
        }
    }
    return true;
}
#method_after
protected boolean checkCanBeMoveInVm() {
    return validate(new DiskValidator(getImage()).isDiskPluggedToVmsThatAreNotDown(false, getVmsWithVmDeviceInfoForDiskId()));
}
#end_block

#method_before
private List<Pair<VM, VmDevice>> getVmsWithVmDeviceInfoForDiskId() {
    if (cachedVmsDeviceInfo == null) {
        cachedVmsDeviceInfo = getVmDAO().getVmsWithPlugInfo(getImage().getId());
    }
    return cachedVmsDeviceInfo;
}
#method_after
protected List<Pair<VM, VmDevice>> getVmsWithVmDeviceInfoForDiskId() {
    if (cachedVmsDeviceInfo == null) {
        cachedVmsDeviceInfo = getVmDAO().getVmsWithPlugInfo(getImage().getId());
    }
    return cachedVmsDeviceInfo;
}
#end_block

#method_before
private boolean validateAllVmsForDiskAreDown() {
    if (getDisk().getVmEntityType().isVmType()) {
        for (VM vm : getVmsForDiskId()) {
            if (vm.getStatus() != VMStatus.Down) {
                VmDevice vmDevice = getVmDeviceDAO().get(new VmDeviceId(getDisk().getId(), vm.getId()));
                if (vmDevice.getIsPlugged()) {
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN);
                    return false;
                }
            }
        }
    }
    return true;
}
#method_after
private boolean validateAllVmsForDiskAreDown() {
    if (getDisk().getVmEntityType() != null && getDisk().getVmEntityType().isVmType()) {
        for (VM vm : getVmsForDiskId()) {
            if (vm.getStatus() != VMStatus.Down) {
                VmDevice vmDevice = getVmDeviceDAO().get(new VmDeviceId(getDisk().getId(), vm.getId()));
                if (vmDevice.getIsPlugged()) {
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN);
                    return false;
                }
            }
        }
    }
    return true;
}
#end_block

#method_before
private boolean canRemoveDiskBasedOnImageStorageCheck() {
    boolean retValue = true;
    DiskImage diskImage = getDiskImage();
    if (diskImage.getVmEntityType().isTemplateType()) {
        // Temporary fix until re factoring vm_images_view and image_storage_domain_view
        diskImage.setStorageIds(getDiskImageDao().get(diskImage.getImageId()).getStorageIds());
    } else if ((getParameters().getStorageDomainId() == null) || (Guid.Empty.equals(getParameters().getStorageDomainId()))) {
        getParameters().setStorageDomainId(diskImage.getStorageIds().get(0));
        setStorageDomainId(diskImage.getStorageIds().get(0));
    }
    if (!diskImage.getStorageIds().contains(getParameters().getStorageDomainId())) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_IS_WRONG);
    }
    StorageDomainValidator validator = new StorageDomainValidator(getStorageDomain());
    retValue = retValue && validate(validator.isDomainExistAndActive()) && validate(validator.domainIsValidDestination());
    if (retValue && diskImage.getImageStatus() == ImageStatus.LOCKED) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED);
    }
    if (retValue) {
        if (getDisk().getVmEntityType().isVmType()) {
            retValue = canRemoveVmImageDisk();
        } else if (getDisk().getVmEntityType().isTemplateType()) {
            retValue = canRemoveTemplateDisk();
        }
    }
    return retValue;
}
#method_after
private boolean canRemoveDiskBasedOnImageStorageCheck() {
    boolean retValue = true;
    DiskImage diskImage = getDiskImage();
    if (diskImage.getVmEntityType() != null && diskImage.getVmEntityType().isTemplateType()) {
        // Temporary fix until re factoring vm_images_view and image_storage_domain_view
        diskImage.setStorageIds(getDiskImageDao().get(diskImage.getImageId()).getStorageIds());
    } else if ((getParameters().getStorageDomainId() == null) || (Guid.Empty.equals(getParameters().getStorageDomainId()))) {
        getParameters().setStorageDomainId(diskImage.getStorageIds().get(0));
        setStorageDomainId(diskImage.getStorageIds().get(0));
    }
    if (!diskImage.getStorageIds().contains(getParameters().getStorageDomainId())) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_IS_WRONG);
    }
    StorageDomainValidator validator = new StorageDomainValidator(getStorageDomain());
    retValue = retValue && validate(validator.isDomainExistAndActive()) && validate(validator.domainIsValidDestination());
    if (retValue && diskImage.getImageStatus() == ImageStatus.LOCKED) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED);
    }
    if (retValue && getDisk().getVmEntityType() != null) {
        if (getDisk().getVmEntityType().isVmType()) {
            retValue = canRemoveVmImageDisk();
        } else if (getDisk().getVmEntityType().isTemplateType()) {
            retValue = canRemoveTemplateDisk();
        }
    }
    return retValue;
}
#end_block

#method_before
private void getAttachedTagsToSelectedUsers(TagListModel model) {
    ArrayList<Guid> userIds = new ArrayList<Guid>();
    ArrayList<Guid> grpIds = new ArrayList<Guid>();
    attachedTagsToEntities = new HashMap<Guid, Boolean>();
    allAttachedTags = new ArrayList<org.ovirt.engine.core.common.businessentities.tags>();
    selectedItemsCounter = 0;
    for (Object item : getSelectedItems()) {
        DbUser user = (DbUser) item;
        if (!user.isGroup()) {
            userIds.add(user.getId());
        } else {
            grpIds.add(user.getId());
        }
    }
    for (Guid userId : userIds) {
        AsyncDataProvider.getAttachedTagsToUser(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                UserListModel userListModel = (UserListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                userListModel.allAttachedTags.addAll((ArrayList<org.ovirt.engine.core.common.businessentities.tags>) returnValue);
                userListModel.selectedItemsCounter++;
                if (userListModel.selectedItemsCounter == userListModel.getSelectedItems().size()) {
                    postGetAttachedTags(userListModel, tagListModel);
                }
            }
        }), userId);
    }
    for (Guid grpId : grpIds) {
        AsyncDataProvider.getAttachedTagsToUserGroup(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                UserListModel userListModel = (UserListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                userListModel.allAttachedTags.addAll((ArrayList<org.ovirt.engine.core.common.businessentities.tags>) returnValue);
                userListModel.selectedItemsCounter++;
                if (userListModel.selectedItemsCounter == userListModel.getSelectedItems().size()) {
                    postGetAttachedTags(userListModel, tagListModel);
                }
            }
        }), grpId);
    }
}
#method_after
private void getAttachedTagsToSelectedUsers(TagListModel model) {
    ArrayList<Guid> userIds = new ArrayList<Guid>();
    ArrayList<Guid> grpIds = new ArrayList<Guid>();
    attachedTagsToEntities = new HashMap<Guid, Boolean>();
    allAttachedTags = new ArrayList<Tags>();
    selectedItemsCounter = 0;
    for (Object item : getSelectedItems()) {
        DbUser user = (DbUser) item;
        if (!user.isGroup()) {
            userIds.add(user.getId());
        } else {
            grpIds.add(user.getId());
        }
    }
    for (Guid userId : userIds) {
        AsyncDataProvider.getAttachedTagsToUser(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                UserListModel userListModel = (UserListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                userListModel.allAttachedTags.addAll((ArrayList<Tags>) returnValue);
                userListModel.selectedItemsCounter++;
                if (userListModel.selectedItemsCounter == userListModel.getSelectedItems().size()) {
                    postGetAttachedTags(userListModel, tagListModel);
                }
            }
        }), userId);
    }
    for (Guid grpId : grpIds) {
        AsyncDataProvider.getAttachedTagsToUserGroup(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                UserListModel userListModel = (UserListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                userListModel.allAttachedTags.addAll((ArrayList<Tags>) returnValue);
                userListModel.selectedItemsCounter++;
                if (userListModel.selectedItemsCounter == userListModel.getSelectedItems().size()) {
                    postGetAttachedTags(userListModel, tagListModel);
                }
            }
        }), grpId);
    }
}
#end_block

#method_before
private void postGetAttachedTags(UserListModel userListModel, TagListModel tagListModel) {
    if (userListModel.getLastExecutedCommand() == getAssignTagsCommand()) {
        ArrayList<org.ovirt.engine.core.common.businessentities.tags> attachedTags = Linq.distinct(userListModel.allAttachedTags, new TagsEqualityComparer());
        for (org.ovirt.engine.core.common.businessentities.tags a : attachedTags) {
            int count = 0;
            for (org.ovirt.engine.core.common.businessentities.tags b : allAttachedTags) {
                if (b.gettag_id().equals(a.gettag_id())) {
                    count++;
                }
            }
            userListModel.attachedTagsToEntities.put(a.gettag_id(), count == userListModel.getSelectedItems().size());
        }
        tagListModel.setAttachedTagsToEntities(userListModel.attachedTagsToEntities);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(userListModel.getLastExecutedCommand().getName(), "OnAssignTags")) {
        userListModel.postOnAssignTags(tagListModel.getAttachedTagsToEntities());
    }
}
#method_after
private void postGetAttachedTags(UserListModel userListModel, TagListModel tagListModel) {
    if (userListModel.getLastExecutedCommand() == getAssignTagsCommand()) {
        ArrayList<Tags> attachedTags = Linq.distinct(userListModel.allAttachedTags, new TagsEqualityComparer());
        for (Tags a : attachedTags) {
            int count = 0;
            for (Tags b : allAttachedTags) {
                if (b.gettag_id().equals(a.gettag_id())) {
                    count++;
                }
            }
            userListModel.attachedTagsToEntities.put(a.gettag_id(), count == userListModel.getSelectedItems().size());
        }
        tagListModel.setAttachedTagsToEntities(userListModel.attachedTagsToEntities);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(userListModel.getLastExecutedCommand().getName(), "OnAssignTags")) {
        userListModel.postOnAssignTags(tagListModel.getAttachedTagsToEntities());
    }
}
#end_block

#method_before
@Override
protected void syncSearch() {
    super.syncSearch();
    AsyncDataProvider.getRootTag(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            TagListModel tagListModel = (TagListModel) target;
            TagModel rootTag = tagListModel.tagToModel((org.ovirt.engine.core.common.businessentities.tags) returnValue);
            rootTag.getName().setEntity(ConstantsManager.getInstance().getConstants().rootTag());
            rootTag.setType(TagModelType.Root);
            rootTag.setIsChangable(false);
            tagListModel.setItems(new ArrayList<TagModel>(Arrays.asList(new TagModel[] { rootTag })));
        }
    }));
}
#method_after
@Override
protected void syncSearch() {
    super.syncSearch();
    AsyncDataProvider.getRootTag(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            TagListModel tagListModel = (TagListModel) target;
            TagModel rootTag = tagListModel.tagToModel((Tags) returnValue);
            rootTag.getName().setEntity(ConstantsManager.getInstance().getConstants().rootTag());
            rootTag.setType(TagModelType.Root);
            rootTag.setIsChangable(false);
            tagListModel.setItems(new ArrayList<TagModel>(Arrays.asList(new TagModel[] { rootTag })));
        }
    }));
}
#end_block

#method_before
public TagModel tagToModel(org.ovirt.engine.core.common.businessentities.tags tag) {
    EntityModel tempVar = new EntityModel();
    tempVar.setEntity(tag.gettag_name());
    EntityModel name = tempVar;
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setEntity(tag.getdescription());
    EntityModel description = tempVar2;
    ArrayList<TagModel> children = new ArrayList<TagModel>();
    for (org.ovirt.engine.core.common.businessentities.tags a : tag.getChildren()) {
        children.add(tagToModel(a));
    }
    TagModel model = new TagModel();
    model.setId(tag.gettag_id());
    model.setName(name);
    model.setDescription(description);
    model.setType((tag.getIsReadonly() == null ? false : tag.getIsReadonly()) ? TagModelType.ReadOnly : TagModelType.Regular);
    model.setSelection(false);
    model.setParentId(tag.getparent_id() == null ? Guid.Empty : tag.getparent_id());
    model.setChildren(children);
    for (TagModel child : children) {
        child.setParent(model);
    }
    model.getSelectionChangedEvent().addListener(this);
    return model;
}
#method_after
public TagModel tagToModel(Tags tag) {
    EntityModel tempVar = new EntityModel();
    tempVar.setEntity(tag.gettag_name());
    EntityModel name = tempVar;
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setEntity(tag.getdescription());
    EntityModel description = tempVar2;
    ArrayList<TagModel> children = new ArrayList<TagModel>();
    for (Tags a : tag.getChildren()) {
        children.add(tagToModel(a));
    }
    TagModel model = new TagModel();
    model.setId(tag.gettag_id());
    model.setName(name);
    model.setDescription(description);
    model.setType((tag.getIsReadonly() == null ? false : tag.getIsReadonly()) ? TagModelType.ReadOnly : TagModelType.Regular);
    model.setSelection(false);
    model.setParentId(tag.getparent_id() == null ? Guid.Empty : tag.getparent_id());
    model.setChildren(children);
    for (TagModel child : children) {
        child.setParent(model);
    }
    model.getSelectionChangedEvent().addListener(this);
    return model;
}
#end_block

#method_before
public void onSave() {
    TagModel model = (TagModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    org.ovirt.engine.core.common.businessentities.tags tempVar = new org.ovirt.engine.core.common.businessentities.tags();
    tempVar.settag_id(model.getIsNew() ? Guid.Empty : getSelectedItem().getId());
    tempVar.setparent_id(model.getIsNew() ? getSelectedItem().getId() : getSelectedItem().getParentId());
    tempVar.settag_name((String) model.getName().getEntity());
    tempVar.setdescription((String) model.getDescription().getEntity());
    org.ovirt.engine.core.common.businessentities.tags tag = tempVar;
    model.startProgress(null);
    Frontend.getInstance().runAction(model.getIsNew() ? VdcActionType.AddTag : VdcActionType.UpdateTag, new TagsOperationParameters(tag), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            TagListModel localModel = (TagListModel) result.getState();
            localModel.postOnSave(result.getReturnValue());
        }
    }, this);
}
#method_after
public void onSave() {
    TagModel model = (TagModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    Tags tempVar = new Tags();
    tempVar.settag_id(model.getIsNew() ? Guid.Empty : getSelectedItem().getId());
    tempVar.setparent_id(model.getIsNew() ? getSelectedItem().getId() : getSelectedItem().getParentId());
    tempVar.settag_name((String) model.getName().getEntity());
    tempVar.setdescription((String) model.getDescription().getEntity());
    Tags tag = tempVar;
    model.startProgress(null);
    Frontend.getInstance().runAction(model.getIsNew() ? VdcActionType.AddTag : VdcActionType.UpdateTag, new TagsOperationParameters(tag), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            TagListModel localModel = (TagListModel) result.getState();
            localModel.postOnSave(result.getReturnValue());
        }
    }, this);
}
#end_block

#method_before
private void getAttachedTagsToSelectedHosts(TagListModel model) {
    ArrayList<Guid> hostIds = new ArrayList<Guid>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        hostIds.add(vds.getId());
    }
    attachedTagsToEntities = new HashMap<Guid, Boolean>();
    allAttachedTags = new ArrayList<org.ovirt.engine.core.common.businessentities.tags>();
    selectedItemsCounter = 0;
    for (Guid hostId : hostIds) {
        AsyncDataProvider.getAttachedTagsToHost(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                HostListModel hostListModel = (HostListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                hostListModel.allAttachedTags.addAll((ArrayList<org.ovirt.engine.core.common.businessentities.tags>) returnValue);
                hostListModel.selectedItemsCounter++;
                if (hostListModel.selectedItemsCounter == hostListModel.getSelectedItems().size()) {
                    postGetAttachedTags(hostListModel, tagListModel);
                }
            }
        }), hostId);
    }
}
#method_after
private void getAttachedTagsToSelectedHosts(TagListModel model) {
    ArrayList<Guid> hostIds = new ArrayList<Guid>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        hostIds.add(vds.getId());
    }
    attachedTagsToEntities = new HashMap<Guid, Boolean>();
    allAttachedTags = new ArrayList<Tags>();
    selectedItemsCounter = 0;
    for (Guid hostId : hostIds) {
        AsyncDataProvider.getAttachedTagsToHost(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                HostListModel hostListModel = (HostListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                hostListModel.allAttachedTags.addAll((ArrayList<Tags>) returnValue);
                hostListModel.selectedItemsCounter++;
                if (hostListModel.selectedItemsCounter == hostListModel.getSelectedItems().size()) {
                    postGetAttachedTags(hostListModel, tagListModel);
                }
            }
        }), hostId);
    }
}
#end_block

#method_before
private void postGetAttachedTags(HostListModel hostListModel, TagListModel tagListModel) {
    if (hostListModel.getLastExecutedCommand() == getAssignTagsCommand()) {
        ArrayList<org.ovirt.engine.core.common.businessentities.tags> attachedTags = Linq.distinct(hostListModel.allAttachedTags, new TagsEqualityComparer());
        for (org.ovirt.engine.core.common.businessentities.tags tag : attachedTags) {
            int count = 0;
            for (org.ovirt.engine.core.common.businessentities.tags tag2 : hostListModel.allAttachedTags) {
                if (tag2.gettag_id().equals(tag.gettag_id())) {
                    count++;
                }
            }
            hostListModel.attachedTagsToEntities.put(tag.gettag_id(), count == hostListModel.getSelectedItems().size());
        }
        tagListModel.setAttachedTagsToEntities(hostListModel.attachedTagsToEntities);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(hostListModel.getLastExecutedCommand().getName(), "OnAssignTags")) {
        hostListModel.postOnAssignTags(tagListModel.getAttachedTagsToEntities());
    }
}
#method_after
private void postGetAttachedTags(HostListModel hostListModel, TagListModel tagListModel) {
    if (hostListModel.getLastExecutedCommand() == getAssignTagsCommand()) {
        ArrayList<Tags> attachedTags = Linq.distinct(hostListModel.allAttachedTags, new TagsEqualityComparer());
        for (Tags tag : attachedTags) {
            int count = 0;
            for (Tags tag2 : hostListModel.allAttachedTags) {
                if (tag2.gettag_id().equals(tag.gettag_id())) {
                    count++;
                }
            }
            hostListModel.attachedTagsToEntities.put(tag.gettag_id(), count == hostListModel.getSelectedItems().size());
        }
        tagListModel.setAttachedTagsToEntities(hostListModel.attachedTagsToEntities);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(hostListModel.getLastExecutedCommand().getName(), "OnAssignTags")) {
        hostListModel.postOnAssignTags(tagListModel.getAttachedTagsToEntities());
    }
}
#end_block

#method_before
public void init(final boolean isEdit) {
    setIsEdit(isEdit);
    setName(new EntityModel());
    setDescription(new EntityModel());
    setComment(new EntityModel());
    setEnableTrustedService(new EntityModel(false));
    setAllowClusterWithVirtGlusterEnabled(true);
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            setAllowClusterWithVirtGlusterEnabled((Boolean) returnValue);
        }
    }));
    setEnableOvirtService(new EntityModel());
    setEnableGlusterService(new EntityModel());
    getEnableOvirtService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && (Boolean) getEnableOvirtService().getEntity()) {
                getEnableGlusterService().setEntity(Boolean.FALSE);
            }
            getEnableGlusterService().setIsChangable(true);
            getEnableTrustedService().setEntity(false);
            if (getEnableOvirtService().getEntity() != null && (Boolean) getEnableOvirtService().getEntity()) {
                if (getEnableGlusterService().getEntity() != null && !(Boolean) getEnableGlusterService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            } else {
                getEnableTrustedService().setIsChangable(false);
            }
        }
    });
    getEnableOvirtService().setEntity(ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    getEnableOvirtService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.VirtOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    initImportCluster(isEdit);
    getEnableGlusterService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && (Boolean) getEnableGlusterService().getEntity()) {
                getEnableOvirtService().setEntity(Boolean.FALSE);
            }
            if (!isEdit && getEnableGlusterService().getEntity() != null && (Boolean) getEnableGlusterService().getEntity()) {
                getIsImportGlusterConfiguration().setIsAvailable(true);
                getGlusterHostAddress().setIsAvailable(true);
                getGlusterHostFingerprint().setIsAvailable(true);
                getGlusterHostPassword().setIsAvailable(true);
            } else {
                getIsImportGlusterConfiguration().setIsAvailable(false);
                getIsImportGlusterConfiguration().setEntity(false);
                getGlusterHostAddress().setIsAvailable(false);
                getGlusterHostFingerprint().setIsAvailable(false);
                getGlusterHostPassword().setIsAvailable(false);
            }
            if (getEnableGlusterService().getEntity() != null && (Boolean) getEnableGlusterService().getEntity()) {
                getEnableTrustedService().setEntity(false);
                getEnableTrustedService().setIsChangable(false);
            } else {
                if (getEnableOvirtService().getEntity() != null && (Boolean) getEnableOvirtService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            }
        }
    });
    getEnableTrustedService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (getEnableTrustedService().getEntity() != null && (Boolean) getEnableTrustedService().getEntity()) {
                getEnableGlusterService().setEntity(false);
                getEnableGlusterService().setIsChangable(false);
            } else {
                getEnableGlusterService().setIsChangable(true);
            }
        }
    });
    getEnableGlusterService().setEntity(ApplicationModeHelper.getUiMode() == ApplicationMode.GlusterOnly);
    getEnableGlusterService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.GlusterOnly));
    setOptimizationNone(new EntityModel());
    setOptimizationForServer(new EntityModel());
    setOptimizationForDesktop(new EntityModel());
    setOptimizationCustom(new EntityModel());
    EntityModel tempVar = new EntityModel();
    tempVar.setEntity(false);
    setOptimizationNone_IsSelected(tempVar);
    getOptimizationNone_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setEntity(false);
    setOptimizationForServer_IsSelected(tempVar2);
    getOptimizationForServer_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setEntity(false);
    setOptimizationForDesktop_IsSelected(tempVar3);
    getOptimizationForDesktop_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar4 = new EntityModel();
    tempVar4.setEntity(false);
    tempVar4.setIsAvailable(false);
    setOptimizationCustom_IsSelected(tempVar4);
    getOptimizationCustom_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar5 = new EntityModel();
    tempVar5.setEntity(false);
    setMigrateOnErrorOption_YES(tempVar5);
    getMigrateOnErrorOption_YES().getEntityChangedEvent().addListener(this);
    EntityModel tempVar6 = new EntityModel();
    tempVar6.setEntity(false);
    setMigrateOnErrorOption_NO(tempVar6);
    getMigrateOnErrorOption_NO().getEntityChangedEvent().addListener(this);
    EntityModel tempVar7 = new EntityModel();
    tempVar7.setEntity(false);
    setMigrateOnErrorOption_HA_ONLY(tempVar7);
    getMigrateOnErrorOption_HA_ONLY().getEntityChangedEvent().addListener(this);
    setEnableBallooning(new EntityModel());
    getEnableBallooning().setEntity(false);
    // Optimization methods:
    // default value =100;
    setDefaultMemoryOvercommit(AsyncDataProvider.getClusterDefaultMemoryOverCommit());
    setCountThreadsAsCores(new EntityModel(AsyncDataProvider.getClusterDefaultCountThreadsAsCores()));
    setVersionSupportsCpuThreads(new EntityModel(true));
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            clusterModel.setDesktopOverCommit((Integer) result);
            AsyncQuery _asyncQuery1 = new AsyncQuery();
            _asyncQuery1.setModel(clusterModel);
            _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result1) {
                    ClusterModel clusterModel1 = (ClusterModel) model1;
                    clusterModel1.setServerOverCommit((Integer) result1);
                    // temp is used for conversion purposes
                    EntityModel temp;
                    temp = clusterModel1.getOptimizationNone();
                    temp.setEntity(clusterModel1.getDefaultMemoryOvercommit());
                    // res1, res2 is used for conversion purposes.
                    boolean res1 = clusterModel1.getDesktopOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    boolean res2 = clusterModel1.getServerOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    temp = clusterModel1.getOptimizationNone_IsSelected();
                    setIsSelected(res1 && res2);
                    temp.setEntity(getIsSelected());
                    temp = clusterModel1.getOptimizationForServer();
                    temp.setEntity(clusterModel1.getServerOverCommit());
                    temp = clusterModel1.getOptimizationForServer_IsSelected();
                    temp.setEntity(clusterModel1.getServerOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationForDesktop();
                    temp.setEntity(clusterModel1.getDesktopOverCommit());
                    temp = clusterModel1.getOptimizationForDesktop_IsSelected();
                    temp.setEntity(clusterModel1.getDesktopOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationCustom();
                    temp.setIsAvailable(false);
                    temp.setIsChangable(false);
                    if (clusterModel1.getIsEdit()) {
                        clusterModel1.postInit();
                    }
                }
            };
            AsyncDataProvider.getClusterServerMemoryOverCommit(_asyncQuery1);
        }
    };
    AsyncDataProvider.getClusterDesktopMemoryOverCommit(_asyncQuery);
    setDataCenter(new ListModel());
    getDataCenter().getSelectedItemChangedEvent().addListener(this);
    getDataCenter().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setCPU(new ListModel());
    getCPU().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setVersion(new ListModel());
    getVersion().getSelectedItemChangedEvent().addListener(this);
    setMigrateOnErrorOption(MigrateOnErrorOptions.YES);
    setIsGeneralTabValid(true);
    setIsResiliencePolicyTabAvailable(true);
    setClusterPolicy(new ListModel());
    setCustomPropertySheet(new KeyValueModel());
    getClusterPolicy().getSelectedItemChangedEvent().addListener(this);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllPolicyUnits, new VdcQueryParametersBase(), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<PolicyUnit> policyUnits = (ArrayList<PolicyUnit>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            policyUnitMap = new LinkedHashMap<Guid, PolicyUnit>();
            for (PolicyUnit policyUnit : policyUnits) {
                policyUnitMap.put(policyUnit.getId(), policyUnit);
            }
            Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, new VdcQueryParametersBase(), new AsyncQuery(model, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    ClusterModel clusterModel = (ClusterModel) model;
                    ArrayList<ClusterPolicy> list = (ArrayList<ClusterPolicy>) ((VdcQueryReturnValue) returnValue).getReturnValue();
                    clusterModel.getClusterPolicy().setItems(list);
                    ClusterPolicy defaultClusterPolicy = null;
                    ClusterPolicy selectedClusterPolicy = null;
                    for (ClusterPolicy clusterPolicy : list) {
                        if (clusterModel.getIsEdit() && getEntity() != null && clusterPolicy.getId().equals(getEntity().getClusterPolicyId())) {
                            selectedClusterPolicy = clusterPolicy;
                        }
                        if (clusterPolicy.isDefaultPolicy()) {
                            defaultClusterPolicy = clusterPolicy;
                        }
                    }
                    if (selectedClusterPolicy != null) {
                        clusterModel.getClusterPolicy().setSelectedItem(selectedClusterPolicy);
                    } else {
                        clusterModel.getClusterPolicy().setSelectedItem(defaultClusterPolicy);
                    }
                    clusterPolicyChanged();
                }
            }));
        }
    }));
}
#method_after
public void init(final boolean isEdit) {
    setIsEdit(isEdit);
    setName(new EntityModel());
    setDescription(new EntityModel());
    setComment(new EntityModel());
    setEnableTrustedService(new EntityModel(false));
    setAllowClusterWithVirtGlusterEnabled(true);
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            setAllowClusterWithVirtGlusterEnabled((Boolean) returnValue);
        }
    }));
    setEnableOvirtService(new EntityModel());
    setEnableGlusterService(new EntityModel());
    getEnableOvirtService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && (Boolean) getEnableOvirtService().getEntity()) {
                getEnableGlusterService().setEntity(Boolean.FALSE);
            }
            getEnableGlusterService().setIsChangable(true);
            getEnableTrustedService().setEntity(false);
            if (getEnableOvirtService().getEntity() != null && (Boolean) getEnableOvirtService().getEntity()) {
                if (getEnableGlusterService().getEntity() != null && !(Boolean) getEnableGlusterService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            } else {
                getEnableTrustedService().setIsChangable(false);
            }
        }
    });
    getEnableOvirtService().setEntity(ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    getEnableOvirtService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.VirtOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly));
    initImportCluster(isEdit);
    getEnableGlusterService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!getAllowClusterWithVirtGlusterEnabled() && (Boolean) getEnableGlusterService().getEntity()) {
                getEnableOvirtService().setEntity(Boolean.FALSE);
            }
            if (!isEdit && getEnableGlusterService().getEntity() != null && (Boolean) getEnableGlusterService().getEntity()) {
                getIsImportGlusterConfiguration().setIsAvailable(true);
                getGlusterHostAddress().setIsAvailable(true);
                getGlusterHostFingerprint().setIsAvailable(true);
                getGlusterHostPassword().setIsAvailable(true);
            } else {
                getIsImportGlusterConfiguration().setIsAvailable(false);
                getIsImportGlusterConfiguration().setEntity(false);
                getGlusterHostAddress().setIsAvailable(false);
                getGlusterHostFingerprint().setIsAvailable(false);
                getGlusterHostPassword().setIsAvailable(false);
            }
            if (getEnableGlusterService().getEntity() != null && (Boolean) getEnableGlusterService().getEntity()) {
                getEnableTrustedService().setEntity(false);
                getEnableTrustedService().setIsChangable(false);
            } else {
                if (getEnableOvirtService().getEntity() != null && (Boolean) getEnableOvirtService().getEntity()) {
                    getEnableTrustedService().setIsChangable(true);
                } else {
                    getEnableTrustedService().setIsChangable(false);
                }
            }
        }
    });
    getEnableTrustedService().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (getEnableTrustedService().getEntity() != null && (Boolean) getEnableTrustedService().getEntity()) {
                getEnableGlusterService().setEntity(false);
                getEnableGlusterService().setIsChangable(false);
            } else {
                getEnableGlusterService().setIsChangable(true);
            }
        }
    });
    getEnableGlusterService().setEntity(ApplicationModeHelper.getUiMode() == ApplicationMode.GlusterOnly);
    getEnableGlusterService().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly && ApplicationModeHelper.isModeSupported(ApplicationMode.GlusterOnly));
    setOptimizationNone(new EntityModel());
    setOptimizationForServer(new EntityModel());
    setOptimizationForDesktop(new EntityModel());
    setOptimizationCustom(new EntityModel());
    EntityModel tempVar = new EntityModel();
    tempVar.setEntity(false);
    setOptimizationNone_IsSelected(tempVar);
    getOptimizationNone_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setEntity(false);
    setOptimizationForServer_IsSelected(tempVar2);
    getOptimizationForServer_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setEntity(false);
    setOptimizationForDesktop_IsSelected(tempVar3);
    getOptimizationForDesktop_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar4 = new EntityModel();
    tempVar4.setEntity(false);
    tempVar4.setIsAvailable(false);
    setOptimizationCustom_IsSelected(tempVar4);
    getOptimizationCustom_IsSelected().getEntityChangedEvent().addListener(this);
    EntityModel tempVar5 = new EntityModel();
    tempVar5.setEntity(false);
    setMigrateOnErrorOption_YES(tempVar5);
    getMigrateOnErrorOption_YES().getEntityChangedEvent().addListener(this);
    EntityModel tempVar6 = new EntityModel();
    tempVar6.setEntity(false);
    setMigrateOnErrorOption_NO(tempVar6);
    getMigrateOnErrorOption_NO().getEntityChangedEvent().addListener(this);
    EntityModel tempVar7 = new EntityModel();
    tempVar7.setEntity(false);
    setMigrateOnErrorOption_HA_ONLY(tempVar7);
    getMigrateOnErrorOption_HA_ONLY().getEntityChangedEvent().addListener(this);
    setEnableBallooning(new EntityModel());
    getEnableBallooning().setEntity(false);
    // Optimization methods:
    // default value =100;
    setDefaultMemoryOvercommit(AsyncDataProvider.getClusterDefaultMemoryOverCommit());
    setCountThreadsAsCores(new EntityModel(AsyncDataProvider.getClusterDefaultCountThreadsAsCores()));
    setVersionSupportsCpuThreads(new EntityModel(true));
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            clusterModel.setDesktopOverCommit((Integer) result);
            AsyncQuery _asyncQuery1 = new AsyncQuery();
            _asyncQuery1.setModel(clusterModel);
            _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result1) {
                    ClusterModel clusterModel1 = (ClusterModel) model1;
                    clusterModel1.setServerOverCommit((Integer) result1);
                    // temp is used for conversion purposes
                    EntityModel temp;
                    temp = clusterModel1.getOptimizationNone();
                    temp.setEntity(clusterModel1.getDefaultMemoryOvercommit());
                    // res1, res2 is used for conversion purposes.
                    boolean res1 = clusterModel1.getDesktopOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    boolean res2 = clusterModel1.getServerOverCommit() != clusterModel1.getDefaultMemoryOvercommit();
                    temp = clusterModel1.getOptimizationNone_IsSelected();
                    setIsSelected(res1 && res2);
                    temp.setEntity(getIsSelected());
                    temp = clusterModel1.getOptimizationForServer();
                    temp.setEntity(clusterModel1.getServerOverCommit());
                    temp = clusterModel1.getOptimizationForServer_IsSelected();
                    temp.setEntity(clusterModel1.getServerOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationForDesktop();
                    temp.setEntity(clusterModel1.getDesktopOverCommit());
                    temp = clusterModel1.getOptimizationForDesktop_IsSelected();
                    temp.setEntity(clusterModel1.getDesktopOverCommit() == clusterModel1.getDefaultMemoryOvercommit());
                    temp = clusterModel1.getOptimizationCustom();
                    temp.setIsAvailable(false);
                    temp.setIsChangable(false);
                    if (clusterModel1.getIsEdit()) {
                        clusterModel1.postInit();
                    }
                }
            };
            AsyncDataProvider.getClusterServerMemoryOverCommit(_asyncQuery1);
        }
    };
    AsyncDataProvider.getClusterDesktopMemoryOverCommit(_asyncQuery);
    setDataCenter(new ListModel());
    getDataCenter().getSelectedItemChangedEvent().addListener(this);
    getDataCenter().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setCPU(new ListModel());
    getCPU().setIsAvailable(ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly);
    setVersion(new ListModel());
    getVersion().getSelectedItemChangedEvent().addListener(this);
    setMigrateOnErrorOption(MigrateOnErrorOptions.YES);
    setArchitecture(new ListModel());
    getArchitecture().setItems(new ArrayList<ArchitectureType>(Arrays.asList(ArchitectureType.values())));
    setIsGeneralTabValid(true);
    setIsResiliencePolicyTabAvailable(true);
    setClusterPolicy(new ListModel());
    setCustomPropertySheet(new KeyValueModel());
    getClusterPolicy().getSelectedItemChangedEvent().addListener(this);
    Frontend.getInstance().runQuery(VdcQueryType.GetAllPolicyUnits, new VdcQueryParametersBase(), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            ArrayList<PolicyUnit> policyUnits = (ArrayList<PolicyUnit>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            policyUnitMap = new LinkedHashMap<Guid, PolicyUnit>();
            for (PolicyUnit policyUnit : policyUnits) {
                policyUnitMap.put(policyUnit.getId(), policyUnit);
            }
            Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, new VdcQueryParametersBase(), new AsyncQuery(model, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    ClusterModel clusterModel = (ClusterModel) model;
                    ArrayList<ClusterPolicy> list = (ArrayList<ClusterPolicy>) ((VdcQueryReturnValue) returnValue).getReturnValue();
                    clusterModel.getClusterPolicy().setItems(list);
                    ClusterPolicy defaultClusterPolicy = null;
                    ClusterPolicy selectedClusterPolicy = null;
                    for (ClusterPolicy clusterPolicy : list) {
                        if (clusterModel.getIsEdit() && getEntity() != null && clusterPolicy.getId().equals(getEntity().getClusterPolicyId())) {
                            selectedClusterPolicy = clusterPolicy;
                        }
                        if (clusterPolicy.isDefaultPolicy()) {
                            defaultClusterPolicy = clusterPolicy;
                        }
                    }
                    if (selectedClusterPolicy != null) {
                        clusterModel.getClusterPolicy().setSelectedItem(selectedClusterPolicy);
                    } else {
                        clusterModel.getClusterPolicy().setSelectedItem(defaultClusterPolicy);
                    }
                    clusterPolicyChanged();
                }
            }));
        }
    }));
}
#end_block

#method_before
private void storagePool_SelectedItemChanged(EventArgs e) {
    // possible versions for new cluster (when editing cluster, this event won't occur)
    // are actually the possible versions for the data-center that the cluster is going
    // to be attached to.
    StoragePool selectedDataCenter = (StoragePool) getDataCenter().getSelectedItem();
    if (selectedDataCenter == null) {
        return;
    }
    if (selectedDataCenter.getStorageType() == StorageType.LOCALFS) {
        setIsResiliencePolicyTabAvailable(false);
    } else {
        setIsResiliencePolicyTabAvailable(true);
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<Version> versions = (ArrayList<Version>) result;
            clusterModel.getVersion().setItems(versions);
            if (!versions.contains(clusterModel.getVersion().getSelectedItem())) {
                if (versions.contains(((StoragePool) clusterModel.getDataCenter().getSelectedItem()).getcompatibility_version())) {
                    clusterModel.getVersion().setSelectedItem(((StoragePool) clusterModel.getDataCenter().getSelectedItem()).getcompatibility_version());
                } else {
                    clusterModel.getVersion().setSelectedItem(Linq.selectHighestVersion(versions));
                }
            } else if (clusterModel.getIsEdit()) {
                clusterModel.getVersion().setSelectedItem(Linq.firstOrDefault(versions, new Linq.VersionPredicate(clusterModel.getEntity().getcompatibility_version())));
            }
        }
    };
    AsyncDataProvider.getDataCenterVersions(_asyncQuery, selectedDataCenter.getId());
}
#method_after
private void storagePool_SelectedItemChanged(EventArgs e) {
    // possible versions for new cluster (when editing cluster, this event won't occur)
    // are actually the possible versions for the data-center that the cluster is going
    // to be attached to.
    StoragePool selectedDataCenter = (StoragePool) getDataCenter().getSelectedItem();
    if (selectedDataCenter == null) {
        return;
    }
    if (selectedDataCenter.getStorageType() == StorageType.LOCALFS) {
        setIsResiliencePolicyTabAvailable(false);
    } else {
        setIsResiliencePolicyTabAvailable(true);
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<Version> versions = (ArrayList<Version>) result;
            Version selectedVersion = (Version) clusterModel.getVersion().getSelectedItem();
            clusterModel.getVersion().setItems(versions);
            if (selectedVersion == null || !versions.contains(selectedVersion)) {
                clusterModel.getVersion().setSelectedItem(Linq.selectHighestVersion(versions));
            } else if (clusterModel.getIsEdit()) {
                clusterModel.getVersion().setSelectedItem(Linq.firstOrDefault(versions, new Linq.VersionPredicate(clusterModel.getEntity().getcompatibility_version())));
            } else {
                clusterModel.getVersion().setSelectedItem(selectedVersion);
            }
        }
    };
    AsyncDataProvider.getDataCenterVersions(_asyncQuery, selectedDataCenter.getId());
}
#end_block

#method_before
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                tags tag = (tags) source;
                tags root = new tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new tags();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void getRootTag(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                Tags tag = (Tags) source;
                Tags root = new Tags(tag.getdescription(), tag.getparent_id(), tag.getIsReadonly(), tag.gettag_id(), tag.gettag_name());
                if (tag.getChildren() != null) {
                    fillTagsRecursive(root, tag.getChildren());
                }
                return root;
            }
            return new Tags();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetRootTag, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<tags> ret = new ArrayList<tags>();
                for (tags tags : (ArrayList<tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new tags();
        }
    };
}
#method_after
private static void setAttachedTagsConverter(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<Tags> ret = new ArrayList<Tags>();
                for (Tags tags : (ArrayList<Tags>) source) {
                    if (tags.gettype() == TagsType.GeneralTag) {
                        ret.add(tags);
                    }
                }
                return ret;
            }
            return new Tags();
        }
    };
}
#end_block

#method_before
public static void fillTagsRecursive(tags tagToFill, List<tags> children) {
    ArrayList<tags> list = new ArrayList<tags>();
    for (tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#method_after
public static void fillTagsRecursive(Tags tagToFill, List<Tags> children) {
    ArrayList<Tags> list = new ArrayList<Tags>();
    for (Tags tag : children) {
        // tags child = new tags(tag.description, tag.parent_id, tag.IsReadonly, tag.tag_id, tag.tag_name);
        if (tag.gettype() == TagsType.GeneralTag) {
            list.add(tag);
            if (tag.getChildren() != null) {
                fillTagsRecursive(tag, tag.getChildren());
            }
        }
    }
    tagToFill.setChildren(list);
}
#end_block

#method_before
private void getAttachedTagsToSelectedVMs(TagListModel model) {
    ArrayList<Guid> vmIds = new ArrayList<Guid>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        vmIds.add(vm.getId());
    }
    attachedTagsToEntities = new HashMap<Guid, Boolean>();
    allAttachedTags = new ArrayList<org.ovirt.engine.core.common.businessentities.tags>();
    selectedItemsCounter = 0;
    for (Guid id : vmIds) {
        AsyncDataProvider.getAttachedTagsToVm(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                VmListModel vmListModel = (VmListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                vmListModel.allAttachedTags.addAll((ArrayList<org.ovirt.engine.core.common.businessentities.tags>) returnValue);
                vmListModel.selectedItemsCounter++;
                if (vmListModel.selectedItemsCounter == vmListModel.getSelectedItems().size()) {
                    postGetAttachedTags(vmListModel, tagListModel);
                }
            }
        }), id);
    }
}
#method_after
private void getAttachedTagsToSelectedVMs(TagListModel model) {
    ArrayList<Guid> vmIds = new ArrayList<Guid>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        vmIds.add(vm.getId());
    }
    attachedTagsToEntities = new HashMap<Guid, Boolean>();
    allAttachedTags = new ArrayList<Tags>();
    selectedItemsCounter = 0;
    for (Guid id : vmIds) {
        AsyncDataProvider.getAttachedTagsToVm(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                VmListModel vmListModel = (VmListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                vmListModel.allAttachedTags.addAll((ArrayList<Tags>) returnValue);
                vmListModel.selectedItemsCounter++;
                if (vmListModel.selectedItemsCounter == vmListModel.getSelectedItems().size()) {
                    postGetAttachedTags(vmListModel, tagListModel);
                }
            }
        }), id);
    }
}
#end_block

#method_before
private void postGetAttachedTags(VmListModel vmListModel, TagListModel tagListModel) {
    if (vmListModel.getLastExecutedCommand() == getAssignTagsCommand()) {
        ArrayList<org.ovirt.engine.core.common.businessentities.tags> attachedTags = Linq.distinct(vmListModel.allAttachedTags, new TagsEqualityComparer());
        for (org.ovirt.engine.core.common.businessentities.tags tag : attachedTags) {
            int count = 0;
            for (org.ovirt.engine.core.common.businessentities.tags tag2 : vmListModel.allAttachedTags) {
                if (tag2.gettag_id().equals(tag.gettag_id())) {
                    count++;
                }
            }
            vmListModel.attachedTagsToEntities.put(tag.gettag_id(), count == vmListModel.getSelectedItems().size());
        }
        tagListModel.setAttachedTagsToEntities(vmListModel.attachedTagsToEntities);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(vmListModel.getLastExecutedCommand().getName(), "OnAssignTags")) {
        vmListModel.postOnAssignTags(tagListModel.getAttachedTagsToEntities());
    }
}
#method_after
private void postGetAttachedTags(VmListModel vmListModel, TagListModel tagListModel) {
    if (vmListModel.getLastExecutedCommand() == getAssignTagsCommand()) {
        ArrayList<Tags> attachedTags = Linq.distinct(vmListModel.allAttachedTags, new TagsEqualityComparer());
        for (Tags tag : attachedTags) {
            int count = 0;
            for (Tags tag2 : vmListModel.allAttachedTags) {
                if (tag2.gettag_id().equals(tag.gettag_id())) {
                    count++;
                }
            }
            vmListModel.attachedTagsToEntities.put(tag.gettag_id(), count == vmListModel.getSelectedItems().size());
        }
        tagListModel.setAttachedTagsToEntities(vmListModel.attachedTagsToEntities);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(vmListModel.getLastExecutedCommand().getName(), "OnAssignTags")) {
        vmListModel.postOnAssignTags(tagListModel.getAttachedTagsToEntities());
    }
}
#end_block

#method_before
public void edit() {
    final VDSGroup cluster = (VDSGroup) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    final UIConstants constants = ConstantsManager.getInstance().getConstants();
    final ClusterModel clusterModel = new ClusterModel();
    clusterModel.setEntity(cluster);
    clusterModel.init(true);
    clusterModel.getEnableTrustedService().setEntity(cluster.supportsTrustedService());
    setWindow(clusterModel);
    clusterModel.setTitle(ConstantsManager.getInstance().getConstants().editClusterTitle());
    // $NON-NLS-1$
    clusterModel.setHashName("edit_cluster");
    clusterModel.setOriginalName(cluster.getName());
    clusterModel.getName().setEntity(cluster.getName());
    clusterModel.getEnableOvirtService().setEntity(cluster.supportsVirtService());
    clusterModel.getEnableOvirtService().setIsChangable(true);
    clusterModel.getEnableGlusterService().setEntity(cluster.supportsGlusterService());
    clusterModel.getEnableGlusterService().setIsChangable(true);
    clusterModel.getEnableBallooning().setEntity(cluster.isEnableBallooning());
    if (cluster.supportsTrustedService()) {
        clusterModel.getEnableGlusterService().setIsChangable(false);
    }
    if (cluster.supportsVirtService() && !cluster.supportsGlusterService()) {
        clusterModel.getEnableTrustedService().setIsChangable(true);
    } else {
        clusterModel.getEnableTrustedService().setIsChangable(false);
    }
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            final boolean isVirtGlusterAllowed = (Boolean) returnValue;
            AsyncQuery asyncQuery = new AsyncQuery();
            asyncQuery.setModel(clusterModel);
            asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<GlusterVolumeEntity> volumes = (ArrayList<GlusterVolumeEntity>) result;
                    if (volumes.size() > 0) {
                        clusterModel.getEnableGlusterService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableOvirtService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVolumeList(asyncQuery, cluster.getName());
            AsyncQuery asyncQuery1 = new AsyncQuery();
            asyncQuery1.setModel(clusterModel);
            asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VM> vmList = (ArrayList<VM>) result;
                    if (vmList.size() > 0) {
                        clusterModel.getEnableOvirtService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableGlusterService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVmListByClusterName(asyncQuery1, cluster.getName());
            AsyncQuery asyncQuery2 = new AsyncQuery();
            asyncQuery2.setModel(clusterModel);
            asyncQuery2.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VDS> vdsList = (ArrayList<VDS>) result;
                    if (vdsList.size() > 0) {
                        clusterModel.getEnableTrustedService().setIsChangable(false);
                        clusterModel.getEnableTrustedService().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().trustedServiceDisabled());
                    }
                }
            };
            AsyncDataProvider.getHostListByCluster(asyncQuery2, cluster.getName());
        }
    }));
    if (getSystemTreeSelectedItem() != null && (getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster || getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster_Gluster)) {
        clusterModel.getName().setIsChangable(false);
        clusterModel.getName().setChangeProhibitionReason(constants.cannotEditNameInTreeContext());
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    clusterModel.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    clusterModel.getCommands().add(tempVar2);
}
#method_after
public void edit() {
    final VDSGroup cluster = (VDSGroup) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    final UIConstants constants = ConstantsManager.getInstance().getConstants();
    final ClusterModel clusterModel = new ClusterModel();
    clusterModel.setEntity(cluster);
    clusterModel.init(true);
    clusterModel.getEnableTrustedService().setEntity(cluster.supportsTrustedService());
    setWindow(clusterModel);
    clusterModel.setTitle(ConstantsManager.getInstance().getConstants().editClusterTitle());
    // $NON-NLS-1$
    clusterModel.setHashName("edit_cluster");
    clusterModel.setOriginalName(cluster.getName());
    clusterModel.getName().setEntity(cluster.getName());
    clusterModel.getEnableOvirtService().setEntity(cluster.supportsVirtService());
    clusterModel.getEnableOvirtService().setIsChangable(true);
    clusterModel.getEnableGlusterService().setEntity(cluster.supportsGlusterService());
    clusterModel.getEnableGlusterService().setIsChangable(true);
    clusterModel.getEnableBallooning().setEntity(cluster.isEnableBallooning());
    clusterModel.getArchitecture().setSelectedItem(cluster.getArchitecture());
    if (cluster.supportsTrustedService()) {
        clusterModel.getEnableGlusterService().setIsChangable(false);
    }
    if (cluster.supportsVirtService() && !cluster.supportsGlusterService()) {
        clusterModel.getEnableTrustedService().setIsChangable(true);
    } else {
        clusterModel.getEnableTrustedService().setIsChangable(false);
    }
    AsyncDataProvider.getAllowClusterWithVirtGlusterEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            final boolean isVirtGlusterAllowed = (Boolean) returnValue;
            AsyncQuery asyncQuery = new AsyncQuery();
            asyncQuery.setModel(clusterModel);
            asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<GlusterVolumeEntity> volumes = (ArrayList<GlusterVolumeEntity>) result;
                    if (volumes.size() > 0) {
                        clusterModel.getEnableGlusterService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableOvirtService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVolumeList(asyncQuery, cluster.getName());
            AsyncQuery asyncQuery1 = new AsyncQuery();
            asyncQuery1.setModel(clusterModel);
            asyncQuery1.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VM> vmList = (ArrayList<VM>) result;
                    if (vmList.size() > 0) {
                        clusterModel.getEnableOvirtService().setIsChangable(false);
                        if (!isVirtGlusterAllowed) {
                            clusterModel.getEnableGlusterService().setIsChangable(false);
                        }
                    }
                }
            };
            AsyncDataProvider.getVmListByClusterName(asyncQuery1, cluster.getName());
            AsyncQuery asyncQuery2 = new AsyncQuery();
            asyncQuery2.setModel(clusterModel);
            asyncQuery2.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model1, Object result) {
                    ArrayList<VDS> vdsList = (ArrayList<VDS>) result;
                    if (vdsList.size() > 0) {
                        clusterModel.getEnableTrustedService().setIsChangable(false);
                        clusterModel.getEnableTrustedService().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().trustedServiceDisabled());
                    }
                }
            };
            AsyncDataProvider.getHostListByCluster(asyncQuery2, cluster.getName());
        }
    }));
    if (getSystemTreeSelectedItem() != null && (getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster || getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster_Gluster)) {
        clusterModel.getName().setIsChangable(false);
        clusterModel.getName().setChangeProhibitionReason(constants.cannotEditNameInTreeContext());
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    clusterModel.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    clusterModel.getCommands().add(tempVar2);
}
#end_block

#method_before
private void onSaveInternalWithModel(final ClusterModel model) {
    VDSGroup cluster = model.getIsNew() ? new VDSGroup() : (VDSGroup) Cloner.clone(getSelectedItem());
    Version version = (Version) model.getVersion().getSelectedItem();
    cluster.setName((String) model.getName().getEntity());
    cluster.setdescription((String) model.getDescription().getEntity());
    cluster.setComment((String) model.getComment().getEntity());
    cluster.setStoragePoolId(((StoragePool) model.getDataCenter().getSelectedItem()).getId());
    if (model.getCPU().getSelectedItem() != null) {
        cluster.setcpu_name(((ServerCpu) model.getCPU().getSelectedItem()).getCpuName());
    }
    cluster.setmax_vds_memory_over_commit(model.getMemoryOverCommit());
    cluster.setCountThreadsAsCores(Boolean.TRUE.equals(model.getVersionSupportsCpuThreads().getEntity()) && Boolean.TRUE.equals(model.getCountThreadsAsCores().getEntity()));
    cluster.setEnableBallooning(Boolean.TRUE.equals(model.getEnableBallooning().getEntity()) && version.compareTo(Version.v3_3) >= 0);
    // $NON-NLS-1$
    cluster.setTransparentHugepages(version.compareTo(new Version("3.0")) >= 0);
    cluster.setcompatibility_version(version);
    cluster.setMigrateOnError(model.getMigrateOnErrorOption());
    cluster.setVirtService((Boolean) model.getEnableOvirtService().getEntity());
    cluster.setGlusterService((Boolean) model.getEnableGlusterService().getEntity());
    cluster.setTrustedService((Boolean) model.getEnableTrustedService().getEntity());
    cluster.setClusterPolicyId(((ClusterPolicy) model.getClusterPolicy().getSelectedItem()).getId());
    cluster.setClusterPolicyProperties(KeyValueModel.convertProperties(model.getCustomPropertySheet().getEntity()));
    model.startProgress(null);
    Frontend.getInstance().runAction(model.getIsNew() ? VdcActionType.AddVdsGroup : VdcActionType.UpdateVdsGroup, new VdsGroupOperationParameters(cluster), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ClusterListModel localModel = (ClusterListModel) result.getState();
            if ((Boolean) model.getIsImportGlusterConfiguration().getEntity()) {
                localModel.postOnSaveInternalWithImport(result.getReturnValue());
            } else {
                localModel.postOnSaveInternal(result.getReturnValue());
            }
        }
    }, this);
}
#method_after
private void onSaveInternalWithModel(final ClusterModel model) {
    VDSGroup cluster = model.getIsNew() ? new VDSGroup() : (VDSGroup) Cloner.clone(getSelectedItem());
    Version version = (Version) model.getVersion().getSelectedItem();
    cluster.setName((String) model.getName().getEntity());
    cluster.setdescription((String) model.getDescription().getEntity());
    cluster.setComment((String) model.getComment().getEntity());
    cluster.setStoragePoolId(((StoragePool) model.getDataCenter().getSelectedItem()).getId());
    if (model.getCPU().getSelectedItem() != null) {
        cluster.setcpu_name(((ServerCpu) model.getCPU().getSelectedItem()).getCpuName());
    }
    cluster.setmax_vds_memory_over_commit(model.getMemoryOverCommit());
    cluster.setCountThreadsAsCores(Boolean.TRUE.equals(model.getVersionSupportsCpuThreads().getEntity()) && Boolean.TRUE.equals(model.getCountThreadsAsCores().getEntity()));
    cluster.setEnableBallooning(Boolean.TRUE.equals(model.getEnableBallooning().getEntity()) && version.compareTo(Version.v3_3) >= 0);
    // $NON-NLS-1$
    cluster.setTransparentHugepages(version.compareTo(new Version("3.0")) >= 0);
    cluster.setcompatibility_version(version);
    cluster.setMigrateOnError(model.getMigrateOnErrorOption());
    cluster.setVirtService((Boolean) model.getEnableOvirtService().getEntity());
    cluster.setGlusterService((Boolean) model.getEnableGlusterService().getEntity());
    cluster.setTrustedService((Boolean) model.getEnableTrustedService().getEntity());
    cluster.setClusterPolicyId(((ClusterPolicy) model.getClusterPolicy().getSelectedItem()).getId());
    cluster.setClusterPolicyProperties(KeyValueModel.convertProperties(model.getCustomPropertySheet().getEntity()));
    if (model.getCPU().getSelectedItem() == null) {
        cluster.setArchitecture((ArchitectureType) model.getArchitecture().getSelectedItem());
    } else {
        cluster.setArchitecture(null);
    }
    model.startProgress(null);
    Frontend.getInstance().runAction(model.getIsNew() ? VdcActionType.AddVdsGroup : VdcActionType.UpdateVdsGroup, new VdsGroupOperationParameters(cluster), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ClusterListModel localModel = (ClusterListModel) result.getState();
            if ((Boolean) model.getIsImportGlusterConfiguration().getEntity()) {
                localModel.postOnSaveInternalWithImport(result.getReturnValue());
            } else {
                localModel.postOnSaveInternal(result.getReturnValue());
            }
        }
    }, this);
}
#end_block

#method_before
protected VdsDynamicDAO getVdsDynamicDAO() {
    return DbFacade.getInstance().getVdsDynamicDao();
}
#method_after
protected VdsDynamicDAO getVdsDynamicDAO() {
    return getDbFacade().getVdsDynamicDao();
}
#end_block

#method_before
protected VdsStatisticsDAO getVdsStatisticsDao() {
    return DbFacade.getInstance().getVdsStatisticsDao();
}
#method_after
protected VdsStatisticsDAO getVdsStatisticsDao() {
    return getDbFacade().getVdsStatisticsDao();
}
#end_block

#method_before
@Override
public void setUp() throws Exception {
    super.setUp();
    dao = dbFacade.getVmTemplateDao();
    existingTemplate = dao.get(new Guid("1b85420c-b84c-4f29-997e-0eb674b40b79"));
    newVmTemplate = new VmTemplate();
    newVmTemplate.setId(Guid.newGuid());
    newVmTemplate.setName("NewVmTemplate");
    newVmTemplate.setVdsGroupId(VDS_GROUP_ID);
    newVmTemplate.setArchitecture(ArchitectureType.x86_64);
}
#method_after
@Override
public void setUp() throws Exception {
    super.setUp();
    dao = dbFacade.getVmTemplateDao();
    existingTemplate = dao.get(new Guid("1b85420c-b84c-4f29-997e-0eb674b40b79"));
    newVmTemplate = new VmTemplate();
    newVmTemplate.setId(Guid.newGuid());
    newVmTemplate.setName("NewVmTemplate");
    newVmTemplate.setVdsGroupId(VDS_GROUP_ID);
    newVmTemplate.setClusterArch(ArchitectureType.x86_64);
}
#end_block

#method_before
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setName(rs.getString("vm_name"));
    entity.setQuotaId(getGuidDefaultEmpty(rs, "quota_id"));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setVmOs(rs.getInt("vm_os"));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setComment(rs.getString("vm_comment"));
    entity.setVmDomain(rs.getString("vm_domain"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOsId(rs.getInt("vmt_os"));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(getGuid(rs, "console_user_id"));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(getGuid(rs, "run_on_vds"));
    entity.setMigratingToVds(getGuid(rs, "migrating_to_vds"));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(getGuid(rs, "vm_pool_id"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(getGuid(rs, "last_vds_run_on"));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setCpuShares(rs.getInt("cpu_shares"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setRunAndPause(rs.getBoolean("is_run_and_pause"));
    entity.setLastWatchdogEvent(getLong(rs, "last_watchdog_event"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setRunOnce(rs.getBoolean("is_run_once"));
    entity.setCreatedByUserId(getGuid(rs, "created_by_user_id"));
    entity.setArchitecture(ArchitectureType.forValue(rs.getInt("architecture")));
    return entity;
}
#method_after
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setName(rs.getString("vm_name"));
    entity.setQuotaId(getGuidDefaultEmpty(rs, "quota_id"));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setVmOs(rs.getInt("vm_os"));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setComment(rs.getString("vm_comment"));
    entity.setVmDomain(rs.getString("vm_domain"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOsId(rs.getInt("vmt_os"));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(getGuid(rs, "console_user_id"));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(getGuid(rs, "run_on_vds"));
    entity.setMigratingToVds(getGuid(rs, "migrating_to_vds"));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(getGuid(rs, "vm_pool_id"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(getGuid(rs, "last_vds_run_on"));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setCpuShares(rs.getInt("cpu_shares"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setRunAndPause(rs.getBoolean("is_run_and_pause"));
    entity.setLastWatchdogEvent(getLong(rs, "last_watchdog_event"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setRunOnce(rs.getBoolean("is_run_once"));
    entity.setCreatedByUserId(getGuid(rs, "created_by_user_id"));
    entity.setClusterArch(ArchitectureType.forValue(rs.getInt("architecture")));
    return entity;
}
#end_block

#method_before
@Mapping(from = Template.class, to = VmTemplate.class)
public static VmTemplate map(Template model, VmTemplate incoming) {
    VmTemplate entity = incoming != null ? incoming : new VmTemplate();
    if (model.isSetName()) {
        entity.setName(model.getName());
    }
    if (model.isSetId()) {
        entity.setId(GuidUtils.asGuid(model.getId()));
    }
    if (model.isSetDescription()) {
        entity.setDescription(model.getDescription());
    }
    if (model.isSetComment()) {
        entity.setComment(model.getComment());
    }
    if (model.isSetCluster() && model.getCluster().getId() != null) {
        entity.setVdsGroupId(GuidUtils.asGuid(model.getCluster().getId()));
    }
    if (model.isSetHighAvailability()) {
        if (model.getHighAvailability().isSetEnabled()) {
            entity.setAutoStartup(model.getHighAvailability().isEnabled());
        }
        if (model.getHighAvailability().isSetPriority()) {
            entity.setPriority(model.getHighAvailability().getPriority());
        }
    }
    if (model.isSetStateless()) {
        entity.setStateless(model.isStateless());
    }
    if (model.isSetDeleteProtected()) {
        entity.setDeleteProtected(model.isDeleteProtected());
    }
    if (model.isSetType()) {
        VmType vmType = VmType.fromValue(model.getType());
        if (vmType != null) {
            entity.setVmType(VmMapper.map(vmType, null));
        }
    }
    if (model.isSetOrigin()) {
        entity.setOrigin(VmMapper.map(model.getOrigin(), (OriginType) null));
    }
    if (model.isSetMemory()) {
        entity.setMemSizeMb((int) (model.getMemory() / BYTES_PER_MB));
    }
    if (model.isSetCpu() && model.getCpu().isSetTopology()) {
        if (model.getCpu().getTopology().getCores() != null) {
            entity.setCpuPerSocket(model.getCpu().getTopology().getCores());
        }
        if (model.getCpu().getTopology().getSockets() != null) {
            entity.setNumOfSockets(model.getCpu().getTopology().getSockets());
        }
    }
    if (model.isSetCpu() && model.getCpu().isSetArchitecture()) {
        Architecture archType = Architecture.fromValue(model.getCpu().getArchitecture());
        if (archType != null) {
            entity.setArchitecture(ClusterMapper.map(archType, null));
        }
    }
    if (model.isSetCpuShares()) {
        entity.setCpuShares(model.getCpuShares());
    }
    if (model.isSetOs()) {
        if (model.getOs().isSetType()) {
            entity.setOsId(VmMapper.mapOsType(model.getOs().getType()));
        }
        if (model.getOs().isSetBoot() && model.getOs().getBoot().size() > 0) {
            entity.setDefaultBootSequence(VmMapper.map(model.getOs().getBoot(), null));
        }
        if (model.getOs().isSetKernel()) {
            entity.setKernelUrl(model.getOs().getKernel());
        }
        if (model.getOs().isSetInitrd()) {
            entity.setInitrdUrl(model.getOs().getInitrd());
        }
        if (model.getOs().isSetCmdline()) {
            entity.setKernelParams(model.getOs().getCmdline());
        }
    }
    if (model.isSetDisplay()) {
        if (model.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(model.getDisplay().getType());
            if (displayType != null) {
                entity.setDefaultDisplayType(VmMapper.map(displayType, null));
            }
        }
        if (model.getDisplay().isSetMonitors()) {
            entity.setNumOfMonitors(model.getDisplay().getMonitors());
        }
        if (model.getDisplay().isSetSingleQxlPci()) {
            entity.setSingleQxlPci(model.getDisplay().isSingleQxlPci());
        }
        if (model.getDisplay().isSetAllowOverride()) {
            entity.setAllowConsoleReconnect(model.getDisplay().isAllowOverride());
        }
        if (model.getDisplay().isSetSmartcardEnabled()) {
            entity.setSmartcardEnabled(model.getDisplay().isSmartcardEnabled());
        }
        if (model.getDisplay().isSetKeyboardLayout()) {
            String layout = model.getDisplay().getKeyboardLayout();
            if (layout.isEmpty()) {
                // uniquely represent unset keyboard layout as null
                layout = null;
            }
            entity.setVncKeyboardLayout(layout);
        }
    }
    if (model.isSetDomain() && model.getDomain().isSetName()) {
        entity.setDomain(model.getDomain().getName());
    }
    if (model.isSetTimezone()) {
        String timezone = model.getTimezone();
        if (timezone.isEmpty()) {
            // normalize default timezone representation
            timezone = null;
        }
        entity.setTimeZone(timezone);
    }
    if (model.isSetTunnelMigration()) {
        entity.setTunnelMigration(model.isTunnelMigration());
    }
    return entity;
}
#method_after
@Mapping(from = Template.class, to = VmTemplate.class)
public static VmTemplate map(Template model, VmTemplate incoming) {
    VmTemplate entity = incoming != null ? incoming : new VmTemplate();
    if (model.isSetName()) {
        entity.setName(model.getName());
    }
    if (model.isSetId()) {
        entity.setId(GuidUtils.asGuid(model.getId()));
    }
    if (model.isSetDescription()) {
        entity.setDescription(model.getDescription());
    }
    if (model.isSetComment()) {
        entity.setComment(model.getComment());
    }
    if (model.isSetCluster() && model.getCluster().getId() != null) {
        entity.setVdsGroupId(GuidUtils.asGuid(model.getCluster().getId()));
    }
    if (model.isSetHighAvailability()) {
        if (model.getHighAvailability().isSetEnabled()) {
            entity.setAutoStartup(model.getHighAvailability().isEnabled());
        }
        if (model.getHighAvailability().isSetPriority()) {
            entity.setPriority(model.getHighAvailability().getPriority());
        }
    }
    if (model.isSetStateless()) {
        entity.setStateless(model.isStateless());
    }
    if (model.isSetDeleteProtected()) {
        entity.setDeleteProtected(model.isDeleteProtected());
    }
    if (model.isSetType()) {
        VmType vmType = VmType.fromValue(model.getType());
        if (vmType != null) {
            entity.setVmType(VmMapper.map(vmType, null));
        }
    }
    if (model.isSetOrigin()) {
        entity.setOrigin(VmMapper.map(model.getOrigin(), (OriginType) null));
    }
    if (model.isSetMemory()) {
        entity.setMemSizeMb((int) (model.getMemory() / BYTES_PER_MB));
    }
    if (model.isSetCpu() && model.getCpu().isSetTopology()) {
        if (model.getCpu().getTopology().getCores() != null) {
            entity.setCpuPerSocket(model.getCpu().getTopology().getCores());
        }
        if (model.getCpu().getTopology().getSockets() != null) {
            entity.setNumOfSockets(model.getCpu().getTopology().getSockets());
        }
    }
    if (model.isSetCpu() && model.getCpu().isSetArchitecture()) {
        Architecture archType = Architecture.fromValue(model.getCpu().getArchitecture());
        if (archType != null) {
            entity.setClusterArch(ClusterMapper.map(archType, null));
        }
    }
    if (model.isSetCpuShares()) {
        entity.setCpuShares(model.getCpuShares());
    }
    if (model.isSetOs()) {
        if (model.getOs().isSetType()) {
            entity.setOsId(VmMapper.mapOsType(model.getOs().getType()));
        }
        if (model.getOs().isSetBoot() && model.getOs().getBoot().size() > 0) {
            entity.setDefaultBootSequence(VmMapper.map(model.getOs().getBoot(), null));
        }
        if (model.getOs().isSetKernel()) {
            entity.setKernelUrl(model.getOs().getKernel());
        }
        if (model.getOs().isSetInitrd()) {
            entity.setInitrdUrl(model.getOs().getInitrd());
        }
        if (model.getOs().isSetCmdline()) {
            entity.setKernelParams(model.getOs().getCmdline());
        }
    }
    if (model.isSetDisplay()) {
        if (model.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(model.getDisplay().getType());
            if (displayType != null) {
                entity.setDefaultDisplayType(VmMapper.map(displayType, null));
            }
        }
        if (model.getDisplay().isSetMonitors()) {
            entity.setNumOfMonitors(model.getDisplay().getMonitors());
        }
        if (model.getDisplay().isSetSingleQxlPci()) {
            entity.setSingleQxlPci(model.getDisplay().isSingleQxlPci());
        }
        if (model.getDisplay().isSetAllowOverride()) {
            entity.setAllowConsoleReconnect(model.getDisplay().isAllowOverride());
        }
        if (model.getDisplay().isSetSmartcardEnabled()) {
            entity.setSmartcardEnabled(model.getDisplay().isSmartcardEnabled());
        }
        if (model.getDisplay().isSetKeyboardLayout()) {
            String layout = model.getDisplay().getKeyboardLayout();
            if (layout.isEmpty()) {
                // uniquely represent unset keyboard layout as null
                layout = null;
            }
            entity.setVncKeyboardLayout(layout);
        }
    }
    if (model.isSetDomain() && model.getDomain().isSetName()) {
        entity.setDomain(model.getDomain().getName());
    }
    if (model.isSetTimezone()) {
        String timezone = model.getTimezone();
        if (timezone.isEmpty()) {
            // normalize default timezone representation
            timezone = null;
        }
        entity.setTimeZone(timezone);
    }
    if (model.isSetTunnelMigration()) {
        entity.setTunnelMigration(model.isTunnelMigration());
    }
    return entity;
}
#end_block

#method_before
@Mapping(from = VmTemplate.class, to = Template.class)
public static Template map(VmTemplate entity, Template incoming) {
    Template model = incoming != null ? incoming : new Template();
    model.setId(entity.getId().toString());
    model.setName(entity.getName());
    model.setDescription(entity.getDescription());
    model.setComment(entity.getComment());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    if (entity.getVmType() != null) {
        model.setType(VmMapper.map(entity.getVmType(), null));
    }
    if (entity.getOrigin() != null) {
        model.setOrigin(VmMapper.map(entity.getOrigin(), null));
    }
    if (entity.getStatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getStatus(), null)));
    }
    if (entity.getDefaultBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        os.setType(SimpleDependecyInjector.getInstance().get(OsRepository.class).getUniqueOsNames().get(entity.getOsId()));
        if (entity.getDefaultBootSequence() != null) {
            for (Boot boot : VmMapper.map(entity.getDefaultBootSequence(), null)) {
                os.getBoot().add(boot);
            }
        }
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    model.setCpu(new CPU());
    model.getCpu().setTopology(topology);
    model.setCpuShares(entity.getCpuShares());
    if (entity.getDefaultDisplayType() != null) {
        model.setDisplay(new Display());
        model.getDisplay().setType(VmMapper.map(entity.getDefaultDisplayType(), null));
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setSingleQxlPci(entity.getSingleQxlPci());
        model.getDisplay().setAllowOverride(entity.isAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
        model.getDisplay().setKeyboardLayout(entity.getVncKeyboardLayout());
    }
    if (entity.getArchitecture() != null) {
        model.getCpu().setArchitecture(ClusterMapper.map(entity.getArchitecture(), null));
    }
    if (entity.getCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getCreationDate(), null));
    }
    if (entity.getDomain() != null && !entity.getDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getDomain());
        model.setDomain(domain);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    model.setTimezone(entity.getTimeZone());
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#method_after
@Mapping(from = VmTemplate.class, to = Template.class)
public static Template map(VmTemplate entity, Template incoming) {
    Template model = incoming != null ? incoming : new Template();
    model.setId(entity.getId().toString());
    model.setName(entity.getName());
    model.setDescription(entity.getDescription());
    model.setComment(entity.getComment());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    if (entity.getVmType() != null) {
        model.setType(VmMapper.map(entity.getVmType(), null));
    }
    if (entity.getOrigin() != null) {
        model.setOrigin(VmMapper.map(entity.getOrigin(), null));
    }
    if (entity.getStatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getStatus(), null)));
    }
    if (entity.getDefaultBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        os.setType(SimpleDependecyInjector.getInstance().get(OsRepository.class).getUniqueOsNames().get(entity.getOsId()));
        if (entity.getDefaultBootSequence() != null) {
            for (Boot boot : VmMapper.map(entity.getDefaultBootSequence(), null)) {
                os.getBoot().add(boot);
            }
        }
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    model.setCpu(new CPU());
    model.getCpu().setTopology(topology);
    model.setCpuShares(entity.getCpuShares());
    if (entity.getDefaultDisplayType() != null) {
        model.setDisplay(new Display());
        model.getDisplay().setType(VmMapper.map(entity.getDefaultDisplayType(), null));
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setSingleQxlPci(entity.getSingleQxlPci());
        model.getDisplay().setAllowOverride(entity.isAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
        model.getDisplay().setKeyboardLayout(entity.getVncKeyboardLayout());
    }
    if (entity.getClusterArch() != null) {
        model.getCpu().setArchitecture(ClusterMapper.map(entity.getClusterArch(), null));
    }
    if (entity.getCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getCreationDate(), null));
    }
    if (entity.getDomain() != null && !entity.getDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getDomain());
        model.setDomain(domain);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    model.setTimezone(entity.getTimeZone());
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#end_block

#method_before
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getName());
    model.setDescription(entity.getVmDescription());
    model.setComment(entity.getComment());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    if (entity.getVmtGuid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getVmtGuid().toString());
    }
    if (entity.getStatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getStatus(), null)));
        if (entity.getStatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        os.setType(SimpleDependecyInjector.getInstance().get(OsRepository.class).getUniqueOsNames().get(entity.getVmOsId()));
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    if (entity.isUseHostCpuFlags()) {
        cpu.setMode(CpuMode.HOST_PASSTHROUGH.value());
    }
    cpu.setCpuTune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    model.setCpuShares(entity.getCpuShares());
    cpu.setArchitecture(ClusterMapper.map(entity.getArchitecture(), null));
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (entity.getDynamicData() != null && entity.getStatus().isRunningOrPaused()) {
        if (model.getOs() != null && entity.getBootSequence() != null) {
            for (Boot boot : map(entity.getBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getRunOnVds() != null) {
            model.setHost(new Host());
            model.getHost().setId(entity.getRunOnVds().toString());
        }
        if (entity.getVmIp() != null && !entity.getVmIp().isEmpty()) {
            model.setGuestInfo(new GuestInfo());
            model.getGuestInfo().setIps(new IPs());
            for (String item : entity.getVmIp().split(" ")) {
                if (!item.equals("")) {
                    IP ip = new IP();
                    ip.setAddress(item.trim());
                    model.getGuestInfo().getIps().getIPs().add(ip);
                }
            }
        }
        if (entity.getLastStartTime() != null) {
            model.setStartTime(DateMapper.map(entity.getLastStartTime(), null));
        }
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getDisplayType(), null));
        model.getDisplay().setAddress(entity.getDisplayIp());
        Integer displayPort = entity.getDisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getDisplaySecurePort();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setSingleQxlPci(entity.getSingleQxlPci());
    } else {
        if (model.getOs() != null) {
            for (Boot boot : map(entity.getDefaultBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getDefaultDisplayType() != null) {
            model.setDisplay(new Display());
            model.getDisplay().setType(map(entity.getDefaultDisplayType(), null));
        }
    }
    if (model.getDisplay() != null) {
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setSingleQxlPci(entity.getSingleQxlPci());
        model.getDisplay().setAllowOverride(entity.getAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
        model.getDisplay().setKeyboardLayout(entity.getVncKeyboardLayout());
    }
    model.setType(map(entity.getVmType(), null));
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    if (entity.getOrigin() != null) {
        model.setOrigin(map(entity.getOrigin(), null));
    }
    if (entity.getVmCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getVmCreationDate(), null));
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getDedicatedVmForVds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getDedicatedVmForVds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getVmDomain() != null && !entity.getVmDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getVmDomain());
        model.setDomain(domain);
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed((long) entity.getMinAllocatedMem() * (long) BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(entity.getTimeZone());
    if (!StringUtils.isEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#method_after
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getName());
    model.setDescription(entity.getVmDescription());
    model.setComment(entity.getComment());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    if (entity.getVmtGuid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getVmtGuid().toString());
    }
    if (entity.getStatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getStatus(), null)));
        if (entity.getStatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        os.setType(SimpleDependecyInjector.getInstance().get(OsRepository.class).getUniqueOsNames().get(entity.getVmOsId()));
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    if (entity.isUseHostCpuFlags()) {
        cpu.setMode(CpuMode.HOST_PASSTHROUGH.value());
    }
    cpu.setCpuTune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    model.setCpuShares(entity.getCpuShares());
    cpu.setArchitecture(ClusterMapper.map(entity.getClusterArch(), null));
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (entity.getDynamicData() != null && entity.getStatus().isRunningOrPaused()) {
        if (model.getOs() != null && entity.getBootSequence() != null) {
            for (Boot boot : map(entity.getBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getRunOnVds() != null) {
            model.setHost(new Host());
            model.getHost().setId(entity.getRunOnVds().toString());
        }
        if (entity.getVmIp() != null && !entity.getVmIp().isEmpty()) {
            model.setGuestInfo(new GuestInfo());
            model.getGuestInfo().setIps(new IPs());
            for (String item : entity.getVmIp().split(" ")) {
                if (!item.equals("")) {
                    IP ip = new IP();
                    ip.setAddress(item.trim());
                    model.getGuestInfo().getIps().getIPs().add(ip);
                }
            }
        }
        if (entity.getLastStartTime() != null) {
            model.setStartTime(DateMapper.map(entity.getLastStartTime(), null));
        }
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getDisplayType(), null));
        model.getDisplay().setAddress(entity.getDisplayIp());
        Integer displayPort = entity.getDisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getDisplaySecurePort();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setSingleQxlPci(entity.getSingleQxlPci());
    } else {
        if (model.getOs() != null) {
            for (Boot boot : map(entity.getDefaultBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getDefaultDisplayType() != null) {
            model.setDisplay(new Display());
            model.getDisplay().setType(map(entity.getDefaultDisplayType(), null));
        }
    }
    if (model.getDisplay() != null) {
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setSingleQxlPci(entity.getSingleQxlPci());
        model.getDisplay().setAllowOverride(entity.getAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
        model.getDisplay().setKeyboardLayout(entity.getVncKeyboardLayout());
    }
    model.setType(map(entity.getVmType(), null));
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    if (entity.getOrigin() != null) {
        model.setOrigin(map(entity.getOrigin(), null));
    }
    if (entity.getVmCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getVmCreationDate(), null));
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getDedicatedVmForVds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getDedicatedVmForVds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getVmDomain() != null && !entity.getVmDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getVmDomain());
        model.setDomain(domain);
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed((long) entity.getMinAllocatedMem() * (long) BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(entity.getTimeZone());
    if (!StringUtils.isEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#end_block

#method_before
@Override
protected void readOsSection(XmlNode section) {
    _vm.getStaticData().setId(new Guid(section.Attributes.get("ovf:id").getValue()));
    XmlNode node = section.SelectSingleNode("Description");
    if (node != null) {
        // backward compatibility code - os id of type Other is now 0 . "Unassigned" is removed but its Id is in use
        if (node.InnerText.equals(String.valueOf(OsRepository.OLD_OTHER_ID))) {
            node.InnerText = String.valueOf(OsRepository.DEFAULT_OS);
        }
        _vm.getStaticData().setOsId(osRepository.getOsIdByUniqueName(node.InnerText));
    }
    // Workaround until the support for OVF on POWER is implemented
    _vm.setArchitecture(ArchitectureType.x86_64);
}
#method_after
@Override
protected void readOsSection(XmlNode section) {
    _vm.getStaticData().setId(new Guid(section.Attributes.get("ovf:id").getValue()));
    XmlNode node = section.SelectSingleNode("Description");
    if (node != null) {
        // backward compatibility code - os id of type Other is now 0 . "Unassigned" is removed but its Id is in use
        if (node.InnerText.equals(String.valueOf(OsRepository.OLD_OTHER_ID))) {
            node.InnerText = String.valueOf(OsRepository.DEFAULT_OS);
        }
        _vm.getStaticData().setOsId(osRepository.getOsIdByUniqueName(node.InnerText));
    }
    // Workaround until the support for OVF on POWER is implemented
    _vm.setClusterArch(ArchitectureType.x86_64);
}
#end_block

#method_before
@Override
protected void readOsSection(XmlNode section) {
    _vmTemplate.setId(new Guid(section.Attributes.get("ovf:id").getValue()));
    XmlNode node = section.SelectSingleNode("Description");
    if (node != null) {
        // backward compatibility code - os id of type Other is now 0 . "Unassigned" is removed but its Id is in use.
        if (node.InnerText.equals(String.valueOf(OsRepository.OLD_OTHER_ID))) {
            node.InnerText = String.valueOf(OsRepository.DEFAULT_OS);
        }
        _vmTemplate.setOsId(osRepository.getOsIdByUniqueName(node.InnerText));
    }
    // Workaround until the support for OVF on POWER is implemented
    _vmTemplate.setArchitecture(ArchitectureType.x86_64);
}
#method_after
@Override
protected void readOsSection(XmlNode section) {
    _vmTemplate.setId(new Guid(section.Attributes.get("ovf:id").getValue()));
    XmlNode node = section.SelectSingleNode("Description");
    if (node != null) {
        // backward compatibility code - os id of type Other is now 0 . "Unassigned" is removed but its Id is in use.
        if (node.InnerText.equals(String.valueOf(OsRepository.OLD_OTHER_ID))) {
            node.InnerText = String.valueOf(OsRepository.DEFAULT_OS);
        }
        _vmTemplate.setOsId(osRepository.getOsIdByUniqueName(node.InnerText));
    }
    // Workaround until the support for OVF on POWER is implemented
    _vmTemplate.setClusterArch(ArchitectureType.x86_64);
}
#end_block

#method_before
private MapSqlParameterSource getInsertOrUpdateParameters(VmTemplate template) {
    return getCustomMapSqlParameterSource().addValue("child_count", template.getChildCount()).addValue("creation_date", template.getCreationDate()).addValue("description", template.getDescription()).addValue("free_text_comment", template.getComment()).addValue("mem_size_mb", template.getMemSizeMb()).addValue("name", template.getName()).addValue("num_of_sockets", template.getNumOfSockets()).addValue("cpu_per_socket", template.getCpuPerSocket()).addValue("os", template.getOsId()).addValue("vmt_guid", template.getId()).addValue("vds_group_id", template.getVdsGroupId()).addValue("domain", template.getDomain()).addValue("num_of_monitors", template.getNumOfMonitors()).addValue("single_qxl_pci", template.getSingleQxlPci()).addValue("allow_console_reconnect", template.isAllowConsoleReconnect()).addValue("status", template.getStatus()).addValue("usb_policy", template.getUsbPolicy()).addValue("time_zone", template.getTimeZone()).addValue("fail_back", template.isFailBack()).addValue("vm_type", template.getVmType()).addValue("nice_level", template.getNiceLevel()).addValue("cpu_shares", template.getCpuShares()).addValue("default_boot_sequence", template.getDefaultBootSequence()).addValue("default_display_type", template.getDefaultDisplayType()).addValue("priority", template.getPriority()).addValue("auto_startup", template.isAutoStartup()).addValue("is_stateless", template.isStateless()).addValue("is_smartcard_enabled", template.isSmartcardEnabled()).addValue("is_delete_protected", template.isDeleteProtected()).addValue("iso_path", template.getIsoPath()).addValue("origin", template.getOrigin()).addValue("initrd_url", template.getInitrdUrl()).addValue("kernel_url", template.getKernelUrl()).addValue("kernel_params", template.getKernelParams()).addValue("is_disabled", template.isDisabled()).addValue("quota_id", template.getQuotaId()).addValue("migration_support", template.getMigrationSupport().getValue()).addValue("dedicated_vm_for_vds", template.getDedicatedVmForVds()).addValue("tunnel_migration", template.getTunnelMigration()).addValue("vnc_keyboard_layout", template.getVncKeyboardLayout()).addValue("min_allocated_mem", template.getMinAllocatedMem()).addValue("is_run_and_pause", template.isRunAndPause()).addValue("created_by_user_id", template.getCreatedByUserId()).addValue("architecture", template.getArchitecture());
}
#method_after
private MapSqlParameterSource getInsertOrUpdateParameters(VmTemplate template) {
    return getCustomMapSqlParameterSource().addValue("child_count", template.getChildCount()).addValue("creation_date", template.getCreationDate()).addValue("description", template.getDescription()).addValue("free_text_comment", template.getComment()).addValue("mem_size_mb", template.getMemSizeMb()).addValue("name", template.getName()).addValue("num_of_sockets", template.getNumOfSockets()).addValue("cpu_per_socket", template.getCpuPerSocket()).addValue("os", template.getOsId()).addValue("vmt_guid", template.getId()).addValue("vds_group_id", template.getVdsGroupId()).addValue("domain", template.getDomain()).addValue("num_of_monitors", template.getNumOfMonitors()).addValue("single_qxl_pci", template.getSingleQxlPci()).addValue("allow_console_reconnect", template.isAllowConsoleReconnect()).addValue("status", template.getStatus()).addValue("usb_policy", template.getUsbPolicy()).addValue("time_zone", template.getTimeZone()).addValue("fail_back", template.isFailBack()).addValue("vm_type", template.getVmType()).addValue("nice_level", template.getNiceLevel()).addValue("cpu_shares", template.getCpuShares()).addValue("default_boot_sequence", template.getDefaultBootSequence()).addValue("default_display_type", template.getDefaultDisplayType()).addValue("priority", template.getPriority()).addValue("auto_startup", template.isAutoStartup()).addValue("is_stateless", template.isStateless()).addValue("is_smartcard_enabled", template.isSmartcardEnabled()).addValue("is_delete_protected", template.isDeleteProtected()).addValue("iso_path", template.getIsoPath()).addValue("origin", template.getOrigin()).addValue("initrd_url", template.getInitrdUrl()).addValue("kernel_url", template.getKernelUrl()).addValue("kernel_params", template.getKernelParams()).addValue("is_disabled", template.isDisabled()).addValue("quota_id", template.getQuotaId()).addValue("migration_support", template.getMigrationSupport().getValue()).addValue("dedicated_vm_for_vds", template.getDedicatedVmForVds()).addValue("tunnel_migration", template.getTunnelMigration()).addValue("vnc_keyboard_layout", template.getVncKeyboardLayout()).addValue("min_allocated_mem", template.getMinAllocatedMem()).addValue("is_run_and_pause", template.isRunAndPause()).addValue("created_by_user_id", template.getCreatedByUserId());
}
#end_block

#method_before
@Override
public VmTemplate mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmTemplate entity = new VmTemplate();
    map(rs, entity);
    entity.setId(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setChildCount(rs.getInt("child_count"));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setName(rs.getString("name"));
    entity.setOsId(rs.getInt("os"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setDomain(rs.getString("domain"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setStatus(VmTemplateStatus.forValue(rs.getInt("status")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setStoragePoolId(getGuid(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setQuotaId(getGuidDefaultEmpty(rs, "quota_id"));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setDisabled(rs.getBoolean("is_disabled"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setArchitecture(ArchitectureType.forValue(rs.getInt("architecture")));
    return entity;
}
#method_after
@Override
public VmTemplate mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmTemplate entity = new VmTemplate();
    map(rs, entity);
    entity.setId(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setChildCount(rs.getInt("child_count"));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setName(rs.getString("name"));
    entity.setOsId(rs.getInt("os"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setDomain(rs.getString("domain"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setStatus(VmTemplateStatus.forValue(rs.getInt("status")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setStoragePoolId(getGuid(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setQuotaId(getGuidDefaultEmpty(rs, "quota_id"));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setDisabled(rs.getBoolean("is_disabled"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setClusterArch(ArchitectureType.forValue(rs.getInt("architecture")));
    return entity;
}
#end_block

#method_before
private static VM createVM() {
    VM vm = new VM();
    vm.setName("test-vm");
    vm.setOrigin(OriginType.OVIRT);
    vm.setId(Guid.newGuid());
    vm.setVmDescription("test-description");
    vm.getStaticData().setDomain("domain_name");
    vm.setTimeZone("Israel Standard Time");
    vm.setDbGeneration(2L);
    vm.setSingleQxlPci(false);
    vm.setArchitecture(ArchitectureType.x86_64);
    initInterfaces(vm);
    return vm;
}
#method_after
private static VM createVM() {
    VM vm = new VM();
    vm.setName("test-vm");
    vm.setOrigin(OriginType.OVIRT);
    vm.setId(Guid.newGuid());
    vm.setVmDescription("test-description");
    vm.getStaticData().setDomain("domain_name");
    vm.setTimeZone("Israel Standard Time");
    vm.setDbGeneration(2L);
    vm.setSingleQxlPci(false);
    vm.setClusterArch(ArchitectureType.x86_64);
    initInterfaces(vm);
    return vm;
}
#end_block

#method_before
private static Object cloneVM(VM instance) {
    if (instance == null) {
        return null;
    }
    VM vm = new VM();
    vm.setAcpiEnable(instance.getAcpiEnable());
    // TODO: this field is read only in serialization - not sure why it is cloned
    // vm.ActualDiskWithSnapshotsSize = instance.ActualDiskWithSnapshotsSize;
    vm.setAppList(instance.getAppList());
    vm.setAutoStartup(instance.isAutoStartup());
    vm.setBootSequence(instance.getBootSequence());
    vm.setClientIp(instance.getClientIp());
    vm.setCpuPerSocket(instance.getCpuPerSocket());
    vm.setCpuSys(instance.getCpuSys());
    vm.setCpuUser(instance.getCpuUser());
    vm.setDedicatedVmForVds(instance.getDedicatedVmForVds());
    vm.setDefaultBootSequence(instance.getDefaultBootSequence());
    vm.setDefaultDisplayType(instance.getDefaultDisplayType());
    // TODO: 1. DiskList is an array - CopyTo should be considered (if it can be converted to java, otherwise a
    // simple loop is needed)
    // TODO: 2. it is also read only in serialization, so not sure why it is cloned. it is manipulated via
    // addDriveToImageMap
    // vm.DiskList = instance.DiskList;
    vm.setDiskSize(instance.getDiskSize());
    // TODO: this is also an object, so needs to be cloned as well. while it is only accessed via VM.DiskMap, which
    // creates a dictionary
    // from it - actually the DiskImage's themselves are probably sharing the same reference...
    vm.setDisplay(instance.getDisplay());
    vm.setDisplayIp(instance.getDisplayIp());
    vm.setDisplaySecurePort(instance.getDisplaySecurePort());
    vm.setDisplayType(instance.getDisplayType());
    vm.setElapsedTime(instance.getElapsedTime());
    vm.setRoundedElapsedTime(instance.getRoundedElapsedTime());
    vm.setExitMessage(instance.getExitMessage());
    vm.setExitStatus(instance.getExitStatus());
    vm.setFailBack(instance.isFailBack());
    vm.setConsoleCurrentUserName(instance.getConsoleCurentUserName());
    vm.setGuestCurrentUserName(instance.getGuestCurentUserName());
    vm.setConsoleUserId(instance.getConsoleUserId());
    vm.setGuestLastLoginTime(instance.getGuestLastLoginTime());
    vm.setGuestLastLogoutTime(instance.getGuestLastLogoutTime());
    vm.setGuestOs(instance.getGuestOs());
    vm.setGuestRequestedMemory(instance.getGuestRequestedMemory());
    // TODO: Object, should be "cloned" (probably easiest via new Version(instance.GuestAgentVersion.ToString())
    // pay attention NOT to use lower case version in UICommon code.
    vm.setGuestAgentVersion(instance.getGuestAgentVersion());
    vm.setInitrdUrl(instance.getInitrdUrl());
    // TODO: array - need to consider cloning of array, and of actual interfaces
    vm.setInterfaces(instance.getInterfaces());
    vm.setInitialized(instance.isInitialized());
    vm.setStateless(instance.isStateless());
    vm.setRunAndPause(instance.isRunAndPause());
    vm.setIsoPath(instance.getIsoPath());
    vm.setKernelParams(instance.getKernelParams());
    vm.setKernelUrl(instance.getKernelUrl());
    vm.setKvmEnable(instance.getKvmEnable());
    // TODO: Guid is an object, but code should treat it as immutable, and not change it's uuid directly.
    // (quick skim of code shows this should be safe with current code)
    vm.setLastVdsRunOn(instance.getLastVdsRunOn());
    vm.setMigratingToVds(instance.getMigratingToVds());
    vm.setMigrationSupport(instance.getMigrationSupport());
    vm.setNiceLevel(instance.getNiceLevel());
    vm.setUseHostCpuFlags(instance.isUseHostCpuFlags());
    // TODO: this is readonly in java, since it is computed.
    // options: use calculation here in cloner, or still wrap this in VM instead of serializing it
    // vm.num_of_cpus = instance.num_of_cpus;
    vm.setNumOfMonitors(instance.getNumOfMonitors());
    vm.setAllowConsoleReconnect(instance.getAllowConsoleReconnect());
    vm.setNumOfSockets(instance.getNumOfSockets());
    vm.setOrigin(instance.getOrigin());
    vm.setVmPauseStatus(instance.getVmPauseStatus());
    vm.setPriority(instance.getPriority());
    vm.setRunOnVds(instance.getRunOnVds());
    vm.setRunOnVdsName(instance.getRunOnVdsName());
    vm.setSession(instance.getSession());
    // TODO: see version comment above
    vm.setSpiceDriverVersion(instance.getSpiceDriverVersion());
    vm.setStatus(instance.getStatus());
    vm.setStoragePoolId(instance.getStoragePoolId());
    vm.setStoragePoolName(instance.getStoragePoolName());
    vm.setTimeZone(instance.getTimeZone());
    vm.setTransparentHugePages(instance.isTransparentHugePages());
    vm.setUsageCpuPercent(instance.getUsageCpuPercent());
    vm.setUsageMemPercent(instance.getUsageMemPercent());
    vm.setUsageNetworkPercent(instance.getUsageNetworkPercent());
    vm.setUsbPolicy(instance.getUsbPolicy());
    vm.setUtcDiff(instance.getUtcDiff());
    vm.setVdsGroupCompatibilityVersion(instance.getVdsGroupCompatibilityVersion());
    vm.setVdsGroupId(instance.getVdsGroupId());
    vm.setVdsGroupName(instance.getVdsGroupName());
    vm.setVmCreationDate(instance.getVmCreationDate());
    vm.setVmDescription(instance.getVmDescription());
    vm.setComment(instance.getComment());
    vm.setVmDomain(instance.getVmDomain());
    vm.setId(instance.getId());
    vm.setVmHost(instance.getVmHost());
    vm.setVmIp(instance.getVmIp());
    vm.setLastStartTime(instance.getLastStartTime());
    vm.setVmMemSizeMb(instance.getVmMemSizeMb());
    vm.setName(instance.getName());
    vm.setVmOs(instance.getVmOsId());
    vm.setVmPid(instance.getVmPid());
    vm.setVmType(instance.getVmType());
    vm.setVmPoolId(instance.getVmPoolId());
    vm.setVmPoolName(instance.getVmPoolName());
    vm.setVmtGuid(instance.getVmtGuid());
    vm.setVmtName(instance.getVmtName());
    vm.setCreatedByUserId(instance.getCreatedByUserId());
    vm.setArchitecture(instance.getArchitecture());
    return vm;
}
#method_after
private static Object cloneVM(VM instance) {
    if (instance == null) {
        return null;
    }
    VM vm = new VM();
    vm.setAcpiEnable(instance.getAcpiEnable());
    // TODO: this field is read only in serialization - not sure why it is cloned
    // vm.ActualDiskWithSnapshotsSize = instance.ActualDiskWithSnapshotsSize;
    vm.setAppList(instance.getAppList());
    vm.setAutoStartup(instance.isAutoStartup());
    vm.setBootSequence(instance.getBootSequence());
    vm.setClientIp(instance.getClientIp());
    vm.setCpuPerSocket(instance.getCpuPerSocket());
    vm.setCpuSys(instance.getCpuSys());
    vm.setCpuUser(instance.getCpuUser());
    vm.setDedicatedVmForVds(instance.getDedicatedVmForVds());
    vm.setDefaultBootSequence(instance.getDefaultBootSequence());
    vm.setDefaultDisplayType(instance.getDefaultDisplayType());
    // TODO: 1. DiskList is an array - CopyTo should be considered (if it can be converted to java, otherwise a
    // simple loop is needed)
    // TODO: 2. it is also read only in serialization, so not sure why it is cloned. it is manipulated via
    // addDriveToImageMap
    // vm.DiskList = instance.DiskList;
    vm.setDiskSize(instance.getDiskSize());
    // TODO: this is also an object, so needs to be cloned as well. while it is only accessed via VM.DiskMap, which
    // creates a dictionary
    // from it - actually the DiskImage's themselves are probably sharing the same reference...
    vm.setDisplay(instance.getDisplay());
    vm.setDisplayIp(instance.getDisplayIp());
    vm.setDisplaySecurePort(instance.getDisplaySecurePort());
    vm.setDisplayType(instance.getDisplayType());
    vm.setElapsedTime(instance.getElapsedTime());
    vm.setRoundedElapsedTime(instance.getRoundedElapsedTime());
    vm.setExitMessage(instance.getExitMessage());
    vm.setExitStatus(instance.getExitStatus());
    vm.setFailBack(instance.isFailBack());
    vm.setConsoleCurrentUserName(instance.getConsoleCurentUserName());
    vm.setGuestCurrentUserName(instance.getGuestCurentUserName());
    vm.setConsoleUserId(instance.getConsoleUserId());
    vm.setGuestLastLoginTime(instance.getGuestLastLoginTime());
    vm.setGuestLastLogoutTime(instance.getGuestLastLogoutTime());
    vm.setGuestOs(instance.getGuestOs());
    vm.setGuestRequestedMemory(instance.getGuestRequestedMemory());
    // TODO: Object, should be "cloned" (probably easiest via new Version(instance.GuestAgentVersion.ToString())
    // pay attention NOT to use lower case version in UICommon code.
    vm.setGuestAgentVersion(instance.getGuestAgentVersion());
    vm.setInitrdUrl(instance.getInitrdUrl());
    // TODO: array - need to consider cloning of array, and of actual interfaces
    vm.setInterfaces(instance.getInterfaces());
    vm.setInitialized(instance.isInitialized());
    vm.setStateless(instance.isStateless());
    vm.setRunAndPause(instance.isRunAndPause());
    vm.setIsoPath(instance.getIsoPath());
    vm.setKernelParams(instance.getKernelParams());
    vm.setKernelUrl(instance.getKernelUrl());
    vm.setKvmEnable(instance.getKvmEnable());
    // TODO: Guid is an object, but code should treat it as immutable, and not change it's uuid directly.
    // (quick skim of code shows this should be safe with current code)
    vm.setLastVdsRunOn(instance.getLastVdsRunOn());
    vm.setMigratingToVds(instance.getMigratingToVds());
    vm.setMigrationSupport(instance.getMigrationSupport());
    vm.setNiceLevel(instance.getNiceLevel());
    vm.setUseHostCpuFlags(instance.isUseHostCpuFlags());
    // TODO: this is readonly in java, since it is computed.
    // options: use calculation here in cloner, or still wrap this in VM instead of serializing it
    // vm.num_of_cpus = instance.num_of_cpus;
    vm.setNumOfMonitors(instance.getNumOfMonitors());
    vm.setAllowConsoleReconnect(instance.getAllowConsoleReconnect());
    vm.setNumOfSockets(instance.getNumOfSockets());
    vm.setOrigin(instance.getOrigin());
    vm.setVmPauseStatus(instance.getVmPauseStatus());
    vm.setPriority(instance.getPriority());
    vm.setRunOnVds(instance.getRunOnVds());
    vm.setRunOnVdsName(instance.getRunOnVdsName());
    vm.setSession(instance.getSession());
    // TODO: see version comment above
    vm.setSpiceDriverVersion(instance.getSpiceDriverVersion());
    vm.setStatus(instance.getStatus());
    vm.setStoragePoolId(instance.getStoragePoolId());
    vm.setStoragePoolName(instance.getStoragePoolName());
    vm.setTimeZone(instance.getTimeZone());
    vm.setTransparentHugePages(instance.isTransparentHugePages());
    vm.setUsageCpuPercent(instance.getUsageCpuPercent());
    vm.setUsageMemPercent(instance.getUsageMemPercent());
    vm.setUsageNetworkPercent(instance.getUsageNetworkPercent());
    vm.setUsbPolicy(instance.getUsbPolicy());
    vm.setUtcDiff(instance.getUtcDiff());
    vm.setVdsGroupCompatibilityVersion(instance.getVdsGroupCompatibilityVersion());
    vm.setVdsGroupId(instance.getVdsGroupId());
    vm.setVdsGroupName(instance.getVdsGroupName());
    vm.setVmCreationDate(instance.getVmCreationDate());
    vm.setVmDescription(instance.getVmDescription());
    vm.setComment(instance.getComment());
    vm.setVmDomain(instance.getVmDomain());
    vm.setId(instance.getId());
    vm.setVmHost(instance.getVmHost());
    vm.setVmIp(instance.getVmIp());
    vm.setLastStartTime(instance.getLastStartTime());
    vm.setVmMemSizeMb(instance.getVmMemSizeMb());
    vm.setName(instance.getName());
    vm.setVmOs(instance.getVmOsId());
    vm.setVmPid(instance.getVmPid());
    vm.setVmType(instance.getVmType());
    vm.setVmPoolId(instance.getVmPoolId());
    vm.setVmPoolName(instance.getVmPoolName());
    vm.setVmtGuid(instance.getVmtGuid());
    vm.setVmtName(instance.getVmtName());
    vm.setCreatedByUserId(instance.getCreatedByUserId());
    vm.setClusterArch(instance.getClusterArch());
    return vm;
}
#end_block

#method_before
private static VmTemplate cloneVmTemplate(VmTemplate instance) {
    VmTemplate obj = new VmTemplate();
    obj.setStoragePoolId(instance.getStoragePoolId());
    obj.setStoragePoolName(instance.getStoragePoolName());
    obj.setDefaultDisplayType(instance.getDefaultDisplayType());
    obj.setPriority(instance.getPriority());
    obj.setIsoPath(instance.getIsoPath());
    obj.setOrigin(instance.getOrigin());
    obj.setSizeGB(instance.getSizeGB());
    // TODO: see comments above on DiskImageMap
    obj.setDiskImageMap(instance.getDiskImageMap());
    obj.setInterfaces(instance.getInterfaces());
    obj.setAutoStartup(instance.isAutoStartup());
    obj.setChildCount(instance.getChildCount());
    obj.setCpuPerSocket(instance.getCpuPerSocket());
    obj.setCreationDate(instance.getCreationDate());
    obj.setDefaultBootSequence(instance.getDefaultBootSequence());
    obj.setComment(instance.getComment());
    obj.setDomain(instance.getDomain());
    obj.setFailBack(instance.isFailBack());
    obj.setStateless(instance.isStateless());
    obj.setMemSizeMb(instance.getMemSizeMb());
    obj.setName(instance.getName());
    obj.setNiceLevel(instance.getNiceLevel());
    obj.setNumOfMonitors(instance.getNumOfMonitors());
    obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect());
    obj.setNumOfSockets(instance.getNumOfSockets());
    obj.setStatus(instance.getStatus());
    obj.setTimeZone(instance.getTimeZone());
    obj.setUsbPolicy(instance.getUsbPolicy());
    obj.setVdsGroupId(instance.getVdsGroupId());
    obj.setVdsGroupName(instance.getVdsGroupName());
    obj.setVmType(instance.getVmType());
    obj.setId(instance.getId());
    obj.setDiskList(instance.getDiskList());
    obj.setRunAndPause(instance.isRunAndPause());
    obj.setArchitecture(instance.getArchitecture());
    return obj;
}
#method_after
private static VmTemplate cloneVmTemplate(VmTemplate instance) {
    VmTemplate obj = new VmTemplate();
    obj.setStoragePoolId(instance.getStoragePoolId());
    obj.setStoragePoolName(instance.getStoragePoolName());
    obj.setDefaultDisplayType(instance.getDefaultDisplayType());
    obj.setPriority(instance.getPriority());
    obj.setIsoPath(instance.getIsoPath());
    obj.setOrigin(instance.getOrigin());
    obj.setSizeGB(instance.getSizeGB());
    // TODO: see comments above on DiskImageMap
    obj.setDiskImageMap(instance.getDiskImageMap());
    obj.setInterfaces(instance.getInterfaces());
    obj.setAutoStartup(instance.isAutoStartup());
    obj.setChildCount(instance.getChildCount());
    obj.setCpuPerSocket(instance.getCpuPerSocket());
    obj.setCreationDate(instance.getCreationDate());
    obj.setDefaultBootSequence(instance.getDefaultBootSequence());
    obj.setComment(instance.getComment());
    obj.setDomain(instance.getDomain());
    obj.setFailBack(instance.isFailBack());
    obj.setStateless(instance.isStateless());
    obj.setMemSizeMb(instance.getMemSizeMb());
    obj.setName(instance.getName());
    obj.setNiceLevel(instance.getNiceLevel());
    obj.setNumOfMonitors(instance.getNumOfMonitors());
    obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect());
    obj.setNumOfSockets(instance.getNumOfSockets());
    obj.setStatus(instance.getStatus());
    obj.setTimeZone(instance.getTimeZone());
    obj.setUsbPolicy(instance.getUsbPolicy());
    obj.setVdsGroupId(instance.getVdsGroupId());
    obj.setVdsGroupName(instance.getVdsGroupName());
    obj.setVmType(instance.getVmType());
    obj.setId(instance.getId());
    obj.setDiskList(instance.getDiskList());
    obj.setRunAndPause(instance.isRunAndPause());
    obj.setClusterArch(instance.getClusterArch());
    return obj;
}
#end_block

#method_before
private void resumeVm() {
    mResume = true;
    setVdsId(getVm().getRunOnVds());
    if (getVds() != null) {
        try {
            incrementVdsPendingVmsCount();
            VDSReturnValue result = getBackend().getResourceManager().RunAsyncVdsCommand(VDSCommandType.Resume, new ResumeVDSCommandParameters(getVdsId(), getVm().getId()), this);
            setActionReturnValue(result.getReturnValue());
            setSucceeded(result.getSucceeded());
            ExecutionHandler.setAsyncJob(getExecutionContext(), true);
        } finally {
            freeLock();
            decrementVdsPendingVmsCount();
        }
    } else {
        setActionReturnValue(getVm().getStatus());
    }
}
#method_after
private void resumeVm() {
    mResume = true;
    setVdsId(getVm().getRunOnVds());
    if (getVds() != null) {
        try {
            VDSReturnValue result = getBackend().getResourceManager().RunAsyncVdsCommand(VDSCommandType.Resume, new ResumeVDSCommandParameters(getVdsId(), getVm().getId()), this);
            setActionReturnValue(result.getReturnValue());
            setSucceeded(result.getSucceeded());
            ExecutionHandler.setAsyncJob(getExecutionContext(), true);
        } finally {
            freeLock();
        }
    } else {
        setActionReturnValue(getVm().getStatus());
    }
}
#end_block

#method_before
protected void runVm() {
    setActionReturnValue(VMStatus.Down);
    if (getVdsToRunOn()) {
        VMStatus status = null;
        try {
            VmHandler.updateVmGuestAgentVersion(getVm());
            incrementVdsPendingVmsCount();
            if (connectLunDisks(getVdsId())) {
                status = createVm();
                ExecutionHandler.setAsyncJob(getExecutionContext(), true);
            }
        } catch (VdcBLLException e) {
            VdcBllErrors errorCode = e.getErrorCode();
            // re-throw it. otherwise, continue (the vm will be down and a re-run will be triggered)
            switch(errorCode) {
                // should never get here with errorCode = 'Done' though
                case Done:
                case exist:
                // probably wrong xml format sent.
                case VDS_NETWORK_ERROR:
                case PROVIDER_FAILURE:
                    throw e;
                default:
                    log.warnFormat("Failed to run VM {0}: {1}", getVmName(), e.getMessage());
            }
        } finally {
            freeLock();
            decrementVdsPendingVmsCount();
        }
        setActionReturnValue(status);
        if (status != null && (status.isRunning() || status == VMStatus.RestoringState)) {
            setSucceeded(true);
        } else {
            // Try to rerun Vm on different vds no need to log the command because it is
            // being logged inside the rerun
            log.infoFormat("Trying to rerun VM {0}", getVm().getName());
            setCommandShouldBeLogged(false);
            setSucceeded(true);
            rerun();
        }
    } else {
        failedToRunVm();
        setSucceeded(false);
        _isRerun = false;
    }
}
#method_after
protected void runVm() {
    setActionReturnValue(VMStatus.Down);
    if (getVdsToRunOn()) {
        VMStatus status = null;
        try {
            VmHandler.updateVmGuestAgentVersion(getVm());
            if (connectLunDisks(getVdsId())) {
                status = createVm();
                ExecutionHandler.setAsyncJob(getExecutionContext(), true);
            }
        } catch (VdcBLLException e) {
            VdcBllErrors errorCode = e.getErrorCode();
            // re-throw it. otherwise, continue (the vm will be down and a re-run will be triggered)
            switch(errorCode) {
                // should never get here with errorCode = 'Done' though
                case Done:
                case exist:
                // probably wrong xml format sent.
                case VDS_NETWORK_ERROR:
                case PROVIDER_FAILURE:
                    throw e;
                default:
                    log.warnFormat("Failed to run VM {0}: {1}", getVmName(), e.getMessage());
            }
        } finally {
            freeLock();
        }
        setActionReturnValue(status);
        if (status != null && (status.isRunning() || status == VMStatus.RestoringState)) {
            setSucceeded(true);
        } else {
            // Try to rerun Vm on different vds no need to log the command because it is
            // being logged inside the rerun
            log.infoFormat("Trying to rerun VM {0}", getVm().getName());
            setCommandShouldBeLogged(false);
            setSucceeded(true);
            rerun();
        }
    } else {
        failedToRunVm();
        setSucceeded(false);
        _isRerun = false;
    }
}
#end_block

#method_before
protected ValidationResult validateVdsStatus(VM vm) {
    if (vm.getStatus() == VMStatus.Paused && vm.getRunOnVds() != null) {
        if (getVds(vm.getRunOnVds()).getStatus() != VDSStatus.Up) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL, VdcBllMessages.VAR__HOST_STATUS__UP.toString());
        }
    }
    return ValidationResult.VALID;
}
#method_after
protected ValidationResult validateVdsStatus(VM vm) {
    if (vm.getStatus() == VMStatus.Paused && vm.getRunOnVds() != null && getVdsDynamic(vm.getRunOnVds()).getStatus() != VDSStatus.Up) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL, VdcBllMessages.VAR__HOST_STATUS__UP.toString());
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
@Override
protected Image addParents(Image image) {
    image.setStorageDomain(new StorageDomain());
    image.getStorageDomain().setId(storageDomainId.toString());
    return image;
}
#method_after
@Override
protected Image addParents(Image image) {
    StorageDomain sd = new StorageDomain();
    sd.setId(storageDomainId.toString());
    image.setStorageDomain(sd);
    return super.addParents(image);
}
#end_block

#method_before
public static void updateVmDevices(VmManagementParametersBase params, VM oldVm) {
    VmBase oldVmBase = oldVm.getStaticData();
    VmBase entity = params.getVmStaticData();
    if (entity != null) {
        updateCdInVmDevice(oldVmBase, entity);
        if (oldVmBase.getDefaultBootSequence() != entity.getDefaultBootSequence()) {
            updateBootOrderInVmDeviceAndStoreToDB(entity);
        }
        // if the console type has changed, recreate Video devices
        if (oldVmBase.getDefaultDisplayType() != entity.getDefaultDisplayType()) {
            // delete all video device
            for (VmDevice device : dao.getVmDeviceByVmIdAndType(oldVmBase.getId(), VmDeviceGeneralType.VIDEO)) {
                dao.remove(device.getId());
            }
            // add video device per each monitor
            int monitors = entity.getSingleQxlPci() ? 1 : entity.getNumOfMonitors();
            for (int i = 0; i < monitors; i++) {
                VmDeviceType vmDeviceType = osRepository.getVmDeviceType(entity.getOsId(), entity.getDefaultDisplayType());
                addManagedDevice(new VmDeviceId(Guid.newGuid(), entity.getId()), VmDeviceGeneralType.VIDEO, vmDeviceType, getMemExpr(entity.getNumOfMonitors(), entity.getSingleQxlPci()), true, false, null);
            }
        } else if (entity.getDefaultDisplayType() == DisplayType.qxl && oldVmBase.getNumOfMonitors() != entity.getNumOfMonitors()) {
            // spice number of monitors has changed
            updateNumOfMonitorsInVmDevice(oldVmBase, entity);
        }
        updateUSBSlots(oldVmBase, entity);
        updateMemoryBalloon(oldVmBase, entity, params.isBalloonEnabled());
        updateAudioDevice(oldVm.getStaticData(), entity, oldVm.getVdsGroupCompatibilityVersion(), params.isSoundDeviceEnabled());
        updateSmartcardDevice(oldVm, entity);
        updateConsoleDevice(entity, params.isConsoleEnabled());
    }
}
#method_after
public static void updateVmDevices(VmManagementParametersBase params, VM oldVm) {
    VmBase oldVmBase = oldVm.getStaticData();
    VmBase entity = params.getVmStaticData();
    if (entity != null) {
        updateCdInVmDevice(oldVmBase, entity);
        if (oldVmBase.getDefaultBootSequence() != entity.getDefaultBootSequence()) {
            updateBootOrderInVmDeviceAndStoreToDB(entity);
        }
        // if the console type has changed, recreate Video devices
        boolean displayTypeChanged = oldVmBase.getDefaultDisplayType() != entity.getDefaultDisplayType();
        boolean numOfMonitorsChanged = entity.getDefaultDisplayType() == DisplayType.qxl && oldVmBase.getNumOfMonitors() != entity.getNumOfMonitors();
        boolean singleQxlChanged = oldVmBase.getSingleQxlPci() != entity.getSingleQxlPci();
        if (displayTypeChanged || numOfMonitorsChanged || singleQxlChanged) {
            // delete all video device
            for (VmDevice device : dao.getVmDeviceByVmIdAndType(oldVmBase.getId(), VmDeviceGeneralType.VIDEO)) {
                dao.remove(device.getId());
            }
            // add video device per each monitor
            int monitors = entity.getSingleQxlPci() ? 1 : entity.getNumOfMonitors();
            for (int i = 0; i < monitors; i++) {
                VmDeviceType vmDeviceType = osRepository.getDisplayDevice(entity.getOsId(), ClusterUtils.getCompatibilityVersion(entity), entity.getDefaultDisplayType());
                addManagedDevice(new VmDeviceId(Guid.newGuid(), entity.getId()), VmDeviceGeneralType.VIDEO, vmDeviceType, getMemExpr(entity.getNumOfMonitors(), entity.getSingleQxlPci()), true, false, null);
            }
        }
        updateUSBSlots(oldVmBase, entity);
        updateMemoryBalloon(oldVmBase, entity, params.isBalloonEnabled());
        updateAudioDevice(oldVm.getStaticData(), entity, oldVm.getVdsGroupCompatibilityVersion(), params.isSoundDeviceEnabled());
        updateSmartcardDevice(oldVm, entity);
        updateConsoleDevice(entity, params.isConsoleEnabled());
        updateVirtioScsiController(entity.getId(), params.isVirtioScsiEnabled());
    }
}
#end_block

#method_before
public static void copyVmDevices(Guid srcId, Guid dstId, Map<Guid, Guid> srcDeviceIdToTargetDeviceIdMapping, boolean soundDeviceEnabled, boolean isConsoleEnabled) {
    VM vm = DbFacade.getInstance().getVmDao().get(dstId);
    VmBase vmBase = (vm != null) ? vm.getStaticData() : null;
    boolean isVm = (vmBase != null);
    if (!isVm) {
        vmBase = DbFacade.getInstance().getVmTemplateDao().get(dstId);
    }
    List<VmDevice> devices = dao.getVmDeviceByVmId(srcId);
    copyVmDevices(srcId, dstId, vm, vmBase, isVm, devices, srcDeviceIdToTargetDeviceIdMapping, soundDeviceEnabled, isConsoleEnabled);
}
#method_after
public static void copyVmDevices(Guid srcId, Guid dstId, VM vm, VmBase vmBase, boolean isVm, List<VmDevice> devicesDataToUse, Map<Guid, Guid> srcDeviceIdToTargetDeviceIdMapping, boolean soundDeviceEnabled, boolean isConsoleEnabled, Boolean isVirtioScsiEnabled, boolean copySnapshotDevices) {
    Guid id;
    String isoPath = vmBase.getIsoPath();
    // indicates that VM should have CD either from its own (iso_path) or from the snapshot it was cloned from.
    boolean shouldHaveCD = StringUtils.isNotEmpty(isoPath);
    // indicates if VM has already a non empty CD in DB
    boolean hasAlreadyCD = (!(DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vmBase.getId(), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName())).isEmpty());
    boolean addCD = (!hasAlreadyCD && shouldHaveCD);
    boolean hasSoundDevice = false;
    boolean hasAlreadyConsoleDevice = false;
    boolean hasVirtioScsiController = false;
    for (VmDevice device : devicesDataToUse) {
        if (device.getSnapshotId() != null && !copySnapshotDevices) {
            continue;
        }
        id = Guid.newGuid();
        Map<String, Object> specParams = new HashMap<String, Object>();
        if (srcId.equals(Guid.Empty)) {
            // add CD if not exists
            if (addCD) {
                setCdPath(specParams, "", isoPath);
                addManagedDevice(new VmDeviceId(Guid.newGuid(), dstId), VmDeviceGeneralType.DISK, VmDeviceType.CDROM, specParams, true, true, null);
            }
            // updating USB slots
            updateUSBSlots(null, vmBase);
            // add mem balloon if defined
            updateMemoryBalloon(null, vmBase, vm.isBalloonEnabled());
        }
        switch(device.getType()) {
            case DISK:
                if (VmDeviceType.DISK.getName().equals(device.getDevice())) {
                    if (srcDeviceIdToTargetDeviceIdMapping.containsKey(device.getDeviceId())) {
                        id = srcDeviceIdToTargetDeviceIdMapping.get(device.getDeviceId());
                    }
                } else if (VmDeviceType.CDROM.getName().equals(device.getDevice())) {
                    // check here is source VM had CD (Vm from snapshot)
                    String srcCdPath = (String) device.getSpecParams().get(VdsProperties.Path);
                    shouldHaveCD = (!StringUtils.isEmpty(srcCdPath) || shouldHaveCD);
                    if (!hasAlreadyCD && shouldHaveCD) {
                        setCdPath(specParams, srcCdPath, isoPath);
                    } else {
                        // CD already exists
                        continue;
                    }
                }
                break;
            case INTERFACE:
                if (srcDeviceIdToTargetDeviceIdMapping.containsKey(device.getDeviceId())) {
                    id = srcDeviceIdToTargetDeviceIdMapping.get(device.getDeviceId());
                }
                break;
            case CONTROLLER:
                if (VmDeviceType.USB.getName().equals(device.getDevice())) {
                    specParams = device.getSpecParams();
                } else if (VmDeviceType.VIRTIOSCSI.getName().equals(device.getDevice())) {
                    hasVirtioScsiController = true;
                    if (Boolean.FALSE.equals(isVirtioScsiEnabled)) {
                        continue;
                    }
                }
                break;
            case VIDEO:
                if (isVm) {
                    // to the new VMStatic params
                    continue;
                } else {
                    specParams.putAll(getMemExpr(vmBase.getNumOfMonitors(), vmBase.getSingleQxlPci()));
                }
                break;
            case BALLOON:
                specParams.put(VdsProperties.Model, VdsProperties.Virtio);
                break;
            case SMARTCARD:
                specParams = new SmartcardSpecParams();
                break;
            case WATCHDOG:
                specParams.putAll(device.getSpecParams());
                break;
            case CONSOLE:
                hasAlreadyConsoleDevice = true;
                if (!isConsoleEnabled) {
                    continue;
                }
                break;
            case SOUND:
                hasSoundDevice = true;
                if (!soundDeviceEnabled) {
                    continue;
                }
                break;
            default:
                break;
        }
        device.setId(new VmDeviceId(id, dstId));
        device.setSpecParams(specParams);
        dao.save(device);
    }
    // if VM does not has CD, add an empty CD
    if (!shouldHaveCD) {
        addEmptyCD(dstId);
    }
    // if source doesnt have sound device and requested, add it
    if (soundDeviceEnabled && !hasSoundDevice) {
        if (isVm) {
            addSoundCard(vm.getStaticData(), vm.getVdsGroupCompatibilityVersion());
        } else {
            VDSGroup cluster = DbFacade.getInstance().getVdsGroupDao().get(vmBase.getVdsGroupId());
            if (cluster != null) {
                addSoundCard(vmBase, cluster.getcompatibility_version());
            }
        }
    }
    if (isConsoleEnabled && !hasAlreadyConsoleDevice) {
        addConsoleDevice(dstId);
    }
    if (Boolean.TRUE.equals(isVirtioScsiEnabled) && !hasVirtioScsiController) {
        addVirtioScsiController(dstId);
    }
    if (isVm) {
        // update devices boot order
        updateBootOrderInVmDeviceAndStoreToDB(vmBase);
        int numOfMonitors = (vmBase.getDefaultDisplayType() == DisplayType.vnc) ? Math.max(1, vmBase.getNumOfMonitors()) : vmBase.getSingleQxlPci() ? 1 : vmBase.getNumOfMonitors();
        // create Video device. Multiple if display type is spice
        for (int i = 0; i < numOfMonitors; i++) {
            addVideoDevice(vmBase);
        }
    }
}
#end_block

#method_before
private static void addVideoDevice(VmBase vm) {
    VmDeviceType vmDeviceType = osRepository.getVmDeviceType(vm.getOsId(), vm.getDefaultDisplayType());
    addManagedDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.VIDEO, vmDeviceType, getMemExpr(vm.getNumOfMonitors(), vm.getSingleQxlPci()), true, true, null);
}
#method_after
private static void addVideoDevice(VmBase vm) {
    VmDeviceType vmDeviceType = osRepository.getDisplayDevice(vm.getOsId(), ClusterUtils.getCompatibilityVersion(vm), vm.getDefaultDisplayType());
    addManagedDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.VIDEO, vmDeviceType, getMemExpr(vm.getNumOfMonitors(), vm.getSingleQxlPci()), true, true, null);
}
#end_block

#method_before
public static VmDevice addManagedDevice(VmDeviceId id, VmDeviceGeneralType type, VmDeviceType device, Map<String, Object> specParams, boolean is_plugged, boolean isReadOnly, Map<String, String> customProp) {
    VmDevice managedDevice = new VmDevice(id, type, device.getName(), "", 0, specParams, true, is_plugged, isReadOnly, "", customProp);
    dao.save(managedDevice);
    // If we add Disk/Interface/CD/Floppy, we have to recalculate boot order
    if (type == VmDeviceGeneralType.DISK || type == VmDeviceGeneralType.INTERFACE) {
        // recalculate boot sequence
        VmBase vmBase = DbFacade.getInstance().getVmStaticDao().get(id.getVmId());
        updateBootOrderInVmDeviceAndStoreToDB(vmBase);
    }
    return managedDevice;
}
#method_after
public static VmDevice addManagedDevice(VmDeviceId id, VmDeviceGeneralType type, VmDeviceType device, Map<String, Object> specParams, boolean plugged, Boolean readOnly, String address, Map<String, String> customProp) {
    VmDevice managedDevice = addManagedDevice(id, type, device, specParams, plugged, readOnly, customProp);
    if (StringUtils.isNotBlank(address)) {
        managedDevice.setAddress(address);
    }
    return managedDevice;
}
#end_block

#method_before
public static void updateBootOrderInVmDeviceAndStoreToDB(VmBase vmBase) {
    List<VmDevice> devices = updateBootOrderInVmDevice(vmBase);
    for (VmDevice device : devices) {
        dao.update(device);
    }
}
#method_after
public static void updateBootOrderInVmDeviceAndStoreToDB(VmBase vmBase) {
    List<VmDevice> devices = updateBootOrderInVmDevice(vmBase);
    for (VmDevice device : devices) {
        dao.updateBootOrder(device);
    }
}
#end_block

#method_before
private static <T extends VmBase> void addOtherDevices(T entity, List<VmDevice> vmDeviceToAdd) {
    boolean hasCD = false;
    boolean hasSoundCard = false;
    for (VmDevice vmDevice : entity.getManagedDeviceMap().values()) {
        if (isDiskOrInterface(vmDevice)) {
            // skip disks/interfaces that were added separately.
            continue;
        }
        vmDevice.setIsManaged(true);
        if (vmDevice.getType() == VmDeviceGeneralType.VIDEO) {
            vmDevice.setSpecParams(getMemExpr(entity.getNumOfMonitors(), entity.getSingleQxlPci()));
        }
        if (vmDevice.getDevice().equals(VmDeviceType.CDROM.getName())) {
            hasCD = true;
        }
        if (vmDevice.getDevice().equals(VmDeviceType.SOUND.getName())) {
            hasSoundCard = true;
        }
        vmDeviceToAdd.add(vmDevice);
    }
    if (!hasCD) {
        // add an empty CD
        addEmptyCD(entity.getId());
    }
    // add sound card for desktops imported from old versions only, since devices didnt exist
    Version ovfVer = new Version(entity.getOvfVersion());
    if (!hasSoundCard && VmDeviceCommonUtils.isOldClusterVersion(ovfVer) && entity.getVmType() == VmType.Desktop) {
        addSoundCard(entity);
    }
    for (VmDevice vmDevice : entity.getUnmanagedDeviceList()) {
        vmDeviceToAdd.add(vmDevice);
    }
}
#method_after
private static <T extends VmBase> void addOtherDevices(T entity, List<VmDevice> vmDeviceToAdd) {
    boolean hasCD = false;
    boolean hasSoundCard = false;
    for (VmDevice vmDevice : entity.getManagedDeviceMap().values()) {
        if (isDiskOrInterface(vmDevice)) {
            // skip disks/interfaces that were added separately.
            continue;
        }
        vmDevice.setIsManaged(true);
        if (vmDevice.getType() == VmDeviceGeneralType.VIDEO) {
            vmDevice.setSpecParams(getMemExpr(entity.getNumOfMonitors(), entity.getSingleQxlPci()));
        }
        if (vmDevice.getDevice().equals(VmDeviceType.CDROM.getName())) {
            hasCD = true;
        }
        if (VmDeviceCommonUtils.isSound(vmDevice)) {
            hasSoundCard = true;
        }
        vmDeviceToAdd.add(vmDevice);
    }
    if (!hasCD) {
        // add an empty CD
        addEmptyCD(entity.getId());
    }
    // add sound card for desktops imported from old versions only, since devices didnt exist
    Version ovfVer = new Version(entity.getOvfVersion());
    if (!hasSoundCard && VmDeviceCommonUtils.isOldClusterVersion(ovfVer) && entity.getVmType() == VmType.Desktop) {
        addSoundCard(entity);
    }
    for (VmDevice vmDevice : entity.getUnmanagedDeviceList()) {
        vmDeviceToAdd.add(vmDevice);
    }
}
#end_block

#method_before
private static Map<String, Object> getMemExpr(int numOfMonitors, boolean singleQxlPci) {
    int heads = singleQxlPci ? numOfMonitors : 1;
    String mem = (numOfMonitors > 2 ? String.valueOf(VmDeviceCommonUtils.LOW_VIDEO_MEM * heads) : String.valueOf(VmDeviceCommonUtils.HIGH_VIDEO_MEM * heads));
    Map<String, Object> specParams = new HashMap<String, Object>();
    specParams.put(VRAM, mem);
    specParams.put(HEADS, String.valueOf(heads));
    return specParams;
}
#method_after
private static Map<String, Object> getMemExpr(int numOfMonitors, boolean singleQxlPci) {
    int heads = singleQxlPci ? numOfMonitors : 1;
    Map<String, Object> specParams = new HashMap<String, Object>();
    specParams.put(HEADS, String.valueOf(heads));
    specParams.put(VRAM, VmDeviceCommonUtils.singlePciVRamByHeads(heads));
    if (singleQxlPci) {
        specParams.put(RAM, VmDeviceCommonUtils.singlePciRamByHeads(heads));
    }
    return specParams;
}
#end_block

#method_before
private static boolean isDiskOrInterface(VmDevice vmDevice) {
    return (vmDevice.getDevice().equals(VmDeviceType.DISK.getName()) && vmDevice.getType() == VmDeviceGeneralType.DISK) || (vmDevice.getDevice().equals(VmDeviceType.BRIDGE.getName()) && vmDevice.getType() == VmDeviceGeneralType.INTERFACE);
}
#method_after
private static boolean isDiskOrInterface(VmDevice vmDevice) {
    return VmDeviceCommonUtils.isDisk(vmDevice) || VmDeviceCommonUtils.isBridge(vmDevice);
}
#end_block

#method_before
private void readHeader() {
    version = "";
    XmlNode node = _document.SelectSingleNode("//ovf:Envelope", _xmlNS);
    if (node != null) {
        version = node.Attributes.get("ovf:version").getValue();
    }
}
#method_after
private void readHeader() {
    version = "";
    XmlNode node = _document.SelectSingleNode("//ovf:Envelope", _xmlNS);
    if (node != null) {
        version = node.attributes.get("ovf:version").getValue();
    }
}
#end_block

#method_before
@Override
public void buildDisk() {
    XmlNodeList list = _document.SelectNodes("//*/Section/Disk");
    for (XmlNode node : list) {
        final Guid guid = new Guid(node.Attributes.get("ovf:diskId").getValue());
        DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

            @Override
            public boolean eval(DiskImage diskImage) {
                return diskImage.getImageId().equals(guid);
            }
        });
        if (node.Attributes.get("ovf:vm_snapshot_id") != null) {
            image.setVmSnapshotId(new Guid(node.Attributes.get("ovf:vm_snapshot_id").getValue()));
        }
        if (!StringUtils.isEmpty(node.Attributes.get("ovf:size").getValue())) {
            image.setSize(convertGigabyteToBytes(Long.parseLong(node.Attributes.get("ovf:size").getValue())));
        }
        if (!StringUtils.isEmpty(node.Attributes.get("ovf:actual_size").getValue())) {
            image.setActualSizeInBytes(convertGigabyteToBytes(Long.parseLong(node.Attributes.get("ovf:actual_size").getValue())));
        }
        if (node.Attributes.get("ovf:volume-format") != null) {
            if (!StringUtils.isEmpty(node.Attributes.get("ovf:volume-format").getValue())) {
                image.setvolumeFormat(VolumeFormat.valueOf(node.Attributes.get("ovf:volume-format").getValue()));
            } else {
                image.setvolumeFormat(VolumeFormat.Unassigned);
            }
        } else {
            image.setvolumeFormat(VolumeFormat.Unassigned);
        }
        if (node.Attributes.get("ovf:volume-type") != null) {
            if (!StringUtils.isEmpty(node.Attributes.get("ovf:volume-type").getValue())) {
                image.setVolumeType(VolumeType.valueOf(node.Attributes.get("ovf:volume-type").getValue()));
            } else {
                image.setVolumeType(VolumeType.Unassigned);
            }
        } else {
            image.setVolumeType(VolumeType.Unassigned);
        }
        if (node.Attributes.get("ovf:disk-interface") != null) {
            if (!StringUtils.isEmpty(node.Attributes.get("ovf:disk-interface").getValue())) {
                image.setDiskInterface(DiskInterface.valueOf(node.Attributes.get("ovf:disk-interface").getValue()));
            }
        } else {
            image.setDiskInterface(DiskInterface.IDE);
        }
        if (node.Attributes.get("ovf:boot") != null) {
            if (!StringUtils.isEmpty(node.Attributes.get("ovf:boot").getValue())) {
                image.setBoot(Boolean.parseBoolean(node.Attributes.get("ovf:boot").getValue()));
            }
        }
        if (node.Attributes.get("ovf:wipe-after-delete") != null) {
            if (!StringUtils.isEmpty(node.Attributes.get("ovf:wipe-after-delete").getValue())) {
                image.setWipeAfterDelete(Boolean.parseBoolean(node.Attributes.get("ovf:wipe-after-delete").getValue()));
            }
        }
        if (node.Attributes.get("ovf:disk-alias") != null) {
            if (!StringUtils.isEmpty(node.Attributes.get("ovf:disk-alias").getValue())) {
                image.setDiskAlias(String.valueOf(node.Attributes.get("ovf:disk-alias").getValue()));
            }
        }
        if (node.Attributes.get("ovf:disk-description") != null) {
            if (!StringUtils.isEmpty(node.Attributes.get("ovf:disk-description").getValue())) {
                image.setDiskDescription(String.valueOf(node.Attributes.get("ovf:disk-description").getValue()));
            }
        }
    }
}
#method_after
@Override
public void buildDisk() {
    XmlNodeList list = _document.SelectNodes("//*/Section/Disk");
    for (XmlNode node : list) {
        final Guid guid = new Guid(node.attributes.get("ovf:diskId").getValue());
        DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

            @Override
            public boolean eval(DiskImage diskImage) {
                return diskImage.getImageId().equals(guid);
            }
        });
        if (node.attributes.get("ovf:vm_snapshot_id") != null) {
            image.setVmSnapshotId(new Guid(node.attributes.get("ovf:vm_snapshot_id").getValue()));
        }
        if (!StringUtils.isEmpty(node.attributes.get("ovf:size").getValue())) {
            image.setSize(convertGigabyteToBytes(Long.parseLong(node.attributes.get("ovf:size").getValue())));
        }
        if (!StringUtils.isEmpty(node.attributes.get("ovf:actual_size").getValue())) {
            image.setActualSizeInBytes(convertGigabyteToBytes(Long.parseLong(node.attributes.get("ovf:actual_size").getValue())));
        }
        if (node.attributes.get("ovf:volume-format") != null) {
            if (!StringUtils.isEmpty(node.attributes.get("ovf:volume-format").getValue())) {
                image.setvolumeFormat(VolumeFormat.valueOf(node.attributes.get("ovf:volume-format").getValue()));
            } else {
                image.setvolumeFormat(VolumeFormat.Unassigned);
            }
        } else {
            image.setvolumeFormat(VolumeFormat.Unassigned);
        }
        if (node.attributes.get("ovf:volume-type") != null) {
            if (!StringUtils.isEmpty(node.attributes.get("ovf:volume-type").getValue())) {
                image.setVolumeType(VolumeType.valueOf(node.attributes.get("ovf:volume-type").getValue()));
            } else {
                image.setVolumeType(VolumeType.Unassigned);
            }
        } else {
            image.setVolumeType(VolumeType.Unassigned);
        }
        if (node.attributes.get("ovf:disk-interface") != null) {
            if (!StringUtils.isEmpty(node.attributes.get("ovf:disk-interface").getValue())) {
                image.setDiskInterface(DiskInterface.valueOf(node.attributes.get("ovf:disk-interface").getValue()));
            }
        } else {
            image.setDiskInterface(DiskInterface.IDE);
        }
        if (node.attributes.get("ovf:boot") != null) {
            if (!StringUtils.isEmpty(node.attributes.get("ovf:boot").getValue())) {
                image.setBoot(Boolean.parseBoolean(node.attributes.get("ovf:boot").getValue()));
            }
        }
        if (node.attributes.get("ovf:wipe-after-delete") != null) {
            if (!StringUtils.isEmpty(node.attributes.get("ovf:wipe-after-delete").getValue())) {
                image.setWipeAfterDelete(Boolean.parseBoolean(node.attributes.get("ovf:wipe-after-delete").getValue()));
            }
        }
        if (node.attributes.get("ovf:disk-alias") != null) {
            if (!StringUtils.isEmpty(node.attributes.get("ovf:disk-alias").getValue())) {
                image.setDiskAlias(String.valueOf(node.attributes.get("ovf:disk-alias").getValue()));
            }
        }
        if (node.attributes.get("ovf:disk-description") != null) {
            if (!StringUtils.isEmpty(node.attributes.get("ovf:disk-description").getValue())) {
                image.setDiskDescription(String.valueOf(node.attributes.get("ovf:disk-description").getValue()));
            }
        }
    }
}
#end_block

#method_before
public VmDevice readVmDevice(XmlNode node, VmBase vmBase, Guid deviceId, boolean isManaged) {
    VmDevice vmDevice = new VmDevice();
    vmDevice.setId(new VmDeviceId(deviceId, vmBase.getId()));
    if (node.SelectSingleNode(OvfProperties.VMD_ADDRESS, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_ADDRESS, _xmlNS).InnerText)) {
        vmDevice.setAddress(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_ADDRESS, _xmlNS).InnerText));
    } else {
        vmDevice.setAddress("");
    }
    if (node.SelectSingleNode(OvfProperties.VMD_ALIAS, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_ALIAS, _xmlNS).InnerText)) {
        vmDevice.setAlias(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_ALIAS, _xmlNS).InnerText));
    } else {
        vmDevice.setAlias("");
    }
    XmlNode specParamsNode = node.SelectSingleNode(OvfProperties.VMD_SPEC_PARAMS, _xmlNS);
    if (specParamsNode != null && !StringUtils.isEmpty(specParamsNode.InnerText)) {
        vmDevice.setSpecParams(getMapNode(specParamsNode));
    } else {
        // Empty map
        vmDevice.setSpecParams(Collections.<String, Object>emptyMap());
    }
    if (node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText)) {
        vmDevice.setType(VmDeviceGeneralType.forValue(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText)));
    } else {
        int resourceType = getResourceType(node, OvfProperties.VMD_RESOURCE_TYPE);
        vmDevice.setType(VmDeviceGeneralType.forValue(VmDeviceType.getoVirtDevice(resourceType)));
    }
    if (node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).InnerText)) {
        vmDevice.setDevice(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).InnerText));
    } else {
        setDeviceByResource(node, vmDevice);
    }
    if (node.SelectSingleNode(OvfProperties.VMD_BOOT_ORDER, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_BOOT_ORDER, _xmlNS).InnerText)) {
        vmDevice.setBootOrder(Integer.valueOf(node.SelectSingleNode(OvfProperties.VMD_BOOT_ORDER, _xmlNS).InnerText));
    } else {
        vmDevice.setBootOrder(0);
    }
    if (node.SelectSingleNode(OvfProperties.VMD_IS_PLUGGED, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_IS_PLUGGED, _xmlNS).InnerText)) {
        vmDevice.setIsPlugged(Boolean.valueOf(node.SelectSingleNode(OvfProperties.VMD_IS_PLUGGED, _xmlNS).InnerText));
    } else {
        vmDevice.setIsPlugged(Boolean.TRUE);
    }
    if (node.SelectSingleNode(OvfProperties.VMD_IS_READONLY, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_IS_READONLY, _xmlNS).InnerText)) {
        vmDevice.setIsReadOnly(Boolean.valueOf(node.SelectSingleNode(OvfProperties.VMD_IS_READONLY, _xmlNS).InnerText));
    } else {
        vmDevice.setIsReadOnly(Boolean.FALSE);
    }
    if (node.SelectSingleNode(OvfProperties.VMD_CUSTOM_PROP, _xmlNS) != null && StringUtils.isNotEmpty(node.SelectSingleNode(OvfProperties.VMD_CUSTOM_PROP, _xmlNS).InnerText)) {
        vmDevice.setCustomProperties(DevicePropertiesUtils.getInstance().convertProperties(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_CUSTOM_PROP, _xmlNS).InnerText)));
    } else {
        vmDevice.setCustomProperties(null);
    }
    if (isManaged) {
        vmDevice.setIsManaged(true);
        vmBase.getManagedDeviceMap().put(vmDevice.getDeviceId(), vmDevice);
    } else {
        vmBase.getUnmanagedDeviceList().add(vmDevice);
    }
    return vmDevice;
}
#method_after
public VmDevice readVmDevice(XmlNode node, VmBase vmBase, Guid deviceId, boolean isManaged) {
    VmDevice vmDevice = new VmDevice();
    vmDevice.setId(new VmDeviceId(deviceId, vmBase.getId()));
    if (node.SelectSingleNode(OvfProperties.VMD_ADDRESS, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_ADDRESS, _xmlNS).innerText)) {
        vmDevice.setAddress(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_ADDRESS, _xmlNS).innerText));
    } else {
        vmDevice.setAddress("");
    }
    if (node.SelectSingleNode(OvfProperties.VMD_ALIAS, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_ALIAS, _xmlNS).innerText)) {
        vmDevice.setAlias(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_ALIAS, _xmlNS).innerText));
    } else {
        vmDevice.setAlias("");
    }
    XmlNode specParamsNode = node.SelectSingleNode(OvfProperties.VMD_SPEC_PARAMS, _xmlNS);
    if (specParamsNode != null && !StringUtils.isEmpty(specParamsNode.innerText)) {
        vmDevice.setSpecParams(getMapNode(specParamsNode));
    } else {
        // Empty map
        vmDevice.setSpecParams(Collections.<String, Object>emptyMap());
    }
    if (node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).innerText)) {
        vmDevice.setType(VmDeviceGeneralType.forValue(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).innerText)));
    } else {
        int resourceType = getResourceType(node, OvfProperties.VMD_RESOURCE_TYPE);
        vmDevice.setType(VmDeviceGeneralType.forValue(VmDeviceType.getoVirtDevice(resourceType)));
    }
    if (node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).innerText)) {
        vmDevice.setDevice(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).innerText));
    } else {
        setDeviceByResource(node, vmDevice);
    }
    if (node.SelectSingleNode(OvfProperties.VMD_BOOT_ORDER, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_BOOT_ORDER, _xmlNS).innerText)) {
        vmDevice.setBootOrder(Integer.valueOf(node.SelectSingleNode(OvfProperties.VMD_BOOT_ORDER, _xmlNS).innerText));
    } else {
        vmDevice.setBootOrder(0);
    }
    if (node.SelectSingleNode(OvfProperties.VMD_IS_PLUGGED, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_IS_PLUGGED, _xmlNS).innerText)) {
        vmDevice.setIsPlugged(Boolean.valueOf(node.SelectSingleNode(OvfProperties.VMD_IS_PLUGGED, _xmlNS).innerText));
    } else {
        vmDevice.setIsPlugged(Boolean.TRUE);
    }
    if (node.SelectSingleNode(OvfProperties.VMD_IS_READONLY, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_IS_READONLY, _xmlNS).innerText)) {
        vmDevice.setIsReadOnly(Boolean.valueOf(node.SelectSingleNode(OvfProperties.VMD_IS_READONLY, _xmlNS).innerText));
    } else {
        vmDevice.setIsReadOnly(Boolean.FALSE);
    }
    if (node.SelectSingleNode(OvfProperties.VMD_CUSTOM_PROP, _xmlNS) != null && StringUtils.isNotEmpty(node.SelectSingleNode(OvfProperties.VMD_CUSTOM_PROP, _xmlNS).innerText)) {
        vmDevice.setCustomProperties(DevicePropertiesUtils.getInstance().convertProperties(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_CUSTOM_PROP, _xmlNS).innerText)));
    } else {
        vmDevice.setCustomProperties(null);
    }
    if (node.SelectSingleNode(OvfProperties.VMD_SNAPSHOT_PROP, _xmlNS) != null && StringUtils.isNotEmpty(node.SelectSingleNode(OvfProperties.VMD_SNAPSHOT_PROP, _xmlNS).innerText)) {
        vmDevice.setSnapshotId(new Guid(String.valueOf(node.SelectSingleNode(OvfProperties.VMD_CUSTOM_PROP, _xmlNS).innerText)));
    }
    if (isManaged) {
        vmDevice.setIsManaged(true);
        vmBase.getManagedDeviceMap().put(vmDevice.getDeviceId(), vmDevice);
    } else {
        vmBase.getUnmanagedDeviceList().add(vmDevice);
    }
    return vmDevice;
}
#end_block

#method_before
public VmNetworkInterface getNetwotkInterface(XmlNode node) {
    // prior to 3.0 the instanceId is int , in 3.1 and on this is Guid
    String str = node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText;
    final Guid guid;
    VmNetworkInterface iface;
    if (!StringUtils.isNumeric(str)) {
        // 3.1 and above OVF format
        guid = new Guid(str);
        iface = LinqUtils.firstOrNull(interfaces, new Predicate<VmNetworkInterface>() {

            @Override
            public boolean eval(VmNetworkInterface iface) {
                return iface.getId().equals(guid);
            }
        });
        if (iface == null) {
            iface = new VmNetworkInterface();
            iface.setId(guid);
        }
    } else {
        // 3.0 and below OVF format
        iface = new VmNetworkInterface();
    }
    return iface;
}
#method_after
public VmNetworkInterface getNetwotkInterface(XmlNode node) {
    // prior to 3.0 the instanceId is int , in 3.1 and on this is Guid
    String str = node.SelectSingleNode("rasd:InstanceId", _xmlNS).innerText;
    final Guid guid;
    VmNetworkInterface iface;
    if (!StringUtils.isNumeric(str)) {
        // 3.1 and above OVF format
        guid = new Guid(str);
        iface = LinqUtils.firstOrNull(interfaces, new Predicate<VmNetworkInterface>() {

            @Override
            public boolean eval(VmNetworkInterface iface) {
                return iface.getId().equals(guid);
            }
        });
        if (iface == null) {
            iface = new VmNetworkInterface();
            iface.setId(guid);
        }
    } else {
        // 3.0 and below OVF format
        iface = new VmNetworkInterface();
    }
    return iface;
}
#end_block

#method_before
protected void readGeneralData() {
    XmlNode content = _document.SelectSingleNode("//*/Content");
    XmlNode node;
    // set ovf version to the ovf object
    vmBase.setOvfVersion(getVersion());
    node = content.SelectSingleNode("Description");
    if (node != null) {
        vmBase.setDescription(node.InnerText);
    }
    node = content.SelectSingleNode("Domain");
    if (node != null) {
        vmBase.setDomain(node.InnerText);
    }
    node = content.SelectSingleNode("CreationDate");
    if (node != null) {
        Date creationDate = OvfParser.UtcDateStringToLocaDate(node.InnerText);
        if (creationDate != null) {
            vmBase.setCreationDate(creationDate);
        }
    }
    node = content.SelectSingleNode("ExportDate");
    if (node != null) {
        Date exportDate = OvfParser.UtcDateStringToLocaDate(node.InnerText);
        if (exportDate != null) {
            vmBase.setExportDate(exportDate);
        }
    }
    node = content.SelectSingleNode("TimeZone");
    if (node != null) {
        vmBase.setTimeZone(node.InnerText);
    }
    node = content.SelectSingleNode("default_boot_sequence");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setDefaultBootSequence(BootSequence.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("initrd_url");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setInitrdUrl(node.InnerText);
        }
    }
    node = content.SelectSingleNode("kernel_url");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setKernelUrl(node.InnerText);
        }
    }
    node = content.SelectSingleNode("kernel_params");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setKernelParams(node.InnerText);
        }
    }
    node = content.SelectSingleNode("Generation");
    if (node != null) {
        vmBase.setDbGeneration(Long.parseLong(node.InnerText));
    } else {
        vmBase.setDbGeneration(1L);
    }
    // Note: the fetching of 'default display type' should happen before reading
    // the hardware section
    node = content.SelectSingleNode(getDefaultDisplayTypeStringRepresentation());
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            defaultDisplayType = DisplayType.forValue(Integer.parseInt(node.InnerText));
            vmBase.setDefaultDisplayType(defaultDisplayType);
        }
    }
    XmlNodeList list = content.SelectNodes("Section");
    if (list != null) {
        // The Os need to be read before the hardware
        node = getNode(list, "xsi:type", "ovf:OperatingSystemSection_Type");
        if (node != null) {
            readOsSection(node);
        }
        node = getNode(list, "xsi:type", "ovf:VirtualHardwareSection_Type");
        if (node != null) {
            readHardwareSection(node);
        }
        node = getNode(list, "xsi:type", "ovf:SnapshotsSection_Type");
        if (node != null) {
            readSnapshotsSection(node);
        }
    }
    node = content.SelectSingleNode("Origin");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setOrigin(OriginType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("VmType");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setVmType(VmType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("IsSmartcardEnabled");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setSmartcardEnabled(Boolean.parseBoolean(node.InnerText));
        }
    }
    node = content.SelectSingleNode("DeleteProtected");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setDeleteProtected(Boolean.parseBoolean(node.InnerText));
        }
    }
    node = content.SelectSingleNode("TunnelMigration");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setTunnelMigration(Boolean.parseBoolean(node.InnerText));
        }
    }
    node = content.SelectSingleNode("VncKeyboardLayout");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setVncKeyboardLayout(node.InnerText);
        }
    }
    node = content.SelectSingleNode("MinAllocatedMem");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            vmBase.setMinAllocatedMem(Integer.parseInt(node.InnerText));
        }
    }
    node = content.SelectSingleNode("IsStateless");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            vmBase.setStateless(Boolean.parseBoolean(node.InnerText));
        }
    }
    node = content.SelectSingleNode("IsRunAndPause");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            vmBase.setRunAndPause(Boolean.parseBoolean(node.InnerText));
        }
    }
    node = content.SelectSingleNode("CreatedByUserId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.InnerText)) {
            vmBase.setCreatedByUserId(Guid.createGuidFromString(node.InnerText));
        }
    }
    readGeneralData(content);
}
#method_after
protected void readGeneralData() {
    XmlNode content = _document.SelectSingleNode("//*/Content");
    XmlNode node;
    // set ovf version to the ovf object
    vmBase.setOvfVersion(getVersion());
    node = content.SelectSingleNode("Description");
    if (node != null) {
        vmBase.setDescription(node.innerText);
    }
    node = content.SelectSingleNode("Domain");
    if (node != null) {
        vmBase.setDomain(node.innerText);
    }
    node = content.SelectSingleNode("CreationDate");
    if (node != null) {
        Date creationDate = OvfParser.UtcDateStringToLocaDate(node.innerText);
        if (creationDate != null) {
            vmBase.setCreationDate(creationDate);
        }
    }
    node = content.SelectSingleNode("ExportDate");
    if (node != null) {
        Date exportDate = OvfParser.UtcDateStringToLocaDate(node.innerText);
        if (exportDate != null) {
            vmBase.setExportDate(exportDate);
        }
    }
    node = content.SelectSingleNode("TimeZone");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            vmBase.setTimeZone(node.innerText);
        }
    }
    node = content.SelectSingleNode("default_boot_sequence");
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            vmBase.setDefaultBootSequence(BootSequence.forValue(Integer.parseInt(node.innerText)));
        }
    }
    node = content.SelectSingleNode("initrd_url");
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            vmBase.setInitrdUrl(node.innerText);
        }
    }
    node = content.SelectSingleNode("kernel_url");
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            vmBase.setKernelUrl(node.innerText);
        }
    }
    node = content.SelectSingleNode("kernel_params");
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            vmBase.setKernelParams(node.innerText);
        }
    }
    node = content.SelectSingleNode("Generation");
    if (node != null) {
        vmBase.setDbGeneration(Long.parseLong(node.innerText));
    } else {
        vmBase.setDbGeneration(1L);
    }
    // Note: the fetching of 'default display type' should happen before reading
    // the hardware section
    node = content.SelectSingleNode(getDefaultDisplayTypeStringRepresentation());
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            defaultDisplayType = DisplayType.forValue(Integer.parseInt(node.innerText));
            vmBase.setDefaultDisplayType(defaultDisplayType);
        }
    }
    XmlNodeList list = content.SelectNodes("Section");
    if (list != null) {
        // The Os need to be read before the hardware
        node = getNode(list, "xsi:type", "ovf:OperatingSystemSection_Type");
        if (node != null) {
            readOsSection(node);
            if (!osRepository.isLinux(vmBase.getOsId()) || !FeatureSupported.singleQxlPci(new Version(getVersion()))) {
                vmBase.setSingleQxlPci(false);
            }
        }
        node = getNode(list, "xsi:type", "ovf:VirtualHardwareSection_Type");
        if (node != null) {
            readHardwareSection(node);
        }
        node = getNode(list, "xsi:type", "ovf:SnapshotsSection_Type");
        if (node != null) {
            readSnapshotsSection(node);
        }
    }
    node = content.SelectSingleNode("Origin");
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            vmBase.setOrigin(OriginType.forValue(Integer.parseInt(node.innerText)));
        }
    }
    node = content.SelectSingleNode("VmType");
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            vmBase.setVmType(VmType.forValue(Integer.parseInt(node.innerText)));
        }
    }
    node = content.SelectSingleNode("IsSmartcardEnabled");
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            vmBase.setSmartcardEnabled(Boolean.parseBoolean(node.innerText));
        }
    }
    node = content.SelectSingleNode("DeleteProtected");
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            vmBase.setDeleteProtected(Boolean.parseBoolean(node.innerText));
        }
    }
    node = content.SelectSingleNode("SsoMethod");
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            vmBase.setSsoMethod(SsoMethod.fromString(node.innerText));
        }
    }
    node = content.SelectSingleNode("TunnelMigration");
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            vmBase.setTunnelMigration(Boolean.parseBoolean(node.innerText));
        }
    }
    node = content.SelectSingleNode("VncKeyboardLayout");
    if (node != null) {
        if (!StringUtils.isEmpty(node.innerText)) {
            vmBase.setVncKeyboardLayout(node.innerText);
        }
    }
    node = content.SelectSingleNode("MinAllocatedMem");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            vmBase.setMinAllocatedMem(Integer.parseInt(node.innerText));
        }
    }
    node = content.SelectSingleNode("IsStateless");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            vmBase.setStateless(Boolean.parseBoolean(node.innerText));
        }
    }
    node = content.SelectSingleNode("IsRunAndPause");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            vmBase.setRunAndPause(Boolean.parseBoolean(node.innerText));
        }
    }
    node = content.SelectSingleNode("CreatedByUserId");
    if (node != null) {
        if (StringUtils.isNotEmpty(node.innerText)) {
            vmBase.setCreatedByUserId(Guid.createGuidFromString(node.innerText));
        }
    }
    readGeneralData(content);
}
#end_block

#method_before
private XmlNode getNode(XmlNodeList nodeList, String attributeName, String attributeValue) {
    for (XmlNode section : nodeList) {
        String value = section.Attributes.get(attributeName).getValue();
        if (value.equals(attributeValue)) {
            return section;
        }
    }
    return null;
}
#method_after
private XmlNode getNode(XmlNodeList nodeList, String attributeName, String attributeValue) {
    for (XmlNode section : nodeList) {
        String value = section.attributes.get(attributeName).getValue();
        if (value.equals(attributeValue)) {
            return section;
        }
    }
    return null;
}
#end_block

#method_before
protected void buildNicReference() {
    XmlNodeList list = _document.SelectNodes("//*/Nic", _xmlNS);
    for (XmlNode node : list) {
        VmNetworkInterface iface = new VmNetworkInterface();
        iface.setId(new Guid(node.Attributes.get("ovf:id").getValue()));
        interfaces.add(iface);
    }
    if (!list.iterator().hasNext()) {
        StringBuilder sb = new StringBuilder();
        sb.append("//*/Item[");
        sb.append(OvfProperties.VMD_RESOURCE_TYPE);
        sb.append("=");
        sb.append(OvfHardware.Network);
        sb.append("]");
        list = _document.SelectNodes(sb.toString(), _xmlNS);
        for (XmlNode node : list) {
            VmNetworkInterface iface = new VmNetworkInterface();
            iface.setId(Guid.newGuid());
            updateSingleNic(node, iface);
            interfaces.add(iface);
        }
    }
}
#method_after
protected void buildNicReference() {
    XmlNodeList list = _document.SelectNodes("//*/Nic", _xmlNS);
    for (XmlNode node : list) {
        VmNetworkInterface iface = new VmNetworkInterface();
        iface.setId(new Guid(node.attributes.get("ovf:id").getValue()));
        interfaces.add(iface);
    }
    if (!list.iterator().hasNext()) {
        StringBuilder sb = new StringBuilder();
        sb.append("//*/Item[");
        sb.append(OvfProperties.VMD_RESOURCE_TYPE);
        sb.append("=");
        sb.append(OvfHardware.Network);
        sb.append("]");
        list = _document.SelectNodes(sb.toString(), _xmlNS);
        for (XmlNode node : list) {
            VmNetworkInterface iface = new VmNetworkInterface();
            iface.setId(Guid.newGuid());
            updateSingleNic(node, iface);
            interfaces.add(iface);
        }
    }
}
#end_block

#method_before
protected void updateSingleNic(XmlNode node, VmNetworkInterface iface) {
    iface.setName(node.SelectSingleNode(OvfProperties.VMD_NAME, _xmlNS).InnerText);
    iface.setMacAddress((node.SelectSingleNode("rasd:MACAddress", _xmlNS) != null) ? node.SelectSingleNode("rasd:MACAddress", _xmlNS).InnerText : "");
    String networkName = node.SelectSingleNode(OvfProperties.VMD_CONNECTION, _xmlNS).InnerText;
    iface.setNetworkName(StringUtils.defaultIfEmpty(networkName, null));
    XmlNode vnicProfileNameNode = node.SelectSingleNode(OvfProperties.VMD_VNIC_PROFILE_NAME, _xmlNS);
    iface.setVnicProfileName(vnicProfileNameNode == null ? null : StringUtils.defaultIfEmpty(vnicProfileNameNode.InnerText, null));
    XmlNode linkedNode = node.SelectSingleNode(OvfProperties.VMD_LINKED, _xmlNS);
    iface.setLinked(linkedNode == null ? true : Boolean.valueOf(linkedNode.InnerText));
    String resourceSubType = node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).InnerText;
    if (StringUtils.isNotEmpty(resourceSubType)) {
        iface.setType(Integer.parseInt(resourceSubType));
    }
    XmlNode speed = node.SelectSingleNode("rasd:speed", _xmlNS);
    iface.setSpeed((speed != null) ? Integer.parseInt(speed.InnerText) : VmInterfaceType.forValue(iface.getType()).getSpeed());
}
#method_after
protected void updateSingleNic(XmlNode node, VmNetworkInterface iface) {
    iface.setName(node.SelectSingleNode(OvfProperties.VMD_NAME, _xmlNS).innerText);
    iface.setMacAddress((node.SelectSingleNode("rasd:MACAddress", _xmlNS) != null) ? node.SelectSingleNode("rasd:MACAddress", _xmlNS).innerText : "");
    String networkName = node.SelectSingleNode(OvfProperties.VMD_CONNECTION, _xmlNS).innerText;
    iface.setNetworkName(StringUtils.defaultIfEmpty(networkName, null));
    XmlNode vnicProfileNameNode = node.SelectSingleNode(OvfProperties.VMD_VNIC_PROFILE_NAME, _xmlNS);
    iface.setVnicProfileName(vnicProfileNameNode == null ? null : StringUtils.defaultIfEmpty(vnicProfileNameNode.innerText, null));
    XmlNode linkedNode = node.SelectSingleNode(OvfProperties.VMD_LINKED, _xmlNS);
    iface.setLinked(linkedNode == null ? true : Boolean.valueOf(linkedNode.innerText));
    String resourceSubType = node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).innerText;
    if (StringUtils.isNotEmpty(resourceSubType)) {
        iface.setType(Integer.parseInt(resourceSubType));
    }
    XmlNode speed = node.SelectSingleNode("rasd:speed", _xmlNS);
    iface.setSpeed((speed != null) ? Integer.parseInt(speed.innerText) : VmInterfaceType.forValue(iface.getType()).getSpeed());
}
#end_block

#method_before
private void buildImageReference() {
    XmlNodeList list = _document.SelectNodes("//*/File", _xmlNS);
    for (XmlNode node : list) {
        DiskImage image = new DiskImage();
        image.setImageId(new Guid(node.Attributes.get("ovf:id").getValue()));
        image.setId(OvfParser.GetImageGrupIdFromImageFile(node.Attributes.get("ovf:href").getValue()));
        // Default values:
        image.setActive(true);
        image.setImageStatus(ImageStatus.OK);
        image.setDescription(node.Attributes.get("ovf:description").getValue());
        _images.add(image);
    }
}
#method_after
private void buildImageReference() {
    XmlNodeList list = _document.SelectNodes("//*/File", _xmlNS);
    for (XmlNode node : list) {
        DiskImage image = new DiskImage();
        image.setImageId(new Guid(node.attributes.get("ovf:id").getValue()));
        image.setId(OvfParser.GetImageGrupIdFromImageFile(node.attributes.get("ovf:href").getValue()));
        // Default values:
        image.setActive(true);
        image.setImageStatus(ImageStatus.OK);
        image.setDescription(node.attributes.get("ovf:description").getValue());
        _images.add(image);
    }
}
#end_block

#method_before
private int getResourceType(XmlNode node, String resource) {
    if (node.SelectSingleNode(resource, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(resource, _xmlNS).InnerText)) {
        return Integer.valueOf(node.SelectSingleNode(resource, _xmlNS).InnerText);
    }
    return -1;
}
#method_after
private int getResourceType(XmlNode node, String resource) {
    if (node.SelectSingleNode(resource, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(resource, _xmlNS).innerText)) {
        return Integer.valueOf(node.SelectSingleNode(resource, _xmlNS).innerText);
    }
    return -1;
}
#end_block

#method_before
private void setDeviceByResource(XmlNode node, VmDevice vmDevice) {
    int resourceType = getResourceType(node, OvfProperties.VMD_RESOURCE_TYPE);
    int resourceSubType = getResourceType(node, OvfProperties.VMD_SUB_RESOURCE_TYPE);
    if (resourceSubType == -1) {
        // we need special handling for Monitor to define it as vnc or spice
        if (Integer.valueOf(OvfHardware.Monitor) == resourceType) {
            // if default display type is defined in the ovf, set the video device that is suitable for it
            if (defaultDisplayType != null) {
                VmDeviceType vmDeviceType = getDisplayType(defaultDisplayType);
                vmDevice.setDevice(vmDeviceType.getName());
            } else {
                // get number of monitors from VirtualQuantity in OVF
                if (node.SelectSingleNode(OvfProperties.VMD_VIRTUAL_QUANTITY, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_VIRTUAL_QUANTITY, _xmlNS).InnerText)) {
                    int virtualQuantity = Integer.valueOf(node.SelectSingleNode(OvfProperties.VMD_VIRTUAL_QUANTITY, _xmlNS).InnerText);
                    if (virtualQuantity > 1) {
                        vmDevice.setDevice(VmDeviceType.QXL.getName());
                    } else {
                        VmDeviceType vmDeviceType = getDisplayType(DisplayType.vnc);
                        vmDevice.setDevice(vmDeviceType.getName());
                    }
                } else {
                    // default to spice if quantity not found
                    vmDevice.setDevice(VmDeviceType.QXL.getName());
                }
            }
        } else {
            vmDevice.setDevice(VmDeviceType.getoVirtDevice(resourceType).getName());
        }
    } else if (Integer.valueOf(OvfHardware.Network) == resourceType) {
        // handle interfaces with different sub types : we have 0-3 as the VmInterfaceType enum
        boolean isKnownType = false;
        for (VmInterfaceType vmInterfaceType : VmInterfaceType.values()) {
            if (Integer.valueOf(vmInterfaceType.getValue()) == resourceSubType) {
                vmDevice.setDevice(VmDeviceType.BRIDGE.getName());
                isKnownType = true;
                break;
            }
        }
        if (!isKnownType) {
            vmDevice.setDevice(VmDeviceType.getoVirtDevice(resourceType).getName());
        }
    }
}
#method_after
private void setDeviceByResource(XmlNode node, VmDevice vmDevice) {
    int resourceType = getResourceType(node, OvfProperties.VMD_RESOURCE_TYPE);
    int resourceSubType = getResourceType(node, OvfProperties.VMD_SUB_RESOURCE_TYPE);
    if (resourceSubType == -1) {
        // we need special handling for Monitor to define it as vnc or spice
        if (Integer.valueOf(OvfHardware.Monitor) == resourceType) {
            // if default display type is defined in the ovf, set the video device that is suitable for it
            if (defaultDisplayType != null) {
                VmDeviceType vmDeviceType = getDisplayDevice(defaultDisplayType);
                vmDevice.setDevice(vmDeviceType.getName());
            } else {
                // get number of monitors from VirtualQuantity in OVF
                if (node.SelectSingleNode(OvfProperties.VMD_VIRTUAL_QUANTITY, _xmlNS) != null && !StringUtils.isEmpty(node.SelectSingleNode(OvfProperties.VMD_VIRTUAL_QUANTITY, _xmlNS).innerText)) {
                    int virtualQuantity = Integer.valueOf(node.SelectSingleNode(OvfProperties.VMD_VIRTUAL_QUANTITY, _xmlNS).innerText);
                    if (virtualQuantity > 1) {
                        vmDevice.setDevice(VmDeviceType.QXL.getName());
                    } else {
                        VmDeviceType vmDeviceType = getDisplayDevice(DisplayType.vnc);
                        vmDevice.setDevice(vmDeviceType.getName());
                    }
                } else {
                    // default to spice if quantity not found
                    vmDevice.setDevice(VmDeviceType.QXL.getName());
                }
            }
        } else {
            vmDevice.setDevice(VmDeviceType.getoVirtDevice(resourceType).getName());
        }
    } else if (Integer.valueOf(OvfHardware.Network) == resourceType) {
        // handle interfaces with different sub types : we have 0-3 as the VmInterfaceType enum
        boolean isKnownType = false;
        for (VmInterfaceType vmInterfaceType : VmInterfaceType.values()) {
            if (Integer.valueOf(vmInterfaceType.getValue()) == resourceSubType) {
                vmDevice.setDevice(VmDeviceType.BRIDGE.getName());
                isKnownType = true;
                break;
            }
        }
        if (!isKnownType) {
            vmDevice.setDevice(VmDeviceType.getoVirtDevice(resourceType).getName());
        }
    }
}
#end_block

#method_before
@Override
protected void buildVmVideoCards() {
    createInfo.put(VdsProperties.display, vm.getDisplayType().toString());
    // the VM in Run Once scenario, in that case we need to add proper video device.
    if (vm.getDisplayType() != vm.getDefaultDisplayType()) {
        addVideoCardByDisplayType(vm.getDisplayType(), vm.getNumOfMonitors());
    } else {
        addVideoCardsDefinedForVmInDB(vm.getId());
    }
}
#method_after
@Override
protected void buildVmVideoCards() {
    createInfo.put(VdsProperties.display, vm.getDisplayType().toString());
    // the VM in Run Once scenario, in that case we need to add proper video device.
    if (vm.getDisplayType() != vm.getDefaultDisplayType()) {
        addVideoCardByDisplayType(vm.getDisplayType(), vm.getNumOfMonitors(), vm.getSingleQxlPci());
    } else {
        addVideoCardsDefinedForVmInDB(vm.getId());
    }
}
#end_block

#method_before
private void addVideoCardByDisplayType(DisplayType displayType, int numOfMonitors) {
    Map<String, Object> struct = new HashMap<String, Object>();
    VmDeviceType vmDeviceType = getOsRepository().getVmDeviceType(vm.getOs(), vm.getDefaultDisplayType());
    // create a monitor as an unmanaged device
    struct.put(VdsProperties.Type, VmDeviceGeneralType.VIDEO.getValue());
    struct.put(VdsProperties.Device, vmDeviceType);
    struct.put(VdsProperties.SpecParams, getNewMonitorSpecParams(displayType, numOfMonitors));
    struct.put(VdsProperties.DeviceId, String.valueOf(Guid.newGuid()));
    devices.add(struct);
}
#method_after
private void addVideoCardByDisplayType(DisplayType displayType, int numOfMonitors, boolean singleQxlPci) {
    Map<String, Object> struct = new HashMap<String, Object>();
    VmDeviceType vmDeviceType = getOsRepository().getDisplayDevice(vm.getOs(), vm.getVdsGroupCompatibilityVersion(), displayType);
    // create a monitor as an unmanaged device
    struct.put(VdsProperties.Type, VmDeviceGeneralType.VIDEO.getValue());
    struct.put(VdsProperties.Device, vmDeviceType);
    struct.put(VdsProperties.SpecParams, getNewMonitorSpecParams(displayType, numOfMonitors, singleQxlPci));
    struct.put(VdsProperties.DeviceId, String.valueOf(Guid.newGuid()));
    devices.add(struct);
}
#end_block

#method_before
@Override
protected void buildVmCD() {
    Map<String, Object> struct;
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.CDROM) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null);
        struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    }
    // check first if CD was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getCdPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null);
        struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getCdPath());
    } else {
        // get vm device for this CD from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            struct = new HashMap<String, Object>();
            String cdPath = vm.getCdPath();
            addCdDetails(vmDevice, struct);
            addAddress(vmDevice, struct);
            addDevice(struct, vmDevice, cdPath == null ? "" : cdPath);
        }
    }
}
#method_after
@Override
protected void buildVmCD() {
    Map<String, Object> struct;
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.CDROM) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null, null);
        struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    }
    // check first if CD was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getCdPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null, null);
        struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getCdPath());
    } else {
        // get vm device for this CD from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            struct = new HashMap<String, Object>();
            String cdPath = vm.getCdPath();
            addCdDetails(vmDevice, struct);
            addAddress(vmDevice, struct);
            addDevice(struct, vmDevice, cdPath == null ? "" : cdPath);
        }
    }
}
#end_block

#method_before
@Override
protected void buildVmFloppy() {
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.FLOPPY) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null);
        Map<String, Object> struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    } else // check first if Floppy was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getFloppyPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null);
        Map<String, Object> struct = new HashMap<String, Object>();
        addFloppyDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getFloppyPath());
    } else {
        // get vm device for this Floppy from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            // instead of the blank cd
            if (!VmPayload.isPayload(vmDevice.getSpecParams()) && vmDevices.size() > 1) {
                continue;
            }
            Map<String, Object> struct = new HashMap<String, Object>();
            String file = vm.getFloppyPath();
            addFloppyDetails(vmDevice, struct);
            addDevice(struct, vmDevice, file);
        }
    }
}
#method_after
@Override
protected void buildVmFloppy() {
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.FLOPPY) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null, null);
        Map<String, Object> struct = new HashMap<String, Object>();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    } else // check first if Floppy was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getFloppyPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "", null, null);
        Map<String, Object> struct = new HashMap<String, Object>();
        addFloppyDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getFloppyPath());
    } else {
        // get vm device for this Floppy from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            // instead of the blank cd
            if (!VmPayload.isPayload(vmDevice.getSpecParams()) && vmDevices.size() > 1) {
                continue;
            }
            Map<String, Object> struct = new HashMap<String, Object>();
            String file = vm.getFloppyPath();
            addFloppyDetails(vmDevice, struct);
            addDevice(struct, vmDevice, file);
        }
    }
}
#end_block

#method_before
@Override
protected void buildVmDrives() {
    boolean containsVirtioScsiDisk = true;
    List<Disk> disks = getSortedDisks();
    for (Disk disk : disks) {
        Map<String, Object> struct = new HashMap<String, Object>();
        // get vm device for this disk from DB
        VmDevice vmDevice = DbFacade.getInstance().getVmDeviceDao().get(new VmDeviceId(disk.getId(), vm.getId()));
        // skip unamanged devices (handled separtely)
        if (!vmDevice.getIsManaged()) {
            continue;
        }
        if (vmDevice.getIsPlugged()) {
            struct.put(VdsProperties.Type, vmDevice.getType().getValue());
            struct.put(VdsProperties.Device, vmDevice.getDevice());
            switch(disk.getDiskInterface()) {
                case IDE:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Ide);
                    break;
                case VirtIO:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Virtio);
                    break;
                case VirtIO_SCSI:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Scsi);
                    if (disk.getDiskStorageType() == DiskStorageType.LUN) {
                        struct.put(VdsProperties.Device, VmDeviceType.LUN.getName());
                        struct.put(VdsProperties.Sgio, disk.getSgio().toString().toLowerCase());
                    }
                    containsVirtioScsiDisk = true;
                    break;
                default:
                    logUnsupportedInterfaceType();
                    break;
            }
            // Insure that boot disk is created first.
            if (disk.isBoot()) {
                struct.put(VdsProperties.Index, 0);
            }
            addAddress(vmDevice, struct);
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage diskImage = (DiskImage) disk;
                struct.put(VdsProperties.PoolId, diskImage.getStoragePoolId().toString());
                struct.put(VdsProperties.DomainId, diskImage.getStorageIds().get(0).toString());
                struct.put(VdsProperties.ImageId, diskImage.getId().toString());
                struct.put(VdsProperties.VolumeId, diskImage.getImageId().toString());
                struct.put(VdsProperties.Format, diskImage.getVolumeFormat().toString().toLowerCase());
                struct.put(VdsProperties.PropagateErrors, disk.getPropagateErrors().toString().toLowerCase());
            } else {
                LunDisk lunDisk = (LunDisk) disk;
                struct.put(VdsProperties.Guid, lunDisk.getLun().getLUN_id());
                struct.put(VdsProperties.Format, VolumeFormat.RAW.toString().toLowerCase());
                struct.put(VdsProperties.PropagateErrors, PropagateErrors.Off.toString().toLowerCase());
            }
            addBootOrder(vmDevice, struct);
            struct.put(VdsProperties.Shareable, String.valueOf(disk.isShareable()));
            struct.put(VdsProperties.Optional, Boolean.FALSE.toString());
            struct.put(VdsProperties.ReadOnly, String.valueOf(vmDevice.getIsReadOnly()));
            struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams());
            struct.put(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
            devices.add(struct);
            addToManagedDevices(vmDevice);
        }
    }
    if (containsVirtioScsiDisk) {
        Map<String, Object> struct = new HashMap<String, Object>();
        struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue());
        struct.put(VdsProperties.Device, VdsProperties.Scsi);
        struct.put(VdsProperties.Model, VdsProperties.VirtioScsi);
        devices.add(struct);
    }
}
#method_after
@Override
protected void buildVmDrives() {
    boolean bootDiskFound = false;
    List<Disk> disks = getSortedDisks();
    for (Disk disk : disks) {
        Map<String, Object> struct = new HashMap<String, Object>();
        // get vm device for this disk from DB
        VmDevice vmDevice = DbFacade.getInstance().getVmDeviceDao().get(new VmDeviceId(disk.getId(), vm.getId()));
        // skip unamanged devices (handled separtely)
        if (!vmDevice.getIsManaged()) {
            continue;
        }
        if (vmDevice.getIsPlugged()) {
            struct.put(VdsProperties.Type, vmDevice.getType().getValue());
            struct.put(VdsProperties.Device, vmDevice.getDevice());
            switch(disk.getDiskInterface()) {
                case IDE:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Ide);
                    break;
                case VirtIO:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Virtio);
                    break;
                case VirtIO_SCSI:
                    struct.put(VdsProperties.INTERFACE, VdsProperties.Scsi);
                    if (disk.getDiskStorageType() == DiskStorageType.LUN) {
                        struct.put(VdsProperties.Device, VmDeviceType.LUN.getName());
                        struct.put(VdsProperties.Sgio, disk.getSgio().toString().toLowerCase());
                    }
                    break;
                default:
                    logUnsupportedInterfaceType();
                    break;
            }
            // Insure that boot disk is created first
            if (!bootDiskFound && disk.isBoot()) {
                bootDiskFound = true;
                struct.put(VdsProperties.Index, 0);
            }
            addAddress(vmDevice, struct);
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage diskImage = (DiskImage) disk;
                struct.put(VdsProperties.PoolId, diskImage.getStoragePoolId().toString());
                struct.put(VdsProperties.DomainId, diskImage.getStorageIds().get(0).toString());
                struct.put(VdsProperties.ImageId, diskImage.getId().toString());
                struct.put(VdsProperties.VolumeId, diskImage.getImageId().toString());
                struct.put(VdsProperties.Format, diskImage.getVolumeFormat().toString().toLowerCase());
                struct.put(VdsProperties.PropagateErrors, disk.getPropagateErrors().toString().toLowerCase());
            } else {
                LunDisk lunDisk = (LunDisk) disk;
                struct.put(VdsProperties.Guid, lunDisk.getLun().getLUN_id());
                struct.put(VdsProperties.Format, VolumeFormat.RAW.toString().toLowerCase());
                struct.put(VdsProperties.PropagateErrors, PropagateErrors.Off.toString().toLowerCase());
            }
            addBootOrder(vmDevice, struct);
            struct.put(VdsProperties.Shareable, (vmDevice.getSnapshotId() != null && FeatureSupported.hotPlugDiskSnapshot(vm.getVdsGroupCompatibilityVersion())) ? VdsProperties.Transient : String.valueOf(disk.isShareable()));
            struct.put(VdsProperties.Optional, Boolean.FALSE.toString());
            struct.put(VdsProperties.ReadOnly, String.valueOf(vmDevice.getIsReadOnly()));
            struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams());
            struct.put(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
            devices.add(struct);
            addToManagedDevices(vmDevice);
        }
    }
}
#end_block

#method_before
@Override
protected void buildSysprepVmPayload(String sysPrepContent) {
    // We do not validate the size of the content being passed to the VM payload by VmPayload.isPayloadSizeLegal().
    // The sysprep file size isn't being verified for 3.0 clusters and below, so we maintain the same behavior here.
    VmPayload vmPayload = new VmPayload();
    vmPayload.setType(VmDeviceType.FLOPPY);
    vmPayload.getFiles().put(SYSPREP_FILE_NAME, Base64.encodeBase64String(sysPrepContent.getBytes()));
    VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null);
    Map<String, Object> struct = new HashMap<String, Object>();
    addFloppyDetails(vmDevice, struct);
    addDevice(struct, vmDevice, vm.getFloppyPath());
}
#method_after
@Override
protected void buildSysprepVmPayload(String sysPrepContent) {
    // We do not validate the size of the content being passed to the VM payload by VmPayload.isPayloadSizeLegal().
    // The sysprep file size isn't being verified for 3.0 clusters and below, so we maintain the same behavior here.
    VmPayload vmPayload = new VmPayload();
    vmPayload.setType(VmDeviceType.FLOPPY);
    vmPayload.getFiles().put(SYSPREP_FILE_NAME, Base64.encodeBase64String(sysPrepContent.getBytes()));
    VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null);
    Map<String, Object> struct = new HashMap<String, Object>();
    addFloppyDetails(vmDevice, struct);
    addDevice(struct, vmDevice, vm.getFloppyPath());
}
#end_block

#method_before
@Override
protected void buildCloudInitVmPayload(Map<String, byte[]> cloudInitContent) {
    VmPayload vmPayload = new VmPayload();
    vmPayload.setType(VmDeviceType.CDROM);
    vmPayload.setVolumeId(CLOUD_INIT_VOL_ID);
    for (Map.Entry<String, byte[]> entry : cloudInitContent.entrySet()) {
        vmPayload.getFiles().put(entry.getKey(), Base64.encodeBase64String(entry.getValue()));
    }
    VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null);
    Map<String, Object> struct = new HashMap<String, Object>();
    addCdDetails(vmDevice, struct);
    addDevice(struct, vmDevice, "");
}
#method_after
@Override
protected void buildCloudInitVmPayload(Map<String, byte[]> cloudInitContent) {
    VmPayload vmPayload = new VmPayload();
    vmPayload.setType(VmDeviceType.CDROM);
    vmPayload.setVolumeId(CLOUD_INIT_VOL_ID);
    for (Map.Entry<String, byte[]> entry : cloudInitContent.entrySet()) {
        vmPayload.getFiles().put(entry.getKey(), Base64.encodeBase64String(entry.getValue()));
    }
    VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.DISK, VmDeviceType.CDROM.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null);
    Map<String, Object> struct = new HashMap<String, Object>();
    addCdDetails(vmDevice, struct);
    addDevice(struct, vmDevice, "");
}
#end_block

#method_before
public static void addProfileDataToNic(Map<String, Object> struct, VM vm, VmDevice vmDevice, VmNic nic) {
    VnicProfile vnicProfile = null;
    Network network = null;
    if (nic.getVnicProfileId() != null) {
        vnicProfile = DbFacade.getInstance().getVnicProfileDao().get(nic.getVnicProfileId());
        if (vnicProfile != null) {
            network = DbFacade.getInstance().getNetworkDao().get(vnicProfile.getNetworkId());
            addQosForDevice((Map<String, Object>) struct.get(VdsProperties.SpecParams), vnicProfile, vm.getVdsGroupCompatibilityVersion());
        }
    }
    struct.put(VdsProperties.NETWORK, network == null ? "" : network.getName());
    if (vnicProfile != null && vnicProfile.isPortMirroring()) {
        struct.put(VdsProperties.PORT_MIRRORING, network == null ? Collections.<String>emptyList() : Collections.singletonList(network.getName()));
    }
    addCustomPropertiesForDevice(struct, vm, vmDevice, vm.getVdsGroupCompatibilityVersion(), getVnicCustomProperties(vnicProfile));
}
#method_after
public static void addProfileDataToNic(Map<String, Object> struct, VM vm, VmDevice vmDevice, VmNic nic) {
    VnicProfile vnicProfile = null;
    Network network = null;
    String networkName = "";
    List<VNIC_PROFILE_PROPERTIES> unsupportedFeatures = new ArrayList<>();
    if (nic.getVnicProfileId() != null) {
        vnicProfile = DbFacade.getInstance().getVnicProfileDao().get(nic.getVnicProfileId());
        if (vnicProfile != null) {
            network = DbFacade.getInstance().getNetworkDao().get(vnicProfile.getNetworkId());
            networkName = network.getName();
            log.debugFormat("VNIC {0} is using profile {1} on network {2}", nic.getName(), vnicProfile, networkName);
            if (!addQosForDevice(struct, vnicProfile, vm.getVdsGroupCompatibilityVersion())) {
                unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.NETWORK_QOS);
            }
        }
    }
    struct.put(VdsProperties.NETWORK, networkName);
    if (!addPortMirroringToVmInterface(struct, vnicProfile, vm.getVdsGroupCompatibilityVersion(), network)) {
        unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.PORT_MIRRORING);
    }
    if (!addCustomPropertiesForDevice(struct, vm, vmDevice, vm.getVdsGroupCompatibilityVersion(), getVnicCustomProperties(vnicProfile))) {
        unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.CUSTOM_PROPERTIES);
    }
    reportUnsupportedVnicProfileFeatures(vm, nic, vnicProfile, unsupportedFeatures);
}
#end_block

#method_before
private static void addQosForDevice(Map<String, Object> specParams, VnicProfile vnicProfile, Version vdsGroupCompatibilityVersion) {
    if (FeatureSupported.networkQoS(vdsGroupCompatibilityVersion) && vnicProfile.getNetworkQosId() != null) {
        NetworkQoS networkQoS = DbFacade.getInstance().getQosDao().get(vnicProfile.getNetworkQosId());
        if (networkQoS != null) {
            if (specParams == null) {
                specParams = new HashMap<>();
            }
            addQosData(specParams, VdsProperties.QOS_INBOUND, networkQoS.getInboundAverage(), networkQoS.getInboundPeak(), networkQoS.getInboundBurst());
            addQosData(specParams, VdsProperties.QOS_OUTBOUND, networkQoS.getOutboundAverage(), networkQoS.getOutboundPeak(), networkQoS.getOutboundBurst());
        }
    }
}
#method_after
private static boolean addQosForDevice(Map<String, Object> struct, VnicProfile vnicProfile, Version vdsGroupCompatibilityVersion) {
    if (vnicProfile.getNetworkQosId() != null) {
        if (!FeatureSupported.networkQoS(vdsGroupCompatibilityVersion)) {
            return false;
        }
        NetworkQoS networkQoS = DbFacade.getInstance().getQosDao().get(vnicProfile.getNetworkQosId());
        if (networkQoS != null) {
            Map<String, Object> specParams = (Map<String, Object>) struct.get(VdsProperties.SpecParams);
            if (specParams == null) {
                specParams = new HashMap<>();
                struct.put(VdsProperties.SpecParams, specParams);
            }
            addQosData(specParams, VdsProperties.QOS_INBOUND, networkQoS.getInboundAverage(), networkQoS.getInboundPeak(), networkQoS.getInboundBurst());
            addQosData(specParams, VdsProperties.QOS_OUTBOUND, networkQoS.getOutboundAverage(), networkQoS.getOutboundPeak(), networkQoS.getOutboundBurst());
        }
    }
    return true;
}
#end_block

#method_before
private static void addQosData(Map<String, Object> specParams, String containerName, int average, int peak, int burst) {
    if (average > 0) {
        Map<String, String> qosData = new HashMap<>();
        qosData.put(VdsProperties.QOS_AVERAGE, String.valueOf(average * MEGABITS_TO_KILOBYTES));
        qosData.put(VdsProperties.QOS_PEAK, String.valueOf(peak * MEGABITS_TO_KILOBYTES));
        qosData.put(VdsProperties.QOS_BURST, String.valueOf(burst * MEGABYTES_TO_KILOBYTES));
        specParams.put(containerName, qosData);
    }
}
#method_after
private static void addQosData(Map<String, Object> specParams, String containerName, Integer average, Integer peak, Integer burst) {
    if (average != null && average > 0) {
        Map<String, String> qosData = new HashMap<>();
        qosData.put(VdsProperties.QOS_AVERAGE, String.valueOf(average * MEGABITS_TO_KILOBYTES));
        qosData.put(VdsProperties.QOS_PEAK, String.valueOf(peak * MEGABITS_TO_KILOBYTES));
        qosData.put(VdsProperties.QOS_BURST, String.valueOf(burst * MEGABYTES_TO_KILOBYTES));
        specParams.put(containerName, qosData);
    }
}
#end_block

#method_before
public static void addCustomPropertiesForDevice(Map<String, Object> struct, VM vm, VmDevice vmDevice, Version clusterVersion, Map<String, String> customProperties) {
    if (FeatureSupported.deviceCustomProperties(clusterVersion)) {
        if (customProperties == null) {
            customProperties = new HashMap<>();
        }
        customProperties.putAll(vmDevice.getCustomProperties());
        Map<String, String> runtimeCustomProperties = vm.getRuntimeDeviceCustomProperties().get(vmDevice);
        if (runtimeCustomProperties != null) {
            customProperties.putAll(runtimeCustomProperties);
        }
        struct.put(VdsProperties.Custom, customProperties);
    }
}
#method_after
public static boolean addCustomPropertiesForDevice(Map<String, Object> struct, VM vm, VmDevice vmDevice, Version clusterVersion, Map<String, String> customProperties) {
    if (customProperties == null) {
        customProperties = new HashMap<>();
    }
    customProperties.putAll(vmDevice.getCustomProperties());
    Map<String, String> runtimeCustomProperties = vm.getRuntimeDeviceCustomProperties().get(vmDevice);
    if (runtimeCustomProperties != null) {
        customProperties.putAll(runtimeCustomProperties);
    }
    if (!customProperties.isEmpty()) {
        if (FeatureSupported.deviceCustomProperties(clusterVersion)) {
            struct.put(VdsProperties.Custom, customProperties);
        } else {
            return false;
        }
    }
    return true;
}
#end_block

#method_before
private static HashMap<String, Object> getNewMonitorSpecParams(DisplayType displayType, int numOfMonitors) {
    HashMap<String, Object> specParams = new HashMap<String, Object>();
    specParams.put("vram", String.valueOf(VmDeviceCommonUtils.HIGH_VIDEO_MEM));
    if (displayType == DisplayType.qxl) {
        specParams.put("heads", numOfMonitors);
    }
    return specParams;
}
#method_after
private static HashMap<String, Object> getNewMonitorSpecParams(DisplayType displayType, int numOfMonitors, boolean singleQxlPci) {
    HashMap<String, Object> specParams = new HashMap<String, Object>();
    specParams.put("vram", String.valueOf(VmDeviceCommonUtils.LOW_VIDEO_MEM));
    specParams.put("heads", String.valueOf(numOfMonitors));
    specParams.put("vram", VmDeviceCommonUtils.singlePciVRamByHeads(numOfMonitors));
    if (displayType == DisplayType.qxl && singleQxlPci) {
        specParams.put("ram", VmDeviceCommonUtils.singlePciRamByHeads(numOfMonitors));
    }
    return specParams;
}
#end_block

#method_before
@Override
protected void buildVmMemoryBalloon() {
    if (vm.isRunOnce() && vm.isBalloonEnabled()) {
        Map<String, Object> specParams = new HashMap<String, Object>();
        specParams.put(VdsProperties.Model, VdsProperties.Virtio);
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.BALLOON, VmDeviceType.MEMBALLOON.getName(), "", 0, specParams, true, true, true, "", null);
        addMemBalloonDevice(vmDevice);
    } else {
        // get vm device for this Balloon from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.BALLOON, VmDeviceType.MEMBALLOON.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            addMemBalloonDevice(vmDevice);
            // only one memory balloon should exist
            break;
        }
    }
}
#method_after
@Override
protected void buildVmMemoryBalloon() {
    if (vm.isRunOnce() && vm.isBalloonEnabled()) {
        Map<String, Object> specParams = new HashMap<String, Object>();
        specParams.put(VdsProperties.Model, VdsProperties.Virtio);
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.newGuid(), vm.getId()), VmDeviceGeneralType.BALLOON, VmDeviceType.MEMBALLOON.getName(), "", 0, specParams, true, true, true, "", null, null);
        addMemBalloonDevice(vmDevice);
    } else {
        // get vm device for this Balloon from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.BALLOON, VmDeviceType.MEMBALLOON.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            addMemBalloonDevice(vmDevice);
            // only one memory balloon should exist
            break;
        }
    }
}
#end_block

#method_before
public EntityModel getIsSoundcardEnabled() {
    return isSoundcardEnabled;
}
#method_after
public EntityModel<Boolean> getIsSoundcardEnabled() {
    return isSoundcardEnabled;
}
#end_block

#method_before
private void setIsSoundcardEnabled(NotChangableForVmInPoolEntityModel isSoundcardEnabled) {
    this.isSoundcardEnabled = isSoundcardEnabled;
}
#method_after
private void setIsSoundcardEnabled(NotChangableForVmInPoolEntityModel<Boolean> isSoundcardEnabled) {
    this.isSoundcardEnabled = isSoundcardEnabled;
}
#end_block

#method_before
public ListModel getDataCenterWithClustersList() {
    return dataCenterWithClustersList;
}
#method_after
public ListModel<DataCenterWithCluster> getDataCenterWithClustersList() {
    return dataCenterWithClustersList;
}
#end_block

#method_before
private void setDataCenterWithClustersList(NotChangableForVmInPoolListModel dataCenterWithClustersList) {
    this.dataCenterWithClustersList = dataCenterWithClustersList;
}
#method_after
private void setDataCenterWithClustersList(NotChangableForVmInPoolListModel<DataCenterWithCluster> dataCenterWithClustersList) {
    this.dataCenterWithClustersList = dataCenterWithClustersList;
}
#end_block

#method_before
public ListModel getNicsWithLogicalNetworks() {
    return nicsWithLogicalNetworks;
}
#method_after
public ListModel<VnicInstanceType> getNicsWithLogicalNetworks() {
    return nicsWithLogicalNetworks;
}
#end_block

#method_before
public void setNicsWithLogicalNetworks(ListModel nicsWithLogicalNetworks) {
    this.nicsWithLogicalNetworks = nicsWithLogicalNetworks;
}
#method_after
public void setNicsWithLogicalNetworks(ListModel<VnicInstanceType> nicsWithLogicalNetworks) {
    this.nicsWithLogicalNetworks = nicsWithLogicalNetworks;
}
#end_block

#method_before
public void setVmAttachedToPool(boolean value) {
    if (value) {
        // ==General Tab==
        getDataCenterWithClustersList().setIsChangable(!value);
        getQuota().setIsChangable(false);
        getDescription().setIsChangable(false);
        getComment().setIsChangable(false);
        getNumOfDesktops().setIsChangable(false);
        getPrestartedVms().setIsChangable(false);
        getMaxAssignedVmsPerUser().setIsChangable(false);
        getTemplate().setIsChangable(false);
        getMemSize().setIsChangable(false);
        getTotalCPUCores().setIsChangable(false);
        getCoresPerSocket().setIsChangable(false);
        getNumOfSockets().setIsChangable(false);
        getOSType().setIsChangable(false);
        getIsStateless().setIsChangable(false);
        getIsRunAndPause().setIsChangable(false);
        getIsDeleteProtected().setIsChangable(false);
        // ==Initial run Tab==
        getTimeZone().setIsChangable(false);
        getDomain().setIsChangable(false);
        // ==Console Tab==
        getDisplayProtocol().setIsChangable(false);
        getUsbPolicy().setIsChangable(false);
        getNumOfMonitors().setIsChangable(false);
        getIsSingleQxlEnabled().setIsAvailable(false);
        getIsSmartcardEnabled().setIsChangable(false);
        getAllowConsoleReconnect().setIsChangable(false);
        getVncKeyboardLayout().setIsChangable(false);
        // ==Host Tab==
        getIsAutoAssign().setIsChangable(false);
        getDefaultHost().setIsChangable(false);
        getHostCpu().setIsChangable(false);
        getMigrationMode().setIsChangable(false);
        getCpuPinning().setIsChangable(false);
        // ==Resource Allocation Tab==
        getMinAllocatedMemory().setIsChangable(false);
        getProvisioning().setIsChangable(false);
        getProvisioningThin_IsSelected().setIsChangable(false);
        getProvisioningClone_IsSelected().setIsChangable(false);
        getDisksAllocationModel().setIsChangable(false);
        // ==Boot Options Tab==
        getFirstBootDevice().setIsChangable(false);
        getSecondBootDevice().setIsChangable(false);
        getCdAttached().setIsChangable(false);
        getCdImage().setIsChangable(false);
        getKernel_path().setIsChangable(false);
        getInitrd_path().setIsChangable(false);
        getKernel_parameters().setIsChangable(false);
        // ==Custom Properties Tab==
        getCustomProperties().setIsChangable(false);
        vmAttachedToPool = true;
    }
}
#method_after
public void setVmAttachedToPool(boolean value) {
    if (value) {
        // ==General Tab==
        getDataCenterWithClustersList().setIsChangable(!value);
        getQuota().setIsChangable(false);
        getDescription().setIsChangable(false);
        getComment().setIsChangable(false);
        getNumOfDesktops().setIsChangable(false);
        getPrestartedVms().setIsChangable(false);
        getMaxAssignedVmsPerUser().setIsChangable(false);
        getTemplate().setIsChangable(false);
        getMemSize().setIsChangable(false);
        getTotalCPUCores().setIsChangable(false);
        getCoresPerSocket().setIsChangable(false);
        getNumOfSockets().setIsChangable(false);
        getOSType().setIsChangable(false);
        getIsStateless().setIsChangable(false);
        getIsRunAndPause().setIsChangable(false);
        getIsDeleteProtected().setIsChangable(false);
        // ==Initial run Tab==
        getTimeZone().setIsChangable(false);
        getDomain().setIsChangable(false);
        // ==Console Tab==
        getDisplayProtocol().setIsChangable(false);
        getUsbPolicy().setIsChangable(false);
        getNumOfMonitors().setIsChangable(false);
        getIsSingleQxlEnabled().setIsChangable(false);
        getIsSmartcardEnabled().setIsChangable(false);
        getAllowConsoleReconnect().setIsChangable(false);
        getVncKeyboardLayout().setIsChangable(false);
        getSsoMethodNone().setIsChangable(false);
        getSsoMethodGuestAgent().setIsChangable(false);
        // ==Host Tab==
        getIsAutoAssign().setIsChangable(false);
        getDefaultHost().setIsChangable(false);
        getHostCpu().setIsChangable(false);
        getMigrationMode().setIsChangable(false);
        getCpuPinning().setIsChangable(false);
        // ==Resource Allocation Tab==
        getMinAllocatedMemory().setIsChangable(false);
        getProvisioning().setIsChangable(false);
        getProvisioningThin_IsSelected().setIsChangable(false);
        getProvisioningClone_IsSelected().setIsChangable(false);
        getDisksAllocationModel().setIsChangable(false);
        // ==Boot Options Tab==
        getFirstBootDevice().setIsChangable(false);
        getSecondBootDevice().setIsChangable(false);
        getCdAttached().setIsChangable(false);
        getCdImage().setIsChangable(false);
        getKernel_path().setIsChangable(false);
        getInitrd_path().setIsChangable(false);
        getKernel_parameters().setIsChangable(false);
        // ==Custom Properties Tab==
        getCustomProperties().setIsChangable(false);
        vmAttachedToPool = true;
    }
}
#end_block

#method_before
public ListModel getStorageDomain() {
    return privateStorageDomain;
}
#method_after
public ListModel<StorageDomain> getStorageDomain() {
    return privateStorageDomain;
}
#end_block

#method_before
private void setStorageDomain(NotChangableForVmInPoolListModel value) {
    privateStorageDomain = value;
}
#method_after
private void setStorageDomain(NotChangableForVmInPoolListModel<StorageDomain> value) {
    privateStorageDomain = value;
}
#end_block

#method_before
public ListModel getTemplate() {
    return privateTemplate;
}
#method_after
public ListModel<VmTemplate> getTemplate() {
    return privateTemplate;
}
#end_block

#method_before
private void setTemplate(NotChangableForVmInPoolListModel value) {
    privateTemplate = value;
}
#method_after
private void setTemplate(NotChangableForVmInPoolListModel<VmTemplate> value) {
    privateTemplate = value;
}
#end_block

#method_before
public void setVmType(NotChangableForVmInPoolListModel vmType) {
    this.vmType = vmType;
}
#method_after
public void setVmType(NotChangableForVmInPoolListModel<VmType> vmType) {
    this.vmType = vmType;
}
#end_block

#method_before
public ListModel getVmType() {
    return vmType;
}
#method_after
public ListModel<VmType> getVmType() {
    return vmType;
}
#end_block

#method_before
public EntityModel getName() {
    return privateName;
}
#method_after
public EntityModel<String> getName() {
    return privateName;
}
#end_block

#method_before
private void setName(EntityModel value) {
    privateName = value;
}
#method_after
private void setName(EntityModel<String> value) {
    privateName = value;
}
#end_block

#method_before
public ListModel getOSType() {
    return privateOSType;
}
#method_after
public ListModel<Integer> getOSType() {
    return privateOSType;
}
#end_block

#method_before
private void setOSType(NotChangableForVmInPoolListModel value) {
    privateOSType = value;
}
#method_after
private void setOSType(NotChangableForVmInPoolListModel<Integer> value) {
    privateOSType = value;
}
#end_block

#method_before
public ListModel getNumOfMonitors() {
    return privateNumOfMonitors;
}
#method_after
public ListModel<Integer> getNumOfMonitors() {
    return privateNumOfMonitors;
}
#end_block

#method_before
private void setNumOfMonitors(NotChangableForVmInPoolListModel value) {
    privateNumOfMonitors = value;
}
#method_after
private void setNumOfMonitors(NotChangableForVmInPoolListModel<Integer> value) {
    privateNumOfMonitors = value;
}
#end_block

#method_before
public EntityModel getIsSingleQxlEnabled() {
    return privateIsSingleQxlEnabled;
}
#method_after
public EntityModel<Boolean> getIsSingleQxlEnabled() {
    return privateIsSingleQxlEnabled;
}
#end_block

#method_before
private void setIsSingleQxlEnabled(NotChangableForVmInPoolEntityModel value) {
    privateIsSingleQxlEnabled = value;
}
#method_after
private void setIsSingleQxlEnabled(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsSingleQxlEnabled = value;
}
#end_block

#method_before
public EntityModel getAllowConsoleReconnect() {
    return privateAllowConsoleReconnect;
}
#method_after
public EntityModel<Boolean> getAllowConsoleReconnect() {
    return privateAllowConsoleReconnect;
}
#end_block

#method_before
private void setAllowConsoleReconnect(NotChangableForVmInPoolEntityModel value) {
    privateAllowConsoleReconnect = value;
}
#method_after
private void setAllowConsoleReconnect(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateAllowConsoleReconnect = value;
}
#end_block

#method_before
public EntityModel getDescription() {
    return privateDescription;
}
#method_after
public EntityModel<String> getDescription() {
    return privateDescription;
}
#end_block

#method_before
private void setDescription(NotChangableForVmInPoolEntityModel value) {
    privateDescription = value;
}
#method_after
private void setDescription(NotChangableForVmInPoolEntityModel<String> value) {
    privateDescription = value;
}
#end_block

#method_before
public EntityModel getComment() {
    return privateComment;
}
#method_after
public EntityModel<String> getComment() {
    return privateComment;
}
#end_block

#method_before
private void setComment(NotChangableForVmInPoolEntityModel value) {
    privateComment = value;
}
#method_after
private void setComment(NotChangableForVmInPoolEntityModel<String> value) {
    privateComment = value;
}
#end_block

#method_before
public ListModel getDomain() {
    return privateDomain;
}
#method_after
public ListModel<String> getDomain() {
    return privateDomain;
}
#end_block

#method_before
private void setDomain(NotChangableForVmInPoolListModel value) {
    privateDomain = value;
}
#method_after
private void setDomain(NotChangableForVmInPoolListModel<String> value) {
    privateDomain = value;
}
#end_block

#method_before
public EntityModel getMemSize() {
    return privateMemSize;
}
#method_after
public EntityModel<Integer> getMemSize() {
    return privateMemSize;
}
#end_block

#method_before
private void setMemSize(NotChangableForVmInPoolEntityModel value) {
    privateMemSize = value;
}
#method_after
private void setMemSize(NotChangableForVmInPoolEntityModel<Integer> value) {
    privateMemSize = value;
}
#end_block

#method_before
public EntityModel getMinAllocatedMemory() {
    return privateMinAllocatedMemory;
}
#method_after
public EntityModel<Integer> getMinAllocatedMemory() {
    return privateMinAllocatedMemory;
}
#end_block

#method_before
private void setMinAllocatedMemory(NotChangableForVmInPoolEntityModel value) {
    privateMinAllocatedMemory = value;
}
#method_after
private void setMinAllocatedMemory(NotChangableForVmInPoolEntityModel<Integer> value) {
    privateMinAllocatedMemory = value;
}
#end_block

#method_before
public ListModel getQuota() {
    return privateQuota;
}
#method_after
public ListModel<Quota> getQuota() {
    return privateQuota;
}
#end_block

#method_before
private void setQuota(NotChangableForVmInPoolListModel value) {
    privateQuota = value;
}
#method_after
private void setQuota(NotChangableForVmInPoolListModel<Quota> value) {
    privateQuota = value;
}
#end_block

#method_before
public ListModel getUsbPolicy() {
    return privateUsbPolicy;
}
#method_after
public ListModel<UsbPolicy> getUsbPolicy() {
    return privateUsbPolicy;
}
#end_block

#method_before
private void setUsbPolicy(NotChangableForVmInPoolListModel value) {
    privateUsbPolicy = value;
}
#method_after
private void setUsbPolicy(NotChangableForVmInPoolListModel<UsbPolicy> value) {
    privateUsbPolicy = value;
}
#end_block

#method_before
public ListModel getTimeZone() {
    return privateTimeZone;
}
#method_after
public ListModel<TimeZoneModel> getTimeZone() {
    return privateTimeZone;
}
#end_block

#method_before
private void setTimeZone(NotChangableForVmInPoolListModel value) {
    privateTimeZone = value;
}
#method_after
private void setTimeZone(NotChangableForVmInPoolListModel<TimeZoneModel> value) {
    privateTimeZone = value;
}
#end_block

#method_before
public ListModel getNumOfSockets() {
    return privateNumOfSockets;
}
#method_after
public ListModel<Integer> getNumOfSockets() {
    return privateNumOfSockets;
}
#end_block

#method_before
private void setNumOfSockets(NotChangableForVmInPoolListModel value) {
    privateNumOfSockets = value;
}
#method_after
private void setNumOfSockets(NotChangableForVmInPoolListModel<Integer> value) {
    privateNumOfSockets = value;
}
#end_block

#method_before
public EntityModel getTotalCPUCores() {
    return privateTotalCPUCores;
}
#method_after
public EntityModel<String> getTotalCPUCores() {
    return privateTotalCPUCores;
}
#end_block

#method_before
private void setTotalCPUCores(NotChangableForVmInPoolEntityModel value) {
    privateTotalCPUCores = value;
}
#method_after
private void setTotalCPUCores(NotChangableForVmInPoolEntityModel<String> value) {
    privateTotalCPUCores = value;
}
#end_block

#method_before
public ListModel getCoresPerSocket() {
    return privateCoresPerSocket;
}
#method_after
public ListModel<Integer> getCoresPerSocket() {
    return privateCoresPerSocket;
}
#end_block

#method_before
private void setCoresPerSocket(NotChangableForVmInPoolListModel value) {
    privateCoresPerSocket = value;
}
#method_after
private void setCoresPerSocket(NotChangableForVmInPoolListModel<Integer> value) {
    privateCoresPerSocket = value;
}
#end_block

#method_before
public ListModel getDefaultHost() {
    return privateDefaultHost;
}
#method_after
public ListModel<VDS> getDefaultHost() {
    return privateDefaultHost;
}
#end_block

#method_before
private void setDefaultHost(NotChangableForVmInPoolListModel value) {
    privateDefaultHost = value;
}
#method_after
private void setDefaultHost(NotChangableForVmInPoolListModel<VDS> value) {
    privateDefaultHost = value;
}
#end_block

#method_before
public EntityModel getIsSmartcardEnabled() {
    return privateisSmartcardEnabled;
}
#method_after
public EntityModel<Boolean> getIsSmartcardEnabled() {
    return privateisSmartcardEnabled;
}
#end_block

#method_before
private void setIsSmartcardEnabled(NotChangableForVmInPoolEntityModel value) {
    privateisSmartcardEnabled = value;
}
#method_after
private void setIsSmartcardEnabled(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateisSmartcardEnabled = value;
}
#end_block

#method_before
public EntityModel getIsConsoleDeviceEnabled() {
    return isConsoleDeviceEnabled;
}
#method_after
public EntityModel<Boolean> getIsConsoleDeviceEnabled() {
    return isConsoleDeviceEnabled;
}
#end_block

#method_before
private void setConsoleDeviceEnabled(NotChangableForVmInPoolEntityModel consoleDeviceEnabled) {
    this.isConsoleDeviceEnabled = consoleDeviceEnabled;
}
#method_after
private void setConsoleDeviceEnabled(NotChangableForVmInPoolEntityModel<Boolean> consoleDeviceEnabled) {
    this.isConsoleDeviceEnabled = consoleDeviceEnabled;
}
#end_block

#method_before
public EntityModel getIsStateless() {
    return privateIsStateless;
}
#method_after
public EntityModel<Boolean> getIsStateless() {
    return privateIsStateless;
}
#end_block

#method_before
private void setIsStateless(NotChangableForVmInPoolEntityModel value) {
    privateIsStateless = value;
}
#method_after
private void setIsStateless(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsStateless = value;
}
#end_block

#method_before
public EntityModel getIsRunAndPause() {
    return privateIsRunAndPause;
}
#method_after
public EntityModel<Boolean> getIsRunAndPause() {
    return privateIsRunAndPause;
}
#end_block

#method_before
private void setIsRunAndPause(NotChangableForVmInPoolEntityModel value) {
    privateIsRunAndPause = value;
}
#method_after
private void setIsRunAndPause(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsRunAndPause = value;
}
#end_block

#method_before
public EntityModel getIsDeleteProtected() {
    return privateIsDeleteProtected;
}
#method_after
public EntityModel<Boolean> getIsDeleteProtected() {
    return privateIsDeleteProtected;
}
#end_block

#method_before
public void setIsDeleteProtected(NotChangableForVmInPoolEntityModel deleteProtected) {
    this.privateIsDeleteProtected = deleteProtected;
}
#method_after
public void setIsDeleteProtected(NotChangableForVmInPoolEntityModel<Boolean> deleteProtected) {
    this.privateIsDeleteProtected = deleteProtected;
}
#end_block

#method_before
public EntityModel getCopyPermissions() {
    return copyPermissions;
}
#method_after
public EntityModel<Boolean> getCopyPermissions() {
    return copyPermissions;
}
#end_block

#method_before
private void setCopyPermissions(NotChangableForVmInPoolEntityModel copyPermissions) {
    this.copyPermissions = copyPermissions;
}
#method_after
private void setCopyPermissions(NotChangableForVmInPoolEntityModel<Boolean> copyPermissions) {
    this.copyPermissions = copyPermissions;
}
#end_block

#method_before
public EntityModel getMemoryBalloonDeviceEnabled() {
    return memoryBalloonDeviceEnabled;
}
#method_after
public EntityModel<Boolean> getMemoryBalloonDeviceEnabled() {
    return memoryBalloonDeviceEnabled;
}
#end_block

#method_before
public void setMemoryBalloonDeviceEnabled(EntityModel memoryBalloonDeviceEnabled) {
    this.memoryBalloonDeviceEnabled = memoryBalloonDeviceEnabled;
}
#method_after
public void setMemoryBalloonDeviceEnabled(EntityModel<Boolean> memoryBalloonDeviceEnabled) {
    this.memoryBalloonDeviceEnabled = memoryBalloonDeviceEnabled;
}
#end_block

#method_before
public ListModel getDisplayProtocol() {
    return privateDisplayProtocol;
}
#method_after
public ListModel<EntityModel<DisplayType>> getDisplayProtocol() {
    return privateDisplayProtocol;
}
#end_block

#method_before
private void setDisplayProtocol(NotChangableForVmInPoolListModel value) {
    privateDisplayProtocol = value;
}
#method_after
private void setDisplayProtocol(NotChangableForVmInPoolListModel<EntityModel<DisplayType>> value) {
    privateDisplayProtocol = value;
}
#end_block

#method_before
public EntityModel getProvisioning() {
    return privateProvisioning;
}
#method_after
public EntityModel<Boolean> getProvisioning() {
    return privateProvisioning;
}
#end_block

#method_before
private void setProvisioning(NotChangableForVmInPoolEntityModel value) {
    privateProvisioning = value;
}
#method_after
private void setProvisioning(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateProvisioning = value;
}
#end_block

#method_before
public EntityModel getProvisioningThin_IsSelected() {
    return privateProvisioningThin_IsSelected;
}
#method_after
public EntityModel<Boolean> getProvisioningThin_IsSelected() {
    return privateProvisioningThin_IsSelected;
}
#end_block

#method_before
public void setProvisioningThin_IsSelected(NotChangableForVmInPoolEntityModel value) {
    privateProvisioningThin_IsSelected = value;
}
#method_after
public void setProvisioningThin_IsSelected(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateProvisioningThin_IsSelected = value;
}
#end_block

#method_before
public EntityModel getProvisioningClone_IsSelected() {
    return privateProvisioningClone_IsSelected;
}
#method_after
public EntityModel<Boolean> getProvisioningClone_IsSelected() {
    return privateProvisioningClone_IsSelected;
}
#end_block

#method_before
public void setProvisioningClone_IsSelected(NotChangableForVmInPoolEntityModel value) {
    privateProvisioningClone_IsSelected = value;
}
#method_after
public void setProvisioningClone_IsSelected(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateProvisioningClone_IsSelected = value;
}
#end_block

#method_before
public ListModel getPriority() {
    return privatePriority;
}
#method_after
public ListModel<EntityModel<Integer>> getPriority() {
    return privatePriority;
}
#end_block

#method_before
private void setPriority(NotChangableForVmInPoolListModel value) {
    privatePriority = value;
}
#method_after
private void setPriority(NotChangableForVmInPoolListModel<EntityModel<Integer>> value) {
    privatePriority = value;
}
#end_block

#method_before
public EntityModel getIsHighlyAvailable() {
    return privateIsHighlyAvailable;
}
#method_after
public EntityModel<Boolean> getIsHighlyAvailable() {
    return privateIsHighlyAvailable;
}
#end_block

#method_before
private void setIsHighlyAvailable(NotChangableForVmInPoolEntityModel value) {
    privateIsHighlyAvailable = value;
}
#method_after
private void setIsHighlyAvailable(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsHighlyAvailable = value;
}
#end_block

#method_before
public ListModel getFirstBootDevice() {
    return privateFirstBootDevice;
}
#method_after
public ListModel<EntityModel<BootSequence>> getFirstBootDevice() {
    return privateFirstBootDevice;
}
#end_block

#method_before
private void setFirstBootDevice(NotChangableForVmInPoolListModel value) {
    privateFirstBootDevice = value;
}
#method_after
private void setFirstBootDevice(NotChangableForVmInPoolListModel<EntityModel<BootSequence>> value) {
    privateFirstBootDevice = value;
}
#end_block

#method_before
public ListModel getSecondBootDevice() {
    return privateSecondBootDevice;
}
#method_after
public ListModel<EntityModel<BootSequence>> getSecondBootDevice() {
    return privateSecondBootDevice;
}
#end_block

#method_before
private void setSecondBootDevice(NotChangableForVmInPoolListModel value) {
    privateSecondBootDevice = value;
}
#method_after
private void setSecondBootDevice(NotChangableForVmInPoolListModel<EntityModel<BootSequence>> value) {
    privateSecondBootDevice = value;
}
#end_block

#method_before
public ListModel getCdImage() {
    return privateCdImage;
}
#method_after
public ListModel<String> getCdImage() {
    return privateCdImage;
}
#end_block

#method_before
private void setCdImage(NotChangableForVmInPoolListModel value) {
    privateCdImage = value;
}
#method_after
private void setCdImage(NotChangableForVmInPoolListModel<String> value) {
    privateCdImage = value;
}
#end_block

#method_before
public EntityModel getCdAttached() {
    return cdAttached;
}
#method_after
public EntityModel<Boolean> getCdAttached() {
    return cdAttached;
}
#end_block

#method_before
public void setCdAttached(NotChangableForVmInPoolEntityModel value) {
    cdAttached = value;
}
#method_after
public void setCdAttached(NotChangableForVmInPoolEntityModel<Boolean> value) {
    cdAttached = value;
}
#end_block

#method_before
public EntityModel getInitrd_path() {
    return privateInitrd_path;
}
#method_after
public EntityModel<String> getInitrd_path() {
    return privateInitrd_path;
}
#end_block

#method_before
private void setInitrd_path(NotChangableForVmInPoolEntityModel value) {
    privateInitrd_path = value;
}
#method_after
private void setInitrd_path(NotChangableForVmInPoolEntityModel<String> value) {
    privateInitrd_path = value;
}
#end_block

#method_before
public EntityModel getKernel_path() {
    return privateKernel_path;
}
#method_after
public EntityModel<String> getKernel_path() {
    return privateKernel_path;
}
#end_block

#method_before
private void setKernel_path(NotChangableForVmInPoolEntityModel value) {
    privateKernel_path = value;
}
#method_after
private void setKernel_path(NotChangableForVmInPoolEntityModel<String> value) {
    privateKernel_path = value;
}
#end_block

#method_before
public EntityModel getKernel_parameters() {
    return privateKernel_parameters;
}
#method_after
public EntityModel<String> getKernel_parameters() {
    return privateKernel_parameters;
}
#end_block

#method_before
private void setKernel_parameters(NotChangableForVmInPoolEntityModel value) {
    privateKernel_parameters = value;
}
#method_after
private void setKernel_parameters(NotChangableForVmInPoolEntityModel<String> value) {
    privateKernel_parameters = value;
}
#end_block

#method_before
public EntityModel getCustomProperties() {
    return privateCustomProperties;
}
#method_after
public EntityModel<String> getCustomProperties() {
    return privateCustomProperties;
}
#end_block

#method_before
private void setCustomProperties(NotChangableForVmInPoolEntityModel value) {
    privateCustomProperties = value;
}
#method_after
private void setCustomProperties(NotChangableForVmInPoolEntityModel<String> value) {
    privateCustomProperties = value;
}
#end_block

#method_before
public EntityModel getIsAutoAssign() {
    return privateIsAutoAssign;
}
#method_after
public EntityModel<Boolean> getIsAutoAssign() {
    return privateIsAutoAssign;
}
#end_block

#method_before
public void setIsAutoAssign(NotChangableForVmInPoolEntityModel value) {
    privateIsAutoAssign = value;
}
#method_after
public void setIsAutoAssign(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsAutoAssign = value;
}
#end_block

#method_before
public EntityModel getHostCpu() {
    return hostCpu;
}
#method_after
public EntityModel<Boolean> getHostCpu() {
    return hostCpu;
}
#end_block

#method_before
public void setHostCpu(NotChangableForVmInPoolEntityModel hostCpu) {
    this.hostCpu = hostCpu;
}
#method_after
public void setHostCpu(NotChangableForVmInPoolEntityModel<Boolean> hostCpu) {
    this.hostCpu = hostCpu;
}
#end_block

#method_before
public ListModel getMigrationMode() {
    return migrationMode;
}
#method_after
public ListModel<MigrationSupport> getMigrationMode() {
    return migrationMode;
}
#end_block

#method_before
public void setMigrationMode(NotChangableForVmInPoolListModel value) {
    migrationMode = value;
}
#method_after
public void setMigrationMode(NotChangableForVmInPoolListModel<MigrationSupport> value) {
    migrationMode = value;
}
#end_block

#method_before
public EntityModel getIsTemplatePublic() {
    return privateIsTemplatePublic;
}
#method_after
public EntityModel<Boolean> getIsTemplatePublic() {
    return privateIsTemplatePublic;
}
#end_block

#method_before
private void setIsTemplatePublic(NotChangableForVmInPoolEntityModel value) {
    privateIsTemplatePublic = value;
}
#method_after
private void setIsTemplatePublic(NotChangableForVmInPoolEntityModel<Boolean> value) {
    privateIsTemplatePublic = value;
}
#end_block

#method_before
public EntityModel getCpuPinning() {
    return cpuPinning;
}
#method_after
public EntityModel<String> getCpuPinning() {
    return cpuPinning;
}
#end_block

#method_before
public void setCpuPinning(NotChangableForVmInPoolEntityModel cpuPinning) {
    this.cpuPinning = cpuPinning;
}
#method_after
public void setCpuPinning(NotChangableForVmInPoolEntityModel<String> cpuPinning) {
    this.cpuPinning = cpuPinning;
}
#end_block

#method_before
public EntityModel getCpuSharesAmount() {
    return cpuSharesAmount;
}
#method_after
public EntityModel<Integer> getCpuSharesAmount() {
    return cpuSharesAmount;
}
#end_block

#method_before
public void setCpuSharesAmount(NotChangableForVmInPoolEntityModel cpuSharesAmount) {
    this.cpuSharesAmount = cpuSharesAmount;
}
#method_after
public void setCpuSharesAmount(NotChangableForVmInPoolEntityModel<Integer> cpuSharesAmount) {
    this.cpuSharesAmount = cpuSharesAmount;
}
#end_block

#method_before
public ListModel getCpuSharesAmountSelection() {
    return cpuSharesAmountSelection;
}
#method_after
public ListModel<CpuSharesAmount> getCpuSharesAmountSelection() {
    return cpuSharesAmountSelection;
}
#end_block

#method_before
public void setCpuSharesAmountSelection(NotChangableForVmInPoolListModel cpuSharesAmountSelection) {
    this.cpuSharesAmountSelection = cpuSharesAmountSelection;
}
#method_after
public void setCpuSharesAmountSelection(NotChangableForVmInPoolListModel<CpuSharesAmount> cpuSharesAmountSelection) {
    this.cpuSharesAmountSelection = cpuSharesAmountSelection;
}
#end_block

#method_before
public ListModel getVncKeyboardLayout() {
    return vncKeyboardLayout;
}
#method_after
public ListModel<String> getVncKeyboardLayout() {
    return vncKeyboardLayout;
}
#end_block

#method_before
public void setVncKeyboardLayout(ListModel vncKeyboardLayout) {
    this.vncKeyboardLayout = vncKeyboardLayout;
}
#method_after
public void setVncKeyboardLayout(ListModel<String> vncKeyboardLayout) {
    this.vncKeyboardLayout = vncKeyboardLayout;
}
#end_block

#method_before
public void initialize(SystemTreeItemModel SystemTreeSelectedItem) {
    super.initialize();
    setHash(getHashName() + new Date());
    getMemSize().setEntity(256);
    getMinAllocatedMemory().setEntity(256);
    getIsStateless().setEntity(false);
    getIsRunAndPause().setEntity(false);
    getIsSmartcardEnabled().setEntity(false);
    isConsoleDeviceEnabled.setEntity(false);
    getIsHighlyAvailable().setEntity(false);
    getIsAutoAssign().setEntity(true);
    getIsTemplatePublic().setEntity(true);
    getIsSingleQxlEnabled().setEntity(false);
    getHostCpu().setEntity(false);
    getMigrationMode().setIsChangable(true);
    getCdImage().setIsChangable(false);
    initOSType();
    initDisplayProtocol();
    initFirstBootDevice();
    initNumOfMonitors();
    initAllowConsoleReconnect();
    initMinimalVmMemSize();
    initMaximalVmMemSize32OS();
    initMigrationMode();
    initVncKeyboardLayout();
    behavior.initialize(SystemTreeSelectedItem);
}
#method_after
public void initialize(SystemTreeItemModel SystemTreeSelectedItem) {
    super.initialize();
    setHash(getHashName() + new Date());
    getMemSize().setEntity(256);
    getMinAllocatedMemory().setEntity(256);
    getIsStateless().setEntity(false);
    getIsRunAndPause().setEntity(false);
    getIsSmartcardEnabled().setEntity(false);
    isConsoleDeviceEnabled.setEntity(false);
    getIsHighlyAvailable().setEntity(false);
    getIsAutoAssign().setEntity(true);
    getIsTemplatePublic().setEntity(true);
    getBehavior().enableSinglePCI(false);
    getHostCpu().setEntity(false);
    getMigrationMode().setIsChangable(true);
    getCdImage().setIsChangable(false);
    initOSType();
    initDisplayProtocol();
    initFirstBootDevice();
    initNumOfMonitors();
    initAllowConsoleReconnect();
    initMinimalVmMemSize();
    initMaximalVmMemSize32OS();
    initMigrationMode();
    initVncKeyboardLayout();
    behavior.initialize(SystemTreeSelectedItem);
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(Frontend.QueryStartedEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.QueryCompleteEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVmType()) {
            vmTypeChanged();
        } else if (sender == getDataCenterWithClustersList()) {
            dataCenterWithClusterSelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getTemplate()) {
            template_SelectedItemChanged(sender, args);
        } else if (sender == getTimeZone()) {
            timeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            defaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            oSType_SelectedItemChanged(sender, args);
            updateDisplayProtocol();
            initUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            firstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            displayProtocol_SelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            numOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            coresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getCpuSharesAmountSelection()) {
            behavior.updateCpuSharesAmountChangeability();
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        if (sender == getMemSize()) {
            memSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            totalCPUCores_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getProvisioning()) {
            provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if ((Boolean) getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if ((Boolean) getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        } else if (sender == getWatchdogModel()) {
            WatchdogModel_EntityChanged(sender, args);
        } else if (sender == getIsHighlyAvailable()) {
            behavior.updateMigrationAvailability();
        }
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(Frontend.getInstance().getQueryStartedEventDefinition()) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryCompleteEventDefinition()) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVmType()) {
            vmTypeChanged();
        } else if (sender == getDataCenterWithClustersList()) {
            dataCenterWithClusterSelectedItemChanged(sender, args);
            updateDisplayProtocol();
            initUsbPolicy();
        } else if (sender == getTemplate()) {
            template_SelectedItemChanged(sender, args);
        } else if (sender == getTimeZone()) {
            timeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            defaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            oSType_SelectedItemChanged(sender, args);
            updateDisplayProtocol();
            initUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            firstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            displayProtocol_SelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            numOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            coresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getCpuSharesAmountSelection()) {
            behavior.updateCpuSharesAmountChangeability();
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        if (sender == getMemSize()) {
            memSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            totalCPUCores_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getProvisioning()) {
            provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if (getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if (getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        } else if (sender == getWatchdogModel()) {
            WatchdogModel_EntityChanged(sender, args);
        } else if (sender == getIsHighlyAvailable()) {
            behavior.updateMigrationAvailability();
        }
    }
}
#end_block

#method_before
private void vmTypeChanged() {
    behavior.vmTypeChanged(((VmType) getVmType().getSelectedItem()));
}
#method_after
private void vmTypeChanged() {
    behavior.vmTypeChanged(getVmType().getSelectedItem());
}
#end_block

#method_before
protected void initNumOfMonitors() {
    AsyncDataProvider.getNumOfMonitorList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            Integer oldNumOfMonitors = null;
            if (model.getNumOfMonitors().getSelectedItem() != null) {
                oldNumOfMonitors = (Integer) model.getNumOfMonitors().getSelectedItem();
            }
            ArrayList<Integer> numOfMonitors = (ArrayList<Integer>) returnValue;
            model.getNumOfMonitors().setItems(numOfMonitors);
            if (oldNumOfMonitors != null) {
                model.getNumOfMonitors().setSelectedItem(oldNumOfMonitors);
            }
        }
    }, getHash()));
}
#method_after
protected void initNumOfMonitors() {
    AsyncDataProvider.getNumOfMonitorList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            Integer oldNumOfMonitors = null;
            if (model.getNumOfMonitors().getSelectedItem() != null) {
                oldNumOfMonitors = model.getNumOfMonitors().getSelectedItem();
            }
            ArrayList<Integer> numOfMonitors = (ArrayList<Integer>) returnValue;
            model.getNumOfMonitors().setItems(numOfMonitors);
            if (oldNumOfMonitors != null) {
                model.getNumOfMonitors().setSelectedItem(oldNumOfMonitors);
            }
        }
    }, getHash()));
}
#end_block

#method_before
protected void initAllowConsoleReconnect() {
    getAllowConsoleReconnect().setEntity(true);
}
#method_after
protected void initAllowConsoleReconnect() {
    getAllowConsoleReconnect().setEntity(getVmType().getSelectedItem() == VmType.Server);
}
#end_block

#method_before
private void initUsbPolicy() {
    VDSGroup cluster = getSelectedCluster();
    Integer osType = (Integer) getOSType().getSelectedItem();
    DisplayType displayType = (DisplayType) (getDisplayProtocol().getSelectedItem() != null ? ((EntityModel) getDisplayProtocol().getSelectedItem()).getEntity() : null);
    if (osType == null || cluster == null || displayType == null) {
        return;
    }
    getUsbPolicy().setIsChangable(true);
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) > 0) {
        if (AsyncDataProvider.isWindowsOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED));
            getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
            getUsbPolicy().setIsChangable(false);
        }
    }
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) <= 0) {
        if (AsyncDataProvider.isLinuxOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY, UsbPolicy.ENABLED_NATIVE));
        }
    }
    if (displayType != DisplayType.qxl) {
        getUsbPolicy().setIsChangable(false);
    }
    getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
}
#method_after
private void initUsbPolicy() {
    VDSGroup cluster = getSelectedCluster();
    Integer osType = getOSType().getSelectedItem();
    DisplayType displayType = (getDisplayProtocol().getSelectedItem() != null ? getDisplayProtocol().getSelectedItem().getEntity() : null);
    if (osType == null || cluster == null || displayType == null) {
        return;
    }
    getUsbPolicy().setIsChangable(true);
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) > 0) {
        if (AsyncDataProvider.isWindowsOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED));
            getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
            getUsbPolicy().setIsChangable(false);
        }
    }
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) <= 0) {
        if (AsyncDataProvider.isLinuxOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY, UsbPolicy.ENABLED_NATIVE));
        }
    }
    if (displayType != DisplayType.qxl) {
        getUsbPolicy().setIsChangable(false);
    }
    getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
}
#end_block

#method_before
private void updateMaximalVmMemSize() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return;
    }
    VDSGroup cluster = dataCenterWithCluster.getCluster();
    if (cluster != null) {
        AsyncDataProvider.getMaximalVmMemSize64OS(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                UnitVmModel vmModel = (UnitVmModel) target;
                vmModel.set_MaxMemSize64((Integer) returnValue);
            }
        }, getHash()), cluster.getcompatibility_version().toString());
    }
}
#method_after
private void updateMaximalVmMemSize() {
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return;
    }
    VDSGroup cluster = dataCenterWithCluster.getCluster();
    if (cluster != null) {
        AsyncDataProvider.getMaximalVmMemSize64OS(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                UnitVmModel vmModel = (UnitVmModel) target;
                vmModel.set_MaxMemSize64((Integer) returnValue);
            }
        }, getHash()), cluster.getcompatibility_version().toString());
    }
}
#end_block

#method_before
private void initDisplayProtocol() {
    ArrayList<EntityModel> displayProtocolOptions = new ArrayList<EntityModel>();
    getDisplayProtocol().setItems(displayProtocolOptions);
    getDisplayProtocol().getSelectedItemChangedEvent().addListener(this);
}
#method_after
private void initDisplayProtocol() {
    getDisplayProtocol().getSelectedItemChangedEvent().addListener(this);
}
#end_block

#method_before
private void updateDisplayProtocol() {
    VDSGroup cluster = getSelectedCluster();
    Integer osType = (Integer) getOSType().getSelectedItem();
    if (cluster == null || osType == null) {
        return;
    }
    ArrayList<EntityModel> displayProtocolOptions = new ArrayList<EntityModel>();
    EntityModel vncProtocol = new EntityModel();
    vncProtocol.setTitle(ConstantsManager.getInstance().getConstants().VNCTitle());
    vncProtocol.setEntity(DisplayType.vnc);
    displayProtocolOptions.add(vncProtocol);
    if (AsyncDataProvider.hasSpiceSupportCached(osType, cluster.getcompatibility_version())) {
        EntityModel spiceProtocol = new EntityModel();
        spiceProtocol.setTitle(ConstantsManager.getInstance().getConstants().spiceTitle());
        spiceProtocol.setEntity(DisplayType.qxl);
        displayProtocolOptions.add(spiceProtocol);
    }
    getDisplayProtocol().setItems(displayProtocolOptions);
}
#method_after
private void updateDisplayProtocol() {
    DisplayType oldDisplayProtocolOption = null;
    if (getDisplayProtocol().getSelectedItem() != null) {
        oldDisplayProtocolOption = getDisplayProtocol().getSelectedItem().getEntity();
    }
    VDSGroup cluster = getSelectedCluster();
    Integer osType = getOSType().getSelectedItem();
    if (cluster == null || osType == null) {
        return;
    }
    List<EntityModel<DisplayType>> displayProtocolOptions = new ArrayList<EntityModel<DisplayType>>();
    List<DisplayType> displayTypes = AsyncDataProvider.getDisplayTypes(osType, cluster.getcompatibility_version());
    if (displayTypes.contains(DisplayType.vnc)) {
        EntityModel<DisplayType> vncProtocol = new EntityModel<DisplayType>();
        vncProtocol.setTitle(ConstantsManager.getInstance().getConstants().VNCTitle());
        vncProtocol.setEntity(DisplayType.vnc);
        displayProtocolOptions.add(vncProtocol);
    }
    if (displayTypes.contains(DisplayType.qxl)) {
        EntityModel<DisplayType> spiceProtocol = new EntityModel<DisplayType>();
        spiceProtocol.setTitle(ConstantsManager.getInstance().getConstants().spiceTitle());
        spiceProtocol.setEntity(DisplayType.qxl);
        displayProtocolOptions.add(spiceProtocol);
    }
    getDisplayProtocol().setItems(displayProtocolOptions);
    behavior.postDisplayTypeItemChanged(oldDisplayProtocolOption);
}
#end_block

#method_before
private void initFirstBootDevice() {
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().hardDiskTitle());
    tempVar.setEntity(BootSequence.C);
    EntityModel hardDiskOption = tempVar;
    ArrayList<EntityModel> firstBootDeviceItems = new ArrayList<EntityModel>();
    firstBootDeviceItems.add(hardDiskOption);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cdromTitle());
    tempVar2.setEntity(BootSequence.D);
    firstBootDeviceItems.add(tempVar2);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().networkPXETitle());
    tempVar3.setEntity(BootSequence.N);
    firstBootDeviceItems.add(tempVar3);
    getFirstBootDevice().setItems(firstBootDeviceItems);
    getFirstBootDevice().setSelectedItem(hardDiskOption);
}
#method_after
private void initFirstBootDevice() {
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().hardDiskTitle());
    tempVar.setEntity(BootSequence.C);
    EntityModel hardDiskOption = tempVar;
    List<EntityModel<BootSequence>> firstBootDeviceItems = new ArrayList<EntityModel<BootSequence>>();
    firstBootDeviceItems.add(hardDiskOption);
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cdromTitle());
    tempVar2.setEntity(BootSequence.D);
    firstBootDeviceItems.add(tempVar2);
    EntityModel tempVar3 = new EntityModel();
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().networkPXETitle());
    tempVar3.setEntity(BootSequence.N);
    firstBootDeviceItems.add(tempVar3);
    getFirstBootDevice().setItems(firstBootDeviceItems);
    getFirstBootDevice().setSelectedItem(hardDiskOption);
}
#end_block

#method_before
private void dataCenterWithClusterSelectedItemChanged(Object sender, EventArgs args) {
    behavior.dataCenterWithClusterSelectedItemChanged();
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster != null && dataCenterWithCluster.getDataCenter() != null) {
        getDisksAllocationModel().setQuotaEnforcementType(dataCenterWithCluster.getDataCenter().getQuotaEnforcementType());
    }
    updateMaximalVmMemSize();
}
#method_after
private void dataCenterWithClusterSelectedItemChanged(Object sender, EventArgs args) {
    behavior.dataCenterWithClusterSelectedItemChanged();
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster != null && dataCenterWithCluster.getDataCenter() != null) {
        getDisksAllocationModel().setQuotaEnforcementType(dataCenterWithCluster.getDataCenter().getQuotaEnforcementType());
    }
    updateMaximalVmMemSize();
    handleQxlClusterLevel();
}
#end_block

#method_before
private void template_SelectedItemChanged(Object sender, EventArgs args) {
    behavior.template_SelectedItemChanged();
}
#method_after
private void template_SelectedItemChanged(Object sender, EventArgs args) {
    behavior.template_SelectedItemChanged();
    behavior.updateMigrationForLocalSD();
}
#end_block

#method_before
private void oSType_SelectedItemChanged(Object sender, EventArgs args) {
    Integer osType = (Integer) getOSType().getSelectedItem();
    setIsWindowsOS(AsyncDataProvider.isWindowsOsType(osType));
    setIsLinuxOS(AsyncDataProvider.isLinuxOsType(osType));
    getInitrd_path().setIsChangable(getIsLinuxOS());
    getInitrd_path().setIsAvailable(getIsLinuxOS());
    getKernel_path().setIsChangable(getIsLinuxOS());
    getKernel_path().setIsAvailable(getIsLinuxOS());
    getKernel_parameters().setIsChangable(getIsLinuxOS());
    getKernel_parameters().setIsAvailable(getIsLinuxOS());
    getDomain().setIsChangable(getIsWindowsOS());
    getBehavior().updateDefaultTimeZone();
}
#method_after
private void oSType_SelectedItemChanged(Object sender, EventArgs args) {
    Integer osType = getOSType().getSelectedItem();
    setIsWindowsOS(AsyncDataProvider.isWindowsOsType(osType));
    setIsLinuxOS(AsyncDataProvider.isLinuxOsType(osType));
    getInitrd_path().setIsChangable(getIsLinuxOS());
    getInitrd_path().setIsAvailable(getIsLinuxOS());
    getKernel_path().setIsChangable(getIsLinuxOS());
    getKernel_path().setIsAvailable(getIsLinuxOS());
    getKernel_parameters().setIsChangable(getIsLinuxOS());
    getKernel_parameters().setIsAvailable(getIsLinuxOS());
    getDomain().setIsChangable(getIsWindowsOS());
    getBehavior().updateDefaultTimeZone();
    handleQxlClusterLevel();
}
#end_block

#method_before
private void firstBootDevice_SelectedItemChanged(Object sender, EventArgs args) {
    EntityModel entityModel = (EntityModel) getFirstBootDevice().getSelectedItem();
    BootSequence firstDevice = (BootSequence) entityModel.getEntity();
    ArrayList<EntityModel> list = new ArrayList<EntityModel>();
    for (Object item : getFirstBootDevice().getItems()) {
        EntityModel a = (EntityModel) item;
        if ((BootSequence) a.getEntity() != firstDevice) {
            list.add(a);
        }
    }
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().noneTitle());
    EntityModel noneOption = tempVar;
    list.add(0, noneOption);
    getSecondBootDevice().setItems(list);
    getSecondBootDevice().setSelectedItem(noneOption);
}
#method_after
private void firstBootDevice_SelectedItemChanged(Object sender, EventArgs args) {
    EntityModel<BootSequence> entityModel = getFirstBootDevice().getSelectedItem();
    BootSequence firstDevice = entityModel.getEntity();
    List<EntityModel<BootSequence>> list = new ArrayList<EntityModel<BootSequence>>();
    for (EntityModel<BootSequence> item : getFirstBootDevice().getItems()) {
        if (item.getEntity() != firstDevice) {
            list.add(item);
        }
    }
    EntityModel<BootSequence> tempVar = new EntityModel<BootSequence>();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().noneTitle());
    EntityModel<BootSequence> noneOption = tempVar;
    list.add(0, noneOption);
    getSecondBootDevice().setItems(list);
    getSecondBootDevice().setSelectedItem(noneOption);
}
#end_block

#method_before
private void displayProtocol_SelectedItemChanged(Object sender, EventArgs args) {
    EntityModel entityModel = (EntityModel) getDisplayProtocol().getSelectedItem();
    if (entityModel == null) {
        return;
    }
    DisplayType type = (DisplayType) entityModel.getEntity();
    if (type == DisplayType.vnc) {
        getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED);
        getIsSmartcardEnabled().setEntity(false);
    }
    getBehavior().updateSingleQxl(type == DisplayType.qxl);
    getUsbPolicy().setIsChangable(type == DisplayType.qxl);
    getIsSmartcardEnabled().setIsChangable(type == DisplayType.qxl);
    getVncKeyboardLayout().setIsAvailable(type == DisplayType.vnc);
    updateNumOfMonitors();
}
#method_after
private void displayProtocol_SelectedItemChanged(Object sender, EventArgs args) {
    if (getDisplayType() == null) {
        return;
    }
    DisplayType type = getDisplayType();
    if (type == DisplayType.vnc) {
        getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED);
        getIsSmartcardEnabled().setEntity(false);
    }
    handleQxlClusterLevel();
    getUsbPolicy().setIsChangable(type == DisplayType.qxl);
    getIsSmartcardEnabled().setIsChangable(type == DisplayType.qxl);
    getVncKeyboardLayout().setIsAvailable(type == DisplayType.vnc);
    updateNumOfMonitors();
}
#end_block

#method_before
private boolean isVncSelected() {
    boolean isVnc = false;
    if (getDisplayProtocol().getSelectedItem() != null) {
        DisplayType displayType = (DisplayType) ((EntityModel) getDisplayProtocol().getSelectedItem()).getEntity();
        isVnc = displayType == DisplayType.vnc;
    }
    return isVnc;
}
#method_after
private boolean isVncSelected() {
    boolean isVnc = false;
    if (getDisplayProtocol().getSelectedItem() != null) {
        DisplayType displayType = getDisplayProtocol().getSelectedItem().getEntity();
        isVnc = displayType == DisplayType.vnc;
    }
    return isVnc;
}
#end_block

#method_before
public BootSequence getBootSequence() {
    EntityModel firstSelectedItem = (EntityModel) getFirstBootDevice().getSelectedItem();
    EntityModel secondSelectedItem = (EntityModel) getSecondBootDevice().getSelectedItem();
    String firstSelectedString = // $NON-NLS-1$
    firstSelectedItem.getEntity() == null ? "" : firstSelectedItem.getEntity().toString();
    String secondSelectedString = // $NON-NLS-1$
    secondSelectedItem.getEntity() == null ? "" : secondSelectedItem.getEntity().toString();
    return BootSequence.valueOf(firstSelectedString + secondSelectedString);
}
#method_after
public BootSequence getBootSequence() {
    EntityModel<BootSequence> firstSelectedItem = getFirstBootDevice().getSelectedItem();
    EntityModel<BootSequence> secondSelectedItem = getSecondBootDevice().getSelectedItem();
    String firstSelectedString = // $NON-NLS-1$
    firstSelectedItem.getEntity() == null ? "" : firstSelectedItem.getEntity().toString();
    String secondSelectedString = // $NON-NLS-1$
    secondSelectedItem.getEntity() == null ? "" : secondSelectedItem.getEntity().toString();
    return BootSequence.valueOf(firstSelectedString + secondSelectedString);
}
#end_block

#method_before
public void setBootSequence(BootSequence value) {
    ArrayList<BootSequence> items = new ArrayList<BootSequence>();
    for (char a : value.toString().toCharArray()) {
        items.add(BootSequence.valueOf(String.valueOf(a)));
    }
    Object firstBootDevice = null;
    for (Object item : getFirstBootDevice().getItems()) {
        EntityModel a = (EntityModel) item;
        if ((BootSequence) a.getEntity() == Linq.firstOrDefault(items)) {
            firstBootDevice = a;
        }
    }
    getFirstBootDevice().setSelectedItem(firstBootDevice);
    ArrayList<EntityModel> secondDeviceOptions = Linq.<EntityModel>cast(getSecondBootDevice().getItems());
    if (items.size() > 1) {
        BootSequence last = items.get(items.size() - 1);
        for (EntityModel a : secondDeviceOptions) {
            if (a.getEntity() != null && (BootSequence) a.getEntity() == last) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    } else {
        for (EntityModel a : secondDeviceOptions) {
            if (a.getEntity() == null) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    }
}
#method_after
public void setBootSequence(BootSequence value) {
    ArrayList<BootSequence> items = new ArrayList<BootSequence>();
    for (char a : value.toString().toCharArray()) {
        items.add(BootSequence.valueOf(String.valueOf(a)));
    }
    EntityModel<BootSequence> firstBootDevice = null;
    for (EntityModel<BootSequence> item : getFirstBootDevice().getItems()) {
        if (item.getEntity() == Linq.firstOrDefault(items)) {
            firstBootDevice = item;
        }
    }
    getFirstBootDevice().setSelectedItem(firstBootDevice);
    Iterable<EntityModel<BootSequence>> secondDeviceOptions = getSecondBootDevice().getItems();
    if (items.size() > 1) {
        BootSequence last = items.get(items.size() - 1);
        for (EntityModel<BootSequence> a : secondDeviceOptions) {
            if (a.getEntity() != null && a.getEntity() == last) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    } else {
        for (EntityModel<BootSequence> a : secondDeviceOptions) {
            if (a.getEntity() == null) {
                getSecondBootDevice().setSelectedItem(a);
                break;
            }
        }
    }
}
#end_block

#method_before
protected void setupDataCenterWithClustersFromSystemTree(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    StoragePool dataCenter = getDataCenterAccordingSystemTree(model, dataCenters);
    List<VDSGroup> possibleClusters = getClusterAccordingSystemTree(model, clusters);
    if (dataCenter == null || possibleClusters == null) {
        getDataCenterWithClustersList().setIsChangable(false);
        return;
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (VDSGroup cluster : possibleClusters) {
        if (cluster.getStoragePoolId().equals(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#method_after
protected void setupDataCenterWithClustersFromSystemTree(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    StoragePool dataCenter = getDataCenterAccordingSystemTree(model, dataCenters);
    // the dataCenters are the entities just downloaded from server while the dataCenter can be a cached one from the system tree
    dataCenter = dataCenter == null ? null : findDataCenterById(dataCenters, dataCenter.getId());
    List<VDSGroup> possibleClusters = getClusterAccordingSystemTree(model, clusters);
    if (dataCenter == null || possibleClusters == null) {
        getDataCenterWithClustersList().setIsChangable(false);
        return;
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (VDSGroup cluster : possibleClusters) {
        if (cluster.getStoragePoolId() != null && cluster.getStoragePoolId().equals(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#end_block

#method_before
protected void setupDataCenterWithClusters(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    Map<Guid, List<VDSGroup>> dataCenterToCluster = new HashMap<Guid, List<VDSGroup>>();
    for (VDSGroup cluster : clusters) {
        if (!dataCenterToCluster.containsKey(cluster.getStoragePoolId())) {
            dataCenterToCluster.put(cluster.getStoragePoolId(), new ArrayList<VDSGroup>());
        }
        dataCenterToCluster.get(cluster.getStoragePoolId()).add(cluster);
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (StoragePool dataCenter : dataCenters) {
        for (VDSGroup cluster : dataCenterToCluster.get(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#method_after
protected void setupDataCenterWithClusters(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    Map<Guid, List<VDSGroup>> dataCenterToCluster = new HashMap<Guid, List<VDSGroup>>();
    for (VDSGroup cluster : clusters) {
        if (cluster.getStoragePoolId() == null) {
            continue;
        }
        if (!dataCenterToCluster.containsKey(cluster.getStoragePoolId())) {
            dataCenterToCluster.put(cluster.getStoragePoolId(), new ArrayList<VDSGroup>());
        }
        dataCenterToCluster.get(cluster.getStoragePoolId()).add(cluster);
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (StoragePool dataCenter : dataCenters) {
        for (VDSGroup cluster : dataCenterToCluster.get(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#end_block

#method_before
protected void selectDataCenterWithCluster(UnitVmModel model, Guid selectedCluster, List<DataCenterWithCluster> dataCentersWithClusters) {
    if (selectedCluster == null) {
        getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters));
    } else {
        model.getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters, new Linq.DataCenterWithClusterAccordingClusterPredicate((Guid) selectedCluster)));
    }
}
#method_after
protected void selectDataCenterWithCluster(UnitVmModel model, Guid selectedCluster, List<DataCenterWithCluster> dataCentersWithClusters) {
    if (selectedCluster == null) {
        getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters));
    } else {
        model.getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(dataCentersWithClusters, new Linq.DataCenterWithClusterAccordingClusterPredicate(selectedCluster)));
    }
}
#end_block

#method_before
private StoragePool findDataCenterById(List<StoragePool> list, Guid id) {
    for (StoragePool dc : list) {
        if (dc.getId().equals(id)) {
            return dc;
        }
    }
    return null;
}
#method_after
private StoragePool findDataCenterById(List<StoragePool> list, Guid id) {
    if (id == null) {
        return null;
    }
    for (StoragePool dc : list) {
        if (dc.getId().equals(id)) {
            return dc;
        }
    }
    return null;
}
#end_block

#method_before
public boolean validate() {
    getDataCenterWithClustersList().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getMemSize().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getMinAllocatedMemory().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getOSType().validateSelectedItem(new NotEmptyValidation[] { new NotEmptyValidation() });
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter != null && dataCenter.getQuotaEnforcementType() == QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) {
        getQuota().validateSelectedItem(new IValidation[] { new NotEmptyQuotaValidation() });
    }
    getTotalCPUCores().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, behavior.maxCpus), new TotalCpuCoresComposableValidation() });
    if (getOSType().getIsValid()) {
        Integer osType = (Integer) getOSType().getSelectedItem();
        getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation((getBehavior() instanceof TemplateVmModelBehavior || getBehavior() instanceof NewTemplateVmModelBehavior) ? VM_TEMPLATE_NAME_MAX_LIMIT : AsyncDataProvider.isWindowsOsType(osType) ? WINDOWS_VM_NAME_MAX_LIMIT : NON_WINDOWS_VM_NAME_MAX_LIMIT), isPoolTabValid ? new PoolNameValidation() : new I18NNameValidation() });
        getDescription().validateEntity(new IValidation[] { new LengthValidation(DESCRIPTION_MAX_LIMIT), new SpecialAsciiI18NOrNoneValidation() });
        AsyncQuery asyncQuery = new AsyncQuery();
        asyncQuery.setModel(this);
        asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                validateMemorySize(getMemSize(), (Integer) ((VdcQueryReturnValue) returnValue).getReturnValue(), _minMemSize);
                if (!(((UnitVmModel) model).getBehavior() instanceof TemplateVmModelBehavior)) {
                    // Minimum 'Physical Memory Guaranteed' is 1MB
                    validateMemorySize(getMinAllocatedMemory(), (Integer) getMemSize().getEntity(), 1);
                }
            }
        };
        if (getSelectedCluster() != null) {
            AsyncDataProvider.getOsMaxRam(osType, ((VDSGroup) getSelectedCluster()).getcompatibility_version(), asyncQuery);
        }
        getComment().validateEntity(new IValidation[] { new SpecialAsciiI18NOrNoneValidation() });
    }
    if (getIsAutoAssign().getEntity() != null && ((Boolean) getIsAutoAssign().getEntity()) == false) {
        getDefaultHost().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getDefaultHost().setIsValid(true);
    }
    getTemplate().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getDisksAllocationModel().validateEntity(new IValidation[] {});
    getCdImage().setIsValid(true);
    if (getCdImage().getIsChangable()) {
        getCdImage().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    if (getIsLinuxOS()) {
        getKernel_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getInitrd_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getKernel_parameters().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        // initrd path and kernel params require kernel path to be filled
        if (StringHelper.isNullOrEmpty((String) getKernel_path().getEntity())) {
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (!StringHelper.isNullOrEmpty((String) getInitrd_path().getEntity())) {
                getInitrd_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getInitrd_path().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getKernel_path().setIsValid(false);
            }
            if (!StringHelper.isNullOrEmpty((String) getKernel_parameters().getEntity())) {
                getKernel_parameters().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_parameters().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_path().setIsValid(false);
            }
        }
    }
    if (getCpuSharesAmount().getIsAvailable()) {
        getCpuSharesAmount().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, 262144) });
    }
    boolean customPropertySheetValid = getCustomPropertySheet().validate();
    setIsBootSequenceTabValid(true);
    setIsAllocationTabValid(getIsBootSequenceTabValid());
    setIsDisplayTabValid(getIsAllocationTabValid());
    setIsFirstRunTabValid(getIsDisplayTabValid());
    setIsGeneralTabValid(getIsFirstRunTabValid());
    setIsGeneralTabValid(getName().getIsValid() && getDescription().getIsValid() && getComment().getIsValid() && getDataCenterWithClustersList().getIsValid() && getTemplate().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid());
    setIsFirstRunTabValid(getDomain().getIsValid() && getTimeZone().getIsValid());
    setIsDisplayTabValid(getUsbPolicy().getIsValid() && getNumOfMonitors().getIsValid());
    setIsHostTabValid(getDefaultHost().getIsValid());
    setIsAllocationTabValid(getDisksAllocationModel().getIsValid() && getMinAllocatedMemory().getIsValid() && getCpuSharesAmount().getIsValid());
    setIsBootSequenceTabValid(getCdImage().getIsValid() && getKernel_path().getIsValid());
    setIsCustomPropertiesTabValid(customPropertySheetValid);
    return getName().getIsValid() && getDescription().getIsValid() && getDataCenterWithClustersList().getIsValid() && getDisksAllocationModel().getIsValid() && getTemplate().getIsValid() && getComment().getIsValid() && getDefaultHost().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid() && getNumOfMonitors().getIsValid() && getDomain().getIsValid() && getUsbPolicy().getIsValid() && getTimeZone().getIsValid() && getOSType().getIsValid() && getCdImage().getIsValid() && getKernel_path().getIsValid() && getInitrd_path().getIsValid() && getKernel_parameters().getIsValid() && getCpuSharesAmount().getIsValid() && behavior.validate() && customPropertySheetValid && getQuota().getIsValid();
}
#method_after
public boolean validate() {
    getDataCenterWithClustersList().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getMemSize().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getMinAllocatedMemory().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getOSType().validateSelectedItem(new NotEmptyValidation[] { new NotEmptyValidation() });
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter != null && dataCenter.getQuotaEnforcementType() == QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) {
        getQuota().validateSelectedItem(new IValidation[] { new NotEmptyQuotaValidation() });
    }
    getTotalCPUCores().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, behavior.maxCpus), new TotalCpuCoresComposableValidation() });
    if (getOSType().getIsValid()) {
        Integer osType = getOSType().getSelectedItem();
        getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation((getBehavior() instanceof TemplateVmModelBehavior || getBehavior() instanceof NewTemplateVmModelBehavior) ? VM_TEMPLATE_NAME_MAX_LIMIT : AsyncDataProvider.isWindowsOsType(osType) ? AsyncDataProvider.getMaxVmNameLengthWin() : AsyncDataProvider.getMaxVmNameLengthNonWin()), isPoolTabValid ? new PoolNameValidation() : new I18NNameValidation() });
        getDescription().validateEntity(new IValidation[] { new LengthValidation(DESCRIPTION_MAX_LIMIT), new SpecialAsciiI18NOrNoneValidation() });
        AsyncQuery asyncQuery = new AsyncQuery();
        asyncQuery.setModel(this);
        asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                validateMemorySize(getMemSize(), (Integer) ((VdcQueryReturnValue) returnValue).getReturnValue(), _minMemSize);
                if (!(((UnitVmModel) model).getBehavior() instanceof TemplateVmModelBehavior)) {
                    // Minimum 'Physical Memory Guaranteed' is 1MB
                    validateMemorySize(getMinAllocatedMemory(), getMemSize().getEntity(), 1);
                }
            }
        };
        if (getSelectedCluster() != null) {
            AsyncDataProvider.getOsMaxRam(osType, getSelectedCluster().getcompatibility_version(), asyncQuery);
        }
        getComment().validateEntity(new IValidation[] { new SpecialAsciiI18NOrNoneValidation() });
    }
    if (getIsAutoAssign().getEntity() != null && getIsAutoAssign().getEntity() == false) {
        getDefaultHost().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getDefaultHost().setIsValid(true);
    }
    getTemplate().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getDisksAllocationModel().validateEntity(new IValidation[] {});
    getCdImage().setIsValid(true);
    if (getCdImage().getIsChangable()) {
        getCdImage().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    if (getIsLinuxOS()) {
        getKernel_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getInitrd_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getKernel_parameters().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        // initrd path and kernel params require kernel path to be filled
        if (StringHelper.isNullOrEmpty(getKernel_path().getEntity())) {
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (!StringHelper.isNullOrEmpty(getInitrd_path().getEntity())) {
                getInitrd_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getInitrd_path().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getKernel_path().setIsValid(false);
            }
            if (!StringHelper.isNullOrEmpty(getKernel_parameters().getEntity())) {
                getKernel_parameters().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_parameters().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_path().setIsValid(false);
            }
        }
    }
    if (getCpuSharesAmount().getIsAvailable()) {
        getCpuSharesAmount().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, 262144) });
    }
    boolean customPropertySheetValid = getCustomPropertySheet().validate();
    setIsBootSequenceTabValid(true);
    setIsAllocationTabValid(getIsBootSequenceTabValid());
    setIsDisplayTabValid(getIsAllocationTabValid());
    setIsFirstRunTabValid(getIsDisplayTabValid());
    setIsGeneralTabValid(getIsFirstRunTabValid());
    setIsGeneralTabValid(getName().getIsValid() && getDescription().getIsValid() && getComment().getIsValid() && getDataCenterWithClustersList().getIsValid() && getTemplate().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid());
    setIsFirstRunTabValid(getDomain().getIsValid() && getTimeZone().getIsValid());
    setIsDisplayTabValid(getUsbPolicy().getIsValid() && getNumOfMonitors().getIsValid());
    setIsHostTabValid(getDefaultHost().getIsValid());
    setIsAllocationTabValid(getDisksAllocationModel().getIsValid() && getMinAllocatedMemory().getIsValid() && getCpuSharesAmount().getIsValid());
    setIsBootSequenceTabValid(getCdImage().getIsValid() && getKernel_path().getIsValid());
    setIsCustomPropertiesTabValid(customPropertySheetValid);
    return getName().getIsValid() && getDescription().getIsValid() && getDataCenterWithClustersList().getIsValid() && getDisksAllocationModel().getIsValid() && getTemplate().getIsValid() && getComment().getIsValid() && getDefaultHost().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid() && getNumOfMonitors().getIsValid() && getDomain().getIsValid() && getUsbPolicy().getIsValid() && getTimeZone().getIsValid() && getOSType().getIsValid() && getCdImage().getIsValid() && getKernel_path().getIsValid() && getInitrd_path().getIsValid() && getKernel_parameters().getIsValid() && getCpuSharesAmount().getIsValid() && behavior.validate() && customPropertySheetValid && getQuota().getIsValid();
}
#end_block

#method_before
@Override
public ValidationResult validate(Object value) {
    boolean isOk = behavior.isNumOfSocketsCorrect(Integer.parseInt(getTotalCPUCores().getEntity().toString()));
    ValidationResult res = new ValidationResult();
    res.setSuccess(isOk);
    res.setReasons(Arrays.asList(ConstantsManager.getInstance().getMessages().incorrectVCPUNumber()));
    return res;
}
#method_after
@Override
public ValidationResult validate(Object value) {
    boolean isOk = behavior.isNumOfSocketsCorrect(Integer.parseInt(getTotalCPUCores().getEntity()));
    ValidationResult res = new ValidationResult();
    res.setSuccess(isOk);
    res.setReasons(Arrays.asList(ConstantsManager.getInstance().getMessages().incorrectVCPUNumber()));
    return res;
}
#end_block

#method_before
public ListModel getPoolType() {
    return poolType;
}
#method_after
public ListModel<EntityModel<VmPoolType>> getPoolType() {
    return poolType;
}
#end_block

#method_before
protected void setPoolType(NotChangableForVmInPoolListModel value) {
    poolType = value;
}
#method_after
protected void setPoolType(NotChangableForVmInPoolListModel<EntityModel<VmPoolType>> value) {
    poolType = value;
}
#end_block

#method_before
public EntityModel getNumOfDesktops() {
    return numOfDesktops;
}
#method_after
public EntityModel<Integer> getNumOfDesktops() {
    return numOfDesktops;
}
#end_block

#method_before
protected void setNumOfDesktops(NotChangableForVmInPoolEntityModel value) {
    numOfDesktops = value;
}
#method_after
protected void setNumOfDesktops(NotChangableForVmInPoolEntityModel<Integer> value) {
    numOfDesktops = value;
}
#end_block

#method_before
public EntityModel getAssignedVms() {
    return assignedVms;
}
#method_after
public EntityModel<Integer> getAssignedVms() {
    return assignedVms;
}
#end_block

#method_before
public void setAssignedVms(NotChangableForVmInPoolEntityModel value) {
    assignedVms = value;
}
#method_after
public void setAssignedVms(NotChangableForVmInPoolEntityModel<Integer> value) {
    assignedVms = value;
}
#end_block

#method_before
public EntityModel getPrestartedVms() {
    return prestartedVms;
}
#method_after
public EntityModel<Integer> getPrestartedVms() {
    return prestartedVms;
}
#end_block

#method_before
protected void setPrestartedVms(NotChangableForVmInPoolEntityModel value) {
    prestartedVms = value;
}
#method_after
protected void setPrestartedVms(NotChangableForVmInPoolEntityModel<Integer> value) {
    prestartedVms = value;
}
#end_block

#method_before
public EntityModel getMaxAssignedVmsPerUser() {
    return maxAssignedVmsPerUser;
}
#method_after
public EntityModel<Integer> getMaxAssignedVmsPerUser() {
    return maxAssignedVmsPerUser;
}
#end_block

#method_before
public void setMaxAssignedVmsPerUser(NotChangableForVmInPoolEntityModel maxAssignedVmsPerUser) {
    this.maxAssignedVmsPerUser = maxAssignedVmsPerUser;
}
#method_after
public void setMaxAssignedVmsPerUser(NotChangableForVmInPoolEntityModel<Integer> maxAssignedVmsPerUser) {
    this.maxAssignedVmsPerUser = maxAssignedVmsPerUser;
}
#end_block

#method_before
@Override
public ListModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool())
        super.setIsChangable(value);
    return this;
}
#method_after
@Override
public ListModel<T> setIsChangable(boolean value) {
    if (!isVmAttachedToPool()) {
        super.setIsChangable(value);
    }
    return this;
}
#end_block

#method_before
@Override
public EntityModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool())
        super.setIsChangable(value);
    return this;
}
#method_after
@Override
public EntityModel<T> setIsChangable(boolean value) {
    if (!isVmAttachedToPool()) {
        super.setIsChangable(value);
    }
    return this;
}
#end_block

#method_before
@Override
public KeyValueModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool())
        super.setIsChangable(value);
    return this;
}
#method_after
@Override
public KeyValueModel setIsChangable(boolean value) {
    if (!isVmAttachedToPool()) {
        super.setIsChangable(value);
    }
    return this;
}
#end_block

#method_before
public ListModel getWatchdogModel() {
    return watchdogModel;
}
#method_after
public ListModel<String> getWatchdogModel() {
    return watchdogModel;
}
#end_block

#method_before
public void setWatchdogModel(ListModel watchdogModel) {
    this.watchdogModel = watchdogModel;
}
#method_after
public void setWatchdogModel(ListModel<String> watchdogModel) {
    this.watchdogModel = watchdogModel;
}
#end_block

#method_before
public ListModel getWatchdogAction() {
    return watchdogAction;
}
#method_after
public ListModel<String> getWatchdogAction() {
    return watchdogAction;
}
#end_block

#method_before
public void setWatchdogAction(ListModel watchdogAction) {
    this.watchdogAction = watchdogAction;
}
#method_after
public void setWatchdogAction(ListModel<String> watchdogAction) {
    this.watchdogAction = watchdogAction;
}
#end_block

#method_before
public StoragePool getSelectedDataCenter() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getDataCenter();
}
#method_after
public StoragePool getSelectedDataCenter() {
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getDataCenter();
}
#end_block

#method_before
public VDSGroup getSelectedCluster() {
    DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getCluster();
}
#method_after
public VDSGroup getSelectedCluster() {
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    if (dataCenterWithCluster == null) {
        return null;
    }
    return dataCenterWithCluster.getCluster();
}
#end_block

#method_before
private void initInternalDiskTable(final CommonApplicationConstants constants, final CommonApplicationResources resources, final CommonApplicationTemplates templates) {
    internalDiskTable.enableColumnResizing();
    TextColumnWithTooltip<EntityModel> aliasColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(aliasColumn, constants.aliasVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> descriptionColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getDiskDescription();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(descriptionColumn, constants.descriptionVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> idColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getId().toString();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(idColumn, constants.idVmDiskTable(), "85px");
    DiskSizeColumn<EntityModel> sizeColumn = new DiskSizeColumn<EntityModel>() {

        @Override
        protected Long getRawValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getSize();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(sizeColumn, constants.provisionedSizeVmDiskTable(), "105px");
    DiskSizeColumn<EntityModel> actualSizeColumn = new DiskSizeColumn<EntityModel>() {

        @Override
        protected Long getRawValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getActualSizeInBytes();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(actualSizeColumn, constants.sizeVmDiskTable(), "105px");
    TextColumnWithTooltip<EntityModel> storageDomainColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getStoragesNames().get(0);
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(storageDomainColumn, constants.storageDomainVmDiskTable(), "115px");
    TextColumnWithTooltip<EntityModel> interfaceColumn = new EnumColumn<EntityModel, DiskInterface>() {

        @Override
        protected DiskInterface getRawValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskInterface();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(interfaceColumn, constants.interfaceVmDiskPopup(), "95px");
    SafeHtml readOnlyColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.readOnlyDiskIcon()).getHTML()), constants.readOnly());
    // $NON-NLS-1$
    internalDiskTable.addColumn(DisksViewColumns.readOnlyCheckboxColumn, readOnlyColumnHeader, "30px");
    SafeHtml bootableColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.bootableDiskIcon()).getHTML()), constants.bootable());
    internalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isBoot() ? constants.bootableDisk() : null);
            return disk.isBoot() ? resources.bootableDiskIcon() : null;
        }
    }, bootableColumnHeader, // $NON-NLS-1$ //$NON-NLS-2$
    "30px");
    SafeHtml shareableColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.shareableDiskIcon()).getHTML()), constants.shareable());
    internalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isShareable() ? constants.shareable() : null);
            return disk.isShareable() ? resources.shareableDiskIcon() : null;
        }
    }, shareableColumnHeader, // $NON-NLS-1$ //$NON-NLS-2$
    "30px");
    // $NON-NLS-1$
    internalDiskTable.setWidth("100%", true);
    // $NON-NLS-1$
    internalDiskTable.setHeight("100%");
}
#method_after
private void initInternalDiskTable(final CommonApplicationConstants constants, final CommonApplicationResources resources, final CommonApplicationTemplates templates) {
    internalDiskTable.enableColumnResizing();
    TextColumnWithTooltip<EntityModel> aliasColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(aliasColumn, constants.aliasVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> descriptionColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getDiskDescription();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(descriptionColumn, constants.descriptionVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> idColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getId().toString();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(idColumn, constants.idVmDiskTable(), "85px");
    DiskSizeColumn<EntityModel> sizeColumn = new DiskSizeColumn<EntityModel>() {

        @Override
        protected Long getRawValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getSize();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(sizeColumn, constants.provisionedSizeVmDiskTable(), "105px");
    DiskSizeColumn<EntityModel> actualSizeColumn = new DiskSizeColumn<EntityModel>() {

        @Override
        protected Long getRawValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getActualSizeInBytes();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(actualSizeColumn, constants.sizeVmDiskTable(), "105px");
    TextColumnWithTooltip<EntityModel> storageDomainColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            DiskImage diskImage = (DiskImage) (((DiskModel) (object.getEntity())).getDisk());
            return diskImage.getStoragesNames().get(0);
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(storageDomainColumn, constants.storageDomainVmDiskTable(), "115px");
    TextColumnWithTooltip<EntityModel> interfaceColumn = new EnumColumn<EntityModel, DiskInterface>() {

        @Override
        protected DiskInterface getRawValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskInterface();
        }
    };
    // $NON-NLS-1$
    internalDiskTable.addColumn(interfaceColumn, constants.interfaceVmDiskPopup(), "95px");
    SafeHtml readOnlyColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.readOnlyDiskIcon()).getHTML()), constants.readOnly());
    // $NON-NLS-1$
    internalDiskTable.addColumn(DisksViewColumns.readOnlyCheckboxColumn, readOnlyColumnHeader, "30px");
    SafeHtml bootableColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.bootableDiskIcon()).getHTML()), constants.bootable());
    internalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isBoot() ? constants.bootableDisk() : null);
            return disk.isBoot() ? resources.bootableDiskIcon() : null;
        }
    }, bootableColumnHeader, // $NON-NLS-1$
    "30px");
    SafeHtml shareableColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.shareableDiskIcon()).getHTML()), constants.shareable());
    internalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isShareable() ? constants.shareable() : null);
            return disk.isShareable() ? resources.shareableDiskIcon() : null;
        }
    }, shareableColumnHeader, // $NON-NLS-1$
    "30px");
    // $NON-NLS-1$
    internalDiskTable.setWidth("100%", true);
    // $NON-NLS-1$
    internalDiskTable.setHeight("100%");
}
#end_block

#method_before
private void initExternalDiskTable(final CommonApplicationConstants constants, final CommonApplicationResources resources, final CommonApplicationTemplates templates) {
    externalDiskTable.enableColumnResizing();
    TextColumnWithTooltip<EntityModel> aliasColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(aliasColumn, constants.aliasVmDiskTable(), "60px");
    TextColumnWithTooltip<EntityModel> descriptionColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskDescription();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(descriptionColumn, constants.descriptionVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> lunIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getLUN_id();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(lunIdColumn, constants.lunIdSanStorage(), "60px");
    TextColumnWithTooltip<EntityModel> idColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getId().toString();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(idColumn, constants.idVmDiskTable(), "60px");
    DiskSizeColumn<EntityModel> sizeColumn = new DiskSizeColumn<EntityModel>(SizeConverter.SizeUnit.GB) {

        @Override
        protected Long getRawValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return (long) disk.getLun().getDeviceSize();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(sizeColumn, constants.devSizeSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> pathColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return String.valueOf(disk.getLun().getPathCount());
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(pathColumn, constants.pathSanStorage(), "40px");
    TextColumnWithTooltip<EntityModel> vendorIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getVendorId();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(vendorIdColumn, constants.vendorIdSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> productIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getProductId();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(productIdColumn, constants.productIdSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> serialColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getSerial();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(serialColumn, constants.serialSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> interfaceColumn = new EnumColumn<EntityModel, DiskInterface>() {

        @Override
        protected DiskInterface getRawValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskInterface();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(interfaceColumn, constants.interfaceVmDiskPopup(), "90px");
    SafeHtml readOnlyColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.readOnlyDiskIcon()).getHTML()), constants.readOnly());
    // $NON-NLS-1$
    externalDiskTable.addColumn(DisksViewColumns.readOnlyCheckboxColumn, readOnlyColumnHeader, "30px");
    externalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isBoot() ? constants.bootableDisk() : null);
            return disk.isBoot() ? resources.bootableDiskIcon() : null;
        }
    }, "", // $NON-NLS-1$ //$NON-NLS-2$
    "30px");
    externalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isShareable() ? constants.shareable() : null);
            return disk.isShareable() ? resources.shareableDiskIcon() : null;
        }
    }, "", // $NON-NLS-1$ //$NON-NLS-2$
    "30px");
    // $NON-NLS-1$
    externalDiskTable.setWidth("100%", true);
    // $NON-NLS-1$
    externalDiskTable.setHeight("100%");
}
#method_after
private void initExternalDiskTable(final CommonApplicationConstants constants, final CommonApplicationResources resources, final CommonApplicationTemplates templates) {
    externalDiskTable.enableColumnResizing();
    TextColumnWithTooltip<EntityModel> aliasColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(aliasColumn, constants.aliasVmDiskTable(), "60px");
    TextColumnWithTooltip<EntityModel> descriptionColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskDescription();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(descriptionColumn, constants.descriptionVmDiskTable(), "85px");
    TextColumnWithTooltip<EntityModel> lunIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getLUN_id();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(lunIdColumn, constants.lunIdSanStorage(), "60px");
    TextColumnWithTooltip<EntityModel> idColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getId().toString();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(idColumn, constants.idVmDiskTable(), "60px");
    DiskSizeColumn<EntityModel> sizeColumn = new DiskSizeColumn<EntityModel>(SizeConverter.SizeUnit.GB) {

        @Override
        protected Long getRawValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return (long) disk.getLun().getDeviceSize();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(sizeColumn, constants.devSizeSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> pathColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return String.valueOf(disk.getLun().getPathCount());
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(pathColumn, constants.pathSanStorage(), "40px");
    TextColumnWithTooltip<EntityModel> vendorIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getVendorId();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(vendorIdColumn, constants.vendorIdSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> productIdColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getProductId();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(productIdColumn, constants.productIdSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> serialColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel object) {
            LunDisk disk = (LunDisk) (((DiskModel) (object.getEntity())).getDisk());
            return disk.getLun().getSerial();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(serialColumn, constants.serialSanStorage(), "70px");
    TextColumnWithTooltip<EntityModel> interfaceColumn = new EnumColumn<EntityModel, DiskInterface>() {

        @Override
        protected DiskInterface getRawValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            return disk.getDiskInterface();
        }
    };
    // $NON-NLS-1$
    externalDiskTable.addColumn(interfaceColumn, constants.interfaceVmDiskPopup(), "90px");
    SafeHtml readOnlyColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.readOnlyDiskIcon()).getHTML()), constants.readOnly());
    // $NON-NLS-1$
    externalDiskTable.addColumn(DisksViewColumns.readOnlyCheckboxColumn, readOnlyColumnHeader, "30px");
    SafeHtml bootableColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.bootableDiskIcon()).getHTML()), constants.bootable());
    externalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isBoot() ? constants.bootableDisk() : null);
            return disk.isBoot() ? resources.bootableDiskIcon() : null;
        }
    }, bootableColumnHeader, // $NON-NLS-1$
    "30px");
    SafeHtml shareableColumnHeader = templates.imageWithTitle(SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(resources.shareableDiskIcon()).getHTML()), constants.shareable());
    externalDiskTable.addColumn(new ImageResourceColumn<EntityModel>() {

        @Override
        public ImageResource getValue(EntityModel object) {
            Disk disk = (((DiskModel) (object.getEntity())).getDisk());
            setTitle(disk.isShareable() ? constants.shareable() : null);
            return disk.isShareable() ? resources.shareableDiskIcon() : null;
        }
    }, shareableColumnHeader, // $NON-NLS-1$
    "30px");
    // $NON-NLS-1$
    externalDiskTable.setWidth("100%", true);
    // $NON-NLS-1$
    externalDiskTable.setHeight("100%");
}
#end_block

#method_before
@Before
public void init() {
    MockitoAnnotations.initMocks(this);
    tasksSyncJob = Mockito.spy(GlusterTasksSyncJob.getInstance());
    logUtil = Mockito.spy(GlusterAuditLogUtil.getInstance());
    tasksSyncJob.setLogUtil(logUtil);
    doReturn(clusterDao).when(tasksSyncJob).getClusterDao();
    doReturn(getClusters()).when(clusterDao).getAll();
    doReturn(provider).when(tasksSyncJob).getProvider();
    doReturn(stepDao).when(tasksSyncJob).getStepDao();
    doReturn(volumeDao).when(tasksSyncJob).getVolumeDao();
    doReturn(jobRepository).when(tasksSyncJob).getJobRepository();
    doReturn(backend).when(tasksSyncJob).getBackend();
    doNothing().when(tasksSyncJob).releaseLock(any(Guid.class));
    doNothing().when(tasksSyncJob).endStepJob(any(Step.class));
    doNothing().when(tasksSyncJob).logMessage(any(Guid.class), any(GlusterVolumeEntity.class), any(String.class), any(String.class), any(AuditLogType.class));
    doNothing().when(logUtil).logAuditMessage(any(Guid.class), any(GlusterVolumeEntity.class), any(VDS.class), any(AuditLogType.class), any(Map.class));
}
#method_after
@Before
public void init() {
    MockitoAnnotations.initMocks(this);
    tasksSyncJob = Mockito.spy(GlusterTasksSyncJob.getInstance());
    logUtil = Mockito.spy(GlusterAuditLogUtil.getInstance());
    taskUtils = Mockito.spy(GlusterTaskUtils.getInstance());
    doNothing().when(logUtil).logClusterMessage(any(Guid.class), any(AuditLogType.class));
    doReturn(clusterDao).when(tasksSyncJob).getClusterDao();
    doReturn(getClusters()).when(clusterDao).getAll();
    doReturn(provider).when(tasksSyncJob).getProvider();
    doReturn(stepDao).when(tasksSyncJob).getStepDao();
    doReturn(volumeDao).when(tasksSyncJob).getVolumeDao();
    doReturn(volumeDao).when(taskUtils).getVolumeDao();
    doReturn(jobRepository).when(tasksSyncJob).getJobRepository();
    doReturn(jobRepository).when(taskUtils).getJobRepository();
    doReturn(backend).when(tasksSyncJob).getBackend();
    doReturn(taskUtils).when(tasksSyncJob).getGlusterTaskUtils();
    doNothing().when(taskUtils).releaseLock(any(Guid.class));
    doNothing().when(taskUtils).endStepJob(any(Step.class));
    doReturn(null).when(provider).getMonitoredTaskIDsInDB();
    doNothing().when(taskUtils).eventMessageLogger(any(GlusterAsyncTask.class), any(JobExecutionStatus.class), any(VDSGroup.class));
}
#end_block

#method_before
@Test
public void updateTasksInCluster() {
    doReturn(getTasks()).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(1)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(1)).endStepJob(any(Step.class));
}
#method_after
@Test
public void updateTasksInCluster() {
    doReturn(getTasks()).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(1)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(1)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testUpdateWhenNoTasks() {
    doReturn(null).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[0], null);
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[1], null);
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
}
#method_after
@Test
public void testUpdateWhenNoTasks() {
    doReturn(null).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[0], null);
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[1], null);
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testCreateTasksStartedFromCLI() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(true, Guid.newGuid())).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
    Mockito.verify(backend, times(6)).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
}
#method_after
@Test
public void testCreateTasksStartedFromCLI() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(true, Guid.newGuid())).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testCreateTasksStartedFromCLIWithErrors() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(false, null)).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
    Mockito.verify(backend, times(2)).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
}
#method_after
@Test
public void testCreateTasksStartedFromCLIWithErrors() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(false, null)).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testUpdateWhenNoCompletedTasks() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(2)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
}
#method_after
@Test
public void testUpdateWhenNoCompletedTasks() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(2)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testUpdateWhenAbortedTasks() {
    doReturn(getTasks(JobExecutionStatus.ABORTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(2)).endStepJob(any(Step.class));
}
#method_after
@Test
public void testUpdateWhenAbortedTasks() {
    doReturn(getTasks(JobExecutionStatus.ABORTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(2)).endStepJob(any(Step.class));
}
#end_block

#method_before
private void prepareMocks() {
    doReturn(getVolume(0)).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[0]);
    doReturn(getVolume(1)).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[1]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[0]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[1]);
}
#method_after
private void prepareMocks() {
    doReturn(getVolume(0)).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[0]);
    doReturn(getVolume(1)).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[1]);
    doReturn(getVolume(1)).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[2]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[0]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[1]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[2]);
}
#end_block

#method_before
private GlusterVolumeEntity getVolume(int i) {
    GlusterVolumeEntity vol = new GlusterVolumeEntity();
    vol.setId(VOL_GUIDS[i]);
    return vol;
}
#method_after
private GlusterVolumeEntity getVolume(int i) {
    GlusterVolumeEntity vol = new GlusterVolumeEntity();
    vol.setStatus(GlusterStatus.UP);
    vol.setId(VOL_GUIDS[i]);
    return vol;
}
#end_block

#method_before
private static void initGlusterSeverities() {
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_ADDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_MODIFIED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_ALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.START_REMOVING_GLUSTER_VOLUME_BRICKS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.START_REMOVING_GLUSTER_VOLUME_BRICKS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICK_DATA_MIGRATION_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_ADD_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVERS_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_INFO_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_COMMAND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_RESET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROPERTIES_CHANGED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_ADDED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STARTED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOPPED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_PARTIAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE_PARTIAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_CONFLICT_DETECTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_DETECTED_NEW, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_DETECTED_DELETE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_GETCONTENT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVICES_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVICE_TYPE_ADDED_TO_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_CLUSTER_SERVICE_STATUS_CHANGED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_CLUSTER_SERVICE_STATUS_ADDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVICE_ADDED_TO_SERVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVER_SERVICE_STATUS_CHANGED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_UPDATED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_ADDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_ADD_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_REMOVED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_REMOVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_REFRESH, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_REFRESH_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVICE_STARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVICE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVICE_STOPPED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVICE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVICE_RESTARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVICE_RESTART_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOST_UUID_NOT_FOUND, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, AuditLogSeverity.WARNING);
}
#method_after
private static void initGlusterSeverities() {
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_ADDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_MODIFIED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_ALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.START_REMOVING_GLUSTER_VOLUME_BRICKS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.START_REMOVING_GLUSTER_VOLUME_BRICKS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_MIGRATE_BRICK_DATA_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_ADD_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVERS_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_INFO_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_COMMAND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_RESET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROPERTIES_CHANGED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_ADDED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STARTED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOPPED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_PARTIAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE_PARTIAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_CONFLICT_DETECTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_DETECTED_NEW, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_DETECTED_DELETE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_GETCONTENT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVICES_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVICE_TYPE_ADDED_TO_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_CLUSTER_SERVICE_STATUS_CHANGED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_CLUSTER_SERVICE_STATUS_ADDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVICE_ADDED_TO_SERVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVER_SERVICE_STATUS_CHANGED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_UPDATED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_ADDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_ADD_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_REMOVED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_REMOVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_REFRESH, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_REFRESH_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVICE_STARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVICE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVICE_STOPPED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVICE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVICE_RESTARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVICE_RESTART_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOST_UUID_NOT_FOUND, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initVMSeverities() {
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT_INFO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_STATUS_RESTORED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_NO_VDS_TO_RUN_ON, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MEMORY_UNDER_GUARANTEED_VALUE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_BALLOON_DRIVER_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_BALLOON_DRIVER_UNCONTROLLED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM_AND_PAUSE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_DST_IMAGE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_LIVE_SNAPSHOT_NO_MEMORY_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTENANCE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.HA_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.HA_VM_RESTART_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ATTACH_DISK_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.WATCHDOG_EVENT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FROM_TRUSTED_TO_UNTRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FROM_UNTRUSTED_TO_TRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE_FROM_TRUSTED_TO_UNTRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE_FROM_UNTRUSTED_TO_TRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_FROM_TRUSTED_TO_UNTRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_FROM_UNTRUSTED_TO_TRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_UPDATE_VM_FROM_TRUSTED_TO_UNTRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_UPDATE_VM_FROM_UNTRUSTED_TO_TRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_SET_TICKET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_SET_TICKET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.ADD_VM_FROM_SNAPSHOT_INVALID_INTERFACES, AuditLogSeverity.WARNING);
}
#method_after
private static void initVMSeverities() {
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT_INFO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_STATUS_RESTORED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_NO_VDS_TO_RUN_ON, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MEMORY_UNDER_GUARANTEED_VALUE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MEMORY_NOT_IN_RECOMMENDED_RANGE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_BALLOON_DRIVER_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_BALLOON_DRIVER_UNCONTROLLED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM_AND_PAUSE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_DST_IMAGE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_LIVE_SNAPSHOT_NO_MEMORY_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTENANCE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.HA_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.HA_VM_RESTART_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ATTACH_DISK_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.WATCHDOG_EVENT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FROM_TRUSTED_TO_UNTRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FROM_UNTRUSTED_TO_TRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE_FROM_TRUSTED_TO_UNTRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE_FROM_UNTRUSTED_TO_TRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_FROM_TRUSTED_TO_UNTRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_FROM_UNTRUSTED_TO_TRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_UPDATE_VM_FROM_TRUSTED_TO_UNTRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_UPDATE_VM_FROM_UNTRUSTED_TO_TRUSTED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_SET_TICKET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_SET_TICKET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.ADD_VM_FROM_SNAPSHOT_INVALID_INTERFACES, AuditLogSeverity.WARNING);
}
#end_block

#method_before
@Override
public List<permissions> getAllForEntity(Guid id, Guid userID, boolean isFiltered) {
    Integer appMode = Config.<Integer>GetValue(ConfigValues.ApplicationMode);
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userID).addValue("is_filtered", isFiltered).addValue("app_mode", appMode.intValue());
    return getCallsHandler().executeReadList("GetPermissionsByEntityId", PermissionRowMapper.instance, parameterSource);
}
#method_after
@Override
public List<permissions> getAllForEntity(Guid id, Guid userID, boolean isFiltered) {
    return getAllForEntity(id, userID, isFiltered, false);
}
#end_block

#method_before
@Override
public List<permissions> getAllForEntity(Guid id, Guid userID, boolean isFiltered) {
    Integer appMode = Config.<Integer>GetValue(ConfigValues.ApplicationMode);
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userID).addValue("is_filtered", isFiltered).addValue("app_mode", appMode.intValue());
    return getCallsHandler().executeReadList("GetPermissionsByEntityId", PermissionRowMapper.instance, parameterSource);
}
#method_after
@Override
public List<permissions> getAllForEntity(Guid id, Guid userID, boolean isFiltered, boolean allUsersWithPermission) {
    int appMode = Config.<Integer>GetValue(ConfigValues.ApplicationMode);
    return getAllForEntity(id, userID, isFiltered, allUsersWithPermission, appMode);
}
#end_block

#method_before
@Override
public List<permissions> getTreeForEntity(Guid id, VdcObjectType type, Guid userID, boolean isFiltered) {
    Integer appMode = Config.<Integer>GetValue(ConfigValues.ApplicationMode);
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id).addValue("object_type_id", type.getValue()).addValue("user_id", userID).addValue("is_filtered", isFiltered).addValue("app_mode", appMode.intValue());
    return getCallsHandler().executeReadList("GetPermissionsTreeByEntityId", PermissionRowMapper.instance, parameterSource);
}
#method_after
@Override
public List<permissions> getTreeForEntity(Guid id, VdcObjectType type, Guid userID, boolean isFiltered) {
    int appMode = Config.<Integer>GetValue(ConfigValues.ApplicationMode);
    return getTreeForEntity(id, type, userID, isFiltered, appMode);
}
#end_block

#method_before
@Override
public List<permissions> getTreeForEntity(Guid id, VdcObjectType type, Guid userID, boolean isFiltered) {
    Integer appMode = Config.<Integer>GetValue(ConfigValues.ApplicationMode);
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id).addValue("object_type_id", type.getValue()).addValue("user_id", userID).addValue("is_filtered", isFiltered).addValue("app_mode", appMode.intValue());
    return getCallsHandler().executeReadList("GetPermissionsTreeByEntityId", PermissionRowMapper.instance, parameterSource);
}
#method_after
@Override
public List<permissions> getTreeForEntity(Guid id, VdcObjectType type, Guid userID, boolean isFiltered, int appMode) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id).addValue("object_type_id", type.getValue()).addValue("user_id", userID).addValue("is_filtered", isFiltered).addValue("app_mode", appMode);
    return getCallsHandler().executeReadList("GetPermissionsTreeByEntityId", PermissionRowMapper.instance, parameterSource);
}
#end_block

#method_before
private Set<String> getInterfaceNetworkNames() {
    if (cachedInterfaceNetworkNames == null) {
        return Entities.vmInterfacesByNetworkName(vm.getInterfaces()).keySet();
    }
    return cachedInterfaceNetworkNames;
}
#method_after
private Set<String> getInterfaceNetworkNames() {
    if (cachedInterfaceNetworkNames == null) {
        cachedInterfaceNetworkNames = Entities.vmInterfacesByNetworkName(vm.getInterfaces()).keySet();
    }
    return cachedInterfaceNetworkNames;
}
#end_block

#method_before
private void initHandlers() {
    mTagsHandler = HandlersFactory.createTagsHandler();
    BaseConditionFieldAutoCompleter.TagsHandler = mTagsHandler;
    VmHandler.init();
    VdsHandler.Init();
    VmTemplateHandler.Init();
    log.info("Completed initializing handlers");
}
#method_after
private void initHandlers() {
    mTagsHandler = HandlersFactory.createTagsHandler();
    BaseConditionFieldAutoCompleter.tagsHandler = mTagsHandler;
    VmHandler.init();
    VdsHandler.Init();
    VmTemplateHandler.Init();
    log.info("Completed initializing handlers");
}
#end_block

#method_before
private void initHandlers() {
    mTagsHandler = HandlersFactory.createTagsHandler();
    BaseConditionFieldAutoCompleter.TagsHandler = mTagsHandler;
    VmHandler.init();
    VdsHandler.Init();
    VmTemplateHandler.Init();
    log.info("Completed initializing handlers");
}
#method_after
private void initHandlers() {
    mTagsHandler = HandlersFactory.createTagsHandler();
    BaseConditionFieldAutoCompleter.tagsHandler = mTagsHandler;
    VmHandler.init();
    VdsHandler.Init();
    VmTemplateHandler.Init();
    log.info("Completed initializing handlers");
}
#end_block

#method_before
private void initHandlers() {
    mTagsHandler = HandlersFactory.createTagsHandler();
    BaseConditionFieldAutoCompleter.TagsHandler = mTagsHandler;
    VmHandler.init();
    VdsHandler.Init();
    VmTemplateHandler.Init();
    log.info("Completed initializing handlers");
}
#method_after
private void initHandlers() {
    mTagsHandler = HandlersFactory.createTagsHandler();
    BaseConditionFieldAutoCompleter.tagsHandler = mTagsHandler;
    VmHandler.init();
    VdsHandler.Init();
    VmTemplateHandler.Init();
    log.info("Completed initializing handlers");
}
#end_block

#method_before
@Override
public VdcQueryReturnValue RunPublicQuery(VdcQueryType queryType, VdcQueryParametersBase params) {
    // $NON-NLS-1$
    log.debug("Server: RunPublicQuery invoked! " + queryType);
    debugQuery(queryType, params);
    return getBackend().runPublicQuery(queryType, params);
}
#method_after
@Override
public VdcQueryReturnValue RunPublicQuery(VdcQueryType queryType, VdcQueryParametersBase params) {
    // $NON-NLS-1$
    log.debug("Server: runPublicQuery invoked! " + queryType);
    debugQuery(queryType, params);
    return getBackend().runPublicQuery(queryType, params);
}
#end_block

#method_before
private void initHandlers() {
    mTagsHandler = HandlersFactory.createTagsHandler();
    BaseConditionFieldAutoCompleter.TagsHandler = mTagsHandler;
    VmHandler.init();
    VdsHandler.Init();
    VmTemplateHandler.Init();
    log.info("Completed initializing handlers");
}
#method_after
private void initHandlers() {
    mTagsHandler = HandlersFactory.createTagsHandler();
    BaseConditionFieldAutoCompleter.tagsHandler = mTagsHandler;
    VmHandler.init();
    VdsHandler.Init();
    VmTemplateHandler.Init();
    log.info("Completed initializing handlers");
}
#end_block

#method_before
@OnTimerMethodAnnotation("gluster_async_task_poll_event")
public void updateGlusterAsyncTasks() {
    log.debug("Refreshing gluster tasks list");
    List<VDSGroup> clusters = getClusterDao().getAll();
    List<Guid> tasksFromClusters = new ArrayList<>();
    boolean cleanOrphanTasks = true;
    for (VDSGroup cluster : clusters) {
        if (!getGlusterTaskUtils().supportsGlusterAsyncTasksFeature(cluster)) {
            continue;
        }
        try {
            Map<Guid, GlusterAsyncTask> runningTasks = getProvider().getTaskListForCluster(cluster.getId());
            if (runningTasks != null) {
                updateTasksInCluster(cluster, runningTasks);
                tasksFromClusters.addAll(runningTasks.keySet());
            }
        } catch (VdcBLLException e) {
            cleanOrphanTasks = false;
        }
    }
    if (cleanOrphanTasks) {
        cleanUpOrphanTasks(tasksFromClusters);
    }
}
#method_after
@OnTimerMethodAnnotation("gluster_async_task_poll_event")
public void updateGlusterAsyncTasks() {
    log.debug("Refreshing gluster tasks list");
    List<VDSGroup> clusters = getClusterDao().getAll();
    Map<Guid, Set<Guid>> tasksFromClustersMap = new HashMap<>();
    for (VDSGroup cluster : clusters) {
        if (!getGlusterTaskUtils().supportsGlusterAsyncTasksFeature(cluster)) {
            continue;
        }
        try {
            Map<Guid, GlusterAsyncTask> runningTasks = getProvider().getTaskListForCluster(cluster.getId());
            if (runningTasks != null) {
                updateTasksInCluster(cluster, runningTasks);
            }
            tasksFromClustersMap.put(cluster.getId(), runningTasks == null ? null : runningTasks.keySet());
        } catch (VdcBLLException e) {
            log.error("Error updating tasks from CLI", e);
        }
    }
    cleanUpOrphanTasks(tasksFromClustersMap);
}
#end_block

#method_before
private void updateTasksInCluster(final VDSGroup cluster, final Map<Guid, GlusterAsyncTask> runningTasks) {
    for (Entry<Guid, GlusterAsyncTask> entry : runningTasks.entrySet()) {
        Guid taskId = entry.getKey();
        final GlusterAsyncTask task = entry.getValue();
        List<Step> steps = getStepDao().getStepsByExternalId(taskId);
        if (steps.isEmpty()) {
            // the task may have been started from the CLI
            // need to add job to monitor
            TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    try {
                        createJobToMonitor(cluster, task);
                    } catch (VdcBLLException e) {
                        log.error("Error creating job for task from CLI", e);
                    }
                    return null;
                }
            });
        }
        getGlusterTaskUtils().updateSteps(cluster, task, steps);
    }
}
#method_after
private void updateTasksInCluster(final VDSGroup cluster, final Map<Guid, GlusterAsyncTask> runningTasks) {
    for (Entry<Guid, GlusterAsyncTask> entry : runningTasks.entrySet()) {
        Guid taskId = entry.getKey();
        final GlusterAsyncTask task = entry.getValue();
        List<Step> steps = getStepDao().getStepsByExternalId(taskId);
        if (steps.isEmpty()) {
            createJobForTaskFromCLI(cluster, task);
        }
        getGlusterTaskUtils().updateSteps(cluster, task, steps);
    }
}
#end_block

#method_before
private void updateVolumeBricksAndLock(VDSGroup cluster, GlusterAsyncTask task) {
    // get volume associated with task
    String volumeName = task.getTaskParameters().getVolumeName();
    GlusterVolumeEntity vol = getVolumeDao().getByName(cluster.getId(), volumeName);
    if (vol != null) {
        // update volume with task id
        getVolumeDao().updateVolumeTask(vol.getId(), task.getTaskId());
        // acquire lock on volume
        acquireLock(vol.getId());
        if (GlusterTaskType.REMOVE_BRICK == task.getType()) {
            // update bricks associated with task id
            String[] bricks = task.getTaskParameters().getBricks();
            if (bricks == null) {
                return;
            }
            List<GlusterBrickEntity> brickEntities = new ArrayList<>();
            for (String brick : bricks) {
                String[] brickParts = brick.split(":", -1);
                String hostnameOrIp = brickParts[0];
                String brickDir = brickParts[1];
                GlusterBrickEntity brickEntity = new GlusterBrickEntity();
                VdsStatic server = GlusterDBUtils.getInstance().getServer(cluster.getId(), hostnameOrIp);
                if (server == null) {
                    log.warnFormat("Could not find server {0} in cluster {1}", hostnameOrIp, cluster.getId());
                } else {
                    brickEntity.setServerId(server.getId());
                    brickEntity.setBrickDirectory(brickDir);
                    brickEntity.setAsyncTask(new GlusterAsyncTask());
                    brickEntity.getAsyncTask().setTaskId(task.getTaskId());
                    brickEntities.add(brickEntity);
                }
            }
            getBrickDao().updateAllBrickTasksByHostIdBrickDirInBatch(brickEntities);
        }
    } else {
        log.debugFormat("Did not find a volume associated with volumeName {0} and task {1} ", volumeName, task.getTaskId());
    }
}
#method_after
private void updateVolumeBricksAndLock(VDSGroup cluster, GlusterAsyncTask task) {
    // get volume associated with task
    String volumeName = task.getTaskParameters().getVolumeName();
    GlusterVolumeEntity vol = getVolumeDao().getByName(cluster.getId(), volumeName);
    if (vol != null) {
        try {
            // acquire lock on volume
            acquireLock(vol.getId());
            // update volume with task id
            getVolumeDao().updateVolumeTask(vol.getId(), task.getTaskId());
            if (GlusterTaskType.REMOVE_BRICK == task.getType()) {
                // update bricks associated with task id
                String[] bricks = task.getTaskParameters().getBricks();
                if (bricks == null) {
                    return;
                }
                List<GlusterBrickEntity> brickEntities = new ArrayList<>();
                for (String brick : bricks) {
                    String[] brickParts = brick.split(":", -1);
                    String hostnameOrIp = brickParts[0];
                    String brickDir = brickParts[1];
                    GlusterBrickEntity brickEntity = new GlusterBrickEntity();
                    VdsStatic server = GlusterDBUtils.getInstance().getServer(cluster.getId(), hostnameOrIp);
                    if (server == null) {
                        log.warnFormat("Could not find server {0} in cluster {1}", hostnameOrIp, cluster.getId());
                    } else {
                        brickEntity.setServerId(server.getId());
                        brickEntity.setBrickDirectory(brickDir);
                        brickEntity.setAsyncTask(new GlusterAsyncTask());
                        brickEntity.getAsyncTask().setTaskId(task.getTaskId());
                        brickEntities.add(brickEntity);
                    }
                }
                getBrickDao().updateAllBrickTasksByHostIdBrickDirInBatch(brickEntities);
            }
        } catch (Exception e) {
            log.error(e);
            throw new VdcBLLException(VdcBllErrors.GeneralException, e.getMessage());
        } finally {
            releaseLock(vol.getId());
        }
    } else {
        log.debugFormat("Did not find a volume associated with volumeName {0} and task {1} ", volumeName, task.getTaskId());
    }
}
#end_block

#method_before
private void cleanUpOrphanTasks(List<Guid> runningTasksinCluster) {
    // Populate the list of tasks that need to be monitored from database
    List<Guid> taskListInDB = getProvider().getMonitoredTaskIDsInDB();
    if (taskListInDB == null || taskListInDB.isEmpty()) {
        return;
    }
    // if task is in DB but not in running task list
    final Set<Guid> tasksNotRunning = new HashSet<Guid>(taskListInDB);
    tasksNotRunning.removeAll(runningTasksinCluster);
    for (Guid taskId : tasksNotRunning) {
        GlusterVolumeEntity vol = getVolumeDao().getVolumeByGlusterTask(taskId);
        if (vol != null && vol.getStatus() != GlusterStatus.UP) {
            // the volume is not UP. Hence gluster may not have been able to return tasks for the volume
            continue;
        }
        // Volume is up, but gluster does not know of task
        // will mark job ended with status unknown.
        List<Step> steps = getStepDao().getStepsByExternalId(taskId);
        for (Step step : steps) {
            step.markStepEnded(JobExecutionStatus.UNKNOWN);
            step.setStatus(JobExecutionStatus.UNKNOWN);
            getGlusterTaskUtils().endStepJob(step);
        }
        getGlusterTaskUtils().releaseVolumeLock(taskId);
    }
}
#method_after
private void cleanUpOrphanTasks(Map<Guid, Set<Guid>> runningTasksInClusterMap) {
    // if map is empty, no tasks from clusters fetched. so return
    if (runningTasksInClusterMap.isEmpty()) {
        log.debug("Clean up of tasks has been skipped");
        return;
    }
    // Populate the list of tasks that need to be monitored from database
    List<Guid> taskListInDB = getProvider().getMonitoredTaskIDsInDB();
    if (taskListInDB == null || taskListInDB.isEmpty()) {
        return;
    }
    Set<Guid> allRunningTasksInCluster = new HashSet<>();
    for (Set<Guid> taskSet : runningTasksInClusterMap.values()) {
        if (taskSet != null) {
            allRunningTasksInCluster.addAll(taskSet);
        }
    }
    // if task is in DB but not in running task list
    final Set<Guid> tasksNotRunning = new HashSet<Guid>(taskListInDB);
    tasksNotRunning.removeAll(allRunningTasksInCluster);
    log.debugFormat("tasks to be cleaned up in db {0}", tasksNotRunning);
    for (Guid taskId : tasksNotRunning) {
        GlusterVolumeEntity vol = getVolumeDao().getVolumeByGlusterTask(taskId);
        if (vol != null && vol.getStatus() != GlusterStatus.UP && !runningTasksInClusterMap.keySet().contains((vol.getClusterId()))) {
            // contain the cluster id in such case
            continue;
        }
        // Volume is up, but gluster does not know of task
        // will mark job ended with status unknown.
        List<Step> steps = getStepDao().getStepsByExternalId(taskId);
        for (Step step : steps) {
            step.markStepEnded(JobExecutionStatus.UNKNOWN);
            step.setStatus(JobExecutionStatus.UNKNOWN);
            getGlusterTaskUtils().endStepJob(step);
        }
        getGlusterTaskUtils().releaseVolumeLock(taskId);
    }
}
#end_block

#method_before
private void configureFeedbackUrl() {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            String version = (String) result;
            feedbackUrl = dynamicMessages.feedbackUrl(version);
            if (feedbackUrl != null && feedbackUrl.length() > 0) {
                getView().setFeedbackText(feedbackLinkLabel);
                registerHandler(getView().getFeedbackLink().addClickHandler(new ClickHandler() {

                    @Override
                    public void onClick(ClickEvent event) {
                        WebUtils.openUrlInNewWindow(feedbackLinkLabel, feedbackUrl);
                    }
                }));
            }
        }
    };
    AsyncDataProvider.getRpmVersionViaPublic(_asyncQuery);
}
#method_after
private void configureFeedbackUrl() {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            String version = (String) result;
            feedbackUrl = dynamicMessages.feedbackUrl(version);
            if (feedbackUrl != null && feedbackUrl.length() > 0) {
                getView().setFeedbackText(feedbackLinkLabel);
                registerHandler(getView().getFeedbackLink().addClickHandler(new ClickHandler() {

                    @Override
                    public void onClick(ClickEvent event) {
                        WebUtils.openUrlInNewWindow(feedbackLinkLabel, feedbackUrl);
                    }
                }));
            }
        }
    };
    AsyncDataProvider.getRpmVersion(_asyncQuery);
}
#end_block

#method_before
@Test
public void testUpdateAsyncTaskId() {
    assertNull(existingDistVol.getAsyncTask().getTaskId());
    dao.updateVolumeTask(existingDistVol.getId(), REBALANCING_VOLUME_TASKID);
    GlusterVolumeEntity volume = dao.getAllWithQuery("select * from gluster_volumes_view where id = '" + existingDistVol.getId() + "'").get(0);
    assertNotNull("Volume : " + existingDistVol.getId() + " doesn't exists", volume);
    assertTrue("Task ID is not getting updated", volume.getAsyncTask().getTaskId().equals(REBALANCING_VOLUME_TASKID));
    assertTrue("Invalid Task status", JobExecutionStatus.STARTED == volume.getAsyncTask().getStatus());
    assertTrue("Invalid Task type", GlusterTaskType.REBALANCE == volume.getAsyncTask().getType());
}
#method_after
@Test
public void testUpdateAsyncTaskId() {
    assertNotNull(existingDistVol.getAsyncTask());
    assertNull(existingDistVol.getAsyncTask().getTaskId());
    dao.updateVolumeTask(existingDistVol.getId(), REBALANCING_VOLUME_TASKID);
    GlusterVolumeEntity volume = dao.getAllWithQuery("select * from gluster_volumes_view where id = '" + existingDistVol.getId() + "'").get(0);
    assertNotNull("Volume : " + existingDistVol.getId() + " doesn't exists", volume);
    assertTrue("Task ID is not getting updated", volume.getAsyncTask().getTaskId().equals(REBALANCING_VOLUME_TASKID));
    assertTrue("Invalid Task status", JobExecutionStatus.STARTED == volume.getAsyncTask().getStatus());
    assertTrue("Invalid Task type", GlusterTaskType.REBALANCE == volume.getAsyncTask().getType());
}
#end_block

#method_before
private void fetchRelatedEntities(GlusterVolumeEntity volume) {
    if (volume != null) {
        volume.setOptions(dbFacade.getGlusterOptionDao().getOptionsOfVolume(volume.getId()));
        volume.setAccessProtocols(new HashSet<AccessProtocol>(getAccessProtocolsOfVolume(volume.getId())));
        volume.setTransportTypes(new HashSet<TransportType>(getTransportTypesOfVolume(volume.getId())));
        volume.setAsyncTask(getAsyncTaskOfVolume(volume.getId()));
        List<GlusterBrickEntity> bricks = dbFacade.getGlusterBrickDao().getBricksOfVolume(volume.getId());
        if (volume.getAsyncTask() != null && volume.getAsyncTask().getTaskId() != null) {
            for (GlusterBrickEntity brick : bricks) {
                if (brick.getAsyncTask() != null && brick.getAsyncTask().getTaskId() != null && brick.getAsyncTask().getTaskId().equals(volume.getAsyncTask().getTaskId())) {
                    brick.setAsyncTask(volume.getAsyncTask());
                }
            }
        }
        volume.setBricks(bricks);
    }
}
#method_after
private void fetchRelatedEntities(GlusterVolumeEntity volume) {
    if (volume != null) {
        volume.setOptions(dbFacade.getGlusterOptionDao().getOptionsOfVolume(volume.getId()));
        volume.setAccessProtocols(new HashSet<AccessProtocol>(getAccessProtocolsOfVolume(volume.getId())));
        volume.setTransportTypes(new HashSet<TransportType>(getTransportTypesOfVolume(volume.getId())));
        GlusterAsyncTask asyncTask = getAsyncTaskOfVolume(volume.getId());
        if (asyncTask != null) {
            volume.setAsyncTask(asyncTask);
        }
        List<GlusterBrickEntity> bricks = dbFacade.getGlusterBrickDao().getBricksOfVolume(volume.getId());
        if (volume.getAsyncTask() != null && volume.getAsyncTask().getTaskId() != null) {
            for (GlusterBrickEntity brick : bricks) {
                if (brick.getAsyncTask() != null && brick.getAsyncTask().getTaskId() != null && brick.getAsyncTask().getTaskId().equals(volume.getAsyncTask().getTaskId())) {
                    brick.setAsyncTask(volume.getAsyncTask());
                }
            }
        }
        volume.setBricks(bricks);
    }
}
#end_block

#method_before
@Override
public void render(Context context, T value, SafeHtmlBuilder sb) {
    // Waiting icon need to be rendered only if job is started and task ref is emptu
    if (value.getAsyncTask() == null || value.getAsyncTask().getJobId() == null || value.getAsyncTask().getType() != null || value.getAsyncTask().getJobStatus() != JobExecutionStatus.STARTED) {
        return;
    }
    ImageResource taskImage = resources.waitImage();
    String tooltip = constants.waitForGlusterTask();
    // Generate the HTML for the image:
    SafeHtml activityImageHtml = SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(taskImage).getHTML());
    sb.append(applicationTemplates.image(activityImageHtml, tooltip));
}
#method_after
@Override
public void render(Context context, T value, SafeHtmlBuilder sb) {
    // Waiting icon need to be rendered only if job is started and task ref is empty
    if (value.getAsyncTask() == null || value.getAsyncTask().getJobId() == null || value.getAsyncTask().getType() != null || value.getAsyncTask().getJobStatus() != JobExecutionStatus.STARTED) {
        return;
    }
    ImageResource taskImage = resources.waitImage();
    String tooltip = constants.waitForGlusterTask();
    // Generate the HTML for the image:
    SafeHtml activityImageHtml = SafeHtmlUtils.fromTrustedString(AbstractImagePrototype.create(taskImage).getHTML());
    sb.append(applicationTemplates.image(activityImageHtml, tooltip));
}
#end_block

#method_before
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new VolumeStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<GlusterVolumeEntity> nameColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.NameVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> clusterColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getVdsGroupName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> volumeTypeColumn = new EnumColumn<GlusterVolumeEntity, GlusterVolumeType>() {

        @Override
        protected GlusterVolumeType getRawValue(GlusterVolumeEntity object) {
            return object.getVolumeType();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(volumeTypeColumn, constants.volumeTypeVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> numOfBricksColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return Integer.toString(object.getBricks().size());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(numOfBricksColumn, constants.numberOfBricksVolume(), "150px");
    MenuCell<GlusterTaskSupport> rebalanceMenuCell = getRebalanceActivityMenu(constants);
    MenuCell<GlusterTaskSupport> removeBricksMenuCell = getRemoveBrickActivityMenu(constants);
    List<HasCell<GlusterTaskSupport, ?>> list = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    list.add(new VolumeActivityStatusColumn<GlusterTaskSupport>());
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivitySeperatorCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(rebalanceMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(removeBricksMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    List<HasCell<GlusterTaskSupport, ?>> compositeList = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeTaskWaitingCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivityCompositeCell<GlusterTaskSupport>(list)) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    getTable().addColumn(new VolumeActivityColumn<GlusterVolumeEntity>(compositeList), constants.activitiesOnVolume(), // $NON-NLS-1$
    "100px");
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.newVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.removeVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.rebalanceVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartRebalanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.optimizeForVirtStore()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getOptimizeForVirtStoreCommand();
        }
    });
}
#method_after
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new VolumeStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<GlusterVolumeEntity> nameColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.NameVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> clusterColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getVdsGroupName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> volumeTypeColumn = new EnumColumn<GlusterVolumeEntity, GlusterVolumeType>() {

        @Override
        protected GlusterVolumeType getRawValue(GlusterVolumeEntity object) {
            return object.getVolumeType();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(volumeTypeColumn, constants.volumeTypeVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> numOfBricksColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return Integer.toString(object.getBricks().size());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(numOfBricksColumn, constants.numberOfBricksVolume(), "150px");
    MenuCell<GlusterTaskSupport> rebalanceMenuCell = getRebalanceActivityMenu(constants);
    MenuCell<GlusterTaskSupport> removeBricksMenuCell = getRemoveBrickActivityMenu(constants);
    List<HasCell<GlusterTaskSupport, ?>> list = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    list.add(new VolumeActivityStatusColumn<GlusterTaskSupport>());
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivitySeperatorCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(rebalanceMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(removeBricksMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    List<HasCell<GlusterTaskSupport, ?>> compositeList = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeTaskWaitingCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivityCompositeCell<GlusterTaskSupport>(list)) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    getTable().addColumn(new VolumeActivityColumn<GlusterVolumeEntity>(new VolumeActivityCompositeCell<GlusterTaskSupport>(compositeList) {

        @Override
        protected boolean isVisible(GlusterTaskSupport value) {
            return !(value == null || value.getAsyncTask() == null);
        }
    }), constants.activitiesOnVolume(), // $NON-NLS-1$
    "100px");
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.newVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.removeVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.rebalanceVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartRebalanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.optimizeForVirtStore()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getOptimizeForVirtStoreCommand();
        }
    });
}
#end_block

#method_before
private MenuCell<GlusterTaskSupport> getRebalanceActivityMenu(ApplicationConstants constants) {
    MenuCell<GlusterTaskSupport> menuCell = new MenuCell<GlusterTaskSupport>() {

        @Override
        protected boolean isVisible(GlusterTaskSupport value) {
            return value.getAsyncTask() != null && value.getAsyncTask().getType() == GlusterTaskType.REBALANCE;
        }
    };
    menuCell.addMenuItem(constants.statusRebalance(), getMainModel().getStatusRebalanceCommand());
    menuCell.addMenuItem(constants.stopRebalance(), getMainModel().getStopRebalanceCommand());
    return menuCell;
}
#method_after
private MenuCell<GlusterTaskSupport> getRebalanceActivityMenu(ApplicationConstants constants) {
    MenuCell<GlusterTaskSupport> menuCell = new MenuCell<GlusterTaskSupport>() {

        @Override
        protected boolean isVisible(GlusterTaskSupport value) {
            return value.getAsyncTask() != null && value.getAsyncTask().getType() == GlusterTaskType.REBALANCE;
        }
    };
    menuCell.addMenuItem(new WebAdminButtonDefinition<GlusterTaskSupport>(constants.statusRebalance()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStatusRebalanceCommand();
        }
    });
    menuCell.addMenuItem(new WebAdminButtonDefinition<GlusterTaskSupport>(constants.stopRebalance()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopRebalanceCommand();
        }
    });
    return menuCell;
}
#end_block

#method_before
private MenuCell<GlusterTaskSupport> getRemoveBrickActivityMenu(ApplicationConstants constants) {
    MenuCell<GlusterTaskSupport> menuCell = new MenuCell<GlusterTaskSupport>() {

        @Override
        protected boolean isVisible(GlusterTaskSupport value) {
            return value.getAsyncTask() != null && value.getAsyncTask().getType() == GlusterTaskType.REMOVE_BRICK;
        }
    };
    menuCell.addMenuItem(constants.removeBricksStatus(), getMainModel().getBrickListModel().getStatusRemoveBricksCommand());
    menuCell.addMenuItem(constants.removeBricksStop(), getMainModel().getBrickListModel().getStopRemoveBricksCommand());
    menuCell.addMenuItem(constants.removeBricksCommit(), getMainModel().getBrickListModel().getCommitRemoveBricksCommand());
    menuCell.addMenuItem(constants.retainBricks(), getMainModel().getBrickListModel().getRetainBricksCommand());
    return menuCell;
}
#method_after
private MenuCell<GlusterTaskSupport> getRemoveBrickActivityMenu(ApplicationConstants constants) {
    MenuCell<GlusterTaskSupport> menuCell = new MenuCell<GlusterTaskSupport>() {

        @Override
        protected boolean isVisible(GlusterTaskSupport value) {
            return value.getAsyncTask() != null && value.getAsyncTask().getType() == GlusterTaskType.REMOVE_BRICK;
        }
    };
    menuCell.addMenuItem(new WebAdminButtonDefinition<GlusterTaskSupport>(constants.removeBricksStatus()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getBrickListModel().getStatusRemoveBricksCommand();
        }
    });
    menuCell.addMenuItem(new WebAdminButtonDefinition<GlusterTaskSupport>(constants.removeBricksStop()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getBrickListModel().getStopRemoveBricksCommand();
        }
    });
    menuCell.addMenuItem(new WebAdminButtonDefinition<GlusterTaskSupport>(constants.removeBricksCommit()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getBrickListModel().getCommitRemoveBricksCommand();
        }
    });
    menuCell.addMenuItem(new WebAdminButtonDefinition<GlusterTaskSupport>(constants.retainBricks()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getBrickListModel().getRetainBricksCommand();
        }
    });
    return menuCell;
}
#end_block

#method_before
public boolean load() {
    // $NON-NLS-1$
    final String propertiesFileName = filePath + "/" + BRANDING_PROPERTIES_NAME;
    available = false;
    try (FileInputStream propertiesFile = new FileInputStream(propertiesFileName)) {
        brandingProperties.load(propertiesFile);
        available = supportedBrandingVersion == getVersion(brandingProperties);
        if (!available) {
            log.warn(// $NON-NLS-1$
            "Unable to load branding theme, mismatched version: " + getVersion(brandingProperties) + " wanted version: " + // $NON-NLS-1$
            supportedBrandingVersion);
        }
    } catch (IOException e) {
        // Unable to load properties file, disable theme.
        log.warn(// $NON-NLS-1$
        "Unable to load properties file for " + // $NON-NLS-1$
        "theme located here:" + propertiesFileName, e);
    }
    return available;
}
#method_after
public boolean load() {
    // $NON-NLS-1$
    final String propertiesFileName = filePath + "/" + BRANDING_PROPERTIES_NAME;
    available = false;
    try (FileInputStream propertiesFile = new FileInputStream(propertiesFileName)) {
        brandingProperties.load(propertiesFile);
        available = supportedBrandingVersion == getVersion(brandingProperties);
        if (!available) {
            log.warn(// $NON-NLS-1$
            "Unable to load branding theme, mismatched version: " + getVersion(brandingProperties) + " wanted version: " + // $NON-NLS-1$
            supportedBrandingVersion);
        } else {
            available = verifyPropertyValues(brandingProperties);
            if (!available) {
                // $NON-NLS-1$
                log.warn("Unable to load branding theme, property value verification failed");
            }
        }
    } catch (IOException e) {
        // Unable to load properties file, disable theme.
        log.warn(// $NON-NLS-1$
        "Unable to load properties file for " + // $NON-NLS-1$
        "theme located here:" + propertiesFileName, e);
    }
    return available;
}
#end_block

#method_before
@Override
public StatisticsResource getStatisticsResource() {
    QueryIdResolver<Guid> resolver = new QueryIdResolver<Guid>(VdcQueryType.GetDiskByDiskId, GetDiskByDiskIdParameters.class);
    DiskStatisticalQuery query = new DiskStatisticalQuery(resolver, newModel(id));
    return inject(new BackendStatisticsResource<Disk, org.ovirt.engine.core.common.businessentities.Disk>(entityType, guid, query));
}
#method_after
@Override
public StatisticsResource getStatisticsResource() {
    QueryIdResolver<Guid> resolver = new QueryIdResolver<Guid>(VdcQueryType.GetDiskByDiskId, IdQueryParameters.class);
    DiskStatisticalQuery query = new DiskStatisticalQuery(resolver, newModel(id));
    return inject(new BackendStatisticsResource<Disk, org.ovirt.engine.core.common.businessentities.Disk>(entityType, guid, query));
}
#end_block

#method_before
@Override
public Disk get() {
    return performGet(VdcQueryType.GetDiskByDiskId, new GetDiskByDiskIdParameters(guid));
}
#method_after
@Override
public Disk get() {
    return performGet(VdcQueryType.GetDiskByDiskId, new IdQueryParameters(guid));
}
#end_block

#method_before
@Test
public void testGet() {
    setUriInfo(setUpBasicUriExpectations());
    setUpEntityQueryExpectations(VdcQueryType.GetDiskByDiskId, GetDiskByDiskIdParameters.class, new String[] { "DiskId" }, new Object[] { DISK_ID }, getEntity(1));
    control.replay();
    Disk disk = resource.get();
    verifyModelSpecific(disk, 1);
    verifyLinks(disk);
}
#method_after
@Test
public void testGet() {
    setUriInfo(setUpBasicUriExpectations());
    setUpEntityQueryExpectations(VdcQueryType.GetDiskByDiskId, IdQueryParameters.class, new String[] { "Id" }, new Object[] { DISK_ID }, getEntity(1));
    control.replay();
    Disk disk = resource.get();
    verifyModelSpecific(disk, 1);
    verifyLinks(disk);
}
#end_block

#method_before
@Test
public void testMoveById() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetDiskByDiskId, GetDiskByDiskIdParameters.class, new String[] { "DiskId" }, new Object[] { DISK_ID }, getEntity(1));
    setUriInfo(setUpActionExpectations(VdcActionType.MoveDisks, MoveDisksParameters.class, new String[] { "ParametersList" }, new Object[] { Collections.singletonList(new MoveDiskParameters(GUIDS[1], Guid.Empty, GUIDS[3])) }));
    Response response = ((BackendDiskResource) resource).move(setUpParams(false));
    verifyActionResponse(response, "disks/" + DISK_ID, false);
}
#method_after
@Test
public void testMoveById() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetDiskByDiskId, IdQueryParameters.class, new String[] { "Id" }, new Object[] { DISK_ID }, getEntity(1));
    setUriInfo(setUpActionExpectations(VdcActionType.MoveDisks, MoveDisksParameters.class, new String[] { "ParametersList" }, new Object[] { Collections.singletonList(new MoveDiskParameters(GUIDS[1], Guid.Empty, GUIDS[3])) }, true, true, null, null, true));
    verifyActionResponse(resource.move(setUpParams(false)), "disks/" + DISK_ID, false);
}
#end_block

#method_before
@Test
public void testCopyById() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetDiskByDiskId, GetDiskByDiskIdParameters.class, new String[] { "DiskId" }, new Object[] { DISK_ID }, getEntity(1));
    setUriInfo(setUpActionExpectations(VdcActionType.MoveOrCopyDisk, MoveOrCopyImageGroupParameters.class, new String[] { "ImageId", "SourceDomainId", "StorageDomainId", "Operation" }, new Object[] { GUIDS[1], Guid.Empty, GUIDS[3], ImageOperation.Copy }));
    Response response = (((BackendDiskResource) resource).copy(setUpParams(false)));
    verifyActionResponse(response, "disks/" + DISK_ID, false);
}
#method_after
@Test
public void testCopyById() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetDiskByDiskId, IdQueryParameters.class, new String[] { "Id" }, new Object[] { DISK_ID }, getEntity(1));
    setUriInfo(setUpActionExpectations(VdcActionType.MoveOrCopyDisk, MoveOrCopyImageGroupParameters.class, new String[] { "ImageId", "SourceDomainId", "StorageDomainId", "Operation" }, new Object[] { GUIDS[1], Guid.Empty, GUIDS[3], ImageOperation.Copy }, true, true, null, null, true));
    verifyActionResponse(resource.copy(setUpParams(false)), "disks/" + DISK_ID, false);
}
#end_block

#method_before
@Override
protected org.ovirt.engine.core.common.businessentities.Disk getEntity(int index) {
    return setUpEntityExpectations(control.createMock(DiskImage.class), index);
}
#method_after
@Override
protected org.ovirt.engine.core.common.businessentities.Disk getEntity(int index) {
    DiskImage entity = new DiskImage();
    entity.setId(GUIDS[index]);
    entity.setImageId(GUIDS[1]);
    entity.setvolumeFormat(VolumeFormat.RAW);
    entity.setDiskInterface(DiskInterface.VirtIO);
    entity.setImageStatus(ImageStatus.OK);
    entity.setVolumeType(VolumeType.Sparse);
    entity.setBoot(false);
    entity.setShareable(false);
    entity.setPropagateErrors(PropagateErrors.On);
    return setUpStatisticalEntityExpectations(entity);
}
#end_block

#method_before
@Override
public ValidationResult validate(ConfigKey key, String value) {
    if (getTimeZoneType().getTimeZoneList().containsKey(value)) {
        return new ValidationResult(true);
    }
    return new ValidationResult(false, value + " is not a valid " + getHelpNoteType());
}
#method_after
@Override
public ValidationResult validate(ConfigKey key, String value) {
    if (getTimeZoneType().getTimeZoneList().containsKey(value)) {
        return new ValidationResult(true);
    }
    return new ValidationResult(false, String.format("%s is not a valid %s. %s", value, getHelpNoteType(), getExample()));
}
#end_block

#method_before
private void noIllegalStatusMessage() {
    assertFalse(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString()));
}
#method_after
private void noIllegalStatusMessage() {
    assertFalse(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2.toString()));
}
#end_block

#method_before
private void hasIllegalStatusMessage() {
    assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString()));
}
#method_after
private void hasIllegalStatusMessage() {
    assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2.toString()));
}
#end_block

#method_before
protected boolean checkStorageDomainStatusNotEqual(StorageDomainStatus status) {
    boolean returnValue = false;
    if (getStorageDomain() != null && getStorageDomain().getStatus() != null) {
        returnValue = (getStorageDomain().getStatus() != status);
        if (!returnValue) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2.toString());
            addCanDoActionMessage(String.format("$status %1$s", getStorageDomain().getStatus()));
        }
    }
    return returnValue;
}
#method_after
protected boolean checkStorageDomainStatusNotEqual(StorageDomainStatus status) {
    boolean returnValue = false;
    if (getStorageDomainStatus() != null) {
        returnValue = (getStorageDomainStatus() != status);
        if (!returnValue) {
            addStorageDomainStatusIllegalMessage();
        }
    }
    return returnValue;
}
#end_block

#method_before
protected StorageDomainStatus getStorageDomainStatus() {
    StorageDomainStatus status = null;
    if (getStorageDomain() != null) {
        status = getStorageDomain().getStatus();
    }
    return status;
}
#method_after
private StorageDomainStatus getStorageDomainStatus() {
    StorageDomainStatus status = null;
    if (getStorageDomain() != null) {
        status = getStorageDomain().getStatus();
    }
    return status;
}
#end_block

#method_before
private void addStorageDomainStatusIllegalMessage() {
    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL);
}
#method_after
protected void addStorageDomainStatusIllegalMessage() {
    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2);
    addCanDoActionMessage(String.format("$status %1$s", getStorageDomainStatus()));
}
#end_block

#method_before
@Override
public void visitToken(DetailAST classDef) {
    if (!isClass(classDef) || !shouldCheckClass(classDef)) {
        return;
    }
    final DetailAST objBlock = classDef.findFirstToken(TokenTypes.OBJBLOCK);
    DetailAST child = objBlock.getFirstChild();
    boolean hasNoArgCtor = false;
    boolean hasExplicitCtor = false;
    while (child != null) {
        if (child.getType() == TokenTypes.CTOR_DEF) {
            hasExplicitCtor = true;
            DetailAST ctorParams = child.findFirstToken(TokenTypes.PARAMETERS);
            if (ctorParams.getChildCount() == 0) {
                hasNoArgCtor = true;
                break;
            }
        }
        child = child.getNextSibling();
    }
    if (!hasNoArgCtor && hasExplicitCtor) {
        log(classDef.getLineNo(), classDef.getColumnNo(), "Class must have a no-argument constructor (with any access modifier)," + " i.e. either explicit or default constructor without arguments.");
    }
}
#method_after
@Override
public void visitToken(DetailAST classDef) {
    if (!run) {
        return;
    }
    DetailAST objBlock = classDef.findFirstToken(TokenTypes.OBJBLOCK);
    DetailAST child = objBlock.getFirstChild();
    boolean hasExplicitCtor = false;
    while (child != null) {
        if (child.getType() == TokenTypes.CTOR_DEF) {
            hasExplicitCtor = true;
            DetailAST ctorParams = child.findFirstToken(TokenTypes.PARAMETERS);
            if (ctorParams.getChildCount() == 0) {
                // Found no-argument constructor
                return;
            }
        }
        child = child.getNextSibling();
    }
    if (hasExplicitCtor) {
        DetailAST classIdent = classDef.findFirstToken(TokenTypes.LITERAL_CLASS).getNextSibling();
        log(classIdent.getLineNo(), classIdent.getColumnNo(), "Class {0} must have a no-argument constructor (with any access modifier)", classIdent.getText());
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!isVmExist() || !acquireLockInternal()) {
        return false;
    }
    if (getParameters().getDiskInfo().isShareable() && getStorageDomain().getStorageType() == StorageType.GLUSTERFS) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SHAREABLE_DISKS_NOT_SUPPORTED_ON_GLUSTER_DOMAIN);
    }
    VM vm = getVm();
    if (vm != null) {
        if (!canRunActionOnNonManagedVm()) {
            return false;
        }
        updateDisksFromDb();
        // if user sent drive check that its not in use
        if (!isDiskCanBeAddedToVm(getParameters().getDiskInfo(), vm) || !isDiskPassPciAndIdeLimit(getParameters().getDiskInfo())) {
            return false;
        }
    }
    if (DiskStorageType.IMAGE == getParameters().getDiskInfo().getDiskStorageType()) {
        return checkIfImageDiskCanBeAdded(vm);
    }
    if (DiskStorageType.LUN == getParameters().getDiskInfo().getDiskStorageType()) {
        return checkIfLunDiskCanBeAdded();
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (!isVmExist() || !acquireLockInternal()) {
        return false;
    }
    VM vm = getVm();
    if (vm != null) {
        if (!canRunActionOnNonManagedVm()) {
            return false;
        }
        updateDisksFromDb();
        // if user sent drive check that its not in use
        if (!isDiskCanBeAddedToVm(getParameters().getDiskInfo(), vm) || !isDiskPassPciAndIdeLimit(getParameters().getDiskInfo())) {
            return false;
        }
    }
    if (DiskStorageType.IMAGE == getParameters().getDiskInfo().getDiskStorageType()) {
        return checkIfImageDiskCanBeAdded(vm);
    }
    if (DiskStorageType.LUN == getParameters().getDiskInfo().getDiskStorageType()) {
        return checkIfLunDiskCanBeAdded();
    }
    return true;
}
#end_block

#method_before
private boolean checkIfImageDiskCanBeAdded(VM vm) {
    boolean returnValue;
    DiskValidator diskValidator = getDiskValidator(getParameters().getDiskInfo());
    // vm agnostic checks
    returnValue = validate(new StorageDomainValidator(getStorageDomain()).isDomainExistAndActive()) && checkImageConfiguration() && hasFreeSpace(getStorageDomain()) && checkExceedingMaxBlockDiskSize() && canAddShareableDisk() && validate(diskValidator.isVirtIoScsiValid(vm));
    if (returnValue && vm != null) {
        // Note this is done according to the VM's spId.
        StoragePool sp = getStoragePool();
        returnValue = validate(new StoragePoolValidator(sp).isUp()) && isStoragePoolMatching(vm) && isVmNotLocked() && isVmNotInPreviewSnapshot();
    }
    return returnValue;
}
#method_after
private boolean checkIfImageDiskCanBeAdded(VM vm) {
    boolean returnValue;
    DiskValidator diskValidator = getDiskValidator(getParameters().getDiskInfo());
    // vm agnostic checks
    returnValue = validate(new StorageDomainValidator(getStorageDomain()).isDomainExistAndActive()) && !isShareableDiskOnGlusterDomain() && checkImageConfiguration() && hasFreeSpace(getStorageDomain()) && checkExceedingMaxBlockDiskSize() && canAddShareableDisk() && validate(diskValidator.isVirtIoScsiValid(vm));
    if (returnValue && vm != null) {
        // Note this is done according to the VM's spId.
        StoragePool sp = getStoragePool();
        returnValue = validate(new StoragePoolValidator(sp).isUp()) && isStoragePoolMatching(vm) && isVmNotLocked() && isVmNotInPreviewSnapshot();
    }
    return returnValue;
}
#end_block

#method_before
private boolean validateCanUpdateShareable() {
    if (DiskStorageType.LUN == getOldDisk().getDiskStorageType()) {
        return true;
    }
    // Check if VM is not during snapshot.
    if (!isVmNotInPreviewSnapshot()) {
        return false;
    }
    if (isUpdatedToShareable(getOldDisk(), getNewDisk())) {
        StorageDomain storageDomain = getStorageDomainDAO().get(((DiskImage) getNewDisk()).getStorageIds().get(0));
        if (storageDomain.getStorageType() == StorageType.GLUSTERFS) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SHAREABLE_DISKS_NOT_SUPPORTED_ON_GLUSTER_DOMAIN);
        }
        List<DiskImage> diskImageList = getDiskImageDao().getAllSnapshotsForImageGroup(getOldDisk().getId());
        // disk and all the other images are the snapshots.
        if ((diskImageList.size() > 1) || !Guid.Empty.equals(((DiskImage) getOldDisk()).getImageTemplateId())) {
            return failCanDoAction(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_FOR_DISK);
        }
        if (!isVersionSupportedForShareable(getOldDisk(), getStoragePoolDAO().get(getVm().getStoragePoolId()).getcompatibility_version().getValue())) {
            return failCanDoAction(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
        }
        if (!isVolumeFormatSupportedForShareable(((DiskImage) getNewDisk()).getVolumeFormat())) {
            return failCanDoAction(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_BY_VOLUME_FORMAT);
        }
    } else if (isUpdatedToNonShareable(getOldDisk(), getNewDisk())) {
        if (vmsDiskOrSnapshotAttachedTo.size() > 1) {
            return failCanDoAction(VdcBllMessages.DISK_IS_ALREADY_SHARED_BETWEEN_VMS);
        }
    }
    return true;
}
#method_after
private boolean validateCanUpdateShareable() {
    if (DiskStorageType.LUN == getOldDisk().getDiskStorageType()) {
        return true;
    }
    // Check if VM is not during snapshot.
    if (!isVmNotInPreviewSnapshot()) {
        return false;
    }
    if (isUpdatedToShareable(getOldDisk(), getNewDisk())) {
        StorageDomainStatic sds = getStorageDomainStaticDAO().get(((DiskImage) getNewDisk()).getStorageIds().get(0));
        if (sds.getStorageType() == StorageType.GLUSTERFS) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SHAREABLE_DISKS_NOT_SUPPORTED_ON_GLUSTER_DOMAIN);
        }
        List<DiskImage> diskImageList = getDiskImageDao().getAllSnapshotsForImageGroup(getOldDisk().getId());
        // disk and all the other images are the snapshots.
        if ((diskImageList.size() > 1) || !Guid.Empty.equals(((DiskImage) getOldDisk()).getImageTemplateId())) {
            return failCanDoAction(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_FOR_DISK);
        }
        if (!isVersionSupportedForShareable(getOldDisk(), getStoragePoolDAO().get(getVm().getStoragePoolId()).getcompatibility_version().getValue())) {
            return failCanDoAction(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
        }
        if (!isVolumeFormatSupportedForShareable(((DiskImage) getNewDisk()).getVolumeFormat())) {
            return failCanDoAction(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_BY_VOLUME_FORMAT);
        }
    } else if (isUpdatedToNonShareable(getOldDisk(), getNewDisk())) {
        if (vmsDiskOrSnapshotAttachedTo.size() > 1) {
            return failCanDoAction(VdcBllMessages.DISK_IS_ALREADY_SHARED_BETWEEN_VMS);
        }
    }
    return true;
}
#end_block

#method_before
@Test
public void canDoActionFailedShareableDiskVolumeFormatUnsupported() throws Exception {
    UpdateVmDiskParameters parameters = createParameters();
    DiskImage disk = createShareableDisk(VolumeFormat.COW);
    StorageDomain storage = addNewStorageDomainToDisk(disk, StorageType.NFS);
    parameters.setDiskInfo(disk);
    when(diskDao.get(diskImageGuid)).thenReturn(createDiskImage());
    when(storageDomainDao.get(storage.getId())).thenReturn(storage);
    initializeCommand(parameters);
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_BY_VOLUME_FORMAT.toString()));
}
#method_after
@Test
public void canDoActionFailedShareableDiskVolumeFormatUnsupported() throws Exception {
    UpdateVmDiskParameters parameters = createParameters();
    DiskImage disk = createShareableDisk(VolumeFormat.COW);
    StorageDomain storage = addNewStorageDomainToDisk(disk, StorageType.NFS);
    parameters.setDiskInfo(disk);
    when(diskDao.get(diskImageGuid)).thenReturn(createDiskImage());
    when(storageDomainStaticDao.get(storage.getId())).thenReturn(storage.getStorageStaticData());
    initializeCommand(parameters);
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_BY_VOLUME_FORMAT.toString()));
}
#end_block

#method_before
@Test
public void canDoActionFailedShareableDiskOnGlusterDomain() throws Exception {
    UpdateVmDiskParameters parameters = createParameters();
    DiskImage disk = createShareableDisk(VolumeFormat.RAW);
    StorageDomain storage = addNewStorageDomainToDisk(disk, StorageType.GLUSTERFS);
    parameters.setDiskInfo(disk);
    when(diskDao.get(diskImageGuid)).thenReturn(createDiskImage());
    when(storageDomainDao.get(storage.getId())).thenReturn(storage);
    initializeCommand(parameters);
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_SHAREABLE_DISKS_NOT_SUPPORTED_ON_GLUSTER_DOMAIN.toString()));
}
#method_after
@Test
public void canDoActionFailedShareableDiskOnGlusterDomain() throws Exception {
    UpdateVmDiskParameters parameters = createParameters();
    DiskImage disk = createShareableDisk(VolumeFormat.RAW);
    StorageDomain storage = addNewStorageDomainToDisk(disk, StorageType.GLUSTERFS);
    parameters.setDiskInfo(disk);
    when(diskDao.get(diskImageGuid)).thenReturn(createDiskImage());
    when(storageDomainStaticDao.get(storage.getId())).thenReturn(storage.getStorageStaticData());
    initializeCommand(parameters);
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_SHAREABLE_DISKS_NOT_SUPPORTED_ON_GLUSTER_DOMAIN.toString()));
}
#end_block

#method_before
@Test
public void nullifiedSnapshotOnUpdateDiskToShareable() {
    UpdateVmDiskParameters parameters = createParameters();
    DiskImage disk = createShareableDisk(VolumeFormat.RAW);
    parameters.setDiskInfo(disk);
    StorageDomain storage = addNewStorageDomainToDisk(disk, StorageType.NFS);
    parameters.setDiskInfo(disk);
    DiskImage oldDisk = createDiskImage();
    oldDisk.setVmSnapshotId(Guid.newGuid());
    when(diskDao.get(diskImageGuid)).thenReturn(oldDisk);
    when(storageDomainDao.get(storage.getId())).thenReturn(storage);
    initializeCommand(parameters);
    assertTrue(command.canDoAction());
    command.executeVmCommand();
    assertTrue(oldDisk.getVmSnapshotId() == null);
}
#method_after
@Test
public void nullifiedSnapshotOnUpdateDiskToShareable() {
    UpdateVmDiskParameters parameters = createParameters();
    DiskImage disk = createShareableDisk(VolumeFormat.RAW);
    parameters.setDiskInfo(disk);
    StorageDomain storage = addNewStorageDomainToDisk(disk, StorageType.NFS);
    parameters.setDiskInfo(disk);
    DiskImage oldDisk = createDiskImage();
    oldDisk.setVmSnapshotId(Guid.newGuid());
    when(diskDao.get(diskImageGuid)).thenReturn(oldDisk);
    when(storageDomainStaticDao.get(storage.getId())).thenReturn(storage.getStorageStaticData());
    initializeCommand(parameters);
    assertTrue(command.canDoAction());
    command.executeVmCommand();
    assertTrue(oldDisk.getVmSnapshotId() == null);
}
#end_block

#method_before
protected void initializeCommand(UpdateVmDiskParameters params, List<VM> vms) {
    // Done before creating the spy to have correct values during the ctor run
    mockCtorRelatedDaoCalls(vms);
    command = spy(new UpdateVmDiskCommand<UpdateVmDiskParameters>(params) {

        // Overridden here and not during spying, since it's called in the constructor
        @SuppressWarnings("synthetic-access")
        @Override
        protected DiskDao getDiskDao() {
            return diskDao;
        }

        @Override
        public VmDAO getVmDAO() {
            return vmDAO;
        }
    });
    doReturn(true).when(command).acquireLockInternal();
    doReturn(snapshotDao).when(command).getSnapshotDao();
    doReturn(diskImageDao).when(command).getDiskImageDao();
    doReturn(storagePoolDao).when(command).getStoragePoolDAO();
    doReturn(storageDomainDao).when(command).getStorageDomainDAO();
    doReturn(vmStaticDAO).when(command).getVmStaticDAO();
    doReturn(baseDiskDao).when(command).getBaseDiskDao();
    doReturn(imageDao).when(command).getImageDao();
    doReturn(vmDeviceDAO).when(command).getVmDeviceDao();
    doReturn(vmDAO).when(command).getVmDAO();
    doReturn(diskDao).when(command).getDiskDao();
    doNothing().when(command).reloadDisks();
    doNothing().when(command).updateBootOrder();
    doNothing().when(vmStaticDAO).incrementDbGeneration(any(Guid.class));
    ejbRule.mockResource(ContainerManagedResourceType.TRANSACTION_MANAGER, new DummyTransactionManager());
    SnapshotsValidator snapshotsValidator = mock(SnapshotsValidator.class);
    doReturn(snapshotsValidator).when(command).getSnapshotsValidator();
    doReturn(ValidationResult.VALID).when(snapshotsValidator).vmNotDuringSnapshot(any(Guid.class));
    doReturn(ValidationResult.VALID).when(snapshotsValidator).vmNotInPreview(any(Guid.class));
    mockVds();
    mockVmsStoragePoolInfo(vms);
    mockToUpdateDiskVm(vms);
}
#method_after
protected void initializeCommand(UpdateVmDiskParameters params, List<VM> vms) {
    // Done before creating the spy to have correct values during the ctor run
    mockCtorRelatedDaoCalls(vms);
    command = spy(new UpdateVmDiskCommand<UpdateVmDiskParameters>(params) {

        // Overridden here and not during spying, since it's called in the constructor
        @SuppressWarnings("synthetic-access")
        @Override
        protected DiskDao getDiskDao() {
            return diskDao;
        }

        @Override
        public VmDAO getVmDAO() {
            return vmDAO;
        }
    });
    doReturn(true).when(command).acquireLockInternal();
    doReturn(snapshotDao).when(command).getSnapshotDao();
    doReturn(diskImageDao).when(command).getDiskImageDao();
    doReturn(storagePoolDao).when(command).getStoragePoolDAO();
    doReturn(storageDomainStaticDao).when(command).getStorageDomainStaticDAO();
    doReturn(vmStaticDAO).when(command).getVmStaticDAO();
    doReturn(baseDiskDao).when(command).getBaseDiskDao();
    doReturn(imageDao).when(command).getImageDao();
    doReturn(vmDeviceDAO).when(command).getVmDeviceDao();
    doReturn(vmDAO).when(command).getVmDAO();
    doReturn(diskDao).when(command).getDiskDao();
    doNothing().when(command).reloadDisks();
    doNothing().when(command).updateBootOrder();
    doNothing().when(vmStaticDAO).incrementDbGeneration(any(Guid.class));
    ejbRule.mockResource(ContainerManagedResourceType.TRANSACTION_MANAGER, new DummyTransactionManager());
    SnapshotsValidator snapshotsValidator = mock(SnapshotsValidator.class);
    doReturn(snapshotsValidator).when(command).getSnapshotsValidator();
    doReturn(ValidationResult.VALID).when(snapshotsValidator).vmNotDuringSnapshot(any(Guid.class));
    doReturn(ValidationResult.VALID).when(snapshotsValidator).vmNotInPreview(any(Guid.class));
    mockVds();
    mockVmsStoragePoolInfo(vms);
    mockToUpdateDiskVm(vms);
}
#end_block

#method_before
@Override
public Response activate(Action action) {
    validateParameters(action, "bricks");
    validateBrickNames(action);
    GlusterVolumeEntity volume = getEntity(GlusterVolumeEntity.class, VdcQueryType.GetGlusterVolumeById, new IdQueryParameters(asGuid(getVolumeId())), "");
    if (volume.getAsyncTask() != null && volume.getAsyncTask().getType() == GlusterTaskType.REMOVE_BRICK && volume.getAsyncTask().getStatus() == JobExecutionStatus.FINISHED) {
        return stopMigrate(action);
    } else {
        Fault fault = new Fault();
        fault.setReason(localize(Messages.INVALID_ENUM_DETAIL));
        throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(fault).build());
    }
}
#method_after
@Override
public Response activate(Action action) {
    validateParameters(action, "bricks");
    validateBrickNames(action);
    GlusterVolumeEntity volume = getEntity(GlusterVolumeEntity.class, VdcQueryType.GetGlusterVolumeById, new IdQueryParameters(asGuid(getVolumeId())), "");
    if (volume.getAsyncTask() != null && volume.getAsyncTask().getType() == GlusterTaskType.REMOVE_BRICK && volume.getAsyncTask().getStatus() == JobExecutionStatus.FINISHED) {
        return stopMigrate(action);
    } else {
        Fault fault = new Fault();
        fault.setReason(localize(Messages.CANNOT_ACTIVATE_UNLESS_MIGRATION_COMPLETED));
        throw new WebApplicationException(Response.status(Response.Status.CONFLICT).entity(fault).build());
    }
}
#end_block

#method_before
private void initFailedQueriesEventSubscribers() {
    String emailRecipients = prop.getProperty(NotificationProperties.FAILED_QUERIES_NOTIFICATION_RECIPIENTS, true);
    if (StringUtils.isEmpty(emailRecipients)) {
        return;
    }
    List<EventAuditLogSubscriber> failedQueriesEventSubscribers = new LinkedList<>();
    for (String email : emailRecipients.split(",")) {
        EventAuditLogSubscriber eals = new EventAuditLogSubscriber();
        eals.setevent_type(1);
        eals.setevent_up_name("DATABASE_UNREACHABLE");
        eals.setmethod_id(EventNotificationMethods.EMAIL.getValue());
        eals.setmethod_address(StringUtils.strip(email));
        eals.setmessage("Failed to query for notifications. Database Connection refused.");
        eals.setseverity(AuditLogSeverity.ERROR.getValue());
        failedQueriesEventSubscribers.add(eals);
    }
    this.failedQueriesEventSubscribers = failedQueriesEventSubscribers;
}
#method_after
private void initFailedQueriesEventSubscribers() {
    String emailRecipients = prop.getProperty(NotificationProperties.FAILED_QUERIES_NOTIFICATION_RECIPIENTS, true);
    if (StringUtils.isEmpty(emailRecipients)) {
        return;
    }
    List<EventAuditLogSubscriber> failedQueriesEventSubscribers = new LinkedList<>();
    for (String email : emailRecipients.split(",")) {
        EventAuditLogSubscriber eals = new EventAuditLogSubscriber();
        eals.setevent_type(MessageHelper.MessageType.alertMessage.getEventType());
        eals.setevent_up_name("DATABASE_UNREACHABLE");
        eals.setmethod_id(EventNotificationMethods.EMAIL.getValue());
        eals.setmethod_address(StringUtils.strip(email));
        eals.setmessage("Failed to query for notifications. Database Connection refused.");
        eals.setseverity(AuditLogSeverity.ERROR.getValue());
        failedQueriesEventSubscribers.add(eals);
    }
    this.failedQueriesEventSubscribers = failedQueriesEventSubscribers;
}
#end_block

#method_before
@Test
public void testRemoveNotFound() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, StoragePoolQueryParametersBase.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, new ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>());
    control.replay();
    try {
        collection.remove(GUIDS[0].toString());
        fail("expected WebApplicationException");
    } catch (WebApplicationException wae) {
        verifyNotFoundException(wae);
    }
}
#method_after
@Test
public void testRemoveNotFound() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, StorageDomainAndPoolQueryParameters.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, new ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>());
    control.replay();
    try {
        collection.remove(GUIDS[0].toString());
        fail("expected WebApplicationException");
    } catch (WebApplicationException wae) {
        verifyNotFoundException(wae);
    }
}
#end_block

#method_before
@Test
public void testRemoveNonExistant() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, StoragePoolQueryParametersBase.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, new LinkedList<org.ovirt.engine.core.common.businessentities.network.Network>(), null);
    control.replay();
    try {
        collection.remove(NON_EXISTANT_GUID.toString());
        fail("expected WebApplicationException");
    } catch (WebApplicationException wae) {
        assertNotNull(wae.getResponse());
        assertEquals(404, wae.getResponse().getStatus());
    }
}
#method_after
@Test
public void testRemoveNonExistant() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, StorageDomainAndPoolQueryParameters.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, new LinkedList<org.ovirt.engine.core.common.businessentities.network.Network>(), null);
    control.replay();
    try {
        collection.remove(NON_EXISTANT_GUID.toString());
        fail("expected WebApplicationException");
    } catch (WebApplicationException wae) {
        assertNotNull(wae.getResponse());
        assertEquals(404, wae.getResponse().getStatus());
    }
}
#end_block

#method_before
@Test
public void testAddNetwork() throws Exception {
    setUriInfo(setUpBasicUriExpectations());
    setUpCreationExpectations(VdcActionType.AddNetwork, AddNetworkStoragePoolParameters.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, true, true, // GUIDS[0],
    null, VdcQueryType.GetNetworksByStoragePoolId, StoragePoolQueryParametersBase.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, asList(getEntity(0)));
    Network model = getModel(0);
    model.setDataCenter(new DataCenter());
    model.getDataCenter().setId(DATA_CENTER_ID.toString());
    Response response = collection.add(model);
    assertEquals(201, response.getStatus());
    assertTrue(response.getEntity() instanceof Network);
    verifyModel((Network) response.getEntity(), 0);
}
#method_after
@Test
public void testAddNetwork() throws Exception {
    setUriInfo(setUpBasicUriExpectations());
    setUpCreationExpectations(VdcActionType.AddNetwork, AddNetworkStoragePoolParameters.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, true, true, // GUIDS[0],
    null, VdcQueryType.GetNetworksByStoragePoolId, StorageDomainAndPoolQueryParameters.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, asList(getEntity(0)));
    Network model = getModel(0);
    model.setDataCenter(new DataCenter());
    model.getDataCenter().setId(DATA_CENTER_ID.toString());
    Response response = collection.add(model);
    assertEquals(201, response.getStatus());
    assertTrue(response.getEntity() instanceof Network);
    verifyModel((Network) response.getEntity(), 0);
}
#end_block

#method_before
@Override
protected void setUpQueryExpectations(String query, Object failure) throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, StoragePoolQueryParametersBase.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, getEntityList(), failure);
    control.replay();
}
#method_after
@Override
protected void setUpQueryExpectations(String query, Object failure) throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, StorageDomainAndPoolQueryParameters.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, getEntityList(), failure);
    control.replay();
}
#end_block

#method_before
@Override
protected void setUpEntityQueryExpectations(int times, Object failure) throws Exception {
    while (times-- > 0) {
        setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, StoragePoolQueryParametersBase.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, getEntityList(), failure);
    }
}
#method_after
@Override
protected void setUpEntityQueryExpectations(int times, Object failure) throws Exception {
    while (times-- > 0) {
        setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, StorageDomainAndPoolQueryParameters.class, new String[] { "StoragePoolId" }, new Object[] { DATA_CENTER_ID }, getEntityList(), failure);
    }
}
#end_block

#method_before
protected storage_pool setUpStoragePool(Guid id) {
    storage_pool pool = control.createMock(storage_pool.class);
    expect(pool.getId()).andReturn(id).anyTimes();
    return pool;
}
#method_after
protected StoragePool setUpStoragePool(Guid id) {
    StoragePool pool = control.createMock(StoragePool.class);
    expect(pool.getId()).andReturn(id).anyTimes();
    return pool;
}
#end_block

#method_before
@Override
public DataCenter get() {
    return performGet(VdcQueryType.GetStoragePoolById, new StoragePoolQueryParametersBase(guid));
}
#method_after
@Override
public DataCenter get() {
    return performGet(VdcQueryType.GetStoragePoolById, new IdQueryParameters(guid));
}
#end_block

#method_before
@Override
public DataCenter update(DataCenter incoming) {
    validateEnums(DataCenter.class, incoming);
    return performUpdate(incoming, new QueryIdResolver<Guid>(VdcQueryType.GetStoragePoolById, StoragePoolQueryParametersBase.class), VdcActionType.UpdateStoragePool, new UpdateParametersProvider());
}
#method_after
@Override
public DataCenter update(DataCenter incoming) {
    validateEnums(DataCenter.class, incoming);
    return performUpdate(incoming, new QueryIdResolver<Guid>(VdcQueryType.GetStoragePoolById, IdQueryParameters.class), VdcActionType.UpdateStoragePool, new UpdateParametersProvider());
}
#end_block

#method_before
@Override
protected DataCenter doPopulate(DataCenter model, storage_pool entity) {
    return parent.doPopulate(model, entity);
}
#method_after
@Override
protected DataCenter doPopulate(DataCenter model, StoragePool entity) {
    return parent.doPopulate(model, entity);
}
#end_block

#method_before
@Override
protected DataCenter deprecatedPopulate(DataCenter model, storage_pool entity) {
    return parent.deprecatedPopulate(model, entity);
}
#method_after
@Override
protected DataCenter deprecatedPopulate(DataCenter model, StoragePool entity) {
    return parent.deprecatedPopulate(model, entity);
}
#end_block

#method_before
@Override
public VdcActionParametersBase getParameters(DataCenter incoming, storage_pool entity) {
    return new StoragePoolManagementParameter(map(incoming, entity));
}
#method_after
@Override
public VdcActionParametersBase getParameters(DataCenter incoming, StoragePool entity) {
    return new StoragePoolManagementParameter(map(incoming, entity));
}
#end_block

#method_before
@SuppressWarnings("unchecked")
public static storage_pool getStoragePool(Cluster cluster, AbstractBackendResource parent) {
    storage_pool pool = null;
    if (cluster.getDataCenter().isSetId()) {
        String id = cluster.getDataCenter().getId();
        pool = (storage_pool) parent.getEntity(storage_pool.class, VdcQueryType.GetStoragePoolById, new StoragePoolQueryParametersBase(new Guid(id)), "Datacenter: id=" + id);
    } else {
        pool = (storage_pool) parent.getEntity(storage_pool.class, SearchType.StoragePool, "Datacenter: name=" + cluster.getDataCenter().getName());
        cluster.getDataCenter().setId(pool.getId().toString());
    }
    return pool;
}
#method_after
@SuppressWarnings("unchecked")
public static StoragePool getStoragePool(Cluster cluster, AbstractBackendResource parent) {
    StoragePool pool = null;
    if (cluster.getDataCenter().isSetId()) {
        String id = cluster.getDataCenter().getId();
        pool = parent.getEntity(StoragePool.class, VdcQueryType.GetStoragePoolById, new IdQueryParameters(new Guid(id)), "Datacenter: id=" + id);
    } else {
        pool = parent.getEntity(StoragePool.class, SearchType.StoragePool, "Datacenter: name=" + cluster.getDataCenter().getName());
        cluster.getDataCenter().setId(pool.getId().toString());
    }
    return pool;
}
#end_block

#method_before
@SuppressWarnings("unchecked")
public static List<storage_pool> getStoragePools(Guid storageDomainId, AbstractBackendResource parent) {
    return (List<storage_pool>) parent.getEntity(List.class, VdcQueryType.GetStoragePoolsByStorageDomainId, new StorageDomainQueryParametersBase(storageDomainId), "Datacenters", true);
}
#method_after
@SuppressWarnings("unchecked")
public static List<StoragePool> getStoragePools(Guid storageDomainId, AbstractBackendResource parent) {
    return parent.getEntity(List.class, VdcQueryType.GetStoragePoolsByStorageDomainId, new IdQueryParameters(storageDomainId), "Datacenters", true);
}
#end_block

#method_before
@Override
public Response add(DataCenter dataCenter) {
    validateParameters(dataCenter, "name", "storageType");
    validateEnums(DataCenter.class, dataCenter);
    validateEnum(StorageType.class, dataCenter.getStorageType().toUpperCase());
    storage_pool entity = map(dataCenter);
    return performCreate(VdcActionType.AddEmptyStoragePool, new StoragePoolManagementParameter(entity), new QueryIdResolver<Guid>(VdcQueryType.GetStoragePoolById, StoragePoolQueryParametersBase.class));
}
#method_after
@Override
public Response add(DataCenter dataCenter) {
    validateParameters(dataCenter, "name", "storageType");
    validateEnums(DataCenter.class, dataCenter);
    validateEnum(StorageType.class, dataCenter.getStorageType().toUpperCase());
    StoragePool entity = map(dataCenter);
    return performCreate(VdcActionType.AddEmptyStoragePool, new StoragePoolManagementParameter(entity), new QueryIdResolver<Guid>(VdcQueryType.GetStoragePoolById, IdQueryParameters.class));
}
#end_block

#method_before
private DataCenters mapCollection(List<storage_pool> entities) {
    DataCenters collection = new DataCenters();
    for (storage_pool entity : entities) {
        collection.getDataCenters().add(addLinks(populate(map(entity), entity)));
    }
    return collection;
}
#method_after
private DataCenters mapCollection(List<StoragePool> entities) {
    DataCenters collection = new DataCenters();
    for (StoragePool entity : entities) {
        collection.getDataCenters().add(addLinks(populate(map(entity), entity)));
    }
    return collection;
}
#end_block

#method_before
@Override
protected DataCenter doPopulate(DataCenter model, storage_pool entity) {
    return model;
}
#method_after
@Override
protected DataCenter doPopulate(DataCenter model, StoragePool entity) {
    return model;
}
#end_block

#method_before
@Override
protected DataCenter deprecatedPopulate(DataCenter model, storage_pool entity) {
    GetAvailableStoragePoolVersionsParameters parameters = new GetAvailableStoragePoolVersionsParameters();
    parameters.setStoragePoolId(new Guid(model.getId()));
    model.setSupportedVersions(getMapper(List.class, SupportedVersions.class).map(getEntity(ArrayList.class, VdcQueryType.GetAvailableStoragePoolVersions, parameters, model.getId()), null));
    return model;
}
#method_after
@Override
protected DataCenter deprecatedPopulate(DataCenter model, StoragePool entity) {
    IdQueryParameters parameters = new IdQueryParameters(new Guid(model.getId()));
    model.setSupportedVersions(getMapper(List.class, SupportedVersions.class).map(getEntity(ArrayList.class, VdcQueryType.GetAvailableStoragePoolVersions, parameters, model.getId()), null));
    return model;
}
#end_block

#method_before
@Override
public Networks list() {
    Networks networks = mapCollection(getBackendCollection(VdcQueryType.GetNetworksByStoragePoolId, getQueryParameters()));
    for (Network network : networks.getNetworks()) {
        network.setDisplay(null);
    }
    return networks;
}
#method_after
@Override
public Networks list() {
    Networks networks = mapCollection(getNetworks());
    for (Network network : networks.getNetworks()) {
        network.setDisplay(null);
    }
    return networks;
}
#end_block

#method_before
@Override
protected VdcQueryParametersBase getQueryParameters() {
    return new StoragePoolQueryParametersBase(dataCenterId);
}
#method_after
@Override
protected VdcQueryParametersBase getQueryParameters() {
    return new StorageDomainAndPoolQueryParameters(Guid.Empty, dataCenterId);
}
#end_block

#method_before
@Override
protected AddNetworkStoragePoolParameters getActionParameters(Network network, org.ovirt.engine.core.common.businessentities.network.Network entity) {
    if (namedDataCenter(network)) {
        entity.setDataCenterId(getDataCenterId(network));
    }
    return new AddNetworkStoragePoolParameters(entity.getDataCenterId().getValue(), entity);
}
#method_after
@Override
protected AddNetworkStoragePoolParameters getActionParameters(Network network, org.ovirt.engine.core.common.businessentities.network.Network entity) {
    if (namedDataCenter(network)) {
        entity.setDataCenterId(getDataCenterId(network));
    }
    AddNetworkStoragePoolParameters parameters = new AddNetworkStoragePoolParameters(entity.getDataCenterId(), entity);
    if (network != null && network.isSetProfileRequired()) {
        parameters.setVnicProfileRequired(network.isProfileRequired());
    }
    return parameters;
}
#end_block

#method_before
protected Guid getDataCenterId(Network network) {
    return getEntity(storage_pool.class, SearchType.StoragePool, "Datacenter: name=" + network.getDataCenter().getName()).getId();
}
#method_after
protected Guid getDataCenterId(Network network) {
    return getEntity(StoragePool.class, SearchType.StoragePool, "Datacenter: name=" + network.getDataCenter().getName()).getId();
}
#end_block

#method_before
private void newVolume() {
    if (getWindow() != null) {
        return;
    }
    VolumeModel volumeModel = new VolumeModel();
    volumeModel.setTitle(ConstantsManager.getInstance().getConstants().newVolumeTitle());
    setWindow(volumeModel);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            VolumeListModel volumeListModel = (VolumeListModel) model;
            VolumeModel innerVolumeModel = (VolumeModel) volumeListModel.getWindow();
            ArrayList<StoragePool> dataCenters = (ArrayList<StoragePool>) result;
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (volumeListModel.getSystemTreeSelectedItem() != null) {
                switch(volumeListModel.getSystemTreeSelectedItem().getType()) {
                    case Volumes:
                    case Cluster:
                    case Cluster_Gluster:
                        VDSGroup cluster = (VDSGroup) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        for (StoragePool dc : dataCenters) {
                            if (dc.getId().equals(cluster.getStoragePoolId())) {
                                innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { dc })));
                                innerVolumeModel.getDataCenter().setSelectedItem(dc);
                                break;
                            }
                        }
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        innerVolumeModel.getCluster().setItems(Arrays.asList(cluster));
                        innerVolumeModel.getCluster().setSelectedItem(cluster);
                        innerVolumeModel.getCluster().setIsChangable(false);
                        innerVolumeModel.getCluster().setChangeProhibitionReason(constants.cannotChangeClusterInTreeContext());
                        break;
                    case Clusters:
                    case DataCenter:
                        StoragePool selectDataCenter = (StoragePool) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { selectDataCenter })));
                        innerVolumeModel.getDataCenter().setSelectedItem(selectDataCenter);
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        break;
                    default:
                        innerVolumeModel.getDataCenter().setItems(dataCenters);
                        innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
                        break;
                }
            } else {
                innerVolumeModel.getDataCenter().setItems(dataCenters);
                innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
            }
            // $NON-NLS-1$
            UICommand command = new UICommand("onCreateVolume", volumeListModel);
            command.setTitle(ConstantsManager.getInstance().getConstants().ok());
            command.setIsDefault(true);
            innerVolumeModel.getCommands().add(command);
            // $NON-NLS-1$
            command = new UICommand("Cancel", volumeListModel);
            command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            command.setIsCancel(true);
            innerVolumeModel.getCommands().add(command);
        }
    };
    AsyncDataProvider.getDataCenterByClusterServiceList(_asyncQuery, false, true);
}
#method_after
private void newVolume() {
    if (getWindow() != null) {
        return;
    }
    VolumeModel volumeModel = new VolumeModel();
    // $NON-NLS-1$
    volumeModel.setHashName("new_volume");
    volumeModel.setTitle(ConstantsManager.getInstance().getConstants().newVolumeTitle());
    setWindow(volumeModel);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            VolumeListModel volumeListModel = (VolumeListModel) model;
            VolumeModel innerVolumeModel = (VolumeModel) volumeListModel.getWindow();
            ArrayList<StoragePool> dataCenters = (ArrayList<StoragePool>) result;
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (volumeListModel.getSystemTreeSelectedItem() != null) {
                switch(volumeListModel.getSystemTreeSelectedItem().getType()) {
                    case Volumes:
                    case Cluster:
                    case Cluster_Gluster:
                        VDSGroup cluster = (VDSGroup) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        for (StoragePool dc : dataCenters) {
                            if (dc.getId().equals(cluster.getStoragePoolId())) {
                                innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { dc })));
                                innerVolumeModel.getDataCenter().setSelectedItem(dc);
                                break;
                            }
                        }
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        innerVolumeModel.getCluster().setItems(Arrays.asList(cluster));
                        innerVolumeModel.getCluster().setSelectedItem(cluster);
                        innerVolumeModel.getCluster().setIsChangable(false);
                        innerVolumeModel.getCluster().setChangeProhibitionReason(constants.cannotChangeClusterInTreeContext());
                        break;
                    case Clusters:
                    case DataCenter:
                        StoragePool selectDataCenter = (StoragePool) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { selectDataCenter })));
                        innerVolumeModel.getDataCenter().setSelectedItem(selectDataCenter);
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        break;
                    default:
                        innerVolumeModel.getDataCenter().setItems(dataCenters);
                        innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
                        break;
                }
            } else {
                innerVolumeModel.getDataCenter().setItems(dataCenters);
                innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
            }
            // $NON-NLS-1$
            UICommand command = new UICommand("onCreateVolume", volumeListModel);
            command.setTitle(ConstantsManager.getInstance().getConstants().ok());
            command.setIsDefault(true);
            innerVolumeModel.getCommands().add(command);
            // $NON-NLS-1$
            command = new UICommand("Cancel", volumeListModel);
            command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            command.setIsCancel(true);
            innerVolumeModel.getCommands().add(command);
        }
    };
    AsyncDataProvider.getDataCenterByClusterServiceList(_asyncQuery, false, true);
}
#end_block

#method_before
private void stopRebalance() {
    if (getSelectedItems() == null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceTitle());
    // $NON-NLS-1$
    model.setHashName("volume_rebalance_stop");
    model.setMessage(ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceMsg());
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterVolumeEntity item : Linq.<GlusterVolumeEntity>cast(getSelectedItems())) {
        list.add(item.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("onStopRebalance", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#method_after
private void stopRebalance() {
    if (getSelectedItem() == null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getSelectedItem();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceTitle());
    // $NON-NLS-1$
    model.setHashName("volume_rebalance_stop");
    model.setMessage(ConstantsManager.getInstance().getMessages().confirmStopVolumeRebalance(volumeEntity.getName()));
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("onStopRebalance", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#end_block

#method_before
private void showRebalanceStatus() {
    if (getSelectedItem() == null) {
        return;
    }
    final ConfirmationModel cModel = new ConfirmationModel();
    final GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getSelectedItem();
    setConfirmWindow(cModel);
    cModel.setTitle(ConstantsManager.getInstance().getConstants().rebalanceStatusTitle());
    // $NON-NLS-1$
    cModel.startProgress(ConstantsManager.getInstance().getConstants().rebalanceStatusFetchMessage());
    // $NON-NLS-1$
    final UICommand rebalanceStatusOk = new UICommand("rebalanceNotStarted", VolumeListModel.this);
    rebalanceStatusOk.setTitle(ConstantsManager.getInstance().getConstants().ok());
    rebalanceStatusOk.setIsCancel(true);
    cModel.getCommands().add(rebalanceStatusOk);
    AsyncDataProvider.getGlusterRebalanceStatus(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            cModel.stopProgress();
            VdcQueryReturnValue vdcValue = (VdcQueryReturnValue) returnValue;
            GlusterVolumeTaskStatusEntity rebalanceStatusEntity = vdcValue.getReturnValue();
            if ((rebalanceStatusEntity == null) || !(vdcValue.getSucceeded())) {
                cModel.setMessage(ConstantsManager.getInstance().getMessages().rebalanceStatusFailed(volumeEntity.getName()));
            } else {
                setConfirmWindow(null);
                if (getWindow() == null) {
                    VolumeRebalanceStatusModel rebalanceStatusModel = new VolumeRebalanceStatusModel(volumeEntity);
                    rebalanceStatusModel.setTitle(ConstantsManager.getInstance().getConstants().volumeRebalanceStatusTitle());
                    setWindow(rebalanceStatusModel);
                    rebalanceStatusModel.getVolume().setEntity(volumeEntity.getName());
                    rebalanceStatusModel.getCluster().setEntity(volumeEntity.getVdsGroupName());
                    // $NON-NLS-1$
                    UICommand stopRebalanceFromStatus = new UICommand("stop_rebalance_from_status", VolumeListModel.this);
                    stopRebalanceFromStatus.setTitle(ConstantsManager.getInstance().getConstants().stopRebalance());
                    rebalanceStatusModel.getCommands().add(stopRebalanceFromStatus);
                    rebalanceStatusModel.setStopReblanceFromStatus(stopRebalanceFromStatus);
                    // $NON-NLS-1$
                    UICommand cancelRebalance = new UICommand("CancelRebalanceStatus", VolumeListModel.this);
                    cancelRebalance.setTitle(ConstantsManager.getInstance().getConstants().close());
                    cancelRebalance.setIsCancel(true);
                    rebalanceStatusModel.getCommands().add(cancelRebalance);
                    rebalanceStatusModel.showStatus(rebalanceStatusEntity);
                } else {
                    VolumeRebalanceStatusModel statusModel = (VolumeRebalanceStatusModel) getWindow();
                    statusModel.getCommands().get(0).setIsExecutionAllowed(false);
                    statusModel.showStatus(rebalanceStatusEntity);
                }
            }
        }
    }), volumeEntity.getClusterId(), volumeEntity.getId());
}
#method_after
private void showRebalanceStatus() {
    if (getSelectedItem() == null) {
        return;
    }
    final ConfirmationModel cModel = new ConfirmationModel();
    final GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getSelectedItem();
    setConfirmWindow(cModel);
    cModel.setTitle(ConstantsManager.getInstance().getConstants().rebalanceStatusTitle());
    // $NON-NLS-1$
    cModel.startProgress(ConstantsManager.getInstance().getConstants().rebalanceStatusFetchMessage());
    // $NON-NLS-1$
    cModel.setHashName("volume_rebalance_status");
    // $NON-NLS-1$
    final UICommand rebalanceStatusOk = new UICommand("rebalanceNotStarted", VolumeListModel.this);
    rebalanceStatusOk.setTitle(ConstantsManager.getInstance().getConstants().ok());
    rebalanceStatusOk.setIsCancel(true);
    cModel.getCommands().add(rebalanceStatusOk);
    AsyncDataProvider.getGlusterRebalanceStatus(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            cModel.stopProgress();
            VdcQueryReturnValue vdcValue = (VdcQueryReturnValue) returnValue;
            GlusterVolumeTaskStatusEntity rebalanceStatusEntity = vdcValue.getReturnValue();
            if ((rebalanceStatusEntity == null) || !(vdcValue.getSucceeded())) {
                cModel.setMessage(ConstantsManager.getInstance().getMessages().rebalanceStatusFailed(volumeEntity.getName()));
            } else {
                setConfirmWindow(null);
                if (getWindow() == null) {
                    VolumeRebalanceStatusModel rebalanceStatusModel = new VolumeRebalanceStatusModel(volumeEntity);
                    rebalanceStatusModel.setTitle(ConstantsManager.getInstance().getConstants().volumeRebalanceStatusTitle());
                    setWindow(rebalanceStatusModel);
                    rebalanceStatusModel.getVolume().setEntity(volumeEntity.getName());
                    rebalanceStatusModel.getCluster().setEntity(volumeEntity.getVdsGroupName());
                    // $NON-NLS-1$
                    UICommand stopRebalanceFromStatus = new UICommand("stop_rebalance_from_status", VolumeListModel.this);
                    stopRebalanceFromStatus.setTitle(ConstantsManager.getInstance().getConstants().stopRebalance());
                    rebalanceStatusModel.getCommands().add(stopRebalanceFromStatus);
                    rebalanceStatusModel.setStopReblanceFromStatus(stopRebalanceFromStatus);
                    // $NON-NLS-1$
                    UICommand cancelRebalance = new UICommand("CancelRebalanceStatus", VolumeListModel.this);
                    cancelRebalance.setTitle(ConstantsManager.getInstance().getConstants().close());
                    cancelRebalance.setIsCancel(true);
                    rebalanceStatusModel.getCommands().add(cancelRebalance);
                    rebalanceStatusModel.showStatus(rebalanceStatusEntity);
                } else {
                    VolumeRebalanceStatusModel statusModel = (VolumeRebalanceStatusModel) getWindow();
                    statusModel.getCommands().get(0).setIsExecutionAllowed(false);
                    statusModel.showStatus(rebalanceStatusEntity);
                }
            }
        }
    }), volumeEntity.getClusterId(), volumeEntity.getId());
}
#end_block

#method_before
public void edit() {
    final VmPool pool = (VmPool) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    final PoolListModel poolListModel = this;
    Frontend.RunQuery(VdcQueryType.GetVmDataByPoolId, new IdQueryParameters(pool.getVmPoolId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object modell, Object result) {
            final VM vm = (VM) ((VdcQueryReturnValue) result).getReturnValue();
            final ExistingPoolModelBehavior behavior = new ExistingPoolModelBehavior(vm);
            behavior.getPoolModelBehaviorInitializedEvent().addListener(new IEventListener() {

                @Override
                public void eventRaised(Event ev, Object sender, EventArgs args) {
                    final PoolModel model = behavior.getModel();
                    for (Object item : model.getPoolType().getItems()) {
                        EntityModel a = (EntityModel) item;
                        if (a.getEntity() == pool.getVmPoolType()) {
                            model.getPoolType().setSelectedItem(a);
                            break;
                        }
                    }
                    String cdImage = null;
                    if (vm != null) {
                        model.getDataCenterWithClustersList().setSelectedItem(null);
                        model.getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(model.getDataCenterWithClustersList().getItems(), new Linq.DataCenterWithClusterPredicate(vm.getStoragePoolId(), vm.getVdsGroupId())));
                        model.getTemplate().setIsChangable(false);
                        cdImage = vm.getIsoPath();
                        model.getVmType().setSelectedItem(vm.getVmType());
                    } else {
                        model.getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(Linq.<StoragePool>cast(model.getDataCenterWithClustersList().getItems())));
                    }
                    model.getDataCenterWithClustersList().setIsChangable(vm == null);
                    boolean hasCd = !StringHelper.isNullOrEmpty(cdImage);
                    model.getCdImage().setIsChangable(hasCd);
                    model.getCdAttached().setEntity(hasCd);
                    if (hasCd) {
                        model.getCdImage().setSelectedItem(cdImage);
                    }
                    model.getProvisioning().setIsChangable(false);
                    model.getStorageDomain().setIsChangable(false);
                    VmBasedWidgetSwitchModeCommand switchModeCommand = new VmBasedWidgetSwitchModeCommand();
                    switchModeCommand.init(model);
                    model.getCommands().add(switchModeCommand);
                    // $NON-NLS-1$
                    UICommand command = new UICommand("OnSave", poolListModel);
                    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
                    command.setIsDefault(true);
                    model.getCommands().add(command);
                    // $NON-NLS-1$
                    command = new UICommand("Cancel", poolListModel);
                    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                    command.setIsCancel(true);
                    model.getCommands().add(command);
                }
            });
            PoolModel model = new PoolModel(behavior);
            model.setCustomPropertiesKeysList(getCustomPropertiesKeysList());
            model.startProgress("");
            setWindow(model);
            model.setTitle(ConstantsManager.getInstance().getConstants().editPoolTitle());
            model.initialize(getSystemTreeSelectedItem());
            model.getName().setEntity(pool.getName());
            model.getDescription().setEntity(pool.getVmPoolDescription());
            model.getComment().setEntity(pool.getComment());
            model.getAssignedVms().setEntity(pool.getAssignedVmsCount());
            model.getPrestartedVms().setEntity(pool.getPrestartedVms());
            // $NON-NLS-1$
            model.setPrestartedVmsHint("0-" + pool.getAssignedVmsCount());
            model.getMaxAssignedVmsPerUser().setEntity(pool.getMaxAssignedVmsPerUser());
        }
    }));
}
#method_after
public void edit() {
    final VmPool pool = (VmPool) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    final PoolListModel poolListModel = this;
    Frontend.RunQuery(VdcQueryType.GetVmDataByPoolId, new IdQueryParameters(pool.getVmPoolId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object modell, Object result) {
            final VM vm = (VM) ((VdcQueryReturnValue) result).getReturnValue();
            final ExistingPoolModelBehavior behavior = new ExistingPoolModelBehavior(vm);
            behavior.getPoolModelBehaviorInitializedEvent().addListener(new IEventListener() {

                @Override
                public void eventRaised(Event ev, Object sender, EventArgs args) {
                    final PoolModel model = behavior.getModel();
                    for (EntityModel<VmPoolType> item : model.getPoolType().getItems()) {
                        if (item.getEntity() == pool.getVmPoolType()) {
                            model.getPoolType().setSelectedItem(item);
                            break;
                        }
                    }
                    String cdImage = null;
                    if (vm != null) {
                        model.getDataCenterWithClustersList().setSelectedItem(null);
                        model.getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(model.getDataCenterWithClustersList().getItems(), new Linq.DataCenterWithClusterPredicate(vm.getStoragePoolId(), vm.getVdsGroupId())));
                        model.getTemplate().setIsChangable(false);
                        cdImage = vm.getIsoPath();
                        model.getVmType().setSelectedItem(vm.getVmType());
                    } else {
                        model.getDataCenterWithClustersList().setSelectedItem(Linq.firstOrDefault(model.getDataCenterWithClustersList().getItems()));
                    }
                    model.getDataCenterWithClustersList().setIsChangable(vm == null);
                    boolean hasCd = !StringHelper.isNullOrEmpty(cdImage);
                    model.getCdImage().setIsChangable(hasCd);
                    model.getCdAttached().setEntity(hasCd);
                    if (hasCd) {
                        model.getCdImage().setSelectedItem(cdImage);
                    }
                    model.getProvisioning().setIsChangable(false);
                    model.getStorageDomain().setIsChangable(false);
                    VmBasedWidgetSwitchModeCommand switchModeCommand = new VmBasedWidgetSwitchModeCommand();
                    switchModeCommand.init(model);
                    model.getCommands().add(switchModeCommand);
                    // $NON-NLS-1$
                    UICommand command = new UICommand("OnSave", poolListModel);
                    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
                    command.setIsDefault(true);
                    model.getCommands().add(command);
                    // $NON-NLS-1$
                    command = new UICommand("Cancel", poolListModel);
                    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                    command.setIsCancel(true);
                    model.getCommands().add(command);
                }
            });
            PoolModel model = new PoolModel(behavior);
            model.setCustomPropertiesKeysList(getCustomPropertiesKeysList());
            model.startProgress("");
            setWindow(model);
            model.setTitle(ConstantsManager.getInstance().getConstants().editPoolTitle());
            model.initialize(getSystemTreeSelectedItem());
            model.getName().setEntity(pool.getName());
            model.getDescription().setEntity(pool.getVmPoolDescription());
            model.getComment().setEntity(pool.getComment());
            model.getAssignedVms().setEntity(pool.getAssignedVmsCount());
            model.getPrestartedVms().setEntity(pool.getPrestartedVms());
            // $NON-NLS-1$
            model.setPrestartedVmsHint("0-" + pool.getAssignedVmsCount());
            model.getMaxAssignedVmsPerUser().setEntity(pool.getMaxAssignedVmsPerUser());
        }
    }));
}
#end_block

#method_before
public void onSave() {
    final PoolModel model = (PoolModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.getIsNew() && getSelectedItem() == null) {
        cancel();
        return;
    }
    if (!model.validate()) {
        return;
    }
    final VmPool pool = model.getIsNew() ? new VmPool() : (VmPool) Cloner.clone(getSelectedItem());
    final String name = (String) model.getName().getEntity();
    // Check name unicitate.
    AsyncDataProvider.isPoolNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            Boolean isUnique = (Boolean) returnValue;
            if ((model.getIsNew() && !isUnique) || (!model.getIsNew() && !isUnique && name.compareToIgnoreCase(pool.getName()) != 0)) {
                model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
                model.getName().setIsValid(false);
                model.setIsGeneralTabValid(false);
                return;
            }
            // Save changes.
            pool.setName((String) model.getName().getEntity());
            pool.setVmPoolDescription((String) model.getDescription().getEntity());
            pool.setVdsGroupId(model.getSelectedCluster().getId());
            pool.setComment((String) model.getComment().getEntity());
            pool.setPrestartedVms(model.getPrestartedVms().asConvertible().integer());
            pool.setMaxAssignedVmsPerUser(model.getMaxAssignedVmsPerUser().asConvertible().integer());
            EntityModel poolTypeSelectedItem = (EntityModel) model.getPoolType().getSelectedItem();
            pool.setVmPoolType((VmPoolType) poolTypeSelectedItem.getEntity());
            Guid default_host;
            VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
            if ((Boolean) model.getIsAutoAssign().getEntity()) {
                default_host = null;
            } else {
                default_host = defaultHost.getId();
            }
            VM vm = new VM();
            vm.setVmtGuid(((VmTemplate) model.getTemplate().getSelectedItem()).getId());
            vm.setName(name);
            vm.setVmOs((Integer) model.getOSType().getSelectedItem());
            vm.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
            vm.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
            vm.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
            vm.setSingleQxlPci((Boolean) model.getIsSingleQxlEnabled().getEntity());
            vm.setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
            "");
            vm.setVmMemSizeMb((Integer) model.getMemSize().getEntity());
            vm.setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
            vm.setVdsGroupId(model.getSelectedCluster().getId());
            vm.setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((TimeZoneModel) model.getTimeZone().getSelectedItem()).getTimeZoneKey() : // $NON-NLS-1$
            "");
            vm.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
            vm.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
            vm.setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
            vm.setStateless(false);
            vm.setDefaultBootSequence(model.getBootSequence());
            vm.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
            "");
            vm.setDedicatedVmForVds(default_host);
            vm.setKernelUrl((String) model.getKernel_path().getEntity());
            vm.setKernelParams((String) model.getKernel_parameters().getEntity());
            vm.setInitrdUrl((String) model.getInitrd_path().getEntity());
            vm.setMigrationSupport((MigrationSupport) (model.getMigrationMode().getSelectedItem()));
            vm.setVncKeyboardLayout((String) model.getVncKeyboardLayout().getSelectedItem());
            EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
            vm.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
            vm.setCustomProperties(model.getCustomPropertySheet().getEntity());
            vm.setVmType((VmType) model.getVmType().getSelectedItem());
            vm.setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
            AddVmPoolWithVmsParameters param = new AddVmPoolWithVmsParameters(pool, vm, model.getNumOfDesktops().asConvertible().integer(), 0);
            param.setStorageDomainId(Guid.Empty);
            param.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
            param.setConsoleEnabled((Boolean) model.getIsConsoleDeviceEnabled().getEntity());
            param.setVirtioScsiEnabled((Boolean) model.getIsVirtioScsiEnabled().getEntity());
            param.setSoundDeviceEnabled((Boolean) model.getIsSoundcardEnabled().getEntity());
            if (model.getQuota().getSelectedItem() != null) {
                vm.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
            }
            model.startProgress(null);
            if (model.getIsNew()) {
                Frontend.RunMultipleAction(VdcActionType.AddVmPoolWithVms, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { param })), new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void executed(FrontendMultipleActionAsyncResult result) {
                        cancel();
                        stopProgress();
                    }
                }, this);
            } else {
                Frontend.RunMultipleAction(VdcActionType.UpdateVmPoolWithVms, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { param })), new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void executed(FrontendMultipleActionAsyncResult result) {
                        cancel();
                        stopProgress();
                    }
                }, this);
            }
        }
    }), name);
}
#method_after
public void onSave() {
    final PoolModel model = (PoolModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.getIsNew() && getSelectedItem() == null) {
        cancel();
        return;
    }
    if (!model.validate()) {
        return;
    }
    final VmPool pool = model.getIsNew() ? new VmPool() : (VmPool) Cloner.clone(getSelectedItem());
    final String name = model.getName().getEntity();
    // Check name unicitate.
    AsyncDataProvider.isPoolNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            Boolean isUnique = (Boolean) returnValue;
            if ((model.getIsNew() && !isUnique) || (!model.getIsNew() && !isUnique && name.compareToIgnoreCase(pool.getName()) != 0)) {
                model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
                model.getName().setIsValid(false);
                model.setIsGeneralTabValid(false);
                return;
            }
            // Save changes.
            pool.setName(model.getName().getEntity());
            pool.setVmPoolDescription(model.getDescription().getEntity());
            pool.setVdsGroupId(model.getSelectedCluster().getId());
            pool.setComment(model.getComment().getEntity());
            pool.setPrestartedVms(model.getPrestartedVms().getEntity());
            pool.setMaxAssignedVmsPerUser(model.getMaxAssignedVmsPerUser().getEntity());
            EntityModel<VmPoolType> poolTypeSelectedItem = model.getPoolType().getSelectedItem();
            pool.setVmPoolType(poolTypeSelectedItem.getEntity());
            Guid default_host;
            VDS defaultHost = model.getDefaultHost().getSelectedItem();
            if (model.getIsAutoAssign().getEntity()) {
                default_host = null;
            } else {
                default_host = defaultHost.getId();
            }
            VM vm = new VM();
            vm.setVmtGuid((model.getTemplate().getSelectedItem()).getId());
            vm.setName(name);
            vm.setVmOs(model.getOSType().getSelectedItem());
            vm.setDeleteProtected(model.getIsDeleteProtected().getEntity());
            vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity());
            vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem());
            vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity());
            vm.setVmDomain(model.getDomain().getIsAvailable() ? model.getDomain().getSelectedItem() : // $NON-NLS-1$
            "");
            vm.setVmMemSizeMb(model.getMemSize().getEntity());
            vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity());
            vm.setVdsGroupId(model.getSelectedCluster().getId());
            vm.setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? model.getTimeZone().getSelectedItem().getTimeZoneKey() : // $NON-NLS-1$
            "");
            vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem());
            vm.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity()) / model.getNumOfSockets().getSelectedItem());
            vm.setUsbPolicy(model.getUsbPolicy().getSelectedItem());
            vm.setStateless(false);
            vm.setDefaultBootSequence(model.getBootSequence());
            vm.setIsoPath(model.getCdImage().getIsChangable() ? model.getCdImage().getSelectedItem() : // $NON-NLS-1$
            "");
            vm.setDedicatedVmForVds(default_host);
            vm.setKernelUrl(model.getKernel_path().getEntity());
            vm.setKernelParams(model.getKernel_parameters().getEntity());
            vm.setInitrdUrl(model.getInitrd_path().getEntity());
            vm.setMigrationSupport(model.getMigrationMode().getSelectedItem());
            vm.setVncKeyboardLayout(model.getVncKeyboardLayout().getSelectedItem());
            EntityModel<DisplayType> displayProtocolSelectedItem = model.getDisplayProtocol().getSelectedItem();
            vm.setDefaultDisplayType(displayProtocolSelectedItem.getEntity());
            vm.setCustomProperties(model.getCustomPropertySheet().getEntity());
            vm.setVmType(model.getVmType().getSelectedItem());
            vm.setAllowConsoleReconnect(model.getAllowConsoleReconnect().getEntity());
            AddVmPoolWithVmsParameters param = new AddVmPoolWithVmsParameters(pool, vm, model.getNumOfDesktops().getEntity(), 0);
            param.setStorageDomainId(Guid.Empty);
            param.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
            param.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity());
            param.setVirtioScsiEnabled(model.getIsVirtioScsiEnabled().getEntity());
            param.setSoundDeviceEnabled(model.getIsSoundcardEnabled().getEntity());
            if (model.getQuota().getSelectedItem() != null) {
                vm.setQuotaId(model.getQuota().getSelectedItem().getId());
            }
            model.startProgress(null);
            if (model.getIsNew()) {
                Frontend.RunMultipleAction(VdcActionType.AddVmPoolWithVms, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { param })), new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void executed(FrontendMultipleActionAsyncResult result) {
                        cancel();
                        stopProgress();
                    }
                }, this);
            } else {
                Frontend.RunMultipleAction(VdcActionType.UpdateVmPoolWithVms, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { param })), new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void executed(FrontendMultipleActionAsyncResult result) {
                        cancel();
                        stopProgress();
                    }
                }, this);
            }
        }
    }), name);
}
#end_block

#method_before
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    if (!model.validate()) {
        return;
    }
    String name = (String) model.getName().getEntity();
    AsyncDataProvider.isTemplateNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            TemplateListModel templateListModel = (TemplateListModel) target;
            boolean isNameUnique = (Boolean) returnValue;
            templateListModel.postNameUniqueCheck(isNameUnique);
        }
    }), name);
}
#method_after
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    if (!model.validate()) {
        return;
    }
    String name = model.getName().getEntity();
    AsyncDataProvider.isTemplateNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            TemplateListModel templateListModel = (TemplateListModel) target;
            boolean isNameUnique = (Boolean) returnValue;
            templateListModel.postNameUniqueCheck(isNameUnique);
        }
    }), name);
}
#end_block

#method_before
public void postNameUniqueCheck(boolean isNameUnique) {
    final UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VmTemplate selectedItem = (VmTemplate) getSelectedItem();
    final VmTemplate template = (VmTemplate) Cloner.clone(selectedItem);
    String name = (String) model.getName().getEntity();
    // Check name unicitate.
    if (!isNameUnique && name.compareToIgnoreCase(template.getName()) != 0) {
        model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
        model.getName().setIsValid(false);
        model.setIsGeneralTabValid(false);
        return;
    }
    // Save changes.
    template.setVmType((VmType) model.getVmType().getSelectedItem());
    template.setName(name);
    template.setOsId((Integer) model.getOSType().getSelectedItem());
    template.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    template.setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    template.setDescription((String) model.getDescription().getEntity());
    template.setComment((String) model.getComment().getEntity());
    // $NON-NLS-1$
    template.setDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : "");
    template.setMemSizeMb((Integer) model.getMemSize().getEntity());
    template.setMinAllocatedMem(((Integer) model.getMinAllocatedMemory().getEntity()));
    template.setVdsGroupId((model.getSelectedCluster()).getId());
    template.setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((TimeZoneModel) model.getTimeZone().getSelectedItem()).getTimeZoneKey() : // $NON-NLS-1$
    "");
    template.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    template.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    template.setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    template.setStateless((Boolean) model.getIsStateless().getEntity());
    template.setRunAndPause((Boolean) model.getIsRunAndPause().getEntity());
    template.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    template.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    template.setDefaultBootSequence(model.getBootSequence());
    // $NON-NLS-1$
    template.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : "");
    template.setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    template.setKernelUrl((String) model.getKernel_path().getEntity());
    template.setKernelParams((String) model.getKernel_parameters().getEntity());
    template.setInitrdUrl((String) model.getInitrd_path().getEntity());
    template.setVncKeyboardLayout((String) model.getVncKeyboardLayout().getSelectedItem());
    template.setCreatedByUserId(selectedItem.getCreatedByUserId());
    template.setSingleQxlPci((Boolean) model.getIsSingleQxlEnabled().getEntity());
    if (model.getQuota().getIsAvailable() && model.getQuota().getSelectedItem() != null) {
        template.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    template.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    template.setPriority((Integer) prioritySelectedItem.getEntity());
    // host migration configuration
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        template.setDedicatedVmForVds(null);
    } else {
        template.setDedicatedVmForVds(defaultHost.getId());
    }
    template.setMigrationSupport((MigrationSupport) model.getMigrationMode().getSelectedItem());
    model.startProgress(null);
    UpdateVmTemplateParameters parameters = new UpdateVmTemplateParameters(template);
    parameters.setConsoleEnabled((Boolean) model.getIsConsoleDeviceEnabled().getEntity());
    setVmWatchdogToParams(model, parameters);
    parameters.setSoundDeviceEnabled((Boolean) model.getIsSoundcardEnabled().getEntity());
    Frontend.RunAction(VdcActionType.UpdateVmTemplate, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            TemplateListModel localModel = (TemplateListModel) result.getState();
            localModel.postUpdateVmTemplate(result.getReturnValue());
        }
    }, this);
}
#method_after
public void postNameUniqueCheck(boolean isNameUnique) {
    final UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VmTemplate selectedItem = (VmTemplate) getSelectedItem();
    final VmTemplate template = (VmTemplate) Cloner.clone(selectedItem);
    String name = model.getName().getEntity();
    // Check name unicitate.
    if (!isNameUnique && name.compareToIgnoreCase(template.getName()) != 0) {
        model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
        model.getName().setIsValid(false);
        model.setIsGeneralTabValid(false);
        return;
    }
    // Save changes.
    template.setVmType(model.getVmType().getSelectedItem());
    template.setName(name);
    template.setOsId(model.getOSType().getSelectedItem());
    template.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem());
    template.setAllowConsoleReconnect(model.getAllowConsoleReconnect().getEntity());
    template.setDescription(model.getDescription().getEntity());
    template.setComment(model.getComment().getEntity());
    // $NON-NLS-1$
    template.setDomain(model.getDomain().getIsAvailable() ? model.getDomain().getSelectedItem() : "");
    template.setMemSizeMb(model.getMemSize().getEntity());
    template.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity());
    template.setVdsGroupId((model.getSelectedCluster()).getId());
    template.setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? (model.getTimeZone().getSelectedItem()).getTimeZoneKey() : // $NON-NLS-1$
    "");
    template.setNumOfSockets(model.getNumOfSockets().getSelectedItem());
    template.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity()) / model.getNumOfSockets().getSelectedItem());
    template.setUsbPolicy(model.getUsbPolicy().getSelectedItem());
    template.setStateless(model.getIsStateless().getEntity());
    template.setRunAndPause(model.getIsRunAndPause().getEntity());
    template.setDeleteProtected(model.getIsDeleteProtected().getEntity());
    template.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity());
    template.setDefaultBootSequence(model.getBootSequence());
    // $NON-NLS-1$
    template.setIsoPath(model.getCdImage().getIsChangable() ? model.getCdImage().getSelectedItem() : "");
    template.setAutoStartup(model.getIsHighlyAvailable().getEntity());
    template.setKernelUrl(model.getKernel_path().getEntity());
    template.setKernelParams(model.getKernel_parameters().getEntity());
    template.setInitrdUrl(model.getInitrd_path().getEntity());
    template.setVncKeyboardLayout(model.getVncKeyboardLayout().getSelectedItem());
    template.setCreatedByUserId(selectedItem.getCreatedByUserId());
    template.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity());
    if (model.getQuota().getIsAvailable() && model.getQuota().getSelectedItem() != null) {
        template.setQuotaId(model.getQuota().getSelectedItem().getId());
    }
    EntityModel<DisplayType> displayProtocolSelectedItem = model.getDisplayProtocol().getSelectedItem();
    template.setDefaultDisplayType(displayProtocolSelectedItem.getEntity());
    EntityModel<Integer> prioritySelectedItem = model.getPriority().getSelectedItem();
    template.setPriority(prioritySelectedItem.getEntity());
    // host migration configuration
    VDS defaultHost = model.getDefaultHost().getSelectedItem();
    if (model.getIsAutoAssign().getEntity()) {
        template.setDedicatedVmForVds(null);
    } else {
        template.setDedicatedVmForVds(defaultHost.getId());
    }
    template.setMigrationSupport(model.getMigrationMode().getSelectedItem());
    model.startProgress(null);
    UpdateVmTemplateParameters parameters = new UpdateVmTemplateParameters(template);
    parameters.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity());
    setVmWatchdogToParams(model, parameters);
    parameters.setSoundDeviceEnabled(model.getIsSoundcardEnabled().getEntity());
    Frontend.RunAction(VdcActionType.UpdateVmTemplate, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            TemplateListModel localModel = (TemplateListModel) result.getState();
            localModel.postUpdateVmTemplate(result.getReturnValue());
        }
    }, this);
}
#end_block

#method_before
private void setVmWatchdogToParams(final UnitVmModel model, UpdateVmTemplateParameters updateVmParams) {
    VmWatchdogType wdModel = VmWatchdogType.getByName((String) model.getWatchdogModel().getSelectedItem());
    updateVmParams.setUpdateWatchdog(true);
    if (wdModel != null) {
        VmWatchdog vmWatchdog = new VmWatchdog();
        vmWatchdog.setAction(VmWatchdogAction.getByName((String) model.getWatchdogAction().getSelectedItem()));
        vmWatchdog.setModel(wdModel);
        updateVmParams.setWatchdog(vmWatchdog);
    }
}
#method_after
private void setVmWatchdogToParams(final UnitVmModel model, UpdateVmTemplateParameters updateVmParams) {
    VmWatchdogType wdModel = VmWatchdogType.getByName(model.getWatchdogModel().getSelectedItem());
    updateVmParams.setUpdateWatchdog(true);
    if (wdModel != null) {
        VmWatchdog vmWatchdog = new VmWatchdog();
        vmWatchdog.setAction(VmWatchdogAction.getByName(model.getWatchdogAction().getSelectedItem()));
        vmWatchdog.setModel(wdModel);
        updateVmParams.setWatchdog(vmWatchdog);
    }
}
#end_block

#method_before
protected void updateActionAvailability() {
    VmTemplate item = (VmTemplate) getSelectedItem();
    ArrayList items = (((ArrayList) getSelectedItems()) != null) ? (ArrayList) getSelectedItems() : new ArrayList();
    boolean blankSelected = isBlankTemplateSelected();
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && item != null && item.getStatus() != VmTemplateStatus.Locked);
    if (getEditCommand().getIsExecutionAllowed() && blankSelected) {
        getEditCommand().getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().blankTemplateCannotBeEdited());
        getEditCommand().setIsExecutionAllowed(false);
    }
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VmTemplate.class, VdcActionType.RemoveVmTemplate));
    if (getRemoveCommand().getIsExecutionAllowed() && blankSelected) {
        getRemoveCommand().getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().blankTemplateCannotBeRemoved());
        getRemoveCommand().setIsExecutionAllowed(false);
    }
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VmTemplate.class, VdcActionType.ExportVmTemplate));
    if (getExportCommand().getIsExecutionAllowed() && blankSelected) {
        getExportCommand().getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().blankTemplateCannotBeExported());
        getExportCommand().setIsExecutionAllowed(false);
    }
}
#method_after
protected void updateActionAvailability() {
    VmTemplate item = (VmTemplate) getSelectedItem();
    ArrayList items = ((getSelectedItems()) != null) ? (ArrayList) getSelectedItems() : new ArrayList();
    boolean blankSelected = isBlankTemplateSelected();
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && item != null && item.getStatus() != VmTemplateStatus.Locked);
    if (getEditCommand().getIsExecutionAllowed() && blankSelected) {
        getEditCommand().getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().blankTemplateCannotBeEdited());
        getEditCommand().setIsExecutionAllowed(false);
    }
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VmTemplate.class, VdcActionType.RemoveVmTemplate));
    if (getRemoveCommand().getIsExecutionAllowed() && blankSelected) {
        getRemoveCommand().getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().blankTemplateCannotBeRemoved());
        getRemoveCommand().setIsExecutionAllowed(false);
    }
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VmTemplate.class, VdcActionType.ExportVmTemplate));
    if (getExportCommand().getIsExecutionAllowed() && blankSelected) {
        getExportCommand().getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().blankTemplateCannotBeExported());
        getExportCommand().setIsExecutionAllowed(false);
    }
}
#end_block

#method_before
public void showStatus(GlusterVolumeTaskStatusEntity rebalanceStatusEntity) {
    List<GlusterVolumeTaskStatusForHost> rebalanceSessionsList = rebalanceStatusEntity.getHostwiseStatusDetails();
    List<EntityModel> sessionList = new ArrayList<EntityModel>();
    for (GlusterVolumeTaskStatusForHost hostDetail : rebalanceSessionsList) {
        EntityModel sessionModel = new EntityModel(hostDetail);
        sessionList.add(sessionModel);
    }
    getStartTime().setEntity(rebalanceStatusEntity.getStartTime());
    getStatusTime().setEntity(rebalanceStatusEntity.getStatusTime());
    getRebalanceSessions().setItems(sessionList);
    if (rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.FINISHED) {
        setStatusAvailable(true);
        refresh.cancel();
    } else {
        setStatusAvailable(false);
        if ((rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.ABORTED || rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.FAILED)) {
            refresh.cancel();
            if (rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.ABORTED) {
                getStopTime().setEntity(rebalanceStatusEntity.getStopTime());
                setStopTimeAvailable(true);
            }
        }
    }
    if (GlusterTaskType.REBALANCE == getEntity().getAsyncTask().getType()) {
        getStopReblanceFromStatus().setIsExecutionAllowed(rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.STARTED);
    }
}
#method_after
public void showStatus(GlusterVolumeTaskStatusEntity rebalanceStatusEntity) {
    List<GlusterVolumeTaskStatusForHost> rebalanceSessionsList = rebalanceStatusEntity.getHostwiseStatusDetails();
    List<EntityModel> sessionList = new ArrayList<EntityModel>();
    for (GlusterVolumeTaskStatusForHost hostDetail : rebalanceSessionsList) {
        EntityModel sessionModel = new EntityModel(hostDetail);
        sessionList.add(sessionModel);
    }
    getStartTime().setEntity(rebalanceStatusEntity.getStartTime());
    getStatusTime().setEntity(rebalanceStatusEntity.getStatusTime());
    getRebalanceSessions().setItems(sessionList);
    if (rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.FINISHED) {
        setStatusAvailable(true);
        refresh.cancel();
    } else {
        setStatusAvailable(false);
        if ((rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.ABORTED || rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.FAILED)) {
            refresh.cancel();
            if (rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.ABORTED) {
                getStopTime().setEntity(rebalanceStatusEntity.getStopTime());
                setStopTimeVisible(rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.ABORTED);
            }
        }
    }
    if (GlusterTaskType.REBALANCE == getEntity().getAsyncTask().getType()) {
        getStopReblanceFromStatus().setIsExecutionAllowed(rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.STARTED);
    }
}
#end_block

#method_before
private void localize(final ApplicationConstants constants) {
    startTimeEditor.setLabel(constants.rebalanceStartTime());
    volumeEditor.setLabel(constants.rebalanceVolumeName());
    clusterEditor.setLabel(constants.rebalanceClusterVolume());
    statusTimeEditor.setLabel(constants.rebalanceStatusTime());
}
#method_after
private void localize(final ApplicationConstants constants) {
    startTimeEditor.setLabel(constants.rebalanceStartTime());
    volumeEditor.setLabel(constants.rebalanceVolumeName());
    clusterEditor.setLabel(constants.rebalanceClusterVolume());
    statusTimeEditor.setLabel(constants.rebalanceStatusTime());
    stopTimeEditor.setLabel(constants.rebalanceStopTime());
}
#end_block

#method_before
void initEditors(ApplicationConstants constants) {
    rebalanceHostsTable = new EntityModelCellTable<ListModel>(false, true);
    clusterEditor = new EntityModelLabelEditor();
    statusTimeEditor = getInstanceOfDateEditor();
    startTimeEditor = getInstanceOfDateEditor();
    stopTime = getInstanceOfDateEditor();
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return entity.getHostName();
        }
    }, constants.rebalanceSessionHost());
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return entity.getFilesMoved() + "";
        }
    }, getColumnHeaderForFilesMoved());
    rebalanceHostsTable.addEntityModelColumn(new RebalanceFileSizeColumn<EntityModel>(messages) {

        @Override
        protected Long getRawValue(EntityModel object) {
            return ((GlusterVolumeTaskStatusForHost) (object.getEntity())).getTotalSizeMoved();
        }
    }, constants.rebalanceSize());
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return String.valueOf(entity.getFilesFailed());
        }
    }, constants.rebalanceFailedFileCount());
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return String.valueOf(entity.getFilesSkipped());
        }
    }, constants.rebalanceSkippedFileCount());
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return String.valueOf(entity.getFilesScanned());
        }
    }, constants.rebalanceScannedFileCount());
    rebalanceHostsTable.addEntityModelColumn(new HumanReadableTimeColumn<EntityModel>() {

        @Override
        protected Double getRawValue(EntityModel object) {
            return ((GlusterVolumeTaskStatusForHost) (object.getEntity())).getRunTime();
        }
    }, constants.rebalanceRunTime());
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return entity.getStatus().toString();
        }
    }, constants.rebalanceStatus());
}
#method_after
void initEditors(ApplicationConstants constants) {
    rebalanceHostsTable = new EntityModelCellTable<ListModel>(false, true);
    statusTimeEditor = getInstanceOfDateEditor();
    startTimeEditor = getInstanceOfDateEditor();
    stopTimeEditor = getInstanceOfDateEditor();
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return entity.getHostName();
        }
    }, constants.rebalanceSessionHost());
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return entity.getFilesMoved() + "";
        }
    }, getColumnHeaderForFilesMoved());
    rebalanceHostsTable.addEntityModelColumn(new RebalanceFileSizeColumn<EntityModel>(messages) {

        @Override
        protected Long getRawValue(EntityModel object) {
            return ((GlusterVolumeTaskStatusForHost) (object.getEntity())).getTotalSizeMoved();
        }
    }, constants.rebalanceSize());
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return String.valueOf(entity.getFilesScanned());
        }
    }, constants.rebalanceScannedFileCount());
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return String.valueOf(entity.getFilesFailed());
        }
    }, constants.rebalanceFailedFileCount());
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return String.valueOf(entity.getFilesSkipped());
        }
    }, constants.rebalanceSkippedFileCount());
    rebalanceHostsTable.addEntityModelColumn(new EntityModelTextColumn<GlusterVolumeTaskStatusForHost>() {

        @Override
        protected String getText(GlusterVolumeTaskStatusForHost entity) {
            return entity.getStatus().toString();
        }
    }, constants.rebalanceStatus());
    rebalanceHostsTable.addEntityModelColumn(new HumanReadableTimeColumn<EntityModel>() {

        @Override
        protected Double getRawValue(EntityModel object) {
            return ((GlusterVolumeTaskStatusForHost) (object.getEntity())).getRunTime();
        }
    }, constants.rebalanceRunTime());
}
#end_block

#method_before
@Override
public void edit(final VolumeRebalanceStatusModel object) {
    driver.edit(object);
    rebalanceHostsTable.asEditor().edit(object.getRebalanceSessions());
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            PropertyChangedEventArgs e = (PropertyChangedEventArgs) args;
            if (e.PropertyName.equals("IS_STATUS_APPLICABLE")) {
                // $NON-NLS-1$
                Label completedStatus = new Label();
                completedStatus.setText(constants.rebalanceComplete());
                completedStatus.getElement().getStyle().setPaddingTop(36, Unit.PX);
                completedStatus.getElement().getStyle().setFontSize(14, Unit.PX);
                completedStatus.getElement().getStyle().setFontWeight(FontWeight.BOLD);
                completedStatus.setVisible(object.isStatusAvailable());
                status.add(completedStatus);
            } else if (e.PropertyName.equals("IS_STOP_TIME_APPLICABLE")) {
                // $NON-NLS-1$
                // $NON-NLS-1$//$NON-NLS-2$
                sdPanel.setSize("1000px", "550px");
                // $NON-NLS-1$//$NON-NLS-2$
                sPanel.setSize("981px", "415px");
                vPanel2.remove(clusterEditor);
                vPanel2.remove(statusTimeEditor);
                stopTime.setLabel(constants.rebalanceStopTime());
                stopTime.getElement().getStyle().setPaddingTop(30, Unit.PX);
                vPanel2.add(stopTime);
                status.add(clusterEditor);
                status.add(statusTimeEditor);
            }
        }
    });
}
#method_after
@Override
public void edit(final VolumeRebalanceStatusModel object) {
    driver.edit(object);
    rebalanceHostsTable.asEditor().edit(object.getRebalanceSessions());
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            PropertyChangedEventArgs e = (PropertyChangedEventArgs) args;
            if (e.PropertyName.equals("IS_STATUS_APPLICABLE")) {
                // $NON-NLS-1$
                status.setText(constants.rebalanceComplete());
                status.setVisible(true);
            } else if (e.PropertyName.equals("STOP_TIME_UPDATED")) {
                // $NON-NLS-1$
                stopTimePanel.setVisible(object.isStopTimeVisible());
            }
        }
    });
}
#end_block

#method_before
@Override
public List<Guid> runFilters(List<String> filterNames, List<Guid> hostIDs, Guid vmID, Map<String, String> propertiesMap) {
    try {
        // Do not call the scheduler when there is no operation requested from it
        if (filterNames.isEmpty())
            return hostIDs;
        XmlRpcClient client = new XmlRpcClient();
        client.setConfig(config);
        Object result = client.execute(FILTER, createFilterArgs(filterNames, hostIDs, vmID, propertiesMap));
        return parseFilterResults(result);
    } catch (XmlRpcException e) {
        log.error("Could not communicate with the external scheduler while filtering", e);
        AuditLogableBase loggable = new AuditLogableBase();
        AuditLogDirector.log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY);
        return hostIDs;
    }
}
#method_after
@Override
public List<Guid> runFilters(List<String> filterNames, List<Guid> hostIDs, Guid vmID, Map<String, String> propertiesMap) {
    try {
        // Do not call the scheduler when there is no operation requested from it
        if (filterNames.isEmpty()) {
            return hostIDs;
        }
        XmlRpcClient client = new XmlRpcClient();
        client.setConfig(config);
        Object result = client.execute(FILTER, createFilterArgs(filterNames, hostIDs, vmID, propertiesMap));
        return parseFilterResults(result);
    } catch (XmlRpcException e) {
        log.error("Could not communicate with the external scheduler while filtering", e);
        auditLogFailedToConnect();
        return hostIDs;
    }
}
#end_block

#method_before
@Override
public List<Pair<Guid, Integer>> runScores(List<Pair<String, Integer>> scoreNameAndWeight, List<Guid> hostIDs, Guid vmID, Map<String, String> propertiesMap) {
    try {
        // Do not call the scheduler when there is no operation requested from it
        if (scoreNameAndWeight.isEmpty())
            return null;
        XmlRpcClient client = new XmlRpcClient();
        client.setConfig(config);
        Object result = client.execute(SCORE, createScoreArgs(scoreNameAndWeight, hostIDs, vmID, propertiesMap));
        return parseScoreResults(result);
    } catch (XmlRpcException e) {
        log.error("Could not communicate with the external scheduler while running weight modules", e);
        AuditLogableBase loggable = new AuditLogableBase();
        AuditLogDirector.log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY);
        return null;
    }
}
#method_after
@Override
public List<Pair<Guid, Integer>> runScores(List<Pair<String, Integer>> scoreNameAndWeight, List<Guid> hostIDs, Guid vmID, Map<String, String> propertiesMap) {
    try {
        // Do not call the scheduler when there is no operation requested from it
        if (scoreNameAndWeight.isEmpty()) {
            return null;
        }
        XmlRpcClient client = new XmlRpcClient();
        client.setConfig(config);
        Object result = client.execute(SCORE, createScoreArgs(scoreNameAndWeight, hostIDs, vmID, propertiesMap));
        return parseScoreResults(result);
    } catch (XmlRpcException e) {
        log.error("Could not communicate with the external scheduler while running weight modules", e);
        auditLogFailedToConnect();
        return null;
    }
}
#end_block

#method_before
@Override
public Pair<List<Guid>, Guid> runBalance(String balanceName, List<Guid> hostIDs, Map<String, String> propertiesMap) {
    // TODO Auto-generated method stub
    try {
        XmlRpcClient client = new XmlRpcClient();
        client.setConfig(config);
        Object result = client.execute(BALANCE, createBalanceArgs(balanceName, hostIDs, propertiesMap));
        return parseBalanceResults(result);
    } catch (XmlRpcException e) {
        log.error("Could not communicate with the external scheduler while balancing", e);
        AuditLogableBase loggable = new AuditLogableBase();
        AuditLogDirector.log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY);
        return null;
    }
}
#method_after
@Override
public Pair<List<Guid>, Guid> runBalance(String balanceName, List<Guid> hostIDs, Map<String, String> propertiesMap) {
    // TODO Auto-generated method stub
    try {
        XmlRpcClient client = new XmlRpcClient();
        client.setConfig(config);
        Object result = client.execute(BALANCE, createBalanceArgs(balanceName, hostIDs, propertiesMap));
        return parseBalanceResults(result);
    } catch (XmlRpcException e) {
        log.error("Could not communicate with the external scheduler while balancing", e);
        auditLogFailedToConnect();
        return null;
    }
}
#end_block

#method_before
private Pair<List<Guid>, Guid> parseBalanceResults(Object result) {
    if (!(result instanceof Object[])) {
        log.error("External scheduler error, malformed balance results");
        return null;
    }
    Object[] castedResult = (Object[]) result;
    List<Guid> hostIDs = new LinkedList<Guid>();
    for (Object hostID : (Object[]) castedResult[1]) {
        hostIDs.add(new Guid(hostID.toString()));
    }
    Pair<List<Guid>, Guid> retValue = new Pair<List<Guid>, Guid>();
    retValue.setFirst(hostIDs);
    retValue.setSecond(new Guid(castedResult[0].toString()));
    return retValue;
}
#method_after
private Pair<List<Guid>, Guid> parseBalanceResults(Object result) {
    if (!(result instanceof Object[])) {
        log.error("External scheduler error, malformed balance results");
        return null;
    }
    Object[] castedResult = (Object[]) result;
    List<Guid> hostIDs = new LinkedList<Guid>();
    for (Object hostID : (Object[]) castedResult[1]) {
        hostIDs.add(new Guid(hostID.toString()));
    }
    Pair<List<Guid>, Guid> retValue = new Pair<List<Guid>, Guid>();
    retValue.setFirst(hostIDs);
    if (castedResult[0].toString().isEmpty()) {
        return null;
    } else {
        retValue.setSecond(new Guid(castedResult[0].toString()));
    }
    return retValue;
}
#end_block

#method_before
public void init() {
    log.info("Start initializing " + getClass().getSimpleName());
    List<VDS> allVdsList = DbFacade.getInstance().getVdsDao().getAll();
    HashSet<Guid> nonResponsiveVdss = new HashSet<Guid>();
    for (VDS helper_vds : allVdsList) {
        if (helper_vds.getStatus() == VDSStatus.NonResponsive) {
            nonResponsiveVdss.add(helper_vds.getId());
        }
    }
    // Is there any VM that is not fully Up or fully Down?
    boolean runningVmsInTransition = false;
    // Cleanup all vms dynamic data. This is defensive code on power crash
    List<VM> vms = DbFacade.getInstance().getVmDao().getAll();
    for (VM vm : vms) {
        if (!vm.isNotRunning()) {
            if (vm.getRunOnVds() != null) {
                MultiValueMapUtils.addToMap(vm.getRunOnVds(), vm.getId(), _vdsAndVmsList, new MultiValueMapUtils.HashSetCreator<Guid>());
            }
            if (vm.getRunOnVds() != null && nonResponsiveVdss.contains(vm.getRunOnVds())) {
                SetVmUnknown(vm);
            }
        }
        if (!runningVmsInTransition && vm.isRunning() && vm.getStatus() != VMStatus.Up) {
            runningVmsInTransition = true;
        }
    }
    // (meaning we tried to start a VM and the engine crashed before telling VDSM about it)
    for (VDS _vds : allVdsList) {
        boolean _saveVdsDynamic = false;
        if (_vds.getPendingVcpusCount() != 0 && !runningVmsInTransition) {
            _vds.setPendingVcpusCount(0);
            _saveVdsDynamic = true;
        }
        if (_vds.getPendingVmemSize() != 0 && !runningVmsInTransition) {
            _vds.setPendingVmemSize(0);
            _saveVdsDynamic = true;
        }
        if (_saveVdsDynamic) {
            DbFacade.getInstance().getVdsDynamicDao().update(_vds.getDynamicData());
        }
    }
    // Populate the VDS dictionary
    for (VDS curVds : allVdsList) {
        AddVds(curVds, true);
    }
    IrsBrokerCommand.Init();
    log.info("Finished initializing " + getClass().getSimpleName());
}
#method_after
public void init() {
    log.info("Start initializing " + getClass().getSimpleName());
    List<VDS> allVdsList = DbFacade.getInstance().getVdsDao().getAll();
    HashSet<Guid> nonResponsiveVdss = new HashSet<Guid>();
    for (VDS helper_vds : allVdsList) {
        if (helper_vds.getStatus() == VDSStatus.NonResponsive) {
            nonResponsiveVdss.add(helper_vds.getId());
        }
    }
    // Is there any VM that is not fully Up or fully Down?
    boolean runningVmsInTransition = false;
    // Cleanup all vms dynamic data. This is defensive code on power crash
    List<VM> vms = DbFacade.getInstance().getVmDao().getAll();
    for (VM vm : vms) {
        if (!vm.isNotRunning()) {
            if (vm.getRunOnVds() != null) {
                MultiValueMapUtils.addToMap(vm.getRunOnVds(), vm.getId(), _vdsAndVmsList, new MultiValueMapUtils.HashSetCreator<Guid>());
            }
            if (vm.getRunOnVds() != null && nonResponsiveVdss.contains(vm.getRunOnVds())) {
                SetVmUnknown(vm);
            }
        }
        if (!runningVmsInTransition && vm.isRunning() && vm.getStatus() != VMStatus.Up) {
            runningVmsInTransition = true;
        }
    }
    // Clean pending memory and CPUs if there is no VM in transition on a given Host
    // (meaning we tried to start a VM and the engine crashed before telling VDSM about it)
    List<VdsDynamic> updatedEntities = new ArrayList<>();
    for (VDS _vds : allVdsList) {
        boolean _saveVdsDynamic = false;
        if (_vds.getPendingVcpusCount() != 0 && !runningVmsInTransition) {
            _vds.setPendingVcpusCount(0);
            _saveVdsDynamic = true;
        }
        if (_vds.getPendingVmemSize() != 0 && !runningVmsInTransition) {
            _vds.setPendingVmemSize(0);
            _saveVdsDynamic = true;
        }
        if (_saveVdsDynamic) {
            updatedEntities.add(_vds.getDynamicData());
        }
    }
    // TODO replace this with batch processing once it becomes available
    for (VdsDynamic entity : updatedEntities) {
        DbFacade.getInstance().getVdsDynamicDao().update(entity);
    }
    // Populate the VDS dictionary
    for (VDS curVds : allVdsList) {
        AddVds(curVds, true);
    }
    IrsBrokerCommand.init();
    log.info("Finished initializing " + getClass().getSimpleName());
}
#end_block

#method_before
public void AddVds(VDS vds, boolean isInternal) {
    VdsManager vdsManager = VdsManager.buildVdsManager(vds);
    if (isInternal) {
        VDSStatus status = vds.getStatus();
        switch(vds.getStatus()) {
            case Error:
                status = VDSStatus.Up;
                break;
            case Reboot:
            case NonResponsive:
            case Connecting:
            case Installing:
                status = VDSStatus.Unassigned;
                break;
        }
        if (status != vds.getStatus()) {
            vdsManager.setStatus(status, vds);
            vdsManager.UpdateStatisticsData(vds.getStatisticsData());
        }
        // set pending to 0
        vds.setPendingVcpusCount(0);
        vdsManager.UpdateDynamicData(vds.getDynamicData());
    }
    vdsManager.schedulJobs();
    _vdsManagersDict.put(vds.getId(), vdsManager);
    log.infoFormat("VDS {0} was added to the Resource Manager", vds.getId());
}
#method_after
public void AddVds(VDS vds, boolean isInternal) {
    VdsManager vdsManager = VdsManager.buildVdsManager(vds);
    if (isInternal) {
        VDSStatus status = vds.getStatus();
        switch(vds.getStatus()) {
            case Error:
                status = VDSStatus.Up;
                break;
            case Reboot:
            case NonResponsive:
            case Connecting:
            case Installing:
                status = VDSStatus.Unassigned;
                break;
        }
        if (status != vds.getStatus()) {
            vdsManager.setStatus(status, vds);
            vdsManager.updateStatisticsData(vds.getStatisticsData());
        }
        // set pending to 0
        vds.setPendingVcpusCount(0);
        vdsManager.updateDynamicData(vds.getDynamicData());
    }
    vdsManager.schedulJobs();
    _vdsManagersDict.put(vds.getId(), vdsManager);
    log.infoFormat("VDS {0} was added to the Resource Manager", vds.getId());
}
#end_block

#method_before
public void UpdateVdsStatisticsData(VdsStatistics vdsStatistics) {
    VdsManager vdsManager = GetVdsManager(vdsStatistics.getId());
    if (vdsManager != null) {
        vdsManager.UpdateStatisticsData(vdsStatistics);
    }
}
#method_after
public void UpdateVdsStatisticsData(VdsStatistics vdsStatistics) {
    VdsManager vdsManager = GetVdsManager(vdsStatistics.getId());
    if (vdsManager != null) {
        vdsManager.updateStatisticsData(vdsStatistics);
    }
}
#end_block

#method_before
private void saveDataToDb() {
    if (_saveVdsDynamic) {
        _vdsManager.UpdateDynamicData(_vds.getDynamicData());
    }
    if (_saveVdsStatistics) {
        VdsStatistics stat = _vds.getStatisticsData();
        _vdsManager.UpdateStatisticsData(stat);
        checkVdsMemoryThreshold(stat);
        checkVdsCpuThreshold(stat);
        checkVdsNetworkThreshold(stat);
        checkVdsSwapThreshold(stat);
        final List<VdsNetworkStatistics> statistics = new LinkedList<VdsNetworkStatistics>();
        for (VdsNetworkInterface iface : _vds.getInterfaces()) {
            statistics.add(iface.getStatistics());
        }
        if (!statistics.isEmpty()) {
            TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics);
                    return null;
                }
            });
        }
    }
    getDbFacade().getVmDynamicDao().updateAllInBatch(_vmDynamicToSave.values());
    getDbFacade().getVmStatisticsDao().updateAllInBatch(_vmStatisticsToSave.values());
    final List<VmNetworkStatistics> allVmInterfaceStatistics = new LinkedList<VmNetworkStatistics>();
    for (List<VmNetworkInterface> list : _vmInterfaceStatisticsToSave.values()) {
        for (VmNetworkInterface iface : list) {
            allVmInterfaceStatistics.add(iface.getStatistics());
        }
    }
    getDbFacade().getVmNetworkStatisticsDao().updateAllInBatch(allVmInterfaceStatistics);
    getDbFacade().getDiskImageDynamicDao().updateAllInBatch(_vmDiskImageDynamicToSave.values());
    saveVmDevicesToDb();
    saveVmGuestAgentNetworkDevices();
    ResourceManager.getInstance().getEventListener().addExternallyManagedVms(_externalVmsToAdd);
}
#method_after
private void saveDataToDb() {
    if (_saveVdsDynamic) {
        _vdsManager.updateDynamicData(_vds.getDynamicData());
    }
    if (_saveVdsStatistics) {
        VdsStatistics stat = _vds.getStatisticsData();
        _vdsManager.updateStatisticsData(stat);
        checkVdsMemoryThreshold(stat);
        checkVdsCpuThreshold(stat);
        checkVdsNetworkThreshold(stat);
        checkVdsSwapThreshold(stat);
        final List<VdsNetworkStatistics> statistics = new LinkedList<VdsNetworkStatistics>();
        for (VdsNetworkInterface iface : _vds.getInterfaces()) {
            statistics.add(iface.getStatistics());
        }
        if (!statistics.isEmpty()) {
            TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics);
                    return null;
                }
            });
        }
    }
    getDbFacade().getVmDynamicDao().updateAllInBatch(_vmDynamicToSave.values());
    getDbFacade().getVmStatisticsDao().updateAllInBatch(_vmStatisticsToSave.values());
    final List<VmNetworkStatistics> allVmInterfaceStatistics = new LinkedList<VmNetworkStatistics>();
    for (List<VmNetworkInterface> list : _vmInterfaceStatisticsToSave.values()) {
        for (VmNetworkInterface iface : list) {
            allVmInterfaceStatistics.add(iface.getStatistics());
        }
    }
    getDbFacade().getVmNetworkStatisticsDao().updateAllInBatch(allVmInterfaceStatistics);
    getDbFacade().getDiskImageDynamicDao().updateAllInBatch(_vmDiskImageDynamicToSave.values());
    saveVmDevicesToDb();
    saveVmGuestAgentNetworkDevices();
    ResourceManager.getInstance().getEventListener().addExternallyManagedVms(_externalVmsToAdd);
}
#end_block

#method_before
public void AfterRefreshTreatment() {
    try {
        if (processHardwareCapsNeeded) {
            monitoringStrategy.processHardwareCapabilities(_vds);
            markIsSetNonOperationalExecuted();
        }
        if (refreshedCapabilities) {
            ResourceManager.getInstance().getEventListener().handleVdsVersion(_vds.getId());
            markIsSetNonOperationalExecuted();
        }
        if (_vds.getStatus() == VDSStatus.Maintenance) {
            try {
                ResourceManager.getInstance().getEventListener().vdsMovedToMaintenance(_vds);
            } catch (RuntimeException ex) {
                log.errorFormat("Host encounter a problem moving to maintenance mode, probably error during disconnecting it from pool {0}. The Host will stay in Maintenance", ex.getMessage());
            }
        } else if (_vds.getStatus() == VDSStatus.NonOperational && _firstStatus != VDSStatus.NonOperational) {
            if (!_vdsManager.isSetNonOperationalExecuted()) {
                ResourceManager.getInstance().getEventListener().vdsNonOperational(_vds.getId(), _vds.getNonOperationalReason(), false, false, Guid.Empty);
            } else {
                log.infoFormat("Host {0} : {1} is already in NonOperational status. SetNonOperationalVds command is skipped.", _vds.getId(), _vds.getName());
            }
        }
        // rerun all vms from rerun list
        for (Guid vm_guid : _vmsToRerun) {
            log.errorFormat("Rerun vm {0}. Called from vds {1}", vm_guid, _vds.getName());
            ResourceManager.getInstance().RerunFailedCommand(vm_guid, _vds.getId());
        }
        for (Guid vm_guid : _succededToRunVms) {
            _vdsManager.SuccededToRunVm(vm_guid);
        }
        // run all vms that crushed that marked with auto startup
        for (Guid vm_guid : _autoVmsToRun) {
            // Refrain from auto-start HA VM during its re-run attempts.
            if (!_vmsToRerun.contains(vm_guid)) {
                ResourceManager.getInstance().getEventListener().runFailedAutoStartVM(vm_guid);
            }
        }
        // process all vms that their ip changed.
        for (Entry<VM, VmDynamic> pair : _vmsClientIpChanged.entrySet()) {
            ResourceManager.getInstance().getEventListener().processOnClientIpChange(_vds, pair.getValue().getId());
        }
        // process all vms that powering up.
        for (VmDynamic runningVm : _poweringUpVms) {
            ResourceManager.getInstance().getEventListener().processOnVmPoweringUp(_vds.getId(), runningVm.getId(), runningVm.getDisplayIp(), runningVm.getDisplay());
        }
        // process all vms that went down
        for (Guid vm_guid : _vmsMovedToDown) {
            ResourceManager.getInstance().getEventListener().processOnVmStop(vm_guid);
        }
        for (Guid vm_guid : _vmsToRemoveFromAsync) {
            ResourceManager.getInstance().RemoveAsyncRunningVm(vm_guid);
        }
    } catch (IRSErrorException ex) {
        logFailureMessage("ResourceManager::RerunFailedCommand:", ex);
        if (log.isDebugEnabled()) {
            log.error(ExceptionUtils.getMessage(ex), ex);
        }
    } catch (RuntimeException ex) {
        logFailureMessage("ResourceManager::RerunFailedCommand:", ex);
        log.error(ExceptionUtils.getMessage(ex), ex);
    }
}
#method_after
public void AfterRefreshTreatment() {
    try {
        if (processHardwareCapsNeeded) {
            monitoringStrategy.processHardwareCapabilities(_vds);
            markIsSetNonOperationalExecuted();
        }
        if (refreshedCapabilities) {
            ResourceManager.getInstance().getEventListener().handleVdsVersion(_vds.getId());
            markIsSetNonOperationalExecuted();
        }
        if (_vds.getStatus() == VDSStatus.Maintenance) {
            try {
                ResourceManager.getInstance().getEventListener().vdsMovedToMaintenance(_vds);
            } catch (RuntimeException ex) {
                log.errorFormat("Host encounter a problem moving to maintenance mode, probably error during disconnecting it from pool {0}. The Host will stay in Maintenance", ex.getMessage());
            }
        } else if (_vds.getStatus() == VDSStatus.NonOperational && _firstStatus != VDSStatus.NonOperational) {
            if (!_vdsManager.isSetNonOperationalExecuted()) {
                ResourceManager.getInstance().getEventListener().vdsNonOperational(_vds.getId(), _vds.getNonOperationalReason(), false, false, Guid.Empty);
            } else {
                log.infoFormat("Host {0} : {1} is already in NonOperational status. SetNonOperationalVds command is skipped.", _vds.getId(), _vds.getName());
            }
        }
        // rerun all vms from rerun list
        for (Guid vm_guid : _vmsToRerun) {
            log.errorFormat("Rerun vm {0}. Called from vds {1}", vm_guid, _vds.getName());
            ResourceManager.getInstance().RerunFailedCommand(vm_guid, _vds.getId());
        }
        for (Guid vm_guid : _succededToRunVms) {
            _vdsManager.succededToRunVm(vm_guid);
        }
        // run all vms that crushed that marked with auto startup
        for (Guid vm_guid : _autoVmsToRun) {
            // Refrain from auto-start HA VM during its re-run attempts.
            if (!_vmsToRerun.contains(vm_guid)) {
                ResourceManager.getInstance().getEventListener().runFailedAutoStartVM(vm_guid);
            }
        }
        // process all vms that their ip changed.
        for (Entry<VM, VmDynamic> pair : _vmsClientIpChanged.entrySet()) {
            ResourceManager.getInstance().getEventListener().processOnClientIpChange(_vds, pair.getValue().getId());
        }
        // process all vms that powering up.
        for (VmDynamic runningVm : _poweringUpVms) {
            ResourceManager.getInstance().getEventListener().processOnVmPoweringUp(_vds.getId(), runningVm.getId(), runningVm.getDisplayIp(), runningVm.getDisplay());
        }
        // process all vms that went down
        for (Guid vm_guid : _vmsMovedToDown) {
            ResourceManager.getInstance().getEventListener().processOnVmStop(vm_guid);
        }
        for (Guid vm_guid : _vmsToRemoveFromAsync) {
            ResourceManager.getInstance().RemoveAsyncRunningVm(vm_guid);
        }
    } catch (IRSErrorException ex) {
        logFailureMessage("ResourceManager::RerunFailedCommand:", ex);
        if (log.isDebugEnabled()) {
            log.error(ExceptionUtils.getMessage(ex), ex);
        }
    } catch (RuntimeException ex) {
        logFailureMessage("ResourceManager::RerunFailedCommand:", ex);
        log.error(ExceptionUtils.getMessage(ex), ex);
    }
}
#end_block

#method_before
private boolean devicePluggable(VmDevice device) {
    return (VmDeviceType.DISK.getName().equals(device.getDevice()) && VmDeviceGeneralType.DISK == device.getType()) || (VmDeviceType.BRIDGE.getName().equals(device.getDevice()) && VmDeviceGeneralType.INTERFACE == device.getType());
}
#method_after
private boolean devicePluggable(VmDevice device) {
    return VmDeviceCommonUtils.isDisk(device) || VmDeviceCommonUtils.isBridge(device);
}
#end_block

#method_before
private Guid addNewVmDevice(Guid vmId, Map device) {
    Guid newDeviceId = Guid.Empty;
    String typeName = (String) device.get(VdsProperties.Type);
    String deviceName = (String) device.get(VdsProperties.Device);
    // do not allow null or empty device or type values
    if (StringUtils.isEmpty(typeName) || StringUtils.isEmpty(deviceName)) {
        log.errorFormat("Empty or NULL values were passed for a VM {0} device, Device is skipped", vmId);
    } else {
        String address = ((Map<String, String>) device.get(VdsProperties.Address)).toString();
        String alias = StringUtils.defaultString((String) device.get(VdsProperties.Alias));
        Object o = device.get(VdsProperties.SpecParams);
        newDeviceId = Guid.newGuid();
        VmDeviceId id = new VmDeviceId(newDeviceId, vmId);
        VmDevice newDevice = new VmDevice(id, VmDeviceGeneralType.forValue(typeName), deviceName, address, 0, o == null ? new HashMap<String, Object>() : (Map<String, Object>) o, false, true, false, alias, null);
        newVmDevices.add(newDevice);
        log.debugFormat("New device was marked for adding to VM {0} Devices : {1}", vmId, newDevice);
    }
    return newDeviceId;
}
#method_after
private Guid addNewVmDevice(Guid vmId, Map device) {
    Guid newDeviceId = Guid.Empty;
    String typeName = (String) device.get(VdsProperties.Type);
    String deviceName = (String) device.get(VdsProperties.Device);
    // do not allow null or empty device or type values
    if (StringUtils.isEmpty(typeName) || StringUtils.isEmpty(deviceName)) {
        log.errorFormat("Empty or NULL values were passed for a VM {0} device, Device is skipped", vmId);
    } else {
        String address = ((Map<String, String>) device.get(VdsProperties.Address)).toString();
        String alias = StringUtils.defaultString((String) device.get(VdsProperties.Alias));
        Object o = device.get(VdsProperties.SpecParams);
        newDeviceId = Guid.newGuid();
        VmDeviceId id = new VmDeviceId(newDeviceId, vmId);
        VmDevice newDevice = new VmDevice(id, VmDeviceGeneralType.forValue(typeName), deviceName, address, 0, o == null ? new HashMap<String, Object>() : (Map<String, Object>) o, false, true, Boolean.getBoolean((String) device.get(VdsProperties.ReadOnly)), alias, null, null);
        newVmDevices.add(newDevice);
        log.debugFormat("New device was marked for adding to VM {0} Devices : {1}", vmId, newDevice);
    }
    return newDeviceId;
}
#end_block

#method_before
private void processExternallyManagedVms() {
    List<String> vmsToQuery = new ArrayList<String>();
    // Searching for External VMs that run on the host
    for (VmInternalData vmInternalData : _runningVms.values()) {
        VM currentVmData = _vmDict.get(vmInternalData.getVmDynamic().getId());
        if (currentVmData == null) {
            if (getDbFacade().getVmStaticDao().get(vmInternalData.getVmDynamic().getId()) == null) {
                Guid vmId = vmInternalData.getVmDynamic().getId();
                vmsToQuery.add(vmId.toString());
            }
        }
    }
    // and marking the VMs for addition
    if (!vmsToQuery.isEmpty()) {
        // Query VDSM for VMs info, and creating a proper VMStatic to be used when importing them
        Map[] vmsInfo = getVmInfo(vmsToQuery);
        for (Map vmInfo : vmsInfo) {
            Guid vmId = Guid.createGuidFromString((String) vmInfo.get(VdsProperties.vm_guid));
            VmStatic vmStatic = new VmStatic();
            vmStatic.setId(vmId);
            vmStatic.setCreationDate(new Date());
            vmStatic.setVdsGroupId(_vds.getVdsGroupId());
            String vmNameOnHost = (String) vmInfo.get(VdsProperties.vm_name);
            if (StringUtils.equals(HOSTED_ENGINE_VM_NAME, vmNameOnHost)) {
                vmStatic.setName(vmNameOnHost);
                vmStatic.setOrigin(OriginType.HOSTED_ENGINE);
            } else {
                vmStatic.setName(String.format(EXTERNAL_VM_NAME_FORMAT, vmNameOnHost));
                vmStatic.setOrigin(OriginType.EXTERNAL);
            }
            vmStatic.setNumOfSockets(parseIntVdsProperty(vmInfo.get(VdsProperties.num_of_cpus)));
            vmStatic.setMemSizeMb(parseIntVdsProperty(vmInfo.get(VdsProperties.mem_size_mb)));
            vmStatic.setSingleQxlPci(false);
            _externalVmsToAdd.add(vmStatic);
            log.infoFormat("Importing VM {0} as {1}, as it is running on the on Host, but does not exist in the engine.", vmNameOnHost, vmStatic.getName());
        }
    }
}
#method_after
private void processExternallyManagedVms() {
    List<String> vmsToQuery = new ArrayList<String>();
    // Searching for External VMs that run on the host
    for (VmInternalData vmInternalData : _runningVms.values()) {
        VM currentVmData = _vmDict.get(vmInternalData.getVmDynamic().getId());
        if (currentVmData == null) {
            if (getDbFacade().getVmStaticDao().get(vmInternalData.getVmDynamic().getId()) == null) {
                Guid vmId = vmInternalData.getVmDynamic().getId();
                vmsToQuery.add(vmId.toString());
            }
        }
    }
    // and marking the VMs for addition
    if (!vmsToQuery.isEmpty()) {
        // Query VDSM for VMs info, and creating a proper VMStatic to be used when importing them
        Map[] vmsInfo = getVmInfo(vmsToQuery);
        for (Map vmInfo : vmsInfo) {
            Guid vmId = Guid.createGuidFromString((String) vmInfo.get(VdsProperties.vm_guid));
            VmStatic vmStatic = new VmStatic();
            vmStatic.setId(vmId);
            vmStatic.setCreationDate(new Date());
            vmStatic.setVdsGroupId(_vds.getVdsGroupId());
            String vmNameOnHost = (String) vmInfo.get(VdsProperties.vm_name);
            if (StringUtils.equals(HOSTED_ENGINE_VM_NAME, vmNameOnHost)) {
                vmStatic.setName(vmNameOnHost);
                vmStatic.setOrigin(OriginType.HOSTED_ENGINE);
                vmStatic.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
            } else {
                vmStatic.setName(String.format(EXTERNAL_VM_NAME_FORMAT, vmNameOnHost));
                vmStatic.setOrigin(OriginType.EXTERNAL);
            }
            vmStatic.setNumOfSockets(parseIntVdsProperty(vmInfo.get(VdsProperties.num_of_cpus)));
            vmStatic.setMemSizeMb(parseIntVdsProperty(vmInfo.get(VdsProperties.mem_size_mb)));
            vmStatic.setSingleQxlPci(false);
            _externalVmsToAdd.add(vmStatic);
            log.infoFormat("Importing VM {0} as {1}, as it is running on the on Host, but does not exist in the engine.", vmNameOnHost, vmStatic.getName());
        }
    }
}
#end_block

#method_before
private void removeVmsFromCache(List<VM> running) {
    Guid vmGuid;
    for (VM vmToRemove : _vmDict.values()) {
        if (running.contains(vmToRemove)) {
            continue;
        }
        proceedVmBeforeDeletion(vmToRemove, null);
        boolean isInMigration = false;
        if (vmToRemove.getStatus() == VMStatus.MigratingFrom) {
            isInMigration = true;
            handOverVM(vmToRemove);
        } else {
            clearVm(vmToRemove, VmExitStatus.Error, String.format("Could not find VM %s on host, assuming it went down unexpectedly", vmToRemove.getName()));
        }
        log.infoFormat("vm {0} running in db and not running in vds - add to rerun treatment. vds {1}", vmToRemove.getName(), _vds.getName());
        vmGuid = vmToRemove.getId();
        if (!isInMigration && !_vmsToRerun.contains(vmGuid) && ResourceManager.getInstance().IsVmInAsyncRunningList(vmGuid)) {
            _vmsToRerun.add(vmGuid);
        } else // or reported from vdsm with error code
        if (vmToRemove.isAutoStartup() && !_autoVmsToRun.contains(vmGuid) && (!_runningVms.containsKey(vmGuid) || (_runningVms.containsKey(vmGuid) && _runningVms.get(vmGuid).getVmDynamic().getExitStatus() != VmExitStatus.Normal))) {
            _autoVmsToRun.add(vmGuid);
        }
    }
}
#method_after
private void removeVmsFromCache(List<VM> running) {
    Guid vmGuid;
    for (VM vmToRemove : _vmDict.values()) {
        if (running.contains(vmToRemove)) {
            continue;
        }
        proceedVmBeforeDeletion(vmToRemove, null);
        boolean isInMigration = false;
        if (vmToRemove.getStatus() == VMStatus.MigratingFrom) {
            isInMigration = true;
            handOverVM(vmToRemove);
        } else {
            clearVm(vmToRemove, VmExitStatus.Error, String.format("Could not find VM %s on host, assuming it went down unexpectedly", vmToRemove.getName()));
        }
        log.infoFormat("VM {0} ({1}) is running in db and not running in VDS {2}", vmToRemove.getName(), vmToRemove.getId(), _vds.getName());
        vmGuid = vmToRemove.getId();
        if (!isInMigration && !_vmsToRerun.contains(vmGuid) && ResourceManager.getInstance().IsVmInAsyncRunningList(vmGuid)) {
            _vmsToRerun.add(vmGuid);
            log.infoFormat("add VM {0} to rerun treatment", vmToRemove.getName());
        } else // or reported from vdsm with error code
        if (vmToRemove.isAutoStartup() && !_autoVmsToRun.contains(vmGuid) && (!_runningVms.containsKey(vmGuid) || (_runningVms.containsKey(vmGuid) && _runningVms.get(vmGuid).getVmDynamic().getExitStatus() != VmExitStatus.Normal))) {
            _autoVmsToRun.add(vmGuid);
            log.infoFormat("add VM {0} to HA rerun treatment", vmToRemove.getName());
        }
    }
}
#end_block

#method_before
private void moveVDSToMaintenanceIfNeeded() {
    if ((_vds.getStatus() == VDSStatus.PreparingForMaintenance) && monitoringStrategy.canMoveToMaintenance(_vds)) {
        _vdsManager.setStatus(VDSStatus.Maintenance, _vds);
        _saveVdsDynamic = true;
        _saveVdsStatistics = true;
        log.infoFormat("Updated vds status from 'Preparing for Maintenance' to 'Maintenance' in database,  vds = {0} : {1}", _vds.getId(), _vds.getName());
    }
}
#method_after
private void moveVDSToMaintenanceIfNeeded() {
    if (_vds.getStatus() == VDSStatus.PreparingForMaintenance) {
        if (monitoringStrategy.canMoveToMaintenance(_vds)) {
            _vdsManager.setStatus(VDSStatus.Maintenance, _vds);
            _saveVdsDynamic = true;
            _saveVdsStatistics = true;
            log.infoFormat("Updated vds status from 'Preparing for Maintenance' to 'Maintenance' in database,  vds = {0} : {1}", _vds.getId(), _vds.getName());
        } else {
            if (_vdsManager.isTimeToRetryMaintenance()) {
                ResourceManager.getInstance().getEventListener().handleVdsMaintenanceTimeout(_vds);
                _vdsManager.calculateNextMaintenanceAttemptTime();
            }
        }
    }
}
#end_block

#method_before
public Guid schedule(VDSGroup cluster, VM vm, List<Guid> hostBlackList, List<Guid> hostWhiteList, Guid destHostId, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    clusterLockMap.putIfAbsent(cluster.getId(), new Object());
    synchronized (clusterLockMap.get(cluster.getId())) {
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
        updateInitialHostList(vdsList, hostBlackList, true);
        updateInitialHostList(vdsList, hostWhiteList, false);
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        Map<String, String> parameters = createClusterPolicyParameters(cluster);
        vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, memoryChecker);
        if (vdsList == null || vdsList.size() == 0) {
            return null;
        }
        // it passed filters return it
        if (destHostId != null) {
            for (VDS vds : vdsList) {
                if (destHostId.equals(vds.getId())) {
                    return destHostId;
                }
            }
        }
        if (policy.getFunctions() == null || policy.getFunctions().isEmpty()) {
            return vdsList.get(0).getId();
        }
        Guid bestHost = runFunctions(policy.getFunctions(), vdsList, vm, parameters);
        if (bestHost != null) {
            getVdsDynamicDao().updatePartialVdsDynamicCalc(bestHost, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), 0, 0);
        }
        return bestHost;
    }
}
#method_after
public Guid schedule(VDSGroup cluster, VM vm, List<Guid> hostBlackList, List<Guid> hostWhiteList, Guid destHostId, List<String> messages, VdsFreeMemoryChecker memoryChecker, String correlationId) {
    clusterLockMap.putIfAbsent(cluster.getId(), new Object());
    synchronized (clusterLockMap.get(cluster.getId())) {
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
        updateInitialHostList(vdsList, hostBlackList, true);
        updateInitialHostList(vdsList, hostWhiteList, false);
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        Map<String, String> parameters = createClusterPolicyParameters(cluster);
        vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, memoryChecker, true, correlationId);
        if (vdsList == null || vdsList.size() == 0) {
            return null;
        }
        // it passed filters return it
        if (destHostId != null) {
            for (VDS vds : vdsList) {
                if (destHostId.equals(vds.getId())) {
                    return destHostId;
                }
            }
        }
        if (policy.getFunctions() == null || policy.getFunctions().isEmpty()) {
            return vdsList.get(0).getId();
        }
        Guid bestHost = runFunctions(policy.getFunctions(), vdsList, vm, parameters);
        if (bestHost == null && vdsList.size() > 0) {
            bestHost = vdsList.get(0).getId();
        }
        if (bestHost != null) {
            getVdsDynamicDao().updatePartialVdsDynamicCalc(bestHost, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), 0, 0);
        }
        return bestHost;
    }
}
#end_block

#method_before
public boolean canSchedule(VDSGroup cluster, VM vm, List<Guid> vdsBlackList, List<Guid> vdsWhiteList, Guid destVdsId, List<String> messages) {
    List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
    updateInitialHostList(vdsList, vdsBlackList, true);
    updateInitialHostList(vdsList, vdsWhiteList, false);
    ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
    Map<String, String> parameters = createClusterPolicyParameters(cluster);
    vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingMemoryChecker);
    if (vdsList == null || vdsList.size() == 0) {
        return false;
    }
    return true;
}
#method_after
public boolean canSchedule(VDSGroup cluster, VM vm, List<Guid> vdsBlackList, List<Guid> vdsWhiteList, Guid destVdsId, List<String> messages) {
    List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
    updateInitialHostList(vdsList, vdsBlackList, true);
    updateInitialHostList(vdsList, vdsWhiteList, false);
    ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
    Map<String, String> parameters = createClusterPolicyParameters(cluster);
    vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingMemoryChecker, false, null);
    if (vdsList == null || vdsList.size() == 0) {
        return false;
    }
    return true;
}
#end_block

#method_before
private List<VDS> runFilters(ArrayList<Guid> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    ArrayList<PolicyUnitImpl> internalFilters = new ArrayList<PolicyUnitImpl>();
    ArrayList<PolicyUnitImpl> externalFilters = new ArrayList<PolicyUnitImpl>();
    sortFilters(filters, filterPositionMap);
    if (filters != null) {
        for (Guid filter : filters) {
            PolicyUnitImpl filterPolicyUnit = policyUnits.get(filter);
            if (filterPolicyUnit.isInternal()) {
                internalFilters.add(filterPolicyUnit);
            } else {
                if (filterPolicyUnit.isEnabled()) {
                    externalFilters.add(filterPolicyUnit);
                }
            }
        }
    }
    hostList = runInternalFilters(internalFilters, hostList, vm, parameters, filterPositionMap, messages, memoryChecker);
    if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled) && externalFilters.size() > 0 && hostList != null && hostList.size() > 0) {
        hostList = runExternalFilters(externalFilters, hostList, vm, parameters, messages);
    }
    return hostList;
}
#method_after
private List<VDS> runFilters(ArrayList<Guid> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker, boolean shouldRunExternalFilters, String correlationId) {
    SchedulingResult result = new SchedulingResult();
    ArrayList<PolicyUnitImpl> internalFilters = new ArrayList<PolicyUnitImpl>();
    ArrayList<PolicyUnitImpl> externalFilters = new ArrayList<PolicyUnitImpl>();
    sortFilters(filters, filterPositionMap);
    if (filters != null) {
        for (Guid filter : filters) {
            PolicyUnitImpl filterPolicyUnit = policyUnits.get(filter);
            if (filterPolicyUnit.isInternal()) {
                internalFilters.add(filterPolicyUnit);
            } else {
                if (filterPolicyUnit.isEnabled()) {
                    externalFilters.add(filterPolicyUnit);
                }
            }
        }
    }
    hostList = runInternalFilters(internalFilters, hostList, vm, parameters, filterPositionMap, messages, memoryChecker, correlationId, result);
    if (shouldRunExternalFilters && Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled) && externalFilters.size() > 0 && hostList != null && hostList.size() > 0) {
        hostList = runExternalFilters(externalFilters, hostList, vm, parameters, messages, correlationId, result);
    }
    if (hostList == null || hostList.size() == 0) {
        messages.add(VdcBllMessages.SCHEDULING_ALL_HOSTS_FILTERED_OUT.name());
        messages.addAll(result.getReasonMessages());
    }
    return hostList;
}
#end_block

#method_before
private List<VDS> runInternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    if (filters != null) {
        for (PolicyUnitImpl filterPolicyUnit : filters) {
            if (hostList == null || hostList.isEmpty()) {
                break;
            }
            filterPolicyUnit.setMemoryChecker(memoryChecker);
            hostList = filterPolicyUnit.filter(hostList, vm, parameters, messages);
        }
    }
    return hostList;
}
#method_after
private List<VDS> runInternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker, String correlationId, SchedulingResult result) {
    if (filters != null) {
        for (PolicyUnitImpl filterPolicyUnit : filters) {
            if (hostList == null || hostList.isEmpty()) {
                break;
            }
            filterPolicyUnit.setMemoryChecker(memoryChecker);
            List<VDS> currentHostList = new ArrayList<VDS>(hostList);
            hostList = filterPolicyUnit.filter(hostList, vm, parameters, messages);
            logFilterActions(currentHostList, toIdSet(hostList), VdcBllMessages.VAR__FILTERTYPE__INTERNAL, filterPolicyUnit.getName(), result, correlationId);
        }
    }
    return hostList;
}
#end_block

#method_before
private List<VDS> runExternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, List<String> messages) {
    List<Guid> filteredIDs = null;
    if (filters != null) {
        List<String> filterNames = new ArrayList<String>();
        for (PolicyUnitImpl filter : filters) {
            filterNames.add(filter.getName());
        }
        List<Guid> hostIDs = new ArrayList<Guid>();
        for (VDS host : hostList) {
            hostIDs.add(host.getId());
        }
        filteredIDs = ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters);
    }
    return intersectHosts(hostList, filteredIDs);
}
#method_after
private List<VDS> runExternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, List<String> messages, String correlationId, SchedulingResult result) {
    List<Guid> filteredIDs = null;
    if (filters != null) {
        List<String> filterNames = new ArrayList<String>();
        for (PolicyUnitImpl filter : filters) {
            filterNames.add(filter.getName());
        }
        List<Guid> hostIDs = new ArrayList<Guid>();
        for (VDS host : hostList) {
            hostIDs.add(host.getId());
        }
        filteredIDs = ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters);
        if (filteredIDs != null) {
            logFilterActions(hostList, new HashSet<Guid>(filteredIDs), VdcBllMessages.VAR__FILTERTYPE__EXTERNAL, Arrays.toString(filterNames.toArray()), result, correlationId);
        }
    }
    return intersectHosts(hostList, filteredIDs);
}
#end_block

#method_before
public ValidationResult canRebalance(GlusterVolumeEntity volumeEntity) {
    int replicaCount = 0;
    List<GlusterBrickEntity> bricks = volumeEntity.getBricks();
    if (volumeEntity.getVolumeType().isReplicatedType()) {
        replicaCount = volumeEntity.getReplicaCount();
    } else {
        replicaCount = 1;
    }
    int brickIndex = 0, replicaIndex = 0;
    while (brickIndex < bricks.size()) {
        for (replicaIndex = 0; replicaIndex < replicaCount; replicaIndex++) {
            if (bricks.get(brickIndex + replicaIndex).isOnline()) {
                brickIndex = brickIndex + replicaCount;
                break;
            }
        }
        if (replicaIndex == replicaCount) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_ONE_OR_MORE_BRICKS_ARE_DOWN);
        }
    }
    return ValidationResult.VALID;
}
#method_after
public ValidationResult canRebalance(GlusterVolumeEntity volumeEntity) {
    int replicaCount = 1;
    List<GlusterBrickEntity> bricks = volumeEntity.getBricks();
    if (volumeEntity.getVolumeType().isReplicatedType()) {
        replicaCount = volumeEntity.getReplicaCount();
    }
    int brickIndex = 0, replicaIndex = 0;
    while (brickIndex < bricks.size()) {
        for (replicaIndex = 0; replicaIndex < replicaCount; replicaIndex++) {
            if (bricks.get(brickIndex + replicaIndex).isOnline()) {
                brickIndex = brickIndex + replicaCount;
                break;
            }
        }
        if (replicaIndex == replicaCount) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_ONE_OR_MORE_BRICKS_ARE_DOWN);
        }
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
private QueryData initQueryData(boolean useCache) {
    QueryData data = null;
    boolean isExistsValue = false;
    boolean IsFromYesterday = false;
    boolean isSafe = false;
    String searchKey = "";
    try {
        String searchText = getParameters().getSearchPattern();
        // find if this is a trivial search expression (like 'Vms:' etc).
        isSafe = SearchObjects.isSafeExpression(searchText);
        if (useCache) {
            // first lets check the cache of queries.
            searchKey = String.format("%1$s,%2$s,%3$s", searchText, getParameters().getMaxCount(), getParameters().getCaseSensitive());
            data = mQueriesCache.get(searchKey);
            isExistsValue = (data != null);
            if (isExistsValue) {
                TimeSpan span = DateTime.getNow().Subtract(data.getDate());
                if (span.Days >= 1) {
                    IsFromYesterday = true;
                }
            }
        }
        // search text.
        if (!isExistsValue || IsFromYesterday) {
            log.debugFormat("ResourceManager::searchBusinessObjects(''{0}'') - entered", searchText);
            String queryDomain = null;
            ISyntaxChecker curSyntaxChecker;
            String[] splitted = searchText.split("[:@ ]");
            final String objectName = splitted[0].toUpperCase();
            if ((SearchObjects.AD_USER_OBJ_NAME.equals(objectName)) || (SearchObjects.AD_USER_PLU_OBJ_NAME.equals(objectName)) || (SearchObjects.AD_GROUP_OBJ_NAME.equals(objectName)) || (SearchObjects.AD_GROUP_PLU_OBJ_NAME.equals(objectName))) {
                if (searchText.indexOf('@') > 0 && splitted.length > 1) {
                    queryDomain = splitted[1];
                    searchText = searchText.substring(0, searchText.indexOf('@')) + searchText.substring(searchText.indexOf(':'));
                } else {
                    queryDomain = getDefaultDomain();
                }
                curSyntaxChecker = SyntaxCheckerFactory.CreateADSyntaxChecker(Config.<String>GetValue(ConfigValues.AuthenticationMethod));
            } else {
                curSyntaxChecker = SyntaxCheckerFactory.CreateBackendSyntaxChecker(Config.<String>GetValue(ConfigValues.AuthenticationMethod));
            }
            SyntaxContainer searchObj = curSyntaxChecker.analyzeSyntaxState(searchText, true);
            // set the case-sensitive flag
            searchObj.setCaseSensitive(getParameters().getCaseSensitive());
            searchObj.setMaxCount(getParameters().getMaxCount() == -1 ? Integer.MAX_VALUE : getParameters().getMaxCount());
            // setting FromSearch value
            searchObj.setSearchFrom(getParameters().getSearchFrom());
            if (searchObj.getError() != SyntaxError.NO_ERROR) {
                log.warnFormat("ResourceManager::searchBusinessObjects - erroneous search text - ''{0}''", searchText);
                int startPos = searchObj.getErrorStartPos();
                int endPos = searchObj.getErrorEndPos();
                int length = endPos - startPos;
                String error = (length > 0 && ((startPos + 1 + length) < searchText.length()) && (endPos + 1 < searchText.length())) ? searchText.substring(0, startPos) + "$" + searchText.substring(startPos + 1, startPos + 1 + length) + "$" + searchText.substring(endPos + 1) : searchObj.getError().toString();
                getQueryReturnValue().setExceptionString(error);
                return null;
            }
            if (searchObj.getvalid() != true) {
                log.warnFormat("ResourceManager::searchBusinessObjects - Invalid search text - ''{0}''", searchText);
                return null;
            }
            // An expression is considered safe if matches a trivial search.
            data = new QueryData(curSyntaxChecker.generateQueryFromSyntaxContainer(searchObj, isSafe), searchObj.getSearchObjectStr(), new Date(), queryDomain);
            // query from scratch.
            if (!containsStaticInValues(data.getQuery()))
                mQueriesCache.put(searchKey, data);
        }
    } catch (SearchEngineIllegalCharacterException e) {
        log.error("Search expression can not end with ESCAPE character:" + getParameters().getSearchPattern());
        data = null;
    } catch (SqlInjectionException e) {
        log.error("Sql Injection in search: " + getParameters().getSearchPattern());
        data = null;
    } catch (RuntimeException ex) {
        log.warn("Illegal search: " + getParameters().getSearchPattern(), ex);
        data = null;
    }
    return data;
}
#method_after
private QueryData initQueryData(boolean useCache) {
    QueryData data = null;
    boolean isExistsValue = false;
    boolean IsFromYesterday = false;
    boolean isSafe = false;
    String searchKey = "";
    try {
        String searchText = getParameters().getSearchPattern();
        // find if this is a trivial search expression (like 'Vms:' etc).
        isSafe = SearchObjects.isSafeExpression(searchText);
        if (useCache) {
            // first lets check the cache of queries.
            searchKey = String.format("%1$s,%2$s,%3$s", searchText, getParameters().getMaxCount(), getParameters().getCaseSensitive());
            data = mQueriesCache.get(searchKey);
            isExistsValue = (data != null);
            if (isExistsValue) {
                TimeSpan span = DateTime.getNow().Subtract(data.getDate());
                if (span.Days >= 1) {
                    IsFromYesterday = true;
                }
            }
        }
        // search text.
        if (!isExistsValue || IsFromYesterday) {
            log.debugFormat("ResourceManager::searchBusinessObjects(''{0}'') - entered", searchText);
            String queryDomain = null;
            ISyntaxChecker curSyntaxChecker;
            String[] splitted = searchText.split("[:@ ]");
            final String objectName = splitted[0].toUpperCase();
            if ((SearchObjects.AD_USER_OBJ_NAME.equals(objectName)) || (SearchObjects.AD_USER_PLU_OBJ_NAME.equals(objectName)) || (SearchObjects.AD_GROUP_OBJ_NAME.equals(objectName)) || (SearchObjects.AD_GROUP_PLU_OBJ_NAME.equals(objectName))) {
                if (searchText.indexOf('@') > 0 && splitted.length > 1) {
                    queryDomain = splitted[1];
                    searchText = searchText.substring(0, searchText.indexOf('@')) + searchText.substring(searchText.indexOf(':'));
                } else {
                    queryDomain = getDefaultDomain();
                }
                curSyntaxChecker = SyntaxCheckerFactory.createADSyntaxChecker(Config.<String>GetValue(ConfigValues.AuthenticationMethod));
            } else {
                curSyntaxChecker = SyntaxCheckerFactory.createBackendSyntaxChecker(Config.<String>GetValue(ConfigValues.AuthenticationMethod));
            }
            SyntaxContainer searchObj = curSyntaxChecker.analyzeSyntaxState(searchText, true);
            // set the case-sensitive flag
            searchObj.setCaseSensitive(getParameters().getCaseSensitive());
            searchObj.setMaxCount(getParameters().getMaxCount() == -1 ? Integer.MAX_VALUE : getParameters().getMaxCount());
            // setting FromSearch value
            searchObj.setSearchFrom(getParameters().getSearchFrom());
            if (searchObj.getError() != SyntaxError.NO_ERROR) {
                log.warnFormat("ResourceManager::searchBusinessObjects - erroneous search text - ''{0}''", searchText);
                int startPos = searchObj.getErrorStartPos();
                int endPos = searchObj.getErrorEndPos();
                int length = endPos - startPos;
                String error = (length > 0 && ((startPos + 1 + length) < searchText.length()) && (endPos + 1 < searchText.length())) ? searchText.substring(0, startPos) + "$" + searchText.substring(startPos + 1, startPos + 1 + length) + "$" + searchText.substring(endPos + 1) : searchObj.getError().toString();
                getQueryReturnValue().setExceptionString(error);
                return null;
            }
            if (searchObj.getvalid() != true) {
                log.warnFormat("ResourceManager::searchBusinessObjects - Invalid search text - ''{0}''", searchText);
                return null;
            }
            // An expression is considered safe if matches a trivial search.
            data = new QueryData(curSyntaxChecker.generateQueryFromSyntaxContainer(searchObj, isSafe), searchObj.getSearchObjectStr(), new Date(), queryDomain);
            // query from scratch.
            if (!containsStaticInValues(data.getQuery()))
                mQueriesCache.put(searchKey, data);
        }
    } catch (SearchEngineIllegalCharacterException e) {
        log.error("Search expression can not end with ESCAPE character:" + getParameters().getSearchPattern());
        data = null;
    } catch (SqlInjectionException e) {
        log.error("Sql Injection in search: " + getParameters().getSearchPattern());
        data = null;
    } catch (RuntimeException ex) {
        log.warn("Illegal search: " + getParameters().getSearchPattern(), ex);
        data = null;
    }
    return data;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue vdsReturnaValue = runVdsCommand(VDSCommandType.StopRebalanceGlusterVolume, new GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName()));
    if (!vdsReturnaValue.getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED, vdsReturnaValue.getVdsError().getMessage());
        setSucceeded(false);
        return;
    }
    GlusterVolumeTaskStatusEntity rebalanceStatusEntity = (GlusterVolumeTaskStatusEntity) vdsReturnaValue.getReturnValue();
    JobExecutionStatus stepStatus = rebalanceStatusEntity.getStatusSummary().getStatus();
    if (JobExecutionStatus.FINISHED == stepStatus || JobExecutionStatus.FAILED == stepStatus) {
        endStepJob(stepStatus, getStepMessageMap(stepStatus), true);
    } else {
        endStepJob(JobExecutionStatus.ABORTED, getStepMessageMap(JobExecutionStatus.ABORTED), false);
    }
    releaseVolumeLock();
    setSucceeded(vdsReturnaValue.getSucceeded());
    getReturnValue().setActionReturnValue(rebalanceStatusEntity);
}
#method_after
@Override
protected void executeCommand() {
    VDSReturnValue vdsReturnaValue = runVdsCommand(VDSCommandType.StopRebalanceGlusterVolume, new GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName()));
    if (!vdsReturnaValue.getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED, vdsReturnaValue.getVdsError().getMessage());
        setSucceeded(false);
        return;
    }
    GlusterVolumeTaskStatusEntity rebalanceStatusEntity = (GlusterVolumeTaskStatusEntity) vdsReturnaValue.getReturnValue();
    JobExecutionStatus stepStatus = rebalanceStatusEntity.getStatusSummary().getStatus();
    if (stepStatus != null) {
        endStepJob(stepStatus, getStepMessageMap(stepStatus), GlusterTaskUtils.getInstance().isTaskSuccess(stepStatus));
    } else {
        endStepJob(JobExecutionStatus.ABORTED, getStepMessageMap(JobExecutionStatus.ABORTED), false);
    }
    releaseVolumeLock();
    setSucceeded(vdsReturnaValue.getSucceeded());
    getReturnValue().setActionReturnValue(rebalanceStatusEntity);
}
#end_block

#method_before
private void processFence() {
    FenceExecutor executor = new FenceExecutor(getVds(), FenceActionType.Status);
    // actions.
    if (getVds().getpm_enabled() && executor.findProxyHost()) {
        VDSReturnValue returnValue = executor.Fence();
        fenceSucceeded = returnValue.getSucceeded();
        fenceStatusReturnValue = (FenceStatusReturnValue) returnValue.getReturnValue();
        vdsProxyFound = true;
    }
}
#method_after
private void processFence() {
    FenceExecutor executor = new FenceExecutor(getVds(), FenceActionType.Status);
    // actions.
    if (getVds().getpm_enabled() && executor.findProxyHost()) {
        VDSReturnValue returnValue = executor.fence();
        fenceSucceeded = returnValue.getSucceeded();
        fenceStatusReturnValue = (FenceStatusReturnValue) returnValue.getReturnValue();
        vdsProxyFound = true;
    }
}
#end_block

#method_before
private EventResult runConnectHostToPoolEvent(final Guid storagePoolId, final VDS vds) {
    EventResult result = new EventResult(true, EventType.VDSCONNECTTOPOOL);
    StoragePool storagePool = getStoragePoolDAO().get(storagePoolId);
    StorageDomain masterDomain = getStorageDomainDAO().getStorageDomainByTypeAndPool(storagePoolId, StorageDomainType.Master);
    boolean masterDomainInactiveOrUnknown = masterDomain.getStatus() == StorageDomainStatus.InActive || masterDomain.getStatus() == StorageDomainStatus.Unknown;
    try {
        runVdsCommand(VDSCommandType.ConnectStoragePool, new ConnectStoragePoolVDSCommandParameters(vds.getId(), storagePoolId, vds.getVdsSpmId(), masterDomain.getId(), storagePool.getmaster_domain_version()));
    } catch (VdcBLLException e) {
        if (masterDomainInactiveOrUnknown) {
            log.infoFormat("Could not connect host {0} to pool {1}, as the master domain is in inactive/unknown status - not failing the operation", vds.getName(), storagePool.getName());
        } else {
            log.errorFormat("Could not connect host {0} to pool {1}", vds.getName(), storagePool.getName());
            result.setSuccess(false);
        }
    }
    if (result.isSuccess()) {
        result.setSuccess(proceedVdsStats(!masterDomainInactiveOrUnknown));
        if (!result.isSuccess()) {
            AuditLogDirector.log(new AuditLogableBase(getVdsId()), AuditLogType.VDS_STORAGE_VDS_STATS_FAILED);
        }
    }
    return result;
}
#method_after
private EventResult runConnectHostToPoolEvent(final Guid storagePoolId, final VDS vds) {
    EventResult result = new EventResult(true, EventType.VDSCONNECTTOPOOL);
    StoragePool storagePool = getStoragePoolDAO().get(storagePoolId);
    StorageDomain masterDomain = getStorageDomainDAO().getStorageDomainByTypeAndPool(storagePoolId, StorageDomainType.Master);
    boolean masterDomainInactiveOrUnknown = masterDomain.getStatus() == StorageDomainStatus.InActive || masterDomain.getStatus() == StorageDomainStatus.Unknown;
    VDSError error = null;
    try {
        VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.ConnectStoragePool, new ConnectStoragePoolVDSCommandParameters(vds.getId(), storagePoolId, vds.getVdsSpmId(), masterDomain.getId(), storagePool.getmaster_domain_version()));
        if (!vdsReturnValue.getSucceeded()) {
            error = vdsReturnValue.getVdsError();
        }
    } catch (VdcBLLException e) {
        error = e.getVdsError();
    }
    if (error != null) {
        if (error.getCode() != VdcBllErrors.CannotConnectMultiplePools && masterDomainInactiveOrUnknown) {
            log.infoFormat("Could not connect host {0} to pool {1}, as the master domain is in inactive/unknown status - not failing the operation", vds.getName(), storagePool.getName());
        } else {
            log.errorFormat("Could not connect host {0} to pool {1} with the message: {2}", vds.getName(), storagePool.getName(), error.getMessage());
            result.setSuccess(false);
        }
    }
    if (result.isSuccess()) {
        result.setSuccess(proceedVdsStats(!masterDomainInactiveOrUnknown));
        if (!result.isSuccess()) {
            AuditLogDirector.log(new AuditLogableBase(getVdsId()), AuditLogType.VDS_STORAGE_VDS_STATS_FAILED);
        }
    }
    return result;
}
#end_block

#method_before
private boolean initGlusterPeerProcess() {
    /* Acquiring a wait lock only during a gluster peer process
          If "gluster peer probe" and "gluster peer status" are executed simultaneously, the results
          are unpredictable. Hence locking the cluster to ensure the sync job does not lead to race
          condition.*/
    Map<String, Pair<String, String>> exclusiveLocks = new HashMap<String, Pair<String, String>>();
    exclusiveLocks.put(getVds().getVdsGroupId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.GLUSTER, VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_OPERATION_INPROGRESS));
    EngineLock lock = new EngineLock(exclusiveLocks, null);
    getLockManager().acquireLockWait(lock);
    try {
        glusterPeerListSucceeded = true;
        glusterPeerProbeSucceeded = true;
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(getVdsGroupId(), VDSStatus.Up);
        // If the cluster already having Gluster servers, get an up server
        if (vdsList != null && vdsList.size() > 0) {
            VDS upServer = null;
            for (VDS vds : vdsList) {
                if (!getVdsId().equals(vds.getId())) {
                    upServer = vds;
                    break;
                }
            }
            // If new server is not part of the existing gluster peers, add into peer group
            if (upServer != null) {
                List<GlusterServerInfo> glusterServers = getGlusterPeers(upServer.getId());
                Map<String, String> customLogValues = new HashMap<String, String>();
                customLogValues.put("Server", upServer.getHostName());
                if (glusterServers.size() == 0) {
                    customLogValues.put("Command", "gluster peer status");
                    setNonOperational(NonOperationalReason.GLUSTER_COMMAND_FAILED, customLogValues);
                    return false;
                } else if (!hostExists(glusterServers, getVds())) {
                    if (!glusterPeerProbe(upServer.getId(), getVds().getHostName())) {
                        customLogValues.put("Command", "gluster peer probe " + getVds().getHostName());
                        setNonOperational(NonOperationalReason.GLUSTER_COMMAND_FAILED, customLogValues);
                        return false;
                    }
                }
            }
        }
        return true;
    } finally {
        getLockManager().releaseLock(lock);
    }
}
#method_after
private boolean initGlusterPeerProcess() {
    // condition.
    try (EngineLock lock = GlusterUtil.getInstance().acquireGlusterLockWait(getVds().getVdsGroupId())) {
        glusterPeerListSucceeded = true;
        glusterPeerProbeSucceeded = true;
        Map<String, String> customLogValues = new HashMap<String, String>();
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(getVdsGroupId(), VDSStatus.Up);
        // If the cluster already having Gluster servers, get an up server
        if (vdsList != null && vdsList.size() > 0) {
            VDS upServer = null;
            for (VDS vds : vdsList) {
                if (!getVdsId().equals(vds.getId())) {
                    upServer = vds;
                    break;
                }
            }
            // If new server is not part of the existing gluster peers, add into peer group
            if (upServer != null) {
                List<GlusterServerInfo> glusterServers = getGlusterPeers(upServer.getId());
                customLogValues.put("Server", upServer.getHostName());
                if (glusterServers.size() == 0) {
                    customLogValues.put("Command", "gluster peer status");
                    setNonOperational(NonOperationalReason.GLUSTER_COMMAND_FAILED, customLogValues);
                    return false;
                } else if (!hostExists(glusterServers, getVds())) {
                    if (!glusterPeerProbe(upServer.getId(), getVds().getHostName())) {
                        customLogValues.put("Command", "gluster peer probe " + getVds().getHostName());
                        setNonOperational(NonOperationalReason.GLUSTER_COMMAND_FAILED, customLogValues);
                        return false;
                    }
                }
            }
        }
        return true;
    }
}
#end_block

#method_before
private void removeDetachedServers(List<VDS> existingServers, List<GlusterServerInfo> fetchedServers) {
    boolean serverRemoved = false;
    for (VDS server : existingServers) {
        if (isRemovableStatus(server.getStatus()) && serverDetached(server, fetchedServers)) {
            log.infoFormat("Server {0} has been removed directly using the gluster CLI. Removing it from engine as well.", server.getName());
            logUtil.logServerMessage(server, AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI);
            try {
                removeServerFromDb(server);
                // remove the server from resource manager
                runVdsCommand(VDSCommandType.RemoveVds, new RemoveVdsVDSCommandParameters(server.getId()));
                serverRemoved = true;
            } catch (Exception e) {
                log.errorFormat("Error while removing server {0} from database!", server.getName(), e);
            }
        }
    }
    if (serverRemoved) {
        log.infoFormat("Servers detached using gluster CLI  is removed from engine after inspecting the Gluster servers list {0}", fetchedServers);
    }
}
#method_after
private void removeDetachedServers(List<VDS> existingServers, List<GlusterServerInfo> fetchedServers) {
    log.debugFormat("Existing servers list returned {0} comparing with fetched servers {1)", existingServers, fetchedServers);
    boolean serverRemoved = false;
    for (VDS server : existingServers) {
        if (isRemovableStatus(server.getStatus()) && serverDetached(server, fetchedServers)) {
            log.infoFormat("Server {0} has been removed directly using the gluster CLI. Removing it from engine as well.", server.getName());
            logUtil.logServerMessage(server, AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI);
            try {
                removeServerFromDb(server);
                // remove the server from resource manager
                runVdsCommand(VDSCommandType.RemoveVds, new RemoveVdsVDSCommandParameters(server.getId()));
                serverRemoved = true;
            } catch (Exception e) {
                log.errorFormat("Error while removing server {0} from database!", server.getName(), e);
            }
        }
    }
    if (serverRemoved) {
        log.infoFormat("Servers detached using gluster CLI  is removed from engine after inspecting the Gluster servers list returned {0} " + "- comparing with db servers {1}", fetchedServers, existingServers);
    }
}
#end_block

#method_before
private void setupMock() {
    clusterUtils = mock(ClusterUtils.class);
    vdsDao = mock(VdsDAO.class);
    volumeDao = mock(GlusterVolumeDao.class);
    glusterServerDao = mock(GlusterServerDao.class);
    stepDao = mock(StepDao.class);
    jobRepository = mock(JobRepository.class);
    doReturn(vdsDao).when(getQuery()).getVdsDao();
    doReturn(volumeDao).when(getQuery()).getGlusterVolumeDao();
    doReturn(stepDao).when(getQuery()).getStepDao();
    doReturn(glusterServerDao).when(getQuery()).getGlusterServerDao();
    doReturn(CLUSTER_ID).when(getQueryParameters()).getClusterId();
    doReturn(VOLUME_ID).when(getQueryParameters()).getVolumeId();
    doReturn(jobRepository).when(getQuery()).getJobRepository();
    when(volumeDao.getById(VOLUME_ID)).thenReturn(getVolume());
    when(stepDao.getStepsByExternalId(any(Guid.class))).thenReturn(getStepsList());
    when(glusterServerDao.getByGlusterServerUuid(any(Guid.class))).thenReturn(getGlusterServer());
    when(vdsDao.get(any(Guid.class))).thenReturn(getVds(VDSStatus.Up));
    doNothing().when(jobRepository).updateStep(any(Step.class));
    doNothing().when(getQuery()).releaseVolumeLock(any(Guid.class));
    VDSReturnValue returnValue = new VDSReturnValue();
    returnValue.setSucceeded(true);
    returnValue.setReturnValue(expectedVolumeStatusDetails);
    doReturn(returnValue).when(getQuery()).runVdsCommand(eq(VDSCommandType.GetGlusterVolumeRemoveBricksStatus), any(VDSParametersBase.class));
}
#method_after
private void setupMock() {
    clusterUtils = mock(ClusterUtils.class);
    vdsDao = mock(VdsDAO.class);
    clusterDao = mock(VdsGroupDAO.class);
    volumeDao = mock(GlusterVolumeDao.class);
    glusterServerDao = mock(GlusterServerDao.class);
    stepDao = mock(StepDao.class);
    taskUtils = mock(GlusterTaskUtils.class);
    doReturn(vdsDao).when(getQuery()).getVdsDao();
    doReturn(clusterDao).when(getQuery()).getClusterDao();
    doReturn(volumeDao).when(getQuery()).getGlusterVolumeDao();
    doReturn(stepDao).when(getQuery()).getStepDao();
    doReturn(glusterServerDao).when(getQuery()).getGlusterServerDao();
    doReturn(CLUSTER_ID).when(getQueryParameters()).getClusterId();
    doReturn(VOLUME_ID).when(getQueryParameters()).getVolumeId();
    doReturn(taskUtils).when(getQuery()).getGlusterTaskUtils();
    when(volumeDao.getById(VOLUME_ID)).thenReturn(getVolume());
    when(stepDao.getStepsByExternalId(any(Guid.class))).thenReturn(getStepsList());
    when(glusterServerDao.getByGlusterServerUuid(any(Guid.class))).thenReturn(getGlusterServer());
    when(vdsDao.get(any(Guid.class))).thenReturn(getVds(VDSStatus.Up));
    when(clusterDao.get(any(Guid.class))).thenReturn(getVDSGroup());
    VDSReturnValue returnValue = new VDSReturnValue();
    returnValue.setSucceeded(true);
    returnValue.setReturnValue(expectedVolumeStatusDetails);
    doReturn(returnValue).when(getQuery()).runVdsCommand(eq(VDSCommandType.GetGlusterVolumeRemoveBricksStatus), any(VDSParametersBase.class));
}
#end_block

#method_before
@OnTimerMethodAnnotation("gluster_async_task_poll_event")
public void updateGlusterAsyncTasks() {
    log.debug("Refreshing gluster tasks list");
    List<VDSGroup> clusters = getClusterDao().getAll();
    for (VDSGroup cluster : clusters) {
        updateTasksInCluster(cluster);
    }
}
#method_after
@OnTimerMethodAnnotation("gluster_async_task_poll_event")
public void updateGlusterAsyncTasks() {
    log.debug("Refreshing gluster tasks list");
    List<VDSGroup> clusters = getClusterDao().getAll();
    List<Guid> tasksFromClusters = new ArrayList<>();
    boolean cleanOrphanTasks = true;
    for (VDSGroup cluster : clusters) {
        if (!getGlusterTaskUtils().supportsGlusterAsyncTasksFeature(cluster)) {
            continue;
        }
        try {
            Map<Guid, GlusterAsyncTask> runningTasks = getProvider().getTaskListForCluster(cluster.getId());
            if (runningTasks != null) {
                updateTasksInCluster(cluster, runningTasks);
                tasksFromClusters.addAll(runningTasks.keySet());
            }
        } catch (VdcBLLException e) {
            cleanOrphanTasks = false;
        }
    }
    if (cleanOrphanTasks) {
        cleanUpOrphanTasks(tasksFromClusters);
    }
}
#end_block

#method_before
private Map<Guid, GlusterAsyncTask> updateTasksInCluster(final VDSGroup cluster) {
    if (!supportsGlusterAsyncTasksFeature(cluster)) {
        return null;
    }
    Map<Guid, GlusterAsyncTask> runningTasks = getProvider().getTaskListForCluster(cluster.getId());
    if (runningTasks == null) {
        return null;
    }
    for (Entry<Guid, GlusterAsyncTask> entry : runningTasks.entrySet()) {
        Guid taskId = entry.getKey();
        final GlusterAsyncTask task = entry.getValue();
        List<Step> steps = getStepDao().getStepsByExternalId(taskId);
        if (steps.isEmpty()) {
            createJobForTaskFromCLI(cluster, task);
        }
        // update status in step table
        for (Step step : steps) {
            if (step.getEndTime() != null) {
                // we have already processed the task
                continue;
            }
            step.setDescription(getTaskMessage(cluster, step.getStepType(), task));
            step.setStatus(task.getStatus());
            if (hasTaskCompleted(task)) {
                step.markStepEnded(task.getStatus());
                endStepJob(step);
                releaseVolumeLock(task.getTaskId());
            } else {
                getJobRepository().updateStep(step);
            }
        }
    }
    return runningTasks;
}
#method_after
private void updateTasksInCluster(final VDSGroup cluster, final Map<Guid, GlusterAsyncTask> runningTasks) {
    for (Entry<Guid, GlusterAsyncTask> entry : runningTasks.entrySet()) {
        Guid taskId = entry.getKey();
        final GlusterAsyncTask task = entry.getValue();
        List<Step> steps = getStepDao().getStepsByExternalId(taskId);
        if (steps.isEmpty()) {
            createJobForTaskFromCLI(cluster, task);
        }
        getGlusterTaskUtils().updateSteps(cluster, task, steps);
    }
}
#end_block

#method_before
private Guid addAsyncTaskStep(VDSGroup cluster, GlusterAsyncTask task, StepEnum step, Guid execStepId) {
    VdcReturnValueBase result;
    result = getBackend().runInternalAction(VdcActionType.AddInternalStep, new AddStepParameters(execStepId, getTaskMessage(cluster, step, task), step));
    if (!result.getSucceeded()) {
        // log and return
        throw new VdcBLLException(result.getFault().getError());
    }
    Guid asyncStepId = (Guid) result.getActionReturnValue();
    return asyncStepId;
}
#method_after
private Guid addAsyncTaskStep(VDSGroup cluster, GlusterAsyncTask task, StepEnum step, Guid execStepId) {
    VdcReturnValueBase result;
    result = getBackend().runInternalAction(VdcActionType.AddInternalStep, new AddStepParameters(execStepId, getGlusterTaskUtils().getTaskMessage(cluster, step, task), step));
    if (!result.getSucceeded()) {
        // log and return
        throw new VdcBLLException(result.getFault().getError());
    }
    Guid asyncStepId = (Guid) result.getActionReturnValue();
    return asyncStepId;
}
#end_block

#method_before
private Guid addJob(VDSGroup cluster, GlusterAsyncTask task, VdcActionType actionType) {
    VdcReturnValueBase result = getBackend().runInternalAction(VdcActionType.AddInternalJob, new AddInternalJobParameters(ExecutionMessageDirector.resolveJobMessage(actionType, getMessageMap(cluster, task)), actionType, true));
    if (!result.getSucceeded()) {
        // log and return
        throw new VdcBLLException(result.getFault().getError());
    }
    Guid jobId = (Guid) result.getActionReturnValue();
    return jobId;
}
#method_after
private Guid addJob(VDSGroup cluster, GlusterAsyncTask task, VdcActionType actionType) {
    VdcReturnValueBase result = getBackend().runInternalAction(VdcActionType.AddInternalJob, new AddInternalJobParameters(ExecutionMessageDirector.resolveJobMessage(actionType, getGlusterTaskUtils().getMessageMap(cluster, task)), actionType, true));
    if (!result.getSucceeded()) {
        // log and return
        throw new VdcBLLException(result.getFault().getError());
    }
    Guid jobId = (Guid) result.getActionReturnValue();
    return jobId;
}
#end_block

#method_before
@Before
public void init() {
    MockitoAnnotations.initMocks(this);
    tasksSyncJob = Mockito.spy(GlusterTasksSyncJob.getInstance());
    logUtil = Mockito.spy(GlusterAuditLogUtil.getInstance());
    doNothing().when(logUtil).logClusterMessage(any(Guid.class), any(AuditLogType.class));
    doReturn(clusterDao).when(tasksSyncJob).getClusterDao();
    doReturn(getClusters()).when(clusterDao).getAll();
    doReturn(provider).when(tasksSyncJob).getProvider();
    doReturn(stepDao).when(tasksSyncJob).getStepDao();
    doReturn(volumeDao).when(tasksSyncJob).getVolumeDao();
    doReturn(jobRepository).when(tasksSyncJob).getJobRepository();
    doReturn(backend).when(tasksSyncJob).getBackend();
    doNothing().when(tasksSyncJob).releaseLock(any(Guid.class));
    doNothing().when(tasksSyncJob).endStepJob(any(Step.class));
}
#method_after
@Before
public void init() {
    MockitoAnnotations.initMocks(this);
    tasksSyncJob = Mockito.spy(GlusterTasksSyncJob.getInstance());
    logUtil = Mockito.spy(GlusterAuditLogUtil.getInstance());
    taskUtils = Mockito.spy(GlusterTaskUtils.getInstance());
    doNothing().when(logUtil).logClusterMessage(any(Guid.class), any(AuditLogType.class));
    doReturn(clusterDao).when(tasksSyncJob).getClusterDao();
    doReturn(getClusters()).when(clusterDao).getAll();
    doReturn(provider).when(tasksSyncJob).getProvider();
    doReturn(stepDao).when(tasksSyncJob).getStepDao();
    doReturn(volumeDao).when(tasksSyncJob).getVolumeDao();
    doReturn(volumeDao).when(taskUtils).getVolumeDao();
    doReturn(jobRepository).when(tasksSyncJob).getJobRepository();
    doReturn(jobRepository).when(taskUtils).getJobRepository();
    doReturn(backend).when(tasksSyncJob).getBackend();
    doReturn(taskUtils).when(tasksSyncJob).getGlusterTaskUtils();
    doNothing().when(taskUtils).releaseLock(any(Guid.class));
    doNothing().when(taskUtils).endStepJob(any(Step.class));
    doReturn(null).when(provider).getMonitoredTaskIDsInDB();
}
#end_block

#method_before
@Test
public void updateTasksInCluster() {
    doReturn(getTasks()).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(1)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(1)).endStepJob(any(Step.class));
}
#method_after
@Test
public void updateTasksInCluster() {
    doReturn(getTasks()).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(1)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(1)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testUpdateWhenNoTasks() {
    doReturn(null).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[0], null);
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[1], null);
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
}
#method_after
@Test
public void testUpdateWhenNoTasks() {
    doReturn(null).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[0], null);
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[1], null);
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testCreateTasksStartedFromCLI() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(true, Guid.newGuid())).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
}
#method_after
@Test
public void testCreateTasksStartedFromCLI() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(true, Guid.newGuid())).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testCreateTasksStartedFromCLIWithErrors() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(false, null)).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
}
#method_after
@Test
public void testCreateTasksStartedFromCLIWithErrors() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(false, null)).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testUpdateWhenNoCompletedTasks() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(2)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
}
#method_after
@Test
public void testUpdateWhenNoCompletedTasks() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(2)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testUpdateWhenAbortedTasks() {
    doReturn(getTasks(JobExecutionStatus.ABORTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(2)).endStepJob(any(Step.class));
}
#method_after
@Test
public void testUpdateWhenAbortedTasks() {
    doReturn(getTasks(JobExecutionStatus.ABORTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(2)).endStepJob(any(Step.class));
}
#end_block

#method_before
private void prepareMocks() {
    doReturn(getVolume(0)).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[0]);
    doReturn(getVolume(1)).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[1]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[0]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[1]);
}
#method_after
private void prepareMocks() {
    doReturn(getVolume(0)).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[0]);
    doReturn(getVolume(1)).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[1]);
    doReturn(getVolume(1)).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[2]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[0]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[1]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[2]);
}
#end_block

#method_before
private GlusterVolumeEntity getVolume(int i) {
    GlusterVolumeEntity vol = new GlusterVolumeEntity();
    vol.setId(VOL_GUIDS[i]);
    return vol;
}
#method_after
private GlusterVolumeEntity getVolume(int i) {
    GlusterVolumeEntity vol = new GlusterVolumeEntity();
    vol.setStatus(GlusterStatus.UP);
    vol.setId(VOL_GUIDS[i]);
    return vol;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    Guid oVirtId = getParameters().getVdsForUniqueId();
    if (oVirtId != null) {
        // if fails to remove deprecated entry, we might attempt to add new oVirt host with an existing unique-id.
        if (!removeDeprecatedOvirtEntry(oVirtId)) {
            log.errorFormat("Failed to remove duplicated oVirt entry with id {0}. Abort adding oVirt Host type", oVirtId);
            throw new VdcBLLException(VdcBllErrors.HOST_ALREADY_EXISTS);
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVdsStaticToDb();
            AddVdsDynamicToDb();
            AddVdsStatisticsToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    // set vds spm id
    if (getVdsGroup().getStoragePoolId() != null) {
        VdsActionParameters tempVar = new VdsActionParameters(getVdsIdRef());
        tempVar.setSessionId(getParameters().getSessionId());
        tempVar.setCompensationEnabled(true);
        CompensationContext compensationContext = getCompensationContext();
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, tempVar, new CommandContext(compensationContext));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            initializeVds();
            AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
            TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
            setSucceeded(true);
            setActionReturnValue(getVdsIdRef());
            // If the installation failed, we don't want to compensate for the failure since it will remove the
            // host, but instead the host should be left in an "install failed" status.
            getCompensationContext().resetCompensation();
            return null;
        }
    });
    // clients). they are installed as part of the approve process
    if (Config.<Boolean>GetValue(ConfigValues.InstallVds) && !getParameters().getAddPending()) {
        final InstallVdsParameters installVdsParameters = new InstallVdsParameters(getVdsId(), getParameters().getPassword());
        installVdsParameters.setAuthMethod(getParameters().getAuthMethod());
        installVdsParameters.setOverrideFirewall(getParameters().getOverrideFirewall());
        installVdsParameters.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        installVdsParameters.setProviderId(getParameters().getProviderId());
        installVdsParameters.setNetworkMappings(getParameters().getNetworkMappings());
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VDS.name().toLowerCase(), getParameters().getvds().getName());
        Step installStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.INSTALLING_HOST, ExecutionMessageDirector.resolveStepMessage(StepEnum.INSTALLING_HOST, values));
        final ExecutionContext installCtx = new ExecutionContext();
        installCtx.setJob(getExecutionContext().getJob());
        installCtx.setStep(installStep);
        installCtx.setMonitored(true);
        installCtx.setShouldEndJob(true);
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                Backend.getInstance().runInternalAction(VdcActionType.InstallVds, installVdsParameters, new CommandContext(installCtx));
            }
        });
        ExecutionHandler.setAsyncJob(getExecutionContext(), true);
    } else {
        // Also gluster peer probe is not needed when importing an existing gluster cluster
        if (isGlusterSupportEnabled() && getAllVds(getVdsGroupId()).size() > 1) {
            String hostName = (getParameters().getvds().getHostName().isEmpty()) ? getParameters().getvds().getManagementIp() : getParameters().getvds().getHostName();
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.AddGlusterServer, new AddGlusterServerVDSParameters(upServer.getId(), hostName));
            setSucceeded(returnValue.getSucceeded());
            if (!getSucceeded()) {
                getReturnValue().getFault().setError(returnValue.getVdsError().getCode());
                getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage());
                errorType = AuditLogType.GLUSTER_SERVER_ADD_FAILED;
                return;
            }
        }
    }
}
#method_after
@Override
protected void executeCommand() {
    Guid oVirtId = getParameters().getVdsForUniqueId();
    if (oVirtId != null) {
        // if fails to remove deprecated entry, we might attempt to add new oVirt host with an existing unique-id.
        if (!removeDeprecatedOvirtEntry(oVirtId)) {
            log.errorFormat("Failed to remove duplicated oVirt entry with id {0}. Abort adding oVirt Host type", oVirtId);
            throw new VdcBLLException(VdcBllErrors.HOST_ALREADY_EXISTS);
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVdsStaticToDb();
            AddVdsDynamicToDb();
            AddVdsStatisticsToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    // set vds spm id
    if (getVdsGroup().getStoragePoolId() != null) {
        VdsActionParameters tempVar = new VdsActionParameters(getVdsIdRef());
        tempVar.setSessionId(getParameters().getSessionId());
        tempVar.setCompensationEnabled(true);
        CompensationContext compensationContext = getCompensationContext();
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, tempVar, new CommandContext(compensationContext));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            initializeVds();
            AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
            TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
            setSucceeded(true);
            setActionReturnValue(getVdsIdRef());
            // If the installation failed, we don't want to compensate for the failure since it will remove the
            // host, but instead the host should be left in an "install failed" status.
            getCompensationContext().resetCompensation();
            return null;
        }
    });
    // clients). they are installed as part of the approve process
    if (Config.<Boolean>GetValue(ConfigValues.InstallVds) && !getParameters().getAddPending()) {
        final InstallVdsParameters installVdsParameters = new InstallVdsParameters(getVdsId(), getParameters().getPassword());
        installVdsParameters.setAuthMethod(getParameters().getAuthMethod());
        installVdsParameters.setOverrideFirewall(getParameters().getOverrideFirewall());
        installVdsParameters.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        installVdsParameters.setProviderId(getParameters().getProviderId());
        installVdsParameters.setNetworkMappings(getParameters().getNetworkMappings());
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VDS.name().toLowerCase(), getParameters().getvds().getName());
        Step installStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.INSTALLING_HOST, ExecutionMessageDirector.resolveStepMessage(StepEnum.INSTALLING_HOST, values));
        final ExecutionContext installCtx = new ExecutionContext();
        installCtx.setJob(getExecutionContext().getJob());
        installCtx.setStep(installStep);
        installCtx.setMonitored(true);
        installCtx.setShouldEndJob(true);
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                Backend.getInstance().runInternalAction(VdcActionType.InstallVds, installVdsParameters, new CommandContext(installCtx));
            }
        });
        ExecutionHandler.setAsyncJob(getExecutionContext(), true);
    }
}
#end_block

#method_before
private void AddVdsDynamicToDb() {
    VdsDynamic vdsDynamic = new VdsDynamic();
    vdsDynamic.setId(getParameters().getVdsStaticData().getId());
    // TODO: oVirt type - here oVirt behaves like power client?
    if (Config.<Boolean>GetValue(ConfigValues.InstallVds) && getParameters().getVdsStaticData().getVdsType() == VDSType.VDS) {
        vdsDynamic.setStatus(VDSStatus.Installing);
    } else if (getParameters().getAddPending()) {
        vdsDynamic.setStatus(VDSStatus.PendingApproval);
    }
    DbFacade.getInstance().getVdsDynamicDao().save(vdsDynamic);
    getCompensationContext().snapshotNewEntity(vdsDynamic);
}
#method_after
private void AddVdsDynamicToDb() {
    VdsDynamic vdsDynamic = new VdsDynamic();
    vdsDynamic.setId(getParameters().getVdsStaticData().getId());
    // TODO: oVirt type - here oVirt behaves like power client?
    if (getParameters().getAddPending()) {
        vdsDynamic.setStatus(VDSStatus.PendingApproval);
    } else if (Config.<Boolean>GetValue(ConfigValues.InstallVds)) {
        vdsDynamic.setStatus(VDSStatus.Installing);
    }
    DbFacade.getInstance().getVdsDynamicDao().save(vdsDynamic);
    getCompensationContext().snapshotNewEntity(vdsDynamic);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    setVdsGroupId(getParameters().getVdsStaticData().getVdsGroupId());
    getParameters().setVdsForUniqueId(null);
    // Check if this is a valid cluster
    boolean returnValue = validateVdsGroup();
    if (returnValue) {
        VDS vds = getParameters().getvds();
        String vdsName = vds.getName();
        String hostName = vds.getHostName();
        int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
        // check that vds name is not null or empty
        if (vdsName == null || vdsName.isEmpty()) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
        // check that VDS name is not too long
        } else if (vdsName.length() > maxVdsNameLength) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
        // check that VDS hostname does not contain special characters.
        } else if (!ValidationUtils.validHostname(hostName)) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_VDS_HOSTNAME);
        } else if (getVdsDAO().getByName(vdsName) != null) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
        } else if (getVdsDAO().getAllForHostname(hostName).size() != 0) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST);
        } else if (!ValidationUtils.validatePort(vds.getSshPort())) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_INVALID_SSH_PORT);
        } else if ((StringUtils.isBlank(vds.getSshUsername())) || (vds.getSshUsername().length() > BusinessEntitiesDefinitions.USER_LOGIN_NAME_SIZE)) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_INVALID_SSH_USERNAME);
        } else {
            returnValue = returnValue && validateSingleHostAttachedToLocalStorage();
            if (Config.<Boolean>GetValue(ConfigValues.EncryptHostCommunication) && !EngineEncryptionUtils.haveKey()) {
                returnValue = failCanDoAction(VdcBllMessages.VDS_TRY_CREATE_SECURE_CERTIFICATE_NOT_FOUND);
            } else if (!getParameters().getAddPending() && (getParameters().getAuthMethod() == AuthenticationMethod.Password) && StringUtils.isEmpty(getParameters().getPassword())) {
                // We block vds installations if it's not a RHEV-H and password is empty
                // Note that this may override local host SSH policy. See BZ#688718.
                returnValue = failCanDoAction(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
            } else if (!isPowerManagementLegal()) {
                returnValue = false;
            } else {
                returnValue = returnValue && canConnect(vds);
            }
        }
    }
    if (returnValue && isGlusterSupportEnabled()) {
        if (clusterHasServers()) {
            upServer = getClusterUtils().getUpServer(getVdsGroupId());
            if (upServer == null) {
                returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE);
            }
        }
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    setVdsGroupId(getParameters().getVdsStaticData().getVdsGroupId());
    getParameters().setVdsForUniqueId(null);
    // Check if this is a valid cluster
    boolean returnValue = validateVdsGroup();
    if (returnValue) {
        VDS vds = getParameters().getvds();
        String vdsName = vds.getName();
        String hostName = vds.getHostName();
        int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
        // check that vds name is not null or empty
        if (vdsName == null || vdsName.isEmpty()) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
        // check that VDS name is not too long
        } else if (vdsName.length() > maxVdsNameLength) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
        // check that VDS hostname does not contain special characters.
        } else if (!ValidationUtils.validHostname(hostName)) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_VDS_HOSTNAME);
        } else if (getVdsDAO().getByName(vdsName) != null) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
        } else if (getVdsDAO().getAllForHostname(hostName).size() != 0) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST);
        } else if (!ValidationUtils.validatePort(vds.getSshPort())) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_INVALID_SSH_PORT);
        } else if ((StringUtils.isBlank(vds.getSshUsername())) || (vds.getSshUsername().length() > BusinessEntitiesDefinitions.USER_LOGIN_NAME_SIZE)) {
            returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_INVALID_SSH_USERNAME);
        } else {
            returnValue = returnValue && validateSingleHostAttachedToLocalStorage();
            if (Config.<Boolean>GetValue(ConfigValues.EncryptHostCommunication) && !EngineEncryptionUtils.haveKey()) {
                returnValue = failCanDoAction(VdcBllMessages.VDS_TRY_CREATE_SECURE_CERTIFICATE_NOT_FOUND);
            } else if (!getParameters().getAddPending() && (getParameters().getAuthMethod() == AuthenticationMethod.Password) && StringUtils.isEmpty(getParameters().getPassword())) {
                // We block vds installations if it's not a RHEV-H and password is empty
                // Note that this may override local host SSH policy. See BZ#688718.
                returnValue = failCanDoAction(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
            } else if (!isPowerManagementLegal()) {
                returnValue = false;
            } else {
                returnValue = returnValue && canConnect(vds);
            }
        }
    }
    if (returnValue && isGlusterSupportEnabled()) {
        if (clusterHasServers()) {
            VDS upServer = getClusterUtils().getUpServer(getVdsGroupId());
            if (upServer == null) {
                returnValue = failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE);
            }
        }
    }
    return returnValue;
}
#end_block

#method_before
protected boolean canConnect(VDS vds) {
    // execute the connectivity and id uniqueness validation for VDS type hosts
    if (vds.getVdsType() == VDSType.VDS && Config.<Boolean>GetValue(ConfigValues.InstallVds)) {
        EngineSSHClient sshclient = null;
        try {
            sshclient = getSSHClient();
            sshclient.connect();
            sshclient.authenticate();
            String hostUUID = getInstalledVdsIdIfExists(sshclient);
            if (hostUUID != null && getVdsDAO().getAllWithUniqueId(hostUUID).size() != 0) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_UUID_EXIST);
            }
            return isValidGlusterPeer(sshclient, vds.getVdsGroupId());
        } catch (AuthenticationException e) {
            log.errorFormat("Failed to authenticate session with host {0}", vds.getName(), e);
            return failCanDoAction(VdcBllMessages.VDS_CANNOT_AUTHENTICATE_TO_SERVER);
        } catch (SecurityException e) {
            log.errorFormat("Failed to connect to host {0}, fingerprint: {1}", vds.getName(), vds.getSshKeyFingerprint(), e);
            addCanDoActionMessage(VdcBllMessages.VDS_SECURITY_CONNECTION_ERROR);
            addCanDoActionMessage(String.format("$ErrorMessage %1$s", e.getMessage()));
            return failCanDoAction(VdcBllMessages.VDS_CANNOT_AUTHENTICATE_TO_SERVER);
        } catch (Exception e) {
            log.errorFormat("Failed to establish session with host {0}", vds.getName(), e);
            return failCanDoAction(VdcBllMessages.VDS_CANNOT_CONNECT_TO_SERVER);
        } finally {
            if (sshclient != null) {
                sshclient.disconnect();
            }
        }
    }
    return true;
}
#method_after
protected boolean canConnect(VDS vds) {
    // execute the connectivity and id uniqueness validation for VDS type hosts
    if (!getParameters().getAddPending() && Config.<Boolean>GetValue(ConfigValues.InstallVds)) {
        try (final EngineSSHClient sshclient = getSSHClient()) {
            sshclient.connect();
            sshclient.authenticate();
            String hostUUID = getInstalledVdsIdIfExists(sshclient);
            if (hostUUID != null && getVdsDAO().getAllWithUniqueId(hostUUID).size() != 0) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_UUID_EXIST);
            }
            return isValidGlusterPeer(sshclient, vds.getVdsGroupId());
        } catch (AuthenticationException e) {
            log.errorFormat("Failed to authenticate session with host {0}", vds.getName(), e);
            return failCanDoAction(VdcBllMessages.VDS_CANNOT_AUTHENTICATE_TO_SERVER);
        } catch (SecurityException e) {
            log.errorFormat("Failed to connect to host {0}, fingerprint: {1}", vds.getName(), vds.getSshKeyFingerprint(), e);
            addCanDoActionMessage(VdcBllMessages.VDS_SECURITY_CONNECTION_ERROR);
            addCanDoActionMessage(String.format("$ErrorMessage %1$s", e.getMessage()));
            return failCanDoAction(VdcBllMessages.VDS_CANNOT_AUTHENTICATE_TO_SERVER);
        } catch (Exception e) {
            log.errorFormat("Failed to establish session with host {0}", vds.getName(), e);
            return failCanDoAction(VdcBllMessages.VDS_CANNOT_CONNECT_TO_SERVER);
        }
    }
    return true;
}
#end_block

#method_before
private VDSGroup getVdsGroup() {
    VDSGroup vdsGroup = new VDSGroup();
    vdsGroup.setId(CLUSTER_ID);
    vdsGroup.setcompatibility_version(Version.v3_3);
    return vdsGroup;
}
#method_after
private VDSGroup getVdsGroup(Version ver) {
    VDSGroup vdsGroup = new VDSGroup();
    vdsGroup.setId(CLUSTER_ID);
    vdsGroup.setcompatibility_version(ver);
    return vdsGroup;
}
#end_block

#method_before
private void setupExpectedGlusterServersInfo() {
    expectedServers = new ArrayList<GlusterServerInfo>();
    GlusterServerInfo server = new GlusterServerInfo();
    server = new GlusterServerInfo();
    server.setUuid(server_id3);
    server.setHostnameOrIp(TEST_SERVER3);
    server.setStatus(PeerStatus.CONNECTED);
    expectedServers.add(server);
}
#method_after
private void setupExpectedGlusterServersInfo() {
    expectedServers = new ArrayList<GlusterServerInfo>();
    GlusterServerInfo server = new GlusterServerInfo();
    server.setUuid(server_id3);
    server.setHostnameOrIp(TEST_SERVER3);
    server.setStatus(PeerStatus.CONNECTED);
    expectedServers.add(server);
}
#end_block

#method_before
private void setupMock() throws Exception {
    vdsBrokerFrontend = mock(VDSBrokerFrontend.class);
    clusterUtils = mock(ClusterUtils.class);
    vdsDaoMock = mock(VdsDAO.class);
    vdsGroupDaoMock = mock(VdsGroupDAO.class);
    dbUtils = mock(GlusterDBUtils.class);
    doReturn(vdsBrokerFrontend).when(getQuery()).getResourceManager();
    doReturn(clusterUtils).when(getQuery()).getClusterUtils();
    doReturn(dbUtils).when(getQuery()).getDbUtils();
    doReturn(getVds(VDSStatus.Up)).when(clusterUtils).getUpServer(CLUSTER_ID);
    VDSReturnValue returnValue = getVDSReturnValue();
    when(vdsBrokerFrontend.RunVdsCommand(eq(VDSCommandType.GlusterServersList), any(VDSParametersBase.class))).thenReturn(returnValue);
    when(vdsGroupDaoMock.get(any(Guid.class))).thenReturn(getVdsGroup());
    doReturn(params.getClusterId()).when(getQueryParameters()).getClusterId();
    doReturn(true).when(getQueryParameters()).isServerKeyFingerprintRequired();
    doReturn(vdsDaoMock).when(clusterUtils).getVdsDao();
    doReturn(vdsGroupDaoMock).when(getQuery()).getVdsGroupDao();
    doReturn(serversList).when(vdsDaoMock).getAllForVdsGroup(CLUSTER_ID);
    doReturn(true).when(dbUtils).serverExists(any(Guid.class), eq(TEST_SERVER1));
    doReturn(false).when(dbUtils).serverExists(any(Guid.class), eq(TEST_SERVER3));
}
#method_after
private void setupMock() throws Exception {
    vdsBrokerFrontend = mock(VDSBrokerFrontend.class);
    clusterUtils = mock(ClusterUtils.class);
    vdsDaoMock = mock(VdsDAO.class);
    vdsGroupDaoMock = mock(VdsGroupDAO.class);
    dbUtils = mock(GlusterDBUtils.class);
    backendInternal = mock(BackendInternal.class);
    doReturn(vdsBrokerFrontend).when(getQuery()).getResourceManager();
    doReturn(clusterUtils).when(getQuery()).getClusterUtils();
    doReturn(dbUtils).when(getQuery()).getDbUtils();
    doReturn(getVds(VDSStatus.Up)).when(clusterUtils).getUpServer(CLUSTER_ID);
    doReturn(backendInternal).when(getQuery()).getBackendInstance();
    VDSReturnValue returnValue = getVDSReturnValue();
    when(vdsBrokerFrontend.RunVdsCommand(eq(VDSCommandType.GlusterServersList), any(VDSParametersBase.class))).thenReturn(returnValue);
    VdcQueryReturnValue vdcReturnValue = getVdcReturnValue();
    when(backendInternal.runInternalQuery(eq(VdcQueryType.GetServerSSHKeyFingerprint), any(VdcQueryParametersBase.class))).thenReturn(vdcReturnValue);
    doReturn(params.getClusterId()).when(getQueryParameters()).getClusterId();
    doReturn(true).when(getQueryParameters()).isServerKeyFingerprintRequired();
    doReturn(vdsDaoMock).when(clusterUtils).getVdsDao();
    doReturn(vdsGroupDaoMock).when(getQuery()).getVdsGroupDao();
    doReturn(serversList).when(vdsDaoMock).getAllForVdsGroup(CLUSTER_ID);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Test
public void testExecuteQueryCommand() throws IOException {
    backendInternal = mock(BackendInternal.class);
    doReturn(backendInternal).when(getQuery()).getBackendInstance();
    getQuery().executeQueryCommand();
    Map<String, String> servers = (Map<String, String>) getQuery().getQueryReturnValue().getReturnValue();
    assertNotNull(servers);
    assertEquals(getAddedServers(), servers);
}
#method_after
@SuppressWarnings("unchecked")
@Test
public void testExecuteQueryCommand() throws IOException {
    when(vdsGroupDaoMock.get(any(Guid.class))).thenReturn(getVdsGroup(Version.v3_3));
    getQuery().executeQueryCommand();
    Map<String, String> servers = (Map<String, String>) getQuery().getQueryReturnValue().getReturnValue();
    assertNotNull(servers);
    assertEquals(getAddedServers(), servers);
}
#end_block

#method_before
@Override
@SuppressWarnings("unchecked")
protected void executeQueryCommand() {
    Map<String, String> glusterServers = new HashMap<String, String>();
    VDS upServer = getClusterUtils().getUpServer(getParameters().getClusterId());
    if (upServer != null) {
        VDSReturnValue returnValue = getResourceManager().RunVdsCommand(VDSCommandType.GlusterServersList, new VdsIdVDSCommandParametersBase(upServer.getId()));
        glusterServers = getAddedGlusterServers((List<GlusterServerInfo>) returnValue.getReturnValue());
    }
    // Keep server details in the map only for the servers which are reachable
    Iterator<Map.Entry<String, String>> iterator = glusterServers.entrySet().iterator();
    while (iterator.hasNext()) {
        Map.Entry<String, String> entry = iterator.next();
        if (entry.getValue() == null) {
            iterator.remove();
        }
    }
    getQueryReturnValue().setReturnValue(glusterServers);
}
#method_after
@Override
@SuppressWarnings("unchecked")
protected void executeQueryCommand() {
    Map<String, String> glusterServers = new HashMap<String, String>();
    VDS upServer = getClusterUtils().getUpServer(getParameters().getClusterId());
    if (upServer != null) {
        VDSReturnValue returnValue = getResourceManager().RunVdsCommand(VDSCommandType.GlusterServersList, new VdsIdVDSCommandParametersBase(upServer.getId()));
        glusterServers = getAddedGlusterServers((List<GlusterServerInfo>) returnValue.getReturnValue());
    }
    getQueryReturnValue().setReturnValue(glusterServers);
}
#end_block

#method_before
private Map<String, String> getAddedGlusterServers(List<GlusterServerInfo> glusterServers) {
    Map<String, String> serversAndFingerprint = new HashMap<String, String>();
    for (GlusterServerInfo server : glusterServers) {
        if (server.getStatus() == PeerStatus.CONNECTED && (!serverExists(server))) {
            String fingerprint = null;
            VdcQueryReturnValue returnValue;
            if (getParameters().isServerKeyFingerprintRequired()) {
                returnValue = getBackendInstance().runInternalQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(server.getHostnameOrIp()));
                if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
                    fingerprint = returnValue.getReturnValue().toString();
                }
            }
            serversAndFingerprint.put(server.getHostnameOrIp(), fingerprint == null ? "" : fingerprint);
        }
    }
    return serversAndFingerprint;
}
#method_after
private Map<String, String> getAddedGlusterServers(List<GlusterServerInfo> glusterServers) {
    Map<String, String> serversAndFingerprint = new HashMap<String, String>();
    for (GlusterServerInfo server : glusterServers) {
        if (server.getStatus() == PeerStatus.CONNECTED && (!serverExists(server))) {
            String fingerprint = null;
            VdcQueryReturnValue returnValue;
            if (getParameters().isServerKeyFingerprintRequired()) {
                returnValue = getBackendInstance().runInternalQuery(VdcQueryType.GetServerSSHKeyFingerprint, new ServerParameters(server.getHostnameOrIp()));
                if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
                    fingerprint = returnValue.getReturnValue().toString();
                }
            }
            // Keep server details in the map only for the servers which are reachable
            if (fingerprint != null && !(fingerprint.isEmpty())) {
                serversAndFingerprint.put(server.getHostnameOrIp(), fingerprint);
            }
        }
    }
    return serversAndFingerprint;
}
#end_block

#method_before
private boolean serverExists(GlusterServerInfo glusterServer) {
    VDSGroup vdsGroup = getVdsGroupDao().get(getParameters().getClusterId());
    if (vdsGroup.getcompatibility_version().compareTo(Version.v3_3) >= 0) {
        return getDbUtils().serverExists(glusterServer.getUuid());
    } else {
        return getDbUtils().serverExists(getParameters().getClusterId(), glusterServer.getHostnameOrIp());
    }
}
#method_after
public boolean serverExists(GlusterServerInfo glusterServer) {
    VDSGroup cluster = getVdsGroupDao().get(getParameters().getClusterId());
    if (GlusterFeatureSupported.glusterHostUuidSupported(cluster.getcompatibility_version())) {
        return getDbUtils().serverExists(glusterServer.getUuid());
    } else {
        return getDbUtils().serverExists(getParameters().getClusterId(), glusterServer.getHostnameOrIp());
    }
}
#end_block

#method_before
private void edit(ListModel model, final boolean topTableIsEdited) {
    EntityModelCellTable<ListModel> table = getTable(topTableIsEdited);
    IEventListener listener = topTableIsEdited ? topItemsChangedListener : bottomItemsChangedListener;
    if (listener != null) {
        table.asEditor().flush().getItemsChangedEvent().removeListener(listener);
    }
    listener = new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            getSelectionModel(topTableIsEdited).clear();
        }
    };
    if (topTableIsEdited) {
        topItemsChangedListener = listener;
    } else {
        bottomItemsChangedListener = listener;
    }
    model.getItemsChangedEvent().addListener(listener);
    table.asEditor().edit(model);
}
#method_after
private void edit(ListModel model, final boolean topTableIsEdited) {
    EntityModelCellTable<ListModel> table = getTable(topTableIsEdited);
    ListModel oldModel = table.asEditor().flush();
    IEventListener listener = topTableIsEdited ? topItemsChangedListener : bottomItemsChangedListener;
    if (oldModel != null) {
        oldModel.getItemsChangedEvent().removeListener(listener);
    }
    model.getItemsChangedEvent().addListener(listener);
    table.asEditor().edit(model);
}
#end_block

#method_before
private void updateActionAvailability() {
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    boolean allowRemove = true;
    boolean allowStopRemove = true;
    boolean allowCommitRemove = true;
    boolean allowStatusRemove = true;
    boolean allowRetain = true;
    boolean allowReplace = true;
    boolean allowAdvanced = true;
    if (volumeEntity == null || getSelectedItems() == null || getSelectedItems().size() == 0) {
        allowRemove = false;
        allowReplace = false;
        allowAdvanced = false;
    } else {
        GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
        if (volumeTask != null && (volumeTask.getStatus() == JobExecutionStatus.STARTED || volumeTask.getType() == GlusterTaskType.REMOVE_BRICK && volumeTask.getStatus() == JobExecutionStatus.FINISHED)) {
            allowRemove = false;
        } else if (volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || getSelectedItems().size() == volumeEntity.getBricks().size()) {
            allowRemove = false;
        } else if (volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE && (volumeEntity.getBricks().size() == VolumeListModel.REPLICATE_COUNT_DEFAULT || getSelectedItems().size() > 1)) {
            allowRemove = false;
        }
        if (getSelectedItems().size() == 1) {
            allowReplace = true;
            allowAdvanced = volumeEntity.isOnline() && ((GlusterBrickEntity) getSelectedItems().get(0)).isOnline();
        } else {
            allowReplace = false;
            allowAdvanced = false;
        }
    }
    // Stop/Commit brick removal can be invoked from the Volume(tab) Activities menu as well
    // So no need to check if there are any bricks selected or not, command availability
    // will be decided based on the task on the volume
    allowStopRemove = volumeEntity != null && volumeEntity.getAsyncTask() != null && volumeEntity.getAsyncTask().getType() == GlusterTaskType.REMOVE_BRICK && volumeEntity.getAsyncTask().getStatus() == JobExecutionStatus.STARTED;
    allowCommitRemove = volumeEntity != null && volumeEntity.getAsyncTask() != null && volumeEntity.getAsyncTask().getType() == GlusterTaskType.REMOVE_BRICK && volumeEntity.getAsyncTask().getStatus() == JobExecutionStatus.FINISHED;
    allowRetain = volumeEntity != null && volumeEntity.getAsyncTask() != null && volumeEntity.getAsyncTask().getType() == GlusterTaskType.REMOVE_BRICK && volumeEntity.getAsyncTask().getStatus() == JobExecutionStatus.FINISHED;
    allowStatusRemove = volumeEntity != null && volumeEntity.getAsyncTask() != null && volumeEntity.getAsyncTask().getType() == GlusterTaskType.REMOVE_BRICK;
    getRemoveBricksCommand().setIsExecutionAllowed(allowRemove);
    getStopRemoveBricksCommand().setIsExecutionAllowed(allowStopRemove);
    getCommitRemoveBricksCommand().setIsExecutionAllowed(allowCommitRemove);
    getStatusRemoveBricksCommand().setIsExecutionAllowed(allowStatusRemove);
    getRetainBricksCommand().setIsExecutionAllowed(allowRetain);
    getReplaceBrickCommand().setIsExecutionAllowed(allowReplace);
    getBrickAdvancedDetailsCommand().setIsExecutionAllowed(allowAdvanced);
}
#method_after
private void updateActionAvailability() {
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    boolean allowRemove = true;
    boolean allowReplace = true;
    boolean allowAdvanced = true;
    if (volumeEntity == null || getSelectedItems() == null || getSelectedItems().size() == 0) {
        allowRemove = false;
        allowReplace = false;
        allowAdvanced = false;
    } else {
        GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
        if (volumeTask != null && (volumeTask.getStatus() == JobExecutionStatus.STARTED || volumeTask.getType() == GlusterTaskType.REMOVE_BRICK && volumeTask.getStatus() == JobExecutionStatus.FINISHED)) {
            allowRemove = false;
        } else if (volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || getSelectedItems().size() == volumeEntity.getBricks().size()) {
            allowRemove = false;
        } else if (volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE && (volumeEntity.getBricks().size() == VolumeListModel.REPLICATE_COUNT_DEFAULT || getSelectedItems().size() > 1)) {
            allowRemove = false;
        }
        if (getSelectedItems().size() == 1) {
            allowReplace = true;
            allowAdvanced = volumeEntity.isOnline() && ((GlusterBrickEntity) getSelectedItems().get(0)).isOnline();
        } else {
            allowReplace = false;
            allowAdvanced = false;
        }
    }
    getRemoveBricksCommand().setIsExecutionAllowed(allowRemove);
    getReplaceBrickCommand().setIsExecutionAllowed(allowReplace);
    getBrickAdvancedDetailsCommand().setIsExecutionAllowed(allowAdvanced);
}
#end_block

#method_before
@Override
protected void onEntityChanged() {
    super.onEntityChanged();
    getSearchCommand().execute();
}
#method_after
@Override
protected void onEntityChanged() {
    super.onEntityChanged();
    if (getEntity() != null) {
        GlusterVolumeEntity glusterVolumeEntity = (GlusterVolumeEntity) getEntity();
        setItems(glusterVolumeEntity.getBricks());
    } else {
        setItems(null);
    }
}
#end_block

#method_before
private void stopRemoveBricks() {
    if (getConfirmWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().stopRemoveBricksTitle());
    model.setMessage(ConstantsManager.getInstance().getConstants().stopRemoveBricksMessage());
    // $NON-NLS-1$
    model.setHashName("volume_remove_bricks_stop");
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterBrickEntity brick : volumeEntity.getBricks()) {
        if (brick.getAsyncTask() != null && volumeTask != null && brick.getAsyncTask().getTaskId() != null && brick.getAsyncTask().getTaskId().equals(volumeTask.getTaskId()) && volumeTask.getStatus() == JobExecutionStatus.STARTED) {
            list.add(brick.getQualifiedName());
        }
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OnStopRemoveBricks", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().close());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#method_after
private void stopRemoveBricks() {
    if (getConfirmWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().stopRemoveBricksTitle());
    model.setMessage(ConstantsManager.getInstance().getConstants().stopRemoveBricksMessage());
    // $NON-NLS-1$
    model.setHashName("volume_remove_bricks_stop");
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterBrickEntity brick : volumeEntity.getBricks()) {
        if (brick.getAsyncTask() != null && volumeTask != null && brick.getAsyncTask().getTaskId() != null && brick.getAsyncTask().getTaskId().equals(volumeTask.getTaskId()) && volumeTask.getStatus() == JobExecutionStatus.STARTED) {
            list.add(brick.getQualifiedName());
        }
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OnStopRemoveBricks", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().close());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#end_block

#method_before
private void onStopRemoveBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    if (getSelectedItems() == null || getSelectedItems().isEmpty()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.RunAction(VdcActionType.StopRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
            if (result.getReturnValue().getSucceeded()) {
                showRemoveBricksStatus();
            }
        }
    }, model);
}
#method_after
private void onStopRemoveBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.RunAction(VdcActionType.StopRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
            if (result.getReturnValue().getSucceeded()) {
                showRemoveBricksStatus();
            }
        }
    }, model);
}
#end_block

#method_before
private void commitRemoveBricks() {
    if (getConfirmWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().commitRemoveBricksTitle());
    model.setMessage(ConstantsManager.getInstance().getConstants().commitRemoveBricksMessage());
    // $NON-NLS-1$
    model.setHashName("volume_remove_bricks_commit");
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterBrickEntity brick : volumeEntity.getBricks()) {
        if (brick.getAsyncTask() != null && volumeTask != null && brick.getAsyncTask().getTaskId() != null && brick.getAsyncTask().getTaskId().equals(volumeTask.getTaskId()) && volumeTask.getStatus() == JobExecutionStatus.FINISHED) {
            list.add(brick.getQualifiedName());
        }
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OnCommitRemoveBricks", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().close());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#method_after
private void commitRemoveBricks() {
    if (getConfirmWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().commitRemoveBricksTitle());
    model.setMessage(ConstantsManager.getInstance().getConstants().commitRemoveBricksMessage());
    // $NON-NLS-1$
    model.setHashName("volume_remove_bricks_commit");
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterBrickEntity brick : volumeEntity.getBricks()) {
        if (brick.getAsyncTask() != null && volumeTask != null && brick.getAsyncTask().getTaskId() != null && brick.getAsyncTask().getTaskId().equals(volumeTask.getTaskId()) && volumeTask.getStatus() == JobExecutionStatus.FINISHED) {
            list.add(brick.getQualifiedName());
        }
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OnCommitRemoveBricks", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#end_block

#method_before
private void onCommitRemoveBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.RunAction(VdcActionType.CommitRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
        }
    }, model);
}
#method_after
private void onCommitRemoveBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.RunAction(VdcActionType.CommitRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
        }
    }, model);
}
#end_block

#method_before
private void showRemoveBricksStatus() {
    if (getWindow() != null) {
        return;
    }
    final GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    final ArrayList<GlusterBrickEntity> bricks = new ArrayList<GlusterBrickEntity>();
    for (GlusterBrickEntity brick : volumeEntity.getBricks()) {
        if (brick.getAsyncTask() != null && brick.getAsyncTask().getTaskId() != null) {
            bricks.add(brick);
        }
    }
    final ConfirmationModel cModel = new ConfirmationModel();
    // $NON-NLS-1$
    UICommand removeBrickStatusOk = new UICommand("removeBrickNotAvailable", VolumeBrickListModel.this);
    removeBrickStatusOk.setTitle(ConstantsManager.getInstance().getConstants().ok());
    removeBrickStatusOk.setIsCancel(true);
    cModel.startProgress(ConstantsManager.getInstance().getConstants().rebalanceStatusFetchMessage());
    cModel.getCommands().add(removeBrickStatusOk);
    cModel.setTitle(ConstantsManager.getInstance().getConstants().removeBricksStatusTitle());
    setConfirmWindow(cModel);
    AsyncDataProvider.getGlusterRemoveBricksStatus(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            cModel.stopProgress();
            VdcQueryReturnValue vdcValue = (VdcQueryReturnValue) returnValue;
            if (vdcValue.getSucceeded() || vdcValue.getReturnValue() != null) {
                cancelConfirmation();
                RemoveBrickStatusModel removeBrickStatusModel = new RemoveBrickStatusModel(volumeEntity, bricks);
                removeBrickStatusModel.setTitle(ConstantsManager.getInstance().getConstants().removeBricksStatusTitle());
                setWindow(removeBrickStatusModel);
                removeBrickStatusModel.getVolume().setEntity(volumeEntity.getName());
                removeBrickStatusModel.getCluster().setEntity(volumeEntity.getVdsGroupName());
                GlusterVolumeTaskStatusEntity removeBrickStatusEntity = vdcValue.getReturnValue();
                // $NON-NLS-1$
                UICommand stopRemoveBrickFromStatus = new UICommand("StopRemoveBricksOnStatus", VolumeBrickListModel.this);
                stopRemoveBrickFromStatus.setTitle(ConstantsManager.getInstance().getConstants().stopRemoveBricksButton());
                stopRemoveBrickFromStatus.setIsExecutionAllowed(false);
                removeBrickStatusModel.addStopRemoveBricksCommand(stopRemoveBrickFromStatus);
                // $NON-NLS-1$
                UICommand commitRemoveBrickFromStatus = new UICommand("CommitRemoveBricksOnStatus", VolumeBrickListModel.this);
                commitRemoveBrickFromStatus.setTitle(ConstantsManager.getInstance().getConstants().commitRemoveBricksButton());
                commitRemoveBrickFromStatus.setIsExecutionAllowed(false);
                removeBrickStatusModel.addCommitRemoveBricksCommand(commitRemoveBrickFromStatus);
                // $NON-NLS-1$
                UICommand retainBricksFromStatus = new UICommand("RetainBricksOnStatus", VolumeBrickListModel.this);
                retainBricksFromStatus.setTitle(ConstantsManager.getInstance().getConstants().retainBricksButton());
                retainBricksFromStatus.setIsExecutionAllowed(false);
                removeBrickStatusModel.addRetainBricksCommand(retainBricksFromStatus);
                // $NON-NLS-1$
                UICommand cancelCommand = new UICommand("CancelRemoveBricksStatus", VolumeBrickListModel.this);
                cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().close());
                cancelCommand.setIsCancel(true);
                removeBrickStatusModel.getCommands().add(cancelCommand);
                removeBrickStatusModel.showStatus(removeBrickStatusEntity);
            } else {
                cModel.setMessage(ConstantsManager.getInstance().getMessages().removeBrickStatusFailed(bricks.toString()));
            }
        }
    }), volumeEntity.getClusterId(), volumeEntity.getId(), bricks);
}
#method_after
private void showRemoveBricksStatus() {
    if (getWindow() != null) {
        return;
    }
    final GlusterVolumeEntity volumeEntity = getVolumeEntity();
    final ArrayList<GlusterBrickEntity> bricks = new ArrayList<GlusterBrickEntity>();
    for (GlusterBrickEntity brick : volumeEntity.getBricks()) {
        if (brick.getAsyncTask() != null && brick.getAsyncTask().getTaskId() != null) {
            bricks.add(brick);
        }
    }
    final ConfirmationModel cModel = new ConfirmationModel();
    // $NON-NLS-1$
    UICommand removeBrickStatusOk = new UICommand("CancelConfirmation", VolumeBrickListModel.this);
    removeBrickStatusOk.setTitle(ConstantsManager.getInstance().getConstants().ok());
    removeBrickStatusOk.setIsCancel(true);
    cModel.startProgress(ConstantsManager.getInstance().getConstants().rebalanceStatusFetchMessage());
    cModel.getCommands().add(removeBrickStatusOk);
    cModel.setTitle(ConstantsManager.getInstance().getConstants().removeBricksStatusTitle());
    setConfirmWindow(cModel);
    // $NON-NLS-1$
    final UICommand stopRemoveBrickFromStatus = new UICommand("StopRemoveBricksOnStatus", this);
    stopRemoveBrickFromStatus.setTitle(ConstantsManager.getInstance().getConstants().stopRemoveBricksButton());
    stopRemoveBrickFromStatus.setIsExecutionAllowed(false);
    // $NON-NLS-1$
    final UICommand commitRemoveBrickFromStatus = new UICommand("CommitRemoveBricksOnStatus", this);
    commitRemoveBrickFromStatus.setTitle(ConstantsManager.getInstance().getConstants().commitRemoveBricksButton());
    commitRemoveBrickFromStatus.setIsExecutionAllowed(false);
    // $NON-NLS-1$
    final UICommand retainBricksFromStatus = new UICommand("RetainBricksOnStatus", this);
    retainBricksFromStatus.setTitle(ConstantsManager.getInstance().getConstants().retainBricksButton());
    retainBricksFromStatus.setIsExecutionAllowed(false);
    // $NON-NLS-1$
    final UICommand cancelCommand = new UICommand("CancelRemoveBricksStatus", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().close());
    cancelCommand.setIsCancel(true);
    AsyncDataProvider.getGlusterRemoveBricksStatus(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            cModel.stopProgress();
            VdcQueryReturnValue vdcValue = (VdcQueryReturnValue) returnValue;
            if (vdcValue.getSucceeded() && vdcValue.getReturnValue() != null) {
                cancelConfirmation();
                RemoveBrickStatusModel removeBrickStatusModel;
                GlusterVolumeTaskStatusEntity removeBrickStatusEntity = vdcValue.getReturnValue();
                if (getWindow() == null) {
                    removeBrickStatusModel = new RemoveBrickStatusModel(volumeEntity, bricks);
                    removeBrickStatusModel.setTitle(ConstantsManager.getInstance().getConstants().removeBricksStatusTitle());
                    // //$NON-NLS-1$
                    removeBrickStatusModel.setHashName("remove_bricks_status");
                    setWindow(removeBrickStatusModel);
                    removeBrickStatusModel.getVolume().setEntity(volumeEntity.getName());
                    removeBrickStatusModel.getCluster().setEntity(volumeEntity.getVdsGroupName());
                    removeBrickStatusModel.addStopRemoveBricksCommand(stopRemoveBrickFromStatus);
                    removeBrickStatusModel.addCommitRemoveBricksCommand(commitRemoveBrickFromStatus);
                    removeBrickStatusModel.addRetainBricksCommand(retainBricksFromStatus);
                    removeBrickStatusModel.getCommands().add(cancelCommand);
                } else {
                    removeBrickStatusModel = (RemoveBrickStatusModel) getWindow();
                }
                removeBrickStatusModel.showStatus(removeBrickStatusEntity);
            } else {
                cModel.setMessage(ConstantsManager.getInstance().getMessages().removeBrickStatusFailed(bricks.toString()));
            }
        }
    }), volumeEntity.getClusterId(), volumeEntity.getId(), bricks);
}
#end_block

#method_before
private void retainBricks() {
    if (getConfirmWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().retainBricksTitle());
    model.setMessage(ConstantsManager.getInstance().getConstants().retainBricksMessage());
    // $NON-NLS-1$
    model.setHashName("volume_retain_brick");
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterBrickEntity brick : volumeEntity.getBricks()) {
        if (brick.getAsyncTask() != null && volumeTask != null && brick.getAsyncTask().getTaskId() != null && brick.getAsyncTask().getTaskId().equals(volumeTask.getTaskId()) && volumeTask.getStatus() == JobExecutionStatus.FINISHED) {
            list.add(brick.getQualifiedName());
        }
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OnRetainBricks", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().close());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#method_after
private void retainBricks() {
    if (getConfirmWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().retainBricksTitle());
    model.setMessage(ConstantsManager.getInstance().getConstants().retainBricksMessage());
    // $NON-NLS-1$
    model.setHashName("volume_retain_brick");
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterBrickEntity brick : volumeEntity.getBricks()) {
        if (brick.getAsyncTask() != null && volumeTask != null && brick.getAsyncTask().getTaskId() != null && brick.getAsyncTask().getTaskId().equals(volumeTask.getTaskId()) && volumeTask.getStatus() == JobExecutionStatus.FINISHED) {
            list.add(brick.getQualifiedName());
        }
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OnRetainBricks", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().close());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#end_block

#method_before
private void onRetainBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.RunAction(VdcActionType.StopRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
        }
    }, model);
}
#method_after
private void onRetainBricks() {
    if (getConfirmWindow() == null) {
        return;
    }
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    GlusterVolumeEntity volumeEntity = getVolumeEntity();
    ArrayList<GlusterBrickEntity> list = new ArrayList<GlusterBrickEntity>();
    for (Object brickName : model.getItems()) {
        GlusterBrickEntity brick = volumeEntity.getBrickWithQualifiedName((String) brickName);
        if (brick != null) {
            list.add(brick);
        }
    }
    GlusterVolumeRemoveBricksParameters parameter = new GlusterVolumeRemoveBricksParameters(volumeEntity.getId(), list);
    model.startProgress(null);
    Frontend.RunAction(VdcActionType.StopRemoveGlusterVolumeBricks, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            setConfirmWindow(null);
        }
    }, model);
}
#end_block

#method_before
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command.equals(getAddBricksCommand())) {
        checkUpServerAndAddBricks();
    } else if (command.getName().equals("OnAddBricks")) {
        // $NON-NLS-1$
        onAddBricks();
    } else if (command.getName().equals("OnAddBricksInternal")) {
        // $NON-NLS-1$
        onAddBricksInternal();
    } else if (command.getName().equals("CancelConfirmation")) {
        // $NON-NLS-1$
        cancelConfirmation();
    } else if (command.getName().equals("removeBrickNotAvailable")) {
        // $NON-NLS-1$
        setConfirmWindow(null);
    } else if (command.equals(getRemoveBricksCommand())) {
        removeBricks();
    } else if (command.getName().equals("OnRemove")) {
        // $NON-NLS-1$
        onRemoveBricks();
    } else if (command.equals(getStopRemoveBricksCommand())) {
        stopRemoveBricks();
    } else if (command.getName().equals("OnStopRemoveBricks")) {
        // $NON-NLS-1$
        onStopRemoveBricks();
    } else if (command.equals(getCommitRemoveBricksCommand())) {
        commitRemoveBricks();
    } else if (command.getName().equals("OnCommitRemoveBricks")) {
        // $NON-NLS-1$
        onCommitRemoveBricks();
    } else if (command.equals(getStatusRemoveBricksCommand())) {
        showRemoveBricksStatus();
    } else if (command.getName().equals("StopRemoveBricksOnStatus")) {
        // $NON-NLS-1$
        getStopRemoveBricksCommand().execute();
    } else if (command.getName().equals("CommitRemoveBricksOnStatus")) {
        // $NON-NLS-1$
        getCommitRemoveBricksCommand().execute();
    } else if (command.getName().equals("CancelRemoveBricksStatus")) {
        // $NON-NLS-1$
        cancelRemoveBrickStatus();
    } else if (command.equals(getRetainBricksCommand())) {
        retainBricks();
    } else if (command.getName().equals("OnRetainBricks")) {
        // $NON-NLS-1$
        onRetainBricks();
    } else if (command.getName().equals("RetainBricksOnStatus")) {
        // $NON-NLS-1$
        getRetainBricksCommand().execute();
    } else if (command.equals(getReplaceBrickCommand())) {
        replaceBrick();
    } else if (command.getName().equals("OnReplace")) {
        // $NON-NLS-1$
        onReplaceBrick();
    } else if (command.equals(getBrickAdvancedDetailsCommand())) {
        showBrickAdvancedDetails();
    } else if (command.getName().equals("Cancel")) {
        // $NON-NLS-1$
        setWindow(null);
    } else if (command.getName().equals("CancelConfirmation")) {
        // $NON-NLS-1$
        setConfirmWindow(null);
    }
}
#method_after
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command.equals(getAddBricksCommand())) {
        checkUpServerAndAddBricks();
    } else if (command.getName().equals("OnAddBricks")) {
        // $NON-NLS-1$
        onAddBricks();
    } else if (command.getName().equals("OnAddBricksInternal")) {
        // $NON-NLS-1$
        onAddBricksInternal();
    } else if (command.getName().equals("CancelConfirmation")) {
        // $NON-NLS-1$
        cancelConfirmation();
    } else if (command.equals(getRemoveBricksCommand())) {
        removeBricks();
    } else if (command.getName().equals("OnRemove")) {
        // $NON-NLS-1$
        onRemoveBricks();
    } else if (command.equals(getStopRemoveBricksCommand())) {
        stopRemoveBricks();
    } else if (command.getName().equals("OnStopRemoveBricks")) {
        // $NON-NLS-1$
        onStopRemoveBricks();
    } else if (command.equals(getCommitRemoveBricksCommand())) {
        commitRemoveBricks();
    } else if (command.getName().equals("OnCommitRemoveBricks")) {
        // $NON-NLS-1$
        onCommitRemoveBricks();
    } else if (command.equals(getStatusRemoveBricksCommand())) {
        showRemoveBricksStatus();
    } else if (command.getName().equals("StopRemoveBricksOnStatus")) {
        // $NON-NLS-1$
        getStopRemoveBricksCommand().execute();
    } else if (command.getName().equals("CommitRemoveBricksOnStatus")) {
        // $NON-NLS-1$
        getCommitRemoveBricksCommand().execute();
    } else if (command.getName().equals("CancelRemoveBricksStatus")) {
        // $NON-NLS-1$
        cancelRemoveBrickStatus();
    } else if (command.equals(getRetainBricksCommand())) {
        retainBricks();
    } else if (command.getName().equals("OnRetainBricks")) {
        // $NON-NLS-1$
        onRetainBricks();
    } else if (command.getName().equals("RetainBricksOnStatus")) {
        // $NON-NLS-1$
        getRetainBricksCommand().execute();
    } else if (command.equals(getReplaceBrickCommand())) {
        replaceBrick();
    } else if (command.getName().equals("OnReplace")) {
        // $NON-NLS-1$
        onReplaceBrick();
    } else if (command.equals(getBrickAdvancedDetailsCommand())) {
        showBrickAdvancedDetails();
    } else if (command.getName().equals("Cancel")) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#end_block

#method_before
@Override
public void refreshDetails(GlusterVolumeEntity volumeEntity) {
    AsyncDataProvider.getGlusterRemoveBricksStatus(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            VdcQueryReturnValue vdcValue = (VdcQueryReturnValue) returnValue;
            GlusterVolumeTaskStatusEntity statusEntity = vdcValue.getReturnValue();
            if (statusEntity != null) {
                showStatus(statusEntity);
            } else {
                cancelRefresh();
            }
        }
    }), volumeEntity.getClusterId(), volumeEntity.getId(), getBricks());
}
#method_after
@Override
public void refreshDetails(GlusterVolumeEntity volumeEntity) {
    AsyncDataProvider.getGlusterRemoveBricksStatus(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            VdcQueryReturnValue vdcValue = (VdcQueryReturnValue) returnValue;
            GlusterVolumeTaskStatusEntity statusEntity = vdcValue.getReturnValue();
            if (statusEntity != null) {
                showStatus(statusEntity);
            }
        }
    }), volumeEntity.getClusterId(), volumeEntity.getId(), getBricks());
}
#end_block

#method_before
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    VDSExceptionBase outEx;
    switch(returnStatus) {
        case Done:
            return;
        case recovery:
            outEx = new VDSRecoveringException(returnStatus, getReturnStatus().mMessage);
            break;
        case SpmStatusError:
            outEx = new IRSNonOperationalException(getReturnStatus().mMessage);
            break;
        case StoragePoolMasterNotFound:
        case StoragePoolTooManyMasters:
        case StoragePoolWrongMaster:
        case StoragePoolHasPotentialMaster:
        case StorageDomainMasterError:
            outEx = new IRSNoMasterDomainException(getReturnStatus().mMessage);
            break;
        case UnicodeArgumentException:
            outEx = new IRSUnicodeArgumentException(getReturnStatus().mMessage);
            break;
        case TooManyDomainsInStoragePoolError:
        case StorageDomainAlreadyAttached:
        case StorageDomainDescriptionTooLongError:
        case TooManyPVsInVG:
        case createIllegalVolumeSnapshotError:
        case prepareIllegalVolumeError:
        case createVolumeRollbackError:
        case InvalidParameterException:
        case InvalidDefaultExceptionException:
        case NotImplementedException:
        case OperationInProgress:
        case MiscDirCleanupFailure:
        case createVolumeSizeError:
        case IncorrectFormat:
        case VolumeIsBusy:
        case VolumeImageHasChildren:
        case VolumeUnlinkError:
        case OrphanVolumeError:
        case VolumeAlreadyExists:
        case VolumeNonWritable:
        case VolumeNonShareable:
        case VolumeCannotGetParent:
        case SharedVolumeNonWritable:
        case InternalVolumeNonWritable:
        case CannotDeleteSharedVolume:
        case NonLeafVolumeNotWritable:
        case ImagesActionError:
        case ImageValidationError:
        case ImageDeleteError:
        case ImageIsNotEmpty:
        case ImageIsNotLegalChain:
        case OverwriteImageError:
        case MoveTemplateImageError:
        case StoragePoolDisconnectionError:
        case StoragePoolAlreadyExists:
        case IsoCannotBeMasterDomain:
        case CannotConnectMultiplePools:
        case BackupCannotBeMasterDomain:
        case StoragePoolConnected:
        case StoragePoolDescriptionTooLongError:
        case StorageDomainNotInPool:
        case StorageDomainNotEmpty:
        case StorageDomainMetadataCreationError:
        case StorageDomainMetadataFileMissing:
        case StorageDomainMetadataNotFound:
        case StorageDomainAlreadyExists:
        case StorageDomainMasterUnmountError:
        case BlockStorageDomainMasterFSCKError:
        case StorageDomainLayoutError:
        case StorageDomainTypeError:
        case StorageDomainNotMemberOfPool:
        case StorageDomainStatusError:
        case StorageDomainCheckError:
        case StorageDomainTypeNotBackup:
        case StorageDomainStateTransitionIllegal:
        case StorageDomainActive:
        case CannotDetachMasterStorageDomain:
        case StorageDomainInsufficientPermissions:
        case StorageDomainClassError:
        case StorageDomainIsMadeFromTooManyPVs:
        case InvalidTask:
        case UnknownTask:
        case TaskClearError:
        case TaskNotFinished:
        case InvalidTaskType:
        case AddTaskError:
        case TaskInProgress:
        case TaskStateError:
        case TaskAborted:
        case TaskPersistError:
        case InvalidJob:
        case InvalidRecovery:
        case InvalidTaskMng:
        case TaskStateTransitionError:
        case TaskHasRefs:
        case VolumeGroupSizeError:
        case VolumeGroupAlreadyExistsError:
        case VolumeGroupUninitialized:
        case VolumeGroupHasDomainTag:
        case CannotRemoveLogicalVolume:
        case CannotDeactivateLogicalVolume:
        case CannotActivateLogicalVolume:
        case LogicalVolumePermissionsError:
        case LogicalVolumeAlreadyExists:
        case PartitionedPhysDev:
        case DomainAlreadyLocked:
        case DomainLockDoesNotExist:
        case MetaDataKeyError:
        case MetaDataSealIsBroken:
        case MetaDataValidationError:
        case MetaDataMappingError:
        case MetaDataParamError:
        case MetadataOverflowError:
        case ImportUnknownType:
        case ExportError:
        case MergeVolumeRollbackError:
        case ActionStopped:
        case FAILED_CHANGE_CD_IS_MOUNTED:
        case UnsupportedDomainVersion:
        case CurrentVersionTooAdvancedError:
        case iSCSILogoutError:
        case iSCSIDiscoveryError:
        case ISCSI_LOGIN_AUTH_ERROR:
        case PoolUpgradeInProgress:
        case MixedSDVersionError:
        case NoSpaceLeftOnDomain:
        case ImageDoesNotExistInDomainError:
        case NO_IMPLEMENTATION:
        case VOLUME_WAS_NOT_PREPARED_BEFORE_TEARDOWN:
        case IMAGES_NOT_SUPPORTED_ERROR:
        case GET_FILE_LIST_ERROR:
        case STORAGE_DOMAIN_REFRESH_ERROR:
        case VOLUME_GROUP_BLOCK_SIZE_ERROR:
        case MIGRATION_DEST_INVALID_HOSTNAME:
        case ResourceTimeout:
        case DEVICE_BLOCK_SIZE_NOT_SUPPORTED:
            if (this instanceof IrsBrokerCommand) {
                outEx = new IrsOperationFailedNoFailoverException(getReturnStatus().mMessage);
            } else {
                outEx = new VDSErrorException(String.format("Failed in vdscommand to %1$s, error = %2$s", getCommandName(), getReturnStatus().mMessage));
            }
            break;
        case ERR_BAD_ADDR:
            outEx = new VDSNetworkException(getReturnStatus().mMessage);
            break;
        default:
            log.errorFormat("Failed in {0} method", getCommandName());
            outEx = createException();
            log.errorFormat("Error code {0} and error message {1}", returnStatus, outEx.getMessage());
            break;
    }
    VDSError tempVar = new VDSError();
    tempVar.setCode(returnStatus);
    tempVar.setMessage(getReturnStatus().mMessage);
    outEx.setVdsError(tempVar);
    throw new ProxyReturnValueException(outEx);
}
#method_after
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    VDSExceptionBase outEx;
    switch(returnStatus) {
        case Done:
            return;
        case recovery:
            outEx = new VDSRecoveringException(returnStatus, getReturnStatus().mMessage);
            break;
        case SpmStatusError:
            outEx = new IRSNonOperationalException(getReturnStatus().mMessage);
            break;
        case StoragePoolMasterNotFound:
        case StoragePoolTooManyMasters:
        case StoragePoolWrongMaster:
        case StoragePoolHasPotentialMaster:
        case StorageDomainMasterError:
            outEx = new IRSNoMasterDomainException(getReturnStatus().mMessage);
            break;
        case UnicodeArgumentException:
            outEx = new IRSUnicodeArgumentException(getReturnStatus().mMessage);
            break;
        case TooManyDomainsInStoragePoolError:
        case StorageDomainAlreadyAttached:
        case StorageDomainDescriptionTooLongError:
        case TooManyPVsInVG:
        case createIllegalVolumeSnapshotError:
        case prepareIllegalVolumeError:
        case createVolumeRollbackError:
        case InvalidParameterException:
        case InvalidDefaultExceptionException:
        case NotImplementedException:
        case OperationInProgress:
        case MiscDirCleanupFailure:
        case createVolumeSizeError:
        case IncorrectFormat:
        case VolumeIsBusy:
        case VolumeImageHasChildren:
        case VolumeUnlinkError:
        case OrphanVolumeError:
        case VolumeAlreadyExists:
        case VolumeNonWritable:
        case VolumeNonShareable:
        case VolumeCannotGetParent:
        case SharedVolumeNonWritable:
        case InternalVolumeNonWritable:
        case CannotDeleteSharedVolume:
        case NonLeafVolumeNotWritable:
        case ImagesActionError:
        case ImageValidationError:
        case ImageDeleteError:
        case ImageIsNotEmpty:
        case ImageIsNotLegalChain:
        case OverwriteImageError:
        case MoveTemplateImageError:
        case StoragePoolDisconnectionError:
        case StoragePoolAlreadyExists:
        case IsoCannotBeMasterDomain:
        case CannotConnectMultiplePools:
        case BackupCannotBeMasterDomain:
        case StoragePoolConnected:
        case StoragePoolDescriptionTooLongError:
        case StorageDomainNotInPool:
        case StorageDomainNotEmpty:
        case StorageDomainMetadataCreationError:
        case StorageDomainMetadataFileMissing:
        case StorageDomainMetadataNotFound:
        case StorageDomainAlreadyExists:
        case StorageDomainMasterUnmountError:
        case BlockStorageDomainMasterFSCKError:
        case StorageDomainLayoutError:
        case StorageDomainTypeError:
        case StorageDomainNotMemberOfPool:
        case StorageDomainStatusError:
        case StorageDomainCheckError:
        case StorageDomainTypeNotBackup:
        case StorageDomainStateTransitionIllegal:
        case StorageDomainActive:
        case CannotDetachMasterStorageDomain:
        case StorageDomainInsufficientPermissions:
        case StorageDomainClassError:
        case StorageDomainIsMadeFromTooManyPVs:
        case InvalidTask:
        case UnknownTask:
        case TaskClearError:
        case TaskNotFinished:
        case InvalidTaskType:
        case AddTaskError:
        case TaskInProgress:
        case TaskStateError:
        case TaskAborted:
        case TaskPersistError:
        case InvalidJob:
        case InvalidRecovery:
        case InvalidTaskMng:
        case TaskStateTransitionError:
        case TaskHasRefs:
        case VolumeGroupSizeError:
        case VolumeGroupAlreadyExistsError:
        case VolumeGroupUninitialized:
        case VolumeGroupHasDomainTag:
        case CannotRemoveLogicalVolume:
        case CannotDeactivateLogicalVolume:
        case CannotActivateLogicalVolume:
        case LogicalVolumePermissionsError:
        case LogicalVolumeAlreadyExists:
        case PartitionedPhysDev:
        case DomainAlreadyLocked:
        case DomainLockDoesNotExist:
        case MetaDataKeyError:
        case MetaDataSealIsBroken:
        case MetaDataValidationError:
        case MetaDataMappingError:
        case MetaDataParamError:
        case MetadataOverflowError:
        case ImportUnknownType:
        case ExportError:
        case MergeVolumeRollbackError:
        case ActionStopped:
        case FAILED_CHANGE_CD_IS_MOUNTED:
        case UnsupportedDomainVersion:
        case CurrentVersionTooAdvancedError:
        case iSCSILogoutError:
        case iSCSIDiscoveryError:
        case ISCSI_LOGIN_AUTH_ERROR:
        case PoolUpgradeInProgress:
        case MixedSDVersionError:
        case NoSpaceLeftOnDomain:
        case ImageDoesNotExistInDomainError:
        case NO_IMPLEMENTATION:
        case VOLUME_WAS_NOT_PREPARED_BEFORE_TEARDOWN:
        case IMAGES_NOT_SUPPORTED_ERROR:
        case GET_FILE_LIST_ERROR:
        case STORAGE_DOMAIN_REFRESH_ERROR:
        case VOLUME_GROUP_BLOCK_SIZE_ERROR:
        case MIGRATION_DEST_INVALID_HOSTNAME:
        case ResourceTimeout:
        case DEVICE_BLOCK_SIZE_NOT_SUPPORTED:
            if (this instanceof IrsBrokerCommand) {
                outEx = new IrsOperationFailedNoFailoverException(getReturnStatus().mMessage);
            } else {
                outEx = new VDSErrorException(String.format("Failed in vdscommand to %1$s, error = %2$s", getCommandName(), getReturnStatus().mMessage));
            }
            break;
        case ERR_BAD_ADDR:
            outEx = new VDSNetworkException(getReturnStatus().mMessage);
            break;
        default:
            log.errorFormat("Failed in {0} method", getCommandName());
            outEx = createException();
            break;
    }
    VDSError tempVar = new VDSError();
    tempVar.setCode(returnStatus);
    tempVar.setMessage(getReturnStatus().mMessage);
    outEx.setVdsError(tempVar);
    throw outEx;
}
#end_block

#method_before
private VDSExceptionBase createException() {
    final String errorMessage = String.format("Failed to %1$s, error = %2$s", getCommandName(), getReturnStatus().mMessage);
    return createDefaultConcreteException(errorMessage);
}
#method_after
private VDSExceptionBase createException() {
    final String errorMessage = String.format("Failed to %1$s, error = %2$s, code = %3$s", getCommandName(), getReturnStatus().mMessage, getReturnStatus().mCode);
    return createDefaultConcreteException(errorMessage);
}
#end_block

#method_before
@Override
protected void executeIrsBrokerCommand() {
    setReturnValue(Guid.Empty);
    log.info("-- executeIrsBrokerCommand: calling 'createVolume' with two new parameters: description and UUID");
    log.infoFormat("-- createVolume parameters: sdUUID={0} spUUID={1} imgGUID={2} size={3} bytes olFormat={4} volType={5} volUUID={6} descr={7} srcImgGUID={8} srcVolUUID={9}", getParameters().getStorageDomainId().toString(), getParameters().getStoragePoolId().toString(), getParameters().getImageGroupId().toString(), getParameters().getImageSizeInBytes(), getParameters().getVolumeFormat().name(), getParameters().getImageType().name(), getParameters().getNewImageID().toString(), getParameters().getNewImageDescription(), Guid.Empty.toString(), Guid.Empty.toString());
    // NOTE: The 'uuidReturn' variable will contain the taskID and not the
    // created image id!
    uuidReturn = getIrsProxy().createVolume(getParameters().getStorageDomainId().toString(), getParameters().getStoragePoolId().toString(), getParameters().getImageGroupId().toString(), (Long.valueOf(getParameters().getImageSizeInBytes())).toString(), getParameters().getVolumeFormat().getValue(), getParameters().getImageType().getValue(), 2, getParameters().getNewImageID().toString(), getParameters().getNewImageDescription(), Guid.Empty.toString(), Guid.Empty.toString());
    proceedProxyReturnValue();
    Guid taskID = new Guid(uuidReturn.mUuid);
    mCreatedImageId = getParameters().getNewImageID().toString();
    setReturnValue(new Guid(mCreatedImageId));
    getVDSReturnValue().setCreationInfo(new AsyncTaskCreationInfo(taskID, AsyncTaskType.createVolume, getParameters().getStoragePoolId()));
}
#method_after
@Override
protected void executeIrsBrokerCommand() {
    setReturnValue(Guid.Empty);
    log.info("-- executeIrsBrokerCommand: calling 'createVolume' with two new parameters: description and UUID");
    // NOTE: The 'uuidReturn' variable will contain the taskID and not the
    // created image id!
    uuidReturn = getIrsProxy().createVolume(getParameters().getStorageDomainId().toString(), getParameters().getStoragePoolId().toString(), getParameters().getImageGroupId().toString(), (Long.valueOf(getParameters().getImageSizeInBytes())).toString(), getParameters().getVolumeFormat().getValue(), getParameters().getImageType().getValue(), 2, getParameters().getNewImageID().toString(), getParameters().getNewImageDescription(), Guid.Empty.toString(), Guid.Empty.toString());
    proceedProxyReturnValue();
    Guid taskID = new Guid(uuidReturn.mUuid);
    mCreatedImageId = getParameters().getNewImageID().toString();
    setReturnValue(new Guid(mCreatedImageId));
    getVDSReturnValue().setCreationInfo(new AsyncTaskCreationInfo(taskID, AsyncTaskType.createVolume, getParameters().getStoragePoolId()));
}
#end_block

#method_before
@Override
protected void executeIrsBrokerCommand() {
    setReturnValue(Guid.Empty);
    log.info("-- executeIrsBrokerCommand: calling 'createVolume' with two new parameters: description and UUID");
    log.infoFormat("-- createVolume parameters: sdUUID={0} spUUID={1} imgGUID={2} size={3} bytes volFormat={4} volType={5} volUUID={6} descr={7} srcImgGUID={8} srcVolUUID={9}", getParameters().getStorageDomainId().toString(), getParameters().getStoragePoolId().toString(), getParameters().getImageGroupId().toString(), getParameters().getImageSizeInBytes(), getParameters().getVolumeFormat().name(), getParameters().getImageType().name(), getParameters().getNewImageID().toString(), getParameters().getNewImageDescription(), getParameters().getSourceImageGroupId().toString(), getParameters().getImageId().toString());
    // NOTE: The 'uuidReturn' variable will contain the taskID and not
    // the created image id!
    uuidReturn = getIrsProxy().createVolume(getParameters().getStorageDomainId().toString(), getParameters().getStoragePoolId().toString(), getParameters().getImageGroupId().toString(), (Long.valueOf(getParameters().getImageSizeInBytes())).toString(), getParameters().getVolumeFormat().getValue(), getParameters().getImageType().getValue(), 2, getParameters().getNewImageID().toString(), getParameters().getNewImageDescription(), getParameters().getSourceImageGroupId().toString(), getParameters().getImageId().toString());
    proceedProxyReturnValue();
    Guid taskID = new Guid(uuidReturn.mUuid);
    mCreatedImageId = getParameters().getNewImageID().toString();
    setReturnValue(new Guid(mCreatedImageId));
    getVDSReturnValue().setCreationInfo(new AsyncTaskCreationInfo(taskID, AsyncTaskType.createVolume, getParameters().getStoragePoolId()));
}
#method_after
@Override
protected void executeIrsBrokerCommand() {
    setReturnValue(Guid.Empty);
    log.info("-- executeIrsBrokerCommand: calling 'createVolume' with two new parameters: description and UUID");
    // NOTE: The 'uuidReturn' variable will contain the taskID and not
    // the created image id!
    uuidReturn = getIrsProxy().createVolume(getParameters().getStorageDomainId().toString(), getParameters().getStoragePoolId().toString(), getParameters().getImageGroupId().toString(), (Long.valueOf(getParameters().getImageSizeInBytes())).toString(), getParameters().getVolumeFormat().getValue(), getParameters().getImageType().getValue(), 2, getParameters().getNewImageID().toString(), getParameters().getNewImageDescription(), getParameters().getSourceImageGroupId().toString(), getParameters().getImageId().toString());
    proceedProxyReturnValue();
    Guid taskID = new Guid(uuidReturn.mUuid);
    mCreatedImageId = getParameters().getNewImageID().toString();
    setReturnValue(new Guid(mCreatedImageId));
    getVDSReturnValue().setCreationInfo(new AsyncTaskCreationInfo(taskID, AsyncTaskType.createVolume, getParameters().getStoragePoolId()));
}
#end_block

#method_before
public void setAlignment(String value) {
    if (privateAlignment == null || !privateAlignment.equals(value)) {
        privateAlignment = value;
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Alignment"));
    }
}
#method_after
public void setAlignment(String value) {
    if (!StringHelper.stringsEqual(privateAlignment, value)) {
        privateAlignment = value;
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Alignment"));
    }
}
#end_block

#method_before
@Override
public void validateEnums(VM vm) {
    if (vm.isSetType()) {
        validateEnum(VmType.class, vm.getType(), true);
    }
    if (vm.isSetUsb()) {
        usbValidator.validateEnums(vm.getUsb());
    }
    if (vm.isSetOs()) {
        osValidator.validateEnums(vm.getOs());
    }
    if (vm.isSetDisplay()) {
        displayValidator.validateEnums(vm.getDisplay());
    }
    if (vm.isSetPlacementPolicy()) {
        placementPolicyValidator.validateEnums(vm.getPlacementPolicy());
    }
    if (vm.isSetPayloads()) {
        for (Payload payload : vm.getPayloads().getPayload()) {
            payloadValidator.validateEnums(payload);
        }
    }
    if (vm.isSetInitialization()) {
        if (vm.getInitialization().isSetCloudInit()) {
            cloudInitValidator.validateEnums(vm.getInitialization().getCloudInit());
        }
    }
}
#method_after
@Override
public void validateEnums(VM vm) {
    if (vm.isSetType()) {
        validateEnum(VmType.class, vm.getType(), true);
    }
    if (vm.isSetUsb()) {
        usbValidator.validateEnums(vm.getUsb());
    }
    if (vm.isSetOs()) {
        osValidator.validateEnums(vm.getOs());
    }
    if (vm.isSetDisplay()) {
        displayValidator.validateEnums(vm.getDisplay());
    }
    if (vm.isSetPlacementPolicy()) {
        placementPolicyValidator.validateEnums(vm.getPlacementPolicy());
    }
    if (vm.isSetPayloads()) {
        for (Payload payload : vm.getPayloads().getPayload()) {
            payloadValidator.validateEnums(payload);
        }
    }
    if (vm.isSetInitialization() && vm.getInitialization().isSetConfiguration()) {
        configurationValidator.validateEnums(vm.getInitialization().getConfiguration());
    }
    if (vm.isSetInitialization()) {
        if (vm.getInitialization().isSetCloudInit()) {
            cloudInitValidator.validateEnums(vm.getInitialization().getCloudInit());
        }
    }
}
#end_block

#method_before
@Override
public VmDisksResource getDisksResource() {
    return inject(new BackendVmDisksResource(guid, VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(guid)));
}
#method_after
@Override
public VmDisksResource getDisksResource() {
    return inject(new BackendVmDisksResource(guid, VdcQueryType.GetAllDisksByVmId, new IdQueryParameters(guid)));
}
#end_block

#method_before
@Override
public Response start(Action action) {
    RunVmOnceParams params = map(map(getEntity(entityType, VdcQueryType.GetVmByVmId, new IdQueryParameters(guid), id, true), new VM()), new RunVmOnceParams(guid));
    if (action.isSetVm()) {
        validateEnums(VM.class, action.getVm());
        VM vm = action.getVm();
        params = map(vm, params);
        if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
            validateParameters(vm.getPlacementPolicy(), "host.id|name");
            params.setDestinationVdsId(getHostId(vm.getPlacementPolicy().getHost()));
        }
    }
    if (action.isSetPause() && action.isPause()) {
        params.setRunAndPause(true);
    }
    return doAction(VdcActionType.RunVmOnce, setInitializationType(params), action);
}
#method_after
@Override
public Response start(Action action) {
    RunVmParams params;
    VdcActionType actionType;
    if (action.isSetVm()) {
        VM vm = action.getVm();
        validateEnums(VM.class, vm);
        actionType = VdcActionType.RunVmOnce;
        params = map(vm, map(map(getEntity(entityType, VdcQueryType.GetVmByVmId, new IdQueryParameters(guid), id, true), new VM()), new RunVmOnceParams(guid)));
        if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
            validateParameters(vm.getPlacementPolicy(), "host.id|name");
            params.setDestinationVdsId(getHostId(vm.getPlacementPolicy().getHost()));
        }
        if (vm.isSetInitialization() && vm.getInitialization().isSetCloudInit()) {
            CloudInit cloudInit = vm.getInitialization().getCloudInit();
            // currently only 'root' user is supported, alert the user if other user sent
            if (cloudInit.isSetAuthorizedKeys()) {
                for (AuthorizedKey authKey : cloudInit.getAuthorizedKeys().getAuthorizedKeys()) {
                    if (!"root".equals(authKey.getUser().getUserName())) {
                        throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity("Currently only the user 'root' is supported for authorized keys").build());
                    }
                }
            }
            params.setInitializationType(InitializationType.CloudInit);
            ((RunVmOnceParams) params).setCloudInitParameters(getMapper(CloudInit.class, CloudInitParameters.class).map(cloudInit, null));
        }
    } else {
        actionType = VdcActionType.RunVm;
        params = new RunVmParams(guid);
    }
    if (action.isSetPause() && action.isPause()) {
        params.setRunAndPause(true);
    }
    return doAction(actionType, params, action);
}
#end_block

#method_before
@Override
public Response suspend(Action action) {
    return doAction(VdcActionType.HibernateVm, new HibernateVmParameters(guid), action);
}
#method_after
@Override
public Response suspend(Action action) {
    return doAction(VdcActionType.HibernateVm, new VmOperationParameterBase(guid), action);
}
#end_block

#method_before
@Override
protected VM doPopulate(VM model, org.ovirt.engine.core.common.businessentities.VM entity) {
    return model;
}
#method_after
@Override
protected VM doPopulate(VM model, org.ovirt.engine.core.common.businessentities.VM entity) {
    parent.setConsoleDevice(model);
    parent.setVirtioScsiController(model);
    return model;
}
#end_block

#method_before
@Override
public VdcActionParametersBase getParameters(VM incoming, org.ovirt.engine.core.common.businessentities.VM entity) {
    VmStatic updated = getMapper(modelType, VmStatic.class).map(incoming, entity.getStaticData());
    updated.setUsbPolicy(VmMapper.getUsbPolicyOnUpdate(incoming.getUsb(), entity.getUsbPolicy(), lookupCluster(updated.getVdsGroupId())));
    VmManagementParametersBase params = new VmManagementParametersBase(updated);
    if (incoming.isSetPayloads()) {
        if (incoming.isSetPayloads() && incoming.getPayloads().isSetPayload()) {
            params.setVmPayload(parent.getPayload(incoming));
        } else {
            params.setClearPayload(true);
        }
    }
    if (incoming.isSetMemoryPolicy() && incoming.getMemoryPolicy().isSetBallooning()) {
        params.setBalloonEnabled(incoming.getMemoryPolicy().isBallooning());
    }
    return params;
}
#method_after
@Override
public VdcActionParametersBase getParameters(VM incoming, org.ovirt.engine.core.common.businessentities.VM entity) {
    VmStatic updated = getMapper(modelType, VmStatic.class).map(incoming, entity.getStaticData());
    updated.setUsbPolicy(VmMapper.getUsbPolicyOnUpdate(incoming.getUsb(), entity.getUsbPolicy(), lookupCluster(updated.getVdsGroupId())));
    VmManagementParametersBase params = new VmManagementParametersBase(updated);
    if (incoming.isSetPayloads()) {
        if (incoming.isSetPayloads() && incoming.getPayloads().isSetPayload()) {
            params.setVmPayload(parent.getPayload(incoming));
        } else {
            params.setClearPayload(true);
        }
    }
    if (incoming.isSetMemoryPolicy() && incoming.getMemoryPolicy().isSetBallooning()) {
        params.setBalloonEnabled(incoming.getMemoryPolicy().isBallooning());
    }
    if (incoming.isSetConsole() && incoming.getConsole().isSetEnabled()) {
        params.setConsoleEnabled(incoming.getConsole().isEnabled());
    }
    if (incoming.isSetVirtioScsi()) {
        params.setVirtioScsiEnabled(incoming.getVirtioScsi().isEnabled());
    }
    return params;
}
#end_block

#method_before
private VDSGroup lookupCluster(Guid id) {
    return getEntity(VDSGroup.class, VdcQueryType.GetVdsGroupByVdsGroupId, new GetVdsGroupByVdsGroupIdParameters(id), "GetVdsGroupByVdsGroupId");
}
#method_after
private VDSGroup lookupCluster(Guid id) {
    return getEntity(VDSGroup.class, VdcQueryType.GetVdsGroupByVdsGroupId, new IdQueryParameters(id), "GetVdsGroupByVdsGroupId");
}
#end_block

#method_before
public VersionCaps generateVersionCaps(Version v) {
    VersionCaps current = null;
    VersionCaps version = new VersionCaps();
    version.setMajor(v.getMajor());
    version.setMinor(v.getMinor());
    version.setId(generateId(v));
    // Not exposing CPU list and power managers on filtered queries
    if (!isFiltered()) {
        version.setCpus(new CPUs());
        for (ServerCpu sc : getServerCpuList(v)) {
            CPU cpu = new CPU();
            cpu.setId(sc.getCpuName());
            cpu.setLevel(sc.getLevel());
            version.getCpus().getCPUs().add(cpu);
        }
        addPowerManagers(version, getPowerManagers(v));
    }
    addVmTypes(version, VmType.values());
    addStorageTypes(version, getStorageTypes(v));
    addStorageDomainTypes(version, StorageDomainType.values());
    addFenceTypes(version, FenceType.values());
    addBootDevices(version, BootDevice.values());
    addDisplayTypes(version, DisplayType.values());
    addNicInterfaces(version, NicInterface.values());
    addDiskFormats(version, DiskFormat.values());
    addDiskInterfaces(version, DiskInterface.values());
    addCustomProperties(version, getVmHooksEnvs(v));
    addVmAffinities(version, VmAffinity.values());
    addVmDeviceType(version, VmDeviceType.values());
    addnetworkBootProtocols(version, BootProtocol.values());
    addMigrateOnErrorOptions(version, MigrateOnError.values());
    addStorageFormatOptions(version, StorageFormat.values());
    addOsTypes(version, OsType.values());
    addNfsVersions(version, NfsVersion.values());
    addGlusterTypesAndStates(version);
    // Add States. User can't update States, but he still needs to know which exist.
    addCreationStates(version, CreationStatus.values());
    addStorageDomaintStates(version, StorageDomainStatus.values());
    addPowerManagementStateses(version, PowerManagementStatus.values());
    addHostStates(version, HostStatus.values());
    addHostNonOperationalDetails(version, NonOperationalReason.values());
    addNetworkStates(version, NetworkStatus.values());
    addTemplateStates(version, TemplateStatus.values());
    addVmStates(version, VmStatus.values());
    addVmPauseDetails(version, VmPauseStatus.values());
    addDiskStates(version, DiskStatus.values());
    addHostNICStates(version, NicStatus.values());
    addDataCenterStates(version, DataCenterStatus.values());
    addPermits(version, PermitType.values());
    addSchedulingPolicies(version, SchedulingPolicyType.values());
    addNetworkUsages(version, NetworkUsage.values());
    addPmProxyTypes(version, PmProxyType.values());
    addReportedDeviceTypes(version, ReportedDeviceType.values());
    addIpVersions(version, IpVersion.values());
    addCpuModes(version, CpuMode.values());
    addAttachmentTypes(version, AttachmentType.values());
    version.setFeatures(featuresHelper.getFeatures(v));
    if (current == null && VersionHelper.equals(v, getCurrentVersion())) {
        current = version;
        current.setCurrent(true);
    } else {
        version.setCurrent(false);
    }
    LinkHelper.<VersionCaps>addLinks(getUriInfo(), version);
    return version;
}
#method_after
public VersionCaps generateVersionCaps(Version v) {
    VersionCaps current = null;
    VersionCaps version = new VersionCaps();
    version.setMajor(v.getMajor());
    version.setMinor(v.getMinor());
    version.setId(generateId(v));
    // Not exposing CPU list and power managers on filtered queries
    if (!isFiltered()) {
        version.setCpus(new CPUs());
        for (ServerCpu sc : getServerCpuList(v)) {
            CPU cpu = new CPU();
            cpu.setId(sc.getCpuName());
            cpu.setLevel(sc.getLevel());
            cpu.setArchitecture(CPUMapper.map(sc.getArchitecture(), null));
            version.getCpus().getCPUs().add(cpu);
        }
        addPowerManagers(version, getPowerManagers(v));
    }
    addVmTypes(version, VmType.values());
    addAuthenticationMethods(version, AuthenticationMethod.values());
    addStorageTypes(version, getStorageTypes(v));
    addStorageDomainTypes(version, StorageDomainType.values());
    addFenceTypes(version, FenceType.values());
    addBootDevices(version, BootDevice.values());
    addDisplayTypes(version, DisplayType.values());
    addNicInterfaces(version, NicInterface.values());
    addDiskFormats(version, DiskFormat.values());
    addDiskInterfaces(version, DiskInterface.values());
    addCustomProperties(version, getVmHooksEnvs(v));
    addVmAffinities(version, VmAffinity.values());
    addVmDeviceType(version, VmDeviceType.values());
    addnetworkBootProtocols(version, BootProtocol.values());
    addMigrateOnErrorOptions(version, MigrateOnError.values());
    addStorageFormatOptions(version, StorageFormat.values());
    addOsTypes(version);
    addNfsVersions(version, NfsVersion.values());
    addGlusterTypesAndStates(version);
    // Add States. User can't update States, but he still needs to know which exist.
    addCreationStates(version, CreationStatus.values());
    addStorageDomaintStates(version, StorageDomainStatus.values());
    addPowerManagementStateses(version, PowerManagementStatus.values());
    addHostStates(version, HostStatus.values());
    addHostNonOperationalDetails(version, NonOperationalReason.values());
    addNetworkStates(version, NetworkStatus.values());
    addTemplateStates(version, TemplateStatus.values());
    addVmStates(version, VmStatus.values());
    addVmPauseDetails(version, VmPauseStatus.values());
    addDiskStates(version, DiskStatus.values());
    addHostNICStates(version, NicStatus.values());
    addDataCenterStates(version, DataCenterStatus.values());
    addPermits(version, PermitType.values());
    addSchedulingPolicies(version, SchedulingPolicyType.values());
    addNetworkUsages(version, NetworkUsage.values());
    addPmProxyTypes(version, PmProxyType.values());
    addReportedDeviceTypes(version, ReportedDeviceType.values());
    addIpVersions(version, IpVersion.values());
    addCpuModes(version, CpuMode.values());
    addScsiGenericIoOptions(version, ScsiGenericIO.values());
    addWatchdogActions(version, WatchdogAction.values());
    addWatchdogModels(version, WatchdogModel.values());
    addConfigurationTypes(version, ConfigurationType.values());
    addSnapshotStatuses(version, SnapshotStatus.values());
    addPayloadEncodings(version, PayloadEncoding.values());
    // External tasks types
    addStepEnumTypes(version, StepEnum.values());
    version.setFeatures(featuresHelper.getFeatures(v));
    if (current == null && VersionHelper.equals(v, getCurrentVersion())) {
        current = version;
        current.setCurrent(true);
    } else {
        version.setCurrent(false);
    }
    LinkHelper.<VersionCaps>addLinks(getUriInfo(), version);
    return version;
}
#end_block

#method_before
public String generateId(Version v) {
    NGuid guid = new NGuid((v.getMajor() + "." + v.getMinor()).getBytes(), true);
    return guid.toString();
}
#method_after
public String generateId(Version v) {
    Guid guid = new Guid((v.getMajor() + "." + v.getMinor()).getBytes(), true);
    return guid.toString();
}
#end_block

#method_before
private void addGlusterTypesAndStates(VersionCaps version) {
    if (VersionUtils.greaterOrEqual(version, VERSION_3_1)) {
        addGlusterVolumeTypes(version, GlusterVolumeType.values());
        addTransportTypes(version, TransportType.values());
        addGlusterVolumeStates(version, GlusterState.values());
        addGlusterBrickStates(version, GlusterState.values());
    }
}
#method_after
private void addGlusterTypesAndStates(VersionCaps version) {
    if (VersionUtils.greaterOrEqual(version, VERSION_3_1)) {
        addGlusterVolumeTypes(version, GlusterVolumeType.values());
        addTransportTypes(version, TransportType.values());
        addGlusterVolumeStates(version, GlusterState.values());
        addGlusterBrickStates(version, GlusterState.values());
    }
    if (VersionUtils.greaterOrEqual(version, VERSION_3_3)) {
        addGlusterHookContentTypes(version, HookContentType.values());
        addStages(version, HookStage.values());
        addGlusterHookStates(version, HookStatus.values());
    }
}
#end_block

#method_before
private void addOsTypes(VersionCaps version, OsType[] types) {
    version.setOsTypes(new OsTypes());
    for (OsType type : types) {
        version.getOsTypes().getOsTypes().add(type.value());
    }
}
#method_after
private void addOsTypes(VersionCaps version) {
    version.setOsTypes(new OsTypes());
    if (VersionUtils.greaterOrEqual(version, VERSION_3_3)) {
        version.getOsTypes().getOsTypes().addAll(OsTypeUtils.getAllValues());
    } else {
        for (OsType type : OsType.values()) {
            version.getOsTypes().getOsTypes().add(type.name());
        }
    }
}
#end_block

#method_before
private List<ServerCpu> getServerCpuList(Version version) {
    return ServerCpuParser.parseCpus(getConfigurationValue(String.class, ConfigurationValues.ServerCPUList, version));
}
#method_after
private List<ServerCpu> getServerCpuList(Version version) {
    return getEntity(List.class, VdcQueryType.GetAllServerCpuList, new GetAllServerCpuListParameters(new org.ovirt.engine.core.compat.Version(asString(version))), "List<ServerCpu>");
}
#end_block

#method_before
@Mapping(from = VmTemplate.class, to = VmStatic.class)
public static VmStatic map(VmTemplate entity, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    staticVm.setId(NGuid.Empty);
    staticVm.setVmtGuid(entity.getId());
    staticVm.setDomain(entity.getDomain());
    staticVm.setVdsGroupId(entity.getVdsGroupId());
    staticVm.setMemSizeMb(entity.getMemSizeMb());
    staticVm.setOs(entity.getOs());
    staticVm.setNiceLevel(entity.getNiceLevel());
    staticVm.setFailBack(entity.isFailBack());
    staticVm.setAutoStartup(entity.isAutoStartup());
    staticVm.setStateless(entity.isStateless());
    staticVm.setDeleteProtected(entity.isDeleteProtected());
    staticVm.setSmartcardEnabled(entity.isSmartcardEnabled());
    staticVm.setAutoStartup(entity.isAutoStartup());
    staticVm.setDefaultBootSequence(entity.getDefaultBootSequence());
    staticVm.setVmType(entity.getVmType());
    entity.setDefaultDisplayType(entity.getDefaultDisplayType());
    staticVm.setIsoPath(entity.getIsoPath());
    staticVm.setNumOfSockets(entity.getNumOfSockets());
    staticVm.setCpuPerSocket(entity.getCpuPerSocket());
    staticVm.setKernelUrl(entity.getKernelUrl());
    staticVm.setKernelParams(entity.getKernelParams());
    staticVm.setInitrdUrl(entity.getInitrdUrl());
    staticVm.setTimeZone(entity.getTimeZone());
    staticVm.setNumOfMonitors(entity.getNumOfMonitors());
    staticVm.setAllowConsoleReconnect(entity.isAllowConsoleReconnect());
    staticVm.setPriority(entity.getPriority());
    staticVm.setUsbPolicy(entity.getUsbPolicy());
    staticVm.setTunnelMigration(entity.getTunnelMigration());
    staticVm.setVncKeyboardLayout(entity.getVncKeyboardLayout());
    return staticVm;
}
#method_after
@Mapping(from = VmTemplate.class, to = VmStatic.class)
public static VmStatic map(VmTemplate entity, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    staticVm.setId(Guid.Empty);
    staticVm.setVmtGuid(entity.getId());
    staticVm.setDomain(entity.getDomain());
    staticVm.setVdsGroupId(entity.getVdsGroupId());
    staticVm.setMemSizeMb(entity.getMemSizeMb());
    staticVm.setOsId(entity.getOsId());
    staticVm.setNiceLevel(entity.getNiceLevel());
    staticVm.setCpuShares(entity.getCpuShares());
    staticVm.setFailBack(entity.isFailBack());
    staticVm.setAutoStartup(entity.isAutoStartup());
    staticVm.setStateless(entity.isStateless());
    staticVm.setDeleteProtected(entity.isDeleteProtected());
    staticVm.setSmartcardEnabled(entity.isSmartcardEnabled());
    staticVm.setAutoStartup(entity.isAutoStartup());
    staticVm.setDefaultBootSequence(entity.getDefaultBootSequence());
    staticVm.setVmType(entity.getVmType());
    staticVm.setDefaultDisplayType(entity.getDefaultDisplayType());
    staticVm.setIsoPath(entity.getIsoPath());
    staticVm.setNumOfSockets(entity.getNumOfSockets());
    staticVm.setCpuPerSocket(entity.getCpuPerSocket());
    staticVm.setKernelUrl(entity.getKernelUrl());
    staticVm.setKernelParams(entity.getKernelParams());
    staticVm.setInitrdUrl(entity.getInitrdUrl());
    staticVm.setTimeZone(entity.getTimeZone());
    staticVm.setNumOfMonitors(entity.getNumOfMonitors());
    staticVm.setSingleQxlPci(entity.getSingleQxlPci());
    staticVm.setAllowConsoleReconnect(entity.isAllowConsoleReconnect());
    staticVm.setPriority(entity.getPriority());
    staticVm.setUsbPolicy(entity.getUsbPolicy());
    staticVm.setTunnelMigration(entity.getTunnelMigration());
    staticVm.setVncKeyboardLayout(entity.getVncKeyboardLayout());
    return staticVm;
}
#end_block

#method_before
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setName(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(GuidUtils.asGuid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setDescription(vm.getDescription());
    }
    if (vm.isSetMemory()) {
        staticVm.setMemSizeMb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getMemSizeMb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setMemSizeMb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setVmtGuid(GuidUtils.asGuid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setVdsGroupId(GuidUtils.asGuid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu()) {
        if (vm.getCpu().isSetMode()) {
            staticVm.setUseHostCpuFlags(CpuMode.fromValue(vm.getCpu().getMode()) == CpuMode.HOST_PASSTHROUGH);
        }
        if (vm.getCpu().isSetTopology()) {
            if (vm.getCpu().getTopology().getCores() != null) {
                staticVm.setCpuPerSocket(vm.getCpu().getTopology().getCores());
            }
            if (vm.getCpu().getTopology().getSockets() != null) {
                staticVm.setNumOfSockets(vm.getCpu().getTopology().getSockets());
            }
        }
        if (vm.getCpu().isSetCpuTune()) {
            staticVm.setCpuPinning(cpuTuneToString(vm.getCpu().getCpuTune()));
        }
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            OsType osType = OsType.fromValue(vm.getOs().getType());
            if (osType != null) {
                staticVm.setOs(map(osType, null));
            }
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setDefaultBootSequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setKernelUrl(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setInitrdUrl(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setKernelParams(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setVmType(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setStateless(vm.isStateless());
    }
    if (vm.isSetDeleteProtected()) {
        staticVm.setDeleteProtected(vm.isDeleteProtected());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setAutoStartup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setPriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setOrigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setDefaultDisplayType(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setNumOfMonitors(vm.getDisplay().getMonitors());
        }
        if (vm.getDisplay().isSetAllowOverride()) {
            staticVm.setAllowConsoleReconnect(vm.getDisplay().isAllowOverride());
        }
        if (vm.getDisplay().isSetSmartcardEnabled()) {
            staticVm.setSmartcardEnabled(vm.getDisplay().isSmartcardEnabled());
        }
        if (vm.getDisplay().isSetKeyboardLayout()) {
            String layout = vm.getDisplay().getKeyboardLayout();
            if (layout.isEmpty()) {
                // uniquely represent unset keyboard layout as null
                layout = null;
            }
            staticVm.setVncKeyboardLayout(layout);
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setDedicatedVmForVds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setDomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        staticVm.setTimeZone(vm.getTimezone());
    }
    if (vm.isSetCustomProperties()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetQuota() && vm.getQuota().isSetId()) {
        staticVm.setQuotaId(GuidUtils.asGuid(vm.getQuota().getId()));
    }
    if (vm.isSetTunnelMigration()) {
        staticVm.setTunnelMigration(vm.isTunnelMigration());
    }
    return staticVm;
}
#method_after
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setName(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(GuidUtils.asGuid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setDescription(vm.getDescription());
    }
    if (vm.isSetComment()) {
        staticVm.setComment(vm.getComment());
    }
    if (vm.isSetMemory()) {
        staticVm.setMemSizeMb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getMemSizeMb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setMemSizeMb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setVmtGuid(GuidUtils.asGuid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setVdsGroupId(GuidUtils.asGuid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu()) {
        if (vm.getCpu().isSetMode()) {
            staticVm.setUseHostCpuFlags(CpuMode.fromValue(vm.getCpu().getMode()) == CpuMode.HOST_PASSTHROUGH);
        }
        if (vm.getCpu().isSetTopology()) {
            if (vm.getCpu().getTopology().getCores() != null) {
                staticVm.setCpuPerSocket(vm.getCpu().getTopology().getCores());
            }
            if (vm.getCpu().getTopology().getSockets() != null) {
                staticVm.setNumOfSockets(vm.getCpu().getTopology().getSockets());
            }
        }
        if (vm.getCpu().isSetCpuTune()) {
            staticVm.setCpuPinning(cpuTuneToString(vm.getCpu().getCpuTune()));
        }
    }
    if (vm.isSetCpuShares()) {
        staticVm.setCpuShares(vm.getCpuShares());
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            staticVm.setOsId(mapOsType(vm.getOs().getType()));
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setDefaultBootSequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setKernelUrl(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setInitrdUrl(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setKernelParams(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setVmType(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setStateless(vm.isStateless());
    }
    if (vm.isSetDeleteProtected()) {
        staticVm.setDeleteProtected(vm.isDeleteProtected());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setAutoStartup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setPriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setOrigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setDefaultDisplayType(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setNumOfMonitors(vm.getDisplay().getMonitors());
        }
        if (vm.getDisplay().isSetSingleQxlPci()) {
            staticVm.setSingleQxlPci(vm.getDisplay().isSingleQxlPci());
        }
        if (vm.getDisplay().isSetAllowOverride()) {
            staticVm.setAllowConsoleReconnect(vm.getDisplay().isAllowOverride());
        }
        if (vm.getDisplay().isSetSmartcardEnabled()) {
            staticVm.setSmartcardEnabled(vm.getDisplay().isSmartcardEnabled());
        }
        if (vm.getDisplay().isSetKeyboardLayout()) {
            String layout = vm.getDisplay().getKeyboardLayout();
            if (layout.isEmpty()) {
                // uniquely represent unset keyboard layout as null
                layout = null;
            }
            staticVm.setVncKeyboardLayout(layout);
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setDedicatedVmForVds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setDomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        String timezone = vm.getTimezone();
        if (timezone.isEmpty()) {
            // normalize default timezone representation
            timezone = null;
        }
        staticVm.setTimeZone(timezone);
    }
    if (vm.isSetCustomProperties()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetQuota() && vm.getQuota().isSetId()) {
        staticVm.setQuotaId(GuidUtils.asGuid(vm.getQuota().getId()));
    }
    if (vm.isSetTunnelMigration()) {
        staticVm.setTunnelMigration(vm.isTunnelMigration());
    }
    return staticVm;
}
#end_block

#method_before
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getName());
    model.setDescription(entity.getVmDescription());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    if (entity.getVmtGuid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getVmtGuid().toString());
    }
    if (entity.getStatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getStatus(), null)));
        if (entity.getStatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getVmOs() != null || entity.getBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getVmOs() != null) {
            OsType osType = VmMapper.map(entity.getOs(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    if (entity.isUseHostCpuFlags()) {
        cpu.setMode(CpuMode.HOST_PASSTHROUGH.value());
    }
    cpu.setCpuTune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (entity.getDynamicData() != null && entity.getStatus().isRunningOrPaused()) {
        if (model.getOs() != null && entity.getBootSequence() != null) {
            for (Boot boot : map(entity.getBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getRunOnVds() != null) {
            model.setHost(new Host());
            model.getHost().setId(entity.getRunOnVds().toString());
        }
        if (entity.getVmIp() != null && !entity.getVmIp().isEmpty()) {
            model.setGuestInfo(new GuestInfo());
            model.getGuestInfo().setIps(new IPs());
            for (String item : entity.getVmIp().split(" ")) {
                if (!item.equals("")) {
                    IP ip = new IP();
                    ip.setAddress(item.trim());
                    model.getGuestInfo().getIps().getIPs().add(ip);
                }
            }
        }
        if (entity.getLastStartTime() != null) {
            model.setStartTime(DateMapper.map(entity.getLastStartTime(), null));
        }
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getDisplayType(), null));
        model.getDisplay().setAddress(entity.getDisplayIp());
        Integer displayPort = entity.getDisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getDisplaySecurePort();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
    } else {
        if (model.getOs() != null) {
            for (Boot boot : map(entity.getDefaultBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getDefaultDisplayType() != null) {
            model.setDisplay(new Display());
            model.getDisplay().setType(map(entity.getDefaultDisplayType(), null));
        }
    }
    if (model.getDisplay() != null) {
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setAllowOverride(entity.getAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
        model.getDisplay().setKeyboardLayout(entity.getVncKeyboardLayout());
    }
    model.setType(map(entity.getVmType(), null));
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    if (entity.getOrigin() != null) {
        model.setOrigin(map(entity.getOrigin(), null));
    }
    if (entity.getVmCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getVmCreationDate(), null));
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getDedicatedVmForVds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getDedicatedVmForVds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getVmDomain() != null && !entity.getVmDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getVmDomain());
        model.setDomain(domain);
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed((long) entity.getMinAllocatedMem() * (long) BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(entity.getTimeZone());
    if (!StringUtils.isEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#method_after
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getName());
    model.setDescription(entity.getVmDescription());
    model.setComment(entity.getComment());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    if (entity.getVmtGuid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getVmtGuid().toString());
    }
    if (entity.getStatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getStatus(), null)));
        if (entity.getStatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        os.setType(SimpleDependecyInjector.getInstance().get(OsRepository.class).getUniqueOsNames().get(entity.getVmOsId()));
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    if (entity.isUseHostCpuFlags()) {
        cpu.setMode(CpuMode.HOST_PASSTHROUGH.value());
    }
    cpu.setCpuTune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    model.setCpuShares(entity.getCpuShares());
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (entity.getDynamicData() != null && entity.getStatus().isRunningOrPaused()) {
        if (model.getOs() != null && entity.getBootSequence() != null) {
            for (Boot boot : map(entity.getBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getRunOnVds() != null) {
            model.setHost(new Host());
            model.getHost().setId(entity.getRunOnVds().toString());
        }
        final boolean hasIps = entity.getVmIp() != null && !entity.getVmIp().isEmpty();
        final boolean hasFqdn = entity.getVmFQDN() != null && !entity.getVmFQDN().isEmpty();
        if (hasIps || hasFqdn) {
            model.setGuestInfo(new GuestInfo());
            if (hasFqdn) {
                model.getGuestInfo().setFqdn(entity.getVmFQDN());
            }
            if (hasIps) {
                IPs ips = new IPs();
                for (String item : entity.getVmIp().split(" ")) {
                    if (!item.equals("")) {
                        IP ip = new IP();
                        ip.setAddress(item.trim());
                        ips.getIPs().add(ip);
                    }
                }
                if (!ips.getIPs().isEmpty()) {
                    model.getGuestInfo().setIps(ips);
                }
            }
        }
        if (entity.getLastStartTime() != null) {
            model.setStartTime(DateMapper.map(entity.getLastStartTime(), null));
        }
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getDisplayType(), null));
        model.getDisplay().setAddress(entity.getDisplayIp());
        Integer displayPort = entity.getDisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getDisplaySecurePort();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setSingleQxlPci(entity.getSingleQxlPci());
    } else {
        if (model.getOs() != null) {
            for (Boot boot : map(entity.getDefaultBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getDefaultDisplayType() != null) {
            model.setDisplay(new Display());
            model.getDisplay().setType(map(entity.getDefaultDisplayType(), null));
        }
    }
    if (model.getDisplay() != null) {
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setSingleQxlPci(entity.getSingleQxlPci());
        model.getDisplay().setAllowOverride(entity.getAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
        model.getDisplay().setKeyboardLayout(entity.getVncKeyboardLayout());
    }
    model.setType(map(entity.getVmType(), null));
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    if (entity.getOrigin() != null) {
        model.setOrigin(map(entity.getOrigin(), null));
    }
    if (entity.getVmCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getVmCreationDate(), null));
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getDedicatedVmForVds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getDedicatedVmForVds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getVmDomain() != null && !entity.getVmDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getVmDomain());
        model.setDomain(domain);
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed((long) entity.getMinAllocatedMem() * (long) BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(entity.getTimeZone());
    if (!StringUtils.isEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#end_block

#method_before
@Mapping(from = VM.class, to = RunVmOnceParams.class)
public static RunVmOnceParams map(VM vm, RunVmOnceParams template) {
    RunVmOnceParams params = template != null ? template : new RunVmOnceParams();
    if (vm.isSetStateless() && vm.isStateless()) {
        params.setRunAsStateless(true);
    }
    if (vm.isSetDisplay() && vm.getDisplay().isSetType()) {
        DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
        if (displayType != null) {
            params.setUseVnc(displayType == DisplayType.VNC);
        }
    }
    if (vm.isSetOs() && vm.getOs().getBoot().size() > 0) {
        params.setBootSequence(map(vm.getOs().getBoot(), null));
    }
    if (vm.isSetCdroms() && vm.getCdroms().isSetCdRoms()) {
        String file = vm.getCdroms().getCdRoms().get(0).getFile().getId();
        if (file != null) {
            params.setDiskPath(file);
        }
    }
    if (vm.isSetFloppies() && vm.getFloppies().isSetFloppies()) {
        String file = vm.getFloppies().getFloppies().get(0).getFile().getId();
        if (file != null) {
            params.setFloppyPath(file);
        }
    }
    if (vm.isSetCustomProperties()) {
        params.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            params.setBootSequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            params.setkernel_url(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            params.setinitrd_url(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            params.setkernel_params(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        params.setSysPrepDomainName(vm.getDomain().getName());
        if (vm.getDomain().isSetUser()) {
            if (vm.getDomain().getUser().isSetUserName()) {
                params.setSysPrepUserName(vm.getDomain().getUser().getUserName());
            }
            if (vm.getDomain().getUser().isSetPassword()) {
                params.setSysPrepPassword(vm.getDomain().getUser().getPassword());
            }
        }
    }
    if (vm.isSetInitialization()) {
        if (vm.getInitialization().isSetCloudInit()) {
            params.setCloudInitParameters(map(vm.getInitialization().getCloudInit(), null));
        }
    }
    return params;
}
#method_after
@Mapping(from = VM.class, to = RunVmOnceParams.class)
public static RunVmOnceParams map(VM vm, RunVmOnceParams template) {
    RunVmOnceParams params = template != null ? template : new RunVmOnceParams();
    if (vm.isSetStateless() && vm.isStateless()) {
        params.setRunAsStateless(true);
    }
    if (vm.isSetDisplay() && vm.getDisplay().isSetType()) {
        DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
        if (displayType != null) {
            params.setUseVnc(displayType == DisplayType.VNC);
        }
    }
    if (vm.isSetOs() && vm.getOs().getBoot().size() > 0) {
        params.setBootSequence(map(vm.getOs().getBoot(), null));
    }
    if (vm.isSetCdroms() && vm.getCdroms().isSetCdRoms()) {
        String file = vm.getCdroms().getCdRoms().get(0).getFile().getId();
        if (file != null) {
            params.setDiskPath(file);
        }
    }
    if (vm.isSetFloppies() && vm.getFloppies().isSetFloppies()) {
        String file = vm.getFloppies().getFloppies().get(0).getFile().getId();
        if (file != null) {
            params.setFloppyPath(file);
        }
    }
    if (vm.isSetCustomProperties()) {
        params.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            params.setBootSequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            params.setkernel_url(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            params.setinitrd_url(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            params.setkernel_params(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        params.setSysPrepDomainName(vm.getDomain().getName());
        if (vm.getDomain().isSetUser()) {
            if (vm.getDomain().getUser().isSetUserName()) {
                params.setSysPrepUserName(vm.getDomain().getUser().getUserName());
            }
            if (vm.getDomain().getUser().isSetPassword()) {
                params.setSysPrepPassword(vm.getDomain().getUser().getPassword());
            }
        }
    }
    if (vm.isSetCpuShares()) {
        params.setCpuShares(vm.getCpuShares());
    }
    return params;
}
#end_block

#method_before
@Mapping(from = CloudInit.class, to = CloudInitParameters.class)
public static CloudInitParameters map(CloudInit model, CloudInitParameters template) {
    CloudInitParameters entity = template != null ? template : new CloudInitParameters();
    entity.setHostname(model.getHostname());
    if (model.getAuthorizedKeys() != null && !model.getAuthorizedKeys().getAuthorizedKey().isEmpty()) {
        StringBuilder keys = new StringBuilder();
        for (AuthorizedKey key : model.getAuthorizedKeys().getAuthorizedKey()) {
            if ("root".equals(key.getUser())) {
                if (keys.length() > 0) {
                    keys.append("\n");
                }
                keys.append(key.getValue());
            }
        }
        entity.setAuthorizedKeys(keys.toString());
    }
    entity.setRegenerateKeys(model.isRegenerateSshKeys());
    if (model.getNetwork() != null) {
        if (model.getNetwork().getInterfaces() != null && !model.getNetwork().getInterfaces().getInterface().isEmpty()) {
            for (Interface iface : model.getNetwork().getInterfaces().getInterface()) {
                VdsNetworkInterface vdsNetworkInterface = new VdsNetworkInterface();
                NetworkBootProtocol protocol = HostNicMapper.map(BootProtocol.fromValue(iface.getBootProtocol()), null);
                vdsNetworkInterface.setBootProtocol(protocol);
                if (protocol == NetworkBootProtocol.DHCP) {
                    vdsNetworkInterface.setAddress(iface.getAddress());
                    vdsNetworkInterface.setSubnet(iface.getNetmask());
                    vdsNetworkInterface.setGateway(iface.getGateway());
                }
                if (iface.isOnboot()) {
                    if (entity.getStartOnBoot() == null) {
                        entity.setStartOnBoot(new ArrayList<String>());
                    }
                    entity.getStartOnBoot().add(iface.getName());
                }
            }
            if (model.getNetwork().getDnsServers() != null && model.getNetwork().getDnsServers().getDnsServer().isEmpty()) {
                entity.setDnsServers(model.getNetwork().getDnsServers().getDnsServer());
            }
            if (model.getNetwork().getDnsSearchDomains() != null && model.getNetwork().getDnsSearchDomains().getDnsSearchDomain().isEmpty()) {
                entity.setDnsSearch(model.getNetwork().getDnsSearchDomains().getDnsSearchDomain());
            }
        }
    }
    if (model.getTimezone() != null) {
        entity.setTimeZone(TimeZone.getTimeZone(model.getTimezone()));
    }
    if (model.getPasswords() != null && !model.getPasswords().getPassword().isEmpty()) {
        for (Password password : model.getPasswords().getPassword()) {
            if ("root".equals(password.getUser())) {
                entity.setRootPassword(password.getValue());
            }
        }
    }
    if (model.getFiles() != null && !model.getFiles().getFile().isEmpty()) {
        entity.setAttachments(new HashMap<String, Attachment>());
        for (File file : model.getFiles().getFile()) {
            Attachment attachment = new Attachment();
            attachment.setAttachmentType(map(AttachmentType.fromValue(file.getContent().getEncoding()), null));
            attachment.setContent(file.getContent().getValue());
            entity.getAttachments().put(file.getPath(), attachment);
        }
    }
    return entity;
}
#method_after
@Mapping(from = ConfigurationType.class, to = org.ovirt.engine.core.common.businessentities.ConfigurationType.class)
public static org.ovirt.engine.core.common.businessentities.ConfigurationType map(org.ovirt.engine.api.model.ConfigurationType configurationType, org.ovirt.engine.core.common.businessentities.ConfigurationType template) {
    switch(configurationType) {
        case OVF:
            return org.ovirt.engine.core.common.businessentities.ConfigurationType.OVF;
        default:
            return null;
    }
}
#end_block

#method_before
@Mapping(from = VMStatus.class, to = VmStatus.class)
public static VmStatus map(VMStatus entityStatus, VmStatus template) {
    switch(entityStatus) {
        case Unassigned:
            return VmStatus.UNASSIGNED;
        case Down:
            return VmStatus.DOWN;
        case Up:
            return VmStatus.UP;
        case PoweringUp:
            return VmStatus.POWERING_UP;
        case PoweredDown:
            return VmStatus.POWERED_DOWN;
        case Paused:
            return VmStatus.PAUSED;
        case MigratingFrom:
            return VmStatus.MIGRATING;
        case MigratingTo:
            return VmStatus.MIGRATING;
        case Unknown:
            return VmStatus.UNKNOWN;
        case NotResponding:
            return VmStatus.NOT_RESPONDING;
        case WaitForLaunch:
            return VmStatus.WAIT_FOR_LAUNCH;
        case RebootInProgress:
            return VmStatus.REBOOT_IN_PROGRESS;
        case PreparingForHibernate:
        case SavingState:
            return VmStatus.SAVING_STATE;
        case RestoringState:
            return VmStatus.RESTORING_STATE;
        case Suspended:
            return VmStatus.SUSPENDED;
        case ImageLocked:
            return VmStatus.IMAGE_LOCKED;
        case PoweringDown:
            return VmStatus.POWERING_DOWN;
        default:
            return null;
    }
}
#method_after
@Mapping(from = VMStatus.class, to = VmStatus.class)
public static VmStatus map(VMStatus entityStatus, VmStatus template) {
    switch(entityStatus) {
        case Unassigned:
            return VmStatus.UNASSIGNED;
        case Down:
            return VmStatus.DOWN;
        case Up:
            return VmStatus.UP;
        case PoweringUp:
            return VmStatus.POWERING_UP;
        case Paused:
            return VmStatus.PAUSED;
        case MigratingFrom:
            return VmStatus.MIGRATING;
        case MigratingTo:
            return VmStatus.MIGRATING;
        case Unknown:
            return VmStatus.UNKNOWN;
        case NotResponding:
            return VmStatus.NOT_RESPONDING;
        case WaitForLaunch:
            return VmStatus.WAIT_FOR_LAUNCH;
        case RebootInProgress:
            return VmStatus.REBOOT_IN_PROGRESS;
        case PreparingForHibernate:
        case SavingState:
            return VmStatus.SAVING_STATE;
        case RestoringState:
            return VmStatus.RESTORING_STATE;
        case Suspended:
            return VmStatus.SUSPENDED;
        case ImageLocked:
            return VmStatus.IMAGE_LOCKED;
        case PoweringDown:
            return VmStatus.POWERING_DOWN;
        default:
            return null;
    }
}
#end_block

#method_before
@Mapping(from = VmPayload.class, to = Payload.class)
public static Payload map(VmPayload entity, Payload template) {
    if (entity.getType() != null || entity.getFiles().isEmpty()) {
        Payload model = template != null ? template : new Payload();
        if (entity.getType() != null) {
            org.ovirt.engine.api.model.VmDeviceType deviceType = map(entity.getType(), null);
            if (deviceType != null) {
                model.setType(deviceType.value());
            }
        }
        model.setVolumeId(entity.getVolumeId());
        for (Map.Entry<String, String> entry : entity.getFiles().entrySet()) {
            PayloadFile file = new PayloadFile();
            file.setName(entry.getKey());
            file.setContent(entry.getValue());
            model.getFile().add(file);
        }
        return model;
    }
    return null;
}
#method_after
@Mapping(from = VmPayload.class, to = Payload.class)
public static Payload map(VmPayload entity, Payload template) {
    if (entity.getType() != null || entity.getFiles().isEmpty()) {
        Payload model = template != null ? template : new Payload();
        if (entity.getType() != null) {
            org.ovirt.engine.api.model.VmDeviceType deviceType = map(entity.getType(), null);
            if (deviceType != null) {
                model.setType(deviceType.value());
            }
        }
        model.setVolumeId(entity.getVolumeId());
        if (entity.getFiles().size() > 0) {
            model.setFiles(new Files());
            for (Map.Entry<String, String> entry : entity.getFiles().entrySet()) {
                File file = new File();
                file.setName(entry.getKey());
                file.setContent(entry.getValue());
                model.getFiles().getFiles().add(file);
            }
        }
        return model;
    }
    return null;
}
#end_block

#method_before
@Mapping(from = Payload.class, to = VmPayload.class)
public static VmPayload map(Payload model, VmPayload template) {
    VmPayload entity = template != null ? template : new VmPayload();
    if (model.getType() != null) {
        org.ovirt.engine.api.model.VmDeviceType deviceType = org.ovirt.engine.api.model.VmDeviceType.fromValue(model.getType());
        if (deviceType != null) {
            entity.setType(map(deviceType, null));
        }
    }
    entity.setVolumeId(model.getVolumeId());
    if (model.getFile() != null) {
        for (PayloadFile file : model.getFile()) {
            entity.getFiles().put(file.getName(), file.getContent());
        }
    }
    return entity;
}
#method_after
@Mapping(from = Payload.class, to = VmPayload.class)
public static VmPayload map(Payload model, VmPayload template) {
    VmPayload entity = template != null ? template : new VmPayload();
    if (model.getType() != null) {
        org.ovirt.engine.api.model.VmDeviceType deviceType = org.ovirt.engine.api.model.VmDeviceType.fromValue(model.getType());
        if (deviceType != null) {
            entity.setType(map(deviceType, null));
        }
    }
    if (model.isSetVolumeId()) {
        entity.setVolumeId(model.getVolumeId());
    }
    if (model.isSetFiles()) {
        for (File file : model.getFiles().getFiles()) {
            entity.getFiles().put(file.getName(), file.getContent());
        }
    }
    return entity;
}
#end_block

#method_before
@Mapping(from = CloudInit.class, to = CloudInitParameters.class)
public static CloudInitParameters map(CloudInit model, CloudInitParameters template) {
    CloudInitParameters entity = template != null ? template : new CloudInitParameters();
    entity.setHostname(model.getHostname());
    if (model.getAuthorizedKeys() != null && !model.getAuthorizedKeys().getAuthorizedKey().isEmpty()) {
        StringBuilder keys = new StringBuilder();
        for (AuthorizedKey key : model.getAuthorizedKeys().getAuthorizedKey()) {
            if ("root".equals(key.getUser())) {
                if (keys.length() > 0) {
                    keys.append("\n");
                }
                keys.append(key.getValue());
            }
        }
        entity.setAuthorizedKeys(keys.toString());
    }
    entity.setRegenerateKeys(model.isRegenerateSshKeys());
    if (model.getNetwork() != null) {
        if (model.getNetwork().getInterfaces() != null && !model.getNetwork().getInterfaces().getInterface().isEmpty()) {
            for (Interface iface : model.getNetwork().getInterfaces().getInterface()) {
                VdsNetworkInterface vdsNetworkInterface = new VdsNetworkInterface();
                NetworkBootProtocol protocol = HostNicMapper.map(BootProtocol.fromValue(iface.getBootProtocol()), null);
                vdsNetworkInterface.setBootProtocol(protocol);
                if (protocol == NetworkBootProtocol.DHCP) {
                    vdsNetworkInterface.setAddress(iface.getAddress());
                    vdsNetworkInterface.setSubnet(iface.getNetmask());
                    vdsNetworkInterface.setGateway(iface.getGateway());
                }
                if (iface.isOnboot()) {
                    if (entity.getStartOnBoot() == null) {
                        entity.setStartOnBoot(new ArrayList<String>());
                    }
                    entity.getStartOnBoot().add(iface.getName());
                }
            }
            if (model.getNetwork().getDnsServers() != null && model.getNetwork().getDnsServers().getDnsServer().isEmpty()) {
                entity.setDnsServers(model.getNetwork().getDnsServers().getDnsServer());
            }
            if (model.getNetwork().getDnsSearchDomains() != null && model.getNetwork().getDnsSearchDomains().getDnsSearchDomain().isEmpty()) {
                entity.setDnsSearch(model.getNetwork().getDnsSearchDomains().getDnsSearchDomain());
            }
        }
    }
    if (model.getTimezone() != null) {
        entity.setTimeZone(TimeZone.getTimeZone(model.getTimezone()));
    }
    if (model.getPasswords() != null && !model.getPasswords().getPassword().isEmpty()) {
        for (Password password : model.getPasswords().getPassword()) {
            if ("root".equals(password.getUser())) {
                entity.setRootPassword(password.getValue());
            }
        }
    }
    if (model.getFiles() != null && !model.getFiles().getFile().isEmpty()) {
        entity.setAttachments(new HashMap<String, Attachment>());
        for (File file : model.getFiles().getFile()) {
            Attachment attachment = new Attachment();
            attachment.setAttachmentType(map(AttachmentType.fromValue(file.getContent().getEncoding()), null));
            attachment.setContent(file.getContent().getValue());
            entity.getAttachments().put(file.getPath(), attachment);
        }
    }
    return entity;
}
#method_after
@Mapping(from = CloudInit.class, to = CloudInitParameters.class)
public static CloudInitParameters map(CloudInit model, CloudInitParameters template) {
    CloudInitParameters entity = template != null ? template : new CloudInitParameters();
    if (model.isSetHost() && model.getHost().isSetAddress()) {
        entity.setHostname(model.getHost().getAddress());
    }
    if (model.isSetAuthorizedKeys() && model.getAuthorizedKeys().isSetAuthorizedKeys() && !model.getAuthorizedKeys().getAuthorizedKeys().isEmpty()) {
        StringBuilder keys = new StringBuilder();
        for (AuthorizedKey authKey : model.getAuthorizedKeys().getAuthorizedKeys()) {
            if (keys.length() > 0) {
                keys.append("\n");
            }
            keys.append(authKey.getKey());
        }
        entity.setAuthorizedKeys(keys.toString());
    }
    if (model.isSetRegenerateSshKeys()) {
        entity.setRegenerateKeys(model.isRegenerateSshKeys());
    }
    if (model.isSetNetwork()) {
        if (model.getNetwork().isSetNics()) {
            Map<String, VdsNetworkInterface> interfaces = new HashMap<>();
            for (NIC iface : model.getNetwork().getNics().getNics()) {
                VdsNetworkInterface vdsNetworkInterface = new VdsNetworkInterface();
                if (iface.isSetBootProtocol()) {
                    NetworkBootProtocol protocol = HostNicMapper.map(BootProtocol.fromValue(iface.getBootProtocol()), null);
                    vdsNetworkInterface.setBootProtocol(protocol);
                    if (protocol != NetworkBootProtocol.DHCP && iface.isSetNetwork() && iface.getNetwork().isSetIp()) {
                        if (iface.getNetwork().getIp().isSetAddress()) {
                            vdsNetworkInterface.setAddress(iface.getNetwork().getIp().getAddress());
                        }
                        if (iface.getNetwork().getIp().isSetNetmask()) {
                            vdsNetworkInterface.setSubnet(iface.getNetwork().getIp().getNetmask());
                        }
                        if (iface.getNetwork().getIp().isSetGateway()) {
                            vdsNetworkInterface.setGateway(iface.getNetwork().getIp().getGateway());
                        }
                    }
                }
                interfaces.put(iface.getName(), vdsNetworkInterface);
                if (iface.isSetOnBoot() && iface.isOnBoot()) {
                    if (entity.getStartOnBoot() == null) {
                        entity.setStartOnBoot(new ArrayList<String>());
                    }
                    entity.getStartOnBoot().add(iface.getName());
                }
            }
            entity.setInterfaces(interfaces);
        }
        if (model.getNetwork().isSetDns()) {
            if (model.getNetwork().getDns().isSetServers() && model.getNetwork().getDns().getServers().isSetHosts() && !model.getNetwork().getDns().getServers().getHosts().isEmpty()) {
                List<String> dnsServers = new ArrayList<>();
                for (Host host : model.getNetwork().getDns().getServers().getHosts()) {
                    if (host.isSetAddress()) {
                        dnsServers.add(host.getAddress());
                    }
                }
                entity.setDnsServers(dnsServers);
            }
            if (model.getNetwork().getDns().isSetSearchDomains() && model.getNetwork().getDns().getSearchDomains().isSetHosts() && !model.getNetwork().getDns().getSearchDomains().getHosts().isEmpty()) {
                List<String> searchDomains = new ArrayList<>();
                for (Host host : model.getNetwork().getDns().getSearchDomains().getHosts()) {
                    if (host.isSetAddress()) {
                        searchDomains.add(host.getAddress());
                    }
                }
                entity.setDnsSearch(searchDomains);
            }
        }
    }
    if (model.isSetTimezone() && model.getTimezone() != null) {
        entity.setTimeZone(model.getTimezone());
    }
    if (model.isSetUsers()) {
        for (User user : model.getUsers().getUsers()) {
            // currently only root password supported in backend
            if ("root".equals(user.getUserName())) {
                entity.setRootPassword(user.getPassword());
            }
        }
    }
    if (model.isSetFiles() && model.getFiles().isSetFiles() && !model.getFiles().getFiles().isEmpty()) {
        entity.setAttachments(new HashMap<String, Attachment>());
        for (File file : model.getFiles().getFiles()) {
            Attachment attachment = new Attachment();
            attachment.setAttachmentType(map(PayloadEncoding.fromValue(file.getType()), null));
            attachment.setContent(file.getContent());
            entity.getAttachments().put(file.getName(), attachment);
        }
    }
    return entity;
}
#end_block

#method_before
static String cpuTuneToString(final CpuTune tune) {
    final StringBuilder builder = new StringBuilder();
    boolean first = true;
    for (final VCpuPin pin : tune.getVcpuPin()) {
        if (first) {
            first = false;
        } else {
            builder.append("_");
        }
        builder.append(pin.getVcpu()).append('#').append(pin.getCpuSet());
    }
    return builder.toString();
}
#method_after
static String cpuTuneToString(final CpuTune tune) {
    final StringBuilder builder = new StringBuilder();
    boolean first = true;
    for (final VCpuPin pin : tune.getVCpuPin()) {
        if (first) {
            first = false;
        } else {
            builder.append("_");
        }
        builder.append(pin.getVcpu()).append('#').append(pin.getCpuSet());
    }
    return builder.toString();
}
#end_block

#method_before
static CpuTune stringToCpuTune(String cpuPinning) {
    if (cpuPinning == null || cpuPinning.equals("")) {
        return null;
    }
    final CpuTune cpuTune = new CpuTune();
    for (String strCpu : cpuPinning.split("_")) {
        VCpuPin pin = stringToVCpupin(strCpu);
        cpuTune.getVcpuPin().add(pin);
    }
    return cpuTune;
}
#method_after
static CpuTune stringToCpuTune(String cpuPinning) {
    if (cpuPinning == null || cpuPinning.equals("")) {
        return null;
    }
    final CpuTune cpuTune = new CpuTune();
    for (String strCpu : cpuPinning.split("_")) {
        VCpuPin pin = stringToVCpupin(strCpu);
        cpuTune.getVCpuPin().add(pin);
    }
    return cpuTune;
}
#end_block

#method_before
@Override
protected void endSuccessfully() {
    if (getDestinationDiskImage() != null) {
        Guid storagePoolId = getDestinationDiskImage().getStoragePoolId() != null ? getDestinationDiskImage().getStoragePoolId() : Guid.Empty;
        Guid newImageGroupId = getDestinationDiskImage().getId() != null ? getDestinationDiskImage().getId() : Guid.Empty;
        Guid newImageId = getDestinationDiskImage().getImageId();
        Guid newStorageDomainID = getDestinationDiskImage().getStorageIds().get(0);
        // complete IRS data to DB disk image:
        DiskImage newImageIRS = (DiskImage) runVdsCommand(VDSCommandType.GetImageInfo, new GetImageInfoVDSCommandParameters(storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue();
        if (newImageIRS != null) {
            completeImageData(newImageIRS);
        }
        // Unlock destination image:
        getDestinationDiskImage().setImageStatus(ImageStatus.OK);
        getImageDao().update(getDestinationDiskImage().getImage());
    }
    unLockImage();
    setSucceeded(true);
}
#method_after
@Override
protected void endSuccessfully() {
    if (getDestinationDiskImage() != null) {
        Guid storagePoolId = getDestinationDiskImage().getStoragePoolId() != null ? getDestinationDiskImage().getStoragePoolId() : Guid.Empty;
        Guid newImageGroupId = getDestinationDiskImage().getId() != null ? getDestinationDiskImage().getId() : Guid.Empty;
        Guid newImageId = getDestinationDiskImage().getImageId();
        Guid newStorageDomainID = getDestinationDiskImage().getStorageIds().get(0);
        // complete IRS data to DB disk image:
        try {
            DiskImage newImageIRS = (DiskImage) runVdsCommand(VDSCommandType.GetImageInfo, new GetImageInfoVDSCommandParameters(storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue();
            if (newImageIRS != null) {
                completeImageData(newImageIRS);
            }
        } catch (VdcBLLException e) {
            // Logging only
            log.errorFormat("Unable to update the image info for image {0} (image group: {1}) on domain {2}", newImageId, newImageGroupId, newStorageDomainID);
        } finally {
            // Unlock destination image:
            getDestinationDiskImage().setImageStatus(ImageStatus.OK);
            getImageDao().update(getDestinationDiskImage().getImage());
        }
    }
    unLockImage();
    setSucceeded(true);
}
#end_block

#method_before
private EventResult runConnectHostToPoolEvent(final Guid storagePoolId, final VDS vds) {
    EventResult result = new EventResult(true, EventType.VDSCONNECTTOPOOL);
    StoragePool storagePool = getStoragePoolDAO().get(storagePoolId);
    StorageDomain masterDomain = getStorageDomainDAO().getStorageDomainByTypeAndPool(storagePoolId, StorageDomainType.Master);
    boolean masterDomainInactiveOrUnknown = masterDomain.getStatus() == StorageDomainStatus.InActive || masterDomain.getStatus() == StorageDomainStatus.Unknown;
    VDSReturnValue returnValue = ResourceManager.getInstance().runVdsCommand(VDSCommandType.ConnectStoragePool, new ConnectStoragePoolVDSCommandParameters(vds.getId(), storagePoolId, vds.getVdsSpmId(), masterDomain.getId(), storagePool.getmaster_domain_version()));
    if (!returnValue.getSucceeded()) {
        VDSError error = returnValue.getVdsError();
        if ((error == null || error.getCode() != VdcBllErrors.CannotConnectMultiplePools) && masterDomainInactiveOrUnknown) {
            log.infoFormat("Could not connect host {0} to pool {1}, as the master domain is in inactive/unknown status - not failing the operation", vds.getName(), storagePool.getName());
        } else {
            log.errorFormat("Could not connect host {0} to pool {1} with the message: {2}", vds.getName(), storagePool.getName(), error != null ? error.getMessage() : "");
            result.setSuccess(false);
        }
    }
    if (result.isSuccess()) {
        result.setSuccess(proceedVdsStats(!masterDomainInactiveOrUnknown));
        if (!result.isSuccess()) {
            AuditLogDirector.log(new AuditLogableBase(getVdsId()), AuditLogType.VDS_STORAGE_VDS_STATS_FAILED);
        }
    }
    return result;
}
#method_after
private EventResult runConnectHostToPoolEvent(final Guid storagePoolId, final VDS vds) {
    EventResult result = new EventResult(true, EventType.VDSCONNECTTOPOOL);
    StoragePool storagePool = getStoragePoolDAO().get(storagePoolId);
    StorageDomain masterDomain = getStorageDomainDAO().getStorageDomainByTypeAndPool(storagePoolId, StorageDomainType.Master);
    boolean masterDomainInactiveOrUnknown = masterDomain.getStatus() == StorageDomainStatus.InActive || masterDomain.getStatus() == StorageDomainStatus.Unknown;
    VDSError error = null;
    try {
        VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.ConnectStoragePool, new ConnectStoragePoolVDSCommandParameters(vds.getId(), storagePoolId, vds.getVdsSpmId(), masterDomain.getId(), storagePool.getmaster_domain_version()));
        if (!vdsReturnValue.getSucceeded()) {
            error = vdsReturnValue.getVdsError();
        }
    } catch (VdcBLLException e) {
        error = e.getVdsError();
    }
    if (error != null) {
        if (error.getCode() != VdcBllErrors.CannotConnectMultiplePools && masterDomainInactiveOrUnknown) {
            log.infoFormat("Could not connect host {0} to pool {1}, as the master domain is in inactive/unknown status - not failing the operation", vds.getName(), storagePool.getName());
        } else {
            log.errorFormat("Could not connect host {0} to pool {1} with the message: {2}", vds.getName(), storagePool.getName(), error.getMessage());
            result.setSuccess(false);
        }
    }
    if (result.isSuccess()) {
        result.setSuccess(proceedVdsStats(!masterDomainInactiveOrUnknown));
        if (!result.isSuccess()) {
            AuditLogDirector.log(new AuditLogableBase(getVdsId()), AuditLogType.VDS_STORAGE_VDS_STATS_FAILED);
        }
    }
    return result;
}
#end_block

#method_before
@Override
public void initialize() {
    super.initialize();
    if (getVm() != null) {
        updateSuggestedDiskAlias();
    }
    getSizeExtend().setIsAvailable(false);
}
#method_after
@Override
public void initialize() {
    super.initialize();
    if (getVm() != null) {
        updateSuggestedDiskAlias();
    } else {
        // Read only disk can be created only in the scope of VM.
        getIsReadOnly().setIsAvailable(false);
    }
    getSizeExtend().setIsAvailable(false);
}
#end_block

#method_before
private void onAttachDisks() {
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    ArrayList<IFrontendActionAsyncCallback> callbacks = new ArrayList<IFrontendActionAsyncCallback>();
    IFrontendActionAsyncCallback onFinishCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            NewDiskModel diskModel = (NewDiskModel) result.getState();
            diskModel.stopProgress();
            diskModel.cancel();
            postSave();
        }
    };
    ArrayList<EntityModel> disksToAttach = (Boolean) getIsInternal().getEntity() ? (ArrayList<EntityModel>) getInternalAttachableDisks().getSelectedItems() : (ArrayList<EntityModel>) getExternalAttachableDisks().getSelectedItems();
    for (int i = 0; i < disksToAttach.size(); i++) {
        DiskModel disk = (DiskModel) disksToAttach.get(i).getEntity();
        AttachDettachVmDiskParameters parameters = new AttachDettachVmDiskParameters(getVm().getId(), disk.getDisk().getId(), (Boolean) getIsPlugged().getEntity());
        actionTypes.add(VdcActionType.AttachDiskToVm);
        paramerterList.add(parameters);
        callbacks.add(i == disksToAttach.size() - 1 ? onFinishCallback : null);
    }
    startProgress(null);
    Frontend.RunMultipleActions(actionTypes, paramerterList, callbacks, null, this);
}
#method_after
private void onAttachDisks() {
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    ArrayList<IFrontendActionAsyncCallback> callbacks = new ArrayList<IFrontendActionAsyncCallback>();
    IFrontendActionAsyncCallback onFinishCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            NewDiskModel diskModel = (NewDiskModel) result.getState();
            diskModel.stopProgress();
            diskModel.cancel();
            postSave();
        }
    };
    ArrayList<EntityModel> disksToAttach = (Boolean) getIsInternal().getEntity() ? (ArrayList<EntityModel>) getInternalAttachableDisks().getSelectedItems() : (ArrayList<EntityModel>) getExternalAttachableDisks().getSelectedItems();
    for (int i = 0; i < disksToAttach.size(); i++) {
        DiskModel disk = (DiskModel) disksToAttach.get(i).getEntity();
        // Disk is attached to VM as read only or not, null is applicable only for floating disks
        // but this is not a case here.
        AttachDettachVmDiskParameters parameters = new AttachDettachVmDiskParameters(getVm().getId(), disk.getDisk().getId(), (Boolean) getIsPlugged().getEntity(), Boolean.TRUE.equals(disk.getDisk().getReadOnly()));
        actionTypes.add(VdcActionType.AttachDiskToVm);
        paramerterList.add(parameters);
        callbacks.add(i == disksToAttach.size() - 1 ? onFinishCallback : null);
    }
    startProgress(null);
    Frontend.RunMultipleActions(actionTypes, paramerterList, callbacks, null, this);
}
#end_block

#method_before
@OnTimerMethodAnnotation("gluster_async_task_poll_event")
public void updateGlusterAsyncTasks() {
    log.debug("Refreshing gluster tasks list");
    List<VDSGroup> clusters = getClusterDao().getAll();
    List<Guid> tasksFromClusters = new ArrayList<>();
    for (VDSGroup cluster : clusters) {
        Map<Guid, GlusterAsyncTask> runningTasks = updateTasksInCluster(cluster);
        if (runningTasks != null) {
            tasksFromClusters.addAll(runningTasks.keySet());
        }
    }
    cleanUpOrphanTasks(tasksFromClusters);
}
#method_after
@OnTimerMethodAnnotation("gluster_async_task_poll_event")
public void updateGlusterAsyncTasks() {
    log.debug("Refreshing gluster tasks list");
    List<VDSGroup> clusters = getClusterDao().getAll();
    List<Guid> tasksFromClusters = new ArrayList<>();
    boolean cleanOrphanTasks = true;
    for (VDSGroup cluster : clusters) {
        if (!getGlusterTaskUtils().supportsGlusterAsyncTasksFeature(cluster)) {
            continue;
        }
        try {
            Map<Guid, GlusterAsyncTask> runningTasks = getProvider().getTaskListForCluster(cluster.getId());
            if (runningTasks != null) {
                updateTasksInCluster(cluster, runningTasks);
                tasksFromClusters.addAll(runningTasks.keySet());
            }
        } catch (VdcBLLException e) {
            cleanOrphanTasks = false;
        }
    }
    if (cleanOrphanTasks) {
        cleanUpOrphanTasks(tasksFromClusters);
    }
}
#end_block

#method_before
private Map<Guid, GlusterAsyncTask> updateTasksInCluster(final VDSGroup cluster) {
    if (!supportsGlusterAsyncTasksFeature(cluster)) {
        return null;
    }
    Map<Guid, GlusterAsyncTask> runningTasks = getProvider().getTaskListForCluster(cluster.getId());
    if (runningTasks == null) {
        return null;
    }
    for (Entry<Guid, GlusterAsyncTask> entry : runningTasks.entrySet()) {
        Guid taskId = entry.getKey();
        final GlusterAsyncTask task = entry.getValue();
        List<Step> steps = getStepDao().getStepsByExternalId(taskId);
        if (steps.isEmpty()) {
            // the task may have been started from the CLI
            // need to add job to monitor
            TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    try {
                        createJobToMonitor(cluster, task);
                    } catch (VdcBLLException e) {
                        log.error("Error creating job for task from CLI", e);
                    }
                    return null;
                }
            });
        }
        // update status in step table
        for (Step step : steps) {
            if (step.getEndTime() != null) {
                // we have already processed the task
                continue;
            }
            step.setDescription(getTaskMessage(cluster, step.getStepType(), task));
            step.setStatus(task.getStatus());
            if (hasTaskCompleted(task)) {
                step.markStepEnded(task.getStatus());
                endStepJob(step);
                releaseVolumeLock(task.getTaskId());
            } else {
                getJobRepository().updateStep(step);
            }
        }
    }
    return runningTasks;
}
#method_after
private void updateTasksInCluster(final VDSGroup cluster, final Map<Guid, GlusterAsyncTask> runningTasks) {
    for (Entry<Guid, GlusterAsyncTask> entry : runningTasks.entrySet()) {
        Guid taskId = entry.getKey();
        final GlusterAsyncTask task = entry.getValue();
        List<Step> steps = getStepDao().getStepsByExternalId(taskId);
        if (steps.isEmpty()) {
            // the task may have been started from the CLI
            // need to add job to monitor
            TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    try {
                        createJobToMonitor(cluster, task);
                    } catch (VdcBLLException e) {
                        log.error("Error creating job for task from CLI", e);
                    }
                    return null;
                }
            });
        }
        getGlusterTaskUtils().updateSteps(cluster, task, steps);
    }
}
#end_block

#method_before
private Guid addAsyncTaskStep(VDSGroup cluster, GlusterAsyncTask task, StepEnum step, Guid execStepId) {
    VdcReturnValueBase result;
    result = getBackend().runInternalAction(VdcActionType.AddInternalStep, new AddStepParameters(execStepId, getTaskMessage(cluster, step, task), step));
    if (!result.getSucceeded()) {
        // log and return
        throw new VdcBLLException(result.getFault().getError());
    }
    Guid asyncStepId = (Guid) result.getActionReturnValue();
    return asyncStepId;
}
#method_after
private Guid addAsyncTaskStep(VDSGroup cluster, GlusterAsyncTask task, StepEnum step, Guid execStepId) {
    VdcReturnValueBase result;
    result = getBackend().runInternalAction(VdcActionType.AddInternalStep, new AddStepParameters(execStepId, getGlusterTaskUtils().getTaskMessage(cluster, step, task), step));
    if (!result.getSucceeded()) {
        // log and return
        throw new VdcBLLException(result.getFault().getError());
    }
    Guid asyncStepId = (Guid) result.getActionReturnValue();
    return asyncStepId;
}
#end_block

#method_before
private Guid addJob(VDSGroup cluster, GlusterAsyncTask task, VdcActionType actionType) {
    VdcReturnValueBase result = getBackend().runInternalAction(VdcActionType.AddInternalJob, new AddInternalJobParameters(ExecutionMessageDirector.resolveJobMessage(actionType, getMessageMap(cluster, task)), actionType, true));
    if (!result.getSucceeded()) {
        // log and return
        throw new VdcBLLException(result.getFault().getError());
    }
    Guid jobId = (Guid) result.getActionReturnValue();
    return jobId;
}
#method_after
private Guid addJob(VDSGroup cluster, GlusterAsyncTask task, VdcActionType actionType) {
    VdcReturnValueBase result = getBackend().runInternalAction(VdcActionType.AddInternalJob, new AddInternalJobParameters(ExecutionMessageDirector.resolveJobMessage(actionType, getGlusterTaskUtils().getMessageMap(cluster, task)), actionType, true));
    if (!result.getSucceeded()) {
        // log and return
        throw new VdcBLLException(result.getFault().getError());
    }
    Guid jobId = (Guid) result.getActionReturnValue();
    return jobId;
}
#end_block

#method_before
private void cleanUpOrphanTasks(List<Guid> runningTasksinCluster) {
    // Populate the list of tasks that need to be monitored from database
    List<Guid> taskListInDB = getProvider().getMonitoredTaskIDsInDB();
    if (taskListInDB == null) {
        taskListInDB = new ArrayList<Guid>();
    }
    // if task is in DB but not in running task list
    final Set<Guid> tasksNotRunning = new HashSet<Guid>(taskListInDB);
    tasksNotRunning.removeAll(runningTasksinCluster);
    for (Guid taskId : tasksNotRunning) {
        GlusterVolumeEntity vol = getVolumeDao().getVolumeByGlusterTask(taskId);
        if (vol != null && vol.getStatus() != GlusterStatus.UP) {
            // the volume is not UP. Hence gluster may not have been able to return tasks for the volume
            continue;
        }
        // Volume is up, but gluster does not know of task
        // will mark job ended with status unknown.
        List<Step> steps = getStepDao().getStepsByExternalId(taskId);
        for (Step step : steps) {
            step.markStepEnded(JobExecutionStatus.UNKNOWN);
            endStepJob(step);
        }
        releaseVolumeLock(taskId);
    }
}
#method_after
private void cleanUpOrphanTasks(List<Guid> runningTasksinCluster) {
    // Populate the list of tasks that need to be monitored from database
    List<Guid> taskListInDB = getProvider().getMonitoredTaskIDsInDB();
    if (taskListInDB == null || taskListInDB.isEmpty()) {
        return;
    }
    // if task is in DB but not in running task list
    final Set<Guid> tasksNotRunning = new HashSet<Guid>(taskListInDB);
    tasksNotRunning.removeAll(runningTasksinCluster);
    for (Guid taskId : tasksNotRunning) {
        GlusterVolumeEntity vol = getVolumeDao().getVolumeByGlusterTask(taskId);
        if (vol != null && vol.getStatus() != GlusterStatus.UP) {
            // the volume is not UP. Hence gluster may not have been able to return tasks for the volume
            continue;
        }
        // Volume is up, but gluster does not know of task
        // will mark job ended with status unknown.
        List<Step> steps = getStepDao().getStepsByExternalId(taskId);
        for (Step step : steps) {
            step.markStepEnded(JobExecutionStatus.UNKNOWN);
            getGlusterTaskUtils().endStepJob(step);
        }
        getGlusterTaskUtils().releaseVolumeLock(taskId);
    }
}
#end_block

#method_before
@Before
public void init() {
    MockitoAnnotations.initMocks(this);
    tasksSyncJob = Mockito.spy(GlusterTasksSyncJob.getInstance());
    logUtil = Mockito.spy(GlusterAuditLogUtil.getInstance());
    doNothing().when(logUtil).logClusterMessage(any(Guid.class), any(AuditLogType.class));
    doReturn(clusterDao).when(tasksSyncJob).getClusterDao();
    doReturn(getClusters()).when(clusterDao).getAll();
    doReturn(provider).when(tasksSyncJob).getProvider();
    doReturn(stepDao).when(tasksSyncJob).getStepDao();
    doReturn(volumeDao).when(tasksSyncJob).getVolumeDao();
    doReturn(jobRepository).when(tasksSyncJob).getJobRepository();
    doReturn(backend).when(tasksSyncJob).getBackend();
    doNothing().when(tasksSyncJob).releaseLock(any(Guid.class));
    doNothing().when(tasksSyncJob).endStepJob(any(Step.class));
    doReturn(null).when(provider).getMonitoredTaskIDsInDB();
}
#method_after
@Before
public void init() {
    MockitoAnnotations.initMocks(this);
    tasksSyncJob = Mockito.spy(GlusterTasksSyncJob.getInstance());
    logUtil = Mockito.spy(GlusterAuditLogUtil.getInstance());
    taskUtils = Mockito.spy(GlusterTaskUtils.getInstance());
    doNothing().when(logUtil).logClusterMessage(any(Guid.class), any(AuditLogType.class));
    doReturn(clusterDao).when(tasksSyncJob).getClusterDao();
    doReturn(getClusters()).when(clusterDao).getAll();
    doReturn(provider).when(tasksSyncJob).getProvider();
    doReturn(stepDao).when(tasksSyncJob).getStepDao();
    doReturn(volumeDao).when(tasksSyncJob).getVolumeDao();
    doReturn(volumeDao).when(taskUtils).getVolumeDao();
    doReturn(jobRepository).when(tasksSyncJob).getJobRepository();
    doReturn(jobRepository).when(taskUtils).getJobRepository();
    doReturn(backend).when(tasksSyncJob).getBackend();
    doReturn(taskUtils).when(tasksSyncJob).getGlusterTaskUtils();
    doNothing().when(taskUtils).releaseLock(any(Guid.class));
    doNothing().when(taskUtils).endStepJob(any(Step.class));
    doReturn(null).when(provider).getMonitoredTaskIDsInDB();
}
#end_block

#method_before
@Test
public void updateTasksInCluster() {
    doReturn(getTasks()).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(1)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(1)).endStepJob(any(Step.class));
}
#method_after
@Test
public void updateTasksInCluster() {
    doReturn(getTasks()).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(1)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(1)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void cleanOrphanTasks() {
    doReturn(getTasks()).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(Arrays.asList(TASK_GUIDS[2])).when(provider).getMonitoredTaskIDsInDB();
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(1)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(2)).endStepJob(any(Step.class));
}
#method_after
@Test
public void cleanOrphanTasks() {
    doReturn(getTasks()).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(Arrays.asList(TASK_GUIDS[2])).when(provider).getMonitoredTaskIDsInDB();
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(1)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(2)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void cleanOrphanTasksWhenNoVolume() {
    doReturn(null).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(Arrays.asList(TASK_GUIDS[2])).when(provider).getMonitoredTaskIDsInDB();
    doReturn(null).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[2]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[2]);
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(tasksSyncJob, times(1)).endStepJob(any(Step.class));
}
#method_after
@Test
public void cleanOrphanTasksWhenNoVolume() {
    doReturn(null).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(Arrays.asList(TASK_GUIDS[2])).when(provider).getMonitoredTaskIDsInDB();
    doReturn(null).when(volumeDao).getVolumeByGlusterTask(TASK_GUIDS[2]);
    doReturn(getSteps()).when(stepDao).getStepsByExternalId(TASK_GUIDS[2]);
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(taskUtils, times(1)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testUpdateWhenNoTasks() {
    doReturn(null).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[0], null);
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[1], null);
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
}
#method_after
@Test
public void testUpdateWhenNoTasks() {
    doReturn(null).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[0], null);
    Mockito.verify(volumeDao, times(0)).updateVolumeTask(VOL_GUIDS[1], null);
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testCreateTasksStartedFromCLI() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(true, Guid.newGuid())).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
    Mockito.verify(backend, times(6)).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
}
#method_after
@Test
public void testCreateTasksStartedFromCLI() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(true, Guid.newGuid())).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
    Mockito.verify(backend, times(6)).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
}
#end_block

#method_before
@Test
public void testCreateTasksStartedFromCLIWithErrors() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(false, null)).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
    Mockito.verify(backend, times(2)).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
}
#method_after
@Test
public void testCreateTasksStartedFromCLIWithErrors() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    doReturn(mockVdcReturn(false, null)).when(backend).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
    prepareMocksForTasksFromCLI();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
    Mockito.verify(backend, times(2)).runInternalAction(any(VdcActionType.class), any(VdcActionParametersBase.class));
}
#end_block

#method_before
@Test
public void testUpdateWhenNoCompletedTasks() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(2)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(0)).endStepJob(any(Step.class));
}
#method_after
@Test
public void testUpdateWhenNoCompletedTasks() {
    doReturn(getTasks(JobExecutionStatus.STARTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(2)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(0)).endStepJob(any(Step.class));
}
#end_block

#method_before
@Test
public void testUpdateWhenAbortedTasks() {
    doReturn(getTasks(JobExecutionStatus.ABORTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(tasksSyncJob, times(2)).endStepJob(any(Step.class));
}
#method_after
@Test
public void testUpdateWhenAbortedTasks() {
    doReturn(getTasks(JobExecutionStatus.ABORTED)).when(provider).getTaskListForCluster(CLUSTER_GUIDS[1]);
    prepareMocks();
    tasksSyncJob.updateGlusterAsyncTasks();
    Mockito.verify(jobRepository, times(0)).updateStep(any(Step.class));
    Mockito.verify(taskUtils, times(2)).endStepJob(any(Step.class));
}
#end_block

#method_before
public Map<Guid, GlusterAsyncTask> getTaskListForCluster(Guid id) {
    VDS upServer = ClusterUtils.getInstance().getUpServer(id);
    if (upServer == null) {
        log.info("No up server in cluster");
        return null;
    }
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterTasksList, new VdsIdVDSCommandParametersBase(upServer.getId()));
    if (returnValue.getSucceeded()) {
        List<GlusterAsyncTask> tasks = (List<GlusterAsyncTask>) returnValue.getReturnValue();
        Map<Guid, GlusterAsyncTask> tasksMap = new HashMap<>();
        for (GlusterAsyncTask task : tasks) {
            tasksMap.put(task.getTaskId(), task);
        }
        return tasksMap;
    } else {
        log.error(returnValue.getVdsError());
        return null;
    }
}
#method_after
public Map<Guid, GlusterAsyncTask> getTaskListForCluster(Guid id) {
    VDS upServer = ClusterUtils.getInstance().getUpServer(id);
    if (upServer == null) {
        log.info("No up server in cluster");
        throw new VdcBLLException(VdcBllErrors.NO_UP_SERVER_FOUND);
    }
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterTasksList, new VdsIdVDSCommandParametersBase(upServer.getId()));
    if (returnValue.getSucceeded()) {
        List<GlusterAsyncTask> tasks = (List<GlusterAsyncTask>) returnValue.getReturnValue();
        Map<Guid, GlusterAsyncTask> tasksMap = new HashMap<>();
        for (GlusterAsyncTask task : tasks) {
            tasksMap.put(task.getTaskId(), task);
        }
        return tasksMap;
    } else {
        log.error(returnValue.getVdsError());
        throw new VdcBLLException(VdcBllErrors.GlusterVolumeStatusAllFailedException, returnValue.getVdsError().getMessage());
    }
}
#end_block

#method_before
@Test
public void canRebalanceOnDistributedVolumeWithBricksDown() {
    GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 5);
    // One Brick Down
    volumeEntity.getBricks().get(3).setStatus(GlusterStatus.DOWN);
    ValidationResult validationResult = brickValidator.canRebalance(volumeEntity);
    assertFalse(validationResult.isValid());
    // Two Bricks Down
    volumeEntity.getBricks().get(4).setStatus(GlusterStatus.DOWN);
    assertFalse(validationResult.isValid());
    // One Brick Down
    volumeEntity.getBricks().get(3).setStatus(GlusterStatus.UP);
    assertFalse(validationResult.isValid());
}
#method_after
@Test
public void canRebalanceOnDistributedVolumeWithBricksDown() {
    GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 5);
    // One Brick Down
    volumeEntity.getBricks().get(3).setStatus(GlusterStatus.DOWN);
    ValidationResult validationResult = brickValidator.canRebalance(volumeEntity);
    assertFalse(validationResult.isValid());
    // Two Bricks Down
    volumeEntity.getBricks().get(4).setStatus(GlusterStatus.DOWN);
    validationResult = brickValidator.canRebalance(volumeEntity);
    assertFalse(validationResult.isValid());
    // One Brick Down
    volumeEntity.getBricks().get(3).setStatus(GlusterStatus.UP);
    validationResult = brickValidator.canRebalance(volumeEntity);
    assertFalse(validationResult.isValid());
}
#end_block

#method_before
@Test
public void canRebalanceOnDistributeReplicateVolume() {
    GlusterVolumeEntity volumeEntity = getDistributeReplacatedVolume(volumeId1, 12, 4);
    ValidationResult validationResult = brickValidator.canRebalance(volumeEntity);
    assertTrue(validationResult.isValid());
}
#method_after
@Test
public void canRebalanceOnDistributeReplicateVolume() {
    GlusterVolumeEntity volumeEntity = getDistributedReplacatedVolume(volumeId1, 12, 4);
    ValidationResult validationResult = brickValidator.canRebalance(volumeEntity);
    assertTrue(validationResult.isValid());
}
#end_block

#method_before
@Test
public void canRebalanceOnDistributeReplicateVolumeWithFewBrickDown() {
    GlusterVolumeEntity volumeEntity = getDistributeReplacatedVolume(volumeId1, 12, 4);
    volumeEntity.getBricks().get(0).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(1).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(2).setStatus(GlusterStatus.DOWN);
    ValidationResult validationResult = brickValidator.canRebalance(volumeEntity);
    assertTrue(validationResult.isValid());
    volumeEntity.getBricks().get(4).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(5).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(6).setStatus(GlusterStatus.DOWN);
    validationResult = brickValidator.canRebalance(volumeEntity);
    assertTrue(validationResult.isValid());
}
#method_after
@Test
public void canRebalanceOnDistributeReplicateVolumeWithFewBrickDown() {
    GlusterVolumeEntity volumeEntity = getDistributedReplacatedVolume(volumeId1, 12, 4);
    volumeEntity.getBricks().get(0).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(1).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(2).setStatus(GlusterStatus.DOWN);
    ValidationResult validationResult = brickValidator.canRebalance(volumeEntity);
    assertTrue(validationResult.isValid());
    volumeEntity.getBricks().get(4).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(5).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(6).setStatus(GlusterStatus.DOWN);
    validationResult = brickValidator.canRebalance(volumeEntity);
    assertTrue(validationResult.isValid());
}
#end_block

#method_before
@Test
public void canRebalanceOnDistributeReplicateVolumeWithOneReplicaPairDown() {
    GlusterVolumeEntity volumeEntity = getDistributeReplacatedVolume(volumeId1, 12, 4);
    volumeEntity.getBricks().get(0).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(1).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(2).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(3).setStatus(GlusterStatus.DOWN);
    ValidationResult validationResult = brickValidator.canRebalance(volumeEntity);
    assertFalse(validationResult.isValid());
}
#method_after
@Test
public void canRebalanceOnDistributeReplicateVolumeWithOneReplicaPairDown() {
    GlusterVolumeEntity volumeEntity = getDistributedReplacatedVolume(volumeId1, 12, 4);
    volumeEntity.getBricks().get(0).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(1).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(2).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(3).setStatus(GlusterStatus.DOWN);
    ValidationResult validationResult = brickValidator.canRebalance(volumeEntity);
    assertFalse(validationResult.isValid());
}
#end_block

#method_before
@Test
public void canRebalanceOnDistributeReplicateVolumeWithTwoReplicaPairDown() {
    GlusterVolumeEntity volumeEntity = getDistributeReplacatedVolume(volumeId1, 12, 4);
    volumeEntity.getBricks().get(0).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(2).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(3).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(4).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(5).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(6).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(7).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(8).setStatus(GlusterStatus.DOWN);
    ValidationResult validationResult = brickValidator.canRebalance(volumeEntity);
    assertFalse(validationResult.isValid());
}
#method_after
@Test
public void canRebalanceOnDistributeReplicateVolumeWithTwoReplicaPairDown() {
    GlusterVolumeEntity volumeEntity = getDistributedReplacatedVolume(volumeId1, 12, 4);
    volumeEntity.getBricks().get(0).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(2).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(3).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(4).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(5).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(6).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(7).setStatus(GlusterStatus.DOWN);
    volumeEntity.getBricks().get(8).setStatus(GlusterStatus.DOWN);
    ValidationResult validationResult = brickValidator.canRebalance(volumeEntity);
    assertFalse(validationResult.isValid());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    int replicaCount = (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) ? getParameters().getReplicaCount() : 0;
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StartRemoveGlusterVolumeBricks, new GlusterVolumeRemoveBricksVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getBricks(), replicaCount, true));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        removeBricksFromVolumeInDb(getParameters().getBricks());
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#method_after
@Override
protected void executeCommand() {
    int replicaCount = (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) ? getParameters().getReplicaCount() : 0;
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StartRemoveGlusterVolumeBricks, new GlusterVolumeRemoveBricksVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getBricks(), replicaCount, true));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        GlusterDBUtils.getInstance().removeBricksFromVolumeInDb(getGlusterVolume(), getParameters().getBricks(), replicaCount);
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
public ValidationResult canRemoveBrick(List<GlusterBrickEntity> bricks, GlusterVolumeEntity volumeEntity, int replicaCount, boolean forceRemove) {
    if (bricks.isEmpty()) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
    }
    if (volumeEntity.getBricks().size() == 1 || volumeEntity.getBricks().size() <= bricks.size()) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
    }
    if (volumeEntity.getVolumeType().isReplicatedType()) {
        if (replicaCount < volumeEntity.getReplicaCount() - 1) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (replicaCount > volumeEntity.getReplicaCount()) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT);
        }
    }
    for (GlusterBrickEntity brick : bricks) {
        if (brick.getId(false) == null && brick.getQualifiedName() == null) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        }
        GlusterBrickEntity brickFromVolume = volumeEntity.getBrickWithId(brick.getId());
        if (brickFromVolume == null) {
            brickFromVolume = volumeEntity.getBrickWithQualifiedName(brick.getQualifiedName());
        }
        if (brickFromVolume == null) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_BRICK_INVALID);
        } else {
            // Fill required details from volume data
            brick.setServerName(brickFromVolume.getServerName());
            brick.setBrickDirectory(brickFromVolume.getBrickDirectory());
        }
    }
    if (!forceRemove) {
        return canRebalance(volumeEntity);
    } else {
        return ValidationResult.VALID;
    }
}
#method_after
public ValidationResult canRemoveBrick(List<GlusterBrickEntity> bricks, GlusterVolumeEntity volumeEntity, int replicaCount, boolean forceRemove) {
    if (bricks.isEmpty()) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
    }
    if (volumeEntity.getBricks().size() == 1 || volumeEntity.getBricks().size() <= bricks.size()) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
    }
    if (volumeEntity.getVolumeType().isReplicatedType()) {
        if (replicaCount < volumeEntity.getReplicaCount() - 1) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (replicaCount > volumeEntity.getReplicaCount()) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT);
        }
    }
    for (GlusterBrickEntity brick : bricks) {
        if (brick.getId(false) == null && brick.getQualifiedName() == null) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        }
        GlusterBrickEntity brickFromVolume = volumeEntity.getBrickWithId(brick.getId());
        if (brickFromVolume == null) {
            brickFromVolume = volumeEntity.getBrickWithQualifiedName(brick.getQualifiedName());
        }
        if (brickFromVolume == null) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_BRICK_INVALID);
        } else {
            // Fill required details from volume data
            brick.setId(brickFromVolume.getId());
            brick.setServerName(brickFromVolume.getServerName());
            brick.setBrickDirectory(brickFromVolume.getBrickDirectory());
        }
    }
    if (!forceRemove) {
        return canRebalance(volumeEntity);
    } else {
        return ValidationResult.VALID;
    }
}
#end_block

#method_before
public ValidationResult canRebalance(GlusterVolumeEntity volumeEntity) {
    int replicaCount = 0;
    List<GlusterBrickEntity> bricks = volumeEntity.getBricks();
    if (volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTE) {
        replicaCount = 1;
    } else if (volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        replicaCount = volumeEntity.getReplicaCount();
    }
    int i = 0, j = 0;
    while (i < bricks.size()) {
        for (j = 0; j < replicaCount; j++) {
            if (bricks.get(i + j).isOnline()) {
                i = i + replicaCount;
                break;
            }
        }
        if (j == replicaCount) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_ONE_OR_MORE_BRICKS_ARE_DOWN);
        }
    }
    return ValidationResult.VALID;
}
#method_after
public ValidationResult canRebalance(GlusterVolumeEntity volumeEntity) {
    int replicaCount = 1;
    List<GlusterBrickEntity> bricks = volumeEntity.getBricks();
    if (volumeEntity.getVolumeType().isReplicatedType()) {
        replicaCount = volumeEntity.getReplicaCount();
    }
    int brickIndex = 0, replicaIndex = 0;
    while (brickIndex < bricks.size()) {
        for (replicaIndex = 0; replicaIndex < replicaCount; replicaIndex++) {
            if (bricks.get(brickIndex + replicaIndex).isOnline()) {
                brickIndex = brickIndex + replicaCount;
                break;
            }
        }
        if (replicaIndex == replicaCount) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_ONE_OR_MORE_BRICKS_ARE_DOWN);
        }
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
@Override
protected Step doPopulate(Step model, org.ovirt.engine.core.common.job.Step entity) {
    if (entity.getExternalSystem() != null && entity.getExternalSystem().getType() != null) {
        return populateExternalTaskDetails(model, entity);
    }
    return model;
}
#method_after
@Override
protected Step doPopulate(Step model, org.ovirt.engine.core.common.job.Step entity) {
    return model;
}
#end_block

#method_before
@Mapping(from = org.ovirt.engine.core.common.job.Step.class, to = Step.class)
public static Step map(org.ovirt.engine.core.common.job.Step entity, Step step) {
    Step model = step != null ? step : new Step();
    model.setId(entity.getId().toString());
    if (entity.getParentStepId() != null) {
        Step parentStep = new Step();
        parentStep.setId(entity.getParentStepId().toString());
        model.setParentStep(parentStep);
    }
    Job job = new Job();
    job.setId(entity.getJobId().toString());
    model.setJob(job);
    StepEnum type = map(entity.getStepType());
    model.setType(type == null ? null : type.value());
    model.setDescription(entity.getDescription());
    model.setNumber(entity.getStepNumber());
    model.setStatus(JobMapper.map(entity.getStatus(), null));
    model.setStartTime(DateMapper.map(entity.getStartTime(), null));
    if (entity.getEndTime() != null) {
        model.setEndTime(TypeConversionHelper.toXMLGregorianCalendar(entity.getEndTime(), null));
    }
    model.setExternal(entity.isExternal());
    if (entity.getExternalSystem() != null && entity.getExternalSystem().getType() != null) {
        model.setExternalType(entity.getExternalSystem().getType().name());
    }
    return model;
}
#method_after
@Mapping(from = org.ovirt.engine.core.common.job.Step.class, to = Step.class)
public static Step map(org.ovirt.engine.core.common.job.Step entity, Step step) {
    Step model = step != null ? step : new Step();
    model.setId(entity.getId().toString());
    if (entity.getParentStepId() != null) {
        Step parentStep = new Step();
        parentStep.setId(entity.getParentStepId().toString());
        model.setParentStep(parentStep);
    }
    Job job = new Job();
    job.setId(entity.getJobId().toString());
    model.setJob(job);
    StepEnum type = map(entity.getStepType());
    model.setType(type == null ? null : type.value());
    model.setDescription(entity.getDescription());
    model.setNumber(entity.getStepNumber());
    model.setStatus(JobMapper.map(entity.getStatus(), null));
    model.setStartTime(DateMapper.map(entity.getStartTime(), null));
    if (entity.getEndTime() != null) {
        model.setEndTime(TypeConversionHelper.toXMLGregorianCalendar(entity.getEndTime(), null));
    }
    model.setExternal(entity.isExternal());
    if (entity.getExternalSystem() != null && entity.getExternalSystem().getType() != null) {
        model.setExternalType(map(entity.getExternalSystem().getType()));
    }
    return model;
}
#end_block

#method_before
@Mapping(from = org.ovirt.engine.core.common.job.StepEnum.class, to = StepEnum.class)
public static StepEnum map(org.ovirt.engine.core.common.job.StepEnum type) {
    if (StepEnum.VALIDATING.name().equals(type.name())) {
        return StepEnum.VALIDATING;
    }
    if (StepEnum.EXECUTING.name().equals(type.name())) {
        return StepEnum.EXECUTING;
    }
    if (StepEnum.FINALIZING.name().equals(type.name())) {
        return StepEnum.FINALIZING;
    }
    return StepEnum.UNKNOWN;
}
#method_after
@Mapping(from = org.ovirt.engine.core.common.job.ExternalSystemType.class, to = ExternalSystemType.class)
public static String map(org.ovirt.engine.core.common.job.ExternalSystemType type) {
    switch(type) {
        case VDSM:
            return ExternalSystemType.VDSM.toString();
        case GLUSTER:
            return ExternalSystemType.GLUSTER.toString();
        default:
            return null;
    }
}
#end_block

#method_before
@Override
public void Initialize() {
    log.info("Start initializing " + getClass().getSimpleName());
    // makes sure that initialization occurs only once per class (which is ok, as this is a @Service)
    if (firstInitialization) {
        // In case of a server termination that had uncompleted compensation-aware related commands
        // we have to get all those commands and call compensate on each
        compensate();
        firstInitialization = false;
    }
    // initialize configuration utils to use DB
    Config.setConfigUtils(new DBConfigUtils());
    log.info("Running ovirt-engine " + Config.<String>GetValue(ConfigValues.ProductRPMVersion));
    _resourceManger = new VDSBrokerFrontendImpl();
    CpuFlagsManagerHandler.InitDictionaries();
    // ResourceManager res = ResourceManager.Instance;
    // Initialize the AuditLogCleanupManager
    AuditLogCleanupManager.getInstance();
    TagsDirector.getInstance().init();
    IsoDomainListSyncronizer.getInstance();
    initOsRepository();
    initSearchDependencies();
    InitHandlers();
    final String AppErrorsFileName = "bundles/AppErrors.properties";
    final String VdsErrorsFileName = "bundles/VdsmErrors.properties";
    errorsTranslator = new ErrorTranslatorImpl(AppErrorsFileName, VdsErrorsFileName);
    _vdsErrorsTranslator = new ErrorTranslatorImpl(VdsErrorsFileName);
    // initialize the JobRepository object and finalize non-terminated jobs
    log.infoFormat("Mark incomplete jobs as {0}", JobExecutionStatus.UNKNOWN.name());
    initJobRepository();
    // initializes the JobRepositoryCleanupManager
    JobRepositoryCleanupManager.getInstance().initialize();
    // initialize the AutoRecoveryManager
    AutoRecoveryManager.getInstance().initialize();
    initExecutionMessageDirector();
    Integer sessionTimeoutInterval = Config.<Integer>GetValue(ConfigValues.UserSessionTimeOutInterval);
    Integer sessionTimeOutInvalidationInterval = Config.<Integer>GetValue(ConfigValues.UserSessionTimeOutInvalidationInterval);
    // negative value means session should never expire, therefore no need to clean sessions.
    if (sessionTimeoutInterval > 0) {
        SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(SessionDataContainer.getInstance(), "cleanExpiredUsersSessions", new Class[] {}, new Object[] {}, sessionTimeoutInterval, sessionTimeOutInvalidationInterval, TimeUnit.MINUTES);
    }
    // Set start-up time
    _startedAt = DateTime.getNow();
    int vmPoolMonitorIntervalInMinutes = Config.<Integer>GetValue(ConfigValues.VmPoolMonitorIntervalInMinutes);
    poolMonitoringJobId = SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(new VmPoolMonitor(), "managePrestartedVmsInAllVmPools", new Class[] {}, new Object[] {}, vmPoolMonitorIntervalInMinutes, vmPoolMonitorIntervalInMinutes, TimeUnit.MINUTES);
    int autoStartVmsRunnerIntervalInSeconds = Config.<Integer>GetValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds);
    SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(AutoStartVmsRunner.getInstance(), "startFailedAutoStartVms", new Class[] {}, new Object[] {}, autoStartVmsRunnerIntervalInSeconds, autoStartVmsRunnerIntervalInSeconds, TimeUnit.SECONDS);
    int quotaCacheIntervalInMinutes = Config.<Integer>GetValue(ConfigValues.QuotaCacheIntervalInMinutes);
    SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(QuotaManager.getInstance(), "updateQuotaCache", new Class[] {}, new Object[] {}, 1, quotaCacheIntervalInMinutes, TimeUnit.MINUTES);
    // initializes attestation
    initAttestation();
}
#method_after
@Override
public void Initialize() {
    log.info("Start initializing " + getClass().getSimpleName());
    // makes sure that initialization occurs only once per class (which is ok, as this is a @Service)
    if (firstInitialization) {
        // In case of a server termination that had uncompleted compensation-aware related commands
        // we have to get all those commands and call compensate on each
        compensate();
        firstInitialization = false;
    }
    // initialize configuration utils to use DB
    Config.setConfigUtils(new DBConfigUtils());
    log.info("Running ovirt-engine " + Config.<String>GetValue(ConfigValues.ProductRPMVersion));
    _resourceManger = new VDSBrokerFrontendImpl();
    CpuFlagsManagerHandler.InitDictionaries();
    // ResourceManager res = ResourceManager.Instance;
    // Initialize the AuditLogCleanupManager
    AuditLogCleanupManager.getInstance();
    TagsDirector.getInstance().init();
    IsoDomainListSyncronizer.getInstance();
    initOsRepository();
    initSearchDependencies();
    initHandlers();
    final String AppErrorsFileName = "bundles/AppErrors.properties";
    final String VdsErrorsFileName = "bundles/VdsmErrors.properties";
    errorsTranslator = new ErrorTranslatorImpl(AppErrorsFileName, VdsErrorsFileName);
    _vdsErrorsTranslator = new ErrorTranslatorImpl(VdsErrorsFileName);
    // initialize the JobRepository object and finalize non-terminated jobs
    log.infoFormat("Mark incomplete jobs as {0}", JobExecutionStatus.UNKNOWN.name());
    initJobRepository();
    // initializes the JobRepositoryCleanupManager
    JobRepositoryCleanupManager.getInstance().initialize();
    // initialize the AutoRecoveryManager
    AutoRecoveryManager.getInstance().initialize();
    initExecutionMessageDirector();
    Integer sessionTimeoutInterval = Config.<Integer>GetValue(ConfigValues.UserSessionTimeOutInterval);
    Integer sessionTimeOutInvalidationInterval = Config.<Integer>GetValue(ConfigValues.UserSessionTimeOutInvalidationInterval);
    // negative value means session should never expire, therefore no need to clean sessions.
    if (sessionTimeoutInterval > 0) {
        SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(SessionDataContainer.getInstance(), "cleanExpiredUsersSessions", new Class[] {}, new Object[] {}, sessionTimeoutInterval, sessionTimeOutInvalidationInterval, TimeUnit.MINUTES);
    }
    // Set start-up time
    _startedAt = DateTime.getNow();
    int vmPoolMonitorIntervalInMinutes = Config.<Integer>GetValue(ConfigValues.VmPoolMonitorIntervalInMinutes);
    poolMonitoringJobId = SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(new VmPoolMonitor(), "managePrestartedVmsInAllVmPools", new Class[] {}, new Object[] {}, vmPoolMonitorIntervalInMinutes, vmPoolMonitorIntervalInMinutes, TimeUnit.MINUTES);
    int autoStartVmsRunnerIntervalInSeconds = Config.<Integer>GetValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds);
    SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(AutoStartVmsRunner.getInstance(), "startFailedAutoStartVms", new Class[] {}, new Object[] {}, autoStartVmsRunnerIntervalInSeconds, autoStartVmsRunnerIntervalInSeconds, TimeUnit.SECONDS);
    int quotaCacheIntervalInMinutes = Config.<Integer>GetValue(ConfigValues.QuotaCacheIntervalInMinutes);
    SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(QuotaManager.getInstance(), "updateQuotaCache", new Class[] {}, new Object[] {}, 1, quotaCacheIntervalInMinutes, TimeUnit.MINUTES);
    // initializes attestation
    initAttestation();
}
#end_block

#method_before
@Override
public VdcReturnValueBase endAction(VdcActionType actionType, VdcActionParametersBase parameters, CommandContext context) {
    CommandBase<?> command = CommandsFactory.CreateCommand(actionType, parameters);
    command.setContext(context);
    return command.endAction();
}
#method_after
@Override
public VdcReturnValueBase endAction(VdcActionType actionType, VdcActionParametersBase parameters) {
    return endAction(actionType, parameters, null);
}
#end_block

#method_before
@OnTimerMethodAnnotation("startFailedAutoStartVms")
public void startFailedAutoStartVms() {
    LinkedList<Guid> idsToRemove = new LinkedList<>();
    for (Guid vmId : autoStartVmsToRun) {
        EngineLock runVmLock = createLockForRunVmCommand(vmId);
        if (!getLockManager().acquireLock(runVmLock).getFirst()) {
            continue;
        }
        runVm(vmId, runVmLock);
        idsToRemove.add(vmId);
    }
    autoStartVmsToRun.removeAll(idsToRemove);
}
#method_after
@OnTimerMethodAnnotation("startFailedAutoStartVms")
public void startFailedAutoStartVms() {
    LinkedList<Guid> idsToRemove = new LinkedList<>();
    for (Guid vmId : autoStartVmsToRun) {
        EngineLock runVmLock = createEngineLockForRunVm(vmId, getLockMessage());
        if (!getLockManager().acquireLock(runVmLock).getFirst()) {
            continue;
        }
        runVm(vmId, runVmLock);
        idsToRemove.add(vmId);
    }
    autoStartVmsToRun.removeAll(idsToRemove);
}
#end_block

#method_before
public static void warnMemorySizeLegal(VmBase vm, Version clusterVersion) {
    if (!VmValidationUtils.isMemorySizeLegal(vm.getOsId(), vm.getMemSizeMb(), clusterVersion)) {
        AuditLogableBase logable = new AuditLogableBase();
        logable.addCustomValue("VmName", vm.getName());
        logable.addCustomValue("VmMemInMb", String.valueOf(vm.getMemSizeMb()));
        logable.addCustomValue("VmMinMemInMb", String.valueOf(VmValidationUtils.getMinMemorySizeInMb(vm.getOsId(), clusterVersion)));
        logable.addCustomValue("VmMaxMemInMb", String.valueOf(VmValidationUtils.getMaxMemorySizeInMb(vm.getOsId(), clusterVersion)));
        AuditLogDirector.log(logable, AuditLogType.VM_MEMORY_NOT_IN_RECOMMENDED_RANGE);
    }
}
#method_after
public static void warnMemorySizeLegal(VmBase vm, Version clusterVersion) {
    if (!VmValidationUtils.isMemorySizeLegal(vm.getOsId(), vm.getMemSizeMb(), clusterVersion)) {
        AuditLogableBase logable = new AuditLogableBase();
        logable.setVmId(vm.getId());
        logable.addCustomValue("VmName", vm.getName());
        logable.addCustomValue("VmMemInMb", String.valueOf(vm.getMemSizeMb()));
        logable.addCustomValue("VmMinMemInMb", String.valueOf(VmValidationUtils.getMinMemorySizeInMb(vm.getOsId(), clusterVersion)));
        logable.addCustomValue("VmMaxMemInMb", String.valueOf(VmValidationUtils.getMaxMemorySizeInMb(vm.getOsId(), clusterVersion)));
        AuditLogDirector.log(logable, AuditLogType.VM_MEMORY_NOT_IN_RECOMMENDED_RANGE);
    }
}
#end_block

#method_before
@SuppressWarnings("synthetic-access")
public void InitDictionaries(Version ver) {
    // init dictionaries
    _intelCpuByNameDictionary.clear();
    _amdCpuByNameDictionary.clear();
    _ibmCpuByNameDictionary.clear();
    _allCpuList.clear();
    String[] cpus = Config.<String>GetValue(ConfigValues.ServerCPUList, ver.toString()).split("[;]", -1);
    for (String cpu : cpus) {
        if (!StringUtils.isEmpty(cpu)) {
            // [0]-level, [1]-name, [2]-flags, [3]-verb, [4]-arch
            final String[] info = cpu.split("[:]", -1);
            if (info.length == 5) {
                // if no flags at all create new list instead of split
                HashSet<String> flgs = (StringUtils.isEmpty(info[2])) ? new HashSet<String>() : new HashSet<String>(Arrays.asList(info[2].split("[,]", -1)));
                String arch = info[4].trim();
                ArchitectureType archType = ArchitectureType.valueOf(arch);
                String levelString = info[0].trim();
                int level = 0;
                if (StringUtils.isNotEmpty(levelString)) {
                    level = Integer.parseInt(levelString);
                }
                ServerCpu sc = new ServerCpu(info[1], level, flgs, info[3], archType);
                if (sc.getFlags().contains(_intelFlag)) {
                    _intelCpuByNameDictionary.put(sc.getCpuName(), sc);
                } else if (sc.getFlags().contains(_amdFlag)) {
                    _amdCpuByNameDictionary.put(sc.getCpuName(), sc);
                } else if (sc.getFlags().contains(_ibmFlag)) {
                    _ibmCpuByNameDictionary.put(sc.getCpuName(), sc);
                }
                _allCpuList.add(sc);
            } else {
                log.errorFormat("Error getting info for CPU: {0}, not in expected format.", cpu);
            }
        }
    }
    _intelCpuList = new ArrayList<ServerCpu>(_intelCpuByNameDictionary.values());
    _amdCpuList = new ArrayList<ServerCpu>(_amdCpuByNameDictionary.values());
    _ibmCpuList = new ArrayList<ServerCpu>(_ibmCpuByNameDictionary.values());
    Comparator<ServerCpu> cpuComparator = new Comparator<ServerCpu>() {

        @Override
        public int compare(ServerCpu o1, ServerCpu o2) {
            return Integer.valueOf(o1.getLevel()).compareTo(o2.getLevel());
        }
    };
    // Sort by the highest cpu level so the highest cpu match will be
    // selected first
    Collections.sort(_intelCpuList, cpuComparator);
    Collections.sort(_amdCpuList, cpuComparator);
}
#method_after
@SuppressWarnings("synthetic-access")
public void InitDictionaries(Version ver) {
    // init dictionaries
    _intelCpuByNameDictionary.clear();
    _amdCpuByNameDictionary.clear();
    _ibmCpuByNameDictionary.clear();
    _allCpuList.clear();
    String[] cpus = Config.<String>GetValue(ConfigValues.ServerCPUList, ver.toString()).split("[;]", -1);
    for (String cpu : cpus) {
        if (!StringUtils.isEmpty(cpu)) {
            // [0]-level, [1]-name, [2]-flags, [3]-verb, [4]-arch
            final String[] info = cpu.split("[:]", -1);
            if (info.length == 5) {
                // if no flags at all create new list instead of split
                HashSet<String> flgs = (StringUtils.isEmpty(info[2])) ? new HashSet<String>() : new HashSet<String>(Arrays.asList(info[2].split("[,]", -1)));
                String arch = info[4].trim();
                ArchitectureType archType = ArchitectureType.valueOf(arch);
                String levelString = info[0].trim();
                int level = 0;
                if (StringUtils.isNotEmpty(levelString)) {
                    level = Integer.parseInt(levelString);
                }
                ServerCpu sc = new ServerCpu(info[1], level, flgs, info[3], archType);
                if (sc.getFlags().contains(_intelFlag)) {
                    _intelCpuByNameDictionary.put(sc.getCpuName(), sc);
                } else if (sc.getFlags().contains(_amdFlag)) {
                    _amdCpuByNameDictionary.put(sc.getCpuName(), sc);
                } else if (sc.getFlags().contains(_ibmFlag)) {
                    _ibmCpuByNameDictionary.put(sc.getCpuName(), sc);
                }
                _allCpuList.add(sc);
            } else {
                log.errorFormat("Error getting info for CPU: {0}, not in expected format.", cpu);
            }
        }
    }
    _intelCpuList = new ArrayList<ServerCpu>(_intelCpuByNameDictionary.values());
    _amdCpuList = new ArrayList<ServerCpu>(_amdCpuByNameDictionary.values());
    _ibmCpuList = new ArrayList<ServerCpu>(_ibmCpuByNameDictionary.values());
    Comparator<ServerCpu> cpuComparator = new Comparator<ServerCpu>() {

        @Override
        public int compare(ServerCpu o1, ServerCpu o2) {
            return Integer.valueOf(o1.getLevel()).compareTo(o2.getLevel());
        }
    };
    // Sort by the highest cpu level so the highest cpu match will be
    // selected first
    Collections.sort(_intelCpuList, cpuComparator);
    Collections.sort(_amdCpuList, cpuComparator);
    Collections.sort(_ibmCpuList, cpuComparator);
}
#end_block

#method_before
public ArchitectureType getArchitecture() {
    return architectureType;
}
#method_after
public ArchitectureType getArchitecture() {
    return privateArchitecture;
}
#end_block

#method_before
private boolean refreshImageDomain(final StorageDomain storageDomain, List<RepoImage> problematicRepoFileList, final ImageFileType imageType) {
    final RepoFileMetaDataDAO repoFileMetaDataDao = repoStorageDom;
    Provider provider = providerDao.get(new Guid(storageDomain.getStorage()));
    final OpenStackImageProviderProxy client = ProviderProxyFactory.getInstance().create(provider);
    Lock syncObject = getSyncObject(storageDomain.getId(), imageType);
    try {
        syncObject.lock();
        return (Boolean) TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

            @Override
            public Object runInTransaction() {
                repoFileMetaDataDao.removeRepoDomainFileList(storageDomain.getId(), imageType);
                for (RepoImage repoImage : client.getAllImagesAsRepoImages()) {
                    repoImage.setRepoDomainId(storageDomain.getId());
                    repoFileMetaDataDao.addRepoFileMap(repoImage);
                }
                return true;
            }
        });
    } finally {
        syncObject.unlock();
    }
}
#method_after
private boolean refreshImageDomain(final StorageDomain storageDomain, List<RepoImage> problematicRepoFileList, final ImageFileType imageType) {
    final RepoFileMetaDataDAO repoFileMetaDataDao = repoStorageDom;
    Provider provider = providerDao.get(new Guid(storageDomain.getStorage()));
    final OpenStackImageProviderProxy client = ProviderProxyFactory.getInstance().create(provider);
    Lock syncObject = getSyncObject(storageDomain.getId(), imageType);
    try {
        syncObject.lock();
        return (Boolean) TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

            @Override
            public Object runInTransaction() {
                repoFileMetaDataDao.removeRepoDomainFileList(storageDomain.getId(), imageType);
                Integer totalListSize = Config.<Integer>GetValue(ConfigValues.GlanceImageTotalListSize);
                List<RepoImage> repoImages = client.getAllImagesAsRepoImages(Config.<Integer>GetValue(ConfigValues.GlanceImageListSize), totalListSize);
                if (repoImages.size() >= totalListSize) {
                    AuditLogableBase logable = new AuditLogableBase();
                    logable.addCustomValue("imageDomain", storageDomain.getName());
                    logable.addCustomValue("imageListSize", String.valueOf(repoImages.size()));
                    AuditLogDirector.log(logable, AuditLogType.REFRESH_REPOSITORY_IMAGE_LIST_INCOMPLETE);
                }
                for (RepoImage repoImage : repoImages) {
                    repoImage.setRepoDomainId(storageDomain.getId());
                    repoFileMetaDataDao.addRepoFileMap(repoImage);
                }
                return true;
            }
        });
    } finally {
        syncObject.unlock();
    }
}
#end_block

#method_before
private boolean refreshIsoDomain(Guid storageDomainId, List<RepoImage> problematicRepoFileList, ImageFileType imageType) {
    boolean refreshSucceeded = false;
    List<RepoImage> tempProblematicRepoFileList = new ArrayList<RepoImage>();
    // Fetch all the Storage pools for this Iso domain Id.
    List<StoragePoolIsoMap> isoMapList = DbFacade.getInstance().getStoragePoolIsoMapDao().getAllForStorage(storageDomainId);
    log.debugFormat("Fetched {0} storage pools for {1} file type, in Iso domain {2}.", isoMapList.size(), imageType, storageDomainId);
    Iterator<StoragePoolIsoMap> iter = isoMapList.iterator();
    while (iter.hasNext() && !refreshSucceeded) {
        StoragePoolIsoMap storagePoolIsoMap = iter.next();
        Guid storagePoolId = storagePoolIsoMap.getstorage_pool_id();
        StorageDomainStatus status = storagePoolIsoMap.getstatus();
        if (status != StorageDomainStatus.Active) {
            log.debugFormat("Storage domain id {0}, is not active, and therefore could not be refreshed for {1} file type (Iso domain status is {2}).", storageDomainId, imageType, status);
        } else {
            // Try to refresh the domain of the storage pool id because its status is active.
            refreshSucceeded = refreshIsoDomainFileForStoragePool(storageDomainId, storagePoolId, imageType);
            if (!refreshSucceeded) {
                log.debugFormat("Failed refreshing Storage domain id {0}, for {1} file type in storage pool id {2}.", storageDomainId, imageType, storagePoolId);
                // set a mock repository file meta data with storage domain id and storage pool id.
                RepoImage repoImage = new RepoImage();
                repoImage.setStoragePoolId(storagePoolId);
                repoImage.setRepoDomainId(storageDomainId);
                repoImage.setFileType(imageType);
                // Add the repository file to the list of problematic Iso domains.
                tempProblematicRepoFileList.add(repoImage);
            }
        }
    }
    // If refreshed was not succeeded add the problematic storage Iso domain to the list.
    if (!refreshSucceeded) {
        problematicRepoFileList.addAll(tempProblematicRepoFileList);
    }
    return refreshSucceeded;
}
#method_after
private boolean refreshIsoDomain(Guid storageDomainId, List<RepoImage> problematicRepoFileList, ImageFileType imageType) {
    boolean refreshSucceeded = false;
    List<RepoImage> tempProblematicRepoFileList = new ArrayList<RepoImage>();
    // Fetch all the Storage pools for this Iso domain Id.
    List<StoragePoolIsoMap> isoMapList = DbFacade.getInstance().getStoragePoolIsoMapDao().getAllForStorage(storageDomainId);
    log.debugFormat("Fetched {0} storage pools for {1} file type, in Iso domain {2}.", isoMapList.size(), imageType, storageDomainId);
    Iterator<StoragePoolIsoMap> iter = isoMapList.iterator();
    while (iter.hasNext() && !refreshSucceeded) {
        StoragePoolIsoMap storagePoolIsoMap = iter.next();
        Guid storagePoolId = storagePoolIsoMap.getstorage_pool_id();
        StorageDomainStatus status = storagePoolIsoMap.getStatus();
        if (status != StorageDomainStatus.Active) {
            log.debugFormat("Storage domain id {0}, is not active, and therefore could not be refreshed for {1} file type (Iso domain status is {2}).", storageDomainId, imageType, status);
        } else {
            // Try to refresh the domain of the storage pool id because its status is active.
            refreshSucceeded = refreshIsoDomainFileForStoragePool(storageDomainId, storagePoolId, imageType);
            if (!refreshSucceeded) {
                log.debugFormat("Failed refreshing Storage domain id {0}, for {1} file type in storage pool id {2}.", storageDomainId, imageType, storagePoolId);
                // set a mock repository file meta data with storage domain id and storage pool id.
                RepoImage repoImage = new RepoImage();
                repoImage.setStoragePoolId(storagePoolId);
                repoImage.setRepoDomainId(storageDomainId);
                repoImage.setFileType(imageType);
                // Add the repository file to the list of problematic Iso domains.
                tempProblematicRepoFileList.add(repoImage);
            }
        }
    }
    // If refreshed was not succeeded add the problematic storage Iso domain to the list.
    if (!refreshSucceeded) {
        problematicRepoFileList.addAll(tempProblematicRepoFileList);
    }
    return refreshSucceeded;
}
#end_block

#method_before
private static boolean refreshIsoFileListMetaData(final Guid repoStorageDomainId, final RepoFileMetaDataDAO repoFileMetaDataDao, final List<String> isoDomainList, final ImageFileType imageType) {
    Lock syncObject = getSyncObject(repoStorageDomainId, imageType);
    try {
        syncObject.lock();
        return (Boolean) TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

            @Override
            public Object runInTransaction() {
                long currentTime = System.currentTimeMillis();
                repoFileMetaDataDao.removeRepoDomainFileList(repoStorageDomainId, imageType);
                RepoImage repo_md;
                for (String isoFile : isoDomainList) {
                    repo_md = new RepoImage();
                    repo_md.setLastRefreshed(currentTime);
                    repo_md.setSize(0);
                    repo_md.setRepoDomainId(repoStorageDomainId);
                    repo_md.setDateCreated(null);
                    repo_md.setRepoImageId(isoFile);
                    repo_md.setRepoImageName(null);
                    repo_md.setFileType(imageType);
                    repoFileMetaDataDao.addRepoFileMap(repo_md);
                }
                return true;
            }
        });
    } finally {
        syncObject.unlock();
    }
}
#method_after
private static boolean refreshIsoFileListMetaData(final Guid repoStorageDomainId, final RepoFileMetaDataDAO repoFileMetaDataDao, final Map<String, Map<String, Object>> fileStats, final ImageFileType imageType) {
    Lock syncObject = getSyncObject(repoStorageDomainId, imageType);
    try {
        syncObject.lock();
        return (Boolean) TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

            @Override
            public Object runInTransaction() {
                long currentTime = System.currentTimeMillis();
                repoFileMetaDataDao.removeRepoDomainFileList(repoStorageDomainId, imageType);
                RepoImage repo_md;
                for (Map.Entry<String, Map<String, Object>> entry : fileStats.entrySet()) {
                    repo_md = new RepoImage();
                    repo_md.setLastRefreshed(currentTime);
                    repo_md.setSize(retrieveIsoFileSize(entry));
                    repo_md.setRepoDomainId(repoStorageDomainId);
                    repo_md.setDateCreated(null);
                    repo_md.setRepoImageId(entry.getKey());
                    repo_md.setRepoImageName(null);
                    repo_md.setFileType(imageType);
                    repoFileMetaDataDao.addRepoFileMap(repo_md);
                }
                return true;
            }
        });
    } finally {
        syncObject.unlock();
    }
}
#end_block

#method_before
private boolean updateIsoListFromVDSM(Guid repoStoragePoolId, Guid repoStorageDomainId) {
    boolean refreshIsoSucceeded = false;
    if (repoStorageDomainId != null) {
        try {
            // Get Iso domain file list from storage pool.
            VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetIsoList, new IrsBaseVDSCommandParameters(repoStoragePoolId));
            @SuppressWarnings("unchecked")
            List<String> isoDomainList = (List<String>) returnValue.getReturnValue();
            if (returnValue.getSucceeded() && isoDomainList != null) {
                log.debugFormat("The refresh process from VDSM, for Iso files succeeded.");
                // Set the Iso domain file list fetched from VDSM into the DB.
                refreshIsoSucceeded = refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, isoDomainList, ImageFileType.ISO);
            }
        } catch (Exception e) {
            refreshIsoSucceeded = false;
            log.warnFormat("The refresh process from VDSM, for Iso files failed.");
            log.error(e);
        }
    }
    return refreshIsoSucceeded;
}
#method_after
private boolean updateIsoListFromVDSM(Guid repoStoragePoolId, Guid repoStorageDomainId) {
    boolean refreshIsoSucceeded = false;
    if (repoStorageDomainId != null) {
        try {
            // Get Iso domain file list from storage pool.
            VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetIsoList, new IrsBaseVDSCommandParameters(repoStoragePoolId));
            @SuppressWarnings("unchecked")
            Map<String, Map<String, Object>> fileStats = (Map<String, Map<String, Object>>) returnValue.getReturnValue();
            if (returnValue.getSucceeded() && fileStats != null) {
                log.debugFormat("The refresh process from VDSM, for Iso files succeeded.");
                // Set the Iso domain file list fetched from VDSM into the DB.
                refreshIsoSucceeded = refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStats, ImageFileType.ISO);
            }
        } catch (Exception e) {
            refreshIsoSucceeded = false;
            log.warnFormat("The refresh process from VDSM, for Iso files failed.");
            log.error(e);
        }
    }
    return refreshIsoSucceeded;
}
#end_block

#method_before
private boolean updateFloppyListFromVDSM(Guid repoStoragePoolId, Guid repoStorageDomainId) {
    boolean refreshFloppySucceeded = false;
    if (repoStorageDomainId != null) {
        try {
            // Get Iso domain floppy file list from storage pool.
            VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetFloppyList, new IrsBaseVDSCommandParameters(repoStoragePoolId));
            @SuppressWarnings("unchecked")
            List<String> isoDomainFloppyList = (List<String>) returnValue.getReturnValue();
            if (returnValue.getSucceeded() && isoDomainFloppyList != null) {
                // Set the Iso domain floppy file list fetched from VDSM into the DB.
                refreshFloppySucceeded = refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, isoDomainFloppyList, ImageFileType.Floppy);
            }
            log.debugFormat("The refresh process from VDSM, for Floppy files succeeded.");
        } catch (Exception e) {
            refreshFloppySucceeded = false;
            log.warnFormat("The refresh process from VDSM, for Floppy files failed.");
            log.error(e);
        }
    }
    return refreshFloppySucceeded;
}
#method_after
private boolean updateFloppyListFromVDSM(Guid repoStoragePoolId, Guid repoStorageDomainId) {
    boolean refreshFloppySucceeded = false;
    if (repoStorageDomainId != null) {
        try {
            // Get Iso domain floppy file list from storage pool.
            VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetFloppyList, new IrsBaseVDSCommandParameters(repoStoragePoolId));
            @SuppressWarnings("unchecked")
            Map<String, Map<String, Object>> fileStats = (Map<String, Map<String, Object>>) returnValue.getReturnValue();
            if (returnValue.getSucceeded() && fileStats != null) {
                // Set the Iso domain floppy file list fetched from VDSM into the DB.
                refreshFloppySucceeded = refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStats, ImageFileType.Floppy);
            }
            log.debugFormat("The refresh process from VDSM, for Floppy files succeeded.");
        } catch (Exception e) {
            refreshFloppySucceeded = false;
            log.warnFormat("The refresh process from VDSM, for Floppy files failed.");
            log.error(e);
        }
    }
    return refreshFloppySucceeded;
}
#end_block

#method_before
public void init() {
    log.info("Initializing Scheduling manager");
    loadPolicyUnits();
    loadClusterPolicies();
    if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled)) {
        log.info("Starting external scheduler dicovery thread");
        ExternalSchedulerDiscoveryThread discoveryThread = new ExternalSchedulerDiscoveryThread();
        discoveryThread.start();
    } else {
        log.info("External scheduler disabled, discovery skipped");
    }
    log.info("Initialized Scheduling manager");
}
#method_after
public void init() {
    log.info("Initializing Scheduling manager");
    loadPolicyUnits();
    loadClusterPolicies();
    ExternalSchedulerDiscoveryThread discoveryThread = new ExternalSchedulerDiscoveryThread();
    if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled)) {
        log.info("Starting external scheduler dicovery thread");
        discoveryThread.start();
    } else {
        discoveryThread.markAllExternalPoliciesAsDisabled();
        log.info("External scheduler disabled, discovery skipped");
    }
    log.info("Initialized Scheduling manager");
}
#end_block

#method_before
public Guid schedule(VDSGroup cluster, VM vm, List<Guid> hostBlackList, List<Guid> hostWhiteList, Guid destHostId, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    clusterLockMap.putIfAbsent(cluster.getId(), new Object());
    synchronized (clusterLockMap.get(cluster.getId())) {
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
        updateInitialHostList(vdsList, hostBlackList, true);
        updateInitialHostList(vdsList, hostWhiteList, false);
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        Map<String, String> parameters = createClusterPolicyParameters(cluster);
        if (destHostId != null) {
            if (checkDestinationHost(vm, vdsList, destHostId, messages, policy, parameters, memoryChecker)) {
                return destHostId;
            } else if (vm.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
                return null;
            }
        }
        vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, memoryChecker);
        if (vdsList == null || vdsList.size() == 0) {
            return null;
        }
        if (policy.getFunctions() == null || policy.getFunctions().isEmpty()) {
            return vdsList.get(0).getId();
        }
        Guid bestHost = runFunctions(policy.getFunctions(), vdsList, vm, parameters);
        if (bestHost != null) {
            getVdsDynamicDao().updatePartialVdsDynamicCalc(bestHost, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), vm.getVmMemSizeMb(), vm.getNumOfCpus());
        }
        return bestHost;
    }
}
#method_after
public Guid schedule(VDSGroup cluster, VM vm, List<Guid> hostBlackList, List<Guid> hostWhiteList, Guid destHostId, List<String> messages, VdsFreeMemoryChecker memoryChecker, String correlationId) {
    clusterLockMap.putIfAbsent(cluster.getId(), new Object());
    synchronized (clusterLockMap.get(cluster.getId())) {
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
        updateInitialHostList(vdsList, hostBlackList, true);
        updateInitialHostList(vdsList, hostWhiteList, false);
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        Map<String, String> parameters = createClusterPolicyParameters(cluster);
        vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, memoryChecker, true, correlationId);
        if (vdsList == null || vdsList.size() == 0) {
            return null;
        }
        // it passed filters return it
        if (destHostId != null) {
            for (VDS vds : vdsList) {
                if (destHostId.equals(vds.getId())) {
                    return destHostId;
                }
            }
        }
        if (policy.getFunctions() == null || policy.getFunctions().isEmpty()) {
            return vdsList.get(0).getId();
        }
        Guid bestHost = runFunctions(policy.getFunctions(), vdsList, vm, parameters);
        if (bestHost == null && vdsList.size() > 0) {
            bestHost = vdsList.get(0).getId();
        }
        if (bestHost != null) {
            getVdsDynamicDao().updatePartialVdsDynamicCalc(bestHost, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), vm.getVmMemSizeMb(), vm.getNumOfCpus());
        }
        return bestHost;
    }
}
#end_block

#method_before
public boolean canSchedule(VDSGroup cluster, VM vm, List<Guid> vdsBlackList, List<Guid> vdsWhiteList, Guid destVdsId, List<String> messages) {
    List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
    updateInitialHostList(vdsList, vdsBlackList, true);
    updateInitialHostList(vdsList, vdsWhiteList, false);
    ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
    Map<String, String> parameters = createClusterPolicyParameters(cluster);
    if (destVdsId != null) {
        if (checkDestinationHost(vm, vdsList, destVdsId, messages, policy, parameters, noWaitingMemoryChecker)) {
            return true;
        } else if (vm.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
            return false;
        }
    }
    vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingMemoryChecker);
    if (vdsList == null || vdsList.size() == 0) {
        return false;
    }
    return true;
}
#method_after
public boolean canSchedule(VDSGroup cluster, VM vm, List<Guid> vdsBlackList, List<Guid> vdsWhiteList, Guid destVdsId, List<String> messages) {
    List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
    updateInitialHostList(vdsList, vdsBlackList, true);
    updateInitialHostList(vdsList, vdsWhiteList, false);
    ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
    Map<String, String> parameters = createClusterPolicyParameters(cluster);
    vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingMemoryChecker, false, null);
    if (vdsList == null || vdsList.size() == 0) {
        return false;
    }
    return true;
}
#end_block

#method_before
private List<VDS> runFilters(ArrayList<Guid> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    ArrayList<PolicyUnitImpl> internalFilters = new ArrayList<PolicyUnitImpl>();
    ArrayList<PolicyUnitImpl> externalFilters = new ArrayList<PolicyUnitImpl>();
    sortFilters(filters, filterPositionMap);
    if (filters != null) {
        for (Guid filter : filters) {
            PolicyUnitImpl filterPolicyUnit = policyUnits.get(filter);
            if (filterPolicyUnit.isInternal()) {
                internalFilters.add(filterPolicyUnit);
            } else {
                if (filterPolicyUnit.isEnabled()) {
                    externalFilters.add(filterPolicyUnit);
                }
            }
        }
    }
    hostList = runInternalFilters(internalFilters, hostList, vm, parameters, filterPositionMap, messages, memoryChecker);
    if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled) && externalFilters.size() > 0 && hostList != null && hostList.size() > 0) {
        hostList = runExternalFilters(externalFilters, hostList, vm, parameters, messages);
    }
    return hostList;
}
#method_after
private List<VDS> runFilters(ArrayList<Guid> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker, boolean shouldRunExternalFilters, String correlationId) {
    SchedulingResult result = new SchedulingResult();
    ArrayList<PolicyUnitImpl> internalFilters = new ArrayList<PolicyUnitImpl>();
    ArrayList<PolicyUnitImpl> externalFilters = new ArrayList<PolicyUnitImpl>();
    sortFilters(filters, filterPositionMap);
    if (filters != null) {
        for (Guid filter : filters) {
            PolicyUnitImpl filterPolicyUnit = policyUnits.get(filter);
            if (filterPolicyUnit.isInternal()) {
                internalFilters.add(filterPolicyUnit);
            } else {
                if (filterPolicyUnit.isEnabled()) {
                    externalFilters.add(filterPolicyUnit);
                }
            }
        }
    }
    hostList = runInternalFilters(internalFilters, hostList, vm, parameters, filterPositionMap, messages, memoryChecker, correlationId, result);
    if (shouldRunExternalFilters && Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled) && externalFilters.size() > 0 && hostList != null && hostList.size() > 0) {
        hostList = runExternalFilters(externalFilters, hostList, vm, parameters, messages, correlationId, result);
    }
    if (hostList == null || hostList.size() == 0) {
        messages.add(VdcBllMessages.SCHEDULING_ALL_HOSTS_FILTERED_OUT.name());
        messages.addAll(result.getReasonMessages());
    }
    return hostList;
}
#end_block

#method_before
private List<VDS> runInternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker) {
    if (filters != null) {
        for (PolicyUnitImpl filterPolicyUnit : filters) {
            if (hostList == null || hostList.isEmpty()) {
                break;
            }
            filterPolicyUnit.setMemoryChecker(memoryChecker);
            hostList = filterPolicyUnit.filter(hostList, vm, parameters, messages);
        }
    }
    return hostList;
}
#method_after
private List<VDS> runInternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, Map<Guid, Integer> filterPositionMap, List<String> messages, VdsFreeMemoryChecker memoryChecker, String correlationId, SchedulingResult result) {
    if (filters != null) {
        for (PolicyUnitImpl filterPolicyUnit : filters) {
            if (hostList == null || hostList.isEmpty()) {
                break;
            }
            filterPolicyUnit.setMemoryChecker(memoryChecker);
            List<VDS> currentHostList = new ArrayList<VDS>(hostList);
            hostList = filterPolicyUnit.filter(hostList, vm, parameters, messages);
            logFilterActions(currentHostList, toIdSet(hostList), VdcBllMessages.VAR__FILTERTYPE__INTERNAL, filterPolicyUnit.getName(), result, correlationId);
        }
    }
    return hostList;
}
#end_block

#method_before
private List<VDS> runExternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, List<String> messages) {
    List<Guid> filteredIDs = null;
    if (filters != null) {
        List<String> filterNames = new ArrayList<String>();
        for (PolicyUnitImpl filter : filters) {
            filterNames.add(filter.getName());
        }
        List<Guid> hostIDs = new ArrayList<Guid>();
        for (VDS host : hostList) {
            hostIDs.add(host.getId());
        }
        filteredIDs = ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters);
    }
    return intersectHosts(hostList, filteredIDs);
}
#method_after
private List<VDS> runExternalFilters(ArrayList<PolicyUnitImpl> filters, List<VDS> hostList, VM vm, Map<String, String> parameters, List<String> messages, String correlationId, SchedulingResult result) {
    List<Guid> filteredIDs = null;
    if (filters != null) {
        List<String> filterNames = new ArrayList<String>();
        for (PolicyUnitImpl filter : filters) {
            filterNames.add(filter.getName());
        }
        List<Guid> hostIDs = new ArrayList<Guid>();
        for (VDS host : hostList) {
            hostIDs.add(host.getId());
        }
        filteredIDs = ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters);
        if (filteredIDs != null) {
            logFilterActions(hostList, new HashSet<Guid>(filteredIDs), VdcBllMessages.VAR__FILTERTYPE__EXTERNAL, Arrays.toString(filterNames.toArray()), result, correlationId);
        }
    }
    return intersectHosts(hostList, filteredIDs);
}
#end_block

#method_before
@OnTimerMethodAnnotation("PerformLoadBalancing")
public void PerformLoadBalancing() {
    log.debugFormat("Load Balancer timer entered.");
    List<VDSGroup> clusters = DbFacade.getInstance().getVdsGroupDao().getAll();
    for (VDSGroup cluster : clusters) {
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance());
        Pair<List<Guid>, Guid> balanceResult = null;
        if (policyUnit.isEnabled()) {
            List<VDS> hosts = getVdsDAO().getAllForVdsGroupWithoutMigrating(cluster.getId());
            if (policyUnit.isInternal()) {
                balanceResult = internalRunBalance(policyUnit, cluster, hosts);
            } else if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled)) {
                balanceResult = externalRunBalance(policyUnit, cluster, hosts);
            }
        }
        if (balanceResult != null && balanceResult.getSecond() != null) {
            migrationHandler.migrateVM((ArrayList<Guid>) balanceResult.getFirst(), balanceResult.getSecond());
        }
    }
}
#method_after
@OnTimerMethodAnnotation("PerformLoadBalancing")
public void PerformLoadBalancing() {
    log.debugFormat("Load Balancer timer entered.");
    List<VDSGroup> clusters = DbFacade.getInstance().getVdsGroupDao().getAll();
    for (VDSGroup cluster : clusters) {
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance());
        Pair<List<Guid>, Guid> balanceResult = null;
        if (policyUnit.isEnabled()) {
            List<VDS> hosts = getVdsDAO().getAllForVdsGroupWithoutMigrating(cluster.getId());
            if (policyUnit.isInternal()) {
                balanceResult = internalRunBalance(policyUnit, cluster, hosts);
            } else if (Config.<Boolean>GetValue(ConfigValues.ExternalSchedulerEnabled)) {
                balanceResult = externalRunBalance(policyUnit, cluster, hosts);
            }
        }
        if (balanceResult != null && balanceResult.getSecond() != null) {
            migrationHandler.migrateVM(balanceResult.getFirst(), balanceResult.getSecond());
        }
    }
}
#end_block

#method_before
private GlusterVolumeRemoveBricksParameters toParameters(Action action) {
    GlusterVolumeRemoveBricksParameters params = new GlusterVolumeRemoveBricksParameters();
    List<GlusterBrickEntity> entityBricks = new ArrayList<GlusterBrickEntity>();
    for (GlusterBrick brick : action.getBricks().getGlusterBricks()) {
        GlusterBrickEntity entity = new GlusterBrickEntity();
        entity.setBrickDirectory(brick.getBrickDir());
        entity.setVolumeId(new Guid(getVolumeId()));
        if (brick.getId() != null) {
            entity.setId(new Guid(brick.getId()));
        } else {
            entity.setId(null);
        }
        if (brick.getName() != null) {
            String[] arr = brick.getName().split("\\:");
            if (arr.length > 1) {
                entity.setServerName(arr[0]);
                entity.setBrickDirectory(arr[1]);
            }
        }
        entityBricks.add(entity);
    }
    params.setVolumeId(new Guid(getVolumeId()));
    params.setBricks(entityBricks);
    params.setCommandType(VdcActionType.StartRemoveGlusterVolumeBricks);
    return params;
}
#method_after
private GlusterVolumeRemoveBricksParameters toParameters(Action action) {
    GlusterVolumeRemoveBricksParameters params = new GlusterVolumeRemoveBricksParameters();
    List<GlusterBrickEntity> entityBricks = new ArrayList<GlusterBrickEntity>();
    for (GlusterBrick brick : action.getBricks().getGlusterBricks()) {
        GlusterBrickEntity entity = new GlusterBrickEntity();
        entity.setBrickDirectory(brick.getBrickDir());
        entity.setVolumeId(new Guid(getVolumeId()));
        if (brick.getName() != null) {
            String[] arr = brick.getName().split("\\:");
            if (arr.length > 1) {
                entity.setServerName(arr[0]);
                entity.setBrickDirectory(arr[1]);
            } else {
                continue;
            }
        }
        entityBricks.add(entity);
    }
    params.setVolumeId(asGuid(getVolumeId()));
    params.setBricks(entityBricks);
    params.setCommandType(VdcActionType.StartRemoveGlusterVolumeBricks);
    return params;
}
#end_block

#method_before
@Override
public Response migrate(Action action) {
    validateParameters(action, "bricks");
    GlusterVolumeRemoveBricksParameters params = toParameters(action);
    return performAction(VdcActionType.StartRemoveGlusterVolumeBricks, params, action, false);
}
#method_after
@Override
public Response migrate(Action action) {
    validateParameters(action, "bricks");
    validateBrickNames(action);
    GlusterVolumeRemoveBricksParameters params = toParameters(action);
    return performAction(VdcActionType.StartRemoveGlusterVolumeBricks, params, action, false);
}
#end_block

#method_before
@Override
public Response stopMigrate(Action action) {
    validateParameters(action, "bricks");
    GlusterVolumeRemoveBricksParameters params = toParameters(action);
    return performAction(VdcActionType.StopRemoveGlusterVolumeBricks, params, action, false);
}
#method_after
@Override
public Response stopMigrate(Action action) {
    validateParameters(action, "bricks");
    validateBrickNames(action);
    GlusterVolumeRemoveBricksParameters params = toParameters(action);
    return performAction(VdcActionType.StopRemoveGlusterVolumeBricks, params, action, false);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public GlusterBricks list() {
    boolean flag = QueryHelper.hasMatrixParam(getUriInfo(), "force");
    List<GlusterBrickEntity> bricks = getBackendCollection(VdcQueryType.GetGlusterVolumeBricks, new IdQueryParameters(asGuid(getVolumeId())));
    GlusterBricks bricksModel = mapCollection(bricks);
    return addActions(bricksModel);
}
#method_after
@SuppressWarnings("unchecked")
@Override
public GlusterBricks list() {
    List<GlusterBrickEntity> bricks = getBackendCollection(VdcQueryType.GetGlusterVolumeBricks, new IdQueryParameters(asGuid(getVolumeId())));
    GlusterBricks bricksModel = mapCollection(bricks);
    return addActions(bricksModel);
}
#end_block

#method_before
@Override
public Response remove(GlusterBricks bricks) {
    if (bricks.getGlusterBricks().size() > 0) {
        for (GlusterBrick brick : bricks.getGlusterBricks()) {
            validateParameters(brick, "id|name");
        }
    }
    int replicaCount = bricks.isSetReplicaCount() ? bricks.getReplicaCount() : 0;
    GlusterVolumeRemoveBricksParameters params = toParameters(bricks);
    params.setReplicaCount(replicaCount);
    GlusterVolumeEntity volume = getEntity(GlusterVolumeEntity.class, VdcQueryType.GetGlusterVolumeById, new IdQueryParameters(asGuid(getVolumeId())), "");
    if (volume.getAsyncTask() != null && volume.getAsyncTask().getType() == GlusterTaskType.REMOVE_BRICK && volume.getAsyncTask().getStatus() == JobExecutionStatus.FINISHED) {
        return performAction(VdcActionType.CommitRemoveGlusterVolumeBricks, params);
    } else {
        return performAction(VdcActionType.GlusterVolumeRemoveBricks, params);
    }
// // if (isForceRemove()) {
// if (QueryHelper.hasMatrixParam(uriInfo, FORCE_CONSTRAINT)) {
// return performAction(VdcActionType.GlusterVolumeRemoveBricks, params);
// } else {
// return performAction(VdcActionType.CommitRemoveGlusterVolumeBricks, params);
// }
}
#method_after
@Override
public Response remove(GlusterBricks bricks) {
    if (bricks.getGlusterBricks().size() > 0) {
        for (GlusterBrick brick : bricks.getGlusterBricks()) {
            validateParameters(brick, "id|name");
        }
    }
    int replicaCount = bricks.isSetReplicaCount() ? bricks.getReplicaCount() : 0;
    GlusterVolumeRemoveBricksParameters params = toParameters(bricks);
    params.setReplicaCount(replicaCount);
    GlusterVolumeEntity volume = getEntity(GlusterVolumeEntity.class, VdcQueryType.GetGlusterVolumeById, new IdQueryParameters(asGuid(getVolumeId())), "");
    if (volume.getAsyncTask() != null && volume.getAsyncTask().getType() == GlusterTaskType.REMOVE_BRICK && volume.getAsyncTask().getStatus() == JobExecutionStatus.FINISHED) {
        return performAction(VdcActionType.CommitRemoveGlusterVolumeBricks, params);
    } else {
        return performAction(VdcActionType.GlusterVolumeRemoveBricks, params);
    }
}
#end_block

#method_before
@Override
public Response migrate(Action action) {
    validateParameters(action, "bricks");
    validateBrickNames(action);
    GlusterVolumeRemoveBricksParameters params = toParameters(action);
    return performAction(VdcActionType.StartRemoveGlusterVolumeBricks, params, action, false);
}
#method_after
@Override
public Response migrate(Action action) {
    validateParameters(action, "bricks");
    validateBrickNames(action);
    GlusterVolumeRemoveBricksParameters params = toParameters(action.getBricks());
    return performAction(VdcActionType.StartRemoveGlusterVolumeBricks, params, action, false);
}
#end_block

#method_before
@Override
public Response stopMigrate(Action action) {
    validateParameters(action, "bricks");
    validateBrickNames(action);
    GlusterVolumeRemoveBricksParameters params = toParameters(action);
    return performAction(VdcActionType.StopRemoveGlusterVolumeBricks, params, action, false);
}
#method_after
@Override
public Response stopMigrate(Action action) {
    validateParameters(action, "bricks");
    validateBrickNames(action);
    GlusterVolumeRemoveBricksParameters params = toParameters(action.getBricks());
    return performAction(VdcActionType.StopRemoveGlusterVolumeBricks, params, action, false);
}
#end_block

#method_before
@Test
public void testMigrate() throws Exception {
    GlusterBrick brick = new GlusterBrick();
    GlusterVolume volume = new GlusterVolume();
    brick.setId(GUIDS[0].toString());
    brick.setBrickDir(brickDir);
    brick.setServerId(serverId.toString());
    volume.setId(volumeId.toString());
    brick.setGlusterVolume(volume);
    GlusterBricks bricks = control.createMock(GlusterBricks.class);
    expect(bricks.getGlusterBricks()).andReturn(Collections.singletonList(brick)).anyTimes();
    setUriInfo(setUpActionExpectations(VdcActionType.StartRemoveGlusterVolumeBricks, GlusterVolumeRemoveBricksParameters.class, // new Object[] {volumeId, getBricksToRemove()},
    new String[] {}, new Object[] {}, true, true));
    Action action = new Action();
    action.setBricks(bricks);
    collection.migrate(action);
}
#method_after
@Test
public void testMigrate() throws Exception {
    GlusterBrick brick = new GlusterBrick();
    GlusterVolume volume = new GlusterVolume();
    brick.setName(serverName + ":" + brickDir);
    volume.setId(volumeId.toString());
    brick.setGlusterVolume(volume);
    GlusterBricks bricks = control.createMock(GlusterBricks.class);
    expect(bricks.getGlusterBricks()).andReturn(Collections.singletonList(brick)).anyTimes();
    setUriInfo(setUpActionExpectations(VdcActionType.StartRemoveGlusterVolumeBricks, GlusterVolumeRemoveBricksParameters.class, new String[] {}, new Object[] {}, true, true));
    Action action = new Action();
    action.setBricks(bricks);
    collection.migrate(action);
}
#end_block

#method_before
private GlusterVolumeRemoveBricksParameters toParameters(Action action) {
    GlusterVolumeRemoveBricksParameters params = new GlusterVolumeRemoveBricksParameters();
    List<GlusterBrickEntity> entityBricks = new ArrayList<GlusterBrickEntity>();
    for (GlusterBrick brick : action.getBricks().getGlusterBricks()) {
        GlusterBrickEntity entity = new GlusterBrickEntity();
        entity.setBrickDirectory(brick.getBrickDir());
        entity.setVolumeId(new Guid(getVolumeId()));
        if (brick.getId() != null) {
            entity.setId(new Guid(brick.getId()));
        } else {
            entity.setId(null);
        }
        if (brick.getName() != null) {
            String[] arr = brick.getName().split("\\:");
            if (arr.length > 1) {
                entity.setServerName(arr[0]);
                entity.setBrickDirectory(arr[1]);
            }
        }
        entityBricks.add(entity);
    }
    params.setVolumeId(new Guid(getVolumeId()));
    params.setBricks(entityBricks);
    params.setCommandType(VdcActionType.StartRemoveGlusterVolumeBricks);
    return params;
}
#method_after
private GlusterVolumeRemoveBricksParameters toParameters(Action action) {
    GlusterVolumeRemoveBricksParameters params = new GlusterVolumeRemoveBricksParameters();
    List<GlusterBrickEntity> entityBricks = new ArrayList<GlusterBrickEntity>();
    for (GlusterBrick brick : action.getBricks().getGlusterBricks()) {
        GlusterBrickEntity entity = new GlusterBrickEntity();
        entity.setBrickDirectory(brick.getBrickDir());
        entity.setVolumeId(new Guid(getVolumeId()));
        if (brick.getName() != null) {
            String[] arr = brick.getName().split("\\:");
            if (arr.length > 1) {
                entity.setServerName(arr[0]);
                entity.setBrickDirectory(arr[1]);
            } else {
                continue;
            }
        }
        entityBricks.add(entity);
    }
    params.setVolumeId(asGuid(getVolumeId()));
    params.setBricks(entityBricks);
    params.setCommandType(VdcActionType.StartRemoveGlusterVolumeBricks);
    return params;
}
#end_block

#method_before
@Override
public Response migrate(Action action) {
    validateParameters(action, "bricks");
    GlusterVolumeRemoveBricksParameters params = toParameters(action);
    return performAction(VdcActionType.StartRemoveGlusterVolumeBricks, params, action, false);
}
#method_after
@Override
public Response migrate(Action action) {
    validateParameters(action, "bricks");
    validateBrickNames(action);
    GlusterVolumeRemoveBricksParameters params = toParameters(action);
    return performAction(VdcActionType.StartRemoveGlusterVolumeBricks, params, action, false);
}
#end_block

#method_before
@Override
public void initialize() {
    super.initialize();
    setHash(getHashName() + new Date());
    // Add progress listeners
    Frontend.getQueryStartedEvent().addListener(this);
    Frontend.getQueryCompleteEvent().addListener(this);
    Frontend.subscribeAdditionalQueries(new VdcQueryType[] { VdcQueryType.Search, VdcQueryType.GetStoragePoolById, VdcQueryType.GetNextAvailableDiskAliasNameByVMId, VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, VdcQueryType.GetAllVdsByStoragePool, VdcQueryType.GetAllAttachableDisks, VdcQueryType.GetAllDisksByVmId, VdcQueryType.GetAllRelevantQuotasForStorage });
    // Create and set commands
    // $NON-NLS-1$
    UICommand onSaveCommand = new UICommand("OnSave", this);
    onSaveCommand.setTitle(CONSTANTS.ok());
    onSaveCommand.setIsDefault(true);
    getCommands().add(onSaveCommand);
    getCommands().add(getCancelCommand());
    // Update data
    if (getVm() != null) {
        updateBootableDiskAvailable();
    }
    updateDatacenters();
}
#method_after
@Override
public void initialize() {
    super.initialize();
    setHash(getHashName() + new Date());
    // Add progress listeners
    Frontend.getInstance().getQueryStartedEvent().addListener(this);
    Frontend.getInstance().getQueryCompleteEvent().addListener(this);
    Frontend.getInstance().subscribeAdditionalQueries(new VdcQueryType[] { VdcQueryType.Search, VdcQueryType.GetStoragePoolById, VdcQueryType.GetNextAvailableDiskAliasNameByVMId, VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, VdcQueryType.GetAllVdsByStoragePool, VdcQueryType.GetAllAttachableDisks, VdcQueryType.GetAllDisksByVmId, VdcQueryType.GetAllRelevantQuotasForStorage, VdcQueryType.OsRepository });
    // Create and set commands
    // $NON-NLS-1$
    UICommand onSaveCommand = new UICommand("OnSave", this);
    onSaveCommand.setTitle(CONSTANTS.ok());
    onSaveCommand.setIsDefault(true);
    getCommands().add(onSaveCommand);
    getCommands().add(getCancelCommand());
    // Update data
    if (getVm() != null) {
        updateBootableDiskAvailable();
    }
    updateDatacenters();
}
#end_block

#method_before
private void updateBootableDiskAvailable() {
    AsyncDataProvider.getVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            AbstractDiskModel diskModel = (AbstractDiskModel) target;
            ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
            diskModel.getIsBootable().setEntity(true);
            for (Disk disk : disks) {
                if (disk.isBoot() && !disk.equals(getDisk())) {
                    diskModel.getIsBootable().setChangeProhibitionReason(CONSTANTS.onlyOneBootableDisk());
                    diskModel.getIsBootable().setEntity(false);
                    diskModel.getIsBootable().setIsChangable(false);
                    break;
                }
            }
            if (!getIsNew()) {
                getIsBootable().setEntity(getDisk().isBoot());
            }
        }
    }, getHash()), getVm().getId());
}
#method_after
private void updateBootableDiskAvailable() {
    AsyncDataProvider.getVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            AbstractDiskModel diskModel = (AbstractDiskModel) target;
            ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
            diskModel.getIsBootable().setEntity(true);
            if (getDisk() == null || !getDisk().isDiskSnapshot()) {
                for (Disk disk : disks) {
                    if (disk.isBoot() && !disk.equals(getDisk())) {
                        diskModel.getIsBootable().setEntity(false);
                        if (!disk.isDiskSnapshot()) {
                            diskModel.getIsBootable().setChangeProhibitionReason(CONSTANTS.onlyOneBootableDisk());
                            diskModel.getIsBootable().setIsChangable(false);
                            break;
                        }
                    }
                }
            }
            if (!getIsNew()) {
                getIsBootable().setEntity(getDisk().isBoot());
            }
        }
    }, getHash()), getVm().getId());
}
#end_block

#method_before
public void updateInterface(Version clusterVersion) {
    final ArrayList<DiskInterface> diskInterfaces = AsyncDataProvider.getDiskInterfaceList(clusterVersion);
    if (getVm() != null) {
        AsyncDataProvider.isVirtioScsiEnabledForVm(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                if (Boolean.FALSE.equals(returnValue)) {
                    diskInterfaces.remove(DiskInterface.VirtIO_SCSI);
                }
                setInterfaces(diskInterfaces);
            }
        }), getVm().getId());
    } else {
        setInterfaces(diskInterfaces);
    }
}
#method_after
public void updateInterface(final Version clusterVersion) {
    if (getVm() != null) {
        AsyncDataProvider.isVirtioScsiEnabledForVm(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue1) {
                final boolean isVirtioScsiDisabled = Boolean.FALSE.equals(returnValue1);
                AsyncQuery asyncQuery = new AsyncQuery(this, new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object model, Object returnValue2) {
                        ArrayList<DiskInterface> diskInterfaces = (ArrayList<DiskInterface>) returnValue2;
                        if (isVirtioScsiDisabled) {
                            diskInterfaces.remove(DiskInterface.VirtIO_SCSI);
                        }
                        setInterfaces(diskInterfaces);
                    }
                });
                AsyncDataProvider.getDiskInterfaceList(getVm().getOs(), clusterVersion, asyncQuery);
            }
        }), getVm().getId());
    } else {
        setInterfaces(AsyncDataProvider.getDiskInterfaceList());
    }
}
#end_block

#method_before
public void onSave() {
    boolean isInternal = (Boolean) getIsInternal().getEntity();
    if (isInternal) {
        DiskImage diskImage = getDiskImage();
        if (getQuota().getIsAvailable() && getQuota().getSelectedItem() != null) {
            diskImage.setQuotaId(((Quota) getQuota().getSelectedItem()).getId());
        }
        long sizeToAddInGigabytes = Long.valueOf((String) getSizeExtend().getEntity());
        if (sizeToAddInGigabytes > 0) {
            diskImage.setSizeInGigabytes(diskImage.getSizeInGigabytes() + sizeToAddInGigabytes);
        }
        setDisk(diskImage);
    } else {
        LunDisk lunDisk = getLunDisk();
        DiskInterface diskInterface = (DiskInterface) getDiskInterface().getSelectedItem();
        if (DiskInterface.VirtIO_SCSI.equals(diskInterface)) {
            lunDisk.setSgio(Boolean.TRUE.equals((Boolean) getIsSgIoUnfiltered().getEntity()) ? ScsiGenericIO.UNFILTERED : ScsiGenericIO.FILTERED);
        }
        setDisk(lunDisk);
    }
    getDisk().setDiskAlias((String) getAlias().getEntity());
    getDisk().setDiskDescription((String) getDescription().getEntity());
    getDisk().setDiskInterface((DiskInterface) getDiskInterface().getSelectedItem());
    getDisk().setWipeAfterDelete((Boolean) getIsWipeAfterDelete().getEntity());
    getDisk().setBoot((Boolean) getIsBootable().getEntity());
    getDisk().setShareable((Boolean) getIsShareable().getEntity());
    getDisk().setPlugged((Boolean) getIsPlugged().getEntity());
    getDisk().setPropagateErrors(PropagateErrors.Off);
    if (getIsReadOnly().getIsAvailable()) {
        getDisk().setReadOnly((Boolean) getIsReadOnly().getEntity());
    } else {
        getDisk().setReadOnly(false);
    }
}
#method_after
public void onSave() {
    boolean isInternal = (Boolean) getIsInternal().getEntity();
    if (isInternal) {
        DiskImage diskImage = getDiskImage();
        if (getQuota().getIsAvailable() && getQuota().getSelectedItem() != null) {
            diskImage.setQuotaId(((Quota) getQuota().getSelectedItem()).getId());
        }
        long sizeToAddInGigabytes = Long.valueOf((String) getSizeExtend().getEntity());
        if (sizeToAddInGigabytes > 0) {
            diskImage.setSizeInGigabytes(diskImage.getSizeInGigabytes() + sizeToAddInGigabytes);
        }
        setDisk(diskImage);
    } else {
        LunDisk lunDisk = getLunDisk();
        DiskInterface diskInterface = (DiskInterface) getDiskInterface().getSelectedItem();
        if (DiskInterface.VirtIO_SCSI.equals(diskInterface)) {
            lunDisk.setSgio(Boolean.TRUE.equals(getIsSgIoUnfiltered().getEntity()) ? ScsiGenericIO.UNFILTERED : ScsiGenericIO.FILTERED);
        }
        setDisk(lunDisk);
    }
    getDisk().setDiskAlias((String) getAlias().getEntity());
    getDisk().setDiskDescription((String) getDescription().getEntity());
    getDisk().setDiskInterface((DiskInterface) getDiskInterface().getSelectedItem());
    getDisk().setWipeAfterDelete((Boolean) getIsWipeAfterDelete().getEntity());
    getDisk().setBoot((Boolean) getIsBootable().getEntity());
    getDisk().setShareable((Boolean) getIsShareable().getEntity());
    getDisk().setPlugged((Boolean) getIsPlugged().getEntity());
    getDisk().setPropagateErrors(PropagateErrors.Off);
    getDisk().setReadOnly(getIsReadOnly().getIsAvailable() ? (Boolean) getIsReadOnly().getEntity() : null);
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition) && sender == getIsWipeAfterDelete()) {
        wipeAfterDelete_EntityChanged(args);
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition) && sender == getIsAttachDisk()) {
        attachDisk_EntityChanged(args);
    } else if (ev.matchesDefinition(ListModel.EntityChangedEventDefinition) && sender == getIsInternal()) {
        isInternal_EntityChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getVolumeType()) {
        volumeType_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getDiskInterface()) {
        DiskInterface_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getDataCenter()) {
        datacenter_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getStorageDomain()) {
        storageDomain_SelectedItemChanged();
    } else if (ev.matchesDefinition(Frontend.QueryStartedEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.QueryCompleteEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition) && sender == getIsWipeAfterDelete()) {
        wipeAfterDelete_EntityChanged(args);
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition) && sender == getIsAttachDisk()) {
        attachDisk_EntityChanged(args);
    } else if (ev.matchesDefinition(ListModel.EntityChangedEventDefinition) && sender == getIsInternal()) {
        isInternal_EntityChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getVolumeType()) {
        volumeType_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getDiskInterface()) {
        DiskInterface_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getDataCenter()) {
        datacenter_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition) && sender == getStorageDomain()) {
        storageDomain_SelectedItemChanged();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryStartedEventDefinition()) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryCompleteEventDefinition()) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    }
}
#end_block

#method_before
@Override
public void initialize() {
    super.initialize();
    disableNonChangeableEntities();
    getAlias().setEntity(getDisk().getDiskAlias());
    getDescription().setEntity(getDisk().getDiskDescription());
    getIsShareable().setEntity(getDisk().isShareable());
    getIsWipeAfterDelete().setEntity(getDisk().isWipeAfterDelete());
    getIsSgIoUnfiltered().setEntity(getDisk().getSgio() == ScsiGenericIO.UNFILTERED);
    getIsReadOnly().setEntity(getDisk().getReadOnly());
    if (getDisk().getDiskStorageType() == DiskStorageType.IMAGE) {
        DiskImage diskImage = (DiskImage) getDisk();
        getSize().setEntity(diskImage.getSizeInGigabytes());
        getIsInternal().setEntity(true);
        getVolumeType().setSelectedItem(diskImage.getVolumeType());
        setVolumeFormat(diskImage.getVolumeFormat());
        boolean isExtendImageSizeEnabled = getVm() != null && VdcActionUtils.canExecute(Arrays.asList(getVm()), VM.class, VdcActionType.ExtendImageSize);
        getSizeExtend().setIsChangable(isExtendImageSizeEnabled);
        Guid storageDomainId = diskImage.getStorageIds().get(0);
        AsyncDataProvider.getStorageDomainById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                DiskModel diskModel = (DiskModel) target;
                StorageDomain storageDomain = (StorageDomain) returnValue;
                diskModel.getStorageDomain().setSelectedItem(storageDomain);
            }
        }, getHash()), storageDomainId);
    } else {
        LunDisk lunDisk = (LunDisk) getDisk();
        getSize().setEntity(lunDisk.getLun().getDeviceSize());
        getIsInternal().setEntity(false);
        getSizeExtend().setIsAvailable(false);
    }
}
#method_after
@Override
public void initialize() {
    super.initialize();
    disableNonChangeableEntities();
    getAlias().setEntity(getDisk().getDiskAlias());
    getDescription().setEntity(getDisk().getDiskDescription());
    getIsShareable().setEntity(getDisk().isShareable());
    getIsWipeAfterDelete().setEntity(getDisk().isWipeAfterDelete());
    getIsSgIoUnfiltered().setEntity(getDisk().getSgio() == ScsiGenericIO.UNFILTERED);
    getIsReadOnly().setEntity(getDisk().getReadOnly());
    if (getDisk().getDiskStorageType() == DiskStorageType.IMAGE) {
        DiskImage diskImage = (DiskImage) getDisk();
        getSize().setEntity(diskImage.getSizeInGigabytes());
        getIsInternal().setEntity(true);
        getVolumeType().setSelectedItem(diskImage.getVolumeType());
        setVolumeFormat(diskImage.getVolumeFormat());
        boolean isExtendImageSizeEnabled = getVm() != null && !diskImage.isDiskSnapshot() && VdcActionUtils.canExecute(Arrays.asList(getVm()), VM.class, VdcActionType.ExtendImageSize);
        getSizeExtend().setIsChangable(isExtendImageSizeEnabled);
        Guid storageDomainId = diskImage.getStorageIds().get(0);
        AsyncDataProvider.getStorageDomainById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                DiskModel diskModel = (DiskModel) target;
                StorageDomain storageDomain = (StorageDomain) returnValue;
                diskModel.getStorageDomain().setSelectedItem(storageDomain);
            }
        }, getHash()), storageDomainId);
    } else {
        LunDisk lunDisk = (LunDisk) getDisk();
        getSize().setEntity(lunDisk.getLun().getDeviceSize());
        getIsInternal().setEntity(false);
        getSizeExtend().setIsAvailable(false);
    }
}
#end_block

#method_before
private void onAttachDisks() {
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    ArrayList<IFrontendActionAsyncCallback> callbacks = new ArrayList<IFrontendActionAsyncCallback>();
    IFrontendActionAsyncCallback onFinishCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            NewDiskModel diskModel = (NewDiskModel) result.getState();
            diskModel.stopProgress();
            diskModel.cancel();
        }
    };
    ArrayList<EntityModel> disksToAttach = (Boolean) getIsInternal().getEntity() ? (ArrayList<EntityModel>) getInternalAttachableDisks().getSelectedItems() : (ArrayList<EntityModel>) getExternalAttachableDisks().getSelectedItems();
    for (int i = 0; i < disksToAttach.size(); i++) {
        DiskModel disk = (DiskModel) disksToAttach.get(i).getEntity();
        AttachDettachVmDiskParameters parameters = new AttachDettachVmDiskParameters(getVm().getId(), disk.getDisk().getId(), (Boolean) getIsPlugged().getEntity(), (Boolean) getIsReadOnly().getEntity());
        actionTypes.add(VdcActionType.AttachDiskToVm);
        paramerterList.add(parameters);
        callbacks.add(i == disksToAttach.size() - 1 ? onFinishCallback : null);
    }
    startProgress(null);
    Frontend.RunMultipleActions(actionTypes, paramerterList, callbacks, null, this);
}
#method_after
private void onAttachDisks() {
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    ArrayList<IFrontendActionAsyncCallback> callbacks = new ArrayList<IFrontendActionAsyncCallback>();
    IFrontendActionAsyncCallback onFinishCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            NewDiskModel diskModel = (NewDiskModel) result.getState();
            diskModel.stopProgress();
            diskModel.cancel();
        }
    };
    ArrayList<EntityModel> disksToAttach = (Boolean) getIsInternal().getEntity() ? (ArrayList<EntityModel>) getInternalAttachableDisks().getSelectedItems() : (ArrayList<EntityModel>) getExternalAttachableDisks().getSelectedItems();
    for (int i = 0; i < disksToAttach.size(); i++) {
        DiskModel disk = (DiskModel) disksToAttach.get(i).getEntity();
        // Disk is attached to VM as read only or not, null is applicable only for floating disks
        // but this is not a case here.
        AttachDettachVmDiskParameters parameters = new AttachDettachVmDiskParameters(getVm().getId(), disk.getDisk().getId(), (Boolean) getIsPlugged().getEntity(), Boolean.TRUE.equals(disk.getDisk().getReadOnly()));
        actionTypes.add(VdcActionType.AttachDiskToVm);
        paramerterList.add(parameters);
        callbacks.add(i == disksToAttach.size() - 1 ? onFinishCallback : null);
    }
    startProgress(null);
    Frontend.RunMultipleActions(actionTypes, paramerterList, callbacks, null, this);
}
#end_block

#method_before
private void onChangeQuota() {
    ChangeQuotaModel model = (ChangeQuotaModel) getWindow();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    for (Object item : model.getItems()) {
        ChangeQuotaItemModel itemModel = (ChangeQuotaItemModel) item;
        DiskImage disk = (DiskImage) itemModel.getEntity();
        VdcActionParametersBase parameters = new ChangeQuotaParameters(((Quota) itemModel.getQuota().getSelectedItem()).getId(), disk.getId(), disk.getStorageIds().get(0), disk.getStoragePoolId());
        paramerterList.add(parameters);
    }
    model.startProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ChangeQuotaForDisk, paramerterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            cancel();
        }
    }, this);
}
#method_after
private void onChangeQuota() {
    ChangeQuotaModel model = (ChangeQuotaModel) getWindow();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    for (Object item : model.getItems()) {
        ChangeQuotaItemModel itemModel = (ChangeQuotaItemModel) item;
        DiskImage disk = (DiskImage) itemModel.getEntity();
        VdcActionParametersBase parameters = new ChangeQuotaParameters(((Quota) itemModel.getQuota().getSelectedItem()).getId(), disk.getId(), itemModel.getStorageDomainId(), disk.getStoragePoolId());
        paramerterList.add(parameters);
    }
    model.startProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ChangeQuotaForDisk, paramerterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            cancel();
        }
    }, this);
}
#end_block

#method_before
private void remove() {
    if (getWindow() != null) {
        return;
    }
    boolean hasSystemDiskWarning = false;
    RemoveDiskModel model = new RemoveDiskModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeDisksTitle());
    // $NON-NLS-1$
    model.setHashName("remove_disk");
    model.setMessage(ConstantsManager.getInstance().getConstants().disksMsg());
    model.getLatch().setEntity(false);
    ArrayList<DiskModel> items = new ArrayList<DiskModel>();
    for (Object item : getSelectedItems()) {
        Disk disk = (Disk) item;
        DiskModel diskModel = new DiskModel();
        diskModel.setDisk(disk);
        diskModel.setVm(getEntity());
        items.add(diskModel);
        // A shared disk can only be detached
        if (disk.getNumberOfVms() > 1) {
            model.getLatch().setIsChangable(false);
        }
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void remove() {
    if (getWindow() != null) {
        return;
    }
    boolean hasSystemDiskWarning = false;
    RemoveDiskModel model = new RemoveDiskModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeDisksTitle());
    // $NON-NLS-1$
    model.setHashName("remove_disk");
    model.getLatch().setEntity(false);
    ArrayList<DiskModel> items = new ArrayList<DiskModel>();
    for (Object item : getSelectedItems()) {
        Disk disk = (Disk) item;
        DiskModel diskModel = new DiskModel();
        diskModel.setDisk(disk);
        diskModel.setVm(getEntity());
        items.add(diskModel);
        // A shared disk or a disk snapshot can only be detached
        if (disk.getNumberOfVms() > 1) {
            model.getLatch().setIsChangable(false);
        }
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void cancel() {
    setWindow(null);
    Frontend.Unsubscribe();
}
#method_after
private void cancel() {
    setWindow(null);
    Frontend.getInstance().unsubscribe();
}
#end_block

#method_before
private boolean isPlugAvailableByDisks(boolean plug) {
    ArrayList<Disk> disks = getSelectedItems() != null ? Linq.<Disk>cast(getSelectedItems()) : new ArrayList<Disk>();
    for (Disk disk : disks) {
        boolean isLocked = disk.getDiskStorageType() == DiskStorageType.IMAGE && ((DiskImage) disk).getImageStatus() == ImageStatus.LOCKED;
        if (disk.getPlugged() == plug || isLocked || (disk.getDiskInterface() == DiskInterface.IDE && !isVmDown())) {
            return false;
        }
    }
    return true;
}
#method_after
private boolean isPlugAvailableByDisks(boolean plug) {
    ArrayList<Disk> disks = getSelectedItems() != null ? Linq.<Disk>cast(getSelectedItems()) : new ArrayList<Disk>();
    for (Disk disk : disks) {
        boolean isLocked = disk.getDiskStorageType() == DiskStorageType.IMAGE && ((DiskImage) disk).getImageStatus() == ImageStatus.LOCKED;
        boolean isDiskHotpluggableInterface = false;
        if (getEntity() != null) {
            isDiskHotpluggableInterface = AsyncDataProvider.getDiskHotpluggableInterfaces(getEntity().getOs(), getEntity().getVdsGroupCompatibilityVersion()).contains(disk.getDiskInterface());
        }
        if (disk.getPlugged() == plug || isLocked || (!isDiskHotpluggableInterface && !isVmDown())) {
            return false;
        }
    }
    return true;
}
#end_block

#method_before
private boolean isMoveCommandAvailable() {
    ArrayList<Disk> disks = getSelectedItems() != null ? Linq.<Disk>cast(getSelectedItems()) : new ArrayList<Disk>();
    for (Disk disk : disks) {
        if (!isImageDiskOK(disk) || (!isVmDown() && disk.getPlugged())) {
            return false;
        }
    }
    return true;
}
#method_after
private boolean isMoveCommandAvailable() {
    ArrayList<Disk> disks = getSelectedItems() != null ? Linq.<Disk>cast(getSelectedItems()) : new ArrayList<Disk>();
    for (Disk disk : disks) {
        if (!isImageDiskOK(disk) || (!isVmDown() && disk.getPlugged()) || disk.isDiskSnapshot()) {
            return false;
        }
    }
    return true;
}
#end_block

#method_before
private boolean isLiveMoveCommandAvailable() {
    if (!getIsLiveStorageMigrationEnabled()) {
        return false;
    }
    VM vm = getEntity();
    if (vm == null || !vm.getStatus().isUpOrPaused() || vm.isStateless()) {
        return false;
    }
    ArrayList<Disk> disks = getSelectedItems() != null ? Linq.<Disk>cast(getSelectedItems()) : new ArrayList<Disk>();
    for (Disk disk : disks) {
        if (!isImageDiskOK(disk)) {
            return false;
        }
    }
    return true;
}
#method_after
private boolean isLiveMoveCommandAvailable() {
    if (!getIsLiveStorageMigrationEnabled()) {
        return false;
    }
    VM vm = getEntity();
    if (vm == null || !vm.getStatus().isUpOrPaused() || vm.isStateless()) {
        return false;
    }
    ArrayList<Disk> disks = getSelectedItems() != null ? Linq.<Disk>cast(getSelectedItems()) : new ArrayList<Disk>();
    for (Disk disk : disks) {
        if (!isImageDiskOK(disk) || disk.isDiskSnapshot()) {
            return false;
        }
    }
    return true;
}
#end_block

#method_before
protected void updateIsDiskHotPlugAvailable() {
    VM vm = getEntity();
    Version clusterCompatibilityVersion = vm.getVdsGroupCompatibilityVersion();
    if (clusterCompatibilityVersion == null) {
        setIsDiskHotPlugSupported(false);
    } else {
        setIsDiskHotPlugSupported((Boolean) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.HotPlugEnabled, clusterCompatibilityVersion.toString()));
    }
}
#method_after
protected void updateIsDiskHotPlugAvailable() {
    VM vm = getEntity();
    Version clusterCompatibilityVersion = vm.getVdsGroupCompatibilityVersion();
    if (clusterCompatibilityVersion == null) {
        setIsDiskHotPlugSupported(false);
    } else {
        setIsDiskHotPlugSupported((Boolean) !AsyncDataProvider.getDiskHotpluggableInterfaces(getEntity().getOs(), clusterCompatibilityVersion).isEmpty());
    }
}
#end_block

#method_before
protected void updateExtendImageSizeSupported() {
    VM vm = (VM) getEntity();
    AsyncQuery query = new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmDiskListModel model = (VmDiskListModel) target;
            model.setExtendImageSizeSupported((Boolean) returnValue);
        }
    });
    AsyncDataProvider.isCommandCompatible(query, VdcActionType.ExtendImageSize, vm.getVdsGroupCompatibilityVersion(), dataCenterVersion);
}
#method_after
protected void updateExtendImageSizeSupported() {
    VM vm = getEntity();
    AsyncQuery query = new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmDiskListModel model = (VmDiskListModel) target;
            model.setExtendImageSizeSupported((Boolean) returnValue);
        }
    });
    AsyncDataProvider.isCommandCompatible(query, VdcActionType.ExtendImageSize, vm.getVdsGroupCompatibilityVersion(), dataCenterVersion);
}
#end_block

#method_before
public ValidationResult validateIsoPath(VM vm, String diskPath, String floppyPath) {
    if (vm.isAutoStartup() || (StringUtils.isEmpty(diskPath) && StringUtils.isEmpty(floppyPath))) {
        return ValidationResult.VALID;
    }
    Guid storageDomainId = getIsoDomainListSyncronizer().findActiveISODomain(vm.getStoragePoolId());
    if (storageDomainId == null) {
        return new ValidationResult(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO);
    }
    if (!StringUtils.isEmpty(diskPath) && !isDiskPathImageExists(diskPath, storageDomainId)) {
        return new ValidationResult(VdcBllMessages.ERROR_CANNOT_FIND_ISO_IMAGE_PATH);
    }
    if (!StringUtils.isEmpty(floppyPath) && !isFloppyPathImageExists(floppyPath, storageDomainId)) {
        return new ValidationResult(VdcBllMessages.ERROR_CANNOT_FIND_FLOPPY_IMAGE_PATH);
    }
    return ValidationResult.VALID;
}
#method_after
public ValidationResult validateIsoPath(VM vm, String diskPath, String floppyPath) {
    if (vm.isAutoStartup() || (StringUtils.isEmpty(diskPath) && StringUtils.isEmpty(floppyPath))) {
        return ValidationResult.VALID;
    }
    Guid storageDomainId = getIsoDomainListSyncronizer().findActiveISODomain(vm.getStoragePoolId());
    if (storageDomainId == null) {
        return new ValidationResult(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO);
    }
    if (!StringUtils.isEmpty(diskPath) && !isRepoImageExists(diskPath, storageDomainId, ImageFileType.ISO)) {
        return new ValidationResult(VdcBllMessages.ERROR_CANNOT_FIND_ISO_IMAGE_PATH);
    }
    if (!StringUtils.isEmpty(floppyPath) && !isRepoImageExists(floppyPath, storageDomainId, ImageFileType.Floppy)) {
        return new ValidationResult(VdcBllMessages.ERROR_CANNOT_FIND_FLOPPY_IMAGE_PATH);
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
public ValidationResult validateVmStatusUsingMatrix(VM vm) {
    if (!VdcActionUtils.CanExecute(Arrays.asList(vm), VM.class, VdcActionType.RunVm)) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL);
    }
    return ValidationResult.VALID;
}
#method_after
public ValidationResult validateVmStatusUsingMatrix(VM vm) {
    if (!VdcActionUtils.canExecute(Arrays.asList(vm), VM.class, VdcActionType.RunVm)) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL, LocalizedVmStatus.from(vm.getStatus()));
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
public boolean canRunVm(VM vm, List<String> messages, List<Disk> vmDisks, BootSequence bootSequence, StoragePool storagePool, boolean isInternalExecution, String diskPath, String floppyPath, Boolean runAsStateless, List<Guid> vdsBlackList, Guid destVds, VDSGroup vdsGroup) {
    if (!validateVmProperties(vm, messages) || !validate(validateBootSequence(vm, bootSequence, vmDisks), messages) || !validate(new VmValidator(vm).vmNotLocked(), messages) || !validate(getSnapshotValidator().vmNotDuringSnapshot(vm.getId()), messages) || !validate(validateVmStatusUsingMatrix(vm), messages) || !validate(validateStoragePoolUp(vm, storagePool), messages) || !validate(validateIsoPath(vm, diskPath, floppyPath), messages) || !validate(vmDuringInitialization(vm), messages) || !validate(validateVdsStatus(vm), messages) || !validate(validateStatelessVm(vm, vmDisks, runAsStateless), messages)) {
        return false;
    }
    List<DiskImage> images = ImagesHandler.filterImageDisks(vmDisks, true, false);
    if (!images.isEmpty() && (!validate(validateStorageDomains(vm, isInternalExecution, images), messages) || !validate(validateImagesForRunVm(vm, images), messages))) {
        return false;
    }
    if (!SchedulingManager.getInstance().canSchedule(vdsGroup, vm, vdsBlackList, null, destVds, messages)) {
        return false;
    }
    return true;
}
#method_after
public boolean canRunVm(VM vm, List<String> messages, List<Disk> vmDisks, BootSequence bootSequence, StoragePool storagePool, boolean isInternalExecution, String diskPath, String floppyPath, Boolean runAsStateless, List<Guid> vdsBlackList, List<Guid> vdsWhiteList, Guid destVds, VDSGroup vdsGroup) {
    if (!validateVmProperties(vm, messages) || !validate(validateBootSequence(vm, bootSequence, vmDisks), messages) || !validate(new VmValidator(vm).vmNotLocked(), messages) || !validate(getSnapshotValidator().vmNotDuringSnapshot(vm.getId()), messages) || !validate(validateVmStatusUsingMatrix(vm), messages) || !validate(validateIsoPath(vm, diskPath, floppyPath), messages) || !validate(vmDuringInitialization(vm), messages) || !validate(validateVdsStatus(vm), messages) || !validate(validateStatelessVm(vm, vmDisks, runAsStateless), messages)) {
        return false;
    }
    List<DiskImage> images = ImagesHandler.filterImageDisks(vmDisks, true, false, false);
    if (!images.isEmpty() && (!validate(validateStoragePoolUp(vm, storagePool), messages) || !validate(validateStorageDomains(vm, isInternalExecution, images), messages) || !validate(validateImagesForRunVm(vm, images), messages))) {
        return false;
    }
    if (!SchedulingManager.getInstance().canSchedule(vdsGroup, vm, vdsBlackList, vdsWhiteList, destVds, messages)) {
        return false;
    }
    return true;
}
#end_block

#method_before
public ValidationResult validateNetworkInterfaces(VM vm) {
    Map<String, VmNetworkInterface> interfaceNetworkMap = Entities.vmInterfacesByNetworkName(vm.getInterfaces());
    Set<String> interfaceNetworkNames = interfaceNetworkMap.keySet();
    List<Network> clusterNetworks = getNetworkDAO().getAllForCluster(vm.getVdsGroupId());
    Set<String> clusterNetworksNames = Entities.objectNames(clusterNetworks);
    ValidationResult validationResult = isVmInterfacesConfigured(vm);
    if (!validationResult.isValid()) {
        return validationResult;
    }
    validationResult = isVmInterfacesAttachedToClusterNetworks(vm, clusterNetworksNames, interfaceNetworkNames);
    if (!validationResult.isValid()) {
        return validationResult;
    }
    validationResult = isVmInterfacesAttachedToVmNetworks(clusterNetworks, interfaceNetworkNames);
    if (!validationResult.isValid()) {
        return validationResult;
    }
    return ValidationResult.VALID;
}
#method_after
public ValidationResult validateNetworkInterfaces(VM vm) {
    Map<String, VmNetworkInterface> interfaceNetworkMap = Entities.vmInterfacesByNetworkName(vm.getInterfaces());
    Set<String> interfaceNetworkNames = interfaceNetworkMap.keySet();
    List<Network> clusterNetworks = getNetworkDao().getAllForCluster(vm.getVdsGroupId());
    Set<String> clusterNetworksNames = Entities.objectNames(clusterNetworks);
    ValidationResult validationResult = isVmInterfacesConfigured(vm);
    if (!validationResult.isValid()) {
        return validationResult;
    }
    validationResult = isVmInterfacesAttachedToClusterNetworks(vm, clusterNetworksNames, interfaceNetworkNames);
    if (!validationResult.isValid()) {
        return validationResult;
    }
    validationResult = isVmInterfacesAttachedToVmNetworks(clusterNetworks, interfaceNetworkNames);
    if (!validationResult.isValid()) {
        return validationResult;
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
private ValidationResult isVmInterfacesConfigured(VM vm) {
    for (VmNetworkInterface nic : vm.getInterfaces()) {
        if (nic.getVnicProfileId() == null) {
            return !FeatureSupported.networkLinking(vm.getVdsGroupCompatibilityVersion()) ? new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_NETWORK_NOT_CONFIGURED) : ValidationResult.VALID;
        }
    }
    return ValidationResult.VALID;
}
#method_after
protected ValidationResult isVmInterfacesConfigured(VM vm) {
    for (VmNetworkInterface nic : vm.getInterfaces()) {
        if (nic.getVnicProfileId() == null) {
            return FeatureSupported.networkLinking(vm.getVdsGroupCompatibilityVersion()) ? ValidationResult.VALID : new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_NETWORK_NOT_CONFIGURED);
        }
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
private ValidationResult isVmInterfacesAttachedToClusterNetworks(VM vm, final Set<String> clusterNetworkNames, final Set<String> interfaceNetworkNames) {
    Set<String> result = new HashSet<String>(interfaceNetworkNames);
    result.removeAll(clusterNetworkNames);
    if (FeatureSupported.networkLinking(vm.getVdsGroupCompatibilityVersion())) {
        result.remove(null);
    }
    // attached to the cluster
    if (result.size() > 0) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NOT_IN_CLUSTER, String.format("$networks %1$s", StringUtils.join(result, ",")));
    }
    return ValidationResult.VALID;
}
#method_after
protected ValidationResult isVmInterfacesAttachedToClusterNetworks(VM vm, final Set<String> clusterNetworkNames, final Set<String> interfaceNetworkNames) {
    Set<String> result = new HashSet<String>(interfaceNetworkNames);
    result.removeAll(clusterNetworkNames);
    if (FeatureSupported.networkLinking(vm.getVdsGroupCompatibilityVersion())) {
        result.remove(null);
    }
    // aren't attached to the cluster
    return result.isEmpty() ? ValidationResult.VALID : new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NOT_IN_CLUSTER, String.format("$networks %1$s", StringUtils.join(result, ",")));
}
#end_block

#method_before
private ValidationResult isVmInterfacesAttachedToVmNetworks(final List<Network> clusterNetworks, Set<String> interfaceNetworkNames) {
    List<String> nonVmNetworkNames = NetworkUtils.filterNonVmNetworkNames(clusterNetworks, interfaceNetworkNames);
    if (nonVmNetworkNames.size() > 0) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_VM_NETWORK, String.format("$networks %1$s", StringUtils.join(nonVmNetworkNames, ",")));
    }
    return ValidationResult.VALID;
}
#method_after
protected ValidationResult isVmInterfacesAttachedToVmNetworks(final List<Network> clusterNetworks, Set<String> interfaceNetworkNames) {
    List<String> nonVmNetworkNames = NetworkUtils.filterNonVmNetworkNames(clusterNetworks, interfaceNetworkNames);
    return nonVmNetworkNames.isEmpty() ? ValidationResult.VALID : new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_VM_NETWORK, String.format("$networks %1$s", StringUtils.join(nonVmNetworkNames, ",")));
}
#end_block

#method_before
protected void runVm() {
    setActionReturnValue(VMStatus.Down);
    if (getVdsToRunOn()) {
        VMStatus status = null;
        try {
            VmHandler.UpdateVmGuestAgentVersion(getVm());
            incrementVdsPendingVmsCount();
            if (connectLunDisks(getVdsId())) {
                status = createVm();
                ExecutionHandler.setAsyncJob(getExecutionContext(), true);
            }
        } catch (VdcBLLException e) {
            VdcBllErrors errorCode = e.getErrorCode();
            // re-throw it. otherwise, continue (the vm will be down and a re-run will be triggered)
            switch(errorCode) {
                // should never get here with errorCode = 'Done' though
                case Done:
                case exist:
                // probably wrong xml format sent.
                case VDS_NETWORK_ERROR:
                case PROVIDER_FAILURE:
                    throw e;
                default:
                    log.warnFormat("Failed to run VM {0}: {1}", getVmName(), e.getMessage());
            }
        } finally {
            freeLock();
            decrementVdsPendingVmsCount();
        }
        setActionReturnValue(status);
        if (status != null && (status.isRunning() || status == VMStatus.RestoringState)) {
            setSucceeded(true);
        } else {
            // Try to rerun Vm on different vds no need to log the command because it is
            // being logged inside the rerun
            log.infoFormat("Trying to rerun VM {0}", getVm().getName());
            setCommandShouldBeLogged(false);
            setSucceeded(true);
            rerun();
        }
    } else {
        failedToRunVm();
        setSucceeded(false);
        _isRerun = false;
    }
}
#method_after
protected void runVm() {
    setActionReturnValue(VMStatus.Down);
    if (getVdsToRunOn()) {
        VMStatus status = null;
        try {
            VmHandler.updateVmGuestAgentVersion(getVm());
            incrementVdsPendingVmsCount();
            if (connectLunDisks(getVdsId())) {
                status = createVm();
                ExecutionHandler.setAsyncJob(getExecutionContext(), true);
            }
        } catch (VdcBLLException e) {
            VdcBllErrors errorCode = e.getErrorCode();
            // re-throw it. otherwise, continue (the vm will be down and a re-run will be triggered)
            switch(errorCode) {
                // should never get here with errorCode = 'Done' though
                case Done:
                case exist:
                // probably wrong xml format sent.
                case VDS_NETWORK_ERROR:
                case PROVIDER_FAILURE:
                    throw e;
                default:
                    log.warnFormat("Failed to run VM {0}: {1}", getVmName(), e.getMessage());
            }
        } finally {
            freeLock();
            decrementVdsPendingVmsCount();
        }
        setActionReturnValue(status);
        if (status != null && (status.isRunning() || status == VMStatus.RestoringState)) {
            setSucceeded(true);
        } else {
            // Try to rerun Vm on different vds no need to log the command because it is
            // being logged inside the rerun
            log.infoFormat("Trying to rerun VM {0}", getVm().getName());
            setCommandShouldBeLogged(false);
            setSucceeded(true);
            rerun();
        }
    } else {
        failedToRunVm();
        setSucceeded(false);
        _isRerun = false;
    }
}
#end_block

#method_before
private void statelessVmTreatment() {
    warnIfNotAllDisksPermitSnapshots();
    if (isStatelessSnapshotExistsForVm()) {
        log.errorFormat("RunVmAsStateless - {0} - found stateless snapshots for this vm  - skipped creating snapshots.", getVm().getName());
        removeVmStatlessImages();
    } else {
        log.infoFormat("VdcBll.RunVmCommand.RunVmAsStateless - Creating snapshot for stateless vm {0} - {1}", getVm().getName(), getVm().getId());
        CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters();
        Map<String, String> values = getVmValuesForMsgResolving();
        // Creating snapshots as sub step of run stateless
        Step createSnapshotsStep = addSubStep(StepEnum.EXECUTING, StepEnum.CREATING_SNAPSHOTS, values);
        // Add the step as the first step of the new context
        ExecutionContext createSnapshotsCtx = new ExecutionContext();
        createSnapshotsCtx.setMonitored(true);
        createSnapshotsCtx.setStep(createSnapshotsStep);
        VdcReturnValueBase vdcReturnValue = getBackend().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, createAllSnapshotsFromVmParameters, new CommandContext(createSnapshotsCtx, getCompensationContext(), getLock()));
        // setting lock to null in order not to release lock twice
        setLock(null);
        setSucceeded(vdcReturnValue.getSucceeded());
        if (vdcReturnValue.getSucceeded()) {
            getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList());
            // save RunVmParams so we'll know how to run
            // the stateless VM in the EndAction part.
            VmHandler.updateDisksFromDb(getVm());
        } else {
            if (areDisksLocked(vdcReturnValue)) {
                throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
            }
            getReturnValue().setFault(vdcReturnValue.getFault());
            log.errorFormat("RunVmAsStateless - {0} - failed to create snapshots", getVm().getName());
        }
    }
}
#method_after
private void statelessVmTreatment() {
    warnIfNotAllDisksPermitSnapshots();
    if (isStatelessSnapshotExistsForVm()) {
        log.errorFormat("RunVmAsStateless - {0} - found stateless snapshots for this vm  - skipped creating snapshots.", getVm().getName());
        removeVmStatlessImages();
    } else {
        log.infoFormat("VdcBll.RunVmCommand.RunVmAsStateless - Creating snapshot for stateless vm {0} - {1}", getVm().getName(), getVm().getId());
        CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters();
        Map<String, String> values = getVmValuesForMsgResolving();
        // Creating snapshots as sub step of run stateless
        Step createSnapshotsStep = addSubStep(StepEnum.EXECUTING, StepEnum.CREATING_SNAPSHOTS, values);
        // Add the step as the first step of the new context
        ExecutionContext createSnapshotsCtx = new ExecutionContext();
        createSnapshotsCtx.setMonitored(true);
        createSnapshotsCtx.setStep(createSnapshotsStep);
        VdcReturnValueBase vdcReturnValue = getBackend().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, createAllSnapshotsFromVmParameters, new CommandContext(createSnapshotsCtx, getCompensationContext(), getLock()));
        // setting lock to null in order not to release lock twice
        setLock(null);
        setSucceeded(vdcReturnValue.getSucceeded());
        if (vdcReturnValue.getSucceeded()) {
            getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList());
            // save RunVmParams so we'll know how to run
            // the stateless VM in the endAction part.
            VmHandler.updateDisksFromDb(getVm());
        } else {
            if (areDisksLocked(vdcReturnValue)) {
                throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
            }
            getReturnValue().setFault(vdcReturnValue.getFault());
            log.errorFormat("RunVmAsStateless - {0} - failed to create snapshots", getVm().getName());
        }
    }
}
#end_block

#method_before
protected CreateVmVDSCommandParameters initCreateVmParams() {
    VM vmToBeCreated = getVm();
    vmToBeCreated.setRunOnce(false);
    if (!vmToBeCreated.getInterfaces().isEmpty()) {
        initParametersForExternalNetworks();
    }
    if (vmToBeCreated.getStatus() == VMStatus.Suspended) {
        return new CreateVmVDSCommandParameters(getVdsId(), vmToBeCreated);
    }
    if (!memorySnapshotSupported || memoryFromSnapshotIrrelevant) {
        vmToBeCreated.setHibernationVolHandle(StringUtils.EMPTY);
        return new CreateVmVDSCommandParameters(getVdsId(), vmToBeCreated);
    }
    // otherwise, use the memory that is saved on the active snapshot (might be empty)
    vmToBeCreated.setHibernationVolHandle(memoryVolumeFromSnapshot);
    CreateVmVDSCommandParameters parameters = new CreateVmVDSCommandParameters(getVdsId(), vmToBeCreated);
    // Mark that the hibernation volume should be cleared from the VM right after the sync part of
    // the create verb is finished (unlike hibernation volume that is created by hibernate command)
    parameters.setClearHibernationVolumes(true);
    return parameters;
}
#method_after
protected CreateVmVDSCommandParameters initCreateVmParams() {
    VM vmToBeCreated = getVm();
    vmToBeCreated.setRunOnce(false);
    vmToBeCreated.setCpuName(getVdsGroup().getcpu_name());
    if (!vmToBeCreated.getInterfaces().isEmpty()) {
        initParametersForExternalNetworks();
    }
    if (vmToBeCreated.getStatus() == VMStatus.Suspended) {
        return new CreateVmVDSCommandParameters(getVdsId(), vmToBeCreated);
    }
    if (!memorySnapshotSupported || memoryFromSnapshotIrrelevant) {
        vmToBeCreated.setHibernationVolHandle(StringUtils.EMPTY);
        return new CreateVmVDSCommandParameters(getVdsId(), vmToBeCreated);
    }
    // otherwise, use the memory that is saved on the active snapshot (might be empty)
    vmToBeCreated.setHibernationVolHandle(memoryVolumeFromSnapshot);
    CreateVmVDSCommandParameters parameters = new CreateVmVDSCommandParameters(getVdsId(), vmToBeCreated);
    // Mark that the hibernation volume should be cleared from the VM right after the sync part of
    // the create verb is finished (unlike hibernation volume that is created by hibernate command)
    parameters.setClearHibernationVolumes(true);
    return parameters;
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    switch(getActionState()) {
        case EXECUTE:
            if (isFailedStatlessSnapshot) {
                return AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT;
            }
            if (mResume) {
                return getSucceeded() ? AuditLogType.USER_RESUME_VM : AuditLogType.USER_FAILED_RESUME_VM;
            } else if (isInternalExecution()) {
                return getSucceeded() ? (isStatelessSnapshotExistsForVm() ? AuditLogType.VDS_INITIATED_RUN_VM_AS_STATELESS : AuditLogType.VDS_INITIATED_RUN_VM) : AuditLogType.VDS_INITIATED_RUN_VM_FAILED;
            } else {
                return getSucceeded() ? (VMStatus) getActionReturnValue() == VMStatus.Up ? getParameters() != null && getParameters().getDestinationVdsId() == null && getVm().getDedicatedVmForVds() != null && !getVm().getRunOnVds().equals(getVm().getDedicatedVmForVds()) ? AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS : (isStatelessSnapshotExistsForVm() ? AuditLogType.USER_RUN_VM_AS_STATELESS : AuditLogType.USER_RUN_VM) : _isRerun ? AuditLogType.VDS_INITIATED_RUN_VM : getTaskIdList().size() > 0 ? AuditLogType.USER_INITIATED_RUN_VM : getVm().isRunAndPause() ? AuditLogType.USER_INITIATED_RUN_VM_AND_PAUSE : AuditLogType.USER_STARTED_VM : _isRerun ? AuditLogType.USER_INITIATED_RUN_VM_FAILED : AuditLogType.USER_FAILED_RUN_VM;
            }
        case END_SUCCESS:
            // command should be with 'CommandShouldBeLogged = false':
            return isVmRunningStateless() && !getSucceeded() ? AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE : AuditLogType.UNASSIGNED;
        case END_FAILURE:
            // be with 'CommandShouldBeLogged = false':
            return isVmRunningStateless() ? AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE : AuditLogType.UNASSIGNED;
        default:
            // false':
            return AuditLogType.UNASSIGNED;
    }
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    switch(getActionState()) {
        case EXECUTE:
            if (isFailedStatlessSnapshot) {
                return AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT;
            }
            if (mResume) {
                return getSucceeded() ? AuditLogType.USER_RESUME_VM : AuditLogType.USER_FAILED_RESUME_VM;
            } else if (isInternalExecution()) {
                if (getSucceeded()) {
                    boolean isStateless = isStatelessSnapshotExistsForVm();
                    boolean isVdsKnown = getVds() != null;
                    if (isStateless && isVdsKnown) {
                        return AuditLogType.VDS_INITIATED_RUN_VM_AS_STATELESS;
                    } else if (isStateless) {
                        return AuditLogType.VDS_INITIATED_RUN_AS_STATELESS_VM_NOT_YET_RUNNING;
                    } else {
                        return AuditLogType.VDS_INITIATED_RUN_VM;
                    }
                }
                return AuditLogType.VDS_INITIATED_RUN_VM_FAILED;
            } else {
                return getSucceeded() ? (VMStatus) getActionReturnValue() == VMStatus.Up ? getParameters() != null && getParameters().getDestinationVdsId() == null && getVm().getDedicatedVmForVds() != null && !getVm().getRunOnVds().equals(getVm().getDedicatedVmForVds()) ? AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS : (isStatelessSnapshotExistsForVm() ? AuditLogType.USER_RUN_VM_AS_STATELESS : AuditLogType.USER_RUN_VM) : _isRerun ? AuditLogType.VDS_INITIATED_RUN_VM : getTaskIdList().size() > 0 ? AuditLogType.USER_INITIATED_RUN_VM : getVm().isRunAndPause() ? AuditLogType.USER_INITIATED_RUN_VM_AND_PAUSE : AuditLogType.USER_STARTED_VM : _isRerun ? AuditLogType.USER_INITIATED_RUN_VM_FAILED : AuditLogType.USER_FAILED_RUN_VM;
            }
        case END_SUCCESS:
            // command should be with 'CommandShouldBeLogged = false':
            return isVmRunningStateless() && !getSucceeded() ? AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE : AuditLogType.UNASSIGNED;
        case END_FAILURE:
            // be with 'CommandShouldBeLogged = false':
            return isVmRunningStateless() ? AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE : AuditLogType.UNASSIGNED;
        default:
            // false':
            return AuditLogType.UNASSIGNED;
    }
}
#end_block

#method_before
protected boolean getVdsToRunOn() {
    // use destination vds or default vds or none
    VDS destinationVds = getDestinationVds();
    Guid vdsToRunOn = SchedulingManager.getInstance().schedule(getVdsGroup(), getVm(), getRunVdssList(), null, destinationVds == null ? null : destinationVds.getId(), new ArrayList<String>(), new VdsFreeMemoryChecker(this));
    setVdsId(vdsToRunOn);
    if (vdsToRunOn != null && !Guid.Empty.equals(vdsToRunOn)) {
        getRunVdssList().add(vdsToRunOn);
    }
    VmHandler.UpdateVmGuestAgentVersion(getVm());
    setVds(null);
    setVdsName(null);
    if (getVdsId().equals(Guid.Empty)) {
        log.errorFormat("Can't find VDS to run the VM {0} on, so this VM will not be run.", getVmId());
        return false;
    }
    if (getVds() == null) {
        VdcBLLException outEx = new VdcBLLException(VdcBllErrors.RESOURCE_MANAGER_VDS_NOT_FOUND);
        log.error(String.format("VmHandler::%1$s", getClass().getName()), outEx);
        return false;
    }
    return true;
}
#method_after
protected boolean getVdsToRunOn() {
    // use destination vds or default vds or none
    VDS destinationVds = getDestinationVds();
    Guid vdsToRunOn = SchedulingManager.getInstance().schedule(getVdsGroup(), getVm(), getRunVdssList(), getVdsWhiteList(), destinationVds == null ? null : destinationVds.getId(), new ArrayList<String>(), new VdsFreeMemoryChecker(this), getCorrelationId());
    setVdsId(vdsToRunOn);
    if (vdsToRunOn != null && !Guid.Empty.equals(vdsToRunOn)) {
        getRunVdssList().add(vdsToRunOn);
    }
    VmHandler.updateVmGuestAgentVersion(getVm());
    setVds(null);
    setVdsName(null);
    if (getVdsId().equals(Guid.Empty)) {
        log.errorFormat("Can't find VDS to run the VM {0} on, so this VM will not be run.", getVmId());
        return false;
    }
    if (getVds() == null) {
        VdcBLLException outEx = new VdcBLLException(VdcBllErrors.RESOURCE_MANAGER_VDS_NOT_FOUND);
        log.error(String.format("VmHandler::%1$s", getClass().getName()), outEx);
        return false;
    }
    return true;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    VM vm = getVm();
    if (vm == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND);
    }
    if (vm.getStatus() == VMStatus.Paused) {
        // if VM is paused, it was already checked before that it is capable to run
        return true;
    }
    if (!getRunVmValidator().canRunVm(vm, getReturnValue().getCanDoActionMessages(), getDiskDao().getAllForVm(vm.getId(), true), getParameters().getBootSequence(), getStoragePool(), isInternalExecution(), getParameters().getDiskPath(), getParameters().getFloppyPath(), getParameters().getRunAsStateless(), getRunVdssList(), getDestinationVds() != null ? getDestinationVds().getId() : null, getVdsGroup())) {
        return false;
    }
    if (!validate(getRunVmValidator().validateNetworkInterfaces(vm))) {
        return false;
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (checkPayload(getParameters().getVmPayload(), getParameters().getDiskPath()) && !StringUtils.isEmpty(getParameters().getFloppyPath()) && getParameters().getVmPayload().getType() == VmDeviceType.FLOPPY) {
            return failCanDoAction(VdcBllMessages.VMPAYLOAD_FLOPPY_EXCEEDED);
        }
        getVm().setVmPayload(getParameters().getVmPayload());
    }
    if (!vm.isAutoStartup() && !StringUtils.isEmpty(getVm().getIsoPath()) && getIsoDomainListSyncronizer().findActiveISODomain(getVm().getStoragePoolId()) == null) {
        return failCanDoAction(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    VM vm = getVm();
    if (vm == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND);
    }
    if (!validateObject(vm.getStaticData())) {
        return false;
    }
    if (!canRunActionOnNonManagedVm()) {
        return false;
    }
    if (vm.getStatus() == VMStatus.Paused) {
        // if VM is paused, it was already checked before that it is capable to run
        return true;
    }
    if (!getRunVmValidator().canRunVm(vm, getReturnValue().getCanDoActionMessages(), getDiskDao().getAllForVm(vm.getId(), true), getParameters().getBootSequence(), getStoragePool(), isInternalExecution(), getParameters().getDiskPath(), getParameters().getFloppyPath(), getParameters().getRunAsStateless(), getRunVdssList(), getVdsWhiteList(), getDestinationVds() != null ? getDestinationVds().getId() : null, getVdsGroup())) {
        return false;
    }
    if (!validate(getRunVmValidator().validateNetworkInterfaces(vm))) {
        return false;
    }
    // check for Vm Payload
    if (getParameters().getVmPayload() != null) {
        if (checkPayload(getParameters().getVmPayload(), getParameters().getDiskPath()) && !StringUtils.isEmpty(getParameters().getFloppyPath()) && getParameters().getVmPayload().getType() == VmDeviceType.FLOPPY) {
            return failCanDoAction(VdcBllMessages.VMPAYLOAD_FLOPPY_EXCEEDED);
        }
        getVm().setVmPayload(getParameters().getVmPayload());
    }
    // we don't run the VM
    if (!vm.isAutoStartup() && !StringUtils.isEmpty(getVm().getIsoPath()) && getIsoDomainListSyncronizer().findActiveISODomain(getVm().getStoragePoolId()) == null) {
        return failCanDoAction(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO);
    }
    return true;
}
#end_block

#method_before
@Override
protected void endSuccessfully() {
    if (isVmRunningStateless()) {
        CreateAllSnapshotsFromVmParameters createSnapshotParameters = buildCreateSnapshotParameters();
        createSnapshotParameters.setImagesParameters(getParameters().getImagesParameters());
        getBackend().EndAction(VdcActionType.CreateAllSnapshotsFromVm, createSnapshotParameters);
        getParameters().setShouldBeLogged(false);
        getParameters().setRunAsStateless(false);
        ExecutionContext runStatelessVmCtx = new ExecutionContext();
        Step step = getExecutionContext().getStep();
        // Retrieve the job object and its steps as this the endSuccessfully stage of command execution -
        // at this is a new instance of the command is used
        // (comparing with the execution state) so all information on the job and steps should be retrieved.
        Job job = JobRepositoryFactory.getJobRepository().getJobWithSteps(step.getJobId());
        Step executingStep = job.getDirectStep(StepEnum.EXECUTING);
        // We would like to to set the run stateless step as substep of executing step
        setInternalExecution(true);
        // The internal command should be monitored for tasks
        runStatelessVmCtx.setMonitored(true);
        Step runStatelessStep = ExecutionHandler.addSubStep(getExecutionContext(), executingStep, StepEnum.RUN_STATELESS_VM, ExecutionMessageDirector.resolveStepMessage(StepEnum.RUN_STATELESS_VM, getVmValuesForMsgResolving()));
        // This is needed in order to end the job upon exextuion of the steps of the child command
        runStatelessVmCtx.setShouldEndJob(true);
        // Since run stateless step involves invocation of command, we should set the run stateless vm step as
        // the "beginning step" of the child command.
        runStatelessVmCtx.setStep(runStatelessStep);
        setSucceeded(getBackend().runInternalAction(getActionType(), getParameters(), new CommandContext(runStatelessVmCtx)).getSucceeded());
        if (!getSucceeded()) {
            // could not run the vm don't try to run the end action again
            log.warnFormat("Could not run the vm {0} on RunVm.EndSuccessfully", getVm().getName());
            getReturnValue().setEndActionTryAgain(false);
        }
    } else // Hibernation (VMStatus.Suspended) treatment:
    {
        super.endSuccessfully();
    }
}
#method_after
@Override
protected void endSuccessfully() {
    if (isVmRunningStateless()) {
        CreateAllSnapshotsFromVmParameters createSnapshotParameters = buildCreateSnapshotParameters();
        createSnapshotParameters.setImagesParameters(getParameters().getImagesParameters());
        getBackend().endAction(VdcActionType.CreateAllSnapshotsFromVm, createSnapshotParameters);
        getParameters().setShouldBeLogged(false);
        getParameters().setRunAsStateless(false);
        ExecutionContext runStatelessVmCtx = new ExecutionContext();
        Step step = getExecutionContext().getStep();
        // Retrieve the job object and its steps as this the endSuccessfully stage of command execution -
        // at this is a new instance of the command is used
        // (comparing with the execution state) so all information on the job and steps should be retrieved.
        Job job = JobRepositoryFactory.getJobRepository().getJobWithSteps(step.getJobId());
        Step executingStep = job.getDirectStep(StepEnum.EXECUTING);
        // We would like to to set the run stateless step as substep of executing step
        setInternalExecution(true);
        // The internal command should be monitored for tasks
        runStatelessVmCtx.setMonitored(true);
        Step runStatelessStep = ExecutionHandler.addSubStep(getExecutionContext(), executingStep, StepEnum.RUN_STATELESS_VM, ExecutionMessageDirector.resolveStepMessage(StepEnum.RUN_STATELESS_VM, getVmValuesForMsgResolving()));
        // This is needed in order to end the job upon exextuion of the steps of the child command
        runStatelessVmCtx.setShouldEndJob(true);
        // Since run stateless step involves invocation of command, we should set the run stateless vm step as
        // the "beginning step" of the child command.
        runStatelessVmCtx.setStep(runStatelessStep);
        setSucceeded(getBackend().runInternalAction(getActionType(), getParameters(), new CommandContext(runStatelessVmCtx)).getSucceeded());
        if (!getSucceeded()) {
            // could not run the vm don't try to run the end action again
            log.warnFormat("Could not run the vm {0} on RunVm.EndSuccessfully", getVm().getName());
            getReturnValue().setEndActionTryAgain(false);
        }
    } else // Hibernation (VMStatus.Suspended) treatment:
    {
        super.endSuccessfully();
    }
}
#end_block

#method_before
private VM mockVm(RunVmCommand<RunVmParams> spyVmCommand) {
    VM vm = new VM();
    vm.setStatus(VMStatus.Down);
    doReturn(vmDAO).when(command).getVmDAO();
    when(vmDAO.get(command.getParameters().getVmId())).thenReturn(vm);
    return vm;
}
#method_after
private VM mockVm(RunVmCommand<RunVmParams> spyVmCommand) {
    VM vm = new VM();
    vm.setStatus(VMStatus.Down);
    doReturn(vmDAO).when(command).getVmDAO();
    when(vmDAO.get(command.getParameters().getVmId())).thenReturn(vm);
    doReturn(new VDSGroup()).when(command).getVdsGroup();
    return vm;
}
#end_block

#method_before
@Before
public void createCommand() {
    RunVmParams param = new RunVmParams(Guid.newGuid());
    command = spy(new RunVmCommand<RunVmParams>(param));
    mockIsoDomainListSyncronizer();
    mockSuccessfulRunVmValidator();
    doNothing().when(command).initParametersForExternalNetworks();
    mockSuccessfulSnapshotValidator();
    mockBackend();
}
#method_after
@Before
public void createCommand() {
    when(osRepository.isWindows(Mockito.anyInt())).thenReturn(false);
    SimpleDependecyInjector.getInstance().bind(OsRepository.class, osRepository);
    RunVmParams param = new RunVmParams(Guid.newGuid());
    command = spy(new RunVmCommand<RunVmParams>(param));
    mockIsoDomainListSyncronizer();
    mockSuccessfulRunVmValidator();
    doNothing().when(command).initParametersForExternalNetworks();
    mockSuccessfulSnapshotValidator();
    mockBackend();
}
#end_block

#method_before
private RunVmValidator mockSuccessfulRunVmValidator() {
    RunVmValidator runVmValidator = mock(RunVmValidator.class);
    when(runVmValidator.canRunVm(any(VM.class), Matchers.anyListOf(String.class), Matchers.anyListOf(Disk.class), any(BootSequence.class), any(StoragePool.class), anyBoolean(), anyString(), anyString(), anyBoolean(), Matchers.anyListOf(Guid.class), any(Guid.class), any(VDSGroup.class))).thenReturn(true);
    when(runVmValidator.validateNetworkInterfaces(any(VM.class))).thenReturn(ValidationResult.VALID);
    doReturn(runVmValidator).when(command).getRunVmValidator();
    return runVmValidator;
}
#method_after
private RunVmValidator mockSuccessfulRunVmValidator() {
    RunVmValidator runVmValidator = mock(RunVmValidator.class);
    when(runVmValidator.canRunVm(any(VM.class), Matchers.anyListOf(String.class), Matchers.anyListOf(Disk.class), any(BootSequence.class), any(StoragePool.class), anyBoolean(), anyString(), anyString(), anyBoolean(), Matchers.anyListOf(Guid.class), Matchers.anyListOf(Guid.class), any(Guid.class), any(VDSGroup.class))).thenReturn(true);
    when(runVmValidator.validateNetworkInterfaces(any(VM.class))).thenReturn(ValidationResult.VALID);
    doReturn(runVmValidator).when(command).getRunVmValidator();
    return runVmValidator;
}
#end_block

#method_before
@Override
public void execute() {
    if (!enclosingCommand.getParameters().getLiveSnapshotSucceeded()) {
        throw new VdcBLLException(VdcBllErrors.imageErr, "Auto-generated live snapshot for VM " + enclosingCommand.getParameters().getVmId() + " failed");
    }
    for (LiveMigrateDiskParameters parameters : enclosingCommand.getParameters().getParametersList()) {
        CommandContext commandContext = ExecutionHandler.createInternalJobContext();
        ExecutionHandler.setAsyncJob(commandContext.getExecutionContext(), true);
        parameters.setSessionId(enclosingCommand.getParameters().getSessionId());
        VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.LiveMigrateDisk, parameters, commandContext);
        enclosingCommand.getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList());
        if (!parameters.getTaskGroupSuccess()) {
            ExecutionHandler.endTaskJob(commandContext.getExecutionContext(), false);
            log.errorFormat("Failed LiveMigrateDisk (Disk {0} , VM {1})", parameters.getImageGroupID(), parameters.getVmId());
        }
    }
    enclosingCommand.getReturnValue().setSucceeded(true);
}
#method_after
@Override
public void execute() {
    if (!enclosingCommand.getReturnValue().getSucceeded()) {
        throw new VdcBLLException(VdcBllErrors.imageErr, "Auto-generated live snapshot for VM " + enclosingCommand.getParameters().getVmId() + " failed");
    }
    for (LiveMigrateDiskParameters parameters : enclosingCommand.getParameters().getParametersList()) {
        CommandContext commandContext = ExecutionHandler.createInternalJobContext();
        ExecutionHandler.setAsyncJob(commandContext.getExecutionContext(), true);
        parameters.setSessionId(enclosingCommand.getParameters().getSessionId());
        VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.LiveMigrateDisk, parameters, commandContext);
        enclosingCommand.getReturnValue().getVdsmTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList());
        if (!parameters.getTaskGroupSuccess()) {
            ExecutionHandler.endTaskJob(commandContext.getExecutionContext(), false);
            log.errorFormat("Failed LiveMigrateDisk (Disk {0} , VM {1})", parameters.getImageGroupID(), parameters.getVmId());
        }
    }
    enclosingCommand.getReturnValue().setSucceeded(true);
}
#end_block

#method_before
private void endCreateAllSnapshots() {
    CreateAllSnapshotsFromVmParameters snapshotsParameters = getCreateSnapshotParameters();
    Backend.getInstance().endAction(VdcActionType.CreateAllSnapshotsFromVm, snapshotsParameters, ExecutionHandler.createDefaultContexForTasks(enclosingCommand.getExecutionContext()));
    enclosingCommand.getParameters().setLiveSnapshotSucceeded(snapshotsParameters.getLiveSnapshotSucceeded());
}
#method_after
private void endCreateAllSnapshots() {
    VdcReturnValueBase returnValue = Backend.getInstance().endAction(VdcActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), ExecutionHandler.createDefaultContexForTasks(enclosingCommand.getExecutionContext()));
    enclosingCommand.getReturnValue().setSucceeded(returnValue.getSucceeded());
}
#end_block

#method_before
@Override
protected void endVmCommand() {
    Snapshot createdSnapshot = getSnapshotDao().get(getVmId(), getParameters().getSnapshotType(), SnapshotStatus.LOCKED);
    // if the snapshot was not created in the DB
    // the command should also be handled as a failure
    boolean taskGroupSucceeded = createdSnapshot != null && getParameters().getTaskGroupSuccess();
    if (taskGroupSucceeded) {
        getSnapshotDao().updateStatus(createdSnapshot.getId(), SnapshotStatus.OK);
        if (isLiveSnapshotApplicable()) {
            performLiveSnapshot(createdSnapshot);
        } else {
            // they are not going to be in use since no live snapshot is created
            if (createdSnapshot.containsMemory()) {
                logMemorySavingFailed();
                getSnapshotDao().removeMemoryFromSnapshot(createdSnapshot.getId());
                removeMemoryVolumesOfSnapshot(createdSnapshot);
            }
        }
    } else {
        if (createdSnapshot != null) {
            revertToActiveSnapshot(createdSnapshot.getId());
            // If the removed snapshot contained memory, remove the memory volumes
            // Note that the memory volumes might not have been created
            removeMemoryVolumesOfSnapshot(createdSnapshot);
        } else {
            log.warnFormat("No snapshot was created for VM {0} which is in LOCKED status", getVmId());
        }
    }
    incrementVmGeneration();
    endActionOnDisks();
    setSucceeded(taskGroupSucceeded);
    getReturnValue().setEndActionTryAgain(false);
}
#method_after
@Override
protected void endVmCommand() {
    Snapshot createdSnapshot = getSnapshotDao().get(getVmId(), getParameters().getSnapshotType(), SnapshotStatus.LOCKED);
    // if the snapshot was not created in the DB
    // the command should also be handled as a failure
    boolean taskGroupSucceeded = createdSnapshot != null && getParameters().getTaskGroupSuccess();
    boolean liveSnapshotRequired = isLiveSnapshotApplicable();
    boolean liveSnapshotSucceeded = false;
    if (taskGroupSucceeded) {
        getSnapshotDao().updateStatus(createdSnapshot.getId(), SnapshotStatus.OK);
        if (liveSnapshotRequired) {
            liveSnapshotSucceeded = performLiveSnapshot(createdSnapshot);
        } else {
            // they are not going to be in use since no live snapshot is created
            if (createdSnapshot.containsMemory()) {
                logMemorySavingFailed();
                getSnapshotDao().removeMemoryFromSnapshot(createdSnapshot.getId());
                removeMemoryVolumesOfSnapshot(createdSnapshot);
            }
        }
    } else {
        if (createdSnapshot != null) {
            revertToActiveSnapshot(createdSnapshot.getId());
            // If the removed snapshot contained memory, remove the memory volumes
            // Note that the memory volumes might not have been created
            removeMemoryVolumesOfSnapshot(createdSnapshot);
        } else {
            log.warnFormat("No snapshot was created for VM {0} which is in LOCKED status", getVmId());
        }
    }
    incrementVmGeneration();
    endActionOnDisks();
    setSucceeded(taskGroupSucceeded && (!liveSnapshotRequired || liveSnapshotSucceeded));
    getReturnValue().setEndActionTryAgain(false);
}
#end_block

#method_before
protected void performLiveSnapshot(final Snapshot snapshot) {
    try {
        TransactionSupport.executeInScope(TransactionScopeOption.Suppress, new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                runVdsCommand(VDSCommandType.Snapshot, buildLiveSnapshotParameters(snapshot));
                getParameters().setLiveSnapshotSucceeded(true);
                return null;
            }
        });
    } catch (VdcBLLException e) {
        getParameters().setLiveSnapshotSucceeded(false);
        handleVdsLiveSnapshotFailure(e);
    }
}
#method_after
protected boolean performLiveSnapshot(final Snapshot snapshot) {
    try {
        TransactionSupport.executeInScope(TransactionScopeOption.Suppress, new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                runVdsCommand(VDSCommandType.Snapshot, buildLiveSnapshotParameters(snapshot));
                return null;
            }
        });
    } catch (VdcBLLException e) {
        handleVdsLiveSnapshotFailure(e);
        return false;
    }
    return true;
}
#end_block

#method_before
private void updateActionAvailability() {
    VDS host = getEntity();
    VdsNetworkInterface selectedItem = (VdsNetworkInterface) getSelectedItem();
    ArrayList<VdsNetworkInterface> selectedItems = getSelectedItems();
    getEditCommand().setIsExecutionAllowed(host != null && host.getStatus() != VDSStatus.NonResponsive && selectedItem != null && selectedItems.size() == 1 && StringHelper.isNullOrEmpty(selectedItem.getBondName()) && !selectedItem.getIsManagement());
    getBondCommand().setIsExecutionAllowed(host != null && host.getStatus() != VDSStatus.NonResponsive && selectedItems.size() >= 2 && !isAnyBond(selectedItems) && Linq.findAllInterfaceNetworkNameNotEmpty(selectedItems).size() <= 1 && Linq.findAllInterfaceBondNameIsEmpty(selectedItems).size() == selectedItems.size() && Linq.findAllInterfaceVlanIdIsEmpty(selectedItems).size() == selectedItems.size());
    // to bond, selected lines must not have more that 1 networks (vlan or not)
    if (getItems() != null) {
        ArrayList<HostInterfaceLineModel> itemList = (ArrayList<HostInterfaceLineModel>) getItems();
        // total network count cannot be more than 1
        int totalNetworkCount = 0;
        for (HostInterfaceLineModel lineModel : itemList) {
            if (lineModel.getIsSelected()) {
                int lineNetworkCount = lineModel.getVlanSize() + (lineModel.getNetworkName() != null ? 1 : 0);
                if (lineNetworkCount > 1) {
                    // bailout
                    getBondCommand().setIsExecutionAllowed(false);
                    break;
                }
                totalNetworkCount += lineNetworkCount;
                if (totalNetworkCount > 1) {
                    // bailout
                    getBondCommand().setIsExecutionAllowed(false);
                    break;
                }
            }
        }
    }
    getDetachCommand().setIsExecutionAllowed(host != null && host.getStatus() != VDSStatus.NonResponsive && selectedItems.size() == 1 && selectedItem != null && !StringHelper.isNullOrEmpty(selectedItem.getNetworkName()) && !selectedItem.getIsManagement());
    getSaveNetworkConfigCommand().setIsExecutionAllowed(host != null && (host.getNetConfigDirty() == null ? false : host.getNetConfigDirty()));
    getEditManagementNetworkCommand().setIsExecutionAllowed(host != null && host.getStatus() != VDSStatus.NonResponsive && selectedItems.size() == 1 && selectedItem != null && selectedItem.getIsManagement());
    // available only on less than 3.1 Clusters
    if (host != null) {
        boolean isLessThan31 = host.getVdsGroupCompatibilityVersion().compareTo(Version.v3_1) < 0;
        getSetupNetworksCommand().setIsAvailable(!isLessThan31);
        getSaveNetworkConfigCommand().setIsAvailable(true);
        getEditCommand().setIsAvailable(isLessThan31);
        getBondCommand().setIsAvailable(isLessThan31);
        getDetachCommand().setIsAvailable(isLessThan31);
        getEditManagementNetworkCommand().setIsAvailable(isLessThan31);
        setSelectionAvailable(isLessThan31);
        // disable subtab refresh for pre-3.1 clusters, to avoid interfering with row selection
        setIsTimerDisabled(isLessThan31);
        if (isLessThan31) {
            stopRefresh();
        }
    }
}
#method_after
private void updateActionAvailability() {
    VDS host = getEntity();
    VdsNetworkInterface selectedItem = (VdsNetworkInterface) getSelectedItem();
    ArrayList<VdsNetworkInterface> selectedItems = getSelectedItems();
    getEditCommand().setIsExecutionAllowed(host != null && host.getStatus() != VDSStatus.NonResponsive && selectedItem != null && selectedItems.size() == 1 && StringHelper.isNullOrEmpty(selectedItem.getBondName()) && !selectedItem.getIsManagement());
    getBondCommand().setIsExecutionAllowed(host != null && host.getStatus() != VDSStatus.NonResponsive && selectedItems.size() >= 2 && !isAnyBond(selectedItems) && Linq.findAllInterfaceNetworkNameNotEmpty(selectedItems).size() <= 1 && Linq.findAllInterfaceBondNameIsEmpty(selectedItems).size() == selectedItems.size() && Linq.findAllInterfaceVlanIdIsEmpty(selectedItems).size() == selectedItems.size());
    // to bond, selected lines must not have more that 1 networks (vlan or not)
    if (getItems() != null) {
        ArrayList<HostInterfaceLineModel> itemList = (ArrayList<HostInterfaceLineModel>) getItems();
        // total network count cannot be more than 1
        int totalNetworkCount = 0;
        for (HostInterfaceLineModel lineModel : itemList) {
            if (lineModel.getIsSelected()) {
                int lineNetworkCount = lineModel.getVlanSize() + (lineModel.getNetworkName() != null ? 1 : 0);
                if (lineNetworkCount > 1) {
                    // bailout
                    getBondCommand().setIsExecutionAllowed(false);
                    break;
                }
                totalNetworkCount += lineNetworkCount;
                if (totalNetworkCount > 1) {
                    // bailout
                    getBondCommand().setIsExecutionAllowed(false);
                    break;
                }
            }
        }
    }
    getDetachCommand().setIsExecutionAllowed(host != null && host.getStatus() != VDSStatus.NonResponsive && selectedItems.size() == 1 && selectedItem != null && !StringHelper.isNullOrEmpty(selectedItem.getNetworkName()) && !selectedItem.getIsManagement());
    getSaveNetworkConfigCommand().setIsExecutionAllowed(host != null && (host.getNetConfigDirty() == null ? false : host.getNetConfigDirty()));
    getEditManagementNetworkCommand().setIsExecutionAllowed(host != null && host.getStatus() != VDSStatus.NonResponsive && selectedItems.size() == 1 && selectedItem != null && selectedItem.getIsManagement());
    // available only on less than 3.1 Clusters
    if (host != null) {
        boolean isLessThan31 = host.getVdsGroupCompatibilityVersion().compareTo(Version.v3_1) < 0;
        getSetupNetworksCommand().setIsAvailable(!isLessThan31);
        getSaveNetworkConfigCommand().setIsAvailable(true);
        getEditCommand().setIsAvailable(isLessThan31);
        getBondCommand().setIsAvailable(isLessThan31);
        getDetachCommand().setIsAvailable(isLessThan31);
        getEditManagementNetworkCommand().setIsAvailable(isLessThan31);
        setSelectionAvailable(isLessThan31);
        // disable subtab refresh for pre-3.1 clusters, to avoid interfering with row selection
        setIsTimerDisabled(isLessThan31);
        if (isLessThan31) {
            getTimer().stop();
        } else {
            getTimer().start();
        }
    }
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    return Collections.singletonMap(getProblematicVdsId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VDS_FENCE, VdcBllMessages.SAME_ACTION_ON_ENTITY_ALREADY_IN_PROGRESS));
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    return FenceVdsBaseCommand.createFenceExclusiveLocksMap(getProblematicVdsId());
}
#end_block

#method_before
private void executeFenceVdsManuallyAction(final Guid vdsId, String sessionId) {
    FenceVdsManualyParameters fenceVdsManuallyParams = new FenceVdsManualyParameters(false);
    fenceVdsManuallyParams.setStoragePoolId(getVds().getStoragePoolId());
    fenceVdsManuallyParams.setVdsId(vdsId);
    fenceVdsManuallyParams.setSessionId(sessionId);
    // if fencing succeeded, call to reset irs in order to try select new spm
    Backend.getInstance().runInternalAction(VdcActionType.FenceVdsManualy, fenceVdsManuallyParams, getContext());
}
#method_after
private void executeFenceVdsManuallyAction(final Guid vdsId, String sessionId) {
    FenceVdsManualyParameters fenceVdsManuallyParams = new FenceVdsManualyParameters(false);
    fenceVdsManuallyParams.setStoragePoolId(getVds().getStoragePoolId());
    fenceVdsManuallyParams.setVdsId(vdsId);
    fenceVdsManuallyParams.setSessionId(sessionId);
    fenceVdsManuallyParams.setParentCommand(VdcActionType.RestartVds);
    // if fencing succeeded, call to reset irs in order to try select new spm
    Backend.getInstance().runInternalAction(VdcActionType.FenceVdsManualy, fenceVdsManuallyParams, getContext());
}
#end_block

#method_before
private CommandContext getContext() {
    if (commandContext == null) {
        commandContext = new CommandContext(getExecutionContext(), getLock());
    }
    return commandContext;
}
#method_after
private CommandContext getContext() {
    if (commandContext == null) {
        commandContext = new CommandContext(getExecutionContext(), new EngineLock(getExclusiveLocks(), null));
    }
    return commandContext;
}
#end_block

#method_before
private void commitRemoveBricks() {
    if (getConfirmWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().commitRemoveBricksTitle());
    model.setMessage(ConstantsManager.getInstance().getConstants().commitRemoveBricksMessage());
    // $NON-NLS-1$
    model.setHashName("volume_remove_bricks_commit");
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterBrickEntity brick : volumeEntity.getBricks()) {
        if (brick.getAsyncTask() != null && volumeTask != null && brick.getAsyncTask().getTaskId() != null && brick.getAsyncTask().getTaskId().equals(volumeTask.getTaskId()) && volumeTask.getStatus() == JobExecutionStatus.FINISHED) {
            list.add(brick.getQualifiedName());
        }
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OnCommitRemoveBricks", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().close());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#method_after
private void commitRemoveBricks() {
    if (getConfirmWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().commitRemoveBricksTitle());
    model.setMessage(ConstantsManager.getInstance().getConstants().commitRemoveBricksMessage());
    // $NON-NLS-1$
    model.setHashName("volume_remove_bricks_commit");
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterBrickEntity brick : volumeEntity.getBricks()) {
        if (brick.getAsyncTask() != null && volumeTask != null && brick.getAsyncTask().getTaskId() != null && brick.getAsyncTask().getTaskId().equals(volumeTask.getTaskId()) && volumeTask.getStatus() == JobExecutionStatus.FINISHED) {
            list.add(brick.getQualifiedName());
        }
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OnCommitRemoveBricks", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#end_block

#method_before
@Test
public void addPosixNonEmptyVFSType() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    parameters.setStorageServerConnection(newPosixConnection);
    parameters.setVdsId(Guid.Empty);
    doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);
}
#method_after
@Test
public void addPosixNonEmptyVFSType() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    parameters.setStorageServerConnection(newPosixConnection);
    parameters.setVdsId(Guid.Empty);
    doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection, null);
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);
}
#end_block

#method_before
@Test
public void addISCSINonEmptyIqn() {
    StorageServerConnections newISCSIConnection = createISCSIConnection("10.35.16.25", StorageType.ISCSI, "iqn.2013-04.myhat.com:aaa-target1", "user1", "mypassword123");
    parameters.setStorageServerConnection(newISCSIConnection);
    parameters.setVdsId(Guid.Empty);
    doReturn(false).when(command).isConnWithSameDetailsExists(newISCSIConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);
}
#method_after
@Test
public void addISCSINonEmptyIqn() {
    StorageServerConnections newISCSIConnection = createISCSIConnection("10.35.16.25", StorageType.ISCSI, "iqn.2013-04.myhat.com:aaa-target1", "user1", "mypassword123");
    parameters.setStorageServerConnection(newISCSIConnection);
    parameters.setVdsId(Guid.Empty);
    doReturn(false).when(command).isConnWithSameDetailsExists(newISCSIConnection, null);
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);
}
#end_block

#method_before
@Test
public void addExistingConnection() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    parameters.setStorageServerConnection(newPosixConnection);
    parameters.setVdsId(Guid.Empty);
    doReturn(true).when(command).isConnWithSameDetailsExists(newPosixConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS);
}
#method_after
@Test
public void addExistingConnection() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    parameters.setStorageServerConnection(newPosixConnection);
    parameters.setVdsId(Guid.Empty);
    doReturn(true).when(command).isConnWithSameDetailsExists(newPosixConnection, null);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS);
}
#end_block

#method_before
@Test
public void addNewConnectionWithVds() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    newPosixConnection.setid("");
    parameters.setStorageServerConnection(newPosixConnection);
    doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection);
    Pair<Boolean, Integer> connectResult = new Pair(true, 0);
    doReturn(connectResult).when(command).connectHostToStorage();
    doReturn(null).when(command).getConnectionFromDbById(newPosixConnection.getid());
    doNothing().when(command).saveConnection(newPosixConnection);
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, true);
}
#method_after
@Test
public void addNewConnectionWithVds() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    newPosixConnection.setid("");
    parameters.setStorageServerConnection(newPosixConnection);
    doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection, null);
    Pair<Boolean, Integer> connectResult = new Pair(true, 0);
    doReturn(connectResult).when(command).connectHostToStorage();
    doReturn(null).when(command).getConnectionFromDbById(newPosixConnection.getid());
    doNothing().when(command).saveConnection(newPosixConnection);
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, true);
}
#end_block

#method_before
@Test
public void addNewConnectionEmptyVdsId() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    newPosixConnection.setid("");
    parameters.setStorageServerConnection(newPosixConnection);
    parameters.setVdsId(Guid.Empty);
    doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection);
    doReturn(null).when(command).getConnectionFromDbById(newPosixConnection.getid());
    doNothing().when(command).saveConnection(newPosixConnection);
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, true);
}
#method_after
@Test
public void addNewConnectionEmptyVdsId() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    newPosixConnection.setid("");
    parameters.setStorageServerConnection(newPosixConnection);
    parameters.setVdsId(Guid.Empty);
    doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection, null);
    doReturn(null).when(command).getConnectionFromDbById(newPosixConnection.getid());
    doNothing().when(command).saveConnection(newPosixConnection);
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, true);
}
#end_block

#method_before
@Test
public void addNewConnectionNullVdsId() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    newPosixConnection.setid("");
    parameters.setStorageServerConnection(newPosixConnection);
    parameters.setVdsId(null);
    doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection);
    doReturn(null).when(command).getConnectionFromDbById(newPosixConnection.getid());
    doNothing().when(command).saveConnection(newPosixConnection);
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, true);
}
#method_after
@Test
public void addNewConnectionNullVdsId() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    newPosixConnection.setid("");
    parameters.setStorageServerConnection(newPosixConnection);
    parameters.setVdsId(null);
    doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection, null);
    doReturn(null).when(command).getConnectionFromDbById(newPosixConnection.getid());
    doNothing().when(command).saveConnection(newPosixConnection);
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, true);
}
#end_block

#method_before
@Test
public void addNotEmptyIdConnection() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    newPosixConnection.setid(Guid.newGuid().toString());
    parameters.setStorageServerConnection(newPosixConnection);
    parameters.setVdsId(Guid.Empty);
    doReturn(true).when(command).isConnWithSameDetailsExists(newPosixConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY);
}
#method_after
@Test
public void addNotEmptyIdConnection() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    newPosixConnection.setid(Guid.newGuid().toString());
    parameters.setStorageServerConnection(newPosixConnection);
    parameters.setVdsId(Guid.Empty);
    doReturn(true).when(command).isConnWithSameDetailsExists(newPosixConnection, null);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY);
}
#end_block

#method_before
@Test
public void isConnWithSameDetailsExist() {
    StorageServerConnections newISCSIConnection = createISCSIConnection("1.2.3.4", StorageType.ISCSI, "iqn.2013-04.myhat.com:aaa-target1", "user1", "mypassword123");
    StorageServerConnections existingConn = createISCSIConnection("1.2.3.4", StorageType.ISCSI, "iqn.2013-04.myhat.com:aaa-target1", "user1", "mypassword123");
    existingConn.setid(Guid.newGuid().toString());
    List<StorageServerConnections> connections = new ArrayList<>();
    connections.add(existingConn);
    when(storageConnDao.getAllForConnection(newISCSIConnection)).thenReturn(connections);
    boolean isExists = command.isConnWithSameDetailsExists(newISCSIConnection);
    assertTrue(isExists);
}
#method_after
@Test
public void isConnWithSameDetailsExist() {
    StorageServerConnections newISCSIConnection = createISCSIConnection("1.2.3.4", StorageType.ISCSI, "iqn.2013-04.myhat.com:aaa-target1", "user1", "mypassword123");
    StorageServerConnections existingConn = createISCSIConnection("1.2.3.4", StorageType.ISCSI, "iqn.2013-04.myhat.com:aaa-target1", "user1", "mypassword123");
    existingConn.setid(Guid.newGuid().toString());
    List<StorageServerConnections> connections = new ArrayList<>();
    connections.add(existingConn);
    when(storageConnDao.getAllForConnection(newISCSIConnection)).thenReturn(connections);
    boolean isExists = command.isConnWithSameDetailsExists(newISCSIConnection, null);
    assertTrue(isExists);
}
#end_block

#method_before
protected boolean isConnWithSameDetailsExists(StorageServerConnections connection) {
    List<StorageServerConnections> connections = null;
    if (connection.getstorage_type() == StorageType.LOCALFS) {
        Guid storagePoolId = getStoragePoolIdByConnId(connection.getid());
        connections = storagePoolId == null ? Collections.<StorageServerConnections>emptyList() : getStorageConnDao().getAllConnectableStorageSeverConnection(storagePoolId);
    } else if (connection.getstorage_type().isFileDomain()) {
        String connectionField = connection.getconnection();
        connections = getStorageConnDao().getAllForStorage(connectionField);
    } else {
        connections = getStorageConnDao().getAllForConnection(connection);
    }
    boolean isDuplicateConnExists = (connections.size() > 1 || (connections.size() == 1 && !connections.get(0).getid().equalsIgnoreCase(connection.getid())));
    return isDuplicateConnExists;
}
#method_after
protected boolean isConnWithSameDetailsExists(StorageServerConnections connection, Guid storagePoolId) {
    List<StorageServerConnections> connections = null;
    if (connection.getstorage_type() == StorageType.LOCALFS) {
        List<StorageServerConnections> connectionsForPool = storagePoolId == null ? Collections.<StorageServerConnections>emptyList() : getStorageConnDao().getAllConnectableStorageSeverConnection(storagePoolId);
        List<StorageServerConnections> connectionsForPath = getStorageConnDao().getAllForStorage(connection.getconnection());
        connections = (List<StorageServerConnections>) CollectionUtils.intersection(connectionsForPool, connectionsForPath);
    } else if (connection.getstorage_type().isFileDomain()) {
        String connectionField = connection.getconnection();
        connections = getStorageConnDao().getAllForStorage(connectionField);
    } else {
        connections = getStorageConnDao().getAllForConnection(connection);
    }
    boolean isDuplicateConnExists = (connections.size() > 1 || (connections.size() == 1 && !connections.get(0).getid().equalsIgnoreCase(connection.getid())));
    return isDuplicateConnExists;
}
#end_block

#method_before
@Override
public VdsDynamic mapRow(ResultSet rs, int rowNum) throws SQLException {
    VdsDynamic entity = new VdsDynamic();
    entity.setcpu_cores((Integer) rs.getObject("cpu_cores"));
    entity.setCpuThreads((Integer) rs.getObject("cpu_threads"));
    entity.setcpu_model(rs.getString("cpu_model"));
    entity.setcpu_speed_mh(rs.getDouble("cpu_speed_mh"));
    entity.setif_total_speed(rs.getString("if_total_speed"));
    entity.setkvm_enabled((Boolean) rs.getObject("kvm_enabled"));
    entity.setmem_commited((Integer) rs.getObject("mem_commited"));
    entity.setphysical_mem_mb((Integer) rs.getObject("physical_mem_mb"));
    entity.setStatus(VDSStatus.forValue(rs.getInt("status")));
    entity.setId(getGuidDefaultEmpty(rs, "vds_id"));
    entity.setvm_active((Integer) rs.getObject("vm_active"));
    entity.setvm_count(rs.getInt("vm_count"));
    entity.setvms_cores_count(rs.getInt("vms_cores_count"));
    entity.setvm_migrating((Integer) rs.getObject("vm_migrating"));
    entity.setreserved_mem((Integer) rs.getObject("reserved_mem"));
    entity.setguest_overhead(rs.getInt("guest_overhead"));
    entity.setsoftware_version(rs.getString("software_version"));
    entity.setversion_name(rs.getString("version_name"));
    entity.setVersion(new RpmVersion(rs.getString("rpm_version")));
    entity.setbuild_name(rs.getString("build_name"));
    entity.setprevious_status(VDSStatus.forValue(rs.getInt("previous_status")));
    entity.setcpu_flags(rs.getString("cpu_flags"));
    entity.setcpu_over_commit_time_stamp(DbFacadeUtils.fromDate(rs.getTimestamp("cpu_over_commit_time_stamp")));
    entity.setpending_vcpus_count((Integer) rs.getObject("pending_vcpus_count"));
    entity.setpending_vmem_size(rs.getInt("pending_vmem_size"));
    entity.setcpu_sockets((Integer) rs.getObject("cpu_sockets"));
    entity.setnet_config_dirty((Boolean) rs.getObject("net_config_dirty"));
    entity.setsupported_cluster_levels(rs.getString("supported_cluster_levels"));
    entity.setsupported_engines(rs.getString("supported_engines"));
    entity.sethost_os(rs.getString("host_os"));
    entity.setkvm_version(rs.getString("kvm_version"));
    entity.setlibvirt_version(new RpmVersion(rs.getString("libvirt_version")));
    entity.setspice_version(rs.getString("spice_version"));
    entity.setgluster_version(rs.getString("gluster_version"));
    entity.setkernel_version(rs.getString("kernel_version"));
    entity.setIScsiInitiatorName(rs.getString("iscsi_initiator_name"));
    entity.setTransparentHugePagesState(VdsTransparentHugePagesState.forValue(rs.getInt("transparent_hugepages_state")));
    entity.setAnonymousHugePages(rs.getInt("anonymous_hugepages"));
    entity.setHooksStr(rs.getString("hooks"));
    entity.setNonOperationalReason(NonOperationalReason.forValue(rs.getInt("non_operational_reason")));
    entity.setHardwareManufacturer(rs.getString("hw_manufacturer"));
    entity.setHardwareProductName(rs.getString("hw_product_name"));
    entity.setHardwareVersion(rs.getString("hw_version"));
    entity.setHardwareSerialNumber(rs.getString("hw_serial_number"));
    entity.setHardwareUUID(rs.getString("hw_uuid"));
    entity.setHardwareFamily(rs.getString("hw_family"));
    entity.setHBAs(new JsonObjectDeserializer().deserialize(rs.getString("hbas"), HashMap.class));
    return entity;
}
#method_after
@Override
public VdsDynamic mapRow(ResultSet rs, int rowNum) throws SQLException {
    VdsDynamic entity = new VdsDynamic();
    entity.setcpu_cores((Integer) rs.getObject("cpu_cores"));
    entity.setCpuThreads((Integer) rs.getObject("cpu_threads"));
    entity.setcpu_model(rs.getString("cpu_model"));
    entity.setcpu_speed_mh(rs.getDouble("cpu_speed_mh"));
    entity.setif_total_speed(rs.getString("if_total_speed"));
    entity.setkvm_enabled((Boolean) rs.getObject("kvm_enabled"));
    entity.setmem_commited((Integer) rs.getObject("mem_commited"));
    entity.setphysical_mem_mb((Integer) rs.getObject("physical_mem_mb"));
    entity.setStatus(VDSStatus.forValue(rs.getInt("status")));
    entity.setId(getGuidDefaultEmpty(rs, "vds_id"));
    entity.setvm_active((Integer) rs.getObject("vm_active"));
    entity.setvm_count(rs.getInt("vm_count"));
    entity.setvms_cores_count(rs.getInt("vms_cores_count"));
    entity.setvm_migrating((Integer) rs.getObject("vm_migrating"));
    entity.setreserved_mem((Integer) rs.getObject("reserved_mem"));
    entity.setguest_overhead(rs.getInt("guest_overhead"));
    entity.setsoftware_version(rs.getString("software_version"));
    entity.setversion_name(rs.getString("version_name"));
    entity.setVersion(new RpmVersion(rs.getString("rpm_version")));
    entity.setbuild_name(rs.getString("build_name"));
    entity.setprevious_status(VDSStatus.forValue(rs.getInt("previous_status")));
    entity.setcpu_flags(rs.getString("cpu_flags"));
    entity.setcpu_over_commit_time_stamp(DbFacadeUtils.fromDate(rs.getTimestamp("cpu_over_commit_time_stamp")));
    entity.setpending_vcpus_count((Integer) rs.getObject("pending_vcpus_count"));
    entity.setpending_vmem_size(rs.getInt("pending_vmem_size"));
    entity.setcpu_sockets((Integer) rs.getObject("cpu_sockets"));
    entity.setnet_config_dirty((Boolean) rs.getObject("net_config_dirty"));
    entity.setsupported_cluster_levels(rs.getString("supported_cluster_levels"));
    entity.setsupported_engines(rs.getString("supported_engines"));
    entity.sethost_os(rs.getString("host_os"));
    entity.setkvm_version(rs.getString("kvm_version"));
    entity.setlibvirt_version(new RpmVersion(rs.getString("libvirt_version")));
    entity.setspice_version(rs.getString("spice_version"));
    entity.setGlusterVersion(new RpmVersion(rs.getString("gluster_version")));
    entity.setkernel_version(rs.getString("kernel_version"));
    entity.setIScsiInitiatorName(rs.getString("iscsi_initiator_name"));
    entity.setTransparentHugePagesState(VdsTransparentHugePagesState.forValue(rs.getInt("transparent_hugepages_state")));
    entity.setAnonymousHugePages(rs.getInt("anonymous_hugepages"));
    entity.setHooksStr(rs.getString("hooks"));
    entity.setNonOperationalReason(NonOperationalReason.forValue(rs.getInt("non_operational_reason")));
    entity.setHardwareManufacturer(rs.getString("hw_manufacturer"));
    entity.setHardwareProductName(rs.getString("hw_product_name"));
    entity.setHardwareVersion(rs.getString("hw_version"));
    entity.setHardwareSerialNumber(rs.getString("hw_serial_number"));
    entity.setHardwareUUID(rs.getString("hw_uuid"));
    entity.setHardwareFamily(rs.getString("hw_family"));
    entity.setHBAs(new JsonObjectDeserializer().deserialize(rs.getString("hbas"), HashMap.class));
    return entity;
}
#end_block

#method_before
@Override
public void save(VdsDynamic vds) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cpu_cores", vds.getcpu_cores()).addValue("cpu_threads", vds.getCpuThreads()).addValue("cpu_model", vds.getcpu_model()).addValue("cpu_speed_mh", vds.getcpu_speed_mh()).addValue("if_total_speed", vds.getif_total_speed()).addValue("kvm_enabled", vds.getkvm_enabled()).addValue("mem_commited", vds.getmem_commited()).addValue("physical_mem_mb", vds.getphysical_mem_mb()).addValue("status", vds.getStatus()).addValue("vds_id", vds.getId()).addValue("vm_active", vds.getvm_active()).addValue("vm_count", vds.getvm_count()).addValue("vms_cores_count", vds.getvms_cores_count()).addValue("vm_migrating", vds.getvm_migrating()).addValue("reserved_mem", vds.getreserved_mem()).addValue("guest_overhead", vds.getguest_overhead()).addValue("rpm_version", vds.getVersion().getRpmName()).addValue("software_version", vds.getsoftware_version()).addValue("version_name", vds.getversion_name()).addValue("build_name", vds.getbuild_name()).addValue("previous_status", vds.getprevious_status()).addValue("cpu_flags", vds.getcpu_flags()).addValue("cpu_over_commit_time_stamp", vds.getcpu_over_commit_time_stamp()).addValue("pending_vcpus_count", vds.getpending_vcpus_count()).addValue("pending_vmem_size", vds.getpending_vmem_size()).addValue("cpu_sockets", vds.getcpu_sockets()).addValue("net_config_dirty", vds.getnet_config_dirty()).addValue("supported_cluster_levels", vds.getsupported_cluster_levels()).addValue("supported_engines", vds.getsupported_engines()).addValue("host_os", vds.gethost_os()).addValue("kvm_version", vds.getkvm_version()).addValue("libvirt_version", vds.getlibvirt_version().getRpmName()).addValue("spice_version", vds.getspice_version()).addValue("gluster_version", vds.getgluster_version()).addValue("kernel_version", vds.getkernel_version()).addValue("iscsi_initiator_name", vds.getIScsiInitiatorName()).addValue("transparent_hugepages_state", vds.getTransparentHugePagesState().getValue()).addValue("anonymous_hugepages", vds.getAnonymousHugePages()).addValue("hooks", vds.getHooksStr()).addValue("non_operational_reason", vds.getNonOperationalReason().getValue()).addValue("hw_manufacturer", vds.getHardwareManufacturer()).addValue("hw_product_name", vds.getHardwareProductName()).addValue("hw_version", vds.getHardwareVersion()).addValue("hw_serial_number", vds.getHardwareSerialNumber()).addValue("hw_uuid", vds.getHardwareUUID()).addValue("hw_family", vds.getHardwareFamily()).addValue("hbas", new JsonObjectSerializer().serialize(vds.getHBAs())).addValue("supported_emulated_machines", vds.getSupportedEmulatedMachines());
    getCallsHandler().executeModification("InsertVdsDynamic", parameterSource);
}
#method_after
@Override
public void save(VdsDynamic vds) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cpu_cores", vds.getcpu_cores()).addValue("cpu_threads", vds.getCpuThreads()).addValue("cpu_model", vds.getcpu_model()).addValue("cpu_speed_mh", vds.getcpu_speed_mh()).addValue("if_total_speed", vds.getif_total_speed()).addValue("kvm_enabled", vds.getkvm_enabled()).addValue("mem_commited", vds.getmem_commited()).addValue("physical_mem_mb", vds.getphysical_mem_mb()).addValue("status", vds.getStatus()).addValue("vds_id", vds.getId()).addValue("vm_active", vds.getvm_active()).addValue("vm_count", vds.getvm_count()).addValue("vms_cores_count", vds.getvms_cores_count()).addValue("vm_migrating", vds.getvm_migrating()).addValue("reserved_mem", vds.getreserved_mem()).addValue("guest_overhead", vds.getguest_overhead()).addValue("rpm_version", vds.getVersion().getRpmName()).addValue("software_version", vds.getsoftware_version()).addValue("version_name", vds.getversion_name()).addValue("build_name", vds.getbuild_name()).addValue("previous_status", vds.getprevious_status()).addValue("cpu_flags", vds.getcpu_flags()).addValue("cpu_over_commit_time_stamp", vds.getcpu_over_commit_time_stamp()).addValue("pending_vcpus_count", vds.getpending_vcpus_count()).addValue("pending_vmem_size", vds.getpending_vmem_size()).addValue("cpu_sockets", vds.getcpu_sockets()).addValue("net_config_dirty", vds.getnet_config_dirty()).addValue("supported_cluster_levels", vds.getsupported_cluster_levels()).addValue("supported_engines", vds.getsupported_engines()).addValue("host_os", vds.gethost_os()).addValue("kvm_version", vds.getkvm_version()).addValue("libvirt_version", vds.getlibvirt_version().getRpmName()).addValue("spice_version", vds.getspice_version()).addValue("gluster_version", vds.getGlusterVersion().getRpmName()).addValue("kernel_version", vds.getkernel_version()).addValue("iscsi_initiator_name", vds.getIScsiInitiatorName()).addValue("transparent_hugepages_state", vds.getTransparentHugePagesState().getValue()).addValue("anonymous_hugepages", vds.getAnonymousHugePages()).addValue("hooks", vds.getHooksStr()).addValue("non_operational_reason", vds.getNonOperationalReason().getValue()).addValue("hw_manufacturer", vds.getHardwareManufacturer()).addValue("hw_product_name", vds.getHardwareProductName()).addValue("hw_version", vds.getHardwareVersion()).addValue("hw_serial_number", vds.getHardwareSerialNumber()).addValue("hw_uuid", vds.getHardwareUUID()).addValue("hw_family", vds.getHardwareFamily()).addValue("hbas", new JsonObjectSerializer().serialize(vds.getHBAs())).addValue("supported_emulated_machines", vds.getSupportedEmulatedMachines());
    getCallsHandler().executeModification("InsertVdsDynamic", parameterSource);
}
#end_block

#method_before
@Override
public void update(VdsDynamic vds) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cpu_cores", vds.getcpu_cores()).addValue("cpu_threads", vds.getCpuThreads()).addValue("cpu_model", vds.getcpu_model()).addValue("cpu_speed_mh", vds.getcpu_speed_mh()).addValue("if_total_speed", vds.getif_total_speed()).addValue("kvm_enabled", vds.getkvm_enabled()).addValue("mem_commited", vds.getmem_commited()).addValue("physical_mem_mb", vds.getphysical_mem_mb()).addValue("status", vds.getStatus()).addValue("vds_id", vds.getId()).addValue("vm_active", vds.getvm_active()).addValue("vm_count", vds.getvm_count()).addValue("vms_cores_count", vds.getvms_cores_count()).addValue("vm_migrating", vds.getvm_migrating()).addValue("reserved_mem", vds.getreserved_mem()).addValue("guest_overhead", vds.getguest_overhead()).addValue("rpm_version", vds.getVersion().getRpmName()).addValue("software_version", vds.getsoftware_version()).addValue("version_name", vds.getversion_name()).addValue("build_name", vds.getbuild_name()).addValue("previous_status", vds.getprevious_status()).addValue("cpu_flags", vds.getcpu_flags()).addValue("cpu_over_commit_time_stamp", vds.getcpu_over_commit_time_stamp()).addValue("pending_vcpus_count", vds.getpending_vcpus_count()).addValue("pending_vmem_size", vds.getpending_vmem_size()).addValue("cpu_sockets", vds.getcpu_sockets()).addValue("net_config_dirty", vds.getnet_config_dirty()).addValue("supported_cluster_levels", vds.getsupported_cluster_levels()).addValue("supported_engines", vds.getsupported_engines()).addValue("host_os", vds.gethost_os()).addValue("kvm_version", vds.getkvm_version()).addValue("libvirt_version", vds.getlibvirt_version().getRpmName()).addValue("spice_version", vds.getspice_version()).addValue("gluster_version", vds.getgluster_version()).addValue("kernel_version", vds.getkernel_version()).addValue("iscsi_initiator_name", vds.getIScsiInitiatorName()).addValue("transparent_hugepages_state", vds.getTransparentHugePagesState().getValue()).addValue("anonymous_hugepages", vds.getAnonymousHugePages()).addValue("hooks", vds.getHooksStr()).addValue("non_operational_reason", vds.getNonOperationalReason().getValue()).addValue("hw_manufacturer", vds.getHardwareManufacturer()).addValue("hw_product_name", vds.getHardwareProductName()).addValue("hw_version", vds.getHardwareVersion()).addValue("hw_serial_number", vds.getHardwareSerialNumber()).addValue("hw_uuid", vds.getHardwareUUID()).addValue("hw_family", vds.getHardwareFamily()).addValue("hbas", new JsonObjectSerializer().serialize(vds.getHBAs())).addValue("supported_emulated_machines", vds.getSupportedEmulatedMachines());
    getCallsHandler().executeModification("UpdateVdsDynamic", parameterSource);
}
#method_after
@Override
public void update(VdsDynamic vds) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cpu_cores", vds.getcpu_cores()).addValue("cpu_threads", vds.getCpuThreads()).addValue("cpu_model", vds.getcpu_model()).addValue("cpu_speed_mh", vds.getcpu_speed_mh()).addValue("if_total_speed", vds.getif_total_speed()).addValue("kvm_enabled", vds.getkvm_enabled()).addValue("mem_commited", vds.getmem_commited()).addValue("physical_mem_mb", vds.getphysical_mem_mb()).addValue("status", vds.getStatus()).addValue("vds_id", vds.getId()).addValue("vm_active", vds.getvm_active()).addValue("vm_count", vds.getvm_count()).addValue("vms_cores_count", vds.getvms_cores_count()).addValue("vm_migrating", vds.getvm_migrating()).addValue("reserved_mem", vds.getreserved_mem()).addValue("guest_overhead", vds.getguest_overhead()).addValue("rpm_version", vds.getVersion().getRpmName()).addValue("software_version", vds.getsoftware_version()).addValue("version_name", vds.getversion_name()).addValue("build_name", vds.getbuild_name()).addValue("previous_status", vds.getprevious_status()).addValue("cpu_flags", vds.getcpu_flags()).addValue("cpu_over_commit_time_stamp", vds.getcpu_over_commit_time_stamp()).addValue("pending_vcpus_count", vds.getpending_vcpus_count()).addValue("pending_vmem_size", vds.getpending_vmem_size()).addValue("cpu_sockets", vds.getcpu_sockets()).addValue("net_config_dirty", vds.getnet_config_dirty()).addValue("supported_cluster_levels", vds.getsupported_cluster_levels()).addValue("supported_engines", vds.getsupported_engines()).addValue("host_os", vds.gethost_os()).addValue("kvm_version", vds.getkvm_version()).addValue("libvirt_version", vds.getlibvirt_version().getRpmName()).addValue("spice_version", vds.getspice_version()).addValue("gluster_version", vds.getGlusterVersion().getRpmName()).addValue("kernel_version", vds.getkernel_version()).addValue("iscsi_initiator_name", vds.getIScsiInitiatorName()).addValue("transparent_hugepages_state", vds.getTransparentHugePagesState().getValue()).addValue("anonymous_hugepages", vds.getAnonymousHugePages()).addValue("hooks", vds.getHooksStr()).addValue("non_operational_reason", vds.getNonOperationalReason().getValue()).addValue("hw_manufacturer", vds.getHardwareManufacturer()).addValue("hw_product_name", vds.getHardwareProductName()).addValue("hw_version", vds.getHardwareVersion()).addValue("hw_serial_number", vds.getHardwareSerialNumber()).addValue("hw_uuid", vds.getHardwareUUID()).addValue("hw_family", vds.getHardwareFamily()).addValue("hbas", new JsonObjectSerializer().serialize(vds.getHBAs())).addValue("supported_emulated_machines", vds.getSupportedEmulatedMachines());
    getCallsHandler().executeModification("UpdateVdsDynamic", parameterSource);
}
#end_block

#method_before
public String getGlusterVersion() {
    return glusterVersion;
}
#method_after
public RpmVersion getGlusterVersion() {
    return glusterVersion;
}
#end_block

#method_before
public void setGlusterVersion(String value) {
    if (this.glusterVersion == null || !this.glusterVersion.equals(value)) {
        this.glusterVersion = value;
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("GlusterVersion"));
    }
}
#method_after
public void setGlusterVersion(RpmVersion value) {
    if (Version.OpInequality(glusterVersion, value)) {
        glusterVersion = value;
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("glusterVersion"));
    }
}
#end_block

#method_before
@Override
public VDS mapRow(final ResultSet rs, final int rowNum) throws SQLException {
    final VDS entity = new VDS();
    entity.setId(getGuidDefaultEmpty(rs, "vds_id"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVdsName(rs.getString("vds_name"));
    entity.setComment(rs.getString("free_text_comment"));
    entity.setManagementIp(rs.getString("ip"));
    entity.setUniqueId(rs.getString("vds_unique_id"));
    entity.setServerSslEnabled(rs.getBoolean("server_SSL_enabled"));
    entity.setHostName(rs.getString("host_name"));
    entity.setPort(rs.getInt("port"));
    entity.setSshPort(rs.getInt("ssh_port"));
    entity.setSshUsername(rs.getString("ssh_username"));
    entity.setStatus(VDSStatus.forValue(rs.getInt("status")));
    entity.setCpuCores((Integer) rs.getObject("cpu_cores"));
    entity.setCpuThreads((Integer) rs.getObject("cpu_threads"));
    entity.setCpuModel(rs.getString("cpu_model"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSpeedMh(rs.getDouble("cpu_speed_mh"));
    entity.setIfTotalSpeed(rs.getString("if_total_speed"));
    entity.setKvmEnabled((Boolean) rs.getObject("kvm_enabled"));
    entity.setPhysicalMemMb((Integer) rs.getObject("physical_mem_mb"));
    entity.setCpuIdle(rs.getDouble("cpu_idle"));
    entity.setCpuLoad(rs.getDouble("cpu_load"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setMemCommited((Integer) rs.getObject("mem_commited"));
    entity.setVmActive((Integer) rs.getObject("vm_active"));
    entity.setVmCount((Integer) rs.getObject("vm_count"));
    entity.setVmsCoresCount((Integer) rs.getObject("vms_cores_count"));
    entity.setVmMigrating((Integer) rs.getObject("vm_migrating"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setReservedMem((Integer) rs.getObject("reserved_mem"));
    entity.setGuestOverhead((Integer) rs.getObject("guest_overhead"));
    entity.setVersion(new RpmVersion(rs.getString("rpm_version")));
    entity.setSoftwareVersion(rs.getString("software_version"));
    entity.setVersionName(rs.getString("version_name"));
    entity.setPreviousStatus(VDSStatus.forValue(rs.getInt("previous_status")));
    entity.setMemAvailable(rs.getLong("mem_available"));
    entity.setMemShared(rs.getLong("mem_shared"));
    entity.setVdsType(VDSType.forValue(rs.getInt("vds_type")));
    entity.setCpuFlags(rs.getString("cpu_flags"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setPendingVcpusCount((Integer) rs.getObject("pending_vcpus_count"));
    entity.setCpuOverCommitTimestamp(DbFacadeUtils.fromDate(rs.getTimestamp("cpu_over_commit_time_stamp")));
    entity.setPendingVmemSize(rs.getInt("pending_vmem_size"));
    entity.setVdsStrength(rs.getInt("vds_strength"));
    entity.setMaxVdsMemoryOverCommit(rs.getInt("max_vds_memory_over_commit"));
    entity.setCpuSockets((Integer) rs.getObject("cpu_sockets"));
    entity.setVdsSpmId((Integer) rs.getObject("vds_spm_id"));
    entity.setNetConfigDirty((Boolean) rs.getObject("net_config_dirty"));
    entity.setPmType(rs.getString("pm_type"));
    entity.setPmUser(rs.getString("pm_user"));
    entity.setPmPassword(DbFacadeUtils.decryptPassword(rs.getString("pm_password")));
    entity.setPmPort((Integer) rs.getObject("pm_port"));
    entity.setPmOptions(rs.getString("pm_options"));
    entity.setpm_enabled(rs.getBoolean("pm_enabled"));
    entity.setPmProxyPreferences(rs.getString("pm_proxy_preferences"));
    entity.setPmSecondaryIp((rs.getString("pm_secondary_ip")));
    entity.setPmSecondaryType(rs.getString("pm_secondary_type"));
    entity.setPmSecondaryUser(rs.getString("pm_secondary_user"));
    entity.setPmSecondaryPassword(DbFacadeUtils.decryptPassword(rs.getString("pm_secondary_password")));
    entity.setPmSecondaryPort((Integer) rs.getObject("pm_secondary_port"));
    entity.setPmSecondaryOptions(rs.getString("pm_secondary_options"));
    entity.setPmSecondaryConcurrent(rs.getBoolean("pm_secondary_concurrent"));
    entity.setSpmStatus(VdsSpmStatus.forValue(rs.getInt("spm_status")));
    entity.setSwapFree(rs.getLong("swap_free"));
    entity.setSwapTotal(rs.getLong("swap_total"));
    entity.setKsmCpuPercent((Integer) rs.getObject("ksm_cpu_percent"));
    entity.setKsmPages(rs.getLong("ksm_pages"));
    entity.setKsmState((Boolean) rs.getObject("ksm_state"));
    entity.setSupportedClusterLevels(rs.getString("supported_cluster_levels"));
    entity.setSupportedEngines(rs.getString("supported_engines"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setVdsGroupSupportsVirtService(rs.getBoolean("vds_group_virt_service"));
    entity.setVdsGroupSupportsGlusterService(rs.getBoolean("vds_group_gluster_service"));
    entity.setHostOs(rs.getString("host_os"));
    entity.setGlusterVersion(rs.getString("gluster_version"));
    entity.setKvmVersion(rs.getString("kvm_version"));
    entity.setLibvirtVersion(new RpmVersion(rs.getString("libvirt_version")));
    entity.setSpiceVersion(rs.getString("spice_version"));
    entity.setKernelVersion(rs.getString("kernel_version"));
    entity.setIScsiInitiatorName(rs.getString("iscsi_initiator_name"));
    entity.setTransparentHugePagesState(VdsTransparentHugePagesState.forValue(rs.getInt("transparent_hugepages_state")));
    entity.setAnonymousHugePages(rs.getInt("anonymous_hugepages"));
    entity.setHooksStr(rs.getString("hooks"));
    entity.setNonOperationalReason(NonOperationalReason.forValue(rs.getInt("non_operational_reason")));
    entity.setOtpValidity(rs.getLong("otp_validity"));
    entity.setVdsSpmPriority(rs.getInt("vds_spm_priority"));
    entity.setAutoRecoverable(rs.getBoolean("recoverable"));
    entity.setSshKeyFingerprint(rs.getString("sshKeyFingerprint"));
    entity.setHardwareManufacturer(rs.getString("hw_manufacturer"));
    entity.setHardwareProductName(rs.getString("hw_product_name"));
    entity.setHardwareVersion(rs.getString("hw_version"));
    entity.setHardwareSerialNumber(rs.getString("hw_serial_number"));
    entity.setHardwareUUID(rs.getString("hw_uuid"));
    entity.setHardwareFamily(rs.getString("hw_family"));
    entity.setHBAs(new JsonObjectDeserializer().deserialize(rs.getString("hbas"), HashMap.class));
    entity.setConsoleAddress(rs.getString("console_address"));
    entity.setSupportedEmulatedMachines(rs.getString("supported_emulated_machines"));
    entity.calculateFreeVirtualMemory();
    return entity;
}
#method_after
@Override
public VDS mapRow(final ResultSet rs, final int rowNum) throws SQLException {
    final VDS entity = new VDS();
    entity.setId(getGuidDefaultEmpty(rs, "vds_id"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVdsName(rs.getString("vds_name"));
    entity.setComment(rs.getString("free_text_comment"));
    entity.setManagementIp(rs.getString("ip"));
    entity.setUniqueId(rs.getString("vds_unique_id"));
    entity.setServerSslEnabled(rs.getBoolean("server_SSL_enabled"));
    entity.setHostName(rs.getString("host_name"));
    entity.setPort(rs.getInt("port"));
    entity.setSshPort(rs.getInt("ssh_port"));
    entity.setSshUsername(rs.getString("ssh_username"));
    entity.setStatus(VDSStatus.forValue(rs.getInt("status")));
    entity.setCpuCores((Integer) rs.getObject("cpu_cores"));
    entity.setCpuThreads((Integer) rs.getObject("cpu_threads"));
    entity.setCpuModel(rs.getString("cpu_model"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSpeedMh(rs.getDouble("cpu_speed_mh"));
    entity.setIfTotalSpeed(rs.getString("if_total_speed"));
    entity.setKvmEnabled((Boolean) rs.getObject("kvm_enabled"));
    entity.setPhysicalMemMb((Integer) rs.getObject("physical_mem_mb"));
    entity.setCpuIdle(rs.getDouble("cpu_idle"));
    entity.setCpuLoad(rs.getDouble("cpu_load"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setMemCommited((Integer) rs.getObject("mem_commited"));
    entity.setVmActive((Integer) rs.getObject("vm_active"));
    entity.setVmCount((Integer) rs.getObject("vm_count"));
    entity.setVmsCoresCount((Integer) rs.getObject("vms_cores_count"));
    entity.setVmMigrating((Integer) rs.getObject("vm_migrating"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setReservedMem((Integer) rs.getObject("reserved_mem"));
    entity.setGuestOverhead((Integer) rs.getObject("guest_overhead"));
    entity.setVersion(new RpmVersion(rs.getString("rpm_version")));
    entity.setSoftwareVersion(rs.getString("software_version"));
    entity.setVersionName(rs.getString("version_name"));
    entity.setPreviousStatus(VDSStatus.forValue(rs.getInt("previous_status")));
    entity.setMemAvailable(rs.getLong("mem_available"));
    entity.setMemShared(rs.getLong("mem_shared"));
    entity.setVdsType(VDSType.forValue(rs.getInt("vds_type")));
    entity.setCpuFlags(rs.getString("cpu_flags"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setPendingVcpusCount((Integer) rs.getObject("pending_vcpus_count"));
    entity.setCpuOverCommitTimestamp(DbFacadeUtils.fromDate(rs.getTimestamp("cpu_over_commit_time_stamp")));
    entity.setPendingVmemSize(rs.getInt("pending_vmem_size"));
    entity.setVdsStrength(rs.getInt("vds_strength"));
    entity.setMaxVdsMemoryOverCommit(rs.getInt("max_vds_memory_over_commit"));
    entity.setCpuSockets((Integer) rs.getObject("cpu_sockets"));
    entity.setVdsSpmId((Integer) rs.getObject("vds_spm_id"));
    entity.setNetConfigDirty((Boolean) rs.getObject("net_config_dirty"));
    entity.setPmType(rs.getString("pm_type"));
    entity.setPmUser(rs.getString("pm_user"));
    entity.setPmPassword(DbFacadeUtils.decryptPassword(rs.getString("pm_password")));
    entity.setPmPort((Integer) rs.getObject("pm_port"));
    entity.setPmOptions(rs.getString("pm_options"));
    entity.setpm_enabled(rs.getBoolean("pm_enabled"));
    entity.setPmProxyPreferences(rs.getString("pm_proxy_preferences"));
    entity.setPmSecondaryIp((rs.getString("pm_secondary_ip")));
    entity.setPmSecondaryType(rs.getString("pm_secondary_type"));
    entity.setPmSecondaryUser(rs.getString("pm_secondary_user"));
    entity.setPmSecondaryPassword(DbFacadeUtils.decryptPassword(rs.getString("pm_secondary_password")));
    entity.setPmSecondaryPort((Integer) rs.getObject("pm_secondary_port"));
    entity.setPmSecondaryOptions(rs.getString("pm_secondary_options"));
    entity.setPmSecondaryConcurrent(rs.getBoolean("pm_secondary_concurrent"));
    entity.setSpmStatus(VdsSpmStatus.forValue(rs.getInt("spm_status")));
    entity.setSwapFree(rs.getLong("swap_free"));
    entity.setSwapTotal(rs.getLong("swap_total"));
    entity.setKsmCpuPercent((Integer) rs.getObject("ksm_cpu_percent"));
    entity.setKsmPages(rs.getLong("ksm_pages"));
    entity.setKsmState((Boolean) rs.getObject("ksm_state"));
    entity.setSupportedClusterLevels(rs.getString("supported_cluster_levels"));
    entity.setSupportedEngines(rs.getString("supported_engines"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setVdsGroupSupportsVirtService(rs.getBoolean("vds_group_virt_service"));
    entity.setVdsGroupSupportsGlusterService(rs.getBoolean("vds_group_gluster_service"));
    entity.setHostOs(rs.getString("host_os"));
    entity.setGlusterVersion(new RpmVersion(rs.getString("gluster_version")));
    entity.setKvmVersion(rs.getString("kvm_version"));
    entity.setLibvirtVersion(new RpmVersion(rs.getString("libvirt_version")));
    entity.setSpiceVersion(rs.getString("spice_version"));
    entity.setKernelVersion(rs.getString("kernel_version"));
    entity.setIScsiInitiatorName(rs.getString("iscsi_initiator_name"));
    entity.setTransparentHugePagesState(VdsTransparentHugePagesState.forValue(rs.getInt("transparent_hugepages_state")));
    entity.setAnonymousHugePages(rs.getInt("anonymous_hugepages"));
    entity.setHooksStr(rs.getString("hooks"));
    entity.setNonOperationalReason(NonOperationalReason.forValue(rs.getInt("non_operational_reason")));
    entity.setOtpValidity(rs.getLong("otp_validity"));
    entity.setVdsSpmPriority(rs.getInt("vds_spm_priority"));
    entity.setAutoRecoverable(rs.getBoolean("recoverable"));
    entity.setSshKeyFingerprint(rs.getString("sshKeyFingerprint"));
    entity.setHardwareManufacturer(rs.getString("hw_manufacturer"));
    entity.setHardwareProductName(rs.getString("hw_product_name"));
    entity.setHardwareVersion(rs.getString("hw_version"));
    entity.setHardwareSerialNumber(rs.getString("hw_serial_number"));
    entity.setHardwareUUID(rs.getString("hw_uuid"));
    entity.setHardwareFamily(rs.getString("hw_family"));
    entity.setHBAs(new JsonObjectDeserializer().deserialize(rs.getString("hbas"), HashMap.class));
    entity.setConsoleAddress(rs.getString("console_address"));
    entity.setSupportedEmulatedMachines(rs.getString("supported_emulated_machines"));
    entity.setHighlyAvailableScore(rs.getInt("ha_score"));
    entity.calculateFreeVirtualMemory();
    return entity;
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((_supportedClusterVersionsSet == null) ? 0 : _supportedClusterVersionsSet.hashCode());
    result = prime * result + ((_supportedENGINESVersionsSet == null) ? 0 : _supportedENGINESVersionsSet.hashCode());
    result = prime * result + anonymousHugePages;
    result = prime * result + ((buildName == null) ? 0 : buildName.hashCode());
    result = prime * result + ((cpu_cores == null) ? 0 : cpu_cores.hashCode());
    result = prime * result + ((cpuThreads == null) ? 0 : cpuThreads.hashCode());
    result = prime * result + ((cpu_flags == null) ? 0 : cpu_flags.hashCode());
    result = prime * result + ((cpu_model == null) ? 0 : cpu_model.hashCode());
    result = prime * result + ((cpu_over_commit_time_stamp == null) ? 0 : cpu_over_commit_time_stamp.hashCode());
    result = prime * result + ((cpu_sockets == null) ? 0 : cpu_sockets.hashCode());
    result = prime * result + ((cpu_speed_mh == null) ? 0 : cpu_speed_mh.hashCode());
    result = prime * result + ((guest_overhead == null) ? 0 : guest_overhead.hashCode());
    result = prime * result + ((hooksStr == null) ? 0 : hooksStr.hashCode());
    result = prime * result + ((host_os == null) ? 0 : host_os.hashCode());
    result = prime * result + ((iScsiInitiatorName == null) ? 0 : iScsiInitiatorName.hashCode());
    result = prime * result + ((if_total_speed == null) ? 0 : if_total_speed.hashCode());
    result = prime * result + ((kernel_version == null) ? 0 : kernel_version.hashCode());
    result = prime * result + ((kvm_enabled == null) ? 0 : kvm_enabled.hashCode());
    result = prime * result + ((kvm_version == null) ? 0 : kvm_version.hashCode());
    result = prime * result + ((libvirt_version == null) ? 0 : libvirt_version.hashCode());
    result = prime * result + ((rpmVersion == null) ? 0 : rpmVersion.hashCode());
    result = prime * result + ((mem_commited == null) ? 0 : mem_commited.hashCode());
    result = prime * result + ((net_config_dirty == null) ? 0 : net_config_dirty.hashCode());
    result = prime * result + ((nonOperationalReason == null) ? 0 : nonOperationalReason.hashCode());
    result = prime * result + ((pending_vcpus_count == null) ? 0 : pending_vcpus_count.hashCode());
    result = prime * result + ((pending_vmem_size == null) ? 0 : pending_vmem_size.hashCode());
    result = prime * result + ((physical_mem_mb == null) ? 0 : physical_mem_mb.hashCode());
    result = prime * result + ((previous_status == null) ? 0 : previous_status.hashCode());
    result = prime * result + ((reserved_mem == null) ? 0 : reserved_mem.hashCode());
    result = prime * result + ((softwareVersion == null) ? 0 : softwareVersion.hashCode());
    result = prime * result + ((spice_version == null) ? 0 : spice_version.hashCode());
    result = prime * result + ((gluster_version == null) ? 0 : gluster_version.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    result = prime * result + ((supported_cluster_levels == null) ? 0 : supported_cluster_levels.hashCode());
    result = prime * result + ((supported_engines == null) ? 0 : supported_engines.hashCode());
    result = prime * result + ((transparentHugePagesState == null) ? 0 : transparentHugePagesState.hashCode());
    result = prime * result + ((versionName == null) ? 0 : versionName.hashCode());
    result = prime * result + ((vm_active == null) ? 0 : vm_active.hashCode());
    result = prime * result + vm_count;
    result = prime * result + ((vm_migrating == null) ? 0 : vm_migrating.hashCode());
    result = prime * result + ((vms_cores_count == null) ? 0 : vms_cores_count.hashCode());
    result = prime * result + ((hwManufacturer == null) ? 0 : hwManufacturer.hashCode());
    result = prime * result + ((hwProductName == null) ? 0 : hwProductName.hashCode());
    result = prime * result + ((hwVersion == null) ? 0 : hwVersion.hashCode());
    result = prime * result + ((hwSerialNumber == null) ? 0 : hwSerialNumber.hashCode());
    result = prime * result + ((hwUUID == null) ? 0 : hwUUID.hashCode());
    result = prime * result + ((hwFamily == null) ? 0 : hwFamily.hashCode());
    result = prime * result + ((HBAs == null) ? 0 : HBAs.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((_supportedClusterVersionsSet == null) ? 0 : _supportedClusterVersionsSet.hashCode());
    result = prime * result + ((_supportedENGINESVersionsSet == null) ? 0 : _supportedENGINESVersionsSet.hashCode());
    result = prime * result + anonymousHugePages;
    result = prime * result + ((buildName == null) ? 0 : buildName.hashCode());
    result = prime * result + ((cpu_cores == null) ? 0 : cpu_cores.hashCode());
    result = prime * result + ((cpuThreads == null) ? 0 : cpuThreads.hashCode());
    result = prime * result + ((cpu_flags == null) ? 0 : cpu_flags.hashCode());
    result = prime * result + ((cpu_model == null) ? 0 : cpu_model.hashCode());
    result = prime * result + ((cpu_over_commit_time_stamp == null) ? 0 : cpu_over_commit_time_stamp.hashCode());
    result = prime * result + ((cpu_sockets == null) ? 0 : cpu_sockets.hashCode());
    result = prime * result + ((cpu_speed_mh == null) ? 0 : cpu_speed_mh.hashCode());
    result = prime * result + ((guest_overhead == null) ? 0 : guest_overhead.hashCode());
    result = prime * result + ((hooksStr == null) ? 0 : hooksStr.hashCode());
    result = prime * result + ((host_os == null) ? 0 : host_os.hashCode());
    result = prime * result + ((iScsiInitiatorName == null) ? 0 : iScsiInitiatorName.hashCode());
    result = prime * result + ((if_total_speed == null) ? 0 : if_total_speed.hashCode());
    result = prime * result + ((kernel_version == null) ? 0 : kernel_version.hashCode());
    result = prime * result + ((kvm_enabled == null) ? 0 : kvm_enabled.hashCode());
    result = prime * result + ((kvm_version == null) ? 0 : kvm_version.hashCode());
    result = prime * result + ((libvirt_version == null) ? 0 : libvirt_version.hashCode());
    result = prime * result + ((rpmVersion == null) ? 0 : rpmVersion.hashCode());
    result = prime * result + ((mem_commited == null) ? 0 : mem_commited.hashCode());
    result = prime * result + ((net_config_dirty == null) ? 0 : net_config_dirty.hashCode());
    result = prime * result + ((nonOperationalReason == null) ? 0 : nonOperationalReason.hashCode());
    result = prime * result + ((pending_vcpus_count == null) ? 0 : pending_vcpus_count.hashCode());
    result = prime * result + ((pending_vmem_size == null) ? 0 : pending_vmem_size.hashCode());
    result = prime * result + ((physical_mem_mb == null) ? 0 : physical_mem_mb.hashCode());
    result = prime * result + ((previous_status == null) ? 0 : previous_status.hashCode());
    result = prime * result + ((reserved_mem == null) ? 0 : reserved_mem.hashCode());
    result = prime * result + ((softwareVersion == null) ? 0 : softwareVersion.hashCode());
    result = prime * result + ((spice_version == null) ? 0 : spice_version.hashCode());
    result = prime * result + ((glusterVersion == null) ? 0 : glusterVersion.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    result = prime * result + ((supported_cluster_levels == null) ? 0 : supported_cluster_levels.hashCode());
    result = prime * result + ((supported_engines == null) ? 0 : supported_engines.hashCode());
    result = prime * result + ((transparentHugePagesState == null) ? 0 : transparentHugePagesState.hashCode());
    result = prime * result + ((versionName == null) ? 0 : versionName.hashCode());
    result = prime * result + ((vm_active == null) ? 0 : vm_active.hashCode());
    result = prime * result + vm_count;
    result = prime * result + ((vm_migrating == null) ? 0 : vm_migrating.hashCode());
    result = prime * result + ((vms_cores_count == null) ? 0 : vms_cores_count.hashCode());
    result = prime * result + ((hwManufacturer == null) ? 0 : hwManufacturer.hashCode());
    result = prime * result + ((hwProductName == null) ? 0 : hwProductName.hashCode());
    result = prime * result + ((hwVersion == null) ? 0 : hwVersion.hashCode());
    result = prime * result + ((hwSerialNumber == null) ? 0 : hwSerialNumber.hashCode());
    result = prime * result + ((hwUUID == null) ? 0 : hwUUID.hashCode());
    result = prime * result + ((hwFamily == null) ? 0 : hwFamily.hashCode());
    result = prime * result + ((HBAs == null) ? 0 : HBAs.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VdsDynamic other = (VdsDynamic) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(_supportedClusterVersionsSet, other._supportedClusterVersionsSet) && ObjectUtils.objectsEqual(_supportedENGINESVersionsSet, other._supportedENGINESVersionsSet) && anonymousHugePages == other.anonymousHugePages && ObjectUtils.objectsEqual(buildName, other.buildName) && ObjectUtils.objectsEqual(cpu_cores, other.cpu_cores) && ObjectUtils.objectsEqual(cpuThreads, other.cpuThreads) && ObjectUtils.objectsEqual(cpu_flags, other.cpu_flags) && ObjectUtils.objectsEqual(cpu_model, other.cpu_model) && ObjectUtils.objectsEqual(cpu_over_commit_time_stamp, other.cpu_over_commit_time_stamp) && ObjectUtils.objectsEqual(cpu_sockets, other.cpu_sockets) && ObjectUtils.objectsEqual(cpu_speed_mh, other.cpu_speed_mh) && ObjectUtils.objectsEqual(guest_overhead, other.guest_overhead) && ObjectUtils.objectsEqual(hooksStr, other.hooksStr) && ObjectUtils.objectsEqual(host_os, other.host_os) && ObjectUtils.objectsEqual(iScsiInitiatorName, other.iScsiInitiatorName) && ObjectUtils.objectsEqual(if_total_speed, other.if_total_speed) && ObjectUtils.objectsEqual(kernel_version, other.kernel_version) && ObjectUtils.objectsEqual(kvm_enabled, other.kvm_enabled) && ObjectUtils.objectsEqual(kvm_version, other.kvm_version) && ObjectUtils.objectsEqual(libvirt_version, other.libvirt_version) && ObjectUtils.objectsEqual(rpmVersion, other.rpmVersion) && ObjectUtils.objectsEqual(mem_commited, other.mem_commited) && ObjectUtils.objectsEqual(net_config_dirty, other.net_config_dirty) && nonOperationalReason == other.nonOperationalReason && ObjectUtils.objectsEqual(pending_vcpus_count, other.pending_vcpus_count) && ObjectUtils.objectsEqual(pending_vmem_size, other.pending_vmem_size) && ObjectUtils.objectsEqual(physical_mem_mb, other.physical_mem_mb) && previous_status == other.previous_status && ObjectUtils.objectsEqual(reserved_mem, other.reserved_mem) && ObjectUtils.objectsEqual(getsoftware_version(), other.getsoftware_version()) && ObjectUtils.objectsEqual(spice_version, other.spice_version) && ObjectUtils.objectsEqual(gluster_version, other.gluster_version) && status == other.status && ObjectUtils.objectsEqual(supported_cluster_levels, other.supported_cluster_levels) && ObjectUtils.objectsEqual(supported_engines, other.supported_engines) && transparentHugePagesState == other.transparentHugePagesState && ObjectUtils.objectsEqual(versionName, other.versionName) && ObjectUtils.objectsEqual(vm_active, other.vm_active) && vm_count == other.vm_count && ObjectUtils.objectsEqual(vm_migrating, other.vm_migrating) && ObjectUtils.objectsEqual(vms_cores_count, other.vms_cores_count) && ObjectUtils.objectsEqual(hwManufacturer, other.hwManufacturer) && ObjectUtils.objectsEqual(hwProductName, other.hwProductName) && ObjectUtils.objectsEqual(hwVersion, other.hwVersion) && ObjectUtils.objectsEqual(hwSerialNumber, other.hwSerialNumber) && ObjectUtils.objectsEqual(hwUUID, other.hwUUID) && ObjectUtils.objectsEqual(hwFamily, other.hwFamily) && ObjectUtils.objectsEqual(HBAs, other.HBAs) && ObjectUtils.objectsEqual(supportedEmulatedMachines, other.supportedEmulatedMachines));
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VdsDynamic other = (VdsDynamic) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(_supportedClusterVersionsSet, other._supportedClusterVersionsSet) && ObjectUtils.objectsEqual(_supportedENGINESVersionsSet, other._supportedENGINESVersionsSet) && anonymousHugePages == other.anonymousHugePages && ObjectUtils.objectsEqual(buildName, other.buildName) && ObjectUtils.objectsEqual(cpu_cores, other.cpu_cores) && ObjectUtils.objectsEqual(cpuThreads, other.cpuThreads) && ObjectUtils.objectsEqual(cpu_flags, other.cpu_flags) && ObjectUtils.objectsEqual(cpu_model, other.cpu_model) && ObjectUtils.objectsEqual(cpu_over_commit_time_stamp, other.cpu_over_commit_time_stamp) && ObjectUtils.objectsEqual(cpu_sockets, other.cpu_sockets) && ObjectUtils.objectsEqual(cpu_speed_mh, other.cpu_speed_mh) && ObjectUtils.objectsEqual(guest_overhead, other.guest_overhead) && ObjectUtils.objectsEqual(hooksStr, other.hooksStr) && ObjectUtils.objectsEqual(host_os, other.host_os) && ObjectUtils.objectsEqual(iScsiInitiatorName, other.iScsiInitiatorName) && ObjectUtils.objectsEqual(if_total_speed, other.if_total_speed) && ObjectUtils.objectsEqual(kernel_version, other.kernel_version) && ObjectUtils.objectsEqual(kvm_enabled, other.kvm_enabled) && ObjectUtils.objectsEqual(kvm_version, other.kvm_version) && ObjectUtils.objectsEqual(libvirt_version, other.libvirt_version) && ObjectUtils.objectsEqual(rpmVersion, other.rpmVersion) && ObjectUtils.objectsEqual(mem_commited, other.mem_commited) && ObjectUtils.objectsEqual(net_config_dirty, other.net_config_dirty) && nonOperationalReason == other.nonOperationalReason && ObjectUtils.objectsEqual(pending_vcpus_count, other.pending_vcpus_count) && ObjectUtils.objectsEqual(pending_vmem_size, other.pending_vmem_size) && ObjectUtils.objectsEqual(physical_mem_mb, other.physical_mem_mb) && previous_status == other.previous_status && ObjectUtils.objectsEqual(reserved_mem, other.reserved_mem) && ObjectUtils.objectsEqual(getsoftware_version(), other.getsoftware_version()) && ObjectUtils.objectsEqual(spice_version, other.spice_version) && ObjectUtils.objectsEqual(glusterVersion, other.glusterVersion) && status == other.status && ObjectUtils.objectsEqual(supported_cluster_levels, other.supported_cluster_levels) && ObjectUtils.objectsEqual(supported_engines, other.supported_engines) && transparentHugePagesState == other.transparentHugePagesState && ObjectUtils.objectsEqual(versionName, other.versionName) && ObjectUtils.objectsEqual(vm_active, other.vm_active) && vm_count == other.vm_count && ObjectUtils.objectsEqual(vm_migrating, other.vm_migrating) && ObjectUtils.objectsEqual(vms_cores_count, other.vms_cores_count) && ObjectUtils.objectsEqual(hwManufacturer, other.hwManufacturer) && ObjectUtils.objectsEqual(hwProductName, other.hwProductName) && ObjectUtils.objectsEqual(hwVersion, other.hwVersion) && ObjectUtils.objectsEqual(hwSerialNumber, other.hwSerialNumber) && ObjectUtils.objectsEqual(hwUUID, other.hwUUID) && ObjectUtils.objectsEqual(hwFamily, other.hwFamily) && ObjectUtils.objectsEqual(HBAs, other.HBAs) && ObjectUtils.objectsEqual(supportedEmulatedMachines, other.supportedEmulatedMachines));
}
#end_block

#method_before
public String getGlusterVersion() {
    return this.mVdsDynamic.getgluster_version();
}
#method_after
public RpmVersion getGlusterVersion() {
    return this.mVdsDynamic.getGlusterVersion();
}
#end_block

#method_before
public void setGlusterVersion(String value) {
    this.mVdsDynamic.setgluster_version(value);
}
#method_after
public void setGlusterVersion(RpmVersion value) {
    this.mVdsDynamic.setGlusterVersion(value);
}
#end_block

#method_before
private static void UpdatePackagesVersions(VDS vds, Map<String, Object> xmlRpcStruct) {
    vds.setVersionName(AssignStringValue(xmlRpcStruct, VdsProperties.version_name));
    vds.setSoftwareVersion(AssignStringValue(xmlRpcStruct, VdsProperties.software_version));
    vds.setBuildName(AssignStringValue(xmlRpcStruct, VdsProperties.build_name));
    if (xmlRpcStruct.containsKey(VdsProperties.host_os)) {
        vds.setHostOs(GetPackageVersionFormated((Map<String, Object>) xmlRpcStruct.get(VdsProperties.host_os), true));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.packages)) {
        // release.. of a package)
        for (Object hostPackageMap : (Object[]) xmlRpcStruct.get(VdsProperties.packages)) {
            Map<String, Object> hostPackage = (Map<String, Object>) hostPackageMap;
            String packageName = AssignStringValue(hostPackage, VdsProperties.package_name);
            if (VdsProperties.kvmPackageName.equals(packageName)) {
                vds.setKvmVersion(GetPackageVersionFormated(hostPackage, false));
            } else if (VdsProperties.spicePackageName.equals(packageName)) {
                vds.setSpiceVersion(GetPackageVersionFormated(hostPackage, false));
            } else if (VdsProperties.kernelPackageName.equals(packageName)) {
                vds.setKernelVersion(GetPackageVersionFormated(hostPackage, false));
            }
        }
    } else if (xmlRpcStruct.containsKey(VdsProperties.packages2)) {
        Map<String, Object> packages = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.packages2);
        if (packages.containsKey(VdsProperties.vdsmPackageName)) {
            Map<String, Object> vdsm = (Map<String, Object>) packages.get(VdsProperties.vdsmPackageName);
            vds.setVersion(getPackageRpmVersion("vdsm", vdsm));
        }
        if (packages.containsKey(VdsProperties.qemuKvmPackageName)) {
            Map<String, Object> kvm = (Map<String, Object>) packages.get(VdsProperties.qemuKvmPackageName);
            vds.setKvmVersion(getPackageVersionFormated2(kvm));
        }
        if (packages.containsKey(VdsProperties.libvirtPackageName)) {
            Map<String, Object> libvirt = (Map<String, Object>) packages.get(VdsProperties.libvirtPackageName);
            vds.setLibvirtVersion(getPackageRpmVersion("libvirt", libvirt));
        }
        if (packages.containsKey(VdsProperties.spiceServerPackageName)) {
            Map<String, Object> spice = (Map<String, Object>) packages.get(VdsProperties.spiceServerPackageName);
            vds.setSpiceVersion(getPackageVersionFormated2(spice));
        }
        if (packages.containsKey(VdsProperties.kernelPackageName)) {
            Map<String, Object> kernel = (Map<String, Object>) packages.get(VdsProperties.kernelPackageName);
            vds.setKernelVersion(getPackageVersionFormated2(kernel));
        }
        if (packages.containsKey(VdsProperties.glusterPackageName)) {
            Map<String, Object> gluster = (Map<String, Object>) packages.get(VdsProperties.glusterPackageName);
            vds.setGlusterVersion(getPackageVersionFormated2(gluster));
        }
    }
}
#method_after
private static void UpdatePackagesVersions(VDS vds, Map<String, Object> xmlRpcStruct) {
    vds.setVersionName(AssignStringValue(xmlRpcStruct, VdsProperties.version_name));
    vds.setSoftwareVersion(AssignStringValue(xmlRpcStruct, VdsProperties.software_version));
    vds.setBuildName(AssignStringValue(xmlRpcStruct, VdsProperties.build_name));
    if (xmlRpcStruct.containsKey(VdsProperties.host_os)) {
        vds.setHostOs(GetPackageVersionFormated((Map<String, Object>) xmlRpcStruct.get(VdsProperties.host_os), true));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.packages)) {
        // release.. of a package)
        for (Object hostPackageMap : (Object[]) xmlRpcStruct.get(VdsProperties.packages)) {
            Map<String, Object> hostPackage = (Map<String, Object>) hostPackageMap;
            String packageName = AssignStringValue(hostPackage, VdsProperties.package_name);
            if (VdsProperties.kvmPackageName.equals(packageName)) {
                vds.setKvmVersion(GetPackageVersionFormated(hostPackage, false));
            } else if (VdsProperties.spicePackageName.equals(packageName)) {
                vds.setSpiceVersion(GetPackageVersionFormated(hostPackage, false));
            } else if (VdsProperties.kernelPackageName.equals(packageName)) {
                vds.setKernelVersion(GetPackageVersionFormated(hostPackage, false));
            }
        }
    } else if (xmlRpcStruct.containsKey(VdsProperties.packages2)) {
        Map<String, Object> packages = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.packages2);
        if (packages.containsKey(VdsProperties.vdsmPackageName)) {
            Map<String, Object> vdsm = (Map<String, Object>) packages.get(VdsProperties.vdsmPackageName);
            vds.setVersion(getPackageRpmVersion("vdsm", vdsm));
        }
        if (packages.containsKey(VdsProperties.qemuKvmPackageName)) {
            Map<String, Object> kvm = (Map<String, Object>) packages.get(VdsProperties.qemuKvmPackageName);
            vds.setKvmVersion(getPackageVersionFormated2(kvm));
        }
        if (packages.containsKey(VdsProperties.libvirtPackageName)) {
            Map<String, Object> libvirt = (Map<String, Object>) packages.get(VdsProperties.libvirtPackageName);
            vds.setLibvirtVersion(getPackageRpmVersion("libvirt", libvirt));
        }
        if (packages.containsKey(VdsProperties.spiceServerPackageName)) {
            Map<String, Object> spice = (Map<String, Object>) packages.get(VdsProperties.spiceServerPackageName);
            vds.setSpiceVersion(getPackageVersionFormated2(spice));
        }
        if (packages.containsKey(VdsProperties.kernelPackageName)) {
            Map<String, Object> kernel = (Map<String, Object>) packages.get(VdsProperties.kernelPackageName);
            vds.setKernelVersion(getPackageVersionFormated2(kernel));
        }
        if (packages.containsKey(VdsProperties.GLUSTER_PACKAGE_NAME)) {
            Map<String, Object> gluster = (Map<String, Object>) packages.get(VdsProperties.GLUSTER_PACKAGE_NAME);
            vds.setGlusterVersion(getPackageRpmVersion("glusterfs", gluster));
        }
    }
}
#end_block

#method_before
public static void updateVDSStatisticsData(VDS vds, Map<String, Object> xmlRpcStruct) {
    // ------------- vds memory usage ---------------------------
    vds.setUsageMemPercent(AssignIntValue(xmlRpcStruct, VdsProperties.mem_usage));
    // ------------- vds network statistics ---------------------
    Map<String, Object> interfaces = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.NETWORK);
    if (interfaces != null) {
        int networkUsage = 0;
        for (Entry<String, Object> entry : interfaces.entrySet()) {
            VdsNetworkInterface iface = null;
            for (VdsNetworkInterface tempInterface : vds.getInterfaces()) {
                if (tempInterface.getName().equals(entry.getKey())) {
                    iface = tempInterface;
                    break;
                }
            }
            if (iface != null) {
                iface.setVdsId(vds.getId());
                Map<String, Object> dict = (Map<String, Object>) entry.getValue();
                Double rx_rate = AssignDoubleValue(dict, VdsProperties.rx_rate);
                Double rx_dropped = AssignDoubleValue(dict, VdsProperties.rx_dropped);
                Double tx_rate = AssignDoubleValue(dict, VdsProperties.tx_rate);
                Double tx_dropped = AssignDoubleValue(dict, VdsProperties.tx_dropped);
                iface.getStatistics().setReceiveRate(rx_rate != null ? rx_rate : 0);
                iface.getStatistics().setReceiveDropRate(rx_dropped != null ? rx_dropped : 0);
                iface.getStatistics().setTransmitRate(tx_rate != null ? tx_rate : 0);
                iface.getStatistics().setTransmitDropRate(tx_dropped != null ? tx_dropped : 0);
                iface.setSpeed(AssignIntValue(dict, VdsProperties.INTERFACE_SPEED));
                iface.getStatistics().setStatus(AssignInterfaceStatusValue(dict, VdsProperties.iface_status));
                int hold = (iface.getStatistics().getTransmitRate().compareTo(iface.getStatistics().getReceiveRate()) > 0 ? iface.getStatistics().getTransmitRate() : iface.getStatistics().getReceiveRate()).intValue();
                if (hold > networkUsage) {
                    networkUsage = hold;
                }
            }
        }
        vds.setUsageNetworkPercent((networkUsage > 100) ? 100 : networkUsage);
    }
    // ----------- vds cpu statistics info ---------------------
    vds.setCpuSys(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_sys));
    vds.setCpuUser(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_user));
    if (vds.getCpuSys() != null && vds.getCpuUser() != null) {
        vds.setUsageCpuPercent((int) (vds.getCpuSys() + vds.getCpuUser()));
        if (vds.getUsageCpuPercent() >= vds.getHighUtilization() || vds.getUsageCpuPercent() <= vds.getLowUtilization()) {
            if (vds.getCpuOverCommitTimestamp() == null) {
                vds.setCpuOverCommitTimestamp(new Date());
            }
        } else {
            vds.setCpuOverCommitTimestamp(null);
        }
    }
    // CPU load reported by VDSM is in uptime-style format, i.e. normalized
    // to unity, so that say an 8% load is reported as 0.08
    Double d = AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_load);
    d = (d != null) ? d : 0;
    vds.setCpuLoad(d.doubleValue() * 100.0);
    vds.setCpuIdle(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_idle));
    vds.setMemAvailable(AssignLongValue(xmlRpcStruct, VdsProperties.mem_available));
    vds.setMemFree(AssignLongValue(xmlRpcStruct, VdsProperties.memFree));
    vds.setMemShared(AssignLongValue(xmlRpcStruct, VdsProperties.mem_shared));
    vds.setSwapFree(AssignLongValue(xmlRpcStruct, VdsProperties.swap_free));
    vds.setSwapTotal(AssignLongValue(xmlRpcStruct, VdsProperties.swap_total));
    vds.setKsmCpuPercent(AssignIntValue(xmlRpcStruct, VdsProperties.ksm_cpu_percent));
    vds.setKsmPages(AssignLongValue(xmlRpcStruct, VdsProperties.ksm_pages));
    vds.setKsmState(AssignBoolValue(xmlRpcStruct, VdsProperties.ksm_state));
    // dynamic data got from GetVdsStats
    if (xmlRpcStruct.containsKey(VdsProperties.transparent_huge_pages_state)) {
        vds.setTransparentHugePagesState(EnumUtils.valueOf(VdsTransparentHugePagesState.class, xmlRpcStruct.get(VdsProperties.transparent_huge_pages_state).toString(), true));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.anonymous_transparent_huge_pages)) {
        vds.setAnonymousHugePages(AssignIntValue(xmlRpcStruct, VdsProperties.anonymous_transparent_huge_pages));
    }
    vds.setNetConfigDirty(AssignBoolValue(xmlRpcStruct, VdsProperties.netConfigDirty));
    vds.setImagesLastCheck(AssignDoubleValue(xmlRpcStruct, VdsProperties.images_last_check));
    vds.setImagesLastDelay(AssignDoubleValue(xmlRpcStruct, VdsProperties.images_last_delay));
    Integer vm_count = AssignIntValue(xmlRpcStruct, VdsProperties.vm_count);
    vds.setVmCount(vm_count == null ? 0 : vm_count);
    vds.setVmActive(AssignIntValue(xmlRpcStruct, VdsProperties.vm_active));
    vds.setVmMigrating(AssignIntValue(xmlRpcStruct, VdsProperties.vm_migrating));
    updateVDSDomainData(vds, xmlRpcStruct);
    updateLocalDisksUsage(vds, xmlRpcStruct);
}
#method_after
public static void updateVDSStatisticsData(VDS vds, Map<String, Object> xmlRpcStruct) {
    // ------------- vds memory usage ---------------------------
    vds.setUsageMemPercent(AssignIntValue(xmlRpcStruct, VdsProperties.mem_usage));
    // ------------- vds network statistics ---------------------
    Map<String, Object> interfaces = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.NETWORK);
    if (interfaces != null) {
        int networkUsage = 0;
        for (Entry<String, Object> entry : interfaces.entrySet()) {
            VdsNetworkInterface iface = null;
            for (VdsNetworkInterface tempInterface : vds.getInterfaces()) {
                if (tempInterface.getName().equals(entry.getKey())) {
                    iface = tempInterface;
                    break;
                }
            }
            if (iface != null) {
                iface.setVdsId(vds.getId());
                Map<String, Object> dict = (Map<String, Object>) entry.getValue();
                Double rx_rate = AssignDoubleValue(dict, VdsProperties.rx_rate);
                Double rx_dropped = AssignDoubleValue(dict, VdsProperties.rx_dropped);
                Double tx_rate = AssignDoubleValue(dict, VdsProperties.tx_rate);
                Double tx_dropped = AssignDoubleValue(dict, VdsProperties.tx_dropped);
                iface.getStatistics().setReceiveRate(rx_rate != null ? rx_rate : 0);
                iface.getStatistics().setReceiveDropRate(rx_dropped != null ? rx_dropped : 0);
                iface.getStatistics().setTransmitRate(tx_rate != null ? tx_rate : 0);
                iface.getStatistics().setTransmitDropRate(tx_dropped != null ? tx_dropped : 0);
                iface.setSpeed(AssignIntValue(dict, VdsProperties.INTERFACE_SPEED));
                iface.getStatistics().setStatus(AssignInterfaceStatusValue(dict, VdsProperties.iface_status));
                int hold = (iface.getStatistics().getTransmitRate().compareTo(iface.getStatistics().getReceiveRate()) > 0 ? iface.getStatistics().getTransmitRate() : iface.getStatistics().getReceiveRate()).intValue();
                if (hold > networkUsage) {
                    networkUsage = hold;
                }
            }
        }
        vds.setUsageNetworkPercent((networkUsage > 100) ? 100 : networkUsage);
    }
    // ----------- vds cpu statistics info ---------------------
    vds.setCpuSys(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_sys));
    vds.setCpuUser(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_user));
    if (vds.getCpuSys() != null && vds.getCpuUser() != null) {
        vds.setUsageCpuPercent((int) (vds.getCpuSys() + vds.getCpuUser()));
        if (vds.getUsageCpuPercent() >= vds.getHighUtilization() || vds.getUsageCpuPercent() <= vds.getLowUtilization()) {
            if (vds.getCpuOverCommitTimestamp() == null) {
                vds.setCpuOverCommitTimestamp(new Date());
            }
        } else {
            vds.setCpuOverCommitTimestamp(null);
        }
    }
    // CPU load reported by VDSM is in uptime-style format, i.e. normalized
    // to unity, so that say an 8% load is reported as 0.08
    Double d = AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_load);
    d = (d != null) ? d : 0;
    vds.setCpuLoad(d.doubleValue() * 100.0);
    vds.setCpuIdle(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_idle));
    vds.setMemAvailable(AssignLongValue(xmlRpcStruct, VdsProperties.mem_available));
    vds.setMemFree(AssignLongValue(xmlRpcStruct, VdsProperties.memFree));
    vds.setMemShared(AssignLongValue(xmlRpcStruct, VdsProperties.mem_shared));
    vds.setSwapFree(AssignLongValue(xmlRpcStruct, VdsProperties.swap_free));
    vds.setSwapTotal(AssignLongValue(xmlRpcStruct, VdsProperties.swap_total));
    vds.setKsmCpuPercent(AssignIntValue(xmlRpcStruct, VdsProperties.ksm_cpu_percent));
    vds.setKsmPages(AssignLongValue(xmlRpcStruct, VdsProperties.ksm_pages));
    vds.setKsmState(AssignBoolValue(xmlRpcStruct, VdsProperties.ksm_state));
    // dynamic data got from GetVdsStats
    if (xmlRpcStruct.containsKey(VdsProperties.transparent_huge_pages_state)) {
        vds.setTransparentHugePagesState(EnumUtils.valueOf(VdsTransparentHugePagesState.class, xmlRpcStruct.get(VdsProperties.transparent_huge_pages_state).toString(), true));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.anonymous_transparent_huge_pages)) {
        vds.setAnonymousHugePages(AssignIntValue(xmlRpcStruct, VdsProperties.anonymous_transparent_huge_pages));
    }
    vds.setNetConfigDirty(AssignBoolValue(xmlRpcStruct, VdsProperties.netConfigDirty));
    vds.setImagesLastCheck(AssignDoubleValue(xmlRpcStruct, VdsProperties.images_last_check));
    vds.setImagesLastDelay(AssignDoubleValue(xmlRpcStruct, VdsProperties.images_last_delay));
    Integer vm_count = AssignIntValue(xmlRpcStruct, VdsProperties.vm_count);
    vds.setVmCount(vm_count == null ? 0 : vm_count);
    vds.setVmActive(AssignIntValue(xmlRpcStruct, VdsProperties.vm_active));
    vds.setVmMigrating(AssignIntValue(xmlRpcStruct, VdsProperties.vm_migrating));
    updateVDSDomainData(vds, xmlRpcStruct);
    updateLocalDisksUsage(vds, xmlRpcStruct);
    Integer haScore = AssignIntValue(xmlRpcStruct, VdsProperties.ha_score);
    vds.setHighlyAvailableScore(haScore != null ? haScore : 0);
}
#end_block

#method_before
@Override
protected void syncSearch() {
    if (getEntity() == null) {
        return;
    }
    AsyncDataProvider.getGlusterBricksForServer(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            List<GlusterBrickEntity> glusterBricks = (List<GlusterBrickEntity>) returnValue;
            Collections.sort(glusterBricks, new GlusterBrickEntity());
            setItems(glusterBricks);
        }
    }), getEntity().getId());
}
#method_after
@Override
protected void syncSearch() {
    if (getEntity() == null) {
        return;
    }
    AsyncDataProvider.getGlusterBricksForServer(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            List<GlusterBrickEntity> glusterBricks = (List<GlusterBrickEntity>) returnValue;
            Collections.sort(glusterBricks, new Linq.ServerBricksComparer());
            setItems(glusterBricks);
        }
    }), getEntity().getId());
}
#end_block

#method_before
private void initNetworkQoSList() {
    if (getDcId() == null) {
        return;
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            ArrayList<NetworkQoS> networkQoSes = (ArrayList<NetworkQoS>) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
            NetworkQoS none = new NetworkQoS();
            none.setName(ConstantsManager.getInstance().getConstants().unlimitedQoSTitle());
            none.setId(Guid.Empty);
            networkQoSes.add(0, none);
            getNetworkQoS().setItems(networkQoSes);
            setSelectedNetworkQoSId(defaultQosId);
        }
    };
    IdQueryParameters queryParams = new IdQueryParameters(getDcId());
    Frontend.RunQuery(VdcQueryType.GetAllNetworkQosByStoragePoolId, queryParams, _asyncQuery);
}
#method_after
private void initNetworkQoSList() {
    if (getDcId() == null) {
        return;
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            ArrayList<NetworkQoS> networkQoSes = (ArrayList<NetworkQoS>) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
            networkQoSes.add(0, getEmptyQos());
            getNetworkQoS().setItems(networkQoSes);
            setSelectedNetworkQoSId(defaultQosId);
        }
    };
    IdQueryParameters queryParams = new IdQueryParameters(getDcId());
    Frontend.RunQuery(VdcQueryType.GetAllNetworkQosByStoragePoolId, queryParams, _asyncQuery);
}
#end_block

#method_before
private void setSelectedNetworkQoSId(Guid networkQoSId) {
    for (Object item : getNetworkQoS().getItems()) {
        if (((NetworkQoS) item).getId().equals(networkQoSId)) {
            getNetworkQoS().setSelectedItem(item);
            return;
        }
    }
    setSelectedNetworkQoSId(Guid.Empty);
}
#method_after
private void setSelectedNetworkQoSId(Guid networkQoSId) {
    for (Object item : getNetworkQoS().getItems()) {
        if (((NetworkQoS) item).getId().equals(networkQoSId)) {
            getNetworkQoS().setSelectedItem(item);
            return;
        }
    }
    getNetworkQoS().setSelectedItem(getEmptyQos());
}
#end_block

#method_before
@Override
protected void initProfiles() {
    Iterable<VnicProfileModel> existingProfiles = getProfiles().getItems();
    if (existingProfiles == null) {
        // first run (dialog has just been opened and default DC chosen), create default entry
        List<VnicProfileModel> profiles = new LinkedList<VnicProfileModel>();
        profiles.add(createDefaultProfile());
        getProfiles().setItems(profiles);
    } else {
        // not first run (user picked different DC), want to keep existing entries and update DC-related properties
        for (VnicProfileModel profile : existingProfiles) {
            profile.updateDc(getSelectedDc().getcompatibility_version(), getSelectedDc().getId());
        }
    }
}
#method_after
@Override
protected void initProfiles() {
    Iterable<VnicProfileModel> existingProfiles = getProfiles().getItems();
    if (existingProfiles == null) {
        // first run (dialog has just been opened and default DC chosen), create default entry
        List<VnicProfileModel> profiles = new LinkedList<VnicProfileModel>();
        profiles.add(getDefaultProfile());
        getProfiles().setItems(profiles);
    } else {
        // not first run (user picked different DC), want to keep existing entries and update DC-related properties
        for (VnicProfileModel profile : existingProfiles) {
            profile.updateDc(getSelectedDc().getcompatibility_version(), getSelectedDc().getId());
        }
    }
}
#end_block

#method_before
public String getRelativePath() {
    String path = getPath();
    if (path.startsWith("/")) {
        // $NON-NLS-1$
        path = path.substring(1);
    }
    return path;
}
#method_after
public String getRelativePath() {
    String path = getPath();
    // $NON-NLS-1$
    return path.startsWith("/") ? path.substring(1) : path;
}
#end_block

#method_before
protected void updateCpuPinningVisibility() {
    if (getModel().getSelectedCluster() != null) {
        VDSGroup cluster = getModel().getSelectedCluster();
        String compatibilityVersion = cluster.getcompatibility_version().toString();
        boolean isLocalSD = getModel().getSelectedDataCenter() != null && StorageType.LOCALFS.equals(getModel().getSelectedDataCenter().getStorageType());
        // cpu pinning is available on Local SD with no consideration for auto assign value
        boolean hasCpuPinning = Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity()) || isLocalSD;
        if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled, compatibilityVersion))) {
            hasCpuPinning = false;
        } else if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, AsyncDataProvider.getDefaultConfigurationVersion())) && isVmMigratable()) {
            hasCpuPinning = false;
        }
        if (!hasCpuPinning) {
            getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailable());
            getModel().getCpuPinning().setEntity("");
        }
        getModel().getCpuPinning().setIsChangable(hasCpuPinning);
    }
}
#method_after
protected void updateCpuPinningVisibility() {
    if (getModel().getSelectedCluster() != null) {
        VDSGroup cluster = getModel().getSelectedCluster();
        String compatibilityVersion = cluster.getcompatibility_version().toString();
        boolean isLocalSD = getModel().getSelectedDataCenter() != null && StorageType.LOCALFS.equals(getModel().getSelectedDataCenter().getStorageType());
        // cpu pinning is available on Local SD with no consideration for auto assign value
        boolean hasCpuPinning = Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity()) || isLocalSD;
        if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled, compatibilityVersion))) {
            hasCpuPinning = false;
        } else if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, AsyncDataProvider.getDefaultConfigurationVersion())) && isVmMigratable() && !isLocalSD) {
            hasCpuPinning = false;
        }
        if (!hasCpuPinning) {
            if (isLocalSD) {
                getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailableLocalStorage());
            } else {
                getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailable());
            }
            getModel().getCpuPinning().setEntity("");
        }
        getModel().getCpuPinning().setIsChangable(hasCpuPinning);
    }
}
#end_block

#method_before
public void showStatus(GlusterVolumeTaskStatusEntity rebalanceStatusEntity) {
    List<GlusterVolumeTaskStatusForHost> rebalanceSessionsList = rebalanceStatusEntity.getHostwiseStatusDetails();
    List<EntityModel> sessionList = new ArrayList<EntityModel>();
    for (GlusterVolumeTaskStatusForHost hostDetail : rebalanceSessionsList) {
        EntityModel sessionModel = new EntityModel(hostDetail);
        sessionList.add(sessionModel);
    }
    getStartedTime().setEntity(rebalanceStatusEntity.getStartTime());
    getStatusTime().setEntity(rebalanceStatusEntity.getStatusTime());
    getRebalanceSessions().setItems(sessionList);
    if (rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.FINISHED) {
        setStatusAvailable(true);
        refresh.cancel();
    } else {
        setStatusAvailable(false);
        if ((rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.ABORTED || rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.FAILED)) {
            refresh.cancel();
        }
    }
    if (GlusterTaskType.REBALANCE.equals(getEntity().getAsyncTask().getType())) {
        getStopReblanceFromStatus().setIsExecutionAllowed(rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.STARTED);
    }
}
#method_after
public void showStatus(GlusterVolumeTaskStatusEntity rebalanceStatusEntity) {
    List<GlusterVolumeTaskStatusForHost> rebalanceSessionsList = rebalanceStatusEntity.getHostwiseStatusDetails();
    List<EntityModel> sessionList = new ArrayList<EntityModel>();
    for (GlusterVolumeTaskStatusForHost hostDetail : rebalanceSessionsList) {
        EntityModel sessionModel = new EntityModel(hostDetail);
        sessionList.add(sessionModel);
    }
    getStartedTime().setEntity(rebalanceStatusEntity.getStartTime());
    getStatusTime().setEntity(rebalanceStatusEntity.getStatusTime());
    getRebalanceSessions().setItems(sessionList);
    if (rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.FINISHED) {
        setStatusAvailable(true);
        refresh.cancel();
    } else {
        setStatusAvailable(false);
        if ((rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.ABORTED || rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.FAILED)) {
            refresh.cancel();
        }
    }
    if (GlusterTaskType.REBALANCE == getEntity().getAsyncTask().getType()) {
        getStopReblanceFromStatus().setIsExecutionAllowed(rebalanceStatusEntity.getStatusSummary().getStatus() == JobExecutionStatus.STARTED);
    }
}
#end_block

#method_before
public void refreshDetails(GlusterVolumeEntity volumeEntity) {
    AsyncDataProvider.getGlusterRebalanceStatus(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            GlusterVolumeTaskStatusEntity rebalanceEntity = (GlusterVolumeTaskStatusEntity) returnValue;
            showStatus(rebalanceEntity);
        }
    }), volumeEntity.getClusterId(), volumeEntity.getId());
}
#method_after
public void refreshDetails(GlusterVolumeEntity volumeEntity) {
    AsyncDataProvider.getGlusterRebalanceStatus(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            VdcQueryReturnValue vdcValue = (VdcQueryReturnValue) returnValue;
            GlusterVolumeTaskStatusEntity rebalanceStatusEntity = vdcValue.getReturnValue();
            if (rebalanceStatusEntity != null) {
                showStatus(rebalanceStatusEntity);
            }
        }
    }), volumeEntity.getClusterId(), volumeEntity.getId());
}
#end_block

#method_before
public static void addProfileDataToNic(Map<String, Object> struct, VM vm, VmDevice vmDevice, VmNic nic) {
    VnicProfile vnicProfile = null;
    Network network = null;
    String networkName = "";
    List<VNIC_PROFILE_PROPERTIES> unsupportedFeatures = new ArrayList<>();
    if (nic.getVnicProfileId() != null) {
        vnicProfile = DbFacade.getInstance().getVnicProfileDao().get(nic.getVnicProfileId());
        if (vnicProfile != null) {
            network = DbFacade.getInstance().getNetworkDao().get(vnicProfile.getNetworkId());
            networkName = network.getName();
            log.debugFormat("VNIC {0} is using profile {1} on network {2}", nic.getName(), vnicProfile, networkName);
            if (!addQosForDevice(struct, vnicProfile, vm.getVdsGroupCompatibilityVersion())) {
                unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.NETWORK_QOS);
            }
        }
    }
    struct.put(VdsProperties.NETWORK, networkName);
    if (!addPortMirroringToVmInterface(struct, vnicProfile, vm.getVdsGroupCompatibilityVersion(), network == null ? Collections.<String>emptyList() : Collections.singletonList(networkName))) {
        unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.PORT_MIRRORING);
    }
    if (!addCustomPropertiesForDevice(struct, vm, vmDevice, vm.getVdsGroupCompatibilityVersion(), getVnicCustomProperties(vnicProfile))) {
        unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.CUSTOM_PROPERTIES);
    }
    if (!unsupportedFeatures.isEmpty()) {
        reportUnsupportedVnicProfileFeatures(vm, nic, vnicProfile, unsupportedFeatures);
    }
}
#method_after
public static void addProfileDataToNic(Map<String, Object> struct, VM vm, VmDevice vmDevice, VmNic nic) {
    VnicProfile vnicProfile = null;
    Network network = null;
    String networkName = "";
    List<VNIC_PROFILE_PROPERTIES> unsupportedFeatures = new ArrayList<>();
    if (nic.getVnicProfileId() != null) {
        vnicProfile = DbFacade.getInstance().getVnicProfileDao().get(nic.getVnicProfileId());
        if (vnicProfile != null) {
            network = DbFacade.getInstance().getNetworkDao().get(vnicProfile.getNetworkId());
            networkName = network.getName();
            log.debugFormat("VNIC {0} is using profile {1} on network {2}", nic.getName(), vnicProfile, networkName);
            if (!addQosForDevice(struct, vnicProfile, vm.getVdsGroupCompatibilityVersion())) {
                unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.NETWORK_QOS);
            }
        }
    }
    struct.put(VdsProperties.NETWORK, networkName);
    if (!addPortMirroringToVmInterface(struct, vnicProfile, vm.getVdsGroupCompatibilityVersion(), network)) {
        unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.PORT_MIRRORING);
    }
    if (!addCustomPropertiesForDevice(struct, vm, vmDevice, vm.getVdsGroupCompatibilityVersion(), getVnicCustomProperties(vnicProfile))) {
        unsupportedFeatures.add(VNIC_PROFILE_PROPERTIES.CUSTOM_PROPERTIES);
    }
    if (!unsupportedFeatures.isEmpty()) {
        reportUnsupportedVnicProfileFeatures(vm, nic, vnicProfile, unsupportedFeatures);
    }
}
#end_block

#method_before
private static boolean addPortMirroringToVmInterface(Map<String, Object> struct, VnicProfile vnicProfile, Version version, List<String> networkNames) {
    if (vnicProfile != null && vnicProfile.isPortMirroring()) {
        if (FeatureSupported.portMirroring(version)) {
            struct.put(VdsProperties.PORT_MIRRORING, networkNames);
        } else {
            return false;
        }
    }
    return true;
}
#method_after
private static boolean addPortMirroringToVmInterface(Map<String, Object> struct, VnicProfile vnicProfile, Version version, Network network) {
    if (vnicProfile != null && vnicProfile.isPortMirroring()) {
        if (FeatureSupported.portMirroring(version)) {
            struct.put(VdsProperties.PORT_MIRRORING, network == null ? Collections.<String>emptyList() : Collections.singletonList(network.getName()));
        } else {
            return false;
        }
    }
    return true;
}
#end_block

#method_before
@Override
protected void selectedItemsChanged() {
    super.onSelectedItemChanged();
    updateActionAvailability();
}
#method_after
@Override
protected void selectedItemsChanged() {
    super.selectedItemsChanged();
    updateActionAvailability();
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    switch(getActionState()) {
        case EXECUTE:
            if (!getParameters().getTaskGroupSuccess()) {
                return AuditLogType.USER_EXPORT_IMAGE_FINISHED_FAILURE;
            }
            if (getParameters().getExecutionIndex() == 0 && getSucceeded()) {
                return AuditLogType.USER_EXPORT_IMAGE;
            }
            break;
        case END_SUCCESS:
            return AuditLogType.USER_EXPORT_IMAGE_FINISHED_SUCCESS;
        case END_FAILURE:
            return AuditLogType.USER_EXPORT_IMAGE_FINISHED_FAILURE;
    }
    return AuditLogType.UNASSIGNED;
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    switch(getActionState()) {
        case EXECUTE:
            return getSucceeded() ? AuditLogType.USER_EXPORT_IMAGE : AuditLogType.USER_EXPORT_IMAGE_FINISHED_FAILURE;
        case END_SUCCESS:
            return AuditLogType.USER_EXPORT_IMAGE_FINISHED_SUCCESS;
        case END_FAILURE:
            return AuditLogType.USER_EXPORT_IMAGE_FINISHED_FAILURE;
    }
    return AuditLogType.UNASSIGNED;
}
#end_block

