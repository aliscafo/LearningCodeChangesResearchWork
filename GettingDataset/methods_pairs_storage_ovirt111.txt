686
#method_before
@Override
protected void executeCommand() {
    if (getCurrentUser() == null) {
        setCurrentUser(SessionDataContainer.getInstance().getUser(getParameters().getSessionId(), false));
    }
    AuthenticationProfile profile = SessionDataContainer.getInstance().getProfile(getParameters().getSessionId());
    if (profile == null) {
        setSucceeded(false);
    } else {
        if ((profile.getAuthn().getContext().<Long>get(Authn.ContextKeys.CAPABILITIES) & Authn.Capabilities.LOGOUT) != 0) {
            profile.getAuthn().invoke(new ExtMap().mput(Base.InvokeKeys.COMMAND, Authn.InvokeCommands.LOGOUT).mput(Authn.InvokeKeys.PRINCIPAL, SessionDataContainer.getInstance().getPrincipalName(getParameters().getSessionId())));
        }
        SessionDataContainer.getInstance().removeSessionOnLogout(getParameters().getSessionId());
        setSucceeded(true);
    }
}
#method_after
@Override
protected void executeCommand() {
    AuthenticationProfile profile = SessionDataContainer.getInstance().getProfile(getParameters().getSessionId());
    if (profile == null) {
        setSucceeded(false);
    } else {
        if ((profile.getAuthn().getContext().<Long>get(Authn.ContextKeys.CAPABILITIES) & Authn.Capabilities.LOGOUT) != 0) {
            profile.getAuthn().invoke(new ExtMap().mput(Base.InvokeKeys.COMMAND, Authn.InvokeCommands.LOGOUT).mput(Authn.InvokeKeys.PRINCIPAL, SessionDataContainer.getInstance().getPrincipalName(getParameters().getSessionId())));
        }
        SessionDataContainer.getInstance().removeSessionOnLogout(getParameters().getSessionId());
        setSucceeded(true);
    }
}
#end_block

#method_before
public static String getMessage(AuditLogType logType) {
    final String key = logType.name();
    try {
        return resourceBundle.getString(key);
    } catch (Exception e) {
        log.error("Key '" + key + "' is not translated in '" + getResourceBundleName() + "'");
        return logType.name();
    }
}
#method_after
public static String getMessage(AuditLogType logType) {
    return StringUtils.defaultString(getMessageOrNull(logType));
}
#end_block

#method_before
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable.getLegal()) {
        saveToDb(auditLogable, logType, loggerString);
    }
}
#method_after
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    if (!logType.shouldBeLogged()) {
        return;
    }
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable.getLegal()) {
        saveToDb(auditLogable, logType, loggerString);
    }
}
#end_block

#method_before
private static void saveToDb(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    AuditLogSeverity severity = logType.getSeverity();
    // TODO MM: there's NO such situation when this can happen; and since we find this invalid anyway, it should be 'blocked' in AuditLogType constructor.
    if (severity == null) {
        severity = AuditLogSeverity.NORMAL;
        log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType);
    }
    AuditLog auditLog = createAuditLog(auditLogable, logType, loggerString, severity);
    if (auditLog == null) {
        log.warn("Unable to create AuditLog");
    } else {
        setPropertiesFromAuditLogableBase(auditLogable, auditLog);
        getDbFacadeInstance().getAuditLogDao().save(auditLog);
        logMessage(severity, getMessageToLog(loggerString, auditLog));
    }
}
#method_after
private static void saveToDb(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    AuditLogSeverity severity = logType.getSeverity();
    AuditLog auditLog = createAuditLog(auditLogable, logType, loggerString, severity);
    if (auditLog == null) {
        log.warn("Unable to create AuditLog");
    } else {
        setPropertiesFromAuditLogableBase(auditLogable, auditLog);
        getDbFacadeInstance().getAuditLogDao().save(auditLog);
        logMessage(severity, getMessageToLog(loggerString, auditLog));
    }
}
#end_block

#method_before
private static void setPropertiesFromAuditLogableBase(AuditLogableBase auditLogable, AuditLog auditLog) {
    auditLog.setstorage_domain_id(auditLogable.getStorageDomainId());
    auditLog.setstorage_domain_name(auditLogable.getStorageDomainName());
    auditLog.setstorage_pool_id(auditLogable.getStoragePoolId());
    auditLog.setstorage_pool_name(auditLogable.getStoragePoolName());
    auditLog.setvds_group_id(auditLogable.getVdsGroupId());
    auditLog.setvds_group_name(auditLogable.getVdsGroupName());
    auditLog.setCorrelationId(auditLogable.getCorrelationId());
    auditLog.setJobId(auditLogable.getJobId());
    auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
    auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
    auditLog.setExternal(auditLogable.isExternal());
    auditLog.setQuotaId(auditLogable.getQuotaIdForLog());
    auditLog.setQuotaName(auditLogable.getQuotaNameForLog());
    auditLog.setCallStack(auditLogable.getCallStack());
}
#method_after
private static void setPropertiesFromAuditLogableBase(AuditLogableBase auditLogable, AuditLog auditLog) {
    auditLog.setStorageDomainId(auditLogable.getStorageDomainId());
    auditLog.setStorageDomainName(auditLogable.getStorageDomainName());
    auditLog.setStoragePoolId(auditLogable.getStoragePoolId());
    auditLog.setStoragePoolName(auditLogable.getStoragePoolName());
    auditLog.setVdsGroupId(auditLogable.getVdsGroupId());
    auditLog.setVdsGroupName(auditLogable.getVdsGroupName());
    auditLog.setCorrelationId(auditLogable.getCorrelationId());
    auditLog.setJobId(auditLogable.getJobId());
    auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
    auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
    auditLog.setExternal(auditLogable.isExternal());
    auditLog.setQuotaId(auditLogable.getQuotaIdForLog());
    auditLog.setQuotaName(auditLogable.getQuotaNameForLog());
    auditLog.setCallStack(auditLogable.getCallStack());
}
#end_block

#method_before
private static String getMessageToLog(String loggerString, AuditLog auditLog) {
    String logMessage;
    if (loggerString.isEmpty()) {
        logMessage = auditLog.toStringForLogging();
    } else {
        logMessage = log.transform(loggerString, auditLog.getmessage());
    }
    return logMessage;
}
#method_after
private static String getMessageToLog(String loggerString, AuditLog auditLog) {
    if (loggerString.isEmpty()) {
        return auditLog.toStringForLogging();
    } else {
        return MessageFormat.format(loggerString, auditLog.getMessage());
    }
}
#end_block

#method_before
private static AuditLog createAuditLog(AuditLogableBase auditLogable, AuditLogType logType, String loggerString, AuditLogSeverity severity) {
    // handle external log messages invoked by plugins via the API
    if (auditLogable.isExternal()) {
        // message is sent as an argument, no need to resolve.
        String resolvedMessage = loggerString;
        return new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserId() != null ? getDbFacadeInstance().getDbUserDao().get(auditLogable.getUserId()).getLoginName() : null, auditLogable.getVmIdRef(), auditLogable.getVmIdRef() != null ? getDbFacadeInstance().getVmDao().get(auditLogable.getVmIdRef()).getName() : null, auditLogable.getVdsIdRef(), auditLogable.getVdsIdRef() != null ? getDbFacadeInstance().getVdsDao().get(auditLogable.getVdsIdRef()).getName() : null, auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateIdRef() != null ? getDbFacadeInstance().getVmTemplateDao().get(auditLogable.getVmTemplateIdRef()).getName() : null, auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
    }
    final String messageByType = getMessage(logType);
    if (messageByType == null) {
        return null;
    } else {
        // Application log message from AuditLogMessages
        String resolvedMessage = resolveMessage(messageByType, auditLogable);
        return new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
    }
}
#method_after
private static AuditLog createAuditLog(AuditLogableBase auditLogable, AuditLogType logType, String loggerString, AuditLogSeverity severity) {
    // handle external log messages invoked by plugins via the API
    if (auditLogable.isExternal()) {
        // message is sent as an argument, no need to resolve.
        String resolvedMessage = loggerString;
        return new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmIdRef() != null ? getDbFacadeInstance().getVmDao().get(auditLogable.getVmIdRef()).getName() : null, auditLogable.getVdsIdRef(), auditLogable.getVdsIdRef() != null ? getDbFacadeInstance().getVdsDao().get(auditLogable.getVdsIdRef()).getName() : null, auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateIdRef() != null ? getDbFacadeInstance().getVmTemplateDao().get(auditLogable.getVmTemplateIdRef()).getName() : null, auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
    }
    final String messageByType = getMessageOrNull(logType);
    if (messageByType == null) {
        return null;
    } else {
        // Application log message from AuditLogMessages
        String resolvedMessage = resolveMessage(messageByType, auditLogable);
        return new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
    }
}
#end_block

#method_before
private static DbFacade getDbFacadeInstance() {
    return DbFacade.getInstance();
}
#method_after
public static DbFacade getDbFacadeInstance() {
    return DbFacade.getInstance();
}
#end_block

#method_before
private static void compose(StringBuilder builder, String key, String value) {
    final char DELIMITER = ',';
    builder.append(key).append('=').append(value).append(DELIMITER);
}
#method_after
private static void compose(StringBuilder builder, String key, String value) {
    final char DELIMITER = ',';
    final char NAME_VALUE_SEPARATOR = '=';
    if (builder.length() > 0) {
        builder.append(DELIMITER);
    }
    builder.append(key).append(NAME_VALUE_SEPARATOR).append(value);
}
#end_block

#method_before
private static String nullToEmptyString(Object obj) {
    return toStringNullToDefault(obj, "");
}
#method_after
private static String nullToEmptyString(Object obj) {
    return Objects.toString(obj, "");
}
#end_block

#method_before
public static String getMessage(AuditLogType logType) {
    final String result = getMessageOrNull(logType);
    return result == null ? "" : result;
}
#method_after
public static String getMessage(AuditLogType logType) {
    return StringUtils.defaultString(getMessageOrNull(logType));
}
#end_block

#method_before
protected static String getMessageOrNull(AuditLogType logType) {
    final String key = logType.name();
    try {
        return resourceBundle.getString(key);
    } catch (Exception e) {
        log.error("Key '" + key + "' is not translated in '" + getResourceBundleName() + "'");
        return null;
    }
}
#method_after
protected static String getMessageOrNull(AuditLogType logType) {
    final String key = logType.name();
    try {
        return resourceBundle.getString(key);
    } catch (Exception e) {
        log.error("Key '{}' is not translated in '{}'", key, getResourceBundleName());
        return null;
    }
}
#end_block

#method_before
private static void saveToDb(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    AuditLogSeverity severity = logType.getSeverity();
    if (severity == null) {
        severity = AuditLogSeverity.NORMAL;
        log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType);
    }
    AuditLog auditLog = createAuditLog(auditLogable, logType, loggerString, severity);
    if (auditLog == null) {
        log.warn("Unable to create AuditLog");
    } else {
        setPropertiesFromAuditLogableBase(auditLogable, auditLog);
        getDbFacadeInstance().getAuditLogDao().save(auditLog);
        logMessage(severity, getMessageToLog(loggerString, auditLog));
    }
}
#method_after
private static void saveToDb(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    AuditLogSeverity severity = logType.getSeverity();
    AuditLog auditLog = createAuditLog(auditLogable, logType, loggerString, severity);
    if (auditLog == null) {
        log.warn("Unable to create AuditLog");
    } else {
        setPropertiesFromAuditLogableBase(auditLogable, auditLog);
        getDbFacadeInstance().getAuditLogDao().save(auditLog);
        logMessage(severity, getMessageToLog(loggerString, auditLog));
    }
}
#end_block

#method_before
private static void setPropertiesFromAuditLogableBase(AuditLogableBase auditLogable, AuditLog auditLog) {
    auditLog.setstorage_domain_id(auditLogable.getStorageDomainId());
    auditLog.setstorage_domain_name(auditLogable.getStorageDomainName());
    auditLog.setstorage_pool_id(auditLogable.getStoragePoolId());
    auditLog.setstorage_pool_name(auditLogable.getStoragePoolName());
    auditLog.setvds_group_id(auditLogable.getVdsGroupId());
    auditLog.setvds_group_name(auditLogable.getVdsGroupName());
    auditLog.setCorrelationId(auditLogable.getCorrelationId());
    auditLog.setJobId(auditLogable.getJobId());
    auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
    auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
    auditLog.setExternal(auditLogable.isExternal());
    auditLog.setQuotaId(auditLogable.getQuotaIdForLog());
    auditLog.setQuotaName(auditLogable.getQuotaNameForLog());
    auditLog.setCallStack(auditLogable.getCallStack());
}
#method_after
private static void setPropertiesFromAuditLogableBase(AuditLogableBase auditLogable, AuditLog auditLog) {
    auditLog.setStorageDomainId(auditLogable.getStorageDomainId());
    auditLog.setStorageDomainName(auditLogable.getStorageDomainName());
    auditLog.setStoragePoolId(auditLogable.getStoragePoolId());
    auditLog.setStoragePoolName(auditLogable.getStoragePoolName());
    auditLog.setVdsGroupId(auditLogable.getVdsGroupId());
    auditLog.setVdsGroupName(auditLogable.getVdsGroupName());
    auditLog.setCorrelationId(auditLogable.getCorrelationId());
    auditLog.setJobId(auditLogable.getJobId());
    auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
    auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
    auditLog.setExternal(auditLogable.isExternal());
    auditLog.setQuotaId(auditLogable.getQuotaIdForLog());
    auditLog.setQuotaName(auditLogable.getQuotaNameForLog());
    auditLog.setCallStack(auditLogable.getCallStack());
}
#end_block

#method_before
private static String getMessageToLog(String loggerString, AuditLog auditLog) {
    String logMessage;
    if (loggerString.isEmpty()) {
        logMessage = auditLog.toStringForLogging();
    } else {
        logMessage = log.transform(loggerString, auditLog.getmessage());
    }
    return logMessage;
}
#method_after
private static String getMessageToLog(String loggerString, AuditLog auditLog) {
    if (loggerString.isEmpty()) {
        return auditLog.toStringForLogging();
    } else {
        return MessageFormat.format(loggerString, auditLog.getMessage());
    }
}
#end_block

#method_before
private static AuditLog createAuditLog(AuditLogableBase auditLogable, AuditLogType logType, String loggerString, AuditLogSeverity severity) {
    // handle external log messages invoked by plugins via the API
    if (auditLogable.isExternal()) {
        // message is sent as an argument, no need to resolve.
        String resolvedMessage = loggerString;
        return new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserId() != null ? getDbFacadeInstance().getDbUserDao().get(auditLogable.getUserId()).getLoginName() : null, auditLogable.getVmIdRef(), auditLogable.getVmIdRef() != null ? getDbFacadeInstance().getVmDao().get(auditLogable.getVmIdRef()).getName() : null, auditLogable.getVdsIdRef(), auditLogable.getVdsIdRef() != null ? getDbFacadeInstance().getVdsDao().get(auditLogable.getVdsIdRef()).getName() : null, auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateIdRef() != null ? getDbFacadeInstance().getVmTemplateDao().get(auditLogable.getVmTemplateIdRef()).getName() : null, auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
    }
    final String messageByType = getMessageOrNull(logType);
    if (messageByType == null) {
        return null;
    } else {
        // Application log message from AuditLogMessages
        String resolvedMessage = resolveMessage(messageByType, auditLogable);
        return new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
    }
}
#method_after
private static AuditLog createAuditLog(AuditLogableBase auditLogable, AuditLogType logType, String loggerString, AuditLogSeverity severity) {
    // handle external log messages invoked by plugins via the API
    if (auditLogable.isExternal()) {
        // message is sent as an argument, no need to resolve.
        String resolvedMessage = loggerString;
        return new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmIdRef() != null ? getDbFacadeInstance().getVmDao().get(auditLogable.getVmIdRef()).getName() : null, auditLogable.getVdsIdRef(), auditLogable.getVdsIdRef() != null ? getDbFacadeInstance().getVdsDao().get(auditLogable.getVdsIdRef()).getName() : null, auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateIdRef() != null ? getDbFacadeInstance().getVmTemplateDao().get(auditLogable.getVmTemplateIdRef()).getName() : null, auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
    }
    final String messageByType = getMessageOrNull(logType);
    if (messageByType == null) {
        return null;
    } else {
        // Application log message from AuditLogMessages
        String resolvedMessage = resolveMessage(messageByType, auditLogable);
        return new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
    }
}
#end_block

#method_before
@Test
public void testBuildModel() {
    VmModelBehaviorBase behavior = getBehavior();
    UnitVmModel model = createModel(behavior);
    behavior.buildModel(getVm());
    verifyBuiltModel(model);
}
#method_after
@Test
public void testBuildModel() {
    VmModelBehaviorBase behavior = getBehavior();
    final UnitVmModel model = createModel(behavior);
    behavior.buildModel(getVm(), new BuilderExecutor.BuilderExecutionFinished<VmBase, UnitVmModel>() {

        @Override
        public void finished(VmBase source, UnitVmModel destination) {
            verifyBuiltModel(model);
        }
    });
}
#end_block

#method_before
private void setDetailList() {
    vmGeneralModel.setIsAvailable(false);
    vmSnapshotListModel.setIsAvailable(false);
    vmMonitorModel.setIsAvailable(false);
    vmDiskListModel.setIsAvailable(false);
    vmInterfaceListModel.setIsAvailable(false);
    poolGeneralModel.setIsAvailable(false);
    poolDiskListModel.setIsAvailable(false);
    poolInterfaceListModel.setIsAvailable(false);
    permissionListModel.setIsAvailable(true);
    vmEventListModel.setIsAvailable(true);
    vmAppListModel.setIsAvailable(true);
    vmSessionsModel.setIsAvailable(true);
    List<EntityModel> list = new ArrayList<EntityModel>();
    list.add(vmGeneralModel);
    list.add(poolGeneralModel);
    list.add(vmInterfaceListModel);
    list.add(poolInterfaceListModel);
    list.add(vmDiskListModel);
    list.add(poolDiskListModel);
    list.add(vmSnapshotListModel);
    list.add(permissionListModel);
    list.add(vmEventListModel);
    list.add(vmAppListModel);
    list.add(vmMonitorModel);
    list.add(vmSessionsModel);
    setDetailModels(list);
}
#method_after
private void setDetailList() {
    vmGeneralModel.setIsAvailable(false);
    vmSnapshotListModel.setIsAvailable(false);
    vmMonitorModel.setIsAvailable(false);
    vmDiskListModel.setIsAvailable(false);
    vmInterfaceListModel.setIsAvailable(false);
    poolGeneralModel.setIsAvailable(false);
    poolDiskListModel.setIsAvailable(false);
    poolInterfaceListModel.setIsAvailable(false);
    permissionListModel.setIsAvailable(true);
    vmEventListModel.setIsAvailable(true);
    vmAppListModel.setIsAvailable(true);
    vmSessionsModel.setIsAvailable(true);
    List<HasEntity<?>> /* extends VmOrPool */
    list = new ArrayList<>();
    list.add(vmGeneralModel);
    list.add(poolGeneralModel);
    list.add(vmInterfaceListModel);
    list.add(poolInterfaceListModel);
    list.add(vmDiskListModel);
    list.add(poolDiskListModel);
    list.add(vmSnapshotListModel);
    list.add(permissionListModel);
    list.add(vmEventListModel);
    list.add(vmAppListModel);
    list.add(vmMonitorModel);
    list.add(vmSessionsModel);
    setDetailModels((List) list);
}
#end_block

#method_before
private void setDetailList(final InstanceTypeGeneralModel instanceTypeGeneralModel) {
    List<EntityModel> list = new ArrayList<EntityModel>();
    list.add(instanceTypeGeneralModel);
    setDetailModels(list);
}
#method_after
private void setDetailList(final InstanceTypeGeneralModel instanceTypeGeneralModel) {
    List<HasEntity<InstanceType>> list = new ArrayList<>();
    list.add(instanceTypeGeneralModel);
    setDetailModels(list);
}
#end_block

#method_before
private void editInstanceType() {
    createWindow(new ExistingInstanceTypeModelBehavior((InstanceType) getSelectedItem()), // $NON-NLS-1$
    "edit_instance_type", // $NON-NLS-1$
    "OnEditInstanceType", false, ConstantsManager.getInstance().getConstants().editInstanceTypeTitle(), HelpTag.edit_instance_type);
}
#method_after
private void editInstanceType() {
    createWindow(new ExistingInstanceTypeModelBehavior(getSelectedItem()), // $NON-NLS-1$
    "edit_instance_type", // $NON-NLS-1$
    "OnEditInstanceType", false, ConstantsManager.getInstance().getConstants().editInstanceTypeTitle(), HelpTag.edit_instance_type);
}
#end_block

#method_before
private void deleteInstanceType() {
    if (getWindow() != null) {
        return;
    }
    final ConfirmationModel window = new ConfirmationModel();
    setConfirmWindow(window);
    window.startProgress(null);
    window.setHelpTag(HelpTag.remove_instance_type);
    // $NON-NLS-1$
    window.setHashName("remove_instance_type");
    final Guid instanceTypeId = ((InstanceType) getSelectedItem()).getId();
    Frontend.getInstance().runQuery(VdcQueryType.GetVmsByInstanceTypeId, new IdQueryParameters(instanceTypeId), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object parentModel, Object returnValue) {
            List<VM> vmsAttachedToInstanceType = ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (vmsAttachedToInstanceType == null || vmsAttachedToInstanceType.size() == 0) {
                window.setTitle(ConstantsManager.getInstance().getConstants().removeInstanceTypeTitle());
                window.setItems(Arrays.asList(((InstanceType) getSelectedItem()).getName()));
            } else {
                List<String> attachedVmsNames = new ArrayList<String>();
                for (VM vm : vmsAttachedToInstanceType) {
                    attachedVmsNames.add(vm.getName());
                }
                Collections.sort(attachedVmsNames);
                window.setItems(attachedVmsNames);
                window.getLatch().setIsAvailable(true);
                window.getLatch().setIsChangable(true);
                window.setNote(ConstantsManager.getInstance().getConstants().vmsAttachedToInstanceTypeNote());
                window.setMessage(ConstantsManager.getInstance().getConstants().vmsAttachedToInstanceTypeWarningMessage());
            }
            window.stopProgress();
        }
    }));
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnDeleteInstanceType", this);
    window.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    window.getCommands().add(tempVar2);
}
#method_after
private void deleteInstanceType() {
    if (getWindow() != null) {
        return;
    }
    final ConfirmationModel window = new ConfirmationModel();
    setConfirmWindow(window);
    window.startProgress(null);
    window.setHelpTag(HelpTag.remove_instance_type);
    // $NON-NLS-1$
    window.setHashName("remove_instance_type");
    final Guid instanceTypeId = getSelectedItem().getId();
    Frontend.getInstance().runQuery(VdcQueryType.GetVmsByInstanceTypeId, new IdQueryParameters(instanceTypeId), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object parentModel, Object returnValue) {
            List<VM> vmsAttachedToInstanceType = ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (vmsAttachedToInstanceType == null || vmsAttachedToInstanceType.size() == 0) {
                window.setTitle(ConstantsManager.getInstance().getConstants().removeInstanceTypeTitle());
                window.setItems(Arrays.asList(getSelectedItem().getName()));
            } else {
                List<String> attachedVmsNames = new ArrayList<String>();
                for (VM vm : vmsAttachedToInstanceType) {
                    attachedVmsNames.add(vm.getName());
                }
                Collections.sort(attachedVmsNames);
                window.setItems(attachedVmsNames);
                window.getLatch().setIsAvailable(true);
                window.getLatch().setIsChangable(true);
                window.setNote(ConstantsManager.getInstance().getConstants().vmsAttachedToInstanceTypeNote());
                window.setMessage(ConstantsManager.getInstance().getConstants().vmsAttachedToInstanceTypeWarningMessage());
            }
            window.stopProgress();
        }
    }));
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnDeleteInstanceType", this);
    window.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    window.getCommands().add(tempVar2);
}
#end_block

#method_before
private void onDeleteInstanceType() {
    final ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    boolean latchChecked = !model.validate();
    if (model.getProgress() != null || latchChecked) {
        return;
    }
    model.startProgress(null);
    Guid instanceTypeId = ((InstanceType) getSelectedItem()).getId();
    Frontend.getInstance().runAction(VdcActionType.RemoveVmTemplate, new VmTemplateParametersBase(instanceTypeId), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            model.stopProgress();
            cancel();
        }
    }, this);
}
#method_after
private void onDeleteInstanceType() {
    final ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    boolean latchChecked = !model.validate();
    if (model.getProgress() != null || latchChecked) {
        return;
    }
    model.startProgress(null);
    Guid instanceTypeId = getSelectedItem().getId();
    Frontend.getInstance().runAction(VdcActionType.RemoveVmTemplate, new VmTemplateParametersBase(instanceTypeId), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            model.stopProgress();
            cancel();
        }
    }, this);
}
#end_block

#method_before
// Main List Model
@Provides
@Singleton
public MainModelProvider<VM, VmListModel> getVmListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<AssignTagsPopupPresenterWidget> assignTagsPopupProvider, final Provider<VmMakeTemplatePopupPresenterWidget> makeTemplatePopupProvider, final Provider<VmRunOncePopupPresenterWidget> runOncePopupProvider, final Provider<VmChangeCDPopupPresenterWidget> changeCDPopupProvider, final Provider<VmExportPopupPresenterWidget> exportPopupProvider, final Provider<VmSnapshotCreatePopupPresenterWidget> createSnapshotPopupProvider, final Provider<VmMigratePopupPresenterWidget> migratePopupProvider, final Provider<VmPopupPresenterWidget> newVmPopupProvider, final Provider<GuidePopupPresenterWidget> guidePopupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider, final Provider<VmRemovePopupPresenterWidget> vmRemoveConfirmPopupProvider, final Provider<ReportPresenterWidget> reportWindowProvider, final Provider<ConsolePopupPresenterWidget> consolePopupProvider, final Provider<VncInfoPopupPresenterWidget> vncWindoProvider, final Provider<VmNextRunConfigurationPresenterWidget> nextRunProvider, final Provider<ImportVmsPopupPresenterWidget> importVmsProvider, final Provider<ImportCloneDialogPresenterWidget> importClonePopupProvider, final Provider<CloneVmPopupPresenterWidget> cloneVmProvider, final Provider<ImportVmFromExportDomainPopupPresenterWidget> importVmFromExportDomainPopupProvider, final Provider<VmListModel> modelProvider, final Provider<CommonModel> commonModelProvider, final Provider<VmDiskPopupPresenterWidget> newDiskPopupProvider, final Provider<SingleSelectionVmDiskAttachPopupPresenterWidget> attachDiskPopupProvider, final Provider<VmDiskRemovePopupPresenterWidget> removeDiskConfirmPopupProvider) {
    MainTabModelProvider<VM, VmListModel> result = new MainTabModelProvider<VM, VmListModel>(eventBus, defaultConfirmPopupProvider, commonModelProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getAssignTagsCommand()) {
                return assignTagsPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getNewTemplateCommand()) {
                return makeTemplatePopupProvider.get();
            } else if (lastExecutedCommand == getModel().getRunOnceCommand()) {
                return runOncePopupProvider.get();
            } else if (lastExecutedCommand == getModel().getChangeCdCommand()) {
                return changeCDPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getExportCommand()) {
                return exportPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getCreateSnapshotCommand()) {
                return createSnapshotPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getMigrateCommand()) {
                return migratePopupProvider.get();
            } else if (lastExecutedCommand == getModel().getEditCommand() || lastExecutedCommand == getModel().getNewVmCommand() || "OnSave".equals(lastExecutedCommand.getName())) {
                // $NON-NLS-1$
                if (windowModel instanceof AttachDiskModel) {
                    return attachDiskPopupProvider.get();
                } else if ((windowModel instanceof NewDiskModel) || (windowModel instanceof EditDiskModel)) {
                    return newDiskPopupProvider.get();
                } else {
                    return newVmPopupProvider.get();
                }
            } else if (lastExecutedCommand == getModel().getGuideCommand()) {
                return guidePopupProvider.get();
            } else if (windowModel instanceof VncInfoModel) {
                return vncWindoProvider.get();
            } else if (lastExecutedCommand == getModel().getEditConsoleCommand()) {
                return consolePopupProvider.get();
            } else if (lastExecutedCommand == getModel().getCloneVmCommand()) {
                return cloneVmProvider.get();
            } else if (lastExecutedCommand == getModel().getImportVmCommand() || windowModel instanceof ImportVmsModel) {
                return importVmsProvider.get();
            } else if (windowModel instanceof ImportVmFromExportDomainModel) {
                return importVmFromExportDomainPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VmListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveCommand()) {
                return vmRemoveConfirmPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getStopCommand() || lastExecutedCommand == getModel().getShutdownCommand()) {
                return removeConfirmPopupProvider.get();
            } else if (source.getConfirmWindow() instanceof ImportCloneModel) {
                return importClonePopupProvider.get();
            } else if ("OnSave".equals(lastExecutedCommand.getName())) {
                // $NON-NLS-1$
                return nextRunProvider.get();
            } else if (lastExecutedCommand == getModel().getEditCommand()) {
                return removeDiskConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }

        @Override
        protected ModelBoundPresenterWidget<? extends Model> getModelBoundWidget(UICommand lastExecutedCommand) {
            if (lastExecutedCommand instanceof ReportCommand) {
                return reportWindowProvider.get();
            } else {
                return super.getModelBoundWidget(lastExecutedCommand);
            }
        }
    };
    result.setModelProvider(modelProvider);
    return result;
}
#method_after
// Main List Model
@Provides
@Singleton
public MainModelProvider<VM, VmListModel<Void>> getVmListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<AssignTagsPopupPresenterWidget> assignTagsPopupProvider, final Provider<VmMakeTemplatePopupPresenterWidget> makeTemplatePopupProvider, final Provider<VmRunOncePopupPresenterWidget> runOncePopupProvider, final Provider<VmChangeCDPopupPresenterWidget> changeCDPopupProvider, final Provider<VmExportPopupPresenterWidget> exportPopupProvider, final Provider<VmSnapshotCreatePopupPresenterWidget> createSnapshotPopupProvider, final Provider<VmMigratePopupPresenterWidget> migratePopupProvider, final Provider<VmPopupPresenterWidget> newVmPopupProvider, final Provider<GuidePopupPresenterWidget> guidePopupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider, final Provider<VmRemovePopupPresenterWidget> vmRemoveConfirmPopupProvider, final Provider<ReportPresenterWidget> reportWindowProvider, final Provider<ConsolePopupPresenterWidget> consolePopupProvider, final Provider<VncInfoPopupPresenterWidget> vncWindoProvider, final Provider<VmNextRunConfigurationPresenterWidget> nextRunProvider, final Provider<ImportVmsPopupPresenterWidget> importVmsProvider, final Provider<ImportCloneDialogPresenterWidget> importClonePopupProvider, final Provider<CloneVmPopupPresenterWidget> cloneVmProvider, final Provider<ImportVmFromExportDomainPopupPresenterWidget> importVmFromExportDomainPopupProvider, final Provider<VmListModel<Void>> modelProvider, final Provider<CommonModel> commonModelProvider, final Provider<VmDiskPopupPresenterWidget> newDiskPopupProvider, final Provider<SingleSelectionVmDiskAttachPopupPresenterWidget> attachDiskPopupProvider, final Provider<VmDiskRemovePopupPresenterWidget> removeDiskConfirmPopupProvider) {
    MainTabModelProvider<VM, VmListModel<Void>> result = new MainTabModelProvider<VM, VmListModel<Void>>(eventBus, defaultConfirmPopupProvider, commonModelProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmListModel<Void> source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getAssignTagsCommand()) {
                return assignTagsPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getNewTemplateCommand()) {
                return makeTemplatePopupProvider.get();
            } else if (lastExecutedCommand == getModel().getRunOnceCommand()) {
                return runOncePopupProvider.get();
            } else if (lastExecutedCommand == getModel().getChangeCdCommand()) {
                return changeCDPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getExportCommand()) {
                return exportPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getCreateSnapshotCommand()) {
                return createSnapshotPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getMigrateCommand()) {
                return migratePopupProvider.get();
            } else if (lastExecutedCommand == getModel().getEditCommand() || lastExecutedCommand == getModel().getNewVmCommand() || "OnSave".equals(lastExecutedCommand.getName())) {
                // $NON-NLS-1$
                if (windowModel instanceof AttachDiskModel) {
                    return attachDiskPopupProvider.get();
                } else if ((windowModel instanceof NewDiskModel) || (windowModel instanceof EditDiskModel)) {
                    return newDiskPopupProvider.get();
                } else {
                    return newVmPopupProvider.get();
                }
            } else if (lastExecutedCommand == getModel().getGuideCommand()) {
                return guidePopupProvider.get();
            } else if (windowModel instanceof VncInfoModel) {
                return vncWindoProvider.get();
            } else if (lastExecutedCommand == getModel().getEditConsoleCommand()) {
                return consolePopupProvider.get();
            } else if (lastExecutedCommand == getModel().getCloneVmCommand()) {
                return cloneVmProvider.get();
            } else if (lastExecutedCommand == getModel().getImportVmCommand() || windowModel instanceof ImportVmsModel) {
                return importVmsProvider.get();
            } else if (windowModel instanceof ImportVmFromExportDomainModel) {
                return importVmFromExportDomainPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VmListModel<Void> source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveCommand()) {
                return vmRemoveConfirmPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getStopCommand() || lastExecutedCommand == getModel().getShutdownCommand()) {
                return removeConfirmPopupProvider.get();
            } else if (source.getConfirmWindow() instanceof ImportCloneModel) {
                return importClonePopupProvider.get();
            } else if ("OnSave".equals(lastExecutedCommand.getName())) {
                // $NON-NLS-1$
                return nextRunProvider.get();
            } else if (lastExecutedCommand == getModel().getEditCommand()) {
                return removeDiskConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }

        @Override
        protected ModelBoundPresenterWidget<? extends Model> getModelBoundWidget(UICommand lastExecutedCommand) {
            if (lastExecutedCommand instanceof ReportCommand) {
                return reportWindowProvider.get();
            } else {
                return super.getModelBoundWidget(lastExecutedCommand);
            }
        }
    };
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Provides
@Singleton
public SearchableDetailModelProvider<Disk, VmListModel, VmDiskListModel> getVmDiskListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VmDiskPopupPresenterWidget> popupProvider, final Provider<VmDiskAttachPopupPresenterWidget> attachPopupProvider, final Provider<VmDiskRemovePopupPresenterWidget> removeConfirmPopupProvider, final Provider<DisksAllocationPopupPresenterWidget> movePopupProvider, final Provider<ChangeQuotaPopupPresenterWidget> changeQutoaPopupProvider, final Provider<VmListModel> mainModelProvider, final Provider<VmDiskListModel> modelProvider) {
    SearchableDetailTabModelProvider<Disk, VmListModel, VmDiskListModel> result = new SearchableDetailTabModelProvider<Disk, VmListModel, VmDiskListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmDiskListModel source, UICommand lastExecutedCommand, Model windowModel) {
            VmDiskListModel model = getModel();
            if (lastExecutedCommand == model.getNewCommand() || lastExecutedCommand == model.getEditCommand()) {
                return popupProvider.get();
            } else if (lastExecutedCommand == getModel().getAttachCommand()) {
                return attachPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getMoveCommand()) {
                return movePopupProvider.get();
            } else if (lastExecutedCommand == getModel().getChangeQuotaCommand()) {
                return changeQutoaPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VmDiskListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#method_after
@Provides
@Singleton
public SearchableDetailModelProvider<Disk, VmListModel<Void>, VmDiskListModel> getVmDiskListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VmDiskPopupPresenterWidget> popupProvider, final Provider<VmDiskAttachPopupPresenterWidget> attachPopupProvider, final Provider<VmDiskRemovePopupPresenterWidget> removeConfirmPopupProvider, final Provider<DisksAllocationPopupPresenterWidget> movePopupProvider, final Provider<ChangeQuotaPopupPresenterWidget> changeQutoaPopupProvider, final Provider<VmListModel<Void>> mainModelProvider, final Provider<VmDiskListModel> modelProvider) {
    SearchableDetailTabModelProvider<Disk, VmListModel<Void>, VmDiskListModel> result = new SearchableDetailTabModelProvider<Disk, VmListModel<Void>, VmDiskListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmDiskListModel source, UICommand lastExecutedCommand, Model windowModel) {
            VmDiskListModel model = getModel();
            if (lastExecutedCommand == model.getNewCommand() || lastExecutedCommand == model.getEditCommand()) {
                return popupProvider.get();
            } else if (lastExecutedCommand == getModel().getAttachCommand()) {
                return attachPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getMoveCommand()) {
                return movePopupProvider.get();
            } else if (lastExecutedCommand == getModel().getChangeQuotaCommand()) {
                return changeQutoaPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VmDiskListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Provides
@Singleton
public SearchableDetailModelProvider<VmNetworkInterface, VmListModel, VmInterfaceListModel> getVmInterfaceListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VmInterfacePopupPresenterWidget> popupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider, final Provider<VmListModel> mainModelProvider, final Provider<VmInterfaceListModel> modelProvider) {
    SearchableDetailTabModelProvider<VmNetworkInterface, VmListModel, VmInterfaceListModel> result = new SearchableDetailTabModelProvider<VmNetworkInterface, VmListModel, VmInterfaceListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmInterfaceListModel source, UICommand lastExecutedCommand, Model windowModel) {
            VmInterfaceListModel model = getModel();
            if (lastExecutedCommand == model.getNewCommand() || lastExecutedCommand == model.getEditCommand()) {
                return popupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VmInterfaceListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#method_after
@Provides
@Singleton
public SearchableDetailModelProvider<VmNetworkInterface, VmListModel<Void>, VmInterfaceListModel> getVmInterfaceListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VmInterfacePopupPresenterWidget> popupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider, final Provider<VmListModel<Void>> mainModelProvider, final Provider<VmInterfaceListModel> modelProvider) {
    SearchableDetailTabModelProvider<VmNetworkInterface, VmListModel<Void>, VmInterfaceListModel> result = new SearchableDetailTabModelProvider<VmNetworkInterface, VmListModel<Void>, VmInterfaceListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmInterfaceListModel source, UICommand lastExecutedCommand, Model windowModel) {
            VmInterfaceListModel model = getModel();
            if (lastExecutedCommand == model.getNewCommand() || lastExecutedCommand == model.getEditCommand()) {
                return popupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VmInterfaceListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Provides
@Singleton
public SearchableDetailModelProvider<AuditLog, VmListModel, VmEventListModel> getVmEventListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<EventPopupPresenterWidget> eventPopupProvider, final Provider<VmListModel> mainModelProvider, final Provider<VmEventListModel> modelProvider) {
    SearchableDetailTabModelProvider<AuditLog, VmListModel, VmEventListModel> result = new SearchableDetailTabModelProvider<AuditLog, VmListModel, VmEventListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmEventListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand.equals(getModel().getDetailsCommand())) {
                return eventPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#method_after
@Provides
@Singleton
public SearchableDetailModelProvider<AuditLog, VmListModel<Void>, VmEventListModel> getVmEventListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<EventPopupPresenterWidget> eventPopupProvider, final Provider<VmListModel<Void>> mainModelProvider, final Provider<VmEventListModel> modelProvider) {
    SearchableDetailTabModelProvider<AuditLog, VmListModel<Void>, VmEventListModel> result = new SearchableDetailTabModelProvider<AuditLog, VmListModel<Void>, VmEventListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmEventListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand.equals(getModel().getDetailsCommand())) {
                return eventPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Provides
@Singleton
public SearchableDetailModelProvider<Snapshot, VmListModel, VmSnapshotListModel> getVmSnapshotListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VmSnapshotCreatePopupPresenterWidget> createPopupProvider, final Provider<VmClonePopupPresenterWidget> cloneVmPopupProvider, final Provider<VmSnapshotPreviewPopupPresenterWidget> previewPopupProvider, final Provider<VmSnapshotCustomPreviewPopupPresenterWidget> customPreviewPopupProvider, final Provider<VmListModel> mainModelProvider, final Provider<VmSnapshotListModel> modelProvider) {
    SearchableDetailTabModelProvider<Snapshot, VmListModel, VmSnapshotListModel> result = new SearchableDetailTabModelProvider<Snapshot, VmListModel, VmSnapshotListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmSnapshotListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getNewCommand()) {
                return createPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getCloneVmCommand()) {
                getModel().setSystemTreeSelectedItem(this.getMainModel().getSystemTreeSelectedItem());
                return cloneVmPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getPreviewCommand()) {
                return previewPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getCustomPreviewCommand()) {
                return customPreviewPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#method_after
@Provides
@Singleton
public SearchableDetailModelProvider<Snapshot, VmListModel<Void>, VmSnapshotListModel> getVmSnapshotListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VmSnapshotCreatePopupPresenterWidget> createPopupProvider, final Provider<VmClonePopupPresenterWidget> cloneVmPopupProvider, final Provider<VmSnapshotPreviewPopupPresenterWidget> previewPopupProvider, final Provider<VmSnapshotCustomPreviewPopupPresenterWidget> customPreviewPopupProvider, final Provider<VmListModel<Void>> mainModelProvider, final Provider<VmSnapshotListModel> modelProvider) {
    SearchableDetailTabModelProvider<Snapshot, VmListModel<Void>, VmSnapshotListModel> result = new SearchableDetailTabModelProvider<Snapshot, VmListModel<Void>, VmSnapshotListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmSnapshotListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getNewCommand()) {
                return createPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getCloneVmCommand()) {
                getModel().setSystemTreeSelectedItem(this.getMainModel().getSystemTreeSelectedItem());
                return cloneVmPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getPreviewCommand()) {
                return previewPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getCustomPreviewCommand()) {
                return customPreviewPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Provides
@Singleton
public SearchableDetailModelProvider<AffinityGroup, VmListModel, VmAffinityGroupListModel> getAffinityGroupListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<AffinityGroupPopupPresenterWidget> popupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider, final Provider<VmListModel> mainModelProvider, final Provider<VmAffinityGroupListModel> modelProvider) {
    SearchableDetailTabModelProvider<AffinityGroup, VmListModel, VmAffinityGroupListModel> result = new SearchableDetailTabModelProvider<AffinityGroup, VmListModel, VmAffinityGroupListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmAffinityGroupListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getNewCommand() || lastExecutedCommand == getModel().getEditCommand()) {
                return popupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VmAffinityGroupListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#method_after
@Provides
@Singleton
public SearchableDetailModelProvider<AffinityGroup, VmListModel<Void>, VmAffinityGroupListModel> getAffinityGroupListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<AffinityGroupPopupPresenterWidget> popupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider, final Provider<VmListModel<Void>> mainModelProvider, final Provider<VmAffinityGroupListModel> modelProvider) {
    SearchableDetailTabModelProvider<AffinityGroup, VmListModel<Void>, VmAffinityGroupListModel> result = new SearchableDetailTabModelProvider<AffinityGroup, VmListModel<Void>, VmAffinityGroupListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VmAffinityGroupListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getNewCommand() || lastExecutedCommand == getModel().getEditCommand()) {
                return popupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VmAffinityGroupListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Override
protected void configure() {
    bind(VmListModel.class).in(Singleton.class);
    bind(VmGeneralModel.class).in(Singleton.class);
    bind(VmSessionsModel.class).in(Singleton.class);
    bind(VmDiskListModel.class).in(Singleton.class);
    bind(VmInterfaceListModel.class).in(Singleton.class);
    bind(VmEventListModel.class).in(Singleton.class);
    bind(VmSnapshotListModel.class).in(Singleton.class);
    bind(VmAffinityGroupListModel.class).in(Singleton.class);
    bind(VmAppListModel.class).in(Singleton.class);
    bind(new TypeLiteral<PermissionListModel<VmListModel>>() {
    }).in(Singleton.class);
    // Form Detail Models
    bind(new TypeLiteral<DetailModelProvider<VmListModel, VmGeneralModel>>() {
    }).to(new TypeLiteral<DetailTabModelProvider<VmListModel, VmGeneralModel>>() {
    }).in(Singleton.class);
    bind(new TypeLiteral<DetailModelProvider<VmListModel, VmSessionsModel>>() {
    }).to(new TypeLiteral<DetailTabModelProvider<VmListModel, VmSessionsModel>>() {
    }).in(Singleton.class);
    // Search-able Detail Models
    bind(new TypeLiteral<SearchableDetailModelProvider<String, VmListModel, VmAppListModel>>() {
    }).to(new TypeLiteral<SearchableDetailTabModelProvider<String, VmListModel, VmAppListModel>>() {
    }).in(Singleton.class);
    // Permission Detail Model
    bind(new TypeLiteral<SearchableDetailModelProvider<Permissions, VmListModel, PermissionListModel<VmListModel>>>() {
    }).to(new TypeLiteral<PermissionModelProvider<VmListModel>>() {
    }).in(Singleton.class);
}
#method_after
@Override
protected void configure() {
    bind(new TypeLiteral<VmListModel<Void>>() {
    }).in(Singleton.class);
    bind(VmGeneralModel.class).in(Singleton.class);
    bind(VmSessionsModel.class).in(Singleton.class);
    bind(VmDiskListModel.class).in(Singleton.class);
    bind(VmInterfaceListModel.class).in(Singleton.class);
    bind(VmEventListModel.class).in(Singleton.class);
    bind(VmSnapshotListModel.class).in(Singleton.class);
    bind(VmAffinityGroupListModel.class).in(Singleton.class);
    bind(new TypeLiteral<VmAppListModel<VM>>() {
    }).in(Singleton.class);
    bind(new TypeLiteral<PermissionListModel<VM>>() {
    }).in(Singleton.class);
    // Form Detail Models
    bind(new TypeLiteral<DetailModelProvider<VmListModel<Void>, VmGeneralModel>>() {
    }).to(new TypeLiteral<DetailTabModelProvider<VmListModel<Void>, VmGeneralModel>>() {
    }).in(Singleton.class);
    bind(new TypeLiteral<DetailModelProvider<VmListModel<Void>, VmSessionsModel>>() {
    }).to(new TypeLiteral<DetailTabModelProvider<VmListModel<Void>, VmSessionsModel>>() {
    }).in(Singleton.class);
    // Search-able Detail Models
    bind(new TypeLiteral<SearchableDetailModelProvider<String, VmListModel<Void>, VmAppListModel<VM>>>() {
    }).to(new TypeLiteral<SearchableDetailTabModelProvider<String, VmListModel<Void>, VmAppListModel<VM>>>() {
    }).in(Singleton.class);
    // Permission Detail Model
    bind(new TypeLiteral<SearchableDetailModelProvider<Permissions, VmListModel<Void>, PermissionListModel<VM>>>() {
    }).to(new TypeLiteral<PermissionModelProvider<VM, VmListModel<Void>>>() {
    }).in(Singleton.class);
}
#end_block

#method_before
@Override
public void templateWithVersion_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    buildModel(vm.getStaticData());
    getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsRunAndPause().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getCpuSharesAmount().setEntity(vm.getCpuShares());
    updateCpuSharesSelection();
    updateRngDevice(getVm().getId());
    updateTimeZone(vm.getTimeZone());
    updateGraphics();
    getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
    getModel().getCpuPinning().setEntity(vm.getCpuPinning());
    getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties());
    if (isHotSetCpuSupported()) {
        // cancel related events while fetching data
        getModel().getTotalCPUCores().getEntityChangedEvent().removeListener(getModel());
        getModel().getCoresPerSocket().getSelectedItemChangedEvent().removeListener(getModel());
        getModel().getNumOfSockets().getSelectedItemChangedEvent().removeListener(getModel());
        AsyncDataProvider.getInstance().getHostById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                ExistingVmModelBehavior existingVmModelBehavior = (ExistingVmModelBehavior) model;
                runningOnHost = (VDS) returnValue;
                hostCpu = calculateHostCpus();
                existingVmModelBehavior.updateNumOfSockets();
            }
        }), vm.getRunOnVds());
    }
    updateCpuProfile(vm.getVdsGroupId(), vm.getVdsGroupCompatibilityVersion(), vm.getCpuProfileId());
}
#method_after
@Override
public void templateWithVersion_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    buildModel(vm.getStaticData(), new BuilderExecutor.BuilderExecutionFinished<VmBase, UnitVmModel>() {

        @Override
        public void finished(VmBase source, UnitVmModel destination) {
            getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
            getModel().getIsRunAndPause().setIsAvailable(vm.getVmPoolId() == null);
            getModel().getCpuSharesAmount().setEntity(vm.getCpuShares());
            updateCpuSharesSelection();
            updateRngDevice(getVm().getId());
            updateTimeZone(vm.getTimeZone());
            updateGraphics();
            getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
            // Storage domain and provisioning are not available for an existing VM.
            getModel().getStorageDomain().setIsChangable(false);
            getModel().getProvisioning().setIsAvailable(false);
            getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
            getModel().getCpuPinning().setEntity(vm.getCpuPinning());
            getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties());
            if (isHotSetCpuSupported()) {
                // cancel related events while fetching data
                getModel().getTotalCPUCores().getEntityChangedEvent().removeListener(getModel());
                getModel().getCoresPerSocket().getSelectedItemChangedEvent().removeListener(getModel());
                getModel().getNumOfSockets().getSelectedItemChangedEvent().removeListener(getModel());
                AsyncDataProvider.getInstance().getHostById(new AsyncQuery(this, new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object model, Object returnValue) {
                        ExistingVmModelBehavior existingVmModelBehavior = (ExistingVmModelBehavior) model;
                        runningOnHost = (VDS) returnValue;
                        hostCpu = calculateHostCpus();
                        existingVmModelBehavior.updateNumOfSockets();
                    }
                }), vm.getRunOnVds());
            }
            updateCpuProfile(vm.getVdsGroupId(), vm.getVdsGroupCompatibilityVersion(), vm.getCpuProfileId());
        }
    });
}
#end_block

#method_before
@Override
protected void buildModel(VmBase vm) {
    BuilderExecutor.build(vm, getModel(), new NameAndDescriptionVmBaseToUnitBuilder(), new CommentVmBaseToUnitBuilder(), new CommonVmBaseToUnitBuilder());
}
#method_after
@Override
protected void buildModel(VmBase vm, BuilderExecutor.BuilderExecutionFinished<VmBase, UnitVmModel> callback) {
    new BuilderExecutor<>(callback, new NameAndDescriptionVmBaseToUnitBuilder(), new CommentVmBaseToUnitBuilder(), new CommonVmBaseToUnitBuilder()).build(vm, getModel());
}
#end_block

#method_before
@Override
public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVmType()) {
            vmTypeChanged();
        } else if (sender == getDataCenterWithClustersList()) {
            dataCenterWithClusterSelectedItemChanged(sender, args);
            updateDisplayAndGraphics();
            updateMemoryBalloonDevice();
            initUsbPolicy();
            behavior.updateEmulatedMachines();
            behavior.updateCustomCpu();
        } else if (sender == getTemplateWithVersion()) {
            templateWithVersion_SelectedItemChanged(sender, args);
        } else if (sender == getTimeZone()) {
            timeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            defaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            getBehavior().deactivateInstanceTypeManager(new InstanceTypeManager.ActivatedListener() {

                @Override
                public void activated() {
                    if (getBehavior().getInstanceTypeManager() != null && !getBehavior().basedOnCustomInstanceType()) {
                        getBehavior().getInstanceTypeManager().updateFildsAfterOsChanged();
                    }
                }
            });
            oSType_SelectedItemChanged(sender, args);
            getBehavior().oSType_SelectedItemChanged();
            getVmInitModel().osTypeChanged(getOSType().getSelectedItem());
            updateDisplayAndGraphics();
            updateMemoryBalloonDevice();
            initUsbPolicy();
            getBehavior().activateInstanceTypeManager();
        } else if (sender == getFirstBootDevice()) {
            firstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayType()) {
            displayTypeSelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getGraphicsType()) {
            upgradeGraphicsRelatedModels();
            initUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            numOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            coresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
            behavior.updateNumaEnabled();
        } else if (sender == getCpuSharesAmountSelection()) {
            behavior.updateCpuSharesAmountChangeability();
        } else if (sender == getBaseTemplate()) {
            behavior.baseTemplateSelectedItemChanged();
        }
    } else if (ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) {
        if (sender == getVmInitEnabled()) {
            vmInitEnabledChanged();
        } else if (sender == getMemSize()) {
            memSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            totalCPUCores_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
            behavior.updateNumaEnabled();
        } else if (sender == getProvisioning()) {
            provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if (getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if (getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        } else if (sender == getWatchdogModel()) {
            WatchdogModel_EntityChanged(sender, args);
        } else if (sender == getIsHighlyAvailable()) {
            behavior.updateMigrationAvailability();
        } else if (sender == getOverrideMigrationDowntime()) {
            overrideMigrationDowntimeChanged();
        } else if (sender == getIsSubTemplate()) {
            behavior.isSubTemplateEntityChanged();
        } else if (sender == getHostCpu()) {
            if (getHostCpu().getEntity() != null && getHostCpu().getEntity()) {
                getCustomCpu().setIsChangable(false);
                // $NON-NLS-1$
                getCustomCpu().setSelectedItem("");
            } else {
                getCustomCpu().setIsChangable(true);
            }
        }
    }
}
#method_after
@Override
public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVmType()) {
            vmTypeChanged();
        } else if (sender == getDataCenterWithClustersList()) {
            dataCenterWithClusterSelectedItemChanged(sender, args);
            updateDisplayAndGraphics();
            updateMemoryBalloonDevice();
            initUsbPolicy();
            behavior.updateEmulatedMachines();
            behavior.updateCustomCpu();
        } else if (sender == getTemplateWithVersion()) {
            templateWithVersion_SelectedItemChanged(sender, args);
        } else if (sender == getTimeZone()) {
            timeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            defaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            getBehavior().deactivateInstanceTypeManager(new InstanceTypeManager.ActivatedListener() {

                @Override
                public void activated() {
                    if (getBehavior().getInstanceTypeManager() != null && !getBehavior().basedOnCustomInstanceType()) {
                        getBehavior().getInstanceTypeManager().updateFildsAfterOsChanged();
                    }
                }
            });
            oSType_SelectedItemChanged(sender, args);
            getBehavior().oSType_SelectedItemChanged();
            getVmInitModel().osTypeChanged(getOSType().getSelectedItem());
            updateDisplayAndGraphics();
            updateMemoryBalloonDevice();
            initUsbPolicy();
            getBehavior().activateInstanceTypeManager();
        } else if (sender == getFirstBootDevice()) {
            firstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayType()) {
            displayTypeSelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getGraphicsType()) {
            upgradeGraphicsRelatedModels();
            initUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            numOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            coresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
            behavior.updateNumaEnabled();
        } else if (sender == getCpuSharesAmountSelection()) {
            behavior.updateCpuSharesAmountChangeability();
        } else if (sender == getBaseTemplate()) {
            behavior.baseTemplateSelectedItemChanged();
        } else if (sender == getWatchdogModel()) {
            watchdogModelSelectedItemChanged(sender, args);
        }
    } else if (ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) {
        if (sender == getVmInitEnabled()) {
            vmInitEnabledChanged();
        } else if (sender == getMemSize()) {
            memSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            totalCPUCores_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
            behavior.updateNumaEnabled();
        } else if (sender == getProvisioning()) {
            provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if (getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if (getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        } else if (sender == getIsHighlyAvailable()) {
            behavior.updateMigrationAvailability();
        } else if (sender == getOverrideMigrationDowntime()) {
            overrideMigrationDowntimeChanged();
        } else if (sender == getIsSubTemplate()) {
            behavior.isSubTemplateEntityChanged();
        } else if (sender == getHostCpu()) {
            if (getHostCpu().getEntity() != null && getHostCpu().getEntity()) {
                getCustomCpu().setIsChangable(false);
                // $NON-NLS-1$
                getCustomCpu().setSelectedItem("");
            } else {
                getCustomCpu().setIsChangable(true);
            }
        }
    }
}
#end_block

#method_before
private void initUsbPolicy() {
    VDSGroup cluster = getSelectedCluster();
    Integer osType = getOSType().getSelectedItem();
    DisplayType displayType = getDisplayType().getSelectedItem();
    GraphicsTypes graphicsTypes = getGraphicsType().getSelectedItem();
    if (osType == null || cluster == null || displayType == null || graphicsTypes == null) {
        return;
    }
    getUsbPolicy().setIsChangable(true);
    UsbPolicy prevSelectedUsbPolicy = getUsbPolicy().getSelectedItem();
    if (Version.v3_1.compareTo(cluster.getCompatibilityVersion()) > 0) {
        if (AsyncDataProvider.getInstance().isWindowsOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED));
            getUsbPolicy().setIsChangable(false);
        }
    }
    if (Version.v3_1.compareTo(cluster.getCompatibilityVersion()) <= 0) {
        if (AsyncDataProvider.getInstance().isLinuxOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY, UsbPolicy.ENABLED_NATIVE));
        }
    }
    if (!graphicsTypes.getBackingGraphicsType().contains(GraphicsType.SPICE)) {
        getUsbPolicy().setIsChangable(false);
    }
    if (getBehavior().basedOnCustomInstanceType()) {
        Collection<UsbPolicy> policies = getUsbPolicy().getItems();
        if (policies.contains(prevSelectedUsbPolicy)) {
            getUsbPolicy().setSelectedItem(prevSelectedUsbPolicy);
        } else if (policies.size() > 0) {
            getUsbPolicy().setSelectedItem(policies.iterator().next());
        }
    }
}
#method_after
private void initUsbPolicy() {
    VDSGroup cluster = getSelectedCluster();
    Integer osType = getOSType().getSelectedItem();
    DisplayType displayType = getDisplayType().getSelectedItem();
    GraphicsTypes graphicsTypes = getGraphicsType().getSelectedItem();
    if (osType == null || cluster == null || displayType == null || graphicsTypes == null) {
        return;
    }
    getUsbPolicy().setIsChangable(true);
    UsbPolicy prevSelectedUsbPolicy = getUsbPolicy().getSelectedItem();
    if (Version.v3_1.compareTo(cluster.getCompatibilityVersion()) > 0) {
        if (AsyncDataProvider.getInstance().isWindowsOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED));
            getUsbPolicy().setIsChangable(false);
        }
    }
    if (Version.v3_1.compareTo(cluster.getCompatibilityVersion()) <= 0) {
        if (AsyncDataProvider.getInstance().isLinuxOsType(osType)) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY, UsbPolicy.ENABLED_NATIVE));
        }
    }
    if (!graphicsTypes.getBackingGraphicsTypes().contains(GraphicsType.SPICE)) {
        getUsbPolicy().setIsChangable(false);
    }
    if (getBehavior().basedOnCustomInstanceType()) {
        Collection<UsbPolicy> policies = getUsbPolicy().getItems();
        if (policies.contains(prevSelectedUsbPolicy)) {
            getUsbPolicy().setSelectedItem(prevSelectedUsbPolicy);
        } else if (policies.size() > 0) {
            getUsbPolicy().setSelectedItem(policies.iterator().next());
        }
    }
}
#end_block

#method_before
private void initVncKeyboardLayout() {
    final List<String> layouts = (List<String>) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.VncKeyboardLayoutValidValues);
    final ArrayList<String> vncKeyboardLayoutItems = new ArrayList<String>();
    // null value means the global VncKeyboardLayout from vdc_options will be used
    vncKeyboardLayoutItems.add(null);
    vncKeyboardLayoutItems.addAll(layouts);
    getVncKeyboardLayout().setItems(vncKeyboardLayoutItems);
    GraphicsTypes graphicsTypes = getGraphicsType().getSelectedItem();
    if (graphicsTypes != null) {
        getVncKeyboardLayout().setIsAvailable(graphicsTypes.getBackingGraphicsType().contains(GraphicsType.VNC));
    }
}
#method_after
private void initVncKeyboardLayout() {
    final List<String> layouts = (List<String>) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.VncKeyboardLayoutValidValues);
    final ArrayList<String> vncKeyboardLayoutItems = new ArrayList<String>();
    // null value means the global VncKeyboardLayout from vdc_options will be used
    vncKeyboardLayoutItems.add(null);
    vncKeyboardLayoutItems.addAll(layouts);
    getVncKeyboardLayout().setItems(vncKeyboardLayoutItems);
    GraphicsTypes graphicsTypes = getGraphicsType().getSelectedItem();
    if (graphicsTypes != null) {
        getVncKeyboardLayout().setIsAvailable(graphicsTypes.getBackingGraphicsTypes().contains(GraphicsType.VNC));
    }
}
#end_block

#method_before
private void handleQxlClusterLevel() {
    getBehavior().enableSinglePCI(getIsQxlSupported());
    if (getSelectedCluster() != null) {
        boolean isQxl = getDisplayType().getSelectedItem() == DisplayType.qxl;
        boolean spiceFileTransferToggle = isQxl && AsyncDataProvider.getInstance().isSpiceFileTransferToggleSupported(getSelectedCluster().getCompatibilityVersion().toString());
        if (!spiceFileTransferToggle) {
            handleQxlChangeProhibitionReason(getSpiceFileTransferEnabled(), getSelectedCluster().getCompatibilityVersion().toString(), isQxl);
        }
        getSpiceFileTransferEnabled().setIsChangable(spiceFileTransferToggle);
        GraphicsTypes selectedGraphics = getGraphicsType().getSelectedItem();
        boolean spiceCopyPasteToggle = selectedGraphics != null && selectedGraphics.getBackingGraphicsType().contains(GraphicsType.SPICE) && AsyncDataProvider.getInstance().isSpiceCopyPasteToggleSupported(getSelectedCluster().getCompatibilityVersion().toString());
        if (!spiceCopyPasteToggle) {
            handleQxlChangeProhibitionReason(getSpiceCopyPasteEnabled(), getSelectedCluster().getCompatibilityVersion().toString(), isQxl);
        }
        getSpiceCopyPasteEnabled().setIsChangable(spiceCopyPasteToggle);
    }
}
#method_after
private void handleQxlClusterLevel() {
    getBehavior().enableSinglePCI(getIsQxlSupported());
    if (getSelectedCluster() != null) {
        boolean isQxl = getDisplayType().getSelectedItem() == DisplayType.qxl;
        boolean spiceFileTransferToggle = isQxl && AsyncDataProvider.getInstance().isSpiceFileTransferToggleSupported(getSelectedCluster().getCompatibilityVersion().toString());
        if (!spiceFileTransferToggle) {
            handleQxlChangeProhibitionReason(getSpiceFileTransferEnabled(), getSelectedCluster().getCompatibilityVersion().toString(), isQxl);
        }
        getSpiceFileTransferEnabled().setIsChangable(spiceFileTransferToggle);
        GraphicsTypes selectedGraphics = getGraphicsType().getSelectedItem();
        boolean spiceCopyPasteToggle = selectedGraphics != null && selectedGraphics.getBackingGraphicsTypes().contains(GraphicsType.SPICE) && AsyncDataProvider.getInstance().isSpiceCopyPasteToggleSupported(getSelectedCluster().getCompatibilityVersion().toString());
        if (!spiceCopyPasteToggle) {
            handleQxlChangeProhibitionReason(getSpiceCopyPasteEnabled(), getSelectedCluster().getCompatibilityVersion().toString(), isQxl);
        }
        getSpiceCopyPasteEnabled().setIsChangable(spiceCopyPasteToggle);
    }
}
#end_block

#method_before
private void upgradeGraphicsRelatedModels() {
    DisplayType display = getDisplayType().getSelectedItem();
    GraphicsTypes graphics = getGraphicsType().getSelectedItem();
    if (display == null || graphics == null) {
        return;
    }
    if (display != DisplayType.qxl || !graphics.getBackingGraphicsType().contains(GraphicsType.SPICE)) {
        getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED);
        getIsSmartcardEnabled().setEntity(false);
    }
    handleQxlClusterLevel();
    getUsbPolicy().setIsChangable(graphics.getBackingGraphicsType().contains(GraphicsType.SPICE));
    getIsSmartcardEnabled().setIsChangable(graphics.getBackingGraphicsType().contains(GraphicsType.SPICE));
    getVncKeyboardLayout().setIsAvailable(graphics.getBackingGraphicsType().contains(GraphicsType.VNC));
    updateNumOfMonitors();
}
#method_after
private void upgradeGraphicsRelatedModels() {
    DisplayType display = getDisplayType().getSelectedItem();
    GraphicsTypes graphics = getGraphicsType().getSelectedItem();
    if (display == null || graphics == null) {
        return;
    }
    if (display != DisplayType.qxl || !graphics.getBackingGraphicsTypes().contains(GraphicsType.SPICE)) {
        getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED);
        getIsSmartcardEnabled().setEntity(false);
    }
    handleQxlClusterLevel();
    getUsbPolicy().setIsChangable(graphics.getBackingGraphicsTypes().contains(GraphicsType.SPICE));
    getIsSmartcardEnabled().setIsChangable(graphics.getBackingGraphicsTypes().contains(GraphicsType.SPICE));
    getVncKeyboardLayout().setIsAvailable(graphics.getBackingGraphicsTypes().contains(GraphicsType.VNC));
    updateNumOfMonitors();
}
#end_block

#method_before
@Override
public void setEntity(Object value) {
    updateIsMemorySnapshotSupported(value);
    updateIsLiveMergeSupported(value);
    super.setEntity(value);
    updateIsCloneVmSupported();
    updateVmActiveDisks();
}
#method_after
@Override
public void setEntity(VM value) {
    updateIsMemorySnapshotSupported(value);
    updateIsLiveMergeSupported(value);
    super.setEntity(value);
    updateIsCloneVmSupported();
    updateVmActiveDisks();
}
#end_block

#method_before
@Override
protected void syncSearch() {
    VM vm = (VM) getEntity();
    if (vm == null) {
        return;
    }
    super.syncSearch(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(vm.getId()));
}
#method_after
@Override
protected void syncSearch() {
    VM vm = getEntity();
    if (vm == null) {
        return;
    }
    super.syncSearch(VdcQueryType.GetAllVmSnapshotsByVmId, new IdQueryParameters(vm.getId()));
}
#end_block

#method_before
private void remove() {
    if (getEntity() != null) {
        if (getWindow() != null) {
            return;
        }
        Snapshot snapshot = (Snapshot) getSelectedItem();
        ConfirmationModel model = new ConfirmationModel();
        setWindow(model);
        model.setTitle(ConstantsManager.getInstance().getConstants().deleteSnapshotTitle());
        model.setHelpTag(HelpTag.delete_snapshot);
        // $NON-NLS-1$
        model.setHashName("delete_snapshot");
        model.setMessage(ConstantsManager.getInstance().getMessages().areYouSureYouWantToDeleteSanpshot(DateTimeFormat.getFormat(DATE_FORMAT).format(snapshot.getCreationDate()), snapshot.getDescription()));
        // $NON-NLS-1$
        UICommand tempVar = UICommand.createDefaultOkUiCommand("OnRemove", this);
        model.getCommands().add(tempVar);
        // $NON-NLS-1$
        UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
        model.getCommands().add(tempVar2);
    }
}
#method_after
private void remove() {
    if (getEntity() != null) {
        if (getWindow() != null) {
            return;
        }
        Snapshot snapshot = getSelectedItem();
        ConfirmationModel model = new ConfirmationModel();
        setWindow(model);
        model.setTitle(ConstantsManager.getInstance().getConstants().deleteSnapshotTitle());
        model.setHelpTag(HelpTag.delete_snapshot);
        // $NON-NLS-1$
        model.setHashName("delete_snapshot");
        model.setMessage(ConstantsManager.getInstance().getMessages().areYouSureYouWantToDeleteSanpshot(DateTimeFormat.getFormat(DATE_FORMAT).format(snapshot.getCreationDate()), snapshot.getDescription()));
        // $NON-NLS-1$
        UICommand tempVar = UICommand.createDefaultOkUiCommand("OnRemove", this);
        model.getCommands().add(tempVar);
        // $NON-NLS-1$
        UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
        model.getCommands().add(tempVar2);
    }
}
#end_block

#method_before
private void onRemove() {
    Snapshot snapshot = (Snapshot) getSelectedItem();
    if (snapshot == null) {
        cancel();
        return;
    }
    VM vm = (VM) getEntity();
    if (vm != null) {
        Frontend.getInstance().runAction(VdcActionType.RemoveSnapshot, new RemoveSnapshotParameters(snapshot.getId(), vm.getId()), null, null);
    }
    getCanSelectSnapshot().setEntity(false);
    cancel();
}
#method_after
private void onRemove() {
    Snapshot snapshot = getSelectedItem();
    if (snapshot == null) {
        cancel();
        return;
    }
    VM vm = getEntity();
    if (vm != null) {
        Frontend.getInstance().runAction(VdcActionType.RemoveSnapshot, new RemoveSnapshotParameters(snapshot.getId(), vm.getId()), null, null);
    }
    getCanSelectSnapshot().setEntity(false);
    cancel();
}
#end_block

#method_before
private void undo() {
    VM vm = (VM) getEntity();
    if (vm != null) {
        Frontend.getInstance().runAction(VdcActionType.RestoreAllSnapshots, new RestoreAllSnapshotsParameters(vm.getId(), SnapshotActionEnum.UNDO), null, null);
    }
}
#method_after
private void undo() {
    VM vm = getEntity();
    if (vm != null) {
        Frontend.getInstance().runAction(VdcActionType.RestoreAllSnapshots, new RestoreAllSnapshotsParameters(vm.getId(), SnapshotActionEnum.UNDO), null, null);
    }
}
#end_block

#method_before
private void commit() {
    VM vm = (VM) getEntity();
    if (vm != null) {
        Frontend.getInstance().runAction(VdcActionType.RestoreAllSnapshots, new RestoreAllSnapshotsParameters(vm.getId(), SnapshotActionEnum.COMMIT), null, null);
    }
}
#method_after
private void commit() {
    VM vm = getEntity();
    if (vm != null) {
        Frontend.getInstance().runAction(VdcActionType.RestoreAllSnapshots, new RestoreAllSnapshotsParameters(vm.getId(), SnapshotActionEnum.COMMIT), null, null);
    }
}
#end_block

#method_before
private void preview() {
    VM vm = (VM) getEntity();
    if (vm == null) {
        return;
    }
    final Snapshot snapshot = (Snapshot) getSelectedItem();
    AsyncDataProvider.getInstance().getVmConfigurationBySnapshot(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VM vm = (VM) returnValue;
            ArrayList<DiskImage> snapshotDisks = vm.getDiskList();
            List<DiskImage> disksExcludedFromSnapshot = Linq.imagesSubtract(getVmDisks(), snapshotDisks);
            boolean showMemorySnapshotWarning = isMemorySnapshotSupported() && !snapshot.getMemoryVolume().isEmpty();
            boolean showPartialSnapshotWarning = !disksExcludedFromSnapshot.isEmpty();
            if (showMemorySnapshotWarning || showPartialSnapshotWarning) {
                SnapshotModel model = new SnapshotModel();
                model.setVmDisks(getVmDisks());
                model.setDisks(snapshotDisks);
                model.setShowMemorySnapshotWarning(showMemorySnapshotWarning);
                model.setShowPartialSnapshotWarning(showPartialSnapshotWarning);
                setWindow(model);
                model.setTitle(showPartialSnapshotWarning ? ConstantsManager.getInstance().getConstants().previewPartialSnapshotTitle() : ConstantsManager.getInstance().getConstants().previewSnapshotTitle());
                model.setHelpTag(showPartialSnapshotWarning ? HelpTag.preview_partial_snapshot : HelpTag.preview_snapshot);
                // $NON-NLS-1$ //$NON-NLS-2$
                model.setHashName(showPartialSnapshotWarning ? "preview_partial_snapshot" : "preview_snapshot");
                // $NON-NLS-1$
                addCommands(model, "OnPreview");
            } else {
                runTryBackToAllSnapshotsOfVm(null, vm, snapshot, false, null);
            }
        }
    }), snapshot.getId());
}
#method_after
private void preview() {
    VM vm = getEntity();
    if (vm == null) {
        return;
    }
    final Snapshot snapshot = getSelectedItem();
    AsyncDataProvider.getInstance().getVmConfigurationBySnapshot(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VM vm = (VM) returnValue;
            ArrayList<DiskImage> snapshotDisks = vm.getDiskList();
            List<DiskImage> disksExcludedFromSnapshot = Linq.imagesSubtract(getVmDisks(), snapshotDisks);
            boolean showMemorySnapshotWarning = isMemorySnapshotSupported() && !snapshot.getMemoryVolume().isEmpty();
            boolean showPartialSnapshotWarning = !disksExcludedFromSnapshot.isEmpty();
            if (showMemorySnapshotWarning || showPartialSnapshotWarning) {
                SnapshotModel model = new SnapshotModel();
                model.setVmDisks(getVmDisks());
                model.setDisks(snapshotDisks);
                model.setShowMemorySnapshotWarning(showMemorySnapshotWarning);
                model.setShowPartialSnapshotWarning(showPartialSnapshotWarning);
                setWindow(model);
                model.setTitle(showPartialSnapshotWarning ? ConstantsManager.getInstance().getConstants().previewPartialSnapshotTitle() : ConstantsManager.getInstance().getConstants().previewSnapshotTitle());
                model.setHelpTag(showPartialSnapshotWarning ? HelpTag.preview_partial_snapshot : HelpTag.preview_snapshot);
                // $NON-NLS-1$ //$NON-NLS-2$
                model.setHashName(showPartialSnapshotWarning ? "preview_partial_snapshot" : "preview_snapshot");
                // $NON-NLS-1$
                addCommands(model, "OnPreview");
            } else {
                runTryBackToAllSnapshotsOfVm(null, vm, snapshot, false, null);
            }
        }
    }), snapshot.getId());
}
#end_block

#method_before
private void updateVmActiveDisks() {
    VM vm = (VM) getEntity();
    if (vm == null) {
        return;
    }
    AsyncDataProvider.getInstance().getVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
            getVmDisks().clear();
            for (Disk disk : disks) {
                if (disk.getDiskStorageType() == Disk.DiskStorageType.LUN) {
                    continue;
                }
                DiskImage diskImage = (DiskImage) disk;
                getVmDisks().add(diskImage);
            }
        }
    }), vm.getId());
}
#method_after
private void updateVmActiveDisks() {
    VM vm = getEntity();
    if (vm == null) {
        return;
    }
    AsyncDataProvider.getInstance().getVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
            getVmDisks().clear();
            for (Disk disk : disks) {
                if (disk.getDiskStorageType() == Disk.DiskStorageType.LUN) {
                    continue;
                }
                DiskImage diskImage = (DiskImage) disk;
                getVmDisks().add(diskImage);
            }
        }
    }), vm.getId());
}
#end_block

#method_before
private void customPreview() {
    VM vm = (VM) getEntity();
    if (vm == null) {
        return;
    }
    PreviewSnapshotModel model = new PreviewSnapshotModel();
    model.setVmId(vm.getId());
    model.initialize();
    // Update according to the selected snapshot
    Snapshot selectedSnapshot = (Snapshot) getSelectedItem();
    if (selectedSnapshot != null) {
        model.setSnapshotModel(getSnapshotsMap().get(selectedSnapshot.getId()));
    }
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().customPreviewSnapshotTitle());
    model.setHelpTag(HelpTag.custom_preview_snapshot);
    // $NON-NLS-1$
    model.setHashName("custom_preview_snapshot");
    // $NON-NLS-1$
    addCommands(model, "OnCustomPreview");
}
#method_after
private void customPreview() {
    VM vm = getEntity();
    if (vm == null) {
        return;
    }
    PreviewSnapshotModel model = new PreviewSnapshotModel();
    model.setVmId(vm.getId());
    model.initialize();
    // Update according to the selected snapshot
    Snapshot selectedSnapshot = getSelectedItem();
    if (selectedSnapshot != null) {
        model.setSnapshotModel(getSnapshotsMap().get(selectedSnapshot.getId()));
    }
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().customPreviewSnapshotTitle());
    model.setHelpTag(HelpTag.custom_preview_snapshot);
    // $NON-NLS-1$
    model.setHashName("custom_preview_snapshot");
    // $NON-NLS-1$
    addCommands(model, "OnCustomPreview");
}
#end_block

#method_before
private void onPreview() {
    Snapshot snapshot = (Snapshot) getSelectedItem();
    if (snapshot == null) {
        cancel();
        return;
    }
    VM vm = (VM) getEntity();
    SnapshotModel snapshotModel = (SnapshotModel) getWindow();
    boolean memory = false;
    List<DiskImage> disks = null;
    if (snapshotModel.isShowPartialSnapshotWarning()) {
        switch(snapshotModel.getPartialPreviewSnapshotOptions().getSelectedItem()) {
            case preserveActiveDisks:
                // get snapshot disks
                disks = snapshotModel.getDisks();
                // add active disks missed from snapshot
                disks.addAll(Linq.imagesSubtract(getVmDisks(), disks));
                break;
            case excludeActiveDisks:
                // nothing to do - default behaviour
                break;
            case openCustomPreviewDialog:
                setWindow(null);
                getCustomPreviewCommand().execute();
                return;
        }
    }
    if (snapshotModel.isShowMemorySnapshotWarning()) {
        memory = snapshotModel.getMemory().getEntity();
    }
    runTryBackToAllSnapshotsOfVm(snapshotModel, vm, snapshot, memory, disks);
}
#method_after
private void onPreview() {
    Snapshot snapshot = getSelectedItem();
    if (snapshot == null) {
        cancel();
        return;
    }
    VM vm = getEntity();
    SnapshotModel snapshotModel = (SnapshotModel) getWindow();
    boolean memory = false;
    List<DiskImage> disks = null;
    if (snapshotModel.isShowPartialSnapshotWarning()) {
        switch(snapshotModel.getPartialPreviewSnapshotOptions().getSelectedItem()) {
            case preserveActiveDisks:
                // get snapshot disks
                disks = snapshotModel.getDisks();
                // add active disks missed from snapshot
                disks.addAll(Linq.imagesSubtract(getVmDisks(), disks));
                break;
            case excludeActiveDisks:
                // nothing to do - default behaviour
                break;
            case openCustomPreviewDialog:
                setWindow(null);
                getCustomPreviewCommand().execute();
                return;
        }
    }
    if (snapshotModel.isShowMemorySnapshotWarning()) {
        memory = snapshotModel.getMemory().getEntity();
    }
    runTryBackToAllSnapshotsOfVm(snapshotModel, vm, snapshot, memory, disks);
}
#end_block

#method_before
private void onCustomPreview() {
    VM vm = (VM) getEntity();
    PreviewSnapshotModel previewSnapshotModel = (PreviewSnapshotModel) getWindow();
    Snapshot snapshot = previewSnapshotModel.getSnapshotModel().getEntity();
    boolean memory = Boolean.TRUE.equals(previewSnapshotModel.getSnapshotModel().getMemory().getEntity());
    List<DiskImage> disks = previewSnapshotModel.getSelectedDisks();
    runTryBackToAllSnapshotsOfVm(previewSnapshotModel, vm, snapshot, memory, disks);
}
#method_after
private void onCustomPreview() {
    VM vm = getEntity();
    PreviewSnapshotModel previewSnapshotModel = (PreviewSnapshotModel) getWindow();
    Snapshot snapshot = previewSnapshotModel.getSnapshotModel().getEntity();
    boolean memory = Boolean.TRUE.equals(previewSnapshotModel.getSnapshotModel().getMemory().getEntity());
    List<DiskImage> disks = previewSnapshotModel.getSelectedDisks();
    runTryBackToAllSnapshotsOfVm(previewSnapshotModel, vm, snapshot, memory, disks);
}
#end_block

#method_before
private void newEntity() {
    VM vm = (VM) getEntity();
    if (vm == null || getWindow() != null) {
        return;
    }
    SnapshotModel model = SnapshotModel.createNewSnapshotModel(this);
    setWindow(model);
    model.setVm(vm);
    model.initialize();
}
#method_after
private void newEntity() {
    VM vm = getEntity();
    if (vm == null || getWindow() != null) {
        return;
    }
    SnapshotModel model = SnapshotModel.createNewSnapshotModel(this);
    setWindow(model);
    model.setVm(vm);
    model.initialize();
}
#end_block

#method_before
private void cloneVM() {
    Snapshot snapshot = (Snapshot) getSelectedItem();
    if (snapshot == null) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    VM selectedVm = (VM) getEntity();
    UnitVmModel model = new UnitVmModel(new CloneVmFromSnapshotModelBehavior(), this);
    model.getVmType().setSelectedItem(selectedVm.getVmType());
    // $NON-NLS-1$
    model.setIsAdvancedModeLocalStorageKey("wa_snapshot_dialog");
    setWindow(model);
    model.startProgress(null);
    AsyncDataProvider.getInstance().getVmConfigurationBySnapshot(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmSnapshotListModel vmSnapshotListModel = (VmSnapshotListModel) target;
            UnitVmModel model = (UnitVmModel) vmSnapshotListModel.getWindow();
            CloneVmFromSnapshotModelBehavior behavior = (CloneVmFromSnapshotModelBehavior) model.getBehavior();
            VM vm = (VM) returnValue;
            behavior.setVm(vm);
            model.setTitle(ConstantsManager.getInstance().getConstants().cloneVmFromSnapshotTitle());
            model.setHelpTag(HelpTag.clone_vm_from_snapshot);
            // $NON-NLS-1$
            model.setHashName("clone_vm_from_snapshot");
            model.setCustomPropertiesKeysList(AsyncDataProvider.getInstance().getCustomPropertiesList());
            model.initialize(vmSnapshotListModel.getSystemTreeSelectedItem());
            VmBasedWidgetSwitchModeCommand switchModeCommand = new VmBasedWidgetSwitchModeCommand();
            switchModeCommand.init(model);
            model.getCommands().add(switchModeCommand);
            // $NON-NLS-1$
            UICommand tempVar = UICommand.createDefaultOkUiCommand("OnCloneVM", vmSnapshotListModel);
            model.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", vmSnapshotListModel);
            model.getCommands().add(tempVar2);
            vmSnapshotListModel.stopProgress();
        }
    }), snapshot.getId());
}
#method_after
private void cloneVM() {
    Snapshot snapshot = getSelectedItem();
    if (snapshot == null) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    VM selectedVm = getEntity();
    UnitVmModel model = new UnitVmModel(new CloneVmFromSnapshotModelBehavior(), this);
    model.getVmType().setSelectedItem(selectedVm.getVmType());
    // $NON-NLS-1$
    model.setIsAdvancedModeLocalStorageKey("wa_snapshot_dialog");
    setWindow(model);
    model.startProgress(null);
    AsyncDataProvider.getInstance().getVmConfigurationBySnapshot(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmSnapshotListModel vmSnapshotListModel = (VmSnapshotListModel) target;
            UnitVmModel model = (UnitVmModel) vmSnapshotListModel.getWindow();
            CloneVmFromSnapshotModelBehavior behavior = (CloneVmFromSnapshotModelBehavior) model.getBehavior();
            VM vm = (VM) returnValue;
            behavior.setVm(vm);
            model.setTitle(ConstantsManager.getInstance().getConstants().cloneVmFromSnapshotTitle());
            model.setHelpTag(HelpTag.clone_vm_from_snapshot);
            // $NON-NLS-1$
            model.setHashName("clone_vm_from_snapshot");
            model.setCustomPropertiesKeysList(AsyncDataProvider.getInstance().getCustomPropertiesList());
            model.initialize(vmSnapshotListModel.getSystemTreeSelectedItem());
            VmBasedWidgetSwitchModeCommand switchModeCommand = new VmBasedWidgetSwitchModeCommand();
            switchModeCommand.init(model);
            model.getCommands().add(switchModeCommand);
            // $NON-NLS-1$
            UICommand tempVar = UICommand.createDefaultOkUiCommand("OnCloneVM", vmSnapshotListModel);
            model.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", vmSnapshotListModel);
            model.getCommands().add(tempVar2);
            vmSnapshotListModel.stopProgress();
        }
    }), snapshot.getId());
}
#end_block

#method_before
private void onCloneVM() {
    UnitVmModel model = (UnitVmModel) getWindow();
    CloneVmFromSnapshotModelBehavior behavior = (CloneVmFromSnapshotModelBehavior) model.getBehavior();
    Snapshot snapshot = (Snapshot) getSelectedItem();
    if (snapshot == null) {
        cancel();
        return;
    }
    if (!model.validate()) {
        return;
    }
    VM vm = behavior.getVm();
    // Save changes.
    buildVmOnClone(model, vm);
    vm.setCustomProperties(model.getCustomProperties().getEntity());
    vm.setUseHostCpuFlags(model.getHostCpu().getEntity());
    vm.setDiskMap(behavior.getVm().getDiskMap());
    HashMap<Guid, DiskImage> imageToDestinationDomainMap = model.getDisksAllocationModel().getImageToDestinationDomainMap();
    AddVmFromSnapshotParameters parameters = new AddVmFromSnapshotParameters(vm.getStaticData(), snapshot.getId());
    parameters.setDiskInfoDestinationMap(imageToDestinationDomainMap);
    setupAddVmFromSnapshotParameters(parameters);
    parameters.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity());
    parameters.setVirtioScsiEnabled(model.getIsVirtioScsiEnabled().getEntity());
    parameters.setBalloonEnabled(model.getMemoryBalloonDeviceEnabled().getEntity());
    BuilderExecutor.build(model, parameters, new UnitToGraphicsDeviceParamsBuilder());
    if (!StringHelper.isNullOrEmpty(model.getVmId().getEntity())) {
        parameters.setVmId(new Guid(model.getVmId().getEntity()));
    }
    model.startProgress(null);
    Frontend.getInstance().runAction(VdcActionType.AddVmFromSnapshot, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            VmSnapshotListModel vmSnapshotListModel = (VmSnapshotListModel) result.getState();
            vmSnapshotListModel.getWindow().stopProgress();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                vmSnapshotListModel.cancel();
                vmSnapshotListModel.updateActionAvailability();
            }
        }
    }, this);
}
#method_after
private void onCloneVM() {
    UnitVmModel model = (UnitVmModel) getWindow();
    CloneVmFromSnapshotModelBehavior behavior = (CloneVmFromSnapshotModelBehavior) model.getBehavior();
    Snapshot snapshot = getSelectedItem();
    if (snapshot == null) {
        cancel();
        return;
    }
    if (!model.validate()) {
        return;
    }
    VM vm = behavior.getVm();
    // Save changes.
    buildVmOnClone(model, vm);
    vm.setCustomProperties(model.getCustomProperties().getEntity());
    vm.setUseHostCpuFlags(model.getHostCpu().getEntity());
    vm.setDiskMap(behavior.getVm().getDiskMap());
    HashMap<Guid, DiskImage> imageToDestinationDomainMap = model.getDisksAllocationModel().getImageToDestinationDomainMap();
    AddVmFromSnapshotParameters parameters = new AddVmFromSnapshotParameters(vm.getStaticData(), snapshot.getId());
    parameters.setDiskInfoDestinationMap(imageToDestinationDomainMap);
    setupAddVmFromSnapshotParameters(parameters);
    parameters.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity());
    parameters.setVirtioScsiEnabled(model.getIsVirtioScsiEnabled().getEntity());
    parameters.setBalloonEnabled(model.getMemoryBalloonDeviceEnabled().getEntity());
    BuilderExecutor.build(model, parameters, new UnitToGraphicsDeviceParamsBuilder());
    if (!StringHelper.isNullOrEmpty(model.getVmId().getEntity())) {
        parameters.setVmId(new Guid(model.getVmId().getEntity()));
    }
    model.startProgress(null);
    Frontend.getInstance().runAction(VdcActionType.AddVmFromSnapshot, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            VmSnapshotListModel vmSnapshotListModel = (VmSnapshotListModel) result.getState();
            vmSnapshotListModel.getWindow().stopProgress();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                vmSnapshotListModel.cancel();
                vmSnapshotListModel.updateActionAvailability();
            }
        }
    }, this);
}
#end_block

#method_before
public void updateActionAvailability() {
    if (getItems() == null) {
        // no need to update action availability
        return;
    }
    VM vm = (VM) getEntity();
    Snapshot snapshot = (Snapshot) getSelectedItem();
    List<VM> vmList = vm != null ? Collections.singletonList(vm) : Collections.<VM>emptyList();
    boolean isVmDown = vm != null && vm.getStatus() == VMStatus.Down;
    boolean isVmImageLocked = vm != null && vm.getStatus() == VMStatus.ImageLocked;
    boolean isVmQualifiedForSnapshotMerge = vm != null && vm.getStatus().isQualifiedForSnapshotMerge();
    boolean isPreviewing = getIsPreviewing();
    boolean isLocked = getIsLocked();
    boolean isSelected = snapshot != null && snapshot.getType() != SnapshotType.ACTIVE;
    boolean isStateless = getIsStateless();
    boolean isCloneVmSupported = getIsCloneVmSupported();
    getCanSelectSnapshot().setEntity(!isPreviewing && !isLocked && !isStateless && VdcActionUtils.canExecute(vmList, VM.class, VdcActionType.CreateAllSnapshotsFromVm));
    getNewCommand().setIsExecutionAllowed(!isPreviewing && !isLocked && !isVmImageLocked && !isStateless);
    getPreviewCommand().setIsExecutionAllowed(isSelected && !isLocked && !isPreviewing && isVmDown && !isStateless);
    getCustomPreviewCommand().setIsExecutionAllowed(getPreviewCommand().getIsExecutionAllowed());
    getCommitCommand().setIsExecutionAllowed(isPreviewing && isVmDown && !isStateless);
    getUndoCommand().setIsExecutionAllowed(isPreviewing && isVmDown && !isStateless);
    getRemoveCommand().setIsExecutionAllowed(isSelected && !isLocked && !isPreviewing && !isStateless && (isLiveMergeSupported() ? isVmQualifiedForSnapshotMerge : isVmDown));
    getCloneVmCommand().setIsExecutionAllowed(isSelected && !isLocked && !isPreviewing && !isVmImageLocked && !isStateless && isCloneVmSupported);
}
#method_after
public void updateActionAvailability() {
    if (getItems() == null) {
        // no need to update action availability
        return;
    }
    VM vm = getEntity();
    Snapshot snapshot = getSelectedItem();
    List<VM> vmList = vm != null ? Collections.singletonList(vm) : Collections.<VM>emptyList();
    boolean isVmDown = vm != null && vm.getStatus() == VMStatus.Down;
    boolean isVmImageLocked = vm != null && vm.getStatus() == VMStatus.ImageLocked;
    boolean isVmQualifiedForSnapshotMerge = vm != null && vm.getStatus().isQualifiedForSnapshotMerge();
    boolean isPreviewing = getIsPreviewing();
    boolean isLocked = getIsLocked();
    boolean isSelected = snapshot != null && snapshot.getType() != SnapshotType.ACTIVE;
    boolean isStateless = getIsStateless();
    boolean isCloneVmSupported = getIsCloneVmSupported();
    getCanSelectSnapshot().setEntity(!isPreviewing && !isLocked && !isStateless && VdcActionUtils.canExecute(vmList, VM.class, VdcActionType.CreateAllSnapshotsFromVm));
    getNewCommand().setIsExecutionAllowed(!isPreviewing && !isLocked && !isVmImageLocked && !isStateless);
    getPreviewCommand().setIsExecutionAllowed(isSelected && !isLocked && !isPreviewing && isVmDown && !isStateless);
    getCustomPreviewCommand().setIsExecutionAllowed(getPreviewCommand().getIsExecutionAllowed());
    getCommitCommand().setIsExecutionAllowed(isPreviewing && isVmDown && !isStateless);
    getUndoCommand().setIsExecutionAllowed(isPreviewing && isVmDown && !isStateless);
    getRemoveCommand().setIsExecutionAllowed(isSelected && !isLocked && !isPreviewing && !isStateless && (isLiveMergeSupported() ? isVmQualifiedForSnapshotMerge : isVmDown));
    getCloneVmCommand().setIsExecutionAllowed(isSelected && !isLocked && !isPreviewing && !isVmImageLocked && !isStateless && isCloneVmSupported);
}
#end_block

#method_before
public Snapshot getLocked() {
    for (Snapshot snapshot : (ArrayList<Snapshot>) getItems()) {
        if (snapshot.getStatus() == SnapshotStatus.LOCKED) {
            return snapshot;
        }
    }
    return null;
}
#method_after
public Snapshot getLocked() {
    for (Snapshot snapshot : getItems()) {
        if (snapshot.getStatus() == SnapshotStatus.LOCKED) {
            return snapshot;
        }
    }
    return null;
}
#end_block

#method_before
protected void updateIsCloneVmSupported() {
    if (getEntity() == null) {
        return;
    }
    VM vm = (VM) getEntity();
    AsyncDataProvider.getInstance().getDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmSnapshotListModel model = (VmSnapshotListModel) target;
            StoragePool dataCenter = (StoragePool) returnValue;
            VM vm = (VM) model.getEntity();
            Version minClusterVersion = vm.getVdsGroupCompatibilityVersion();
            Version minDcVersion = dataCenter.getCompatibilityVersion();
            AsyncDataProvider.getInstance().isCommandCompatible(new AsyncQuery(model, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object target, Object returnValue) {
                    VmSnapshotListModel model = (VmSnapshotListModel) target;
                    model.setIsCloneVmSupported((Boolean) returnValue);
                }
            }), VdcActionType.AddVmFromSnapshot, minClusterVersion, minDcVersion);
        }
    }), vm.getStoragePoolId());
}
#method_after
protected void updateIsCloneVmSupported() {
    if (getEntity() == null) {
        return;
    }
    VM vm = getEntity();
    AsyncDataProvider.getInstance().getDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmSnapshotListModel model = (VmSnapshotListModel) target;
            StoragePool dataCenter = (StoragePool) returnValue;
            VM vm = model.getEntity();
            Version minClusterVersion = vm.getVdsGroupCompatibilityVersion();
            Version minDcVersion = dataCenter.getCompatibilityVersion();
            AsyncDataProvider.getInstance().isCommandCompatible(new AsyncQuery(model, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object target, Object returnValue) {
                    VmSnapshotListModel model = (VmSnapshotListModel) target;
                    model.setIsCloneVmSupported((Boolean) returnValue);
                }
            }), VdcActionType.AddVmFromSnapshot, minClusterVersion, minDcVersion);
        }
    }), vm.getStoragePoolId());
}
#end_block

#method_before
private void setDetailList(final VmGeneralModel vmGeneralModel, final VmInterfaceListModel vmInterfaceListModel, final VmDiskListModel vmDiskListModel, final VmSnapshotListModel vmSnapshotListModel, final VmEventListModel vmEventListModel, final VmAppListModel vmAppListModel, final PermissionListModel<VmListModel> permissionListModel, final VmAffinityGroupListModel vmAffinityGroupListModel, final VmSessionsModel vmSessionsModel) {
    List<EntityModel> list = new ArrayList<EntityModel>();
    list.add(vmGeneralModel);
    list.add(vmInterfaceListModel);
    vmDiskListModel.setSystemTreeContext(this);
    list.add(vmDiskListModel);
    list.add(vmSnapshotListModel);
    list.add(vmEventListModel);
    list.add(vmAppListModel);
    list.add(permissionListModel);
    list.add(vmAffinityGroupListModel);
    list.add(vmSessionsModel);
    setDetailModels(list);
}
#method_after
private void setDetailList(final VmGeneralModel vmGeneralModel, final VmInterfaceListModel vmInterfaceListModel, final VmDiskListModel vmDiskListModel, final VmSnapshotListModel vmSnapshotListModel, final VmEventListModel vmEventListModel, final VmAppListModel<VM> vmAppListModel, final PermissionListModel<VM> permissionListModel, final VmAffinityGroupListModel vmAffinityGroupListModel, final VmSessionsModel vmSessionsModel) {
    List<HasEntity<VM>> list = new ArrayList<>();
    list.add(vmGeneralModel);
    list.add(vmInterfaceListModel);
    vmDiskListModel.setSystemTreeContext(this);
    list.add(vmDiskListModel);
    list.add(vmSnapshotListModel);
    list.add(vmEventListModel);
    list.add(vmAppListModel);
    list.add(permissionListModel);
    list.add(vmAffinityGroupListModel);
    list.add(vmSessionsModel);
    setDetailModels(list);
}
#end_block

#method_before
private void getAttachedTagsToSelectedVMs(TagListModel model) {
    ArrayList<Guid> vmIds = new ArrayList<Guid>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        vmIds.add(vm.getId());
    }
    attachedTagsToEntities = new HashMap<Guid, Boolean>();
    allAttachedTags = new ArrayList<Tags>();
    selectedItemsCounter = 0;
    for (Guid id : vmIds) {
        AsyncDataProvider.getInstance().getAttachedTagsToVm(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                VmListModel vmListModel = (VmListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                vmListModel.allAttachedTags.addAll((ArrayList<Tags>) returnValue);
                vmListModel.selectedItemsCounter++;
                if (vmListModel.selectedItemsCounter == vmListModel.getSelectedItems().size()) {
                    postGetAttachedTags(vmListModel, tagListModel);
                }
            }
        }), id);
    }
}
#method_after
private void getAttachedTagsToSelectedVMs(TagListModel model) {
    ArrayList<Guid> vmIds = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        vmIds.add(vm.getId());
    }
    attachedTagsToEntities = new HashMap<>();
    allAttachedTags = new ArrayList<>();
    selectedItemsCounter = 0;
    for (Guid id : vmIds) {
        AsyncDataProvider.getInstance().getAttachedTagsToVm(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                VmListModel<Void> vmListModel = (VmListModel<Void>) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                vmListModel.allAttachedTags.addAll((ArrayList<Tags>) returnValue);
                vmListModel.selectedItemsCounter++;
                if (vmListModel.selectedItemsCounter == vmListModel.getSelectedItems().size()) {
                    postGetAttachedTags(vmListModel, tagListModel);
                }
            }
        }), id);
    }
}
#end_block

#method_before
private void postGetAttachedTags(VmListModel vmListModel, TagListModel tagListModel) {
    if (vmListModel.getLastExecutedCommand() == getAssignTagsCommand()) {
        ArrayList<Tags> attachedTags = Linq.distinct(vmListModel.allAttachedTags, new TagsEqualityComparer());
        for (Tags tag : attachedTags) {
            int count = 0;
            for (Tags tag2 : vmListModel.allAttachedTags) {
                if (tag2.gettag_id().equals(tag.gettag_id())) {
                    count++;
                }
            }
            vmListModel.attachedTagsToEntities.put(tag.gettag_id(), count == vmListModel.getSelectedItems().size());
        }
        tagListModel.setAttachedTagsToEntities(vmListModel.attachedTagsToEntities);
    } else if (// $NON-NLS-1$
    "OnAssignTags".equals(vmListModel.getLastExecutedCommand().getName())) {
        vmListModel.postOnAssignTags(tagListModel.getAttachedTagsToEntities());
    }
}
#method_after
private void postGetAttachedTags(VmListModel<Void> vmListModel, TagListModel tagListModel) {
    if (vmListModel.getLastExecutedCommand() == getAssignTagsCommand()) {
        ArrayList<Tags> attachedTags = Linq.distinct(vmListModel.allAttachedTags, new TagsEqualityComparer());
        for (Tags tag : attachedTags) {
            int count = 0;
            for (Tags tag2 : vmListModel.allAttachedTags) {
                if (tag2.gettag_id().equals(tag.gettag_id())) {
                    count++;
                }
            }
            vmListModel.attachedTagsToEntities.put(tag.gettag_id(), count == vmListModel.getSelectedItems().size());
        }
        tagListModel.setAttachedTagsToEntities(vmListModel.attachedTagsToEntities);
    } else if (// $NON-NLS-1$
    "OnAssignTags".equals(vmListModel.getLastExecutedCommand().getName())) {
        vmListModel.postOnAssignTags(tagListModel.getAttachedTagsToEntities());
    }
}
#end_block

#method_before
public void postOnAssignTags(Map<Guid, Boolean> attachedTags) {
    TagListModel model = (TagListModel) getWindow();
    ArrayList<Guid> vmIds = new ArrayList<Guid>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        vmIds.add(vm.getId());
    }
    // prepare attach/detach lists
    ArrayList<Guid> tagsToAttach = new ArrayList<Guid>();
    ArrayList<Guid> tagsToDetach = new ArrayList<Guid>();
    if (model.getItems() != null && ((ArrayList<TagModel>) model.getItems()).size() > 0) {
        ArrayList<TagModel> tags = (ArrayList<TagModel>) model.getItems();
        TagModel rootTag = tags.get(0);
        TagModel.recursiveEditAttachDetachLists(rootTag, attachedTags, tagsToAttach, tagsToDetach);
    }
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    for (Guid a : tagsToAttach) {
        parameters.add(new AttachEntityToTagParameters(a, vmIds));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.AttachVmsToTag, parameters);
    parameters = new ArrayList<VdcActionParametersBase>();
    for (Guid a : tagsToDetach) {
        parameters.add(new AttachEntityToTagParameters(a, vmIds));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.DetachVmFromTag, parameters);
    cancel();
}
#method_after
public void postOnAssignTags(Map<Guid, Boolean> attachedTags) {
    TagListModel model = (TagListModel) getWindow();
    ArrayList<Guid> vmIds = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        vmIds.add(vm.getId());
    }
    // prepare attach/detach lists
    ArrayList<Guid> tagsToAttach = new ArrayList<>();
    ArrayList<Guid> tagsToDetach = new ArrayList<>();
    if (model.getItems() != null && model.getItems().size() > 0) {
        ArrayList<TagModel> tags = (ArrayList<TagModel>) model.getItems();
        TagModel rootTag = tags.get(0);
        TagModel.recursiveEditAttachDetachLists(rootTag, attachedTags, tagsToAttach, tagsToDetach);
    }
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    for (Guid a : tagsToAttach) {
        parameters.add(new AttachEntityToTagParameters(a, vmIds));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.AttachVmsToTag, parameters);
    parameters = new ArrayList<>();
    for (Guid a : tagsToDetach) {
        parameters.add(new AttachEntityToTagParameters(a, vmIds));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.DetachVmFromTag, parameters);
    cancel();
}
#end_block

#method_before
private void guide() {
    VmGuideModel model = new VmGuideModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newVirtualMachineGuideMeTitle());
    model.setHelpTag(HelpTag.new_virtual_machine___guide_me);
    // $NON-NLS-1$
    model.setHashName("new_virtual_machine_-_guide_me");
    if (getGuideContext() == null) {
        VM vm = (VM) getSelectedItem();
        setGuideContext(vm.getId());
    }
    AsyncDataProvider.getInstance().getVmById(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmListModel vmListModel = (VmListModel) target;
            VmGuideModel model = (VmGuideModel) vmListModel.getWindow();
            model.setEntity(returnValue);
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("Cancel", vmListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().configureLaterTitle());
            tempVar.setIsDefault(true);
            tempVar.setIsCancel(true);
            model.getCommands().add(tempVar);
        }
    }), (Guid) getGuideContext());
}
#method_after
private void guide() {
    VmGuideModel model = new VmGuideModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newVirtualMachineGuideMeTitle());
    model.setHelpTag(HelpTag.new_virtual_machine___guide_me);
    // $NON-NLS-1$
    model.setHashName("new_virtual_machine_-_guide_me");
    if (getGuideContext() == null) {
        VM vm = getSelectedItem();
        setGuideContext(vm.getId());
    }
    AsyncDataProvider.getInstance().getVmById(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmListModel<Void> vmListModel = (VmListModel<Void>) target;
            VmGuideModel model = (VmGuideModel) vmListModel.getWindow();
            model.setEntity(returnValue);
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("Cancel", vmListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().configureLaterTitle());
            tempVar.setIsDefault(true);
            tempVar.setIsCancel(true);
            model.getCommands().add(tempVar);
        }
    }), (Guid) getGuideContext());
}
#end_block

#method_before
private void newVm() {
    if (getWindow() != null) {
        return;
    }
    UnitVmModel model = new UnitVmModel(new NewVmModelBehavior(), this);
    model.setTitle(ConstantsManager.getInstance().getConstants().newVmTitle());
    model.setHelpTag(HelpTag.new_vm);
    // $NON-NLS-1$
    model.setHashName("new_vm");
    model.setIsNew(true);
    model.getVmType().setSelectedItem(VmType.Server);
    model.setCustomPropertiesKeysList(AsyncDataProvider.getInstance().getCustomPropertiesList());
    // $NON-NLS-1$
    model.setIsAdvancedModeLocalStorageKey("wa_vm_dialog");
    setWindow(model);
    model.initialize(getSystemTreeSelectedItem());
    VmBasedWidgetSwitchModeCommand switchModeCommand = new VmBasedWidgetSwitchModeCommand();
    switchModeCommand.init(model);
    model.getCommands().add(switchModeCommand);
    model.getProvisioning().setEntity(true);
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnSave", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#method_after
private void newVm() {
    if (getWindow() != null) {
        return;
    }
    List<UICommand> commands = new ArrayList<>();
    // $NON-NLS-1$
    commands.add(UICommand.createDefaultOkUiCommand("OnSave", this));
    // $NON-NLS-1$
    commands.add(UICommand.createCancelUiCommand("Cancel", this));
    UnitVmModel model = new UnitVmModel(new NewVmModelBehavior(), this);
    setupNewVmModel(model, VmType.Server, getSystemTreeSelectedItem(), commands);
}
#end_block

#method_before
private void edit() {
    VM vm = (VM) getSelectedItem();
    if (vm == null) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    // populating VMInit
    AsyncQuery getVmInitQuery = new AsyncQuery();
    getVmInitQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            editedVm = (VM) result;
            vmInitLoaded(editedVm);
        }
    };
    if (vm.isNextRunConfigurationExists()) {
        AsyncDataProvider.getInstance().getVmNextRunConfiguration(getVmInitQuery, vm.getId());
    } else {
        AsyncDataProvider.getInstance().getVmById(getVmInitQuery, vm.getId());
    }
}
#method_after
private void edit() {
    VM vm = getSelectedItem();
    if (vm == null) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    // populating VMInit
    AsyncQuery getVmInitQuery = new AsyncQuery();
    getVmInitQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            editedVm = (VM) result;
            vmInitLoaded(editedVm);
        }
    };
    if (vm.isNextRunConfigurationExists()) {
        AsyncDataProvider.getInstance().getVmNextRunConfiguration(getVmInitQuery, vm.getId());
    } else {
        AsyncDataProvider.getInstance().getVmById(getVmInitQuery, vm.getId());
    }
}
#end_block

#method_before
private void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel window = new ConfirmationModel();
    setWindow(window);
    window.setTitle(ConstantsManager.getInstance().getConstants().removeVirtualMachinesTitle());
    window.setHelpTag(HelpTag.remove_virtual_machine);
    // $NON-NLS-1$
    window.setHashName("remove_virtual_machine");
    vmsRemoveMap = new HashMap<Guid, EntityModel>();
    for (Object selectedItem : getSelectedItems()) {
        VM vm = (VM) selectedItem;
        EntityModel removeDisksCheckbox = new EntityModel(true);
        removeDisksCheckbox.setTitle(ConstantsManager.getInstance().getConstants().removeDisksTitle());
        removeDisksCheckbox.setMessage(vm.getName());
        if (!Guid.Empty.equals(vm.getVmtGuid())) {
            updateRemoveDisksCheckBox(removeDisksCheckbox, true, false, ConstantsManager.getInstance().getConstants().removeVmDisksTemplateMsg());
        }
        vmsRemoveMap.put(vm.getId(), removeDisksCheckbox);
    }
    window.setItems(vmsRemoveMap.entrySet());
    initRemoveDisksCheckboxes(vmsRemoveMap);
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnRemove", this);
    window.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    window.getCommands().add(tempVar2);
}
#method_after
private void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel window = new ConfirmationModel();
    setWindow(window);
    window.setTitle(ConstantsManager.getInstance().getConstants().removeVirtualMachinesTitle());
    window.setHelpTag(HelpTag.remove_virtual_machine);
    // $NON-NLS-1$
    window.setHashName("remove_virtual_machine");
    vmsRemoveMap = new HashMap<>();
    for (Object selectedItem : getSelectedItems()) {
        VM vm = (VM) selectedItem;
        EntityModel removeDisksCheckbox = new EntityModel(true);
        removeDisksCheckbox.setTitle(ConstantsManager.getInstance().getConstants().removeDisksTitle());
        removeDisksCheckbox.setMessage(vm.getName());
        if (!Guid.Empty.equals(vm.getVmtGuid())) {
            updateRemoveDisksCheckBox(removeDisksCheckbox, true, false, ConstantsManager.getInstance().getConstants().removeVmDisksTemplateMsg());
        }
        vmsRemoveMap.put(vm.getId(), removeDisksCheckbox);
    }
    window.setItems(vmsRemoveMap.entrySet());
    initRemoveDisksCheckboxes(vmsRemoveMap);
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnRemove", this);
    window.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    window.getCommands().add(tempVar2);
}
#end_block

#method_before
private void initRemoveDisksCheckboxes(final Map<Guid, EntityModel> vmsMap) {
    ArrayList<VdcQueryParametersBase> params = new ArrayList<VdcQueryParametersBase>();
    ArrayList<VdcQueryType> queries = new ArrayList<VdcQueryType>();
    for (Entry<Guid, EntityModel> entry : vmsMap.entrySet()) {
        if (entry.getValue().getIsChangable()) {
            // No point in fetching VM disks from ones that already determined
            // is unchangeable since they are already initialized
            params.add(new IdQueryParameters(entry.getKey()));
            queries.add(VdcQueryType.GetAllDisksByVmId);
        }
    }
    // revise when refactoring org.ovirt.engine.ui.Frontend to support runMultipleQuery with a single query
    if (!params.isEmpty()) {
        Frontend.getInstance().runMultipleQueries(queries, params, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void executed(FrontendMultipleQueryAsyncResult result) {
                for (int i = 0; i < result.getReturnValues().size(); i++) {
                    if (result.getReturnValues().get(i).getSucceeded()) {
                        Guid vmId = ((IdQueryParameters) result.getParameters().get(i)).getId();
                        initRemoveDisksChecboxesPost(vmId, (List<Disk>) result.getReturnValues().get(i).getReturnValue());
                    }
                }
            }
        });
    }
}
#method_after
private void initRemoveDisksCheckboxes(final Map<Guid, EntityModel> vmsMap) {
    ArrayList<VdcQueryParametersBase> params = new ArrayList<>();
    ArrayList<VdcQueryType> queries = new ArrayList<>();
    for (Entry<Guid, EntityModel> entry : vmsMap.entrySet()) {
        if (entry.getValue().getIsChangable()) {
            // No point in fetching VM disks from ones that already determined
            // is unchangeable since they are already initialized
            params.add(new IdQueryParameters(entry.getKey()));
            queries.add(VdcQueryType.GetAllDisksByVmId);
        }
    }
    // revise when refactoring org.ovirt.engine.ui.Frontend to support runMultipleQuery with a single query
    if (!params.isEmpty()) {
        Frontend.getInstance().runMultipleQueries(queries, params, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void executed(FrontendMultipleQueryAsyncResult result) {
                for (int i = 0; i < result.getReturnValues().size(); i++) {
                    if (result.getReturnValues().get(i).getSucceeded()) {
                        Guid vmId = ((IdQueryParameters) result.getParameters().get(i)).getId();
                        initRemoveDisksChecboxesPost(vmId, (List<Disk>) result.getReturnValues().get(i).getReturnValue());
                    }
                }
            }
        });
    }
}
#end_block

#method_before
private void createSnapshot() {
    VM vm = (VM) getSelectedItem();
    if (vm == null || getWindow() != null) {
        return;
    }
    SnapshotModel model = SnapshotModel.createNewSnapshotModel(this);
    model.setValidateByVmSnapshots(true);
    setWindow(model);
    model.setVm(vm);
    model.initialize();
}
#method_after
private void createSnapshot() {
    VM vm = getSelectedItem();
    if (vm == null || getWindow() != null) {
        return;
    }
    SnapshotModel model = SnapshotModel.createNewSnapshotModel(this);
    model.setValidateByVmSnapshots(true);
    setWindow(model);
    model.setVm(vm);
    model.initialize();
}
#end_block

#method_before
@Override
protected boolean entitiesSelectedOnDifferentDataCenters() {
    ArrayList<VM> vms = new ArrayList<VM>();
    for (Object selectedItem : getSelectedItems()) {
        VM a = (VM) selectedItem;
        vms.add(a);
    }
    Map<Guid, ArrayList<VM>> t = new HashMap<Guid, ArrayList<VM>>();
    for (VM a : vms) {
        if (!t.containsKey(a.getStoragePoolId())) {
            t.put(a.getStoragePoolId(), new ArrayList<VM>());
        }
        ArrayList<VM> list = t.get(a.getStoragePoolId());
        list.add(a);
    }
    return t.size() > 1;
}
#method_after
@Override
protected boolean entitiesSelectedOnDifferentDataCenters() {
    ArrayList<VM> vms = new ArrayList<>();
    for (Object selectedItem : getSelectedItems()) {
        VM a = (VM) selectedItem;
        vms.add(a);
    }
    Map<Guid, ArrayList<VM>> t = new HashMap<>();
    for (VM a : vms) {
        if (!t.containsKey(a.getStoragePoolId())) {
            t.put(a.getStoragePoolId(), new ArrayList<VM>());
        }
        ArrayList<VM> list = t.get(a.getStoragePoolId());
        list.add(a);
    }
    return t.size() > 1;
}
#end_block

#method_before
private void getTemplatesNotPresentOnExportDomain() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    AsyncDataProvider.getInstance().getDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmListModel vmListModel = (VmListModel) target;
            ArrayList<StoragePool> storagePools = (ArrayList<StoragePool>) returnValue;
            StoragePool storagePool = storagePools.size() > 0 ? storagePools.get(0) : null;
            vmListModel.postGetTemplatesNotPresentOnExportDomain(storagePool);
        }
    }), storageDomainId);
}
#method_after
private void getTemplatesNotPresentOnExportDomain() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    AsyncDataProvider.getInstance().getDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VmListModel<Void> vmListModel = (VmListModel<Void>) target;
            ArrayList<StoragePool> storagePools = (ArrayList<StoragePool>) returnValue;
            StoragePool storagePool = storagePools.size() > 0 ? storagePools.get(0) : null;
            vmListModel.postGetTemplatesNotPresentOnExportDomain(storagePool);
        }
    }), storageDomainId);
}
#end_block

#method_before
private void postGetTemplatesNotPresentOnExportDomain(StoragePool storagePool) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    if (storagePool != null) {
        AsyncDataProvider.getInstance().getAllTemplatesFromExportDomain(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                VmListModel vmListModel = (VmListModel) target;
                HashMap<VmTemplate, ArrayList<DiskImage>> templatesDiskSet = (HashMap<VmTemplate, ArrayList<DiskImage>>) returnValue;
                HashMap<String, ArrayList<String>> templateDic = new HashMap<String, ArrayList<String>>();
                // check if relevant templates are already there
                for (Object selectedItem : vmListModel.getSelectedItems()) {
                    VM vm = (VM) selectedItem;
                    boolean hasMatch = false;
                    for (VmTemplate a : templatesDiskSet.keySet()) {
                        if (vm.getVmtGuid().equals(a.getId())) {
                            hasMatch = true;
                            break;
                        }
                    }
                    if (!vm.getVmtGuid().equals(Guid.Empty) && !hasMatch) {
                        if (!templateDic.containsKey(vm.getVmtName())) {
                            templateDic.put(vm.getVmtName(), new ArrayList<String>());
                        }
                        templateDic.get(vm.getVmtName()).add(vm.getName());
                    }
                }
                String tempStr;
                ArrayList<String> tempList;
                ArrayList<String> missingTemplates = new ArrayList<String>();
                for (Map.Entry<String, ArrayList<String>> keyValuePair : templateDic.entrySet()) {
                    tempList = keyValuePair.getValue();
                    // $NON-NLS-1$ //$NON-NLS-2$
                    StringBuilder sb = new StringBuilder("Template " + keyValuePair.getKey() + " (for ");
                    int i;
                    for (i = 0; i < tempList.size() - 1; i++) {
                        sb.append(tempList.get(i));
                        // $NON-NLS-1$
                        sb.append(", ");
                    }
                    sb.append(tempList.get(i));
                    // $NON-NLS-1$
                    sb.append(")");
                    missingTemplates.add(sb.toString());
                }
                vmListModel.postExportGetMissingTemplates(missingTemplates);
            }
        }), storagePool.getId(), storageDomainId);
    }
}
#method_after
private void postGetTemplatesNotPresentOnExportDomain(StoragePool storagePool) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    if (storagePool != null) {
        AsyncDataProvider.getInstance().getAllTemplatesFromExportDomain(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                VmListModel<Void> vmListModel = (VmListModel<Void>) target;
                HashMap<VmTemplate, ArrayList<DiskImage>> templatesDiskSet = (HashMap<VmTemplate, ArrayList<DiskImage>>) returnValue;
                HashMap<String, ArrayList<String>> templateDic = new HashMap<>();
                // check if relevant templates are already there
                for (Object selectedItem : vmListModel.getSelectedItems()) {
                    VM vm = (VM) selectedItem;
                    boolean hasMatch = false;
                    for (VmTemplate a : templatesDiskSet.keySet()) {
                        if (vm.getVmtGuid().equals(a.getId())) {
                            hasMatch = true;
                            break;
                        }
                    }
                    if (!vm.getVmtGuid().equals(Guid.Empty) && !hasMatch) {
                        if (!templateDic.containsKey(vm.getVmtName())) {
                            templateDic.put(vm.getVmtName(), new ArrayList<String>());
                        }
                        templateDic.get(vm.getVmtName()).add(vm.getName());
                    }
                }
                String tempStr;
                ArrayList<String> tempList;
                ArrayList<String> missingTemplates = new ArrayList<>();
                for (Map.Entry<String, ArrayList<String>> keyValuePair : templateDic.entrySet()) {
                    tempList = keyValuePair.getValue();
                    // $NON-NLS-1$ //$NON-NLS-2$
                    StringBuilder sb = new StringBuilder("Template " + keyValuePair.getKey() + " (for ");
                    int i;
                    for (i = 0; i < tempList.size() - 1; i++) {
                        sb.append(tempList.get(i));
                        // $NON-NLS-1$
                        sb.append(", ");
                    }
                    sb.append(tempList.get(i));
                    // $NON-NLS-1$
                    sb.append(")");
                    missingTemplates.add(sb.toString());
                }
                vmListModel.postExportGetMissingTemplates(missingTemplates);
            }
        }), storagePool.getId(), storageDomainId);
    }
}
#end_block

#method_before
private void postExportGetMissingTemplates(ArrayList<String> missingTemplatesFromVms) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    model.stopProgress();
    for (Object a : getSelectedItems()) {
        VM vm = (VM) a;
        MoveVmParameters parameter = new MoveVmParameters(vm.getId(), storageDomainId);
        parameter.setForceOverride(model.getForceOverride().getEntity());
        parameter.setCopyCollapse(model.getCollapseSnapshots().getEntity());
        parameter.setTemplateMustExists(true);
        parameters.add(parameter);
    }
    if (!(Boolean) model.getCollapseSnapshots().getEntity()) {
        if ((missingTemplatesFromVms == null || missingTemplatesFromVms.size() > 0)) {
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().templatesNotFoundOnExportDomainTitle());
            confirmModel.setHelpTag(HelpTag.template_not_found_on_export_domain);
            // $NON-NLS-1$
            confirmModel.setHashName("template_not_found_on_export_domain");
            confirmModel.setMessage(missingTemplatesFromVms == null ? ConstantsManager.getInstance().getConstants().couldNotReadTemplatesFromExportDomainMsg() : ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainMsg());
            confirmModel.setItems(missingTemplatesFromVms);
            // $NON-NLS-1$
            UICommand tempVar = UICommand.createDefaultOkUiCommand("OnExportNoTemplates", this);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = UICommand.createCancelUiCommand("CancelConfirmation", this);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.startProgress(null);
            Frontend.getInstance().runMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                @Override
                public void executed(FrontendMultipleActionAsyncResult result) {
                    ExportVmModel localModel = (ExportVmModel) result.getState();
                    localModel.stopProgress();
                    cancel();
                }
            }, model);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        for (VdcActionParametersBase item : parameters) {
            MoveVmParameters parameter = (MoveVmParameters) item;
            parameter.setTemplateMustExists(false);
        }
        model.startProgress(null);
        Frontend.getInstance().runMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                ExportVmModel localModel = (ExportVmModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    }
}
#method_after
private void postExportGetMissingTemplates(ArrayList<String> missingTemplatesFromVms) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    model.stopProgress();
    for (Object a : getSelectedItems()) {
        VM vm = (VM) a;
        MoveVmParameters parameter = new MoveVmParameters(vm.getId(), storageDomainId);
        parameter.setForceOverride(model.getForceOverride().getEntity());
        parameter.setCopyCollapse(model.getCollapseSnapshots().getEntity());
        parameter.setTemplateMustExists(true);
        parameters.add(parameter);
    }
    if (!model.getCollapseSnapshots().getEntity()) {
        if ((missingTemplatesFromVms == null || missingTemplatesFromVms.size() > 0)) {
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().templatesNotFoundOnExportDomainTitle());
            confirmModel.setHelpTag(HelpTag.template_not_found_on_export_domain);
            // $NON-NLS-1$
            confirmModel.setHashName("template_not_found_on_export_domain");
            confirmModel.setMessage(missingTemplatesFromVms == null ? ConstantsManager.getInstance().getConstants().couldNotReadTemplatesFromExportDomainMsg() : ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainMsg());
            confirmModel.setItems(missingTemplatesFromVms);
            // $NON-NLS-1$
            UICommand tempVar = UICommand.createDefaultOkUiCommand("OnExportNoTemplates", this);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = UICommand.createCancelUiCommand("CancelConfirmation", this);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.startProgress(null);
            Frontend.getInstance().runMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                @Override
                public void executed(FrontendMultipleActionAsyncResult result) {
                    ExportVmModel localModel = (ExportVmModel) result.getState();
                    localModel.stopProgress();
                    cancel();
                }
            }, model);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        for (VdcActionParametersBase item : parameters) {
            MoveVmParameters parameter = (MoveVmParameters) item;
            parameter.setTemplateMustExists(false);
        }
        model.startProgress(null);
        Frontend.getInstance().runMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                ExportVmModel localModel = (ExportVmModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    }
}
#end_block

#method_before
private void onExportNoTemplates() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        MoveVmParameters parameters = new MoveVmParameters(a.getId(), storageDomainId);
        parameters.setForceOverride(model.getForceOverride().getEntity());
        parameters.setCopyCollapse(model.getCollapseSnapshots().getEntity());
        parameters.setTemplateMustExists(false);
        list.add(parameters);
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.ExportVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ExportVmModel localModel = (ExportVmModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#method_after
private void onExportNoTemplates() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        MoveVmParameters parameters = new MoveVmParameters(a.getId(), storageDomainId);
        parameters.setForceOverride(model.getForceOverride().getEntity());
        parameters.setCopyCollapse(model.getCollapseSnapshots().getEntity());
        parameters.setTemplateMustExists(false);
        list.add(parameters);
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.ExportVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ExportVmModel localModel = (ExportVmModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#end_block

#method_before
private void runOnce() {
    VM vm = (VM) getSelectedItem();
    // populating VMInit
    AsyncQuery getVmInitQuery = new AsyncQuery();
    getVmInitQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            RunOnceModel runOnceModel = new WebadminRunOnceModel((VM) result, VmListModel.this);
            setWindow(runOnceModel);
            runOnceModel.init();
        }
    };
    AsyncDataProvider.getInstance().getVmById(getVmInitQuery, vm.getId());
}
#method_after
private void runOnce() {
    VM vm = getSelectedItem();
    // populating VMInit
    AsyncQuery getVmInitQuery = new AsyncQuery();
    getVmInitQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            RunOnceModel runOnceModel = new WebadminRunOnceModel((VM) result, VmListModel.this);
            setWindow(runOnceModel);
            runOnceModel.init();
        }
    };
    AsyncDataProvider.getInstance().getVmById(getVmInitQuery, vm.getId());
}
#end_block

#method_before
private void newTemplate() {
    VM vm = (VM) getSelectedItem();
    if (vm == null || getWindow() != null) {
        return;
    }
    UnitVmModel model = new UnitVmModel(new NewTemplateVmModelBehavior(vm), this);
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newTemplateTitle());
    model.setHelpTag(HelpTag.new_template);
    // $NON-NLS-1$
    model.setHashName("new_template");
    model.setIsNew(true);
    model.getVmType().setSelectedItem(vm.getVmType());
    model.setCustomPropertiesKeysList(AsyncDataProvider.getInstance().getCustomPropertiesList());
    model.initialize(getSystemTreeSelectedItem());
    model.getCommands().add(// $NON-NLS-1$
    new UICommand("OnNewTemplate", this).setTitle(ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true));
    // $NON-NLS-1$
    model.getCommands().add(UICommand.createCancelUiCommand("Cancel", this));
    model.getIsHighlyAvailable().setEntity(vm.getStaticData().isAutoStartup());
}
#method_after
private void newTemplate() {
    VM vm = getSelectedItem();
    if (vm == null || getWindow() != null) {
        return;
    }
    UnitVmModel model = new UnitVmModel(new NewTemplateVmModelBehavior(vm), this);
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newTemplateTitle());
    model.setHelpTag(HelpTag.new_template);
    // $NON-NLS-1$
    model.setHashName("new_template");
    model.setIsNew(true);
    model.getVmType().setSelectedItem(vm.getVmType());
    model.setCustomPropertiesKeysList(AsyncDataProvider.getInstance().getCustomPropertiesList());
    model.initialize(getSystemTreeSelectedItem());
    model.getCommands().add(// $NON-NLS-1$
    new UICommand("OnNewTemplate", this).setTitle(ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true));
    // $NON-NLS-1$
    model.getCommands().add(UICommand.createCancelUiCommand("Cancel", this));
    model.getIsHighlyAvailable().setEntity(vm.getStaticData().isAutoStartup());
}
#end_block

#method_before
private void onNewTemplate() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM vm = (VM) getSelectedItem();
    if (vm == null) {
        cancel();
        return;
    }
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate(false)) {
        model.setIsValid(false);
    } else if (model.getIsSubTemplate().getEntity()) {
        postNameUniqueCheck();
    } else {
        String name = model.getName().getEntity();
        // Check name unicitate.
        AsyncDataProvider.getInstance().isTemplateNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                VmListModel vmListModel = (VmListModel) target;
                boolean isNameUnique = (Boolean) returnValue;
                if (!isNameUnique) {
                    UnitVmModel VmModel = (UnitVmModel) vmListModel.getWindow();
                    VmModel.getInvalidityReasons().clear();
                    VmModel.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
                    VmModel.getName().setIsValid(false);
                    VmModel.setIsValid(false);
                } else {
                    vmListModel.postNameUniqueCheck();
                }
            }
        }), name);
    }
}
#method_after
private void onNewTemplate() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM vm = getSelectedItem();
    if (vm == null) {
        cancel();
        return;
    }
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate(false)) {
        model.setIsValid(false);
    } else if (model.getIsSubTemplate().getEntity()) {
        postNameUniqueCheck();
    } else {
        String name = model.getName().getEntity();
        // Check name unicitate.
        AsyncDataProvider.getInstance().isTemplateNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                VmListModel<Void> vmListModel = (VmListModel<Void>) target;
                boolean isNameUnique = (Boolean) returnValue;
                if (!isNameUnique) {
                    UnitVmModel VmModel = (UnitVmModel) vmListModel.getWindow();
                    VmModel.getInvalidityReasons().clear();
                    VmModel.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
                    VmModel.getName().setIsValid(false);
                    VmModel.setIsValid(false);
                } else {
                    vmListModel.postNameUniqueCheck();
                }
            }
        }), name);
    }
}
#end_block

#method_before
private void postNameUniqueCheck() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM vm = (VM) getSelectedItem();
    VM newVm = buildVmOnNewTemplate(model, vm);
    AddVmTemplateParameters addVmTemplateParameters = new AddVmTemplateParameters(newVm, model.getName().getEntity(), model.getDescription().getEntity());
    addVmTemplateParameters.setPublicUse(model.getIsTemplatePublic().getEntity());
    addVmTemplateParameters.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
    addVmTemplateParameters.setSoundDeviceEnabled(model.getIsSoundcardEnabled().getEntity());
    addVmTemplateParameters.setBalloonEnabled(balloonEnabled(model));
    addVmTemplateParameters.setCopyVmPermissions(model.getCopyPermissions().getEntity());
    model.startProgress(null);
    addVmTemplateParameters.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity());
    if (model.getIsSubTemplate().getEntity()) {
        addVmTemplateParameters.setBaseTemplateId(model.getBaseTemplate().getSelectedItem().getId());
        addVmTemplateParameters.setTemplateVersionName(model.getTemplateVersionName().getEntity());
    }
    Frontend.getInstance().runAction(VdcActionType.AddVmTemplate, addVmTemplateParameters, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            VmListModel vmListModel = (VmListModel) result.getState();
            vmListModel.getWindow().stopProgress();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                vmListModel.cancel();
            }
        }
    }, this);
}
#method_after
private void postNameUniqueCheck() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM vm = getSelectedItem();
    VM newVm = buildVmOnNewTemplate(model, vm);
    AddVmTemplateParameters addVmTemplateParameters = new AddVmTemplateParameters(newVm, model.getName().getEntity(), model.getDescription().getEntity());
    addVmTemplateParameters.setPublicUse(model.getIsTemplatePublic().getEntity());
    addVmTemplateParameters.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
    addVmTemplateParameters.setSoundDeviceEnabled(model.getIsSoundcardEnabled().getEntity());
    addVmTemplateParameters.setBalloonEnabled(balloonEnabled(model));
    addVmTemplateParameters.setCopyVmPermissions(model.getCopyPermissions().getEntity());
    model.startProgress(null);
    addVmTemplateParameters.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity());
    if (model.getIsSubTemplate().getEntity()) {
        addVmTemplateParameters.setBaseTemplateId(model.getBaseTemplate().getSelectedItem().getId());
        addVmTemplateParameters.setTemplateVersionName(model.getTemplateVersionName().getEntity());
    }
    Frontend.getInstance().runAction(VdcActionType.AddVmTemplate, addVmTemplateParameters, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            VmListModel<Void> vmListModel = (VmListModel<Void>) result.getState();
            vmListModel.getWindow().stopProgress();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                vmListModel.cancel();
            }
        }
    }, this);
}
#end_block

#method_before
private void migrate() {
    VM vm = (VM) getSelectedItem();
    if (vm == null) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    MigrateModel model = new MigrateModel(this);
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().migrateVirtualMachinesTitle());
    model.setHelpTag(HelpTag.migrate_virtual_machine);
    // $NON-NLS-1$
    model.setHashName("migrate_virtual_machine");
    model.setVmsOnSameCluster(true);
    model.setIsAutoSelect(true);
    model.setVmList(Linq.<VM>cast(getSelectedItems()));
    model.setVm(vm);
    model.initializeModel();
}
#method_after
private void migrate() {
    VM vm = getSelectedItem();
    if (vm == null) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    MigrateModel model = new MigrateModel(this);
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().migrateVirtualMachinesTitle());
    model.setHelpTag(HelpTag.migrate_virtual_machine);
    // $NON-NLS-1$
    model.setHashName("migrate_virtual_machine");
    model.setVmsOnSameCluster(true);
    model.setIsAutoSelect(true);
    model.setVmList(Linq.<VM>cast(getSelectedItems()));
    model.setVm(vm);
    model.initializeModel();
}
#end_block

#method_before
private void cancelMigration() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new VmOperationParameterBase(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.CancelMigrateVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
        }
    }, null);
}
#method_after
private void cancelMigration() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new VmOperationParameterBase(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.CancelMigrateVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
        }
    }, null);
}
#end_block

#method_before
private void onMigrate() {
    MigrateModel model = (MigrateModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    model.startProgress(null);
    Guid targetClusterId = model.getClusters().getSelectedItem() != null ? model.getClusters().getSelectedItem().getId() : null;
    if (model.getIsAutoSelect()) {
        ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
        for (Object item : getSelectedItems()) {
            VM a = (VM) item;
            list.add(new MigrateVmParameters(true, a.getId(), targetClusterId));
        }
        Frontend.getInstance().runMultipleAction(VdcActionType.MigrateVm, list, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                MigrateModel localModel = (MigrateModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    } else {
        ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
        for (Object item : getSelectedItems()) {
            VM a = (VM) item;
            if (a.getRunOnVds().equals(model.getHosts().getSelectedItem().getId())) {
                continue;
            }
            list.add(new MigrateVmToServerParameters(true, a.getId(), model.getHosts().getSelectedItem().getId(), targetClusterId));
        }
        Frontend.getInstance().runMultipleAction(VdcActionType.MigrateVmToServer, list, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                MigrateModel localModel = (MigrateModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    }
}
#method_after
private void onMigrate() {
    MigrateModel model = (MigrateModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    model.startProgress(null);
    Guid targetClusterId = model.getClusters().getSelectedItem() != null ? model.getClusters().getSelectedItem().getId() : null;
    if (model.getIsAutoSelect()) {
        ArrayList<VdcActionParametersBase> list = new ArrayList<>();
        for (Object item : getSelectedItems()) {
            VM a = (VM) item;
            list.add(new MigrateVmParameters(true, a.getId(), targetClusterId));
        }
        Frontend.getInstance().runMultipleAction(VdcActionType.MigrateVm, list, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                MigrateModel localModel = (MigrateModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    } else {
        ArrayList<VdcActionParametersBase> list = new ArrayList<>();
        for (Object item : getSelectedItems()) {
            VM a = (VM) item;
            if (a.getRunOnVds().equals(model.getHosts().getSelectedItem().getId())) {
                continue;
            }
            list.add(new MigrateVmToServerParameters(true, a.getId(), model.getHosts().getSelectedItem().getId(), targetClusterId));
        }
        Frontend.getInstance().runMultipleAction(VdcActionType.MigrateVmToServer, list, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                MigrateModel localModel = (MigrateModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    }
}
#end_block

#method_before
private void powerAction(String actionName, String title, String message, boolean reasonVisible) {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(title);
    model.setReasonVisible(reasonVisible);
    if (actionName.equals(SHUTDOWN)) {
        model.setHelpTag(HelpTag.shutdown_virtual_machine);
        // $NON-NLS-1$
        model.setHashName("shutdown_virtual_machine");
    } else if (actionName.equals(STOP)) {
        model.setHelpTag(HelpTag.stop_virtual_machine);
        // $NON-NLS-1$
        model.setHashName("stop_virtual_machine");
    } else if (actionName.equals(REBOOT)) {
        model.setHelpTag(HelpTag.reboot_virtual_machine);
        // $NON-NLS-1$
        model.setHashName("reboot_virtual_machine");
    }
    model.setMessage(message);
    ArrayList<String> items = new ArrayList<String>();
    boolean stoppingSingleVM = getSelectedItems().size() == 1 && (actionName.equals(SHUTDOWN) || actionName.equals(STOP));
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        items.add(vm.getName());
        // is populated with the current reason so the user can edit it.
        if (stoppingSingleVM && reasonVisible && VMStatus.PoweringDown.equals(vm.getStatus())) {
            model.getReason().setEntity(vm.getStopReason());
        }
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("On" + actionName, this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#method_after
private void powerAction(String actionName, String title, String message, boolean reasonVisible) {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(title);
    model.setReasonVisible(reasonVisible);
    if (actionName.equals(SHUTDOWN)) {
        model.setHelpTag(HelpTag.shutdown_virtual_machine);
        // $NON-NLS-1$
        model.setHashName("shutdown_virtual_machine");
    } else if (actionName.equals(STOP)) {
        model.setHelpTag(HelpTag.stop_virtual_machine);
        // $NON-NLS-1$
        model.setHashName("stop_virtual_machine");
    } else if (actionName.equals(REBOOT)) {
        model.setHelpTag(HelpTag.reboot_virtual_machine);
        // $NON-NLS-1$
        model.setHashName("reboot_virtual_machine");
    }
    model.setMessage(message);
    ArrayList<String> items = new ArrayList<>();
    boolean stoppingSingleVM = getSelectedItems().size() == 1 && (actionName.equals(SHUTDOWN) || actionName.equals(STOP));
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        items.add(vm.getName());
        // is populated with the current reason so the user can edit it.
        if (stoppingSingleVM && reasonVisible && VMStatus.PoweringDown.equals(vm.getStatus())) {
            model.getReason().setEntity(vm.getStopReason());
        }
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("On" + actionName, this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void onPowerAction(VdcActionType actionType, PowerActionParametersFactory<?> parametersFactory) {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        list.add(parametersFactory.createActionParameters(vm));
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(actionType, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#method_after
private void onPowerAction(VdcActionType actionType, PowerActionParametersFactory<?> parametersFactory) {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        list.add(parametersFactory.createActionParameters(vm));
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(actionType, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#end_block

#method_before
private void pause() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new VmOperationParameterBase(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.HibernateVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
        }
    }, null);
}
#method_after
private void pause() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new VmOperationParameterBase(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.HibernateVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
        }
    }, null);
}
#end_block

#method_before
private void run() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new RunVmParams(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.RunVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
        }
    }, null);
}
#method_after
private void run() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new RunVmParams(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.RunVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
        }
    }, null);
}
#end_block

#method_before
private void onRemove() {
    final ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    final ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (Entry<Guid, EntityModel> entry : vmsRemoveMap.entrySet()) {
        list.add(new RemoveVmParameters(entry.getKey(), false, (Boolean) entry.getValue().getEntity()));
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.RemoveVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#method_after
private void onRemove() {
    final ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    final ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Entry<Guid, EntityModel> entry : vmsRemoveMap.entrySet()) {
        list.add(new RemoveVmParameters(entry.getKey(), false, (Boolean) entry.getValue().getEntity()));
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.RemoveVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#end_block

#method_before
private void changeCD() {
    final VM vm = (VM) getSelectedItem();
    if (vm == null) {
        return;
    }
    AttachCdModel model = new AttachCdModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().changeCDTitle());
    model.setHelpTag(HelpTag.change_cd);
    // $NON-NLS-1$
    model.setHashName("change_cd");
    AttachCdModel attachCdModel = (AttachCdModel) getWindow();
    ArrayList<String> images1 = new ArrayList<String>(Arrays.asList(new String[] { ConstantsManager.getInstance().getConstants().noCds() }));
    attachCdModel.getIsoImage().setItems(images1);
    attachCdModel.getIsoImage().setSelectedItem(Linq.firstOrDefault(images1));
    AsyncQuery getIrsImageListCallback = new AsyncQuery();
    getIrsImageListCallback.setModel(this);
    getIrsImageListCallback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            VmListModel vmListModel2 = (VmListModel) model;
            AttachCdModel _attachCdModel = (AttachCdModel) vmListModel2.getWindow();
            ArrayList<String> images = (ArrayList<String>) result;
            images.add(0, ConsoleModel.getEjectLabel());
            _attachCdModel.getIsoImage().setItems(images);
            if (_attachCdModel.getIsoImage().getIsChangable()) {
                String selectedIso = Linq.firstOrDefault(images, new Linq.IPredicate<String>() {

                    @Override
                    public boolean match(String s) {
                        return vm.getCurrentCd().equals(s);
                    }
                });
                _attachCdModel.getIsoImage().setSelectedItem(selectedIso == null ? ConsoleModel.getEjectLabel() : selectedIso);
            }
        }
    };
    AsyncDataProvider.getInstance().getIrsImageList(getIrsImageListCallback, vm.getStoragePoolId());
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnChangeCD", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#method_after
private void changeCD() {
    final VM vm = getSelectedItem();
    if (vm == null) {
        return;
    }
    AttachCdModel model = new AttachCdModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().changeCDTitle());
    model.setHelpTag(HelpTag.change_cd);
    // $NON-NLS-1$
    model.setHashName("change_cd");
    AttachCdModel attachCdModel = (AttachCdModel) getWindow();
    ArrayList<String> images1 = new ArrayList<>(Arrays.asList(new String[] { ConstantsManager.getInstance().getConstants().noCds() }));
    attachCdModel.getIsoImage().setItems(images1);
    attachCdModel.getIsoImage().setSelectedItem(Linq.firstOrDefault(images1));
    AsyncQuery getIrsImageListCallback = new AsyncQuery();
    getIrsImageListCallback.setModel(this);
    getIrsImageListCallback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            VmListModel<Void> vmListModel2 = (VmListModel<Void>) model;
            AttachCdModel _attachCdModel = (AttachCdModel) vmListModel2.getWindow();
            ArrayList<String> images = (ArrayList<String>) result;
            images.add(0, ConsoleModel.getEjectLabel());
            _attachCdModel.getIsoImage().setItems(images);
            if (_attachCdModel.getIsoImage().getIsChangable()) {
                String selectedIso = Linq.firstOrDefault(images, new Linq.IPredicate<String>() {

                    @Override
                    public boolean match(String s) {
                        return vm.getCurrentCd().equals(s);
                    }
                });
                _attachCdModel.getIsoImage().setSelectedItem(selectedIso == null ? ConsoleModel.getEjectLabel() : selectedIso);
            }
        }
    };
    AsyncDataProvider.getInstance().getIrsImageList(getIrsImageListCallback, vm.getStoragePoolId());
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnChangeCD", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void onChangeCD() {
    VM vm = (VM) getSelectedItem();
    if (vm == null) {
        cancel();
        return;
    }
    AttachCdModel model = (AttachCdModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    String isoName = // $NON-NLS-1$
    (ObjectUtils.objectsEqual(model.getIsoImage().getSelectedItem(), ConsoleModel.getEjectLabel())) ? // $NON-NLS-1$
    "" : model.getIsoImage().getSelectedItem();
    model.startProgress(null);
    Frontend.getInstance().runAction(VdcActionType.ChangeDisk, new ChangeDiskCommandParameters(vm.getId(), isoName), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            AttachCdModel attachCdModel = (AttachCdModel) result.getState();
            attachCdModel.stopProgress();
            cancel();
        }
    }, model);
}
#method_after
private void onChangeCD() {
    VM vm = getSelectedItem();
    if (vm == null) {
        cancel();
        return;
    }
    AttachCdModel model = (AttachCdModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    String isoName = // $NON-NLS-1$
    (ObjectUtils.objectsEqual(model.getIsoImage().getSelectedItem(), ConsoleModel.getEjectLabel())) ? // $NON-NLS-1$
    "" : model.getIsoImage().getSelectedItem();
    model.startProgress(null);
    Frontend.getInstance().runAction(VdcActionType.ChangeDisk, new ChangeDiskCommandParameters(vm.getId(), isoName), new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            AttachCdModel attachCdModel = (AttachCdModel) result.getState();
            attachCdModel.stopProgress();
            cancel();
        }
    }, model);
}
#end_block

#method_before
private void setGlobalHaMaintenance(boolean enabled) {
    VM vm = (VM) getSelectedItem();
    if (vm == null) {
        return;
    }
    if (!vm.isHostedEngine()) {
        return;
    }
    SetHaMaintenanceParameters params = new SetHaMaintenanceParameters(vm.getRunOnVds(), HaMaintenanceMode.GLOBAL, enabled);
    Frontend.getInstance().runAction(VdcActionType.SetHaMaintenance, params);
}
#method_after
private void setGlobalHaMaintenance(boolean enabled) {
    VM vm = getSelectedItem();
    if (vm == null) {
        return;
    }
    if (!vm.isHostedEngine()) {
        return;
    }
    SetHaMaintenanceParameters params = new SetHaMaintenanceParameters(vm.getRunOnVds(), HaMaintenanceMode.GLOBAL, enabled);
    Frontend.getInstance().runAction(VdcActionType.SetHaMaintenance, params);
}
#end_block

#method_before
private void preSave() {
    final UnitVmModel model = (UnitVmModel) getWindow();
    final String name = model.getName().getEntity();
    if (model.getIsNew() == false && selectedItem == null) {
        cancel();
        return;
    }
    setcurrentVm(model.getIsNew() ? new VM() : (VM) Cloner.clone(selectedItem));
    if (!model.validate()) {
        return;
    }
    AsyncDataProvider.getInstance().isVmNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            if (!(Boolean) returnValue && name.compareToIgnoreCase(getcurrentVm().getName()) != 0) {
                model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
                model.getName().setIsValid(false);
                model.setValidTab(TabName.GENERAL_TAB, false);
            } else {
                model.getName().getInvalidityReasons().clear();
                model.getName().setIsValid(true);
                model.setValidTab(TabName.GENERAL_TAB, true);
                onSave();
            }
        }
    }), name);
}
#method_after
private void preSave() {
    final UnitVmModel model = (UnitVmModel) getWindow();
    final String name = model.getName().getEntity();
    if (model.getIsNew() == false && selectedItem == null) {
        cancel();
        return;
    }
    setcurrentVm(model.getIsNew() ? new VM() : (VM) Cloner.clone(selectedItem));
    validateVm(model, name);
}
#end_block

#method_before
private void updateExistingVm(final boolean applyCpuChangesLater) {
    final UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    // runEditVM: should be true if Cluster hasn't changed or if
    // Cluster has changed and Editing it in the Backend has succeeded:
    VM selectedItem = (VM) getSelectedItem();
    Guid oldClusterID = selectedItem.getVdsGroupId();
    Guid newClusterID = model.getSelectedCluster().getId();
    if (oldClusterID.equals(newClusterID) == false) {
        ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
        model.startProgress(null);
        Frontend.getInstance().runAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void executed(FrontendActionAsyncResult result) {
                final VmListModel vmListModel = (VmListModel) result.getState();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    VM vm = vmListModel.getcurrentVm();
                    VmManagementParametersBase updateVmParams = vmListModel.getUpdateVmParameters(applyCpuChangesLater);
                    Frontend.getInstance().runAction(VdcActionType.UpdateVm, updateVmParams, new UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, vm.getId()), vmListModel);
                } else {
                    vmListModel.getWindow().stopProgress();
                }
            }
        }, this);
    } else {
        model.startProgress(null);
        VmManagementParametersBase updateVmParams = getUpdateVmParameters(applyCpuChangesLater);
        Frontend.getInstance().runAction(VdcActionType.UpdateVm, updateVmParams, new UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, getcurrentVm().getId()), this);
    }
}
#method_after
private void updateExistingVm(final boolean applyCpuChangesLater) {
    final UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    // runEditVM: should be true if Cluster hasn't changed or if
    // Cluster has changed and Editing it in the Backend has succeeded:
    VM selectedItem = getSelectedItem();
    Guid oldClusterID = selectedItem.getVdsGroupId();
    Guid newClusterID = model.getSelectedCluster().getId();
    if (oldClusterID.equals(newClusterID) == false) {
        ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
        model.startProgress(null);
        Frontend.getInstance().runAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void executed(FrontendActionAsyncResult result) {
                final VmListModel<Void> vmListModel = (VmListModel<Void>) result.getState();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    VM vm = vmListModel.getcurrentVm();
                    VmManagementParametersBase updateVmParams = vmListModel.getUpdateVmParameters(applyCpuChangesLater);
                    Frontend.getInstance().runAction(VdcActionType.UpdateVm, updateVmParams, new UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, vm.getId()), vmListModel);
                } else {
                    vmListModel.getWindow().stopProgress();
                }
            }
        }, this);
    } else {
        model.startProgress(null);
        VmManagementParametersBase updateVmParams = getUpdateVmParameters(applyCpuChangesLater);
        Frontend.getInstance().runAction(VdcActionType.UpdateVm, updateVmParams, new UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, getcurrentVm().getId()), this);
    }
}
#end_block

#method_before
private void changeCD(Object sender, EventArgs e) {
    ChangeCDModel model = (ChangeCDModel) sender;
    // TODO: Patch!
    String isoName = model.getTitle();
    if (ObjectUtils.objectsEqual(isoName, ConstantsManager.getInstance().getConstants().noCds())) {
        return;
    }
    Object tempVar = getSelectedItem();
    VM vm = (VM) ((tempVar instanceof VM) ? tempVar : null);
    if (vm == null) {
        return;
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.ChangeDisk, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { new ChangeDiskCommandParameters(vm.getId(), // $NON-NLS-1$
    ObjectUtils.objectsEqual(isoName, ConsoleModel.getEjectLabel()) ? "" : isoName) })), new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
        }
    }, null);
}
#method_after
private void changeCD(Object sender, EventArgs e) {
    ChangeCDModel model = (ChangeCDModel) sender;
    // TODO: Patch!
    String isoName = model.getTitle();
    if (ObjectUtils.objectsEqual(isoName, ConstantsManager.getInstance().getConstants().noCds())) {
        return;
    }
    Object tempVar = getSelectedItem();
    VM vm = (VM) ((tempVar instanceof VM) ? tempVar : null);
    if (vm == null) {
        return;
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.ChangeDisk, new ArrayList<>(Arrays.asList(new VdcActionParametersBase[] { new ChangeDiskCommandParameters(vm.getId(), // $NON-NLS-1$
    ObjectUtils.objectsEqual(isoName, ConsoleModel.getEjectLabel()) ? "" : isoName) })), new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
        }
    }, null);
}
#end_block

#method_before
public void cancel() {
    cancelConfirmation();
    setGuideContext(null);
    setWindow(null);
    updateActionAvailability();
}
#method_after
@Override
public void cancel() {
    cancelConfirmation();
    setGuideContext(null);
    setWindow(null);
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void onSelectedItemChanged() {
    super.onSelectedItemChanged();
    updateActionAvailability();
}
#method_after
@Override
protected void onSelectedItemChanged() {
    super.onSelectedItemChanged();
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void selectedItemsChanged() {
    super.selectedItemsChanged();
    updateActionAvailability();
}
#method_after
@Override
protected void selectedItemsChanged() {
    super.selectedItemsChanged();
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void selectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.selectedItemPropertyChanged(sender, e);
    if (e.propertyName.equals("status")) {
        // $NON-NLS-1$
        updateActionAvailability();
    }
}
#method_after
@Override
protected void selectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.selectedItemPropertyChanged(sender, e);
    if (e.propertyName.equals("status")) {
        // $NON-NLS-1$
        updateActionsAvailability();
    }
}
#end_block

#method_before
private boolean isConsoleEditEnabled() {
    return getSelectedItem() != null && ((VM) getSelectedItem()).isRunningOrPaused();
}
#method_after
private boolean isConsoleEditEnabled() {
    return getSelectedItem() != null && getSelectedItem().isRunningOrPaused();
}
#end_block

#method_before
private void updateHaMaintenanceAvailability(List items) {
    if (items == null || items.size() != 1) {
        setHaMaintenanceAvailability(false);
        return;
    }
    VM vm = (VM) getSelectedItem();
    if (vm == null || !vm.isHostedEngine() || vm.getVdsGroupCompatibilityVersion().compareTo(Version.v3_4) < 0) {
        setHaMaintenanceAvailability(false);
    } else {
        setHaMaintenanceAvailability(true);
    }
}
#method_after
private void updateHaMaintenanceAvailability(List items) {
    if (items == null || items.size() != 1) {
        setHaMaintenanceAvailability(false);
        return;
    }
    VM vm = getSelectedItem();
    if (vm == null || !vm.isHostedEngine() || vm.getVdsGroupCompatibilityVersion().compareTo(Version.v3_4) < 0) {
        setHaMaintenanceAvailability(false);
    } else {
        setHaMaintenanceAvailability(true);
    }
}
#end_block

#method_before
private void importVms() {
    if (getWindow() != null) {
        return;
    }
    ImportVmsModel model = importVmsModelProvider.get();
    model.init();
    setWindow(model);
    model.getCommands().add(new UICommand(CMD_CONFIGURE_VMS_TO_IMPORT, this).setIsExecutionAllowed(false).setTitle(ConstantsManager.getInstance().getConstants().next()).setIsDefault(true));
    model.getCommands().add(new UICommand(CMD_CANCEL, this).setTitle(ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true));
}
#method_after
private void importVms() {
    if (getWindow() != null) {
        return;
    }
    final ImportVmsModel model = importVmsModelProvider.get();
    model.init();
    setWindow(model);
    model.getCommands().add(new UICommand(CMD_CONFIGURE_VMS_TO_IMPORT, this).setIsExecutionAllowed(false).setTitle(ConstantsManager.getInstance().getConstants().next()).setIsDefault(true));
    model.getCommands().add(new UICommand(CMD_CANCEL, this).setTitle(ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true));
    model.initImportFromExportDomainModel(new UICommand(CMD_RESTORE_FROM_EXPORT_DOMAIN, new BaseCommandTarget() {

        @Override
        public void executeCommand(UICommand uiCommand) {
            onRestoreFromExportDomain();
        }
    }).setTitle(ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true), new UICommand(CMD_BACK, new BaseCommandTarget() {

        @Override
        public void executeCommand(UICommand uiCommand) {
            // remove current window first
            setWindow(null);
            setWindow(model);
        }
    }).setTitle(ConstantsManager.getInstance().getConstants().back()), new UICommand(CMD_CANCEL, this).setIsCancel(true).setTitle(ConstantsManager.getInstance().getConstants().cancel()));
}
#end_block

#method_before
private void cloneVm() {
    final VM vm = (VM) getSelectedItem();
    if (vm == null) {
        return;
    }
    CloneVmModel model = new CloneVmModel(vm, constants);
    setWindow(model);
    model.initialize();
    model.setTitle(ConstantsManager.getInstance().getConstants().cloneVmTitle());
    model.setHelpTag(HelpTag.clone_vm);
    // $NON-NLS-1$
    model.setHashName("clone_vm");
    // $NON-NLS-1$
    UICommand okCommand = UICommand.createDefaultOkUiCommand("OnClone", this);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(cancelCommand);
}
#method_after
private void cloneVm() {
    final VM vm = getSelectedItem();
    if (vm == null) {
        return;
    }
    CloneVmModel model = new CloneVmModel(vm, constants);
    setWindow(model);
    model.initialize();
    model.setTitle(ConstantsManager.getInstance().getConstants().cloneVmTitle());
    model.setHelpTag(HelpTag.clone_vm);
    // $NON-NLS-1$
    model.setHashName("clone_vm");
    // $NON-NLS-1$
    UICommand okCommand = UICommand.createDefaultOkUiCommand("OnClone", this);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(cancelCommand);
}
#end_block

#method_before
private void onConfigureVmsToImport() {
    final ImportVmsModel importVmsModel = (ImportVmsModel) getWindow();
    if (importVmsModel == null) {
        return;
    }
    ImportVmFromExportDomainModel model = importVmsModel.getSpecificImportModel();
    // remove import-vms window first
    setWindow(null);
    setWindow(model);
    model.getCommands().add(new UICommand(CMD_RESTORE_FROM_EXPORT_DOMAIN, new BaseCommandTarget() {

        @Override
        public void executeCommand(UICommand uiCommand) {
            onRestoreFromExportDomain();
        }
    }).setTitle(ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true));
    model.getCommands().add(new UICommand(CMD_BACK, new BaseCommandTarget() {

        @Override
        public void executeCommand(UICommand uiCommand) {
            // remove current window first
            setWindow(null);
            setWindow(importVmsModel);
        }
    }).setTitle(ConstantsManager.getInstance().getConstants().back()));
    model.getCommands().add(new UICommand(CMD_CANCEL, this).setTitle(ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true));
}
#method_after
private void onConfigureVmsToImport() {
    final ImportVmsModel importVmsModel = (ImportVmsModel) getWindow();
    if (importVmsModel == null) {
        return;
    }
    ImportVmFromExportDomainModel model = importVmsModel.getSpecificImportModel();
    // remove import-vms window first
    setWindow(null);
    setWindow(model);
}
#end_block

#method_before
private void onRestoreFromExportDomain() {
    ImportVmFromExportDomainModel importModel = (ImportVmFromExportDomainModel) getWindow();
    if (importModel.getProgress() != null) {
        return;
    }
    if (!importModel.validate()) {
        return;
    }
    cloneObjectMap = new HashMap<Guid, Object>();
    objectsToClone = new ArrayList<Object>();
    for (Object object : (ArrayList<Object>) importModel.getItems()) {
        ImportEntityData item = (ImportEntityData) object;
        if ((Boolean) item.getClone().getEntity()) {
            objectsToClone.add(object);
        }
    }
    executeImportClone(importModel);
}
#method_after
private void onRestoreFromExportDomain() {
    ImportVmFromExportDomainModel importModel = (ImportVmFromExportDomainModel) getWindow();
    if (importModel.getProgress() != null) {
        return;
    }
    if (!importModel.validate()) {
        return;
    }
    cloneObjectMap = new HashMap<>();
    objectsToClone = new ArrayList<>();
    for (Object object : importModel.getItems()) {
        ImportEntityData<Object> item = (ImportEntityData<Object>) object;
        if (item.getClone().getEntity()) {
            objectsToClone.add(object);
        }
    }
    executeImportClone(importModel);
}
#end_block

#method_before
protected void executeImport(ImportVmFromExportDomainModel importModel) {
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object item : importModel.getItems()) {
        VM vm = ((ImportVmData) item).getVm();
        ImportVmParameters prm = new ImportVmParameters(vm, (Guid) importModel.getEntity(), Guid.Empty, importModel.getStoragePool().getId(), ((VDSGroup) importModel.getCluster().getSelectedItem()).getId());
        if (importModel.getClusterQuota().getSelectedItem() != null && importModel.getClusterQuota().getIsAvailable()) {
            prm.setQuotaId(((Quota) importModel.getClusterQuota().getSelectedItem()).getId());
        }
        prm.setForceOverride(true);
        prm.setCopyCollapse((Boolean) ((ImportVmData) item).getCollapseSnapshots().getEntity());
        Map<Guid, Guid> map = new HashMap<Guid, Guid>();
        for (Map.Entry<Guid, Disk> entry : vm.getDiskMap().entrySet()) {
            DiskImage disk = (DiskImage) entry.getValue();
            map.put(disk.getId(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getId());
            disk.setvolumeFormat(AsyncDataProvider.getInstance().getDiskVolumeFormat(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getStorageType()));
            disk.setVolumeType(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType());
            if (importModel.getDiskImportData(disk.getId()).getSelectedQuota() != null) {
                disk.setQuotaId(importModel.getDiskImportData(disk.getId()).getSelectedQuota().getId());
            }
        }
        prm.setImageToDestinationDomainMap(map);
        if (((ImportVmData) item).isExistsInSystem() || (Boolean) ((ImportVmData) item).getClone().getEntity()) {
            if (!cloneObjectMap.containsKey(vm.getId())) {
                continue;
            }
            prm.setImportAsNewEntity(true);
            prm.setCopyCollapse(true);
            prm.getVm().setName(((ImportVmData) cloneObjectMap.get(vm.getId())).getVm().getName());
        }
        prms.add(prm);
    }
    importModel.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.ImportVm, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            VmListModel vmListModel = (VmListModel) result.getState();
            vmListModel.stopProgress();
            vmListModel.setConfirmWindow(null);
            vmListModel.setWindow(null);
            vmListModel.clearCachedAssignedVmNames();
            List<VdcReturnValueBase> retVals = result.getReturnValue();
            if (retVals != null && vmListModel.getSelectedItems().size() == retVals.size()) {
                StringBuilder importedVms = new StringBuilder();
                int counter = 0;
                boolean toShowConfirmWindow = false;
                for (Object item : vmListModel.getSelectedItems()) {
                    VM vm = (VM) item;
                    if (retVals.get(counter) != null && retVals.get(counter).getCanDoAction()) {
                        // $NON-NLS-1$
                        importedVms.append(vm.getName()).append(", ");
                        toShowConfirmWindow = true;
                    }
                    counter++;
                }
                // VM
                if (toShowConfirmWindow) {
                    ConfirmationModel confirmModel = new ConfirmationModel();
                    vmListModel.setConfirmWindow(confirmModel);
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle());
                    confirmModel.setHelpTag(HelpTag.import_virtual_machine);
                    // $NON-NLS-1$
                    confirmModel.setHashName("import_virtual_machine");
                    confirmModel.setMessage(ConstantsManager.getInstance().getMessages().importProcessHasBegunForVms(StringHelper.trimEnd(importedVms.toString().trim(), ',')));
                    UICommand tempVar2 = new // $NON-NLS-1$
                    UICommand(// $NON-NLS-1$
                    "CancelConfirm", vmListModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                    tempVar2.setIsDefault(true);
                    tempVar2.setIsCancel(true);
                    confirmModel.getCommands().add(tempVar2);
                }
            }
        }
    }, this);
}
#method_after
protected void executeImport(ImportVmFromExportDomainModel importModel) {
    ArrayList<VdcActionParametersBase> prms = new ArrayList<>();
    for (Object item : importModel.getItems()) {
        VM vm = ((ImportVmData) item).getVm();
        ImportVmParameters prm = new ImportVmParameters(vm, (Guid) importModel.getEntity(), Guid.Empty, importModel.getStoragePool().getId(), importModel.getCluster().getSelectedItem().getId());
        if (importModel.getClusterQuota().getSelectedItem() != null && importModel.getClusterQuota().getIsAvailable()) {
            prm.setQuotaId(importModel.getClusterQuota().getSelectedItem().getId());
        }
        prm.setForceOverride(true);
        prm.setCopyCollapse(((ImportVmData) item).getCollapseSnapshots().getEntity());
        Map<Guid, Guid> map = new HashMap<>();
        for (Map.Entry<Guid, Disk> entry : vm.getDiskMap().entrySet()) {
            DiskImage disk = (DiskImage) entry.getValue();
            map.put(disk.getId(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getId());
            disk.setvolumeFormat(AsyncDataProvider.getInstance().getDiskVolumeFormat(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getStorageType()));
            disk.setVolumeType(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType());
            if (importModel.getDiskImportData(disk.getId()).getSelectedQuota() != null) {
                disk.setQuotaId(importModel.getDiskImportData(disk.getId()).getSelectedQuota().getId());
            }
        }
        prm.setImageToDestinationDomainMap(map);
        if (((ImportVmData) item).isExistsInSystem() || ((ImportVmData) item).getClone().getEntity()) {
            if (!cloneObjectMap.containsKey(vm.getId())) {
                continue;
            }
            prm.setImportAsNewEntity(true);
            prm.setCopyCollapse(true);
            prm.getVm().setName(((ImportVmData) cloneObjectMap.get(vm.getId())).getVm().getName());
        }
        prms.add(prm);
    }
    importModel.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.ImportVm, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            VmListModel<Void> vmListModel = (VmListModel<Void>) result.getState();
            vmListModel.stopProgress();
            vmListModel.setConfirmWindow(null);
            vmListModel.setWindow(null);
            vmListModel.clearCachedAssignedVmNames();
            List<VdcReturnValueBase> retVals = result.getReturnValue();
            if (retVals != null && vmListModel.getSelectedItems().size() == retVals.size()) {
                StringBuilder importedVms = new StringBuilder();
                int counter = 0;
                boolean toShowConfirmWindow = false;
                for (Object item : vmListModel.getSelectedItems()) {
                    VM vm = (VM) item;
                    if (retVals.get(counter) != null && retVals.get(counter).getCanDoAction()) {
                        // $NON-NLS-1$
                        importedVms.append(vm.getName()).append(", ");
                        toShowConfirmWindow = true;
                    }
                    counter++;
                }
                // VM
                if (toShowConfirmWindow) {
                    ConfirmationModel confirmModel = new ConfirmationModel();
                    vmListModel.setConfirmWindow(confirmModel);
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle());
                    confirmModel.setHelpTag(HelpTag.import_virtual_machine);
                    // $NON-NLS-1$
                    confirmModel.setHashName("import_virtual_machine");
                    confirmModel.setMessage(ConstantsManager.getInstance().getMessages().importProcessHasBegunForVms(StringHelper.trimEnd(importedVms.toString().trim(), ',')));
                    UICommand tempVar2 = new // $NON-NLS-1$
                    UICommand(// $NON-NLS-1$
                    "CancelConfirm", vmListModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                    tempVar2.setIsDefault(true);
                    tempVar2.setIsCancel(true);
                    confirmModel.getCommands().add(tempVar2);
                }
            }
        }
    }, this);
}
#end_block

#method_before
private void onImportVmAsClone(ImportVmFromExportDomainModel importModel) {
    ImportCloneModel cloneModel = (ImportCloneModel) getConfirmWindow();
    if (cloneModel.getApplyToAll().getEntity()) {
        if (!cloneModel.getNoClone().getEntity()) {
            String suffix = cloneModel.getSuffix().getEntity();
            if (!validateSuffix(suffix, cloneModel.getSuffix())) {
                return;
            }
            for (Object object : objectsToClone) {
                setObjectName(object, suffix, true);
                cloneObjectMap.put((Guid) ((IVdcQueryable) (((ImportEntityData) object).getEntity())).getQueryableId(), object);
            }
        }
        objectsToClone.clear();
    } else {
        Object object = cloneModel.getEntity();
        if (!cloneModel.getNoClone().getEntity()) {
            String vmName = cloneModel.getName().getEntity();
            if (!validateName(vmName, cloneModel.getName(), getClonedNameValidators(object))) {
                return;
            }
            setObjectName(object, vmName, false);
            cloneObjectMap.put((Guid) ((IVdcQueryable) ((ImportEntityData) object).getEntity()).getQueryableId(), object);
        }
        objectsToClone.remove(object);
    }
    setConfirmWindow(null);
    executeImportClone(importModel);
}
#method_after
private void onImportVmAsClone(ImportVmFromExportDomainModel importModel) {
    ImportCloneModel cloneModel = (ImportCloneModel) getConfirmWindow();
    if (cloneModel.getApplyToAll().getEntity()) {
        if (!cloneModel.getNoClone().getEntity()) {
            String suffix = cloneModel.getSuffix().getEntity();
            if (!validateSuffix(suffix, cloneModel.getSuffix())) {
                return;
            }
            for (Object object : objectsToClone) {
                setObjectName(object, suffix, true);
                cloneObjectMap.put((Guid) ((IVdcQueryable) (((ImportEntityData<Object>) object).getEntity())).getQueryableId(), object);
            }
        }
        objectsToClone.clear();
    } else {
        Object object = cloneModel.getEntity();
        if (!cloneModel.getNoClone().getEntity()) {
            String vmName = cloneModel.getName().getEntity();
            if (!validateName(vmName, cloneModel.getName(), getClonedNameValidators(object))) {
                return;
            }
            setObjectName(object, vmName, false);
            cloneObjectMap.put((Guid) ((IVdcQueryable) ((ImportEntityData<Object>) object).getEntity()).getQueryableId(), object);
        }
        objectsToClone.remove(object);
    }
    setConfirmWindow(null);
    executeImportClone(importModel);
}
#end_block

#method_before
private void executeDiskModifications(Guid vmId, UnitVmModel model) {
    // this is done on the background - the window is not visible anymore
    getcurrentVm().setId(vmId);
    model.getInstanceImages().executeDiskModifications(getcurrentVm());
}
#method_after
@Override
protected void executeDiskModifications(Guid vmId, UnitVmModel model) {
    // this is done on the background - the window is not visible anymore
    getcurrentVm().setId(vmId);
    model.getInstanceImages().executeDiskModifications(getcurrentVm());
}
#end_block

#method_before
private void updateDisksWarningByImageStatus(List<DiskModel> disks, ImageStatus imageStatus) {
    ArrayList<String> disksAliases = getDisksAliasesByImageStatus(disks, imageStatus);
    if (!disksAliases.isEmpty()) {
        generalWarningMessage.setText(messages.disksStatusWarning(EnumTranslator.getInstance().get(imageStatus), // $NON-NLS-1$
        (StringUtils.join(disksAliases, ", "))));
    }
}
#method_after
private void updateDisksWarningByImageStatus(List<DiskModel> disks, ImageStatus imageStatus) {
    ArrayList<String> disksAliases = getDisksAliasesByImageStatus(disks, imageStatus);
    if (!disksAliases.isEmpty()) {
        generalWarningMessage.setText(messages.disksStatusWarning(EnumTranslator.getInstance().translate(imageStatus), // $NON-NLS-1$
        (StringUtils.join(disksAliases, ", "))));
    }
}
#end_block

#method_before
private void setDetailList(final List<EntityModel> list, final TemplateGeneralModel templateGeneralModel, final TemplateVmListModel templateVmListModel, final TemplateInterfaceListModel templateInterfaceListModel, final TemplateStorageListModel templateStorageListModel) {
    list.add(templateGeneralModel);
    list.add(templateVmListModel);
    list.add(templateInterfaceListModel);
    list.add(templateStorageListModel);
}
#method_after
private void setDetailList(final List<HasEntity<VmTemplate>> list, final TemplateGeneralModel templateGeneralModel, final TemplateVmListModel templateVmListModel, final TemplateInterfaceListModel templateInterfaceListModel, final TemplateStorageListModel templateStorageListModel) {
    list.add(templateGeneralModel);
    list.add(templateVmListModel);
    list.add(templateInterfaceListModel);
    list.add(templateStorageListModel);
}
#end_block

#method_before
protected void addCustomModelsDetailModelList(final List<EntityModel> list, int customPosition, final TemplateDiskListModel templateDiskListModel, final TemplateEventListModel templateEventListModel, final PermissionListModel<TemplateListModel> permissionListModel) {
    templateDiskListModel.setSystemTreeContext(this);
    list.add(customPosition, templateDiskListModel);
    list.add(templateEventListModel);
    list.add(permissionListModel);
}
#method_after
protected void addCustomModelsDetailModelList(final List<HasEntity<VmTemplate>> list, int customPosition, final TemplateDiskListModel templateDiskListModel, final TemplateEventListModel templateEventListModel, final PermissionListModel<VmTemplate> permissionListModel) {
    templateDiskListModel.setSystemTreeContext(this);
    list.add(customPosition, templateDiskListModel);
    list.add(templateEventListModel);
    list.add(permissionListModel);
}
#end_block

#method_before
private void edit() {
    VmTemplate template = (VmTemplate) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    // populating VMInit
    AsyncQuery getVmInitQuery = new AsyncQuery();
    getVmInitQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            vmInitLoaded((VmTemplate) result);
        }
    };
    AsyncDataProvider.getInstance().getTemplateById(getVmInitQuery, template.getId());
}
#method_after
private void edit() {
    VmTemplate template = getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    // populating VMInit
    AsyncQuery getVmInitQuery = new AsyncQuery();
    getVmInitQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            vmInitLoaded((VmTemplate) result);
        }
    };
    AsyncDataProvider.getInstance().getTemplateById(getVmInitQuery, template.getId());
}
#end_block

#method_before
private void cancel() {
    cancelConfirmation();
    setWindow(null);
    updateActionAvailability();
}
#method_after
@Override
protected void cancel() {
    cancelConfirmation();
    setWindow(null);
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void onSelectedItemChanged() {
    super.onSelectedItemChanged();
    updateActionAvailability();
}
#method_after
@Override
protected void onSelectedItemChanged() {
    super.onSelectedItemChanged();
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void selectedItemsChanged() {
    super.selectedItemsChanged();
    updateActionAvailability();
}
#method_after
@Override
protected void selectedItemsChanged() {
    super.selectedItemsChanged();
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void selectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.selectedItemPropertyChanged(sender, e);
    if (// $NON-NLS-1$
    e.propertyName.equals("status")) {
        updateActionAvailability();
    }
}
#method_after
@Override
protected void selectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.selectedItemPropertyChanged(sender, e);
    if (// $NON-NLS-1$
    e.propertyName.equals("status")) {
        updateActionsAvailability();
    }
}
#end_block

#method_before
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command == getEditCommand()) {
        edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getExportCommand()) {
        export();
    } else if (// $NON-NLS-1$
    "Cancel".equals(command.getName())) {
        cancel();
    } else if (// $NON-NLS-1$
    "OnExport".equals(command.getName())) {
        onExport();
    } else if (// $NON-NLS-1$
    "OnSave".equals(command.getName())) {
        onSave();
    } else if (// $NON-NLS-1$
    "OnRemove".equals(command.getName())) {
        onRemove();
    } else if (// $NON-NLS-1$
    "OnExportNoTemplates".equals(command.getName())) {
        doExport();
    } else if (// $NON-NLS-1$
    "CancelConfirmation".equals(command.getName())) {
        cancelConfirmation();
    }
}
#method_after
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command == getEditCommand()) {
        edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getExportCommand()) {
        export();
    } else if (command == getCreateVmFromTemplateCommand()) {
        createVMFromTemplate();
    } else if (// $NON-NLS-1$
    "Cancel".equals(command.getName())) {
        cancel();
    } else if (// $NON-NLS-1$
    "OnExport".equals(command.getName())) {
        onExport();
    } else if (// $NON-NLS-1$
    "OnSave".equals(command.getName())) {
        onSave();
    } else if (// $NON-NLS-1$
    "OnSaveVm".equals(command.getName())) {
        onSaveVm();
    } else if (// $NON-NLS-1$
    "OnRemove".equals(command.getName())) {
        onRemove();
    } else if (// $NON-NLS-1$
    "OnExportNoTemplates".equals(command.getName())) {
        doExport();
    } else if (// $NON-NLS-1$
    "CancelConfirmation".equals(command.getName())) {
        cancelConfirmation();
    }
}
#end_block

#method_before
public static void init() {
    if (!glusterModeSupported()) {
        log.debug("Gluster mode not supported. Will not schedule jobs for refreshing Gluster data.");
        return;
    }
    log.debug("Initializing Gluster Jobs Manager");
    SchedulerUtil scheduler = SchedulerUtilQuartzImpl.getInstance();
    scheduler.scheduleAFixedDelayJob(GlusterSyncJob.getInstance(), "refreshLightWeightData", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateLight), getRefreshRate(ConfigValues.GlusterRefreshRateLight), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterSyncJob.getInstance(), "refreshHeavyWeightData", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateHeavy), getRefreshRate(ConfigValues.GlusterRefreshRateHeavy), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterHookSyncJob.getInstance(), "refreshHooks", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateHooks), getRefreshRate(ConfigValues.GlusterRefreshRateHooks), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterServiceSyncJob.getInstance(), "refreshGlusterServices", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateLight), getRefreshRate(ConfigValues.GlusterRefreshRateLight), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterTasksSyncJob.getInstance(), "gluster_async_task_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateTasks), getRefreshRate(ConfigValues.GlusterRefreshRateTasks), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterGeoRepSyncJob.getInstance(), "gluster_georep_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepDiscovery), getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepDiscovery), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(StorageDeviceSyncJob.getInstance(), "gluster_storage_device_pool_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateStorageDevices), getRefreshRate(ConfigValues.GlusterRefreshRateStorageDevices), TimeUnit.SECONDS);
}
#method_after
public static void init() {
    if (!glusterModeSupported()) {
        log.debug("Gluster mode not supported. Will not schedule jobs for refreshing Gluster data.");
        return;
    }
    log.debug("Initializing Gluster Jobs Manager");
    SchedulerUtil scheduler = SchedulerUtilQuartzImpl.getInstance();
    scheduler.scheduleAFixedDelayJob(GlusterSyncJob.getInstance(), "refreshLightWeightData", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateLight), getRefreshRate(ConfigValues.GlusterRefreshRateLight), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterSyncJob.getInstance(), "refreshHeavyWeightData", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateHeavy), getRefreshRate(ConfigValues.GlusterRefreshRateHeavy), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterHookSyncJob.getInstance(), "refreshHooks", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateHooks), getRefreshRate(ConfigValues.GlusterRefreshRateHooks), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterServiceSyncJob.getInstance(), "refreshGlusterServices", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateLight), getRefreshRate(ConfigValues.GlusterRefreshRateLight), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterTasksSyncJob.getInstance(), "gluster_async_task_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateTasks), getRefreshRate(ConfigValues.GlusterRefreshRateTasks), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterGeoRepSyncJob.getInstance(), "gluster_georep_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepDiscoveryInSecs), getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepDiscoveryInSecs), TimeUnit.SECONDS);
    StorageDeviceSyncJob StorageDeviceSyncJobInstance = Injector.get(StorageDeviceSyncJob.class);
    scheduler.scheduleAFixedDelayJob(StorageDeviceSyncJobInstance, "gluster_storage_device_pool_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateStorageDevices), getRefreshRate(ConfigValues.GlusterRefreshRateStorageDevices), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterGeoRepSyncJob.getInstance(), "gluster_georepstatus_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepStatusInSecs), getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepStatusInSecs), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterSnapshotSyncJob.getInstance(), "gluster_snapshot_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateSnapshotDiscovery), getRefreshRate(ConfigValues.GlusterRefreshRateSnapshotDiscovery), TimeUnit.SECONDS);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    VdsValidator validator = new VdsValidator(getVds());
    return validate(validator.isUp());
}
#method_after
@Override
protected boolean canDoAction() {
    VDSGroup cluster = getVdsGroup();
    if (!cluster.supportsGlusterService() || !GlusterFeatureSupported.glusterBrickProvisioning(cluster.getCompatibilityVersion())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_PROVISIONING_NOT_SUPPORTED_BY_CLUSTER);
    }
    VdsValidator validator = new VdsValidator(getVds());
    return validate(validator.isUp());
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    super.setActionMessageParameters();
    addCanDoActionMessageVariable("VdsName", getVds().getName());
}
#method_after
@Override
protected void setActionMessageParameters() {
    super.setActionMessageParameters();
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__SYNC);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__STORAGE_DEVICE);
    addCanDoActionMessageVariable("VdsName", getVds().getName());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    StorageDeviceSyncJob.getInstance().refreshStorageDevicesFromServer(getVds());
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    getStorageDeviceSyncJobInstance().refreshStorageDevicesFromServers(Arrays.asList(getVds()));
    setSucceeded(true);
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    return AuditLogType.SYNC_STORAGE_DEVICES_IN_HOST;
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    return getSucceeded() ? AuditLogType.SYNC_STORAGE_DEVICES_IN_HOST : AuditLogType.SYNC_STORAGE_DEVICES_IN_HOST_FAILED;
}
#end_block

#method_before
@OnTimerMethodAnnotation("gluster_storage_device_pool_event")
public void refreshStorageDevices() {
    // get all clusters
    List<VDSGroup> clusters = getClusterDao().getAll();
    // for every cluster that supports disk provisioning
    for (VDSGroup cluster : clusters) {
        if (supportsGlusterDiskProvisioning(cluster)) {
            refreshStorageDevicesInCluster(cluster);
        }
    }
}
#method_after
@OnTimerMethodAnnotation("gluster_storage_device_pool_event")
public void refreshStorageDevices() {
    // get all clusters
    List<VDSGroup> clusters = getClusterDao().getAll();
    // for every cluster that supports disk provisioning
    for (VDSGroup cluster : clusters) {
        if (supportsGlusterDiskProvisioning(cluster)) {
            refreshStorageDevicesFromServers(getClusterUtils().getAllUpServers(cluster.getId()));
        }
    }
}
#end_block

#method_before
private void updateStorageDevices(VDS vds, List<StorageDevice> storageDevicesFromVdsm) {
    Set<String> deviceUuidsFromVdsm = new HashSet<String>();
    Set<String> deviceNamesFromVdsm = new HashSet<String>();
    List<StorageDevice> storageDevicesInDb = getStorageDeviceDao().getStorageDevicesInHost(vds.getId());
    Map<String, StorageDevice> nameToDeviceMap = new HashMap<String, StorageDevice>();
    Map<String, StorageDevice> deviceUuidToDeviceMap = new HashMap<String, StorageDevice>();
    // newly added and updated devices without looping over the same list again and again.
    for (StorageDevice storageDevice : storageDevicesInDb) {
        nameToDeviceMap.put(storageDevice.getName(), storageDevice);
        if (storageDevice.getDevUuid() != null && !storageDevice.getDevUuid().isEmpty()) {
            deviceUuidToDeviceMap.put(storageDevice.getDevUuid(), storageDevice);
        }
    }
    for (StorageDevice storageDevice : storageDevicesFromVdsm) {
        // Create deviceName and deviceUuid set to use it while finding the deleted services.
        deviceNamesFromVdsm.add(storageDevice.getName());
        if (storageDevice.getDevUuid() != null) {
            deviceUuidsFromVdsm.add(storageDevice.getDevUuid());
        }
        if (deviceUuidToDeviceMap.get(storageDevice.getDevUuid()) != null || (nameToDeviceMap.get(storageDevice.getName()) != null && (nameToDeviceMap.get(storageDevice.getName()).getDevUuid() == null || nameToDeviceMap.get(storageDevice.getName()).getDevUuid().isEmpty()))) {
            // TODO Verify this logic. Get the deviceID by Name may not the right thing
            storageDevice.setId(nameToDeviceMap.get(storageDevice.getName()).getId());
            if (!ObjectUtils.objectsEqual(nameToDeviceMap.get(storageDevice.getName()), storageDevice)) {
                getStorageDeviceDao().updateStorageDevice(storageDevice);
            }
        } else {
            storageDevice.setId(Guid.newGuid());
            storageDevice.setVdsId(vds.getId());
            log.debug("detected new storage device '{}' for host '{}'", storageDevice.getName(), vds.getName());
            getStorageDeviceDao().save(storageDevice);
            logStorageDeviceMessage(AuditLogType.NEW_STORAGE_DEVICE_DETECTED, vds, storageDevice);
        }
    }
    for (StorageDevice storageDevice : storageDevicesInDb) {
        if (!deviceUuidsFromVdsm.contains(storageDevice.getDevUuid()) && (!deviceNamesFromVdsm.contains(storageDevice.getName()) && storageDevice.getDevUuid() == null)) {
            log.debug("storage device '{}' detected removed for the host '{}'", storageDevice.getName(), vds.getName());
            getStorageDeviceDao().remove(storageDevice.getId());
            logStorageDeviceMessage(AuditLogType.STORAGE_DEVICE_REMOVED_FROM_THE_SYSTEM, vds, storageDevice);
        }
    }
}
#method_after
private void updateStorageDevices(VDS vds, List<StorageDevice> storageDevicesFromVdsm) {
    Set<String> deviceUuidsFromVdsm = new HashSet<>();
    Set<String> deviceNamesFromVdsm = new HashSet<>();
    List<StorageDevice> storageDevicesInDb = getStorageDeviceDao().getStorageDevicesInHost(vds.getId());
    Map<String, StorageDevice> nameToDeviceMap = new HashMap<>();
    Map<String, StorageDevice> deviceUuidToDeviceMap = new HashMap<>();
    // newly added and updated devices without looping over the same list again and again.
    for (StorageDevice storageDevice : storageDevicesInDb) {
        nameToDeviceMap.put(storageDevice.getName(), storageDevice);
        if (storageDevice.getDevUuid() != null && !storageDevice.getDevUuid().isEmpty()) {
            deviceUuidToDeviceMap.put(storageDevice.getDevUuid(), storageDevice);
        }
    }
    List<StorageDevice> storageDevicesToUpdate = new ArrayList<>();
    List<StorageDevice> storageDevicesToDelete = new ArrayList<>();
    for (StorageDevice storageDevice : storageDevicesFromVdsm) {
        // Create deviceName and deviceUuid set to use it while finding the deleted services.
        deviceNamesFromVdsm.add(storageDevice.getName());
        if (storageDevice.getDevUuid() != null) {
            deviceUuidsFromVdsm.add(storageDevice.getDevUuid());
        }
        // If DevUuid is already exits in the DB then its an existing devices
        // Assume device from vdsm doesn't have devUUID, but device name already exists in the DB
        // Following two cases possible:
        // 1. If device in DB doesn't have a devUUID
        // update the device if there is a change from vdsm.
        // 2. If device in DB has devUUID
        // Though name matches, its two different devices. So treat this device as new one.
        // Device in DB will be updated/removed by some other iteration in the loop
        StorageDevice storageDevByDevUuid = deviceUuidToDeviceMap.get(storageDevice.getDevUuid());
        StorageDevice storageDevByName = nameToDeviceMap.get(storageDevice.getName());
        if (storageDevByDevUuid != null) {
            storageDevice.setId(storageDevByDevUuid.getId());
            if (!Objects.equals(storageDevByDevUuid, storageDevice)) {
                storageDevicesToUpdate.add(storageDevice);
            }
        } else if (storageDevByName != null && StringUtils.isBlank(storageDevByName.getDevUuid())) {
            storageDevice.setId(storageDevByName.getId());
            if (!Objects.equals(storageDevByName, storageDevice)) {
                storageDevicesToUpdate.add(storageDevice);
            }
        } else {
            storageDevice.setId(Guid.newGuid());
            storageDevice.setVdsId(vds.getId());
            log.debug("detected new storage device '{}' for host '{}'", storageDevice.getName(), vds.getName());
            getStorageDeviceDao().save(storageDevice);
            logStorageDeviceMessage(AuditLogType.NEW_STORAGE_DEVICE_DETECTED, vds, storageDevice);
        }
    }
    for (StorageDevice storageDevice : storageDevicesInDb) {
        if ((storageDevice.getDevUuid() != null && !deviceUuidsFromVdsm.contains(storageDevice.getDevUuid())) || (storageDevice.getDevUuid() == null && !deviceNamesFromVdsm.contains(storageDevice.getName()))) {
            log.debug("storage device '{}' detected removed for the host '{}'", storageDevice.getName(), vds.getName());
            logStorageDeviceMessage(AuditLogType.STORAGE_DEVICE_REMOVED_FROM_THE_HOST, vds, storageDevice);
            storageDevicesToDelete.add(storageDevice);
        }
    }
    if (!storageDevicesToUpdate.isEmpty()) {
        getStorageDeviceDao().updateAllInBatch(storageDevicesToUpdate);
    }
    if (!storageDevicesToDelete.isEmpty()) {
        getStorageDeviceDao().removeAllInBatch(storageDevicesToDelete);
    }
}
#end_block

#method_before
private void logStorageDeviceMessage(AuditLogType logType, VDS vds, final StorageDevice device) {
    logUtil.logAuditMessage(vds.getVdsGroupId(), null, vds, logType, new HashMap<String, String>() {

        {
            put("storageDevice", device.getName());
        }
    });
}
#method_after
private void logStorageDeviceMessage(AuditLogType logType, VDS vds, final StorageDevice device) {
    logUtil.logAuditMessage(vds.getVdsGroupId(), null, vds, logType, Collections.singletonMap("storageDevice", device.getName()));
}
#end_block

#method_before
private boolean supportsGlusterDiskProvisioning(VDSGroup cluster) {
    return cluster.supportsGlusterService() && GlusterFeatureSupported.glusterDiskProvisioning(cluster.getcompatibility_version());
}
#method_after
private boolean supportsGlusterDiskProvisioning(VDSGroup cluster) {
    return cluster.supportsGlusterService() && GlusterFeatureSupported.glusterBrickProvisioning(cluster.getCompatibilityVersion());
}
#end_block

#method_before
private void fillData() {
    if (diskModel.getEntity() == null) {
        return;
    }
    if (diskModel.getEntity() instanceof AttachDiskModel) {
        List<EntityModel<DiskModel>> disks = ((AttachDiskModel) diskModel.getEntity()).getSelectedDisks();
        if (disks.size() != 0) {
            updateName(disks.get(0).getEntity().getDisk());
        }
    } else {
        updateName(diskModel.getEntity().getDisk());
    }
}
#method_after
private void fillData() {
    if (diskModel.getEntity() == null) {
        return;
    }
    if (diskModel.getEntity() instanceof InstanceImagesAttachDiskModel) {
        List<EntityModel<DiskModel>> disks = ((InstanceImagesAttachDiskModel) diskModel.getEntity()).getSelectedDisks();
        if (disks.size() != 0) {
            updateName(disks.get(0).getEntity().getDisk());
        }
    } else {
        updateName(diskModel.getEntity().getDisk());
    }
}
#end_block

#method_before
private void updateName(Disk disk) {
    if (disk == null) {
        return;
    }
    String diskName = disk.getDiskAlias();
    String size = Long.toString(disk.getSize());
    if (disk.getDiskStorageType() == Disk.DiskStorageType.IMAGE) {
        size = Long.toString(disk.getSize() / (1024 * 1024 * 1024));
    }
    String type;
    if (diskExists) {
        type = constants.existingDisk();
    } else if (getDiskModel().getEntity() instanceof AttachDiskModel) {
        type = constants.attachingDisk();
    } else {
        type = constants.creatingDisk();
    }
    // $NON-NLS-1$
    String boot = "";
    if (disk.isBoot()) {
        boot = constants.bootDisk();
    }
    name.setEntity(messages.vmDialogDisk(diskName, size, type, boot));
}
#method_after
private void updateName(Disk disk) {
    if (disk == null) {
        return;
    }
    String diskName = disk.getDiskAlias();
    String size = Long.toString(disk.getSize());
    if (disk.getDiskStorageType() == Disk.DiskStorageType.IMAGE) {
        size = Long.toString(((DiskImage) disk).getSizeInGigabytes());
    }
    String type;
    if (diskExists) {
        type = constants.existingDisk();
    } else if (getDiskModel().getEntity() instanceof InstanceImagesAttachDiskModel) {
        type = constants.attachingDisk();
    } else {
        type = constants.creatingDisk();
    }
    // $NON-NLS-1$
    String boot = "";
    if (disk.isBoot()) {
        boot = constants.bootDisk();
    }
    name.setEntity(messages.vmDialogDisk(diskName, size, type, boot));
}
#end_block

#method_before
public void initialize(Disk disk, VM vm) {
    this.vm = vm;
    active = true;
    diskExists = disk != null;
    attachCommand.setIsAvailable(!diskExists);
    if (disk == null) {
        return;
    }
    final AbstractDiskModel model = new EditDiskModel() {

        @Override
        public void onSave() {
            if (validate()) {
                flush();
                getDiskModel().setEntity(tmpDiskModel);
                // needed because the "entity" instances are the same so the event is not fired
                fillData();
                parentModel.getParentListModel().setWindow(null);
                parentModel.getParentListModel().setWindow(parentModel.getUnitVmModel());
            }
        }
    };
    tmpDiskModel = model;
    model.setDisk(disk);
    model.setVm(vm);
    setupModelAsDialog(model, ConstantsManager.getInstance().getConstants().editVirtualDiskTitle(), HelpTag.edit_virtual_disk, // $NON-NLS-1$
    "edit_virtual_disk");
    model.initialize();
    diskModel.setEntity(model);
    fillData();
}
#method_after
public void initialize(Disk disk, VM vm) {
    this.vm = vm;
    active = true;
    diskExists = disk != null;
    attachCommand.setIsAvailable(!diskExists);
    if (disk == null) {
        return;
    }
    final AbstractDiskModel model = new EditDiskModel() {

        @Override
        public void onSave() {
            if (validate()) {
                flush();
                getDiskModel().setEntity(this);
                // needed because the "entity" instances are the same so the event is not fired
                fillData();
                parentModel.getParentListModel().setWindow(null);
                parentModel.getParentListModel().setWindow(parentModel.getUnitVmModel());
            }
        }
    };
    model.setDisk(disk);
    model.setVm(vm);
    setupModelAsDialog(model, ConstantsManager.getInstance().getConstants().editVirtualDiskTitle(), HelpTag.edit_virtual_disk, // $NON-NLS-1$
    "edit_virtual_disk");
    model.initialize();
    diskModel.setEntity(model);
    fillData();
}
#end_block

#method_before
public void attachDisk() {
    AttachDiskModel model = new AttachDiskModel() {

        @Override
        public void onSave() {
            if (validate()) {
                flush();
                List<EntityModel<DiskModel>> selectedDisks = ((AttachDiskModel) tmpDiskModel).getSelectedDisks();
                if (selectedDisks.size() == 1) {
                    // only 0 or 1 is allowed
                    tmpDiskModel.setDisk(selectedDisks.iterator().next().getEntity().getDisk());
                }
                getDiskModel().setEntity(tmpDiskModel);
                parentModel.getParentListModel().setWindow(null);
                parentModel.getParentListModel().setWindow(parentModel.getUnitVmModel());
                // from now on only editing is possible
                attachCommand.setIsAvailable(false);
                fillData();
            }
        }
    };
    tmpDiskModel = model;
    VM realOrFakeVm = vm;
    Version compatibilityVersion = parentModel.getUnitVmModel().getSelectedCluster().getcompatibility_version();
    if (realOrFakeVm == null) {
        realOrFakeVm = new VM();
        realOrFakeVm.setId(null);
        realOrFakeVm.setVdsGroupId(parentModel.getUnitVmModel().getSelectedCluster().getId());
        realOrFakeVm.setStoragePoolId(parentModel.getUnitVmModel().getSelectedDataCenter().getId());
        realOrFakeVm.setVdsGroupCompatibilityVersion(compatibilityVersion);
    }
    model.setVm(realOrFakeVm);
    setupModelAsDialog(model, ConstantsManager.getInstance().getConstants().attachVirtualDiskTitle(), HelpTag.attach_virtual_disk, // $NON-NLS-1$
    "attach_virtual_disk");
    showDialog(model);
    model.initialize(parentModel.getAllCurrentDisks());
    maybeLoadAttachableDisks(model);
}
#method_after
public void attachDisk() {
    InstanceImagesAttachDiskModel model = new InstanceImagesAttachDiskModel() {

        @Override
        public void onSave() {
            if (validate()) {
                flush();
                List<EntityModel<DiskModel>> selectedDisks = getSelectedDisks();
                if (selectedDisks.size() == 1) {
                    // only 0 or 1 is allowed
                    setDisk(selectedDisks.iterator().next().getEntity().getDisk());
                }
                getDiskModel().setEntity(this);
                parentModel.getParentListModel().setWindow(null);
                parentModel.getParentListModel().setWindow(parentModel.getUnitVmModel());
                // from now on only editing is possible
                attachCommand.setIsAvailable(false);
                fillData();
            }
        }
    };
    VM realOrFakeVm = vm;
    Version compatibilityVersion = parentModel.getUnitVmModel().getSelectedCluster().getCompatibilityVersion();
    if (realOrFakeVm == null) {
        realOrFakeVm = new VM();
        realOrFakeVm.setId(null);
        realOrFakeVm.setVdsGroupId(parentModel.getUnitVmModel().getSelectedCluster().getId());
        realOrFakeVm.setStoragePoolId(parentModel.getUnitVmModel().getSelectedDataCenter().getId());
        realOrFakeVm.setVdsGroupCompatibilityVersion(compatibilityVersion);
    }
    model.setVm(realOrFakeVm);
    setupModelAsDialog(model, ConstantsManager.getInstance().getConstants().attachVirtualDiskTitle(), HelpTag.attach_virtual_disk, // $NON-NLS-1$
    "attach_virtual_disk");
    showDialog(model);
    model.initialize(parentModel.getAllCurrentDisks());
    maybeLoadAttachableDisks(model);
}
#end_block

#method_before
private void maybeLoadAttachableDisks(AttachDiskModel model) {
    if (model.getVm().getId() == null) {
        Integer osType = parentModel.getUnitVmModel().getOSType().getSelectedItem();
        Version compatibilityVersion = parentModel.getUnitVmModel().getSelectedCluster().getcompatibility_version();
        model.loadAttachableDisks(osType, compatibilityVersion, getDisk());
    } else {
        model.loadAttachableDisks(getDisk());
    }
}
#method_after
private void maybeLoadAttachableDisks(InstanceImagesAttachDiskModel model) {
    if (model.getVm().getId() == null) {
        Integer osType = parentModel.getUnitVmModel().getOSType().getSelectedItem();
        Version compatibilityVersion = parentModel.getUnitVmModel().getSelectedCluster().getCompatibilityVersion();
        model.loadAttachableDisks(osType, compatibilityVersion, getDisk());
    } else {
        model.loadAttachableDisks(getDisk());
    }
}
#end_block

#method_before
private void showPreviouslyShownDialog() {
    getDiskModel().getEntity().updateBootableFrom(parentModel.getAllCurrentDisks());
    if (getDiskModel().getEntity() instanceof AttachDiskModel) {
        // needed to re-filter in case the OS or the compatibility version changed
        maybeLoadAttachableDisks((AttachDiskModel) getDiskModel().getEntity());
    }
    showDialog(getDiskModel().getEntity());
}
#method_after
private void showPreviouslyShownDialog() {
    getDiskModel().getEntity().updateBootableFrom(parentModel.getAllCurrentDisks());
    if (getDiskModel().getEntity() instanceof InstanceImagesAttachDiskModel) {
        // needed to re-filter in case the OS or the compatibility version changed
        maybeLoadAttachableDisks((InstanceImagesAttachDiskModel) getDiskModel().getEntity());
    }
    showDialog(getDiskModel().getEntity());
}
#end_block

#method_before
private void showNewDialog() {
    final AbstractDiskModel model = new NewDiskModel() {

        @Override
        public void onSave() {
            if (validate()) {
                flush();
                getDiskModel().setEntity(tmpDiskModel);
                parentModel.getParentListModel().setWindow(null);
                parentModel.getParentListModel().setWindow(parentModel.getUnitVmModel());
                // the "new" turns into "edit" - no need for attach anymore
                attachCommand.setIsAvailable(false);
                fillData();
            }
        }
    };
    tmpDiskModel = model;
    VM vm = new VM();
    vm.setVdsGroupId(parentModel.getUnitVmModel().getSelectedCluster().getId());
    vm.setStoragePoolId(parentModel.getUnitVmModel().getSelectedDataCenter().getId());
    vm.setVdsGroupCompatibilityVersion(parentModel.getUnitVmModel().getSelectedCluster().getcompatibility_version());
    model.setVm(vm);
    setupModelAsDialog(model, ConstantsManager.getInstance().getConstants().newVirtualDiskTitle(), HelpTag.new_virtual_disk, // $NON-NLS-1$
    "new_virtual_disk");
    showDialog(model);
    model.initialize(parentModel.getAllCurrentDisks());
}
#method_after
private void showNewDialog() {
    final AbstractDiskModel model = new NewDiskModel() {

        @Override
        public void onSave() {
            if (validate()) {
                flush();
                getDiskModel().setEntity(this);
                parentModel.getParentListModel().setWindow(null);
                parentModel.getParentListModel().setWindow(parentModel.getUnitVmModel());
                // the "new" turns into "edit" - no need for attach anymore
                attachCommand.setIsAvailable(false);
                fillData();
            }
        }
    };
    VM vm = new VM();
    vm.setVdsGroupId(parentModel.getUnitVmModel().getSelectedCluster().getId());
    vm.setStoragePoolId(parentModel.getUnitVmModel().getSelectedDataCenter().getId());
    vm.setVdsGroupCompatibilityVersion(parentModel.getUnitVmModel().getSelectedCluster().getCompatibilityVersion());
    model.setVm(vm);
    setupModelAsDialog(model, ConstantsManager.getInstance().getConstants().newVirtualDiskTitle(), HelpTag.new_virtual_disk, // $NON-NLS-1$
    "new_virtual_disk");
    showDialog(model);
    model.initialize(parentModel.getAllCurrentDisks());
    if (getVm() != null) {
        model.setVm(getVm());
        ((NewDiskModel) model).updateSuggestedDiskAliasFromServer();
    } else {
        String currentVmName = parentModel.getUnitVmModel().getName().getEntity();
        if (!StringUtils.isEmpty(currentVmName)) {
            // if already set the VM name on the new VM dialog, suggest the name according to the name
            model.getAlias().setEntity(suggestAliasForNewVm(currentVmName));
        }
    }
}
#end_block

#method_before
public Disk getDisk() {
    AbstractDiskModel diskModel = getDiskModel().getEntity();
    if (diskModel == null) {
        return null;
    }
    Disk disk = diskModel.getDisk();
    if (disk == null) {
        disk = diskModel.getDiskImage();
    }
    if (disk == null) {
        disk = diskModel.getLunDisk();
    }
    return disk;
}
#method_after
public Disk getDisk() {
    AbstractDiskModel diskModel = getDiskModel().getEntity();
    if (diskModel == null) {
        return null;
    }
    if (diskModel.getDisk() != null) {
        return diskModel.getDisk();
    }
    Disk.DiskStorageType diskStorageType = diskModel.getDiskStorageType().getEntity();
    if (diskStorageType == Disk.DiskStorageType.IMAGE) {
        return diskModel.getDiskImage();
    }
    if (diskStorageType == Disk.DiskStorageType.LUN) {
        return diskModel.getLunDisk();
    }
    return null;
}
#end_block

#method_before
@Override
protected boolean vetoRemoveWidget(final Pair<InstanceImageLineModel, InstanceImageLineEditor> item, final InstanceImageLineModel value, final InstanceImageLineEditor widget) {
    model.approveRemoveDisk(item.getFirst(), new InstanceImagesModel.RemoveApprovedCallback() {

        @Override
        public void removeApproved(boolean approved) {
            if (approved) {
                doRemoveItem(item, value, widget);
            }
        }
    });
    // will be eventually removed from the callback
    return false;
}
#method_after
@Override
protected boolean vetoRemoveWidget(final Pair<InstanceImageLineModel, InstanceImageLineEditor> item, final InstanceImageLineModel value, final InstanceImageLineEditor widget) {
    model.approveRemoveDisk(item.getFirst(), new InstanceImagesModel.RemoveApprovedCallback() {

        @Override
        public void removeApproved(boolean approved) {
            if (approved) {
                doRemoveItem(item, value, widget);
            }
        }
    });
    // will be eventually removed from the callback
    return true;
}
#end_block

#method_before
private void onRemove() {
    if (!removeDiskModel.validate()) {
        return;
    }
    removeDiskModels.add(removeDiskModel);
    hideRemoveDiskAndShowEditVm();
    callback.removeApproved(true);
}
#method_after
private void onRemove() {
    if (!removeDiskModel.validate()) {
        return;
    }
    removeDiskModels.add(removeDiskModel);
    callback.removeApproved(true);
    hideRemoveDiskAndShowEditVm();
}
#end_block

#method_before
private void onCancel() {
    hideRemoveDiskAndShowEditVm();
    callback.removeApproved(false);
}
#method_after
private void onCancel() {
    callback.removeApproved(false);
    hideRemoveDiskAndShowEditVm();
}
#end_block

#method_before
private void executeDeleteAndCallNew(final VM vm) {
    if (removeDiskModels.size() == 0) {
        executeNewAndEdit(vm);
        return;
    }
    for (RemoveDiskModel removeDisk : removeDiskModels) {
        removeDisk.store(new ICommandTarget() {

            @Override
            public void executeCommand(UICommand command) {
                executeNewAndEdit(vm);
            }

            @Override
            public void executeCommand(UICommand uiCommand, Object... parameters) {
                executeNewAndEdit(vm);
            }
        });
    }
}
#method_after
private void executeDeleteAndCallNew(final VM vm) {
    if (removeDiskModels.size() == 0) {
        executeNewAndEdit(vm);
        return;
    }
    for (RemoveDiskModel removeDisk : removeDiskModels) {
        removeDisk.onRemove(new ICommandTarget() {

            @Override
            public void executeCommand(UICommand command) {
                executeNewAndEdit(vm);
            }

            @Override
            public void executeCommand(UICommand uiCommand, Object... parameters) {
                executeNewAndEdit(vm);
            }
        });
    }
}
#end_block

#method_before
public void updateActionsAvailability() {
    boolean clusterSelected = unitVmModel.getSelectedCluster() != null;
    boolean osSelected = unitVmModel.getOSType().getSelectedItem() != null;
    for (InstanceImageLineModel model : getItems()) {
        if (model.isGhost()) {
            continue;
        }
        model.setEnabled(clusterSelected && osSelected);
    }
    setIsChangable(clusterSelected && osSelected);
}
#method_after
public void updateActionsAvailability() {
    boolean clusterSelected = unitVmModel.getSelectedCluster() != null;
    boolean osSelected = unitVmModel.getOSType().getSelectedItem() != null;
    if (getItems() == null) {
        return;
    }
    for (InstanceImageLineModel model : getItems()) {
        if (model.isGhost()) {
            continue;
        }
        model.setEnabled(clusterSelected && osSelected);
    }
    setIsChangable(clusterSelected && osSelected);
}
#end_block

#method_before
@Override
public void edit(final InstanceImageLineModel model) {
    driver.edit(model);
    setupElementIds(model);
    createEditButton.setCommand(model.getCreateEditCommand());
    attachButton.setCommand(model.getAttachCommand());
    // memory leak maybe?
    createEditButton.addClickHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            createEditButton.getCommand().execute();
        }
    });
    attachButton.addClickHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            attachButton.getCommand().execute();
        }
    });
    updateButtonText(model);
    model.getDiskModel().getEntityChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            ValueChangeEvent.fire(InstanceImageLineEditor.this, model);
            updateButtonText(model);
        }
    });
}
#method_after
@Override
public void edit(final InstanceImageLineModel model) {
    driver.edit(model);
    setupElementIds(model);
    createEditButton.setCommand(model.getCreateEditCommand());
    attachButton.setCommand(model.getAttachCommand());
    createEditButton.addClickHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            createEditButton.getCommand().execute();
        }
    });
    attachButton.addClickHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            attachButton.getCommand().execute();
        }
    });
    updateButtonText(model);
    model.getDiskModel().getEntityChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            ValueChangeEvent.fire(InstanceImageLineEditor.this, model);
            updateButtonText(model);
        }
    });
}
#end_block

#method_before
@Override
public boolean isEnabled() {
    return false;
}
#method_after
@Override
public boolean isEnabled() {
    return enabled;
}
#end_block

#method_before
@Override
public void setEnabled(boolean b) {
}
#method_after
@Override
public void setEnabled(boolean enabled) {
    this.enabled = enabled;
    createEditButton.setEnabled(enabled);
    attachButton.setEnabled(enabled);
}
#end_block

#method_before
@Override
protected void createHeaderWidget() {
    EntityModelCellTable<ListModel> table = new EntityModelCellTable<ListModel>(false, (Resources) GWT.create(SanStorageListHeaderResources.class), true);
    // Add first blank column
    table.addColumn(new TextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, constants.empty(), // $NON-NLS-1$
    "20px");
    table.addColumn(new ScrollableTextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            return model.getName();
        }
    }, constants.targetNameSanStorage(), // $NON-NLS-1$
    "");
    table.addColumn(new ScrollableTextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            return model.getAddress();
        }
    }, constants.addressSanStorage(), // $NON-NLS-1$
    "95px");
    table.addColumn(new ScrollableTextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            return model.getPort();
        }
    }, constants.portSanStorage(), // $NON-NLS-1$
    "65px");
    // $NON-NLS-1$
    table.setWidth("100%", true);
    // Add last blank columns
    table.addColumn(new TextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, constants.empty(), // $NON-NLS-1$
    "30px");
    table.addColumn(new TextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, constants.empty(), // $NON-NLS-1$
    "17px");
    // Add blank item list
    table.setRowData(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    table.setWidth("100%", true);
    // Add table as header widget
    treeHeader.add(table);
}
#method_after
@Override
protected void createHeaderWidget() {
    EntityModelCellTable<ListModel> table = new EntityModelCellTable<ListModel>(false, (Resources) GWT.create(SanStorageListHeaderResources.class), true);
    // Add first blank column
    table.addColumn(new TextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, constants.empty(), // $NON-NLS-1$
    "15px");
    table.addColumn(new AbstractScrollableTextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            return model.getName();
        }
    }, constants.targetNameSanStorage(), // $NON-NLS-1$
    "");
    table.addColumn(new AbstractScrollableTextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            return model.getAddress();
        }
    }, constants.addressSanStorage(), // $NON-NLS-1$
    "95px");
    table.addColumn(new AbstractScrollableTextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            return model.getPort();
        }
    }, constants.portSanStorage(), // $NON-NLS-1$
    "65px");
    // $NON-NLS-1$
    table.setWidth("100%", true);
    // Add last blank columns
    table.addColumn(new TextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, constants.empty(), // $NON-NLS-1$
    "30px");
    table.addColumn(new TextColumn<SanTargetModel>() {

        @Override
        public String getValue(SanTargetModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, constants.empty(), // $NON-NLS-1$
    "17px");
    // Add blank item list
    table.setRowData(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    table.setWidth("100%", true);
    // Add table as header widget
    treeHeader.add(table);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
protected TreeItem createLeafNode(ListModel leafModel) {
    TreeItem item = new TreeItem();
    List<LunModel> items = (List<LunModel>) leafModel.getItems();
    if (hideLeaf || items.isEmpty()) {
        item.setUserObject(Boolean.TRUE);
        return item;
    }
    final EntityModelCellTable<ListModel<LunModel>> table = new EntityModelCellTable<ListModel<LunModel>>(multiSelection, (Resources) GWT.create(SanStorageListLunTableResources.class));
    LunSelectionColumn lunSelectionColumn = new LunSelectionColumn(multiSelection) {

        @Override
        public LunModel getValue(LunModel object) {
            return object;
        }
    };
    // $NON-NLS-1$
    table.setCustomSelectionColumn(lunSelectionColumn, "30px");
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getLunId();
        }
    }, constants.lunIdSanStorage());
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            // $NON-NLS-1$
            return String.valueOf(model.getSize()) + "GB";
        }
    }, constants.devSizeSanStorage(), // $NON-NLS-1$
    "70px");
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return String.valueOf(model.getMultipathing());
        }
    }, constants.pathSanStorage(), // $NON-NLS-1$
    "55px");
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getVendorId();
        }
    }, constants.vendorIdSanStorage(), // $NON-NLS-1$
    "100px");
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getProductId();
        }
    }, constants.productIdSanStorage(), // $NON-NLS-1$
    "100px");
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getSerial();
        }
    }, constants.serialSanStorage(), // $NON-NLS-1$
    "120px");
    table.setRowData(items);
    Object selectedItem = leafModel.getSelectedItem();
    leafModel.setSelectedItem(null);
    table.asEditor().edit(leafModel);
    leafModel.setSelectedItem(selectedItem);
    // $NON-NLS-1$
    table.setWidth("100%", true);
    if (!multiSelection) {
        for (LunModel lunModel : items) {
            if (lunModel.getIsSelected()) {
                table.getSelectionModel().setSelected(lunModel, true);
            }
        }
        table.getSelectionModel().addSelectionChangeHandler(new Handler() {

            @Override
            public void onSelectionChange(SelectionChangeEvent event) {
                SingleSelectionModel SingleSelectionModel = (SingleSelectionModel) event.getSource();
                LunModel selectedLunModel = (LunModel) SingleSelectionModel.getSelectedObject();
                if (selectedLunModel != null) {
                    updateSelectedLunWarning(selectedLunModel);
                }
            }
        });
    } else {
        for (LunModel lunModel : items) {
            table.getSelectionModel().setSelected(lunModel, lunModel.getIsSelected());
        }
    }
    ScrollPanel panel = new ScrollPanel();
    panel.add(table);
    item.setWidget(panel);
    // Display LUNs as grayed-out if needed
    for (LunModel lunModel : items) {
        if (lunModel.getIsGrayedOut()) {
            grayOutItem(lunModel.getGrayedOutReasons(), lunModel, table);
        }
    }
    return item;
}
#method_after
@SuppressWarnings("unchecked")
@Override
protected TreeItem createLeafNode(ListModel leafModel) {
    TreeItem item = new TreeItem();
    List<LunModel> items = (List<LunModel>) leafModel.getItems();
    if (hideLeaf || items.isEmpty()) {
        item.setUserObject(Boolean.TRUE);
        return item;
    }
    final EntityModelCellTable<ListModel<LunModel>> table = new EntityModelCellTable<ListModel<LunModel>>(multiSelection, (Resources) GWT.create(SanStorageListLunTableResources.class));
    AbstractLunSelectionColumn lunSelectionColumn = new AbstractLunSelectionColumn(multiSelection) {

        @Override
        public LunModel getValue(LunModel object) {
            return object;
        }
    };
    // $NON-NLS-1$
    table.setCustomSelectionColumn(lunSelectionColumn, "30px");
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getLunId();
        }
    }, constants.lunIdSanStorage());
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            // $NON-NLS-1$
            return String.valueOf(model.getSize()) + "GB";
        }
    }, constants.devSizeSanStorage(), // $NON-NLS-1$
    "70px");
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return String.valueOf(model.getMultipathing());
        }
    }, constants.pathSanStorage(), // $NON-NLS-1$
    "55px");
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getVendorId();
        }
    }, constants.vendorIdSanStorage(), // $NON-NLS-1$
    "100px");
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getProductId();
        }
    }, constants.productIdSanStorage(), // $NON-NLS-1$
    "100px");
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getSerial();
        }
    }, constants.serialSanStorage(), // $NON-NLS-1$
    "120px");
    table.setRowData(items);
    Object selectedItem = leafModel.getSelectedItem();
    leafModel.setSelectedItem(null);
    table.asEditor().edit(leafModel);
    leafModel.setSelectedItem(selectedItem);
    // $NON-NLS-1$
    table.setWidth("100%", true);
    if (!multiSelection) {
        for (LunModel lunModel : items) {
            if (lunModel.getIsSelected()) {
                table.getSelectionModel().setSelected(lunModel, true);
            }
        }
        table.getSelectionModel().addSelectionChangeHandler(new Handler() {

            @Override
            public void onSelectionChange(SelectionChangeEvent event) {
                SingleSelectionModel SingleSelectionModel = (SingleSelectionModel) event.getSource();
                LunModel selectedLunModel = (LunModel) SingleSelectionModel.getSelectedObject();
                if (selectedLunModel != null) {
                    updateSelectedLunWarning(selectedLunModel);
                }
            }
        });
    } else {
        for (LunModel lunModel : items) {
            table.getSelectionModel().setSelected(lunModel, lunModel.getIsSelected());
        }
    }
    ScrollPanel panel = new ScrollPanel();
    panel.add(table);
    item.setWidget(panel);
    // Display LUNs as grayed-out if needed
    for (LunModel lunModel : items) {
        if (lunModel.getIsGrayedOut()) {
            grayOutItem(lunModel.getGrayedOutReasons(), lunModel, table);
        }
    }
    return item;
}
#end_block

#method_before
@Override
public void initialize() {
    super.initialize();
    disableNonChangeableEntities();
    getAlias().setEntity(getDisk().getDiskAlias());
    getDescription().setEntity(getDisk().getDiskDescription());
    getIsShareable().setEntity(getDisk().isShareable());
    getIsWipeAfterDelete().setEntity(getDisk().isWipeAfterDelete());
    getIsScsiPassthrough().setEntity(getDisk().isScsiPassthrough());
    getIsSgIoUnfiltered().setEntity(getDisk().getSgio() == ScsiGenericIO.UNFILTERED);
    getIsReadOnly().setEntity(getDisk().getReadOnly());
    if (getDisk().getDiskStorageType() == Disk.DiskStorageType.IMAGE) {
        DiskImage diskImage = (DiskImage) getDisk();
        getDiskStorageType().setEntity(Disk.DiskStorageType.IMAGE);
        getSize().setEntity((int) diskImage.getSizeInGigabytes());
        getVolumeType().setSelectedItem(diskImage.getVolumeType());
        setVolumeFormat(diskImage.getVolumeFormat());
        boolean isExtendImageSizeEnabled = getVm() != null && !diskImage.isDiskSnapshot() && VdcActionUtils.canExecute(Arrays.asList(getVm()), VM.class, VdcActionType.ExtendImageSize);
        getSizeExtend().setIsChangable(isExtendImageSizeEnabled);
    } else {
        LunDisk lunDisk = (LunDisk) getDisk();
        getDiskStorageType().setEntity(Disk.DiskStorageType.LUN);
        getSize().setEntity(lunDisk.getLun().getDeviceSize());
        getSizeExtend().setIsAvailable(false);
    }
    updateReadOnlyChangeability();
}
#method_after
@Override
public void initialize() {
    super.initialize();
    disableNonChangeableEntities();
    getAlias().setEntity(getDisk().getDiskAlias());
    getDescription().setEntity(getDisk().getDiskDescription());
    getIsShareable().setEntity(getDisk().isShareable());
    getIsWipeAfterDelete().setEntity(getDisk().isWipeAfterDelete());
    getIsScsiPassthrough().setEntity(getDisk().isScsiPassthrough());
    getIsSgIoUnfiltered().setEntity(getDisk().getSgio() == ScsiGenericIO.UNFILTERED);
    getIsReadOnly().setEntity(getDisk().getReadOnly());
    if (getDisk().getDiskStorageType() == Disk.DiskStorageType.IMAGE) {
        DiskImage diskImage = (DiskImage) getDisk();
        getDiskStorageType().setEntity(Disk.DiskStorageType.IMAGE);
        getSize().setEntity((int) diskImage.getSizeInGigabytes());
        getVolumeType().setSelectedItem(diskImage.getVolumeType());
        setVolumeFormat(diskImage.getVolumeFormat());
        boolean isExtendImageSizeEnabled = getVm() != null && !diskImage.isDiskSnapshot() && VdcActionUtils.canExecute(Arrays.asList(getVm()), VM.class, VdcActionType.ExtendImageSize);
        getSizeExtend().setIsChangable(isExtendImageSizeEnabled);
    } else {
        LunDisk lunDisk = (LunDisk) getDisk();
        getDiskStorageType().setEntity(Disk.DiskStorageType.LUN);
        getSize().setEntity(lunDisk.getLun().getDeviceSize());
        getSizeExtend().setIsAvailable(false);
    }
    updateReadOnlyChangeability();
    updateWipeAfterDeleteChangeability();
}
#end_block

#method_before
@Override
protected void datacenter_SelectedItemChanged() {
    super.datacenter_SelectedItemChanged();
    // this needs to be executed after the data center is loaded because the update quota needs both values
    if (getDisk().getDiskStorageType() == Disk.DiskStorageType.IMAGE) {
        Guid storageDomainId = ((DiskImage) getDisk()).getStorageIds().get(0);
        AsyncDataProvider.getInstance().getStorageDomainById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                DiskModel diskModel = (DiskModel) target;
                StorageDomain storageDomain = (StorageDomain) returnValue;
                diskModel.getStorageDomain().setSelectedItem(storageDomain);
            }
        }, getHash()), storageDomainId);
    }
}
#method_after
@Override
protected void datacenter_SelectedItemChanged() {
    super.datacenter_SelectedItemChanged();
    // this needs to be executed after the data center is loaded because the update quota needs both values
    if (getDisk().getDiskStorageType() == Disk.DiskStorageType.IMAGE) {
        Guid storageDomainId = ((DiskImage) getDisk()).getStorageIds().get(0);
        AsyncDataProvider.getInstance().getStorageDomainById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                DiskModel diskModel = (DiskModel) target;
                StorageDomain storageDomain = (StorageDomain) returnValue;
                diskModel.getStorageDomain().setSelectedItem(storageDomain);
            }
        }), storageDomainId);
    }
}
#end_block

#method_before
@Override
protected void updateInternal() {
    super.updateInternal();
    if (!(getContainer().isNewStorage() || getContainer().isStorageActive())) {
        return;
    }
    VDS host = (VDS) getContainer().getHost().getSelectedItem();
    if (host == null) {
        proposeDiscover();
        return;
    }
    final List<EntityModel<?>> prevSelected = findSelectedItems();
    clearItems();
    initializeItems(null, null);
    AsyncQuery asyncQuery = new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            SanStorageModel model = (SanStorageModel) target;
            VdcQueryReturnValue response = (VdcQueryReturnValue) returnValue;
            if (response.getSucceeded()) {
                model.applyData((ArrayList<LUNs>) response.getReturnValue(), false, prevSelected);
                // $NON-NLS-1$
                model.setGetLUNsFailure("");
            } else {
                model.setGetLUNsFailure(ConstantsManager.getInstance().getConstants().couldNotRetrieveLUNsLunsFailure());
            }
        }
    }, true);
    asyncQuery.setContext(getHash());
    Frontend.getInstance().runQuery(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(host.getId(), getType()), asyncQuery);
}
#method_after
@Override
protected void updateInternal() {
    super.updateInternal();
    if (!(getContainer().isNewStorage() || getContainer().isStorageActive())) {
        return;
    }
    VDS host = (VDS) getContainer().getHost().getSelectedItem();
    if (host == null) {
        proposeDiscover();
        return;
    }
    final Collection<EntityModel<?>> prevSelected = Linq.findSelectedItems((Collection<EntityModel<?>>) getSelectedItem());
    clearItems();
    initializeItems(null, null);
    final SanStorageModel model = this;
    Object target = getWidgetModel() != null ? getWidgetModel() : getContainer();
    AsyncQuery asyncQuery = new AsyncQuery(target, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            VdcQueryReturnValue response = (VdcQueryReturnValue) returnValue;
            if (response.getSucceeded()) {
                model.applyData((ArrayList<LUNs>) response.getReturnValue(), false, prevSelected);
                // $NON-NLS-1$
                model.setGetLUNsFailure("");
            } else {
                model.setGetLUNsFailure(ConstantsManager.getInstance().getConstants().couldNotRetrieveLUNsLunsFailure());
            }
        }
    }, true);
    Frontend.getInstance().runQuery(VdcQueryType.GetDeviceList, new GetDeviceListQueryParameters(host.getId(), getType()), asyncQuery);
}
#end_block

#method_before
public void applyData(List<LUNs> source, boolean isIncluded, List<EntityModel<?>> selectedItems) {
    ArrayList<LunModel> newItems = new ArrayList<LunModel>();
    for (LUNs a : source) {
        if (a.getLunType() == getType() || a.getLunType() == StorageType.UNKNOWN) {
            ArrayList<SanTargetModel> targets = createTargetModelList(a);
            LunModel lunModel = new LunModel();
            lunModel.setLunId(a.getLUN_id());
            lunModel.setVendorId(a.getVendorId());
            lunModel.setProductId(a.getProductId());
            lunModel.setSerial(a.getSerial());
            lunModel.setMultipathing(a.getPathCount());
            lunModel.setTargets(targets);
            lunModel.setSize(a.getDeviceSize());
            lunModel.setIsAccessible(a.getAccessible());
            lunModel.setStatus(a.getStatus());
            lunModel.setIsIncluded(isIncluded);
            lunModel.setIsSelected(containsLun(lunModel, selectedItems, isIncluded));
            lunModel.setEntity(a);
            // Add LunModel
            newItems.add(lunModel);
            // Update isGrayedOut and grayedOutReason properties
            updateGrayedOut(lunModel);
            // Remember included LUNs to prevent their removal while updating items.
            if (isIncluded) {
                includedLUNs.add(lunModel);
            }
        }
    }
    initializeItems(newItems, null);
    proposeDiscover();
}
#method_after
public void applyData(List<LUNs> source, boolean isIncluded, Collection<EntityModel<?>> selectedItems) {
    ArrayList<LunModel> newItems = new ArrayList<LunModel>();
    for (LUNs a : source) {
        if (a.getLunType() == getType() || a.getLunType() == StorageType.UNKNOWN) {
            ArrayList<SanTargetModel> targets = createTargetModelList(a);
            LunModel lunModel = new LunModel();
            lunModel.setLunId(a.getLUN_id());
            lunModel.setVendorId(a.getVendorId());
            lunModel.setProductId(a.getProductId());
            lunModel.setSerial(a.getSerial());
            lunModel.setMultipathing(a.getPathCount());
            lunModel.setTargets(targets);
            lunModel.setSize(a.getDeviceSize());
            lunModel.setIsAccessible(a.getAccessible());
            lunModel.setStatus(a.getStatus());
            lunModel.setIsIncluded(isIncluded);
            lunModel.setIsSelected(containsLun(lunModel, selectedItems, isIncluded));
            lunModel.setEntity(a);
            // Add LunModel
            newItems.add(lunModel);
            // Update isGrayedOut and grayedOutReason properties
            updateGrayedOut(lunModel);
            // Remember included LUNs to prevent their removal while updating items.
            if (isIncluded) {
                includedLUNs.add(lunModel);
            }
        }
    }
    initializeItems(newItems, null);
    proposeDiscover();
}
#end_block

#method_before
private boolean containsLun(LunModel lunModel, List<EntityModel<?>> models, boolean isIncluded) {
    if (models == null) {
        return isIncluded;
    }
    for (EntityModel<?> model : models) {
        if (model instanceof LunModel) {
            if (((LunModel) model).getLunId().equals(lunModel.getLunId())) {
                return true;
            }
        }
    }
    return false;
}
#method_after
private boolean containsLun(LunModel lunModel, Collection<EntityModel<?>> models, boolean isIncluded) {
    if (models == null) {
        return isIncluded;
    }
    for (EntityModel<?> model : models) {
        if (model instanceof LunModel) {
            if (((LunModel) model).getLunId().equals(lunModel.getLunId())) {
                return true;
            }
        }
    }
    return false;
}
#end_block

#method_before
private void commonInitialize() {
    super.initialize();
    setHash(getHashName() + new Date());
    // Add progress listeners
    Frontend.getInstance().getQueryStartedEvent().addListener(this);
    Frontend.getInstance().getQueryCompleteEvent().addListener(this);
    Frontend.getInstance().subscribeAdditionalQueries(new VdcQueryType[] { VdcQueryType.Search, VdcQueryType.GetStoragePoolById, VdcQueryType.GetNextAvailableDiskAliasNameByVMId, VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, VdcQueryType.GetAllVdsByStoragePool, VdcQueryType.GetAllAttachableDisksForVm, VdcQueryType.GetAllDisksByVmId, VdcQueryType.GetAllRelevantQuotasForStorage, VdcQueryType.OsRepository, VdcQueryType.GetDiskProfilesByStorageDomainId });
    // Create and set commands
    // $NON-NLS-1$
    UICommand onSaveCommand = new UICommand("OnSave", this);
    onSaveCommand.setTitle(CONSTANTS.ok());
    onSaveCommand.setIsDefault(true);
    getCommands().add(onSaveCommand);
    getCommands().add(getCancelCommand());
    updateDatacenters();
}
#method_after
private void commonInitialize() {
    super.initialize();
    // Create and set commands
    // $NON-NLS-1$
    UICommand onSaveCommand = new UICommand("OnSave", this);
    onSaveCommand.setTitle(CONSTANTS.ok());
    onSaveCommand.setIsDefault(true);
    getCommands().add(onSaveCommand);
    getCommands().add(getCancelCommand());
    updateDatacenters();
}
#end_block

#method_before
protected void updateStorageDomains(final StoragePool datacenter) {
    AsyncDataProvider.getInstance().getPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            DiskModel diskModel = (DiskModel) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            ArrayList<StorageDomain> filteredStorageDomains = new ArrayList<StorageDomain>();
            for (StorageDomain a : storageDomains) {
                if (!a.getStorageDomainType().isIsoOrImportExportDomain() && a.getStatus() == StorageDomainStatus.Active) {
                    filteredStorageDomains.add(a);
                }
            }
            Collections.sort(filteredStorageDomains, new NameableComparator());
            StorageDomain storage = Linq.firstOrDefault(filteredStorageDomains);
            diskModel.getStorageDomain().setItems(filteredStorageDomains);
            diskModel.getStorageDomain().setSelectedItem(storage);
            diskModel.setMessage(storage == null ? CONSTANTS.noActiveStorageDomainsInDC() : "");
        }
    }, getHash()), datacenter.getId(), ActionGroup.CREATE_DISK);
}
#method_after
protected void updateStorageDomains(final StoragePool datacenter) {
    AsyncDataProvider.getInstance().getPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            DiskModel diskModel = (DiskModel) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            ArrayList<StorageDomain> filteredStorageDomains = new ArrayList<StorageDomain>();
            for (StorageDomain a : storageDomains) {
                if (!a.getStorageDomainType().isIsoOrImportExportDomain() && a.getStatus() == StorageDomainStatus.Active) {
                    filteredStorageDomains.add(a);
                }
            }
            Collections.sort(filteredStorageDomains, new NameableComparator());
            StorageDomain storage = Linq.firstOrDefault(filteredStorageDomains);
            diskModel.getStorageDomain().setItems(filteredStorageDomains);
            diskModel.getStorageDomain().setSelectedItem(storage);
            diskModel.setMessage(storage == null ? CONSTANTS.noActiveStorageDomainsInDC() : "");
        }
    }), datacenter.getId(), ActionGroup.CREATE_DISK);
}
#end_block

#method_before
private void updateHosts(StoragePool datacenter) {
    AsyncDataProvider.getInstance().getHostListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            AbstractDiskModel diskModel = (AbstractDiskModel) target;
            Iterable<VDS> hosts = (Iterable<VDS>) returnValue;
            ArrayList<VDS> filteredHosts = new ArrayList<VDS>();
            for (VDS host : hosts) {
                if (isHostAvailable(host)) {
                    filteredHosts.add(host);
                }
            }
            diskModel.getHost().setItems(filteredHosts);
        }
    }, getHash()), datacenter.getId());
}
#method_after
private void updateHosts(StoragePool datacenter) {
    AsyncDataProvider.getInstance().getHostListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            AbstractDiskModel diskModel = (AbstractDiskModel) target;
            Iterable<VDS> hosts = (Iterable<VDS>) returnValue;
            ArrayList<VDS> filteredHosts = new ArrayList<VDS>();
            for (VDS host : hosts) {
                if (isHostAvailable(host)) {
                    filteredHosts.add(host);
                }
            }
            diskModel.getHost().setItems(filteredHosts);
        }
    }), datacenter.getId());
}
#end_block

#method_before
private void updateDatacenters() {
    boolean isInVm = getVm() != null;
    getDataCenter().setIsAvailable(!isInVm);
    // $NON-NLS-1$
    setMessage("");
    if (isInVm) {
        AsyncDataProvider.getInstance().getDataCenterById((new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                AbstractDiskModel diskModel = (AbstractDiskModel) target;
                StoragePool dataCenter = (StoragePool) returnValue;
                ArrayList<StoragePool> dataCenters = new ArrayList<StoragePool>();
                if (isDatacenterAvailable(dataCenter)) {
                    dataCenters.add(dataCenter);
                }
                diskModel.getDataCenter().setItems(dataCenters, Linq.firstOrDefault(dataCenters));
                if (dataCenters.isEmpty()) {
                    diskModel.setMessage(CONSTANTS.relevantDCnotActive());
                }
            }
        }, getHash())), getVm().getStoragePoolId());
    } else {
        AsyncDataProvider.getInstance().getDataCenterList(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                AbstractDiskModel diskModel = (AbstractDiskModel) target;
                ArrayList<StoragePool> dataCenters = (ArrayList<StoragePool>) returnValue;
                ArrayList<StoragePool> filteredDataCenters = new ArrayList<StoragePool>();
                for (StoragePool dataCenter : dataCenters) {
                    if (isDatacenterAvailable(dataCenter)) {
                        filteredDataCenters.add(dataCenter);
                    }
                }
                diskModel.getDataCenter().setItems(filteredDataCenters);
                if (filteredDataCenters.isEmpty()) {
                    diskModel.setMessage(CONSTANTS.noActiveDataCenters());
                }
            }
        }, getHash()));
    }
}
#method_after
private void updateDatacenters() {
    boolean isInVm = getVm() != null;
    getDataCenter().setIsAvailable(!isInVm);
    // $NON-NLS-1$
    setMessage("");
    if (isInVm) {
        AsyncDataProvider.getInstance().getDataCenterById((new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                AbstractDiskModel diskModel = (AbstractDiskModel) target;
                StoragePool dataCenter = (StoragePool) returnValue;
                ArrayList<StoragePool> dataCenters = new ArrayList<StoragePool>();
                if (isDatacenterAvailable(dataCenter)) {
                    dataCenters.add(dataCenter);
                }
                diskModel.getDataCenter().setItems(dataCenters, Linq.firstOrDefault(dataCenters));
                if (dataCenters.isEmpty()) {
                    diskModel.setMessage(CONSTANTS.relevantDCnotActive());
                }
            }
        })), getVm().getStoragePoolId());
    } else {
        AsyncDataProvider.getInstance().getDataCenterList(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                AbstractDiskModel diskModel = (AbstractDiskModel) target;
                ArrayList<StoragePool> dataCenters = (ArrayList<StoragePool>) returnValue;
                ArrayList<StoragePool> filteredDataCenters = new ArrayList<StoragePool>();
                for (StoragePool dataCenter : dataCenters) {
                    if (isDatacenterAvailable(dataCenter)) {
                        filteredDataCenters.add(dataCenter);
                    }
                }
                diskModel.getDataCenter().setItems(filteredDataCenters);
                if (filteredDataCenters.isEmpty()) {
                    diskModel.setMessage(CONSTANTS.noActiveDataCenters());
                }
            }
        }));
    }
}
#end_block

#method_before
private void updateBootableDiskAvailable() {
    AsyncDataProvider.getInstance().getVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
            updateBootableFrom(disks);
        }
    }, getHash()), getVm().getId());
}
#method_after
private void updateBootableDiskAvailable() {
    AsyncDataProvider.getInstance().getVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
            updateBootableFrom(disks);
        }
    }), getVm().getId());
}
#end_block

#method_before
private void updateShareableDiskEnabled(StoragePool datacenter) {
    boolean isShareableDiskEnabled = (Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.ShareableDiskEnabled, datacenter.getcompatibility_version().getValue());
    getIsShareable().setChangeProhibitionReason(CONSTANTS.shareableDiskNotSupported());
    getIsShareable().setIsChangable(isShareableDiskEnabled && isEditEnabled());
}
#method_after
private void updateShareableDiskEnabled(StoragePool datacenter) {
    boolean isShareableDiskEnabled = (Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.ShareableDiskEnabled, datacenter.getCompatibilityVersion().getValue());
    getIsShareable().setChangeProhibitionReason(CONSTANTS.shareableDiskNotSupported());
    getIsShareable().setIsChangable(isShareableDiskEnabled && isEditEnabled());
}
#end_block

#method_before
private void updateDirectLunDiskEnabled(StoragePool datacenter) {
    if (getDiskStorageType().getEntity() != DiskStorageType.LUN) {
        return;
    }
    boolean isDirectLUNDiskkEnabled = (Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.DirectLUNDiskEnabled, datacenter.getcompatibility_version().getValue());
    getIsDirectLunDiskAvaialable().setEntity(isDirectLUNDiskkEnabled);
    // $NON-NLS-1$
    setMessage(!isDirectLUNDiskkEnabled ? CONSTANTS.directLUNDiskNotSupported() : "");
}
#method_after
private void updateDirectLunDiskEnabled(StoragePool datacenter) {
    if (getDiskStorageType().getEntity() != DiskStorageType.LUN) {
        return;
    }
    boolean isDirectLUNDiskkEnabled = (Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.DirectLUNDiskEnabled, datacenter.getCompatibilityVersion().getValue());
    getIsDirectLunDiskAvaialable().setEntity(isDirectLUNDiskkEnabled);
    // $NON-NLS-1$
    setMessage(!isDirectLUNDiskkEnabled ? CONSTANTS.directLUNDiskNotSupported() : "");
}
#end_block

#method_before
private void updateDiskProfiles(StoragePool selectedItem) {
    StorageDomain storageDomain = getStorageDomain().getSelectedItem();
    if (storageDomain == null) {
        return;
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetDiskProfilesByStorageDomainId, new IdQueryParameters(storageDomain.getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object innerModel, Object value) {
            AbstractDiskModel.this.setDiskProfilesList((List<DiskProfile>) ((VdcQueryReturnValue) value).getReturnValue());
        }
    }, getHash()));
}
#method_after
private void updateDiskProfiles(StoragePool selectedItem) {
    StorageDomain storageDomain = getStorageDomain().getSelectedItem();
    if (storageDomain == null) {
        return;
    }
    Frontend.getInstance().runQuery(VdcQueryType.GetDiskProfilesByStorageDomainId, new IdQueryParameters(storageDomain.getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object innerModel, Object value) {
            AbstractDiskModel.this.setDiskProfilesList((List<DiskProfile>) ((VdcQueryReturnValue) value).getReturnValue());
        }
    }));
}
#end_block

#method_before
private void updateQuota(StoragePool datacenter) {
    if (datacenter.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED) || getDiskStorageType().getEntity() != DiskStorageType.IMAGE) {
        getQuota().setIsAvailable(false);
        return;
    }
    getQuota().setIsAvailable(true);
    StorageDomain storageDomain = getStorageDomain().getSelectedItem();
    if (storageDomain == null) {
        return;
    }
    IdQueryParameters parameters = new IdQueryParameters(storageDomain.getId());
    Frontend.getInstance().runQuery(VdcQueryType.GetAllRelevantQuotasForStorage, parameters, new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object innerModel, Object innerReturnValue) {
            ArrayList<Quota> quotaList = ((VdcQueryReturnValue) innerReturnValue).getReturnValue();
            if (quotaList != null && !quotaList.isEmpty()) {
                getQuota().setItems(quotaList);
            }
            Guid defaultQuota = getDisk() != null ? ((DiskImage) getDisk()).getQuotaId() : null;
            if (defaultQuota != null) {
                for (Quota quota : quotaList) {
                    if (quota.getId().equals(defaultQuota)) {
                        getQuota().setSelectedItem(quota);
                        return;
                    }
                }
                Quota quota = new Quota();
                quota.setId(defaultQuota);
                if (getDisk() != null) {
                    quota.setQuotaName(getDiskImage().getQuotaName());
                }
                quotaList.add(quota);
                getQuota().setItems(quotaList);
                getQuota().setSelectedItem(quota);
            }
        }
    }, getHash()));
}
#method_after
private void updateQuota(StoragePool datacenter) {
    if (datacenter.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED) || getDiskStorageType().getEntity() != DiskStorageType.IMAGE) {
        getQuota().setIsAvailable(false);
        return;
    }
    getQuota().setIsAvailable(true);
    StorageDomain storageDomain = getStorageDomain().getSelectedItem();
    if (storageDomain == null) {
        return;
    }
    IdQueryParameters parameters = new IdQueryParameters(storageDomain.getId());
    Frontend.getInstance().runQuery(VdcQueryType.GetAllRelevantQuotasForStorage, parameters, new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object innerModel, Object innerReturnValue) {
            ArrayList<Quota> quotaList = ((VdcQueryReturnValue) innerReturnValue).getReturnValue();
            if (quotaList != null && !quotaList.isEmpty()) {
                getQuota().setItems(quotaList);
            }
            Guid defaultQuota = getDisk() != null ? ((DiskImage) getDisk()).getQuotaId() : null;
            if (defaultQuota != null) {
                for (Quota quota : quotaList) {
                    if (quota.getId().equals(defaultQuota)) {
                        getQuota().setSelectedItem(quota);
                        return;
                    }
                }
                Quota quota = new Quota();
                quota.setId(defaultQuota);
                if (getDisk() != null) {
                    quota.setQuotaName(getDiskImage().getQuotaName());
                }
                quotaList.add(quota);
                getQuota().setItems(quotaList);
                getQuota().setSelectedItem(quota);
            }
        }
    }));
}
#end_block

#method_before
private void diskStorageType_EntityChanged() {
    boolean isInVm = getVm() != null;
    boolean isDiskImage = getDiskStorageType().getEntity() == DiskStorageType.IMAGE;
    boolean isLunDisk = getDiskStorageType().getEntity() == DiskStorageType.LUN;
    getSize().setIsAvailable(isDiskImage);
    getSizeExtend().setIsAvailable(isDiskImage && !getIsNew());
    getStorageDomain().setIsAvailable(isDiskImage);
    getVolumeType().setIsAvailable(isDiskImage);
    getIsWipeAfterDelete().setIsAvailable(isDiskImage);
    getHost().setIsAvailable(isLunDisk);
    getStorageType().setIsAvailable(isLunDisk);
    getDataCenter().setIsAvailable(!isInVm);
    getDiskProfile().setIsAvailable(isDiskImage);
    if (!isDiskImage) {
        previousWipeAfterDeleteEntity = getIsWipeAfterDelete().getEntity();
        previousIsQuotaAvailable = getQuota().getIsAvailable();
    }
    getIsWipeAfterDelete().setEntity(isDiskImage ? previousWipeAfterDeleteEntity : false);
    getQuota().setIsAvailable(isDiskImage ? previousIsQuotaAvailable : false);
    updateDatacenters();
}
#method_after
protected void diskStorageType_EntityChanged() {
    boolean isInVm = getVm() != null;
    boolean isDiskImage = getDiskStorageType().getEntity() == DiskStorageType.IMAGE;
    boolean isLunDisk = getDiskStorageType().getEntity() == DiskStorageType.LUN;
    getSize().setIsAvailable(isDiskImage);
    getSizeExtend().setIsAvailable(isDiskImage && !getIsNew());
    getStorageDomain().setIsAvailable(isDiskImage);
    getVolumeType().setIsAvailable(isDiskImage);
    getIsWipeAfterDelete().setIsAvailable(isDiskImage);
    getHost().setIsAvailable(isLunDisk);
    getStorageType().setIsAvailable(isLunDisk);
    getDataCenter().setIsAvailable(!isInVm);
    getDiskProfile().setIsAvailable(isDiskImage);
    if (!isDiskImage) {
        previousIsQuotaAvailable = getQuota().getIsAvailable();
    }
    getQuota().setIsAvailable(isDiskImage ? previousIsQuotaAvailable : false);
    updateDatacenters();
}
#end_block

#method_before
protected void updateReadOnlyChangeability() {
    DiskInterface diskInterface = getDiskInterface().getSelectedItem();
    if (diskInterface == DiskInterface.IDE) {
        getIsReadOnly().setChangeProhibitionReason(CONSTANTS.cannotEnableIdeInterfaceForReadOnlyDisk());
        getIsReadOnly().setIsChangable(false);
        getIsReadOnly().setEntity(false);
        return;
    }
    boolean isDirectLUN = getDiskStorageType().getEntity() == DiskStorageType.LUN;
    boolean isScsiPassthrough = getIsScsiPassthrough().getEntity();
    if (diskInterface == DiskInterface.VirtIO_SCSI && isDirectLUN && isScsiPassthrough) {
        getIsReadOnly().setChangeProhibitionReason(CONSTANTS.cannotEnableReadonlyWhenScsiPassthroughEnabled());
        getIsReadOnly().setIsChangable(false);
        getIsReadOnly().setEntity(false);
        return;
    }
    getIsReadOnly().setIsChangable(isEditEnabled());
    getIsReadOnly().setEntity(getIsNew() ? Boolean.FALSE : getDisk().getReadOnly());
}
#method_after
protected void updateReadOnlyChangeability() {
    DiskInterface diskInterface = getDiskInterface().getSelectedItem();
    if (diskInterface == DiskInterface.IDE) {
        getIsReadOnly().setChangeProhibitionReason(CONSTANTS.cannotEnableIdeInterfaceForReadOnlyDisk());
        getIsReadOnly().setIsChangable(false);
        getIsReadOnly().setEntity(false);
        return;
    }
    boolean isDirectLUN = getDiskStorageType().getEntity() == DiskStorageType.LUN;
    boolean isScsiPassthrough = getIsScsiPassthrough().getEntity();
    if (diskInterface == DiskInterface.VirtIO_SCSI && isDirectLUN && isScsiPassthrough) {
        getIsReadOnly().setChangeProhibitionReason(CONSTANTS.cannotEnableReadonlyWhenScsiPassthroughEnabled());
        getIsReadOnly().setIsChangable(false);
        getIsReadOnly().setEntity(false);
        return;
    }
    if (isVmAttachedToPool() && !getIsNew()) {
        getIsReadOnly().setIsChangable(false);
    } else {
        getIsReadOnly().setIsChangable(isEditEnabled());
    }
    getIsReadOnly().setEntity(getIsNew() ? Boolean.FALSE : getDisk().getReadOnly());
}
#end_block

#method_before
private void storageDomain_SelectedItemChanged() {
    StorageDomain selectedStorage = getStorageDomain().getSelectedItem();
    if (selectedStorage != null) {
        updateVolumeType(selectedStorage.getStorageType());
    }
    updateQuota(getDataCenter().getSelectedItem());
    updateDiskProfiles(getDataCenter().getSelectedItem());
}
#method_after
private void storageDomain_SelectedItemChanged() {
    StorageDomain selectedStorage = getStorageDomain().getSelectedItem();
    if (selectedStorage != null) {
        updateVolumeType(selectedStorage.getStorageType());
        if (getIsNew()) {
            getIsWipeAfterDelete().setEntity(selectedStorage.getWipeAfterDelete());
        }
    }
    updateQuota(getDataCenter().getSelectedItem());
    updateDiskProfiles(getDataCenter().getSelectedItem());
}
#end_block

#method_before
@Override
public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) {
        if (sender == getIsReadOnly()) {
            updateScsiPassthroguhChangeability();
        } else if (sender == getIsScsiPassthrough()) {
            updateSgIoUnfilteredChangeability();
            updateReadOnlyChangeability();
        } else if (sender == getDiskStorageType()) {
            diskStorageType_EntityChanged();
        }
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVolumeType()) {
            volumeType_SelectedItemChanged();
        } else if (sender == getDiskInterface()) {
            DiskInterface_SelectedItemChanged();
        } else if (sender == getDataCenter()) {
            datacenter_SelectedItemChanged();
        } else if (sender == getStorageDomain()) {
            storageDomain_SelectedItemChanged();
        }
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryStartedEventDefinition()) && ObjectUtils.objectsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryCompleteEventDefinition()) && ObjectUtils.objectsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    }
}
#method_after
@Override
public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) {
        if (sender == getIsReadOnly()) {
            updateScsiPassthroguhChangeability();
        } else if (sender == getIsScsiPassthrough()) {
            updateSgIoUnfilteredChangeability();
            updateReadOnlyChangeability();
        } else if (sender == getDiskStorageType()) {
            diskStorageType_EntityChanged();
        }
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVolumeType()) {
            volumeType_SelectedItemChanged();
        } else if (sender == getDiskInterface()) {
            DiskInterface_SelectedItemChanged();
        } else if (sender == getDataCenter()) {
            datacenter_SelectedItemChanged();
        } else if (sender == getStorageDomain()) {
            storageDomain_SelectedItemChanged();
        }
    }
}
#end_block

#method_before
@Override
public void initialize() {
    super.initialize();
    getIsPlugged().setIsAvailable(true);
    if (getVm().getId() != null) {
        loadAttachableDisks(null);
    }
}
#method_after
@Override
public void initialize() {
    super.initialize();
    getIsPlugged().setIsAvailable(true);
    if (getVm().getId() != null) {
        loadAttachableDisks();
    }
}
#end_block

#method_before
public void loadAttachableDisks(int os, Version compatibilityVersion, final Disk prevSelectedDisk) {
    // Get internal attachable disks
    AsyncDataProvider.getInstance().getFilteredAttachableDisks(new AsyncQuery(this, new GetDisksCallback(DiskStorageType.IMAGE, prevSelectedDisk), getHash()), getVm().getStoragePoolId(), getVm().getId(), os, compatibilityVersion);
    // Get external attachable disks
    AsyncDataProvider.getInstance().getFilteredAttachableDisks(new AsyncQuery(this, new GetDisksCallback(DiskStorageType.LUN, prevSelectedDisk), getHash()), null, getVm().getId(), os, compatibilityVersion);
}
#method_after
public void loadAttachableDisks() {
    doLoadAttachableDisks(new GetDisksCallback(DiskStorageType.IMAGE), new GetDisksCallback(DiskStorageType.LUN));
}
#end_block

#method_before
@Override
public void onSuccess(Object model, Object returnValue) {
    List<Disk> disks = replaceIfSelected((List<Disk>) returnValue, prevSelectedDisk, diskStorageType);
    Collections.sort(disks, new Linq.DiskByAliasComparer());
    ArrayList<DiskModel> diskModels = Linq.disksToDiskModelList(disks);
    List<EntityModel<DiskModel>> entities = Linq.toEntityModelList(Linq.filterDisksByType(diskModels, diskStorageType));
    getAttachableDisksMap().get(diskStorageType).setItems(entities, selectedOrNull(entities, prevSelectedDisk, diskStorageType));
}
#method_after
@Override
public void onSuccess(Object model, Object returnValue) {
    List<Disk> disks = adjustReturnValue(returnValue);
    Collections.sort(disks, new Linq.DiskByAliasComparer());
    ArrayList<DiskModel> diskModels = Linq.disksToDiskModelList(disks);
    List<EntityModel<DiskModel>> entities = Linq.toEntityModelList(Linq.filterDisksByType(diskModels, diskStorageType));
    initAttachableDisks(entities);
}
#end_block

#method_before
@Override
public void store(IFrontendActionAsyncCallback callback) {
    if (getProgress() != null || !validate()) {
        return;
    }
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    ArrayList<IFrontendActionAsyncCallback> callbacks = new ArrayList<IFrontendActionAsyncCallback>();
    IFrontendActionAsyncCallback onFinishCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            NewDiskModel diskModel = (NewDiskModel) result.getState();
            diskModel.stopProgress();
            diskModel.cancel();
        }
    };
    List<EntityModel<DiskModel>> disksToAttach = getSelectedDisks();
    for (int i = 0; i < disksToAttach.size(); i++) {
        DiskModel disk = disksToAttach.get(i).getEntity();
        // Disk is attached to VM as read only or not, null is applicable only for floating disks
        // but this is not a case here.
        AttachDetachVmDiskParameters parameters = new AttachDetachVmDiskParameters(getVm().getId(), disk.getDisk().getId(), getIsPlugged().getEntity(), Boolean.TRUE.equals(disk.getDisk().getReadOnly()));
        actionTypes.add(VdcActionType.AttachDiskToVm);
        paramerterList.add(parameters);
        callbacks.add(i == disksToAttach.size() - 1 ? onFinishCallback : null);
    }
    startProgress(null);
    Frontend.getInstance().runMultipleActions(actionTypes, paramerterList, callbacks, null, this);
}
#method_after
@Override
public void store(IFrontendActionAsyncCallback callback) {
    if (getProgress() != null || !validate()) {
        return;
    }
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    ArrayList<IFrontendActionAsyncCallback> callbacks = new ArrayList<IFrontendActionAsyncCallback>();
    IFrontendActionAsyncCallback onFinishCallback = callback != null ? callback : new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            NewDiskModel diskModel = (NewDiskModel) result.getState();
            diskModel.stopProgress();
            diskModel.cancel();
        }
    };
    List<EntityModel<DiskModel>> disksToAttach = getSelectedDisks();
    for (int i = 0; i < disksToAttach.size(); i++) {
        DiskModel disk = disksToAttach.get(i).getEntity();
        // Disk is attached to VM as read only or not, null is applicable only for floating disks
        // but this is not a case here.
        AttachDetachVmDiskParameters parameters = new AttachDetachVmDiskParameters(getVm().getId(), disk.getDisk().getId(), getIsPlugged().getEntity(), Boolean.TRUE.equals(disk.getDisk().getReadOnly()));
        actionTypes.add(VdcActionType.AttachDiskToVm);
        paramerterList.add(parameters);
        callbacks.add(i == disksToAttach.size() - 1 ? onFinishCallback : null);
    }
    startProgress(null);
    Frontend.getInstance().runMultipleActions(actionTypes, paramerterList, callbacks, null, this);
}
#end_block

#method_before
public void isClusterEmpty(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter<Boolean>() {

        @Override
        public Boolean Convert(Object source, AsyncQuery _asyncQuery) {
            return (Boolean) source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsClusterEmpty, new IdQueryParameters(id), aQuery);
}
#method_after
public void isClusterEmpty(AsyncQuery aQuery, Guid clusterId) {
    runQueryByIdParameter(VdcQueryType.IsClusterEmpty, aQuery, clusterId);
}
#end_block

#method_before
public void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#method_after
public void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((List<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#end_block

#method_before
public void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#method_after
public void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return Linq.<VDS>cast((List<?>) source);
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#end_block

#method_before
public void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#method_after
public void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (List<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#end_block

#method_before
public void getUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    getUpHostListByCluster(aQuery, clusterName, null);
}
#method_after
public void getUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : Collections.emptyList();
        }
    };
    getUpHostListByCluster(aQuery, clusterName, null);
}
#end_block

#method_before
public void getProviderCertificateChain(AsyncQuery aQuery, Provider provider) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetProviderCertificateChainText, new ProviderQueryParameters(provider), aQuery);
}
#method_after
public void getProviderCertificateChain(AsyncQuery aQuery, Provider provider) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return Collections.<CertificateInfo>emptyList();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetProviderCertificateChain, new ProviderQueryParameters(provider), aQuery);
}
#end_block

#method_before
public boolean hasSpiceSupport(int osId, Version version) {
    List<DisplayType> osDisplayTypes = getDisplayTypes(osId, version);
    return osDisplayTypes == null ? false : osDisplayTypes.contains(DisplayType.qxl);
}
#method_after
public boolean hasSpiceSupport(int osId, Version version) {
    for (Pair<GraphicsType, DisplayType> graphicsDisplayPair : getGraphicsAndDisplays(osId, version)) {
        if (graphicsDisplayPair.getFirst() == GraphicsType.SPICE) {
            return true;
        }
    }
    return false;
}
#end_block

#method_before
private void initDisplayTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            displayTypes = ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetDisplayTypes), callback);
}
#method_after
private void initDisplayTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            graphicsAndDisplays = ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetDisplayTypes), callback);
}
#end_block

#method_before
@Override
protected void createHeaderWidget() {
    EntityModelCellTable<ListModel<LunModel>> table = new EntityModelCellTable<ListModel<LunModel>>(false, (Resources) GWT.create(SanStorageListHeaderResources.class), true);
    // Create select all button
    addSelectAllButton(table);
    // Create header table
    initRootNodeTable(table);
    // Add first blank column
    table.insertColumn(0, new TextColumn<LunModel>() {

        @Override
        public String getValue(LunModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, "", // $NON-NLS-1$ //$NON-NLS-2$
    "20px");
    // Add last blank column
    table.addColumn(new TextColumn<LunModel>() {

        @Override
        public String getValue(LunModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, "", // $NON-NLS-1$ //$NON-NLS-2$
    "22px");
    // Add blank item list
    table.setRowData(new ArrayList<EntityModel>());
    // Style table
    // $NON-NLS-1$
    table.setWidth("100%", true);
    // Add table as header widget
    treeHeader.add(table);
}
#method_after
@Override
protected void createHeaderWidget() {
    EntityModelCellTable<ListModel<LunModel>> table = new EntityModelCellTable<ListModel<LunModel>>(false, (Resources) GWT.create(SanStorageListHeaderResources.class), true);
    // Create select all button
    addSelectAllButton(table);
    // Create header table
    initRootNodeTable(table);
    // Add first blank column
    table.insertColumn(0, new TextColumn<LunModel>() {

        @Override
        public String getValue(LunModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, "", // $NON-NLS-1$ //$NON-NLS-2$
    "15px");
    // Add last blank column
    table.addColumn(new TextColumn<LunModel>() {

        @Override
        public String getValue(LunModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, "", // $NON-NLS-1$ //$NON-NLS-2$
    "22px");
    // Add blank item list
    table.setRowData(new ArrayList<EntityModel>());
    // Style table
    // $NON-NLS-1$
    table.setWidth("100%", true);
    // Add table as header widget
    treeHeader.add(table);
}
#end_block

#method_before
private void addSelectAllButton(EntityModelCellTable<ListModel<LunModel>> table) {
    // Create 'Select All' check-box
    Header<Boolean> selectAllHeader = new Header<Boolean>(new CheckboxCell(true, false)) {

        @Override
        public Boolean getValue() {
            return model.getIsAllLunsSelected();
        }
    };
    selectAllHeader.setUpdater(new ValueUpdater<Boolean>() {

        @Override
        public void update(Boolean value) {
            model.setIsAllLunsSelected(value);
        }
    });
    table.addColumn(new TextColumn<LunModel>() {

        @Override
        public String getValue(LunModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, multiSelection ? selectAllHeader : null, // $NON-NLS-1$
    "27px");
}
#method_after
private void addSelectAllButton(EntityModelCellTable<ListModel<LunModel>> table) {
    // Create 'Select All' check-box
    Header<Boolean> selectAllHeader = new Header<Boolean>(new CheckboxCell(true, false)) {

        @Override
        public Boolean getValue() {
            return model.getIsAllLunsSelected();
        }
    };
    selectAllHeader.setUpdater(new ValueUpdater<Boolean>() {

        @Override
        public void update(Boolean value) {
            model.setIsAllLunsSelected(value);
        }
    });
    table.addColumn(new TextColumn<LunModel>() {

        @Override
        public String getValue(LunModel model) {
            // $NON-NLS-1$
            return "";
        }
    }, multiSelection ? selectAllHeader : null, // $NON-NLS-1$
    "20px");
}
#end_block

#method_before
@Override
protected TreeItem createRootNode(LunModel rootModel) {
    final EntityModelCellTable<ListModel<LunModel>> table = new EntityModelCellTable<ListModel<LunModel>>(multiSelection, (Resources) GWT.create(SanStorageListLunRootResources.class));
    // Create table
    initRootNodeTable(table);
    // Set custom selection column
    LunSelectionColumn lunSelectionColumn = new LunSelectionColumn(multiSelection) {

        @Override
        public LunModel getValue(LunModel object) {
            return object;
        }
    };
    // $NON-NLS-1$
    table.setCustomSelectionColumn(lunSelectionColumn, "25px");
    // Add items
    List<LunModel> items = new ArrayList<LunModel>();
    items.add(rootModel);
    ListModel<LunModel> listModel = new ListModel<LunModel>();
    listModel.setItems(items);
    // Update table
    table.setRowData(items);
    table.asEditor().edit(listModel);
    // $NON-NLS-1$
    table.setWidth("100%", true);
    rootModel.getPropertyChangedEvent().removeListener(lunModelSelectedItemListener);
    rootModel.getPropertyChangedEvent().addListener(lunModelSelectedItemListener, table);
    if (!multiSelection) {
        table.getSelectionModel().addSelectionChangeHandler(new Handler() {

            @Override
            public void onSelectionChange(SelectionChangeEvent event) {
                SingleSelectionModel SingleSelectionModel = (SingleSelectionModel) event.getSource();
                LunModel selectedLunModel = (LunModel) SingleSelectionModel.getSelectedObject();
                if (selectedLunModel != null) {
                    updateSelectedLunWarning(selectedLunModel);
                }
            }
        });
    } else {
        table.getSelectionModel().setSelected(rootModel, rootModel.getIsSelected());
    }
    // Create tree item
    HorizontalPanel panel = new HorizontalPanel();
    panel.add(table);
    // $NON-NLS-1$
    panel.setWidth("100%");
    panel.getElement().getStyle().setTableLayout(TableLayout.FIXED);
    TreeItem item = new TreeItem(panel);
    // Display LUNs as grayed-out if needed
    if (rootModel.getIsGrayedOut()) {
        grayOutItem(rootModel.getGrayedOutReasons(), rootModel, table);
    }
    return item;
}
#method_after
@Override
protected TreeItem createRootNode(LunModel rootModel) {
    final EntityModelCellTable<ListModel<LunModel>> table = new EntityModelCellTable<ListModel<LunModel>>(multiSelection, (Resources) GWT.create(SanStorageListLunRootResources.class));
    // Create table
    initRootNodeTable(table);
    // Set custom selection column
    AbstractLunSelectionColumn lunSelectionColumn = new AbstractLunSelectionColumn(multiSelection) {

        @Override
        public LunModel getValue(LunModel object) {
            return object;
        }
    };
    // $NON-NLS-1$
    table.setCustomSelectionColumn(lunSelectionColumn, "20px");
    // Add items
    List<LunModel> items = new ArrayList<LunModel>();
    items.add(rootModel);
    ListModel<LunModel> listModel = new ListModel<LunModel>();
    listModel.setItems(items);
    // Update table
    table.setRowData(items);
    table.asEditor().edit(listModel);
    // $NON-NLS-1$
    table.setWidth("100%", true);
    rootModel.getPropertyChangedEvent().removeListener(lunModelSelectedItemListener);
    rootModel.getPropertyChangedEvent().addListener(lunModelSelectedItemListener, table);
    if (!multiSelection) {
        table.getSelectionModel().addSelectionChangeHandler(new Handler() {

            @Override
            public void onSelectionChange(SelectionChangeEvent event) {
                SingleSelectionModel SingleSelectionModel = (SingleSelectionModel) event.getSource();
                LunModel selectedLunModel = (LunModel) SingleSelectionModel.getSelectedObject();
                if (selectedLunModel != null) {
                    updateSelectedLunWarning(selectedLunModel);
                }
            }
        });
    } else {
        table.getSelectionModel().setSelected(rootModel, rootModel.getIsSelected());
    }
    // Create tree item
    HorizontalPanel panel = new HorizontalPanel();
    panel.add(table);
    // $NON-NLS-1$
    panel.setWidth("100%");
    panel.getElement().getStyle().setTableLayout(TableLayout.FIXED);
    TreeItem item = new TreeItem(panel);
    // Display LUNs as grayed-out if needed
    if (rootModel.getIsGrayedOut()) {
        grayOutItem(rootModel.getGrayedOutReasons(), rootModel, table);
    }
    return item;
}
#end_block

#method_before
private void initRootNodeTable(EntityModelCellTable<ListModel<LunModel>> table) {
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getLunId();
        }
    }, constants.lunIdSanStorage());
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            // $NON-NLS-1$
            return String.valueOf(model.getSize()) + "GB";
        }
    }, constants.devSizeSanStorage(), // $NON-NLS-1$
    "70px");
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return String.valueOf(model.getMultipathing());
        }
    }, constants.pathSanStorage(), // $NON-NLS-1$
    "55px");
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getVendorId();
        }
    }, constants.vendorIdSanStorage(), // $NON-NLS-1$
    "100px");
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getProductId();
        }
    }, constants.productIdSanStorage(), // $NON-NLS-1$
    "100px");
    table.addColumn(new LunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getSerial();
        }
    }, constants.serialSanStorage(), // $NON-NLS-1$
    "120px");
}
#method_after
private void initRootNodeTable(EntityModelCellTable<ListModel<LunModel>> table) {
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getLunId();
        }
    }, constants.lunIdSanStorage());
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            // $NON-NLS-1$
            return String.valueOf(model.getSize()) + "GB";
        }
    }, constants.devSizeSanStorage(), // $NON-NLS-1$
    "70px");
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return String.valueOf(model.getMultipathing());
        }
    }, constants.pathSanStorage(), // $NON-NLS-1$
    "55px");
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getVendorId();
        }
    }, constants.vendorIdSanStorage(), // $NON-NLS-1$
    "100px");
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getProductId();
        }
    }, constants.productIdSanStorage(), // $NON-NLS-1$
    "100px");
    table.addColumn(new AbstractLunTextColumn() {

        @Override
        public String getRawValue(LunModel model) {
            return model.getSerial();
        }
    }, constants.serialSanStorage(), // $NON-NLS-1$
    "120px");
}
#end_block

#method_before
@Override
public void edit(final AbstractDiskModel disk) {
    driver.edit(disk);
    disk.getIsDirectLunDiskAvaialable().getEntityChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            boolean isDirectLunDiskAvaialable = ((EntityModel<Boolean>) sender).getEntity();
            externalDiskPanel.setVisible(isDirectLunDiskAvaialable);
        }
    });
    disk.getIsVirtioScsiEnabled().getEntityChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            if (disk.getVm() == null) {
                // not relevant for floating disks
                return;
            }
            boolean isVirtioScsiEnabled = Boolean.TRUE.equals(((EntityModel) sender).getEntity());
            Version clusterVersion = disk.getVm().getVdsGroupCompatibilityVersion();
            // Show the info icon if VirtIO-SCSI is supported by the cluster but disabled for the VM
            interfaceInfoIcon.setVisible(clusterVersion.compareTo(Version.v3_3) >= 0 && !isVirtioScsiEnabled);
        }
    });
    diskTypePanel.addRadioButton(constants.internalDisk(), disk.getDisk() == null || disk.getDisk().getDiskStorageType() == DiskStorageType.IMAGE, disk.getIsNew(), new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            disk.getDiskStorageType().setEntity(DiskStorageType.IMAGE);
            revealDiskPanel(disk);
        }
    });
    diskTypePanel.addRadioButton(constants.externalDisk(), disk.getDisk() != null && disk.getDisk().getDiskStorageType() == DiskStorageType.LUN, disk.getIsNew(), new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            disk.getDiskStorageType().setEntity(DiskStorageType.LUN);
            revealStorageView(disk);
            revealDiskPanel(disk);
        }
    });
    if (disk.getStorageModel() == null) {
        storageModel = new StorageModel(new NewEditStorageModelBehavior());
        // Create IscsiStorageModel
        iscsiStorageModel = new IscsiStorageModel();
        iscsiStorageModel.setContainer(storageModel);
        iscsiStorageModel.setIsGrouppedByTarget(true);
        iscsiStorageModel.setIgnoreGrayedOut(true);
        // Create FcpStorageModel
        fcpStorageModel = new FcpStorageModel();
        fcpStorageModel.setContainer(storageModel);
        fcpStorageModel.setIsGrouppedByTarget(false);
        fcpStorageModel.setIgnoreGrayedOut(true);
        // Set 'StorageModel' items
        ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
        items.add(iscsiStorageModel);
        items.add(fcpStorageModel);
        storageModel.setItems(items);
        storageModel.setHost(disk.getHost());
        disk.setStorageModel(storageModel);
    } else {
        storageModel = disk.getStorageModel();
        iscsiStorageModel = byType(storageModel.getItems(), IscsiStorageModel.class);
        iscsiStorageModel.getPropertyChangedEvent().clearListeners();
        fcpStorageModel = byType(storageModel.getItems(), FcpStorageModel.class);
        fcpStorageModel.getPropertyChangedEvent().clearListeners();
    }
    iscsiStorageModel.getPropertyChangedEvent().addListener(progressEventHandler);
    fcpStorageModel.getPropertyChangedEvent().addListener(progressEventHandler);
    iscsiStorageView = new IscsiStorageView(false, 115, 214, 244, 275, 142, 55, -67);
    iscsiStorageView.edit(iscsiStorageModel);
    fcpStorageView = new FcpStorageView(false, 278, 240);
    fcpStorageView.edit(fcpStorageModel);
    // SelectedItemChangedEvent handlers
    disk.getStorageType().getSelectedItemChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            revealStorageView(disk);
        }
    });
    disk.getHost().getSelectedItemChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            revealStorageView(disk);
        }
    });
    revealStorageView(disk);
    revealDiskPanel(disk);
}
#method_after
@Override
public void edit(final AbstractDiskModel disk) {
    driver.edit(disk);
    disk.getIsDirectLunDiskAvaialable().getEntityChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            boolean isDirectLunDiskAvaialable = ((EntityModel<Boolean>) sender).getEntity();
            externalDiskPanel.setVisible(isDirectLunDiskAvaialable);
        }
    });
    disk.getIsVirtioScsiEnabled().getEntityChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            if (disk.getVm() == null) {
                // not relevant for floating disks
                return;
            }
            boolean isVirtioScsiEnabled = Boolean.TRUE.equals(((EntityModel) sender).getEntity());
            Version clusterVersion = disk.getVm().getVdsGroupCompatibilityVersion();
            // Show the info icon if VirtIO-SCSI is supported by the cluster but disabled for the VM
            interfaceInfoIcon.setVisible(clusterVersion.compareTo(Version.v3_3) >= 0 && !isVirtioScsiEnabled);
        }
    });
    disk.getPropertyChangedEvent().addListener(new IEventListener<PropertyChangedEventArgs>() {

        @Override
        public void eventRaised(Event<? extends PropertyChangedEventArgs> ev, Object sender, PropertyChangedEventArgs args) {
            String propName = args.propertyName;
            if ("Message".equals(propName)) {
                // $NON-NLS-1$
                if (!StringHelper.isNullOrEmpty(disk.getMessage())) {
                    disableWidget(getWidget());
                    disk.getDefaultCommand().setIsExecutionAllowed(false);
                }
            }
        }
    });
    diskTypePanel.addRadioButton(constants.internalDisk(), disk.getDisk() == null || disk.getDisk().getDiskStorageType() == DiskStorageType.IMAGE, disk.getIsNew(), new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            disk.getDiskStorageType().setEntity(DiskStorageType.IMAGE);
            revealDiskPanel(disk);
        }
    });
    diskTypePanel.addRadioButton(constants.externalDisk(), disk.getDisk() != null && disk.getDisk().getDiskStorageType() == DiskStorageType.LUN, disk.getIsNew(), new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            disk.getDiskStorageType().setEntity(DiskStorageType.LUN);
            revealStorageView(disk);
            revealDiskPanel(disk);
        }
    });
    if (disk.getStorageModel() == null) {
        storageModel = new StorageModel(new NewEditStorageModelBehavior());
        // Create IscsiStorageModel
        iscsiStorageModel = new IscsiStorageModel();
        iscsiStorageModel.setContainer(storageModel);
        iscsiStorageModel.setIsGrouppedByTarget(true);
        iscsiStorageModel.setIgnoreGrayedOut(true);
        // Create FcpStorageModel
        fcpStorageModel = new FcpStorageModel();
        fcpStorageModel.setContainer(storageModel);
        fcpStorageModel.setIsGrouppedByTarget(false);
        fcpStorageModel.setIgnoreGrayedOut(true);
        // Set 'StorageModel' items
        ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
        items.add(iscsiStorageModel);
        items.add(fcpStorageModel);
        storageModel.setItems(items);
        storageModel.setHost(disk.getHost());
        disk.setStorageModel(storageModel);
    } else {
        storageModel = disk.getStorageModel();
        iscsiStorageModel = Linq.findByType(storageModel.getItems(), IscsiStorageModel.class);
        iscsiStorageModel.getPropertyChangedEvent().clearListeners();
        fcpStorageModel = Linq.findByType(storageModel.getItems(), FcpStorageModel.class);
        fcpStorageModel.getPropertyChangedEvent().clearListeners();
    }
    iscsiStorageView = new IscsiStorageView(false, 115, 214, 244, 275, 142, 55, -67);
    iscsiStorageView.edit(iscsiStorageModel);
    fcpStorageView = new FcpStorageView(false, 278, 240);
    fcpStorageView.edit(fcpStorageModel);
    // SelectedItemChangedEvent handlers
    disk.getStorageType().getSelectedItemChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            revealStorageView(disk);
        }
    });
    disk.getHost().getSelectedItemChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            revealStorageView(disk);
        }
    });
    revealStorageView(disk);
    revealDiskPanel(disk);
}
#end_block

#method_before
private void revealStorageView(final AbstractDiskModel diskModel) {
    if (!diskModel.getIsNew()) {
        return;
    }
    StorageType storageType = diskModel.getStorageType().getSelectedItem();
    // Set view and model by storage type
    if (storageType == StorageType.ISCSI) {
        storageView = iscsiStorageView;
        sanStorageModel = iscsiStorageModel;
    } else if (storageType == StorageType.FCP) {
        storageView = fcpStorageView;
        sanStorageModel = fcpStorageModel;
    }
    storageModel.setSelectedItem(sanStorageModel);
    diskModel.setSanStorageModel(sanStorageModel);
    // Execute 'UpdateCommand' to call 'GetDeviceList'
    sanStorageModel.getUpdateCommand().execute();
}
#method_after
private void revealStorageView(final AbstractDiskModel diskModel) {
    if (!diskModel.getIsNew()) {
        return;
    }
    StorageType storageType = diskModel.getStorageType().getSelectedItem();
    // Set view and model by storage type
    if (storageType == StorageType.ISCSI) {
        storageView = iscsiStorageView;
        sanStorageModel = iscsiStorageModel;
    } else if (storageType == StorageType.FCP) {
        storageView = fcpStorageView;
        sanStorageModel = fcpStorageModel;
    }
    storageModel.setSelectedItem(sanStorageModel);
    diskModel.setSanStorageModel(sanStorageModel);
    // Execute 'UpdateCommand' to call 'GetDeviceList'
    sanStorageModel.getUpdateCommand().execute();
    sanStorageModel.setWidgetModel(diskModel);
    externalDiskPanel.clear();
    externalDiskPanel.add(storageView);
}
#end_block

#method_before
@Override
public int setTabIndexes(int nextTabIndex) {
    sizeEditor.setTabIndex(nextTabIndex++);
    sizeExtendEditor.setTabIndex(nextTabIndex++);
    aliasEditor.setTabIndex(nextTabIndex++);
    descriptionEditor.setTabIndex(nextTabIndex++);
    interfaceEditor.setTabIndex(nextTabIndex++);
    volumeTypeEditor.setTabIndex(nextTabIndex++);
    datacenterEditor.setTabIndex(nextTabIndex++);
    storageDomainEditor.setTabIndex(nextTabIndex++);
    diskProfileEditor.setTabIndex(nextTabIndex++);
    quotaEditor.setTabIndex(nextTabIndex++);
    hostListEditor.setTabIndex(nextTabIndex++);
    storageTypeEditor.setTabIndex(nextTabIndex++);
    plugDiskToVmEditor.setTabIndex(nextTabIndex++);
    wipeAfterDeleteEditor.setTabIndex(nextTabIndex++);
    isBootableEditor.setTabIndex(nextTabIndex++);
    isShareableEditor.setTabIndex(nextTabIndex++);
    isReadOnlyEditor.setTabIndex(nextTabIndex++);
    isScsiPassthroughEditor.setTabIndex(nextTabIndex++);
    isSgIoUnfilteredEditor.setTabIndex(nextTabIndex++);
    return nextTabIndex;
}
#method_after
@Override
public int setTabIndexes(int nextTabIndex) {
    sizeEditor.setTabIndex(nextTabIndex++);
    sizeExtendEditor.setTabIndex(nextTabIndex++);
    aliasEditor.setTabIndex(nextTabIndex++);
    descriptionEditor.setTabIndex(nextTabIndex++);
    interfaceEditor.setTabIndex(nextTabIndex++);
    datacenterEditor.setTabIndex(nextTabIndex++);
    storageDomainEditor.setTabIndex(nextTabIndex++);
    volumeTypeEditor.setTabIndex(nextTabIndex++);
    diskProfileEditor.setTabIndex(nextTabIndex++);
    quotaEditor.setTabIndex(nextTabIndex++);
    hostListEditor.setTabIndex(nextTabIndex++);
    storageTypeEditor.setTabIndex(nextTabIndex++);
    plugDiskToVmEditor.setTabIndex(nextTabIndex++);
    wipeAfterDeleteEditor.setTabIndex(nextTabIndex++);
    isBootableEditor.setTabIndex(nextTabIndex++);
    isShareableEditor.setTabIndex(nextTabIndex++);
    isReadOnlyEditor.setTabIndex(nextTabIndex++);
    isScsiPassthroughEditor.setTabIndex(nextTabIndex++);
    isSgIoUnfilteredEditor.setTabIndex(nextTabIndex++);
    return nextTabIndex;
}
#end_block

#method_before
private void updateSuggestedDiskAlias() {
    AsyncDataProvider.getInstance().getNextAvailableDiskAliasNameByVMId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            String suggestedDiskAlias = (String) returnValue;
            DiskModel diskModel = (DiskModel) model;
            diskModel.getAlias().setEntity(suggestedDiskAlias);
        }
    }, getHash()), getVm().getId());
}
#method_after
private void updateSuggestedDiskAlias() {
    AsyncDataProvider.getInstance().getNextAvailableDiskAliasNameByVMId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            String suggestedDiskAlias = (String) returnValue;
            DiskModel diskModel = (DiskModel) model;
            diskModel.getAlias().setEntity(suggestedDiskAlias);
        }
    }), getVm().getId());
}
#end_block

#method_before
public static Version getMinVersionByClusters(List<VDSGroup> source) {
    Version minVersion = source != null && source.size() > 0 ? source.get(0).getcompatibility_version() : null;
    if (minVersion != null) {
        for (VDSGroup cluster : source) {
            minVersion = cluster.getcompatibility_version().compareTo(minVersion) < 0 ? (Version) cluster.getcompatibility_version() : minVersion;
        }
    }
    return minVersion;
}
#method_after
public static Version getMinVersionByClusters(List<VDSGroup> source) {
    Version minVersion = source != null && source.size() > 0 ? source.get(0).getCompatibilityVersion() : null;
    if (minVersion != null) {
        for (VDSGroup cluster : source) {
            minVersion = cluster.getCompatibilityVersion().compareTo(minVersion) < 0 ? (Version) cluster.getCompatibilityVersion() : minVersion;
        }
    }
    return minVersion;
}
#end_block

#method_before
public static ArrayList<VDS> findAllVDSByPmEnabled(ArrayList<VDS> items) {
    ArrayList<VDS> ret = new ArrayList<VDS>();
    for (VDS i : items) {
        if (i.getpm_enabled()) {
            ret.add(i);
        }
    }
    return ret;
}
#method_after
public static ArrayList<VDS> findAllVDSByPmEnabled(ArrayList<VDS> items) {
    ArrayList<VDS> ret = new ArrayList<VDS>();
    for (VDS i : items) {
        if (i.isPmEnabled()) {
            ret.add(i);
        }
    }
    return ret;
}
#end_block

#method_before
public static ArrayList<StorageDomain> getStorageDomainsByIds(ArrayList<Guid> storageIds, ArrayList<StorageDomain> storageDomains) {
    ArrayList<StorageDomain> list = new ArrayList<StorageDomain>();
    for (Guid storageId : storageIds) {
        StorageDomain storageDomain = getStorageById(storageId, storageDomains);
        if (storageDomain != null) {
            list.add(getStorageById(storageId, storageDomains));
        }
    }
    return list;
}
#method_after
public static ArrayList<StorageDomain> getStorageDomainsByIds(ArrayList<Guid> storageIds, ArrayList<StorageDomain> storageDomains) {
    ArrayList<StorageDomain> list = new ArrayList<StorageDomain>();
    for (Guid storageId : storageIds) {
        StorageDomain storageDomain = getStorageById(storageId, storageDomains);
        if (storageDomain != null) {
            list.add(storageDomain);
        }
    }
    return list;
}
#end_block

#method_before
@Override
public int compare(ProviderType type1, ProviderType type2) {
    final EnumTranslator enumTranslator = EnumTranslator.getInstance();
    return LexoNumericComparator.comp(enumTranslator.get(type1), enumTranslator.get(type2));
}
#method_after
@Override
public int compare(ProviderType type1, ProviderType type2) {
    final EnumTranslator enumTranslator = EnumTranslator.getInstance();
    return LexoNumericComparator.comp(enumTranslator.translate(type1), enumTranslator.translate(type2));
}
#end_block

#method_before
@Override
public int compare(ImportEntityData entity1, ImportEntityData entity2) {
    return lexoNumeric.compare(entity1.getName(), entity2.getName());
}
#method_after
@Override
public int compare(ImportEntityData<T> entity1, ImportEntityData<T> entity2) {
    return lexoNumeric.compare(entity1.getName(), entity2.getName());
}
#end_block

#method_before
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindPresenterWidget(LoginFormPresenterWidget.class, LoginFormPresenterWidget.ViewDef.class, LoginFormView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    bindPresenterWidget(ManagePolicyUnitPopupPresenterWidget.class, ManagePolicyUnitPopupPresenterWidget.ViewDef.class, ManagePolicyUnitPopupView.class);
    bindPresenterWidget(SharedMacPoolPopupPresenterWidget.class, SharedMacPoolPopupPresenterWidget.ViewDef.class, SharedMacPoolPopupView.class);
    bindPresenterWidget(AffinityGroupPopupPresenterWidget.class, AffinityGroupPopupPresenterWidget.ViewDef.class, AffinityGroupPopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabNetworkPresenter.class, MainTabNetworkPresenter.ViewDef.class, MainTabNetworkView.class, MainTabNetworkPresenter.ProxyDef.class);
    bindPresenter(MainTabVnicProfilePresenter.class, MainTabVnicProfilePresenter.ViewDef.class, MainTabVnicProfileView.class, MainTabVnicProfilePresenter.ProxyDef.class);
    bindPresenter(MainTabProviderPresenter.class, MainTabProviderPresenter.ViewDef.class, MainTabProviderView.class, MainTabProviderPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(DataCenterQosSubTabPanelPresenter.class, DataCenterQosSubTabPanelPresenter.ViewDef.class, DataCenterQosSubTabPanelView.class, DataCenterQosSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterIscsiBondPresenter.class, SubTabDataCenterIscsiBondPresenter.ViewDef.class, SubTabDataCenterIscsiBondView.class, SubTabDataCenterIscsiBondPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkQoSPresenter.class, SubTabDataCenterNetworkQoSPresenter.ViewDef.class, SubTabDataCenterNetworkQoSView.class, SubTabDataCenterNetworkQoSPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStorageQosPresenter.class, SubTabDataCenterStorageQosPresenter.ViewDef.class, SubTabDataCenterStorageQosView.class, SubTabDataCenterStorageQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterCpuQosPresenter.class, SubTabDataCenterCpuQosPresenter.ViewDef.class, SubTabDataCenterCpuQosView.class, SubTabDataCenterCpuQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterHostNetworkQosPresenter.class, SubTabDataCenterHostNetworkQosPresenter.ViewDef.class, SubTabDataCenterHostNetworkQosView.class, SubTabDataCenterHostNetworkQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterVmPresenter.class, SubTabStorageRegisterVmPresenter.ViewDef.class, SubTabStorageRegisterVmView.class, SubTabStorageRegisterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterTemplatePresenter.class, SubTabStorageRegisterTemplatePresenter.ViewDef.class, SubTabStorageRegisterTemplateView.class, SubTabStorageRegisterTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskPresenter.class, SubTabStorageDiskPresenter.ViewDef.class, SubTabStorageDiskView.class, SubTabStorageDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageSnapshotPresenter.class, SubTabStorageSnapshotPresenter.ViewDef.class, SubTabStorageSnapshotView.class, SubTabStorageSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskProfilePresenter.class, SubTabStorageDiskProfilePresenter.ViewDef.class, SubTabStorageDiskProfileView.class, SubTabStorageDiskProfilePresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterServicePresenter.class, SubTabClusterServicePresenter.ViewDef.class, SubTabClusterServiceView.class, SubTabClusterServicePresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGlusterHookPresenter.class, SubTabClusterGlusterHookPresenter.ViewDef.class, SubTabClusterGlusterHookView.class, SubTabClusterGlusterHookPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterAffinityGroupPresenter.class, SubTabClusterAffinityGroupPresenter.ViewDef.class, SubTabClusterAffinityGroupView.class, SubTabClusterAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterCpuProfilePresenter.class, SubTabClusterCpuProfilePresenter.ViewDef.class, SubTabClusterCpuProfileView.class, SubTabClusterCpuProfilePresenter.ProxyDef.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostHardwarePresenter.class, SubTabHostHardwarePresenter.ViewDef.class, SubTabHostHardwareView.class, SubTabHostHardwarePresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGlusterSwiftPresenter.class, SubTabHostGlusterSwiftPresenter.ViewDef.class, SubTabHostGlusterSwiftView.class, SubTabHostGlusterSwiftPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    bindPresenter(SubTabHostBrickPresenter.class, SubTabHostBrickPresenter.ViewDef.class, SubTabHostBrickView.class, SubTabHostBrickPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineAffinityGroupPresenter.class, SubTabVirtualMachineAffinityGroupPresenter.ViewDef.class, SubTabVirtualMachineAffinityGroupView.class, SubTabVirtualMachineAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSessionsPresenter.class, SubTabVirtualMachineSessionsPresenter.ViewDef.class, SubTabVirtualMachineSessionsView.class, SubTabVirtualMachineSessionsPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    bindPresenterWidget(PoolEditPopupPresenterWidget.class, PoolEditPopupPresenterWidget.ViewDef.class, PoolEditPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Network
    bindPresenter(NetworkSubTabPanelPresenter.class, NetworkSubTabPanelPresenter.ViewDef.class, NetworkSubTabPanelView.class, NetworkSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkGeneralPresenter.class, SubTabNetworkGeneralPresenter.ViewDef.class, SubTabNetworkGeneralView.class, SubTabNetworkGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkProfilePresenter.class, SubTabNetworkProfilePresenter.ViewDef.class, SubTabNetworkProfileView.class, SubTabNetworkProfilePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkExternalSubnetPresenter.class, SubTabNetworkExternalSubnetPresenter.ViewDef.class, SubTabNetworkExternalSubnetView.class, SubTabNetworkExternalSubnetPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkClusterPresenter.class, SubTabNetworkClusterPresenter.ViewDef.class, SubTabNetworkClusterView.class, SubTabNetworkClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkHostPresenter.class, SubTabNetworkHostPresenter.ViewDef.class, SubTabNetworkHostView.class, SubTabNetworkHostPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkVmPresenter.class, SubTabNetworkVmPresenter.ViewDef.class, SubTabNetworkVmView.class, SubTabNetworkVmPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkTemplatePresenter.class, SubTabNetworkTemplatePresenter.ViewDef.class, SubTabNetworkTemplateView.class, SubTabNetworkTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkPermissionPresenter.class, SubTabNetworkPermissionPresenter.ViewDef.class, SubTabNetworkPermissionView.class, SubTabNetworkPermissionPresenter.ProxyDef.class);
    // Provider
    bindPresenter(ProviderSubTabPanelPresenter.class, ProviderSubTabPanelPresenter.ViewDef.class, ProviderSubTabPanelView.class, ProviderSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderGeneralPresenter.class, SubTabProviderGeneralPresenter.ViewDef.class, SubTabProviderGeneralView.class, SubTabProviderGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderNetworkPresenter.class, SubTabProviderNetworkPresenter.ViewDef.class, SubTabProviderNetworkView.class, SubTabProviderNetworkPresenter.ProxyDef.class);
    // Profile
    bindPresenter(VnicProfileSubTabPanelPresenter.class, VnicProfileSubTabPanelPresenter.ViewDef.class, VnicProfileSubTabPanelView.class, VnicProfileSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfilePermissionPresenter.class, SubTabVnicProfilePermissionPresenter.ViewDef.class, SubTabVnicProfilePermissionView.class, SubTabVnicProfilePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileVmPresenter.class, SubTabVnicProfileVmPresenter.ViewDef.class, SubTabVnicProfileVmView.class, SubTabVnicProfileVmPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileTemplatePresenter.class, SubTabVnicProfileTemplatePresenter.ViewDef.class, SubTabVnicProfileTemplateView.class, SubTabVnicProfileTemplatePresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    bindPresenterWidget(SystemPermissionsRemoveConfirmationPopupPresenterWidget.class, SystemPermissionsRemoveConfirmationPopupPresenterWidget.ViewDef.class, SystemPermissionsRemoveConfirmationPopupView.class);
    bindPresenterWidget(VmNextRunConfigurationPresenterWidget.class, VmNextRunConfigurationPresenterWidget.ViewDef.class, VmNextRunConfigurationPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    bindPresenterWidget(DataCenterForceRemovePopupPresenterWidget.class, DataCenterForceRemovePopupPresenterWidget.ViewDef.class, DataCenterForceRemovePopupView.class);
    // Cluster
    bindPresenterWidget(NewClusterNetworkPopupPresenterWidget.class, NewClusterNetworkPopupPresenterWidget.ViewDef.class, NewClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(DetachGlusterHostsPopupPresenterWidget.class, DetachGlusterHostsPopupPresenterWidget.ViewDef.class, DetachGlusterHostsPopupView.class);
    bindPresenterWidget(GlusterHookContentPopupPresenterWidget.class, GlusterHookContentPopupPresenterWidget.ViewDef.class, GlusterHookContentPopupView.class);
    bindPresenterWidget(GlusterHookResolveConflictsPopupPresenterWidget.class, GlusterHookResolveConflictsPopupPresenterWidget.ViewDef.class, GlusterHookResolveConflictsPopupView.class);
    bindPresenterWidget(VolumeRebalanceStatusPopupPresenterWidget.class, VolumeRebalanceStatusPopupPresenterWidget.ViewDef.class, VolumeRebalanceStatusPopupView.class);
    bindPresenterWidget(GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.class, GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.ViewDef.class, GeoRepActionConfirmPopUpView.class);
    bindPresenterWidget(RemoveBrickStatusPopupPresenterWidget.class, RemoveBrickStatusPopupPresenterWidget.ViewDef.class, RemoveBrickStatusPopupView.class);
    bindPresenterWidget(ManageGlusterSwiftPopupPresenterWidget.class, ManageGlusterSwiftPopupPresenterWidget.ViewDef.class, ManageGlusterSwiftPopupView.class);
    bindPresenterWidget(VolumeProfileStatisticsPopupPresenterWidget.class, VolumeProfileStatisticsPopupPresenterWidget.ViewDef.class, VolumeProfileStatisticsPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(SetupNetworksInterfacePopupPresenterWidget.class, SetupNetworksInterfacePopupPresenterWidget.ViewDef.class, SetupNetworksInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(SetupNetworksManagementPopupPresenterWidget.class, SetupNetworksManagementPopupPresenterWidget.ViewDef.class, SetupNetworksManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(SetupNetworksBondPopupPresenterWidget.class, SetupNetworksBondPopupPresenterWidget.ViewDef.class, SetupNetworksBondPopupView.class);
    bindPresenterWidget(HostNicPopupPresenterWidget.class, HostNicPopupPresenterWidget.ViewDef.class, HostNicPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    bindPresenterWidget(HostManagementConfirmationPopupPresenterWidget.class, HostManagementConfirmationPopupPresenterWidget.ViewDef.class, HostManagementConfirmationPopupView.class);
    bindPresenterWidget(MultipleHostsPopupPresenterWidget.class, MultipleHostsPopupPresenterWidget.ViewDef.class, MultipleHostsPopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmFromExportDomainPopupPresenterWidget.class, ImportVmFromExportDomainPopupPresenterWidget.ViewDef.class, ImportVmFromExportDomainPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(RegisterVmPopupPresenterWidget.class, RegisterVmPopupPresenterWidget.ViewDef.class, RegisterVmPopupView.class);
    bindPresenterWidget(RegisterTemplatePopupPresenterWidget.class, RegisterTemplatePopupPresenterWidget.ViewDef.class, RegisterTemplatePopupView.class);
    bindPresenterWidget(ImportCloneDialogPresenterWidget.class, ImportCloneDialogPresenterWidget.ViewDef.class, ImportCloneDialogPopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    bindPresenterWidget(ChangeQuotaPopupPresenterWidget.class, ChangeQuotaPopupPresenterWidget.ViewDef.class, ChangeQuotaPopupView.class);
    bindPresenterWidget(ImportExportImagePopupPresenterWidget.class, ImportExportImagePopupPresenterWidget.ViewDef.class, ImportExportImagePopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(StorageForceCreatePopupPresenterWidget.class, StorageForceCreatePopupPresenterWidget.ViewDef.class, StorageForceCreatePopupView.class);
    bindPresenterWidget(VmPopupPresenterWidget.class, VmPopupPresenterWidget.ViewDef.class, VmPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Snapshot Preview
    bindPresenterWidget(VmSnapshotPreviewPopupPresenterWidget.class, VmSnapshotPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotPreviewPopupView.class);
    bindPresenterWidget(VmSnapshotCustomPreviewPopupPresenterWidget.class, VmSnapshotCustomPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotCustomPreviewPopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // Clone VM
    bindPresenterWidget(CloneVmPopupPresenterWidget.class, CloneVmPopupPresenterWidget.ViewDef.class, CloneVmPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM Remove
    bindPresenterWidget(VmRemovePopupPresenterWidget.class, VmRemovePopupPresenterWidget.ViewDef.class, VmRemovePopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Attach Disk
    bindPresenterWidget(VmDiskAttachPopupPresenterWidget.class, VmDiskAttachPopupPresenterWidget.ViewDef.class, VmDiskAttachPopupView.class);
    bindPresenterWidget(SingleSelectionVmDiskAttachPopupPresenterWidget.class, SingleSelectionVmDiskAttachPopupPresenterWidget.ViewDef.class, SingleSelectionVmDiskAttachPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateEditPresenterWidget.class, TemplateEditPresenterWidget.ViewDef.class, TemplateEditPopupView.class);
    // Instance Types
    bindPresenterWidget(InstanceTypesPopupPresenterWidget.class, InstanceTypesPopupPresenterWidget.ViewDef.class, InstanceTypesPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    // Network QoS
    bindPresenterWidget(NetworkQoSPopupPresenterWidget.class, NetworkQoSPopupPresenterWidget.ViewDef.class, NetworkQoSPopupView.class);
    // Storage QoS
    bindPresenterWidget(StorageQosPopupPresenterWidget.class, StorageQosPopupPresenterWidget.ViewDef.class, StorageQosPopupView.class);
    // Cpu QoS
    bindPresenterWidget(CpuQosPopupPresenterWidget.class, CpuQosPopupPresenterWidget.ViewDef.class, CpuQosPopupView.class);
    // Host Network QoS
    bindPresenterWidget(HostNetworkQosPopupPresenterWidget.class, HostNetworkQosPopupPresenterWidget.ViewDef.class, HostNetworkQosPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    bindPresenterWidget(ImportVmsPopupPresenterWidget.class, ImportVmsPopupPresenterWidget.ViewDef.class, ImportVmsPopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeoRepPresenter.class, SubTabVolumeGeoRepPresenter.ViewDef.class, SubTabVolumeGeoRepView.class, SubTabVolumeGeoRepPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(RemoveBrickPopupPresenterWidget.class, RemoveBrickPopupPresenterWidget.ViewDef.class, RemoveBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(BrickAdvancedDetailsPopupPresenterWidget.class, BrickAdvancedDetailsPopupPresenterWidget.ViewDef.class, BrickAdvancedDetailsPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
    // Network
    bindPresenterWidget(NewNetworkPopupPresenterWidget.class, NewNetworkPopupPresenterWidget.ViewDef.class, NewNetworkPopupView.class);
    bindPresenterWidget(EditNetworkPopupPresenterWidget.class, EditNetworkPopupPresenterWidget.ViewDef.class, EditNetworkPopupView.class);
    // Event
    bindPresenterWidget(EventPopupPresenterWidget.class, EventPopupPresenterWidget.ViewDef.class, EventPopupView.class);
    // Provider
    bindPresenterWidget(ProviderPopupPresenterWidget.class, ProviderPopupPresenterWidget.ViewDef.class, ProviderPopupView.class);
    bindPresenterWidget(ImportNetworksPopupPresenterWidget.class, ImportNetworksPopupPresenterWidget.ViewDef.class, ImportNetworksPopupView.class);
    // Profile
    bindPresenterWidget(VnicProfilePopupPresenterWidget.class, VnicProfilePopupPresenterWidget.ViewDef.class, VnicProfilePopupView.class);
    bindPresenterWidget(DiskProfilePopupPresenterWidget.class, DiskProfilePopupPresenterWidget.ViewDef.class, DiskProfilePopupView.class);
    bindPresenterWidget(CpuProfilePopupPresenterWidget.class, CpuProfilePopupPresenterWidget.ViewDef.class, CpuProfilePopupView.class);
    // External Subnet
    bindPresenterWidget(ExternalSubnetPopupPresenterWidget.class, ExternalSubnetPopupPresenterWidget.ViewDef.class, ExternalSubnetPopupView.class);
    // ISCSI Bond
    bindPresenterWidget(IscsiBondPopupPresenterWidget.class, IscsiBondPopupPresenterWidget.ViewDef.class, IscsiBondPopupView.class);
}
#method_after
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindPresenterWidget(LoginFormPresenterWidget.class, LoginFormPresenterWidget.ViewDef.class, LoginFormView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    bindPresenterWidget(ManagePolicyUnitPopupPresenterWidget.class, ManagePolicyUnitPopupPresenterWidget.ViewDef.class, ManagePolicyUnitPopupView.class);
    bindPresenterWidget(SharedMacPoolPopupPresenterWidget.class, SharedMacPoolPopupPresenterWidget.ViewDef.class, SharedMacPoolPopupView.class);
    bindPresenterWidget(AffinityGroupPopupPresenterWidget.class, AffinityGroupPopupPresenterWidget.ViewDef.class, AffinityGroupPopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabNetworkPresenter.class, MainTabNetworkPresenter.ViewDef.class, MainTabNetworkView.class, MainTabNetworkPresenter.ProxyDef.class);
    bindPresenter(MainTabVnicProfilePresenter.class, MainTabVnicProfilePresenter.ViewDef.class, MainTabVnicProfileView.class, MainTabVnicProfilePresenter.ProxyDef.class);
    bindPresenter(MainTabProviderPresenter.class, MainTabProviderPresenter.ViewDef.class, MainTabProviderView.class, MainTabProviderPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(DataCenterQosSubTabPanelPresenter.class, DataCenterQosSubTabPanelPresenter.ViewDef.class, DataCenterQosSubTabPanelView.class, DataCenterQosSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterIscsiBondPresenter.class, SubTabDataCenterIscsiBondPresenter.ViewDef.class, SubTabDataCenterIscsiBondView.class, SubTabDataCenterIscsiBondPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkQoSPresenter.class, SubTabDataCenterNetworkQoSPresenter.ViewDef.class, SubTabDataCenterNetworkQoSView.class, SubTabDataCenterNetworkQoSPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStorageQosPresenter.class, SubTabDataCenterStorageQosPresenter.ViewDef.class, SubTabDataCenterStorageQosView.class, SubTabDataCenterStorageQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterCpuQosPresenter.class, SubTabDataCenterCpuQosPresenter.ViewDef.class, SubTabDataCenterCpuQosView.class, SubTabDataCenterCpuQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterHostNetworkQosPresenter.class, SubTabDataCenterHostNetworkQosPresenter.ViewDef.class, SubTabDataCenterHostNetworkQosView.class, SubTabDataCenterHostNetworkQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterVmPresenter.class, SubTabStorageRegisterVmPresenter.ViewDef.class, SubTabStorageRegisterVmView.class, SubTabStorageRegisterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterTemplatePresenter.class, SubTabStorageRegisterTemplatePresenter.ViewDef.class, SubTabStorageRegisterTemplateView.class, SubTabStorageRegisterTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskPresenter.class, SubTabStorageDiskPresenter.ViewDef.class, SubTabStorageDiskView.class, SubTabStorageDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageSnapshotPresenter.class, SubTabStorageSnapshotPresenter.ViewDef.class, SubTabStorageSnapshotView.class, SubTabStorageSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskProfilePresenter.class, SubTabStorageDiskProfilePresenter.ViewDef.class, SubTabStorageDiskProfileView.class, SubTabStorageDiskProfilePresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterServicePresenter.class, SubTabClusterServicePresenter.ViewDef.class, SubTabClusterServiceView.class, SubTabClusterServicePresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGlusterHookPresenter.class, SubTabClusterGlusterHookPresenter.ViewDef.class, SubTabClusterGlusterHookView.class, SubTabClusterGlusterHookPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterAffinityGroupPresenter.class, SubTabClusterAffinityGroupPresenter.ViewDef.class, SubTabClusterAffinityGroupView.class, SubTabClusterAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterCpuProfilePresenter.class, SubTabClusterCpuProfilePresenter.ViewDef.class, SubTabClusterCpuProfileView.class, SubTabClusterCpuProfilePresenter.ProxyDef.class);
    bindPresenterWidget(GlusterVolumeSnapshotConfigureOptionsPopupPresenterWidget.class, GlusterVolumeSnapshotConfigureOptionsPopupPresenterWidget.ViewDef.class, GlusterVolumeSnapshotConfigureOptionsPopupView.class);
    bindPresenterWidget(GlusterClusterSnapshotConfigureOptionsPopupPresenterWidget.class, GlusterClusterSnapshotConfigureOptionsPopupPresenterWidget.ViewDef.class, GlusterClusterSnapshotConfigureOptionsPopupView.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostHardwarePresenter.class, SubTabHostHardwarePresenter.ViewDef.class, SubTabHostHardwareView.class, SubTabHostHardwarePresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGlusterSwiftPresenter.class, SubTabHostGlusterSwiftPresenter.ViewDef.class, SubTabHostGlusterSwiftView.class, SubTabHostGlusterSwiftPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    bindPresenter(SubTabHostBrickPresenter.class, SubTabHostBrickPresenter.ViewDef.class, SubTabHostBrickView.class, SubTabHostBrickPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineAffinityGroupPresenter.class, SubTabVirtualMachineAffinityGroupPresenter.ViewDef.class, SubTabVirtualMachineAffinityGroupView.class, SubTabVirtualMachineAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSessionsPresenter.class, SubTabVirtualMachineSessionsPresenter.ViewDef.class, SubTabVirtualMachineSessionsView.class, SubTabVirtualMachineSessionsPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    bindPresenterWidget(PoolEditPopupPresenterWidget.class, PoolEditPopupPresenterWidget.ViewDef.class, PoolEditPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Network
    bindPresenter(NetworkSubTabPanelPresenter.class, NetworkSubTabPanelPresenter.ViewDef.class, NetworkSubTabPanelView.class, NetworkSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkGeneralPresenter.class, SubTabNetworkGeneralPresenter.ViewDef.class, SubTabNetworkGeneralView.class, SubTabNetworkGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkProfilePresenter.class, SubTabNetworkProfilePresenter.ViewDef.class, SubTabNetworkProfileView.class, SubTabNetworkProfilePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkExternalSubnetPresenter.class, SubTabNetworkExternalSubnetPresenter.ViewDef.class, SubTabNetworkExternalSubnetView.class, SubTabNetworkExternalSubnetPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkClusterPresenter.class, SubTabNetworkClusterPresenter.ViewDef.class, SubTabNetworkClusterView.class, SubTabNetworkClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkHostPresenter.class, SubTabNetworkHostPresenter.ViewDef.class, SubTabNetworkHostView.class, SubTabNetworkHostPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkVmPresenter.class, SubTabNetworkVmPresenter.ViewDef.class, SubTabNetworkVmView.class, SubTabNetworkVmPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkTemplatePresenter.class, SubTabNetworkTemplatePresenter.ViewDef.class, SubTabNetworkTemplateView.class, SubTabNetworkTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkPermissionPresenter.class, SubTabNetworkPermissionPresenter.ViewDef.class, SubTabNetworkPermissionView.class, SubTabNetworkPermissionPresenter.ProxyDef.class);
    // Provider
    bindPresenter(ProviderSubTabPanelPresenter.class, ProviderSubTabPanelPresenter.ViewDef.class, ProviderSubTabPanelView.class, ProviderSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderGeneralPresenter.class, SubTabProviderGeneralPresenter.ViewDef.class, SubTabProviderGeneralView.class, SubTabProviderGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderNetworkPresenter.class, SubTabProviderNetworkPresenter.ViewDef.class, SubTabProviderNetworkView.class, SubTabProviderNetworkPresenter.ProxyDef.class);
    // Profile
    bindPresenter(VnicProfileSubTabPanelPresenter.class, VnicProfileSubTabPanelPresenter.ViewDef.class, VnicProfileSubTabPanelView.class, VnicProfileSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfilePermissionPresenter.class, SubTabVnicProfilePermissionPresenter.ViewDef.class, SubTabVnicProfilePermissionView.class, SubTabVnicProfilePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileVmPresenter.class, SubTabVnicProfileVmPresenter.ViewDef.class, SubTabVnicProfileVmView.class, SubTabVnicProfileVmPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileTemplatePresenter.class, SubTabVnicProfileTemplatePresenter.ViewDef.class, SubTabVnicProfileTemplateView.class, SubTabVnicProfileTemplatePresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    bindPresenterWidget(SystemPermissionsRemoveConfirmationPopupPresenterWidget.class, SystemPermissionsRemoveConfirmationPopupPresenterWidget.ViewDef.class, SystemPermissionsRemoveConfirmationPopupView.class);
    bindPresenterWidget(VmNextRunConfigurationPresenterWidget.class, VmNextRunConfigurationPresenterWidget.ViewDef.class, VmNextRunConfigurationPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    bindPresenterWidget(DataCenterForceRemovePopupPresenterWidget.class, DataCenterForceRemovePopupPresenterWidget.ViewDef.class, DataCenterForceRemovePopupView.class);
    // Cluster
    bindPresenterWidget(NewClusterNetworkPopupPresenterWidget.class, NewClusterNetworkPopupPresenterWidget.ViewDef.class, NewClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(DetachGlusterHostsPopupPresenterWidget.class, DetachGlusterHostsPopupPresenterWidget.ViewDef.class, DetachGlusterHostsPopupView.class);
    bindPresenterWidget(GlusterHookContentPopupPresenterWidget.class, GlusterHookContentPopupPresenterWidget.ViewDef.class, GlusterHookContentPopupView.class);
    bindPresenterWidget(GlusterHookResolveConflictsPopupPresenterWidget.class, GlusterHookResolveConflictsPopupPresenterWidget.ViewDef.class, GlusterHookResolveConflictsPopupView.class);
    bindPresenterWidget(VolumeRebalanceStatusPopupPresenterWidget.class, VolumeRebalanceStatusPopupPresenterWidget.ViewDef.class, VolumeRebalanceStatusPopupView.class);
    bindPresenterWidget(GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.class, GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.ViewDef.class, GeoRepActionConfirmPopUpView.class);
    bindPresenterWidget(RemoveBrickStatusPopupPresenterWidget.class, RemoveBrickStatusPopupPresenterWidget.ViewDef.class, RemoveBrickStatusPopupView.class);
    bindPresenterWidget(ManageGlusterSwiftPopupPresenterWidget.class, ManageGlusterSwiftPopupPresenterWidget.ViewDef.class, ManageGlusterSwiftPopupView.class);
    bindPresenterWidget(VolumeProfileStatisticsPopupPresenterWidget.class, VolumeProfileStatisticsPopupPresenterWidget.ViewDef.class, VolumeProfileStatisticsPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(SetupNetworksInterfacePopupPresenterWidget.class, SetupNetworksInterfacePopupPresenterWidget.ViewDef.class, SetupNetworksInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(SetupNetworksManagementPopupPresenterWidget.class, SetupNetworksManagementPopupPresenterWidget.ViewDef.class, SetupNetworksManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(SetupNetworksBondPopupPresenterWidget.class, SetupNetworksBondPopupPresenterWidget.ViewDef.class, SetupNetworksBondPopupView.class);
    bindPresenterWidget(HostNicPopupPresenterWidget.class, HostNicPopupPresenterWidget.ViewDef.class, HostNicPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    bindPresenterWidget(HostManagementConfirmationPopupPresenterWidget.class, HostManagementConfirmationPopupPresenterWidget.ViewDef.class, HostManagementConfirmationPopupView.class);
    bindPresenterWidget(MultipleHostsPopupPresenterWidget.class, MultipleHostsPopupPresenterWidget.ViewDef.class, MultipleHostsPopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmFromExportDomainPopupPresenterWidget.class, ImportVmFromExportDomainPopupPresenterWidget.ViewDef.class, ImportVmFromExportDomainPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(RegisterVmPopupPresenterWidget.class, RegisterVmPopupPresenterWidget.ViewDef.class, RegisterVmPopupView.class);
    bindPresenterWidget(RegisterTemplatePopupPresenterWidget.class, RegisterTemplatePopupPresenterWidget.ViewDef.class, RegisterTemplatePopupView.class);
    bindPresenterWidget(ImportCloneDialogPresenterWidget.class, ImportCloneDialogPresenterWidget.ViewDef.class, ImportCloneDialogPopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    bindPresenterWidget(ChangeQuotaPopupPresenterWidget.class, ChangeQuotaPopupPresenterWidget.ViewDef.class, ChangeQuotaPopupView.class);
    bindPresenterWidget(ImportExportImagePopupPresenterWidget.class, ImportExportImagePopupPresenterWidget.ViewDef.class, ImportExportImagePopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(StorageForceCreatePopupPresenterWidget.class, StorageForceCreatePopupPresenterWidget.ViewDef.class, StorageForceCreatePopupView.class);
    bindPresenterWidget(VmPopupPresenterWidget.class, VmPopupPresenterWidget.ViewDef.class, VmPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Snapshot Preview
    bindPresenterWidget(VmSnapshotPreviewPopupPresenterWidget.class, VmSnapshotPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotPreviewPopupView.class);
    bindPresenterWidget(VmSnapshotCustomPreviewPopupPresenterWidget.class, VmSnapshotCustomPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotCustomPreviewPopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // Clone VM
    bindPresenterWidget(CloneVmPopupPresenterWidget.class, CloneVmPopupPresenterWidget.ViewDef.class, CloneVmPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM Remove
    bindPresenterWidget(VmRemovePopupPresenterWidget.class, VmRemovePopupPresenterWidget.ViewDef.class, VmRemovePopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Attach Disk
    bindPresenterWidget(VmDiskAttachPopupPresenterWidget.class, VmDiskAttachPopupPresenterWidget.ViewDef.class, VmDiskAttachPopupView.class);
    bindPresenterWidget(SingleSelectionVmDiskAttachPopupPresenterWidget.class, SingleSelectionVmDiskAttachPopupPresenterWidget.ViewDef.class, SingleSelectionVmDiskAttachPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateEditPresenterWidget.class, TemplateEditPresenterWidget.ViewDef.class, TemplateEditPopupView.class);
    // Instance Types
    bindPresenterWidget(InstanceTypesPopupPresenterWidget.class, InstanceTypesPopupPresenterWidget.ViewDef.class, InstanceTypesPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    // Network QoS
    bindPresenterWidget(NetworkQoSPopupPresenterWidget.class, NetworkQoSPopupPresenterWidget.ViewDef.class, NetworkQoSPopupView.class);
    // Storage QoS
    bindPresenterWidget(StorageQosPopupPresenterWidget.class, StorageQosPopupPresenterWidget.ViewDef.class, StorageQosPopupView.class);
    // Cpu QoS
    bindPresenterWidget(CpuQosPopupPresenterWidget.class, CpuQosPopupPresenterWidget.ViewDef.class, CpuQosPopupView.class);
    // Host Network QoS
    bindPresenterWidget(HostNetworkQosPopupPresenterWidget.class, HostNetworkQosPopupPresenterWidget.ViewDef.class, HostNetworkQosPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    bindPresenterWidget(ImportVmsPopupPresenterWidget.class, ImportVmsPopupPresenterWidget.ViewDef.class, ImportVmsPopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeoRepPresenter.class, SubTabVolumeGeoRepPresenter.ViewDef.class, SubTabVolumeGeoRepView.class, SubTabVolumeGeoRepPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenter(SubTabGlusterVolumeSnapshotPresenter.class, SubTabGlusterVolumeSnapshotPresenter.ViewDef.class, SubTabGlusterVolumeSnapshotView.class, SubTabGlusterVolumeSnapshotPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(RemoveBrickPopupPresenterWidget.class, RemoveBrickPopupPresenterWidget.ViewDef.class, RemoveBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(BrickAdvancedDetailsPopupPresenterWidget.class, BrickAdvancedDetailsPopupPresenterWidget.ViewDef.class, BrickAdvancedDetailsPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
    // Network
    bindPresenterWidget(NewNetworkPopupPresenterWidget.class, NewNetworkPopupPresenterWidget.ViewDef.class, NewNetworkPopupView.class);
    bindPresenterWidget(EditNetworkPopupPresenterWidget.class, EditNetworkPopupPresenterWidget.ViewDef.class, EditNetworkPopupView.class);
    // Event
    bindPresenterWidget(EventPopupPresenterWidget.class, EventPopupPresenterWidget.ViewDef.class, EventPopupView.class);
    // Provider
    bindPresenterWidget(ProviderPopupPresenterWidget.class, ProviderPopupPresenterWidget.ViewDef.class, ProviderPopupView.class);
    bindPresenterWidget(ImportNetworksPopupPresenterWidget.class, ImportNetworksPopupPresenterWidget.ViewDef.class, ImportNetworksPopupView.class);
    // Profile
    bindPresenterWidget(VnicProfilePopupPresenterWidget.class, VnicProfilePopupPresenterWidget.ViewDef.class, VnicProfilePopupView.class);
    bindPresenterWidget(DiskProfilePopupPresenterWidget.class, DiskProfilePopupPresenterWidget.ViewDef.class, DiskProfilePopupView.class);
    bindPresenterWidget(CpuProfilePopupPresenterWidget.class, CpuProfilePopupPresenterWidget.ViewDef.class, CpuProfilePopupView.class);
    // External Subnet
    bindPresenterWidget(ExternalSubnetPopupPresenterWidget.class, ExternalSubnetPopupPresenterWidget.ViewDef.class, ExternalSubnetPopupView.class);
    // ISCSI Bond
    bindPresenterWidget(IscsiBondPopupPresenterWidget.class, IscsiBondPopupPresenterWidget.ViewDef.class, IscsiBondPopupView.class);
}
#end_block

#method_before
public Boolean getCanCreateBrick() {
    return canCreateBrick;
}
#method_after
public boolean getCanCreateBrick() {
    return canCreateBrick;
}
#end_block

#method_before
public Long getSize() {
    return size;
}
#method_after
public long getSize() {
    return size;
}
#end_block

#method_before
public void setCanCreateBrick(Boolean canCreateBrick) {
    this.canCreateBrick = canCreateBrick;
}
#method_after
public void setCanCreateBrick(boolean canCreateBrick) {
    this.canCreateBrick = canCreateBrick;
}
#end_block

#method_before
public void setSize(Long size) {
    this.size = size;
}
#method_after
public void setSize(long size) {
    this.size = size;
}
#end_block

#method_before
@Override
public Guid getId() {
    return this.id;
}
#method_after
@Override
public Guid getId() {
    return id;
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((canCreateBrick == null) ? 0 : canCreateBrick.hashCode());
    result = prime * result + ((description == null) ? 0 : description.hashCode());
    result = prime * result + ((devPath == null) ? 0 : devPath.hashCode());
    result = prime * result + ((devType == null) ? 0 : devType.hashCode());
    result = prime * result + ((devUuid == null) ? 0 : devUuid.hashCode());
    result = prime * result + ((fsType == null) ? 0 : fsType.hashCode());
    result = prime * result + ((fsUuid == null) ? 0 : fsUuid.hashCode());
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((mountPoint == null) ? 0 : mountPoint.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((size == null) ? 0 : size.hashCode());
    result = prime * result + ((vdsId == null) ? 0 : vdsId.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + (canCreateBrick ? 0 : 1);
    result = prime * result + ((description == null) ? 0 : description.hashCode());
    result = prime * result + ((devPath == null) ? 0 : devPath.hashCode());
    result = prime * result + ((devType == null) ? 0 : devType.hashCode());
    result = prime * result + ((devUuid == null) ? 0 : devUuid.hashCode());
    result = prime * result + ((fsType == null) ? 0 : fsType.hashCode());
    result = prime * result + ((fsUuid == null) ? 0 : fsUuid.hashCode());
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((mountPoint == null) ? 0 : mountPoint.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + (int) (size ^ (size >>> 32));
    result = prime * result + ((vdsId == null) ? 0 : vdsId.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    StorageDevice other = (StorageDevice) obj;
    if (canCreateBrick == null) {
        if (other.canCreateBrick != null)
            return false;
    } else if (!canCreateBrick.equals(other.canCreateBrick))
        return false;
    if (description == null) {
        if (other.description != null)
            return false;
    } else if (!description.equals(other.description))
        return false;
    if (devPath == null) {
        if (other.devPath != null)
            return false;
    } else if (!devPath.equals(other.devPath))
        return false;
    if (devType == null) {
        if (other.devType != null)
            return false;
    } else if (!devType.equals(other.devType))
        return false;
    if (devUuid == null) {
        if (other.devUuid != null)
            return false;
    } else if (!devUuid.equals(other.devUuid))
        return false;
    if (fsType == null) {
        if (other.fsType != null)
            return false;
    } else if (!fsType.equals(other.fsType))
        return false;
    if (fsUuid == null) {
        if (other.fsUuid != null)
            return false;
    } else if (!fsUuid.equals(other.fsUuid))
        return false;
    if (id == null) {
        if (other.id != null)
            return false;
    } else if (!id.equals(other.id))
        return false;
    if (mountPoint == null) {
        if (other.mountPoint != null)
            return false;
    } else if (!mountPoint.equals(other.mountPoint))
        return false;
    if (name == null) {
        if (other.name != null)
            return false;
    } else if (!name.equals(other.name))
        return false;
    if (size == null) {
        if (other.size != null)
            return false;
    } else if (!size.equals(other.size))
        return false;
    if (vdsId == null) {
        if (other.vdsId != null)
            return false;
    } else if (!vdsId.equals(other.vdsId))
        return false;
    return true;
}
#method_after
@Override
public boolean equals(Object obj) {
    if ((obj != null) && (obj instanceof StorageDevice)) {
        StorageDevice storageDevice = (StorageDevice) obj;
        if (ObjectUtils.objectsEqual(getId(), storageDevice.getId()) && canCreateBrick == storageDevice.canCreateBrick && (ObjectUtils.objectsEqual(getDescription(), storageDevice.getDescription())) && (ObjectUtils.objectsEqual(getDevPath(), storageDevice.getDevPath())) && (ObjectUtils.objectsEqual(getDevType(), storageDevice.getDevType())) && (ObjectUtils.objectsEqual(getDevUuid(), storageDevice.getDevUuid())) && (ObjectUtils.objectsEqual(getFsType(), storageDevice.getFsType())) && (ObjectUtils.objectsEqual(getFsUuid(), storageDevice.getFsUuid())) && (ObjectUtils.objectsEqual(getMountPoint(), storageDevice.getMountPoint())) && (ObjectUtils.objectsEqual(getName(), storageDevice.getName())) && size == storageDevice.size && (ObjectUtils.objectsEqual(getVdsId(), storageDevice.getVdsId()))) {
            return true;
        }
    }
    return false;
}
#end_block

#method_before
public static DbFacade getInstance() {
    return DbFacadeLocator.getDbFacade();
}
#method_after
public static DbFacade getInstance() {
    return instance;
}
#end_block

#method_before
private void setDetailList(final StorageEventListModel storageEventListModel, final PermissionListModel<StorageListModel> permissionListModel) {
    generalModel.setIsAvailable(false);
    dcListModel.setIsAvailable(false);
    this.vmBackupModel.setIsAvailable(false);
    this.templateBackupModel.setIsAvailable(false);
    vmRegisterListModel.setIsAvailable(false);
    templateRegisterListModel.setIsAvailable(false);
    vmListModel.setIsAvailable(false);
    templateListModel.setIsAvailable(false);
    isoListModel.setIsAvailable(false);
    diskListModel.setIsAvailable(false);
    snapshotListModel.setIsAvailable(false);
    this.diskProfileListModel.setIsAvailable(false);
    List<EntityModel> list = new ArrayList<EntityModel>();
    list.add(generalModel);
    list.add(dcListModel);
    list.add(vmBackupModel);
    list.add(templateBackupModel);
    list.add(vmRegisterListModel);
    list.add(templateRegisterListModel);
    list.add(vmListModel);
    list.add(templateListModel);
    list.add(isoListModel);
    list.add(diskListModel);
    list.add(snapshotListModel);
    list.add(this.diskProfileListModel);
    list.add(storageEventListModel);
    list.add(permissionListModel);
    setDetailModels(list);
}
#method_after
private void setDetailList(final StorageEventListModel storageEventListModel, final PermissionListModel<StorageDomain> permissionListModel) {
    generalModel.setIsAvailable(false);
    dcListModel.setIsAvailable(false);
    this.vmBackupModel.setIsAvailable(false);
    this.templateBackupModel.setIsAvailable(false);
    vmRegisterListModel.setIsAvailable(false);
    templateRegisterListModel.setIsAvailable(false);
    vmListModel.setIsAvailable(false);
    templateListModel.setIsAvailable(false);
    isoListModel.setIsAvailable(false);
    diskListModel.setIsAvailable(false);
    snapshotListModel.setIsAvailable(false);
    this.diskProfileListModel.setIsAvailable(false);
    List<HasEntity<StorageDomain>> list = new ArrayList<>();
    list.add(generalModel);
    list.add(dcListModel);
    list.add(vmBackupModel);
    list.add(templateBackupModel);
    list.add(vmRegisterListModel);
    list.add(templateRegisterListModel);
    list.add(vmListModel);
    list.add(templateListModel);
    list.add(isoListModel);
    list.add(diskListModel);
    list.add(snapshotListModel);
    list.add(this.diskProfileListModel);
    list.add(storageEventListModel);
    list.add(permissionListModel);
    setDetailModels(list);
}
#end_block

#method_before
private void newDomain() {
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newDomainTitle());
    model.setHelpTag(HelpTag.new_domain);
    // $NON-NLS-1$
    model.setHashName("new_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    // putting all Data domains at the beginning on purpose (so when choosing the
    // first selectable storage type/function, it will be a Data one, if relevant).
    items = AsyncDataProvider.getInstance().getDataStorageModels();
    items.addAll(AsyncDataProvider.getInstance().getIsoStorageModels());
    items.addAll(AsyncDataProvider.getInstance().getExportStorageModels());
    model.setItems(items);
    model.initialize();
    // $NON-NLS-1$
    UICommand command = UICommand.createDefaultOkUiCommand("OnSave", this);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = createCancelCommand("Cancel");
    model.getCommands().add(command);
}
#method_after
private void newDomain() {
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newDomainTitle());
    model.setHelpTag(HelpTag.new_domain);
    // $NON-NLS-1$
    model.setHashName("new_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    // putting all Data domains at the beginning on purpose (so when choosing the
    // first selectable storage type/function, it will be a Data one, if relevant).
    List<IStorageModel> items = AsyncDataProvider.getInstance().getDataStorageModels();
    items.addAll(AsyncDataProvider.getInstance().getIsoStorageModels());
    items.addAll(AsyncDataProvider.getInstance().getExportStorageModels());
    model.setItems(items);
    model.initialize();
    // $NON-NLS-1$
    UICommand command = UICommand.createDefaultOkUiCommand("OnSave", this);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = createCancelCommand("Cancel");
    model.getCommands().add(command);
}
#end_block

#method_before
private void edit() {
    StorageDomain storage = (StorageDomain) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    final UIConstants constants = ConstantsManager.getInstance().getConstants();
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editDomainTitle());
    model.setHelpTag(HelpTag.edit_domain);
    // $NON-NLS-1$
    model.setHashName("edit_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.setStorage(storage);
    model.getName().setEntity(storage.getStorageName());
    model.getDescription().setEntity(storage.getDescription());
    model.getComment().setEntity(storage.getComment());
    model.setOriginalName(storage.getStorageName());
    model.getDataCenter().setIsChangable(false);
    model.getFormat().setIsChangable(false);
    boolean isStorageNameEditable = model.isStorageActive() || model.isNewStorage();
    boolean isStoragePropertiesEditable = model.isStorageNotLocked() || model.isNewStorage();
    model.getHost().setIsChangable(false);
    model.getName().setIsChangable(isStorageNameEditable);
    model.getDescription().setIsChangable(isStoragePropertiesEditable);
    model.getComment().setIsChangable(isStoragePropertiesEditable);
    model.getWipeAfterDelete().setIsChangable(isStoragePropertiesEditable);
    // set the field domain type to non editable
    model.getAvailableStorageItems().setIsChangable(false);
    model.setIsChangable(isStorageNameEditable || isStoragePropertiesEditable);
    boolean isPathEditable = isPathEditable(storage);
    isStorageNameEditable = isStorageNameEditable || isPathEditable;
    IStorageModel item = prepareStorageForEdit(storage, model);
    model.setItems(new ArrayList<IStorageModel>(Arrays.asList(new IStorageModel[] { item })));
    model.setSelectedItem(item);
    model.initialize();
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        model.getName().setIsChangable(false);
        model.getName().setChangeProhibitionReason(constants.cannotEditNameInTreeContext());
    }
    UICommand command;
    if (isStorageNameEditable || isStoragePropertiesEditable) {
        // $NON-NLS-1$
        command = UICommand.createDefaultOkUiCommand("OnSave", this);
        model.getCommands().add(command);
        // $NON-NLS-1$
        command = createCancelCommand("Cancel");
        model.getCommands().add(command);
    } else {
        // close is created the same as cancel, but with a different title
        // thus most of creation code can be reused.
        // $NON-NLS-1$
        command = createCancelCommand("Cancel");
        command.setTitle(ConstantsManager.getInstance().getConstants().close());
        model.getCommands().add(command);
    }
}
#method_after
private void edit() {
    StorageDomain storage = getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    final UIConstants constants = ConstantsManager.getInstance().getConstants();
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editDomainTitle());
    model.setHelpTag(HelpTag.edit_domain);
    // $NON-NLS-1$
    model.setHashName("edit_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.setStorage(storage);
    model.getName().setEntity(storage.getStorageName());
    model.getDescription().setEntity(storage.getDescription());
    model.getComment().setEntity(storage.getComment());
    model.setOriginalName(storage.getStorageName());
    model.getDataCenter().setIsChangable(false);
    model.getFormat().setIsChangable(false);
    boolean isStorageNameEditable = model.isStorageActive() || model.isNewStorage();
    boolean isStoragePropertiesEditable = model.isStorageNotLocked() || model.isNewStorage();
    model.getHost().setIsChangable(false);
    model.getName().setIsChangable(isStorageNameEditable);
    model.getDescription().setIsChangable(isStoragePropertiesEditable);
    model.getComment().setIsChangable(isStoragePropertiesEditable);
    model.getWipeAfterDelete().setIsChangable(isStoragePropertiesEditable);
    // set the field domain type to non editable
    model.getAvailableStorageItems().setIsChangable(false);
    model.setIsChangable(isStorageNameEditable || isStoragePropertiesEditable);
    boolean isPathEditable = isPathEditable(storage);
    isStorageNameEditable = isStorageNameEditable || isPathEditable;
    IStorageModel item = prepareStorageForEdit(storage, model);
    model.setItems(new ArrayList<IStorageModel>(Arrays.asList(new IStorageModel[] { item })));
    model.setSelectedItem(item);
    model.initialize();
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        model.getName().setIsChangable(false);
        model.getName().setChangeProhibitionReason(constants.cannotEditNameInTreeContext());
    }
    UICommand command;
    if (isStorageNameEditable || isStoragePropertiesEditable) {
        // $NON-NLS-1$
        command = UICommand.createDefaultOkUiCommand("OnSave", this);
        model.getCommands().add(command);
        // $NON-NLS-1$
        command = createCancelCommand("Cancel");
        model.getCommands().add(command);
    } else {
        // close is created the same as cancel, but with a different title
        // thus most of creation code can be reused.
        // $NON-NLS-1$
        command = createCancelCommand("Cancel");
        command.setTitle(ConstantsManager.getInstance().getConstants().close());
        model.getCommands().add(command);
    }
}
#end_block

#method_before
private void remove() {
    if (getWindow() != null) {
        return;
    }
    RemoveStorageModel model = new RemoveStorageModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeStoragesTitle());
    model.setHelpTag(HelpTag.remove_storage);
    // $NON-NLS-1$
    model.setHashName("remove_storage");
    StorageDomain storage = (StorageDomain) getSelectedItem();
    boolean localFsOnly = storage.getStorageType() == StorageType.LOCALFS;
    AsyncDataProvider.getInstance().getHostsForStorageOperation(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            StorageListModel storageListModel = (StorageListModel) array[0];
            RemoveStorageModel removeStorageModel = (RemoveStorageModel) array[1];
            StorageDomain storage = (StorageDomain) storageListModel.getSelectedItem();
            List<VDS> hosts = (List<VDS>) returnValue;
            removeStorageModel.getHostList().setItems(hosts);
            removeStorageModel.getHostList().setSelectedItem(Linq.firstOrDefault(hosts));
            removeStorageModel.getFormat().setEntity(storage.getStorageDomainType().isDataDomain());
            if (hosts.isEmpty()) {
                // $NON-NLS-1$
                UICommand tempVar = createCancelCommand("Cancel");
                tempVar.setIsDefault(true);
                removeStorageModel.getCommands().add(tempVar);
            } else {
                UICommand command;
                // $NON-NLS-1$
                command = UICommand.createDefaultOkUiCommand("OnRemove", StorageListModel.this);
                removeStorageModel.getCommands().add(command);
                // $NON-NLS-1$
                command = createCancelCommand("Cancel");
                removeStorageModel.getCommands().add(command);
            }
        }
    }), null, localFsOnly);
}
#method_after
private void remove() {
    if (getWindow() != null) {
        return;
    }
    RemoveStorageModel model = new RemoveStorageModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeStoragesTitle());
    model.setHelpTag(HelpTag.remove_storage);
    // $NON-NLS-1$
    model.setHashName("remove_storage");
    StorageDomain storage = getSelectedItem();
    boolean localFsOnly = storage.getStorageType() == StorageType.LOCALFS;
    AsyncDataProvider.getInstance().getHostsForStorageOperation(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            StorageListModel storageListModel = (StorageListModel) array[0];
            RemoveStorageModel removeStorageModel = (RemoveStorageModel) array[1];
            StorageDomain storage = storageListModel.getSelectedItem();
            List<VDS> hosts = (List<VDS>) returnValue;
            removeStorageModel.getHostList().setItems(hosts);
            removeStorageModel.getHostList().setSelectedItem(Linq.firstOrDefault(hosts));
            removeStorageModel.getFormat().setEntity(storage.getStorageDomainType().isDataDomain());
            if (hosts.isEmpty()) {
                // $NON-NLS-1$
                UICommand tempVar = createCancelCommand("Cancel");
                tempVar.setIsDefault(true);
                removeStorageModel.getCommands().add(tempVar);
            } else {
                UICommand command;
                // $NON-NLS-1$
                command = UICommand.createDefaultOkUiCommand("OnRemove", StorageListModel.this);
                removeStorageModel.getCommands().add(command);
                // $NON-NLS-1$
                command = createCancelCommand("Cancel");
                removeStorageModel.getCommands().add(command);
            }
        }
    }), null, localFsOnly);
}
#end_block

#method_before
private void onRemove() {
    if (getSelectedItem() != null) {
        StorageDomain storage = (StorageDomain) getSelectedItem();
        RemoveStorageModel model = (RemoveStorageModel) getWindow();
        if (!model.validate()) {
            return;
        }
        VDS host = model.getHostList().getSelectedItem();
        RemoveStorageDomainParameters tempVar = new RemoveStorageDomainParameters(storage.getId());
        tempVar.setVdsId(host.getId());
        tempVar.setDoFormat(model.getFormat().getEntity());
        Frontend.getInstance().runAction(VdcActionType.RemoveStorageDomain, tempVar, null, this);
    }
    cancel();
}
#method_after
private void onRemove() {
    if (getSelectedItem() != null) {
        StorageDomain storage = getSelectedItem();
        RemoveStorageModel model = (RemoveStorageModel) getWindow();
        if (!model.validate()) {
            return;
        }
        VDS host = model.getHostList().getSelectedItem();
        RemoveStorageDomainParameters tempVar = new RemoveStorageDomainParameters(storage.getId());
        tempVar.setVdsId(host.getId());
        tempVar.setDoFormat(model.getFormat().getEntity());
        Frontend.getInstance().runAction(VdcActionType.RemoveStorageDomain, tempVar, null, this);
    }
    cancel();
}
#end_block

#method_before
private void destroy() {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().destroyStorageDomainTitle());
    model.setHelpTag(HelpTag.destroy_storage_domain);
    // $NON-NLS-1$
    model.setHashName("destroy_storage_domain");
    ArrayList<String> items = new ArrayList<String>();
    items.add(((StorageDomain) getSelectedItem()).getStorageName());
    model.setItems(items);
    model.getLatch().setIsAvailable(true);
    model.getLatch().setIsChangable(true);
    UICommand command;
    // $NON-NLS-1$
    command = UICommand.createDefaultOkUiCommand("OnDestroy", this);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = createCancelCommand("Cancel");
    model.getCommands().add(command);
}
#method_after
private void destroy() {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().destroyStorageDomainTitle());
    model.setHelpTag(HelpTag.destroy_storage_domain);
    // $NON-NLS-1$
    model.setHashName("destroy_storage_domain");
    ArrayList<String> items = new ArrayList<String>();
    items.add(getSelectedItem().getStorageName());
    model.setItems(items);
    model.getLatch().setIsAvailable(true);
    model.getLatch().setIsChangable(true);
    UICommand command;
    // $NON-NLS-1$
    command = UICommand.createDefaultOkUiCommand("OnDestroy", this);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = createCancelCommand("Cancel");
    model.getCommands().add(command);
}
#end_block

#method_before
private void onDestroy() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    StorageDomain storageDomain = (StorageDomain) getSelectedItem();
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.ForceRemoveStorageDomain, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { new StorageDomainParametersBase(storageDomain.getId()) })), new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#method_after
private void onDestroy() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    StorageDomain storageDomain = getSelectedItem();
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.ForceRemoveStorageDomain, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { new StorageDomainParametersBase(storageDomain.getId()) })), new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#end_block

#method_before
@Override
protected void updateDetailsAvailability() {
    if (getSelectedItem() != null) {
        StorageDomain storage = (StorageDomain) getSelectedItem();
        boolean isBackupStorage = storage.getStorageDomainType() == StorageDomainType.ImportExport;
        boolean isDataStorage = storage.getStorageDomainType().isDataDomain();
        boolean isImageStorage = storage.getStorageDomainType() == StorageDomainType.Image || storage.getStorageDomainType() == StorageDomainType.ISO;
        boolean isDataCenterAvailable = storage.getStorageType() != StorageType.GLANCE;
        boolean isGeneralAvailable = storage.getStorageType() != StorageType.GLANCE;
        boolean isRegsiterEntityListModelSelected = getActiveDetailModel() == vmRegisterListModel || getActiveDetailModel() == templateRegisterListModel;
        boolean isRegisterSubtabsAvailable = isDataStorage && (storage.isContainsUnregisteredEntities() || isRegsiterEntityListModelSelected);
        generalModel.setIsAvailable(isGeneralAvailable);
        dcListModel.setIsAvailable(isDataCenterAvailable);
        vmBackupModel.setIsAvailable(isBackupStorage);
        templateBackupModel.setIsAvailable(isBackupStorage);
        vmListModel.setIsAvailable(isDataStorage);
        templateListModel.setIsAvailable(isDataStorage);
        vmRegisterListModel.setIsAvailable(isRegisterSubtabsAvailable);
        templateRegisterListModel.setIsAvailable(isRegisterSubtabsAvailable);
        diskListModel.setIsAvailable(isDataStorage);
        snapshotListModel.setIsAvailable(isDataStorage);
        diskProfileListModel.setIsAvailable(isDataStorage);
        isoListModel.setIsAvailable(isImageStorage);
    }
}
#method_after
@Override
protected void updateDetailsAvailability() {
    if (getSelectedItem() != null) {
        StorageDomain storage = getSelectedItem();
        boolean isBackupStorage = storage.getStorageDomainType() == StorageDomainType.ImportExport;
        boolean isDataStorage = storage.getStorageDomainType().isDataDomain();
        boolean isImageStorage = storage.getStorageDomainType() == StorageDomainType.Image || storage.getStorageDomainType() == StorageDomainType.ISO;
        boolean isDataCenterAvailable = storage.getStorageType() != StorageType.GLANCE;
        boolean isGeneralAvailable = storage.getStorageType() != StorageType.GLANCE;
        boolean isRegsiterEntityListModelSelected = getActiveDetailModel() == vmRegisterListModel || getActiveDetailModel() == templateRegisterListModel;
        boolean isRegisterSubtabsAvailable = isDataStorage && (storage.isContainsUnregisteredEntities() || isRegsiterEntityListModelSelected);
        generalModel.setIsAvailable(isGeneralAvailable);
        dcListModel.setIsAvailable(isDataCenterAvailable);
        vmBackupModel.setIsAvailable(isBackupStorage);
        templateBackupModel.setIsAvailable(isBackupStorage);
        vmListModel.setIsAvailable(isDataStorage);
        templateListModel.setIsAvailable(isDataStorage);
        vmRegisterListModel.setIsAvailable(isRegisterSubtabsAvailable);
        templateRegisterListModel.setIsAvailable(isRegisterSubtabsAvailable);
        diskListModel.setIsAvailable(isDataStorage);
        snapshotListModel.setIsAvailable(isDataStorage);
        diskProfileListModel.setIsAvailable(isDataStorage);
        isoListModel.setIsAvailable(isImageStorage);
    }
}
#end_block

#method_before
private void updateActionAvailability() {
    ArrayList<StorageDomain> items = getSelectedItems() != null ? Linq.<StorageDomain>cast(getSelectedItems()) : new ArrayList<StorageDomain>();
    StorageDomain item = (StorageDomain) getSelectedItem();
    getNewDomainCommand().setIsAvailable(true);
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && isEditAvailable(item));
    getRemoveCommand().setIsExecutionAllowed(items.size() == 1 && items.get(0).getStorageType() != StorageType.GLANCE && Linq.findAllStorageDomainsBySharedStatus(items, StorageDomainSharedStatus.Unattached).size() == items.size());
    getDestroyCommand().setIsExecutionAllowed(item != null && items.size() == 1 && items.get(0).getStorageType() != StorageType.GLANCE && item.getStatus() != StorageDomainStatus.Active);
    // System tree dependent actions.
    boolean isAvailable = !(getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage);
    getNewDomainCommand().setIsAvailable(isAvailable);
    getRemoveCommand().setIsAvailable(isAvailable);
    getDestroyCommand().setIsAvailable(isAvailable);
}
#method_after
private void updateActionAvailability() {
    ArrayList<StorageDomain> items = getSelectedItems() != null ? Linq.<StorageDomain>cast(getSelectedItems()) : new ArrayList<StorageDomain>();
    StorageDomain item = getSelectedItem();
    getNewDomainCommand().setIsAvailable(true);
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && isEditAvailable(item));
    getRemoveCommand().setIsExecutionAllowed(items.size() == 1 && items.get(0).getStorageType() != StorageType.GLANCE && Linq.findAllStorageDomainsBySharedStatus(items, StorageDomainSharedStatus.Unattached).size() == items.size());
    getDestroyCommand().setIsExecutionAllowed(item != null && items.size() == 1 && items.get(0).getStorageType() != StorageType.GLANCE && item.getStatus() != StorageDomainStatus.Active);
    // System tree dependent actions.
    boolean isAvailable = !(getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage);
    getNewDomainCommand().setIsAvailable(isAvailable);
    getRemoveCommand().setIsAvailable(isAvailable);
    getDestroyCommand().setIsAvailable(isAvailable);
}
#end_block

#method_before
private void savePosixStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    PosixStorageModel posixModel = (PosixStorageModel) storageModel;
    path = posixModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName(model.getName().getEntity());
    storageDomain.setDescription(model.getDescription().getEntity());
    storageDomain.setComment(model.getComment().getEntity());
    storageDomain.setStorageFormat(model.getFormat().getSelectedItem());
    storageDomain.setWipeAfterDelete(model.getWipeAfterDelete().getEntity());
    if (isNew) {
        AsyncDataProvider.getInstance().getStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    handleDomainAlreadyExists(storageListModel, storages);
                } else {
                    storageListModel.saveNewPosixStorage();
                }
            }
        }), null, path);
    } else {
        StorageDomain storageDomain = (StorageDomain) getSelectedItem();
        if (isPathEditable(storageDomain)) {
            updatePath();
        }
        updateStorageDomain();
    }
}
#method_after
private void savePosixStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    PosixStorageModel posixModel = (PosixStorageModel) storageModel;
    path = posixModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName(model.getName().getEntity());
    storageDomain.setDescription(model.getDescription().getEntity());
    storageDomain.setComment(model.getComment().getEntity());
    storageDomain.setStorageFormat(model.getFormat().getSelectedItem());
    storageDomain.setWipeAfterDelete(model.getWipeAfterDelete().getEntity());
    if (isNew) {
        AsyncDataProvider.getInstance().getStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    handleDomainAlreadyExists(storageListModel, storages);
                } else {
                    storageListModel.saveNewPosixStorage();
                }
            }
        }), null, path);
    } else {
        StorageDomain storageDomain = getSelectedItem();
        if (isPathEditable(storageDomain)) {
            updatePath();
        }
        updateStorageDomain();
    }
}
#end_block

#method_before
public void saveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getSelectedItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections connection = new StorageServerConnections();
    connection.setconnection(path);
    connection.setstorage_type(posixModel.getType());
    connection.setVfsType(posixModel.getVfsType().getEntity());
    connection.setMountOptions(posixModel.getMountOptions().getEntity());
    this.connection = connection;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(posixModel.getAddStorageDomainVdcAction());
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId()));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (Guid) vdcReturnValueBase.getActionReturnValue();
            // Attach storage to data center as necessary.
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.attachStorageToDataCenter(storageListModel.storageId, dataCenter.getId(), storageModel.getActivateDomain().getEntity());
            }
            storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.cleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
public void saveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getSelectedItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections connection = new StorageServerConnections();
    connection.setconnection(path);
    connection.setstorage_type(posixModel.getType());
    connection.setVfsType(posixModel.getVfsType().getEntity());
    connection.setMountOptions(posixModel.getMountOptions().getEntity());
    this.connection = connection;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(posixModel.getAddStorageDomainVdcAction());
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId()));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = vdcReturnValueBase.getActionReturnValue();
            // Attach storage to data center as necessary.
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.attachStorageToDataCenter(storageListModel.storageId, dataCenter.getId(), storageModel.getActivateDomain().getEntity());
            }
            storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.cleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
private void saveNfsStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = nfsModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName(model.getName().getEntity());
    storageDomain.setDescription(model.getDescription().getEntity());
    storageDomain.setComment(model.getComment().getEntity());
    storageDomain.setStorageFormat(model.getFormat().getSelectedItem());
    storageDomain.setWipeAfterDelete(model.getWipeAfterDelete().getEntity());
    if (isNew) {
        AsyncDataProvider.getInstance().getStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    handleDomainAlreadyExists(storageListModel, storages);
                } else {
                    storageListModel.saveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        StorageDomain storageDomain = (StorageDomain) getSelectedItem();
        if (isPathEditable(storageDomain)) {
            updatePath();
        }
        updateStorageDomain();
    }
}
#method_after
private void saveNfsStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = nfsModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName(model.getName().getEntity());
    storageDomain.setDescription(model.getDescription().getEntity());
    storageDomain.setComment(model.getComment().getEntity());
    storageDomain.setStorageFormat(model.getFormat().getSelectedItem());
    storageDomain.setWipeAfterDelete(model.getWipeAfterDelete().getEntity());
    if (isNew) {
        AsyncDataProvider.getInstance().getStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    handleDomainAlreadyExists(storageListModel, storages);
                } else {
                    storageListModel.saveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        StorageDomain storageDomain = getSelectedItem();
        if (isPathEditable(storageDomain)) {
            updatePath();
        }
        updateStorageDomain();
    }
}
#end_block

#method_before
public void saveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(nfsModel.getType());
    if (nfsModel.getOverride().getEntity()) {
        tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        tempVar.setNfsRetrans(nfsModel.getRetransmissions().asConvertible().nullableShort());
        tempVar.setNfsTimeo(nfsModel.getTimeout().asConvertible().nullableShort());
        tempVar.setMountOptions(nfsModel.getMountOptions().getEntity());
    }
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (Guid) vdcReturnValueBase.getActionReturnValue();
        }
    };
    IFrontendActionAsyncCallback callback3 = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            // Attach storage to data center as necessary.
            StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.attachStorageToDataCenter(storageListModel.storageId, dataCenter.getId(), storageModel.getActivateDomain().getEntity());
            }
            storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.cleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#method_after
public void saveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(nfsModel.getType());
    if (nfsModel.getOverride().getEntity()) {
        tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        tempVar.setNfsRetrans(nfsModel.getRetransmissions().asConvertible().nullableShort());
        tempVar.setNfsTimeo(nfsModel.getTimeout().asConvertible().nullableShort());
        tempVar.setMountOptions(nfsModel.getMountOptions().getEntity());
    }
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = vdcReturnValueBase.getActionReturnValue();
        }
    };
    IFrontendActionAsyncCallback callback3 = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            // Attach storage to data center as necessary.
            StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.attachStorageToDataCenter(storageListModel.storageId, dataCenter.getId(), storageModel.getActivateDomain().getEntity());
            }
            storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.cleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#end_block

#method_before
public void saveNewSanStorage() {
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    VDS host = model.getHost().getSelectedItem();
    boolean force = sanModel.isForce();
    ArrayList<String> lunIds = new ArrayList<String>();
    for (LunModel lun : sanModel.getAddedLuns()) {
        lunIds.add(lun.getLunId());
    }
    AddSANStorageDomainParameters params = new AddSANStorageDomainParameters(storageDomain);
    params.setVdsId(host.getId());
    params.setLunIds(lunIds);
    params.setForce(force);
    Frontend.getInstance().runAction(VdcActionType.AddSANStorageDomain, params, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            storageListModel.storageModel = storageModel.getSelectedItem();
            if (!result.getReturnValue().getSucceeded()) {
                storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
                return;
            }
            StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                VdcReturnValueBase returnValue = result.getReturnValue();
                Guid storageId = (Guid) returnValue.getActionReturnValue();
                storageListModel.attachStorageToDataCenter(storageId, dataCenter.getId(), storageModel.getActivateDomain().getEntity());
            }
            storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    }, this);
}
#method_after
public void saveNewSanStorage() {
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    VDS host = model.getHost().getSelectedItem();
    boolean force = sanModel.isForce();
    ArrayList<String> lunIds = new ArrayList<String>();
    for (LunModel lun : sanModel.getAddedLuns()) {
        lunIds.add(lun.getLunId());
    }
    AddSANStorageDomainParameters params = new AddSANStorageDomainParameters(storageDomain);
    params.setVdsId(host.getId());
    params.setLunIds(lunIds);
    params.setForce(force);
    Frontend.getInstance().runAction(VdcActionType.AddSANStorageDomain, params, new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            storageListModel.storageModel = storageModel.getSelectedItem();
            if (!result.getReturnValue().getSucceeded()) {
                storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
                return;
            }
            StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                VdcReturnValueBase returnValue = result.getReturnValue();
                Guid storageId = returnValue.getActionReturnValue();
                storageListModel.attachStorageToDataCenter(storageId, dataCenter.getId(), storageModel.getActivateDomain().getEntity());
            }
            storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    }, this);
}
#end_block

#method_before
private void saveLocalStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    VDS host = model.getHost().getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    LocalStorageModel localModel = (LocalStorageModel) storageModel;
    path = localModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName(model.getName().getEntity());
    storageDomain.setDescription(model.getDescription().getEntity());
    storageDomain.setComment(model.getComment().getEntity());
    storageDomain.setWipeAfterDelete(model.getWipeAfterDelete().getEntity());
    if (isNew) {
        AsyncDataProvider.getInstance().getStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    handleDomainAlreadyExists(storageListModel, storages);
                } else {
                    storageListModel.saveNewLocalStorage();
                }
            }
        }), host.getStoragePoolId(), path);
    } else {
        StorageDomain storageDomain = (StorageDomain) getSelectedItem();
        if (isPathEditable(storageDomain)) {
            updatePath();
        }
        updateStorageDomain();
    }
}
#method_after
private void saveLocalStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    VDS host = model.getHost().getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    LocalStorageModel localModel = (LocalStorageModel) storageModel;
    path = localModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName(model.getName().getEntity());
    storageDomain.setDescription(model.getDescription().getEntity());
    storageDomain.setComment(model.getComment().getEntity());
    storageDomain.setWipeAfterDelete(model.getWipeAfterDelete().getEntity());
    if (isNew) {
        AsyncDataProvider.getInstance().getStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    handleDomainAlreadyExists(storageListModel, storages);
                } else {
                    storageListModel.saveNewLocalStorage();
                }
            }
        }), host.getStoragePoolId(), path);
    } else {
        StorageDomain storageDomain = getSelectedItem();
        if (isPathEditable(storageDomain)) {
            updatePath();
        }
        updateStorageDomain();
    }
}
#end_block

#method_before
private void saveSanStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    StorageDomain storage = (StorageDomain) getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(storage.getStorageStaticData());
    storageDomain.setStorageType(isNew ? sanModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? sanModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageFormat(isNew ? sanModel.getContainer().getFormat().getSelectedItem() : storageDomain.getStorageFormat());
    storageDomain.setStorageName(model.getName().getEntity());
    storageDomain.setDescription(model.getDescription().getEntity());
    storageDomain.setComment(model.getComment().getEntity());
    storageDomain.setWipeAfterDelete(model.getWipeAfterDelete().getEntity());
    if (isNew) {
        saveNewSanStorage();
    } else {
        Frontend.getInstance().runAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                StorageModel storageModel = (StorageModel) getWindow();
                SanStorageModel sanStorageModel = (SanStorageModel) storageModel.getSelectedItem();
                boolean force = sanStorageModel.isForce();
                StorageDomain storageDomain1 = (StorageDomain) storageListModel.getSelectedItem();
                ArrayList<String> lunIds = new ArrayList<String>();
                for (LunModel lun : sanStorageModel.getAddedLuns()) {
                    lunIds.add(lun.getLunId());
                }
                if (lunIds.size() > 0) {
                    Frontend.getInstance().runAction(VdcActionType.ExtendSANStorageDomain, new ExtendSANStorageDomainParameters(storageDomain1.getId(), lunIds, force), null, this);
                }
                storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#method_after
private void saveSanStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    StorageDomain storage = getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(storage.getStorageStaticData());
    storageDomain.setStorageType(isNew ? sanModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? sanModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageFormat(isNew ? sanModel.getContainer().getFormat().getSelectedItem() : storageDomain.getStorageFormat());
    storageDomain.setStorageName(model.getName().getEntity());
    storageDomain.setDescription(model.getDescription().getEntity());
    storageDomain.setComment(model.getComment().getEntity());
    storageDomain.setWipeAfterDelete(model.getWipeAfterDelete().getEntity());
    if (isNew) {
        saveNewSanStorage();
    } else {
        Frontend.getInstance().runAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                StorageModel storageModel = (StorageModel) getWindow();
                SanStorageModel sanStorageModel = (SanStorageModel) storageModel.getSelectedItem();
                boolean force = sanStorageModel.isForce();
                StorageDomain storageDomain1 = storageListModel.getSelectedItem();
                ArrayList<String> lunIds = new ArrayList<String>();
                for (LunModel lun : sanStorageModel.getAddedLuns()) {
                    lunIds.add(lun.getLunId());
                }
                if (lunIds.size() > 0) {
                    Frontend.getInstance().runAction(VdcActionType.ExtendSANStorageDomain, new ExtendSANStorageDomainParameters(storageDomain1.getId(), lunIds, force), null, this);
                }
                storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#end_block

#method_before
@Override
public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(EntityModel.entityChangedEventDefinition) && sender == getPath()) {
        // Notify about path change.
        getPathChangedEvent().raise(this, EventArgs.EMPTY);
    } else if (ev.matchesDefinition(EntityModel.entityChangedEventDefinition) && sender == getOverride()) {
        override_EntityChanged(args);
    }
}
#method_after
@Override
public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(HasEntity.entityChangedEventDefinition) && sender == getPath()) {
        // Notify about path change.
        getPathChangedEvent().raise(this, EventArgs.EMPTY);
    } else if (ev.matchesDefinition(HasEntity.entityChangedEventDefinition) && sender == getOverride()) {
        override_EntityChanged(args);
    }
}
#end_block

#method_before
@Override
public void prepareForEdit(StorageDomain storage) {
    getOverride().setIsChangable(isEditable(storage));
    super.prepareForEdit(storage);
}
#method_after
@Override
public void prepareForEdit(StorageDomain storage) {
    super.prepareForEdit(storage);
    getOverride().setIsChangable(isEditable(storage));
}
#end_block

#method_before
@Override
public Response add(Template template) {
    validateParameters(template, "name", "vm.id|name");
    validateEnums(Template.class, template);
    Guid clusterId = null;
    VDSGroup cluster = null;
    if (namedCluster(template)) {
        clusterId = getClusterId(template);
        cluster = lookupCluster(clusterId);
    }
    if (template.getVersion() != null) {
        validateParameters(template.getVersion(), "baseTemplate");
    }
    VmStatic staticVm = getMapper(Template.class, VmStatic.class).map(template, getVm(cluster, template));
    if (namedCluster(template)) {
        staticVm.setVdsGroupId(clusterId);
    }
    staticVm.setUsbPolicy(VmMapper.getUsbPolicyOnCreate(template.getUsb(), cluster != null ? cluster.getCompatibilityVersion() : lookupCluster(staticVm.getVdsGroupId()).getCompatibilityVersion()));
    // REVISIT: powershell has a IsVmTemlateWithSameNameExist safety check
    AddVmTemplateParameters params = new AddVmTemplateParameters(staticVm, template.getName(), template.getDescription());
    if (template.getVersion() != null) {
        params.setBaseTemplateId(Guid.createGuidFromString(template.getVersion().getBaseTemplate().getId()));
        params.setTemplateVersionName(template.getVersion().getVersionName());
    }
    params.setConsoleEnabled(template.getConsole() != null && template.getConsole().isSetEnabled() ? template.getConsole().isEnabled() : !getConsoleDevicesForEntity(staticVm.getId()).isEmpty());
    params.setVirtioScsiEnabled(template.isSetVirtioScsi() && template.getVirtioScsi().isSetEnabled() ? template.getVirtioScsi().isEnabled() : null);
    if (template.isSetSoundcardEnabled()) {
        params.setSoundDeviceEnabled(template.isSoundcardEnabled());
    } else {
        params.setSoundDeviceEnabled(!VmHelper.getSoundDevicesForEntity(this, staticVm.getId()).isEmpty());
    }
    if (template.isSetRngDevice()) {
        params.setUpdateRngDevice(true);
        params.setRngDevice(RngDeviceMapper.map(template.getRngDevice(), null));
    }
    DisplayHelper.setGraphicsToParams(template.getDisplay(), params);
    boolean isDomainSet = false;
    if (template.isSetStorageDomain() && template.getStorageDomain().isSetId()) {
        params.setDestinationStorageDomainId(asGuid(template.getStorageDomain().getId()));
        isDomainSet = true;
    }
    params.setDiskInfoDestinationMap(getDiskToDestinationMap(template.getVm(), params.getDestinationStorageDomainId(), isDomainSet));
    setupCloneVmPermissions(template, params);
    return performCreate(VdcActionType.AddVmTemplate, params, new QueryIdResolver<Guid>(VdcQueryType.GetVmTemplate, GetVmTemplateParameters.class));
}
#method_after
@Override
public Response add(Template template) {
    validateParameters(template, "name", "vm.id|name");
    validateEnums(Template.class, template);
    Guid clusterId = null;
    VDSGroup cluster = null;
    if (namedCluster(template)) {
        clusterId = getClusterId(template);
        cluster = lookupCluster(clusterId);
    }
    if (template.getVersion() != null) {
        validateParameters(template.getVersion(), "baseTemplate");
    }
    VmStatic staticVm = getMapper(Template.class, VmStatic.class).map(template, getVm(cluster, template));
    if (namedCluster(template)) {
        staticVm.setVdsGroupId(clusterId);
    }
    staticVm.setUsbPolicy(VmMapper.getUsbPolicyOnCreate(template.getUsb(), cluster != null ? cluster.getCompatibilityVersion() : lookupCluster(staticVm.getVdsGroupId()).getCompatibilityVersion()));
    // REVISIT: powershell has a IsVmTemlateWithSameNameExist safety check
    AddVmTemplateParameters params = new AddVmTemplateParameters(staticVm, template.getName(), template.getDescription());
    if (template.getVersion() != null) {
        params.setBaseTemplateId(Guid.createGuidFromString(template.getVersion().getBaseTemplate().getId()));
        params.setTemplateVersionName(template.getVersion().getVersionName());
    }
    params.setConsoleEnabled(template.getConsole() != null && template.getConsole().isSetEnabled() ? template.getConsole().isEnabled() : !getConsoleDevicesForEntity(staticVm.getId()).isEmpty());
    params.setVirtioScsiEnabled(template.isSetVirtioScsi() && template.getVirtioScsi().isSetEnabled() ? template.getVirtioScsi().isEnabled() : null);
    if (template.isSetSoundcardEnabled()) {
        params.setSoundDeviceEnabled(template.isSoundcardEnabled());
    } else {
        params.setSoundDeviceEnabled(!VmHelper.getSoundDevicesForEntity(this, staticVm.getId()).isEmpty());
    }
    if (template.isSetRngDevice()) {
        params.setUpdateRngDevice(true);
        params.setRngDevice(RngDeviceMapper.map(template.getRngDevice(), null));
    }
    DisplayHelper.setGraphicsToParams(template.getDisplay(), params);
    boolean isDomainSet = false;
    if (template.isSetStorageDomain() && template.getStorageDomain().isSetId()) {
        params.setDestinationStorageDomainId(asGuid(template.getStorageDomain().getId()));
        isDomainSet = true;
    }
    params.setDiskInfoDestinationMap(getDestinationTemplateDiskMap(template.getVm(), params.getDestinationStorageDomainId(), isDomainSet));
    setupCloneVmPermissions(template, params);
    return performCreate(VdcActionType.AddVmTemplate, params, new QueryIdResolver<Guid>(VdcQueryType.GetVmTemplate, GetVmTemplateParameters.class));
}
#end_block

#method_before
public void processEvent(AuditLogEvent event) {
    log.debug("Event: {}", event.getName());
    for (Recipient recipient : recipients) {
        log.debug("Recipient: {}", recipient);
        for (FilterEntry entry : notify) {
            if ((entry.getEventName() == null || entry.getEventName().equals(event.getName())) && (entry.getSeverity() == null || severityMatches(entry.getSeverity(), event.getSeverity(), entry.isExclude())) && (entry.getRecipient() == null || entry.getRecipient().equals(recipient))) {
                log.debug("Entry match(({})): {}", entry.isExclude() ? "exclude" : "include", entry);
                if (!entry.isExclude()) {
                    Transport transport = transports.get(recipient.getTransport());
                    if (transport == null) {
                        log.debug("Ignoring recipient '{}' as transport not registered", recipient);
                    } else {
                        transport.dispatchEvent(event, recipient.getName());
                    }
                }
                break;
            }
        }
    }
}
#method_after
public void processEvent(AuditLogEvent event) {
    log.debug("Event: {}", event.getName());
    for (Recipient recipient : recipients) {
        log.debug("Recipient: {}", recipient);
        for (FilterEntry entry : notify) {
            if ((entry.getEventName() == null || entry.getEventName().equals(event.getName())) && (entry.getSeverity() == null || (entry.isExclude() ? -1 : 1) * event.getSeverity().compareTo(entry.getSeverity()) >= 0) && (entry.getRecipient() == null || entry.getRecipient().equals(recipient))) {
                log.debug("Entry match(({})): {}", entry.isExclude() ? "exclude" : "include", entry);
                if (!entry.isExclude()) {
                    Transport transport = transports.get(recipient.getTransport());
                    if (transport == null) {
                        log.debug("Ignoring recipient '{}' as transport not registered", recipient);
                    } else {
                        transport.dispatchEvent(event, recipient.getName());
                    }
                }
                break;
            }
        }
    }
}
#end_block

#method_before
public static List<FilterEntry> parse(String filters) {
    List<FilterEntry> ret = new LinkedList<>();
    if (!PATTERN_BLANK.matcher(filters).matches()) {
        Matcher m = PATTERN_PARSE.matcher(filters);
        boolean ok = false;
        int expectedStart = 0;
        while (m.find()) {
            log.debug("parse: handling '{}'", m.group(0));
            if (m.start() != expectedStart) {
                throw new RuntimeException("Cannot parse filters");
            }
            expectedStart = m.end();
            ok = m.end() == m.regionEnd();
            ret.add(new FilterEntry(m.group("anymsg") != null ? null : m.group("message"), m.group("anyseverity") != null ? null : m.group("severity"), m.group("exclude") != null, m.group("recipient") == null || m.group("anyrecipient") != null ? null : new Recipient(m.group("transport"), m.group("name"))));
        }
        if (!ok) {
            throw new IllegalArgumentException("Cannot parse filters");
        }
    }
    return ret;
}
#method_after
public static List<FilterEntry> parse(String filters) {
    List<FilterEntry> ret = new LinkedList<>();
    if (!PATTERN_BLANK.matcher(filters).matches()) {
        Matcher m = PATTERN_PARSE.matcher(filters);
        boolean ok = false;
        int expectedStart = 0;
        while (m.find()) {
            log.debug("parse: handling '{}'", m.group(0));
            if (m.start() != expectedStart) {
                throw new RuntimeException("Cannot parse filters");
            }
            expectedStart = m.end();
            ok = m.end() == m.regionEnd();
            ret.add(new FilterEntry(m.group("anymsg") != null ? null : m.group("message"), m.group("severity") == null || m.group("severity").equals("*") ? null : AuditLogSeverity.valueOf(m.group("severity")), m.group("exclude") != null, m.group("recipient") == null || m.group("anyrecipient") != null ? null : new Recipient(m.group("transport"), m.group("name"))));
        }
        if (!ok) {
            throw new IllegalArgumentException("Cannot parse filters");
        }
    }
    return ret;
}
#end_block

#method_before
public String getSeverity() {
    return severity;
}
#method_after
public AuditLogSeverity getSeverity() {
    return severity;
}
#end_block

#method_before
@Override
public String toString() {
    return "FilterEntry{" + "eventName='" + eventName + '\'' + ", severity=" + severity + ", exclude=" + exclude + ", recipient=" + recipient + '}';
}
#method_after
@Override
public String toString() {
    return "FilterEntry{" + "eventName='" + eventName + '\'' + ", severity=" + (severity != null ? severity.name() : "any") + ", exclude=" + exclude + ", recipient=" + recipient + '}';
}
#end_block

#method_before
@Test
public void testSeverity() throws Exception {
    String expected1 = "test1@example.com";
    String expected2 = "test2@example.com";
    filter.clearFilterEntries();
    filter.addFilterEntries(FirstMatchSimpleFilter.parse("include:*:WARNING(smtp:" + expected1 + ") " + "exclude:*(smtp:" + expected1 + ")" + "exclude:*:WARNING(smtp:" + expected2 + ") " + "include:*(smtp:" + expected2 + ")"));
    filter.processEvent(new E("message1", AuditLogSeverity.NORMAL));
    filter.processEvent(new E("message2", AuditLogSeverity.WARNING));
    filter.processEvent(new E("message3", AuditLogSeverity.ERROR));
    Assert.assertTrue(smtp.getEvents().contains("message2-->" + expected1));
    Assert.assertTrue(smtp.getEvents().contains("message3-->" + expected1));
    Assert.assertTrue(smtp.getEvents().contains("message3-->" + expected2));
    Assert.assertEquals(3, smtp.getEvents().size());
}
#method_after
@Test
public void testSeverity() throws Exception {
    String expected1 = "test1@example.com";
    String expected2 = "test2@example.com";
    filter.clearFilterEntries();
    filter.addFilterEntries(FirstMatchSimpleFilter.parse("include:*:WARNING(smtp:" + expected1 + ") " + "exclude:*(smtp:" + expected1 + ")" + "exclude:*:WARNING(smtp:" + expected2 + ") " + "include:*(smtp:" + expected2 + ")"));
    filter.processEvent(new E("message1", AuditLogSeverity.NORMAL));
    filter.processEvent(new E("message2", AuditLogSeverity.WARNING));
    filter.processEvent(new E("message3", AuditLogSeverity.ERROR));
    filter.processEvent(new E("message4", AuditLogSeverity.ALERT));
    Assert.assertTrue(smtp.getEvents().contains("message2-->" + expected1));
    Assert.assertTrue(smtp.getEvents().contains("message3-->" + expected1));
    Assert.assertTrue(smtp.getEvents().contains("message3-->" + expected2));
    Assert.assertTrue(smtp.getEvents().contains("message4-->" + expected1));
    Assert.assertTrue(smtp.getEvents().contains("message4-->" + expected2));
    Assert.assertEquals(5, smtp.getEvents().size());
}
#end_block

#method_before
public static boolean canExecutePartially(List<? extends BusinessEntityWithStatus<?, ?>> entities, Class type, VdcActionType action) {
    if (_matrix.containsKey(type)) {
        for (BusinessEntityWithStatus<?, ?> a : entities) {
            if (a.getClass() == type && (!_matrix.get(type).containsKey(a.getStatus()) || !_matrix.get(type).get(a.getStatus()).contains(action))) {
                return true;
            }
        }
    }
    return false;
}
#method_after
public static boolean canExecutePartially(List<? extends BusinessEntityWithStatus<?, ?>> entities, Class type, VdcActionType action) {
    if (_matrix.containsKey(type)) {
        for (BusinessEntityWithStatus<?, ?> a : entities) {
            if (a.getClass() == type && (!_matrix.get(type).containsKey(a.getStatus()) || !_matrix.get(type).get(a.getStatus()).contains(action))) {
                return true;
            }
        }
    } else {
        return true;
    }
    return false;
}
#end_block

#method_before
private void newVm() {
    if (getWindow() != null) {
        return;
    }
    UnitVmModel model = new UnitVmModel(new NewVmModelBehavior());
    model.setTitle(ConstantsManager.getInstance().getConstants().newVmTitle());
    model.setHelpTag(HelpTag.new_vm);
    // $NON-NLS-1$
    model.setHashName("new_vm");
    model.setIsNew(true);
    model.getVmType().setSelectedItem(VmType.Server);
    model.setCustomPropertiesKeysList(AsyncDataProvider.getInstance().getCustomPropertiesList());
    // $NON-NLS-1$
    model.setIsAdvancedModeLocalStorageKey("wa_vm_dialog");
    setWindow(model);
    model.initialize(getSystemTreeSelectedItem());
    VmBasedWidgetSwitchModeCommand switchModeCommand = new VmBasedWidgetSwitchModeCommand();
    switchModeCommand.init(model);
    model.getCommands().add(switchModeCommand);
    model.getProvisioning().setEntity(true);
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnSave", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#method_after
private void newVm() {
    if (getWindow() != null) {
        return;
    }
    List<UICommand> commands = new ArrayList<>();
    // $NON-NLS-1$
    commands.add(UICommand.createDefaultOkUiCommand("OnSave", this));
    // $NON-NLS-1$
    commands.add(UICommand.createCancelUiCommand("Cancel", this));
    UnitVmModel model = new UnitVmModel(new NewVmModelBehavior());
    setupNewVmModel(model, VmType.Server, getSystemTreeSelectedItem(), commands);
}
#end_block

#method_before
private void preSave() {
    final UnitVmModel model = (UnitVmModel) getWindow();
    final String name = model.getName().getEntity();
    if (model.getIsNew() == false && selectedItem == null) {
        cancel();
        return;
    }
    setcurrentVm(model.getIsNew() ? new VM() : (VM) Cloner.clone(selectedItem));
    if (!model.validate()) {
        return;
    }
    AsyncDataProvider.getInstance().isVmNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            if (!(Boolean) returnValue && name.compareToIgnoreCase(getcurrentVm().getName()) != 0) {
                model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
                model.getName().setIsValid(false);
                model.setValidTab(TabName.GENERAL_TAB, false);
            } else {
                model.getName().getInvalidityReasons().clear();
                model.getName().setIsValid(true);
                model.setValidTab(TabName.GENERAL_TAB, true);
                onSave();
            }
        }
    }), name);
}
#method_after
private void preSave() {
    final UnitVmModel model = (UnitVmModel) getWindow();
    final String name = model.getName().getEntity();
    if (model.getIsNew() == false && selectedItem == null) {
        cancel();
        return;
    }
    setcurrentVm(model.getIsNew() ? new VM() : (VM) Cloner.clone(selectedItem));
    validateVm(model, name);
}
#end_block

#method_before
public void cancel() {
    cancelConfirmation();
    setGuideContext(null);
    setWindow(null);
    updateActionAvailability();
}
#method_after
@Override
public void cancel() {
    cancelConfirmation();
    setGuideContext(null);
    setWindow(null);
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void onSelectedItemChanged() {
    super.onSelectedItemChanged();
    updateActionAvailability();
}
#method_after
@Override
protected void onSelectedItemChanged() {
    super.onSelectedItemChanged();
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void selectedItemsChanged() {
    super.selectedItemsChanged();
    updateActionAvailability();
}
#method_after
@Override
protected void selectedItemsChanged() {
    super.selectedItemsChanged();
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void selectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.selectedItemPropertyChanged(sender, e);
    if (e.propertyName.equals("status")) {
        // $NON-NLS-1$
        updateActionAvailability();
    }
}
#method_after
@Override
protected void selectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.selectedItemPropertyChanged(sender, e);
    if (e.propertyName.equals("status")) {
        // $NON-NLS-1$
        updateActionsAvailability();
    }
}
#end_block

#method_before
@Override
protected void postInitTemplate(List<VmTemplate> templates) {
    boolean isSelectedTemplateBase = selectedTemplate.isBaseTemplate();
    VmTemplate baseTemplate = null;
    List<VmTemplate> relatedTemplates = new ArrayList<>();
    for (VmTemplate template : templates) {
        if (template.getName().equals(selectedTemplate.getName())) {
            relatedTemplates.add(template);
            if (!isSelectedTemplateBase) {
                if (selectedTemplate.getBaseTemplateId().equals(template.getId())) {
                    baseTemplate = template;
                }
            }
        }
    }
    initTemplateWithVersion(relatedTemplates);
    TemplateWithVersion templateCouple;
    if (selectedTemplate.isBaseTemplate()) {
        templateCouple = new TemplateWithVersion(selectedTemplate, selectedTemplate);
    } else {
        templateCouple = new TemplateWithVersion(baseTemplate, selectedTemplate);
    }
    getModel().getTemplateWithVersion().setSelectedItem(templateCouple);
    updateIsDisksAvailable();
}
#method_after
@Override
protected void postInitTemplate(List<VmTemplate> templates) {
    DataCenterWithCluster selectedDCWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem();
    Guid clusterId = selectedDCWithCluster != null ? selectedDCWithCluster.getCluster().getId() : selectedTemplate.getVdsGroupId();
    VmTemplate baseTemplate = null;
    if (selectedTemplate.isBaseTemplate()) {
        baseTemplate = selectedTemplate;
    }
    Guid baseTemplateId = selectedTemplate.getBaseTemplateId();
    List<VmTemplate> relatedTemplates = new ArrayList<>();
    for (VmTemplate template : templates) {
        if (template.getBaseTemplateId().equals(baseTemplateId)) {
            if (template.getVdsGroupId().equals(clusterId)) {
                relatedTemplates.add(template);
            }
            if (baseTemplate == null) {
                if (template.getId().equals(baseTemplateId)) {
                    baseTemplate = template;
                }
            }
        }
    }
    if (!relatedTemplates.contains(baseTemplate)) {
        relatedTemplates.add(baseTemplate);
    }
    initTemplateWithVersion(relatedTemplates);
    if (selectedDCWithCluster != null && selectedDCWithCluster.getCluster() != null) {
        if (selectedTemplate.getVdsGroupId().equals(selectedDCWithCluster.getCluster().getId())) {
            TemplateWithVersion templateCouple = new TemplateWithVersion(baseTemplate, selectedTemplate);
            getModel().getTemplateWithVersion().setSelectedItem(templateCouple);
        }
    }
    updateIsDisksAvailable();
}
#end_block

#method_before
private void createVMFromTemplate() {
    VmTemplate template = getSelectedItem();
    UnitVmModel model = new UnitVmModel(new NewVmFromTemplateModelBehavior(template));
    model.setIsAdvancedModeLocalStorageKey(getEditTemplateAdvancedModelKey());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newVmTitle());
    model.setTitle(ConstantsManager.getInstance().getConstants().newVmTitle());
    model.setHelpTag(HelpTag.new_vm);
    // $NON-NLS-1$
    model.setHashName("new_vm");
    model.setIsNew(true);
    model.getVmType().setSelectedItem(template.getVmType());
    model.setCustomPropertiesKeysList(AsyncDataProvider.getInstance().getCustomPropertiesList());
    // $NON-NLS-1$
    model.setIsAdvancedModeLocalStorageKey("wa_vm_dialog");
    model.initialize(this.getSystemTreeSelectedItem());
    VmBasedWidgetSwitchModeCommand switchModeCommand = new VmBasedWidgetSwitchModeCommand();
    switchModeCommand.init(model);
    model.getCommands().add(switchModeCommand);
    model.getProvisioning().setEntity(true);
    // $NON-NLS-1$
    UICommand onSaveVmCommand = UICommand.createDefaultOkUiCommand("OnSaveVm", this);
    model.getCommands().add(onSaveVmCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(cancelCommand);
}
#method_after
private void createVMFromTemplate() {
    VmTemplate template = getSelectedItem();
    List<UICommand> commands = new ArrayList<>();
    // $NON-NLS-1$
    commands.add(UICommand.createDefaultOkUiCommand("OnSaveVm", this));
    // $NON-NLS-1$
    commands.add(UICommand.createCancelUiCommand("Cancel", this));
    setupNewVmModel(new UnitVmModel(new NewVmFromTemplateModelBehavior(template)), template.getVmType(), getSystemTreeSelectedItem(), commands);
}
#end_block

#method_before
private void onSaveVm() {
    UnitVmModel model = (UnitVmModel) getWindow();
    String name = model.getName().getEntity();
    setcurrentVm(new VM());
    validateVM(model, name);
}
#method_after
private void onSaveVm() {
    UnitVmModel model = (UnitVmModel) getWindow();
    String name = model.getName().getEntity();
    setcurrentVm(new VM());
    validateVm(model, name);
}
#end_block

#method_before
private void cancel() {
    cancelConfirmation();
    setWindow(null);
    updateActionAvailability();
}
#method_after
@Override
protected void cancel() {
    cancelConfirmation();
    setWindow(null);
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void onSelectedItemChanged() {
    super.onSelectedItemChanged();
    updateActionAvailability();
}
#method_after
@Override
protected void onSelectedItemChanged() {
    super.onSelectedItemChanged();
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void selectedItemsChanged() {
    super.selectedItemsChanged();
    updateActionAvailability();
}
#method_after
@Override
protected void selectedItemsChanged() {
    super.selectedItemsChanged();
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void selectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.selectedItemPropertyChanged(sender, e);
    if (// $NON-NLS-1$
    e.propertyName.equals("status")) {
        updateActionAvailability();
    }
}
#method_after
@Override
protected void selectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.selectedItemPropertyChanged(sender, e);
    if (// $NON-NLS-1$
    e.propertyName.equals("status")) {
        updateActionsAvailability();
    }
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    getModel().getVmId().setIsAvailable(true);
    AsyncDataProvider.getInstance().getDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final ArrayList<StoragePool> dataCenters = new ArrayList<StoragePool>();
            for (StoragePool a : (ArrayList<StoragePool>) returnValue) {
                if (a.getStatus() == StoragePoolStatus.Up) {
                    dataCenters.add(a);
                }
            }
            if (!dataCenters.isEmpty()) {
                AsyncDataProvider.getInstance().getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        List<VDSGroup> clusterList = (List<VDSGroup>) returnValue;
                        List<VDSGroup> filteredClusterList = AsyncDataProvider.getInstance().filterClustersWithoutArchitecture(clusterList);
                        model.setDataCentersAndClusters(model, dataCenters, filteredClusterList, null);
                        initCdImage();
                    }
                }), true, false);
            } else {
                getModel().disableEditing(ConstantsManager.getInstance().getConstants().notAvailableWithNoUpDC());
            }
        }
    }), true, false);
    initPriority(0);
    getModel().getVmInitModel().init(null);
    instanceTypeManager = new NewVmInstanceTypeManager(getModel());
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    getModel().getVmId().setIsAvailable(true);
    loadDataCenters();
    initPriority(0);
    getModel().getVmInitModel().init(null);
    instanceTypeManager = new NewVmInstanceTypeManager(getModel());
}
#end_block

#method_before
protected UnitVmModelNetworkAsyncCallback createUnitVmModelNetworkAsyncCallback(VM vm, UnitVmModel model) {
    // null by default. Override if needed.
    return null;
}
#method_after
protected UnitVmModelNetworkAsyncCallback createUnitVmModelNetworkAsyncCallback(VM vm, UnitVmModel model) {
    if (vm.getVmtGuid().equals(Guid.Empty)) {
        return new UnitVmModelNetworkAsyncCallback(model, addVmFromBlankTemplateNetworkManager) {

            @Override
            public void executed(FrontendActionAsyncResult result) {
                getWindow().stopProgress();
                VdcReturnValueBase returnValue = result.getReturnValue();
                if (returnValue != null && returnValue.getSucceeded()) {
                    setWindow(null);
                    updateActionsAvailability();
                    createUnitVmModelNetworkSucceeded(returnValue);
                } else {
                    cancel();
                }
                super.executed(result);
            }
        };
    }
    return new UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager);
}
#end_block

#method_before
private void newVm() {
    if (getWindow() != null) {
        return;
    }
    UnitVmModel model = new UnitVmModel(new NewVmModelBehavior());
    model.setTitle(ConstantsManager.getInstance().getConstants().newVmTitle());
    model.setHelpTag(HelpTag.new_vm);
    // $NON-NLS-1$
    model.setHashName("new_vm");
    model.setIsNew(true);
    model.getVmType().setSelectedItem(VmType.Server);
    model.setCustomPropertiesKeysList(AsyncDataProvider.getInstance().getCustomPropertiesList());
    // $NON-NLS-1$
    model.setIsAdvancedModeLocalStorageKey("wa_vm_dialog");
    setWindow(model);
    model.initialize(getSystemTreeSelectedItem());
    VmBasedWidgetSwitchModeCommand switchModeCommand = new VmBasedWidgetSwitchModeCommand();
    switchModeCommand.init(model);
    model.getCommands().add(switchModeCommand);
    model.getProvisioning().setEntity(true);
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnSave", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#method_after
private void newVm() {
    if (getWindow() != null) {
        return;
    }
    List<UICommand> commands = new ArrayList<>();
    // $NON-NLS-1$
    commands.add(UICommand.createDefaultOkUiCommand("OnSave", this));
    // $NON-NLS-1$
    commands.add(UICommand.createCancelUiCommand("Cancel", this));
    UnitVmModel model = new UnitVmModel(new NewVmModelBehavior());
    setupNewVmModel(model, VmType.Server, getSystemTreeSelectedItem(), commands);
}
#end_block

#method_before
private void preSave() {
    final UnitVmModel model = (UnitVmModel) getWindow();
    final String name = model.getName().getEntity();
    if (model.getIsNew() == false && selectedItem == null) {
        cancel();
        return;
    }
    setcurrentVm(model.getIsNew() ? new VM() : (VM) Cloner.clone(selectedItem));
    validateVM(model, name);
}
#method_after
private void preSave() {
    final UnitVmModel model = (UnitVmModel) getWindow();
    final String name = model.getName().getEntity();
    if (model.getIsNew() == false && selectedItem == null) {
        cancel();
        return;
    }
    setcurrentVm(model.getIsNew() ? new VM() : (VM) Cloner.clone(selectedItem));
    validateVm(model, name);
}
#end_block

#method_before
protected void updateVM(final UnitVmModel model) {
    final VM selectedItem = getSelectedItem();
    // explicitly pass non-editable field from the original VM
    getcurrentVm().setCreatedByUserId(selectedItem.getCreatedByUserId());
    getcurrentVm().setUseLatestVersion(model.getTemplateWithVersion().getSelectedItem().isLatest());
    if (selectedItem.isRunningOrPaused()) {
        AsyncDataProvider.getInstance().getVmChangedFieldsForNextRun(editedVm, getcurrentVm(), getUpdateVmParameters(false), new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object thisModel, Object returnValue) {
                List<String> changedFields = ((VdcQueryReturnValue) returnValue).<List<String>>getReturnValue();
                if (!changedFields.isEmpty()) {
                    VmNextRunConfigurationModel confirmModel = new VmNextRunConfigurationModel();
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle());
                    confirmModel.setHelpTag(HelpTag.edit_next_run_configuration);
                    // $NON-NLS-1$
                    confirmModel.setHashName("edit_next_run_configuration");
                    confirmModel.setChangedFields(changedFields);
                    confirmModel.setCpuPluggable(selectedItem.getCpuPerSocket() == getcurrentVm().getCpuPerSocket() && selectedItem.getNumOfSockets() != getcurrentVm().getNumOfSockets());
                    confirmModel.getCommands().add(// $NON-NLS-1$
                    new UICommand("updateExistingVm", VmListModel.this).setTitle(ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true));
                    // $NON-NLS-1$
                    confirmModel.getCommands().add(UICommand.createCancelUiCommand("CancelConfirmation", VmListModel.this));
                    setConfirmWindow(confirmModel);
                } else {
                    updateExistingVm(false);
                }
            }
        }));
    } else {
        updateExistingVm(false);
    }
}
#method_after
@Override
protected void updateVM(final UnitVmModel model) {
    final VM selectedItem = getSelectedItem();
    // explicitly pass non-editable field from the original VM
    getcurrentVm().setCreatedByUserId(selectedItem.getCreatedByUserId());
    getcurrentVm().setUseLatestVersion(model.getTemplateWithVersion().getSelectedItem().isLatest());
    if (selectedItem.isRunningOrPaused()) {
        AsyncDataProvider.getInstance().getVmChangedFieldsForNextRun(editedVm, getcurrentVm(), getUpdateVmParameters(false), new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object thisModel, Object returnValue) {
                List<String> changedFields = ((VdcQueryReturnValue) returnValue).<List<String>>getReturnValue();
                if (!changedFields.isEmpty()) {
                    VmNextRunConfigurationModel confirmModel = new VmNextRunConfigurationModel();
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle());
                    confirmModel.setHelpTag(HelpTag.edit_next_run_configuration);
                    // $NON-NLS-1$
                    confirmModel.setHashName("edit_next_run_configuration");
                    confirmModel.setChangedFields(changedFields);
                    confirmModel.setCpuPluggable(selectedItem.getCpuPerSocket() == getcurrentVm().getCpuPerSocket() && selectedItem.getNumOfSockets() != getcurrentVm().getNumOfSockets());
                    confirmModel.getCommands().add(// $NON-NLS-1$
                    new UICommand("updateExistingVm", VmListModel.this).setTitle(ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true));
                    // $NON-NLS-1$
                    confirmModel.getCommands().add(UICommand.createCancelUiCommand("CancelConfirmation", VmListModel.this));
                    setConfirmWindow(confirmModel);
                } else {
                    updateExistingVm(false);
                }
            }
        }));
    } else {
        updateExistingVm(false);
    }
}
#end_block

#method_before
public void cancel() {
    cancelConfirmation();
    setGuideContext(null);
    setWindow(null);
    updateActionAvailability();
}
#method_after
@Override
public void cancel() {
    cancelConfirmation();
    setGuideContext(null);
    setWindow(null);
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void onSelectedItemChanged() {
    super.onSelectedItemChanged();
    updateActionAvailability();
}
#method_after
@Override
protected void onSelectedItemChanged() {
    super.onSelectedItemChanged();
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void selectedItemsChanged() {
    super.selectedItemsChanged();
    updateActionAvailability();
}
#method_after
@Override
protected void selectedItemsChanged() {
    super.selectedItemsChanged();
    updateActionsAvailability();
}
#end_block

#method_before
@Override
protected void selectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.selectedItemPropertyChanged(sender, e);
    if (e.propertyName.equals("status")) {
        // $NON-NLS-1$
        updateActionAvailability();
    }
}
#method_after
@Override
protected void selectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.selectedItemPropertyChanged(sender, e);
    if (e.propertyName.equals("status")) {
        // $NON-NLS-1$
        updateActionsAvailability();
    }
}
#end_block

#method_before
public static void updateVmLock(final VM vm) {
    vm.setLockInfo(getLockManager().getLockInfo(String.format("%s%s", vm.getId(), LockingGroup.VM)));
}
#method_after
public static void updateVmLock(final VM vm) {
    vm.setLockInfo(getLockManager().getLockInfo(String.format("%s%s", vm.getId(), LockingGroup.VM.name())));
}
#end_block

#method_before
@Override
public Response doImport(Action action) {
    validateParameters(action, "storageDomain.id|name");
    Guid storageDomainId = BackendOpenStackImageProviderHelper.getStorageDomainId(this, providerId);
    ImportRepoImageParameters parameters = new ImportRepoImageParameters();
    parameters.setSourceRepoImageId(id);
    parameters.setSourceStorageDomainId(storageDomainId);
    parameters.setStoragePoolId(getDataCenterId(getStorageDomainId(action)));
    parameters.setStorageDomainId(getStorageDomainId(action));
    if (action.isSetImportAsTemplate()) {
        if (action.isImportAsTemplate()) {
            validateParameters(action, "cluster.id|name");
            parameters.setClusterId(getClusterId(action));
        }
        parameters.setImportAsTemplate(action.isImportAsTemplate());
    }
    return doAction(VdcActionType.ImportRepoImage, parameters, action, new DiskIdResolver(VdcQueryType.GetDiskByDiskId, IdQueryParameters.class));
}
#method_after
@Override
public Response doImport(Action action) {
    validateParameters(action, "storageDomain.id|name");
    Guid storageDomainId = BackendOpenStackImageProviderHelper.getStorageDomainId(this, providerId);
    ImportRepoImageParameters parameters = new ImportRepoImageParameters();
    parameters.setSourceRepoImageId(id);
    parameters.setSourceStorageDomainId(storageDomainId);
    parameters.setStoragePoolId(getDataCenterId(getStorageDomainId(action)));
    parameters.setStorageDomainId(getStorageDomainId(action));
    if (action.isSetImportAsTemplate()) {
        if (action.isImportAsTemplate()) {
            validateParameters(action, "cluster.id|name");
            parameters.setClusterId(getClusterId(action));
        }
        parameters.setImportAsTemplate(action.isImportAsTemplate());
    }
    EntityResolver resolver = new SimpleIdResolver(Disk.class, org.ovirt.engine.core.common.businessentities.Disk.class, VdcQueryType.GetDiskByDiskId, IdQueryParameters.class);
    return doAction(VdcActionType.ImportRepoImage, parameters, action, resolver);
}
#end_block

#method_before
@Override
public Response doImport(Action action) {
    validateParameters(action, "storageDomain.id|name");
    ImportRepoImageParameters importParameters = new ImportRepoImageParameters();
    importParameters.setSourceRepoImageId(id);
    importParameters.setSourceStorageDomainId(getStorageDomainId());
    importParameters.setStoragePoolId(getDataCenterId(getStorageDomainId(action)));
    importParameters.setStorageDomainId(getStorageDomainId(action));
    if (action.isSetImportAsTemplate()) {
        if (action.isImportAsTemplate()) {
            validateParameters(action, "cluster.id|name");
            importParameters.setClusterId(getClusterId(action));
            if (action.isSetTemplate() && action.getTemplate().isSetName()) {
                importParameters.setTemplateName(action.getTemplate().getName());
            }
        }
        importParameters.setImportAsTemplate(action.isImportAsTemplate());
    }
    if (action.isSetDisk()) {
        if (action.getDisk().isSetName()) {
            importParameters.setDiskAlias(action.getDisk().getName());
        }
        if (action.getDisk().isSetAlias()) {
            importParameters.setDiskAlias(action.getDisk().getAlias());
        }
    }
    return doAction(VdcActionType.ImportRepoImage, importParameters, action, new DiskIdResolver(VdcQueryType.GetDiskByDiskId, IdQueryParameters.class));
}
#method_after
@Override
public Response doImport(Action action) {
    validateParameters(action, "storageDomain.id|name");
    ImportRepoImageParameters importParameters = new ImportRepoImageParameters();
    importParameters.setSourceRepoImageId(id);
    importParameters.setSourceStorageDomainId(getStorageDomainId());
    importParameters.setStoragePoolId(getDataCenterId(getStorageDomainId(action)));
    importParameters.setStorageDomainId(getStorageDomainId(action));
    if (action.isSetImportAsTemplate()) {
        if (action.isImportAsTemplate()) {
            validateParameters(action, "cluster.id|name");
            importParameters.setClusterId(getClusterId(action));
            if (action.isSetTemplate() && action.getTemplate().isSetName()) {
                importParameters.setTemplateName(action.getTemplate().getName());
            }
        }
        importParameters.setImportAsTemplate(action.isImportAsTemplate());
    }
    if (action.isSetDisk()) {
        if (action.getDisk().isSetName()) {
            importParameters.setDiskAlias(action.getDisk().getName());
        }
        if (action.getDisk().isSetAlias()) {
            importParameters.setDiskAlias(action.getDisk().getAlias());
        }
    }
    EntityResolver resolver = new SimpleIdResolver(Disk.class, org.ovirt.engine.core.common.businessentities.Disk.class, VdcQueryType.GetDiskByDiskId, IdQueryParameters.class);
    return doAction(VdcActionType.ImportRepoImage, importParameters, action, resolver);
}
#end_block

#method_before
private void initDisksTable() {
    disksTable = new EntityModelCellTable<ListModel>(false, true);
    disksTable.enableColumnResizing();
    // $NON-NLS-1$
    disksTable.addColumn(new DiskImageStatusColumn(), constants.empty(), "30px");
    AbstractTextColumnWithTooltip<DiskImage> aliasColumn = new AbstractTextColumnWithTooltip<DiskImage>() {

        @Override
        public String getValue(DiskImage object) {
            return object.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(aliasColumn, constants.aliasDisk(), "70px");
    AbstractDiskSizeColumn<DiskImage> sizeColumn = new AbstractDiskSizeColumn<DiskImage>() {

        @Override
        protected Long getRawValue(DiskImage object) {
            return object.getSize();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(sizeColumn, constants.provisionedSizeDisk(), "70px");
    AbstractDiskSizeColumn<DiskImage> actualSizeColumn = new AbstractDiskSizeColumn<DiskImage>() {

        @Override
        protected Long getRawValue(DiskImage object) {
            return object.getActualSizeInBytes();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(actualSizeColumn, constants.sizeDisk(), "70px");
    AbstractTextColumnWithTooltip<DiskImage> allocationColumn = new AbstractEnumColumn<DiskImage, VolumeType>() {

        @Override
        protected VolumeType getRawValue(DiskImage object) {
            return VolumeType.forValue(object.getVolumeType().getValue());
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(allocationColumn, constants.allocationDisk(), "110px");
    AbstractTextColumnWithTooltip<DiskImage> interfaceColumn = new AbstractTextColumnWithTooltip<DiskImage>() {

        @Override
        public String getValue(DiskImage object) {
            return object.getDiskInterface().toString();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(interfaceColumn, constants.interfaceDisk(), "95px");
    AbstractTextColumnWithTooltip<DiskImage> statusColumn = new AbstractEnumColumn<DiskImage, ImageStatus>() {

        @Override
        protected ImageStatus getRawValue(DiskImage object) {
            return object.getImageStatus();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(statusColumn, constants.statusDisk(), "65px");
    AbstractTextColumnWithTooltip<DiskImage> dateCreatedColumn = new AbstractFullDateTimeColumn<DiskImage>() {

        @Override
        protected Date getRawValue(DiskImage object) {
            return object.getCreationDate();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(dateCreatedColumn, constants.creationDateDisk(), "80px");
    AbstractTextColumnWithTooltip<DiskImage> imageIDColumn = new AbstractTextColumnWithTooltip<DiskImage>() {

        @Override
        public String getValue(DiskImage diskImage) {
            return diskImage.getImageId().toString();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(imageIDColumn, constants.imageIDDisk(), "260px");
    AbstractTextColumnWithTooltip<DiskImage> descriptionColumn = new AbstractTextColumnWithTooltip<DiskImage>() {

        @Override
        public String getValue(DiskImage object) {
            return object.getDiskDescription();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(descriptionColumn, constants.descriptionDisk(), "80px");
    disksTable.setRowData(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    disksTable.setWidth("100%", true);
    disksTable.setSelectionModel(new NoSelectionModel());
}
#method_after
private void initDisksTable() {
    disksTable = new EntityModelCellTable<ListModel>(false, true);
    disksTable.enableColumnResizing();
    // $NON-NLS-1$
    disksTable.addColumn(new DiskImageStatusColumn(), constants.empty(), "30px");
    AbstractTextColumnWithTooltip<DiskImage> aliasColumn = new AbstractTextColumnWithTooltip<DiskImage>() {

        @Override
        public String getValue(DiskImage object) {
            return object.getDiskAlias();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(aliasColumn, constants.aliasDisk(), "70px");
    AbstractDiskSizeColumn<DiskImage> sizeColumn = new AbstractDiskSizeColumn<DiskImage>() {

        @Override
        protected Long getRawValue(DiskImage object) {
            return object.getSize();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(sizeColumn, constants.provisionedSizeDisk(), "70px");
    AbstractDiskSizeColumn<DiskImage> actualSizeColumn = new AbstractDiskSizeColumn<DiskImage>() {

        @Override
        protected Long getRawValue(DiskImage object) {
            return object.getActualSizeInBytes();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(actualSizeColumn, constants.sizeDisk(), "70px");
    AbstractTextColumnWithTooltip<DiskImage> allocationColumn = new AbstractEnumColumn<DiskImage, VolumeType>() {

        @Override
        protected VolumeType getRawValue(DiskImage object) {
            return VolumeType.forValue(object.getVolumeType().getValue());
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(allocationColumn, constants.allocationDisk(), "110px");
    AbstractTextColumnWithTooltip<DiskImage> interfaceColumn = new AbstractTextColumnWithTooltip<DiskImage>() {

        @Override
        public String getValue(DiskImage object) {
            return object.getDiskInterface().toString();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(interfaceColumn, constants.interfaceDisk(), "95px");
    AbstractTextColumnWithTooltip<DiskImage> statusColumn = new AbstractEnumColumn<DiskImage, ImageStatus>() {

        @Override
        protected ImageStatus getRawValue(DiskImage object) {
            return object.getImageStatus();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(statusColumn, constants.statusDisk(), "65px");
    AbstractTextColumnWithTooltip<DiskImage> dateCreatedColumn = new AbstractFullDateTimeColumn<DiskImage>() {

        @Override
        protected Date getRawValue(DiskImage object) {
            return object.getCreationDate();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(dateCreatedColumn, constants.creationDateDisk(), "80px");
    AbstractTextColumnWithTooltip<DiskImage> diskSnapshotIDColumn = new AbstractTextColumnWithTooltip<DiskImage>() {

        @Override
        public String getValue(DiskImage diskImage) {
            return diskImage.getImageId().toString();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(diskSnapshotIDColumn, constants.diskSnapshotIDDisk(), "260px");
    AbstractTextColumnWithTooltip<DiskImage> descriptionColumn = new AbstractTextColumnWithTooltip<DiskImage>() {

        @Override
        public String getValue(DiskImage object) {
            return object.getDiskDescription();
        }
    };
    // $NON-NLS-1$
    disksTable.addColumn(descriptionColumn, constants.descriptionDisk(), "80px");
    disksTable.setRowData(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    disksTable.setWidth("100%", true);
    disksTable.setSelectionModel(new NoSelectionModel());
}
#end_block

#method_before
private GlusterGeoRepSessionConfiguration getGlusterGeoRepSessionConfig() {
    GlusterGeoRepSessionConfiguration sessionConfig = new GlusterGeoRepSessionConfiguration();
    sessionConfig.setId(FixturesTool.GLUSTER_GEOREP_SESSION_ID);
    sessionConfig.setKey("georep-crawl");
    sessionConfig.setValue("changelog");
    return sessionConfig;
}
#method_after
private GlusterGeoRepSessionConfiguration getGlusterGeoRepSessionConfig() {
    GlusterGeoRepSessionConfiguration sessionConfig = new GlusterGeoRepSessionConfiguration();
    sessionConfig.setId(FixturesTool.GLUSTER_GEOREP_SESSION_ID);
    sessionConfig.setKey("georep-crawl");
    sessionConfig.setDescription("Geo-replication session  crawl");
    sessionConfig.setValue("changelog");
    return sessionConfig;
}
#end_block

#method_before
@Override
public GlusterGeoRepSession mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterGeoRepSession entity = new GlusterGeoRepSession();
    entity.setId(getGuidDefaultEmpty(rs, "session_id"));
    entity.setMasterVolumeId(getGuidDefaultEmpty(rs, "master_volume_id"));
    entity.setSessionKey(rs.getString("session_key"));
    entity.setSlaveHostName(rs.getString("slave_host_name"));
    entity.setSlaveNodeUuid(getGuid(rs, "slave_host_uuid"));
    entity.setSlaveVolumeId(getGuid(rs, "slave_volume_id"));
    entity.setSlaveVolumeName(rs.getString("slave_volume_name"));
    entity.setStatus(GeoRepSessionStatus.from(rs.getString("status")));
    return entity;
}
#method_after
@Override
public GlusterGeoRepSession mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterGeoRepSession entity = new GlusterGeoRepSession();
    entity.setId(getGuidDefaultEmpty(rs, "session_id"));
    entity.setMasterVolumeId(getGuidDefaultEmpty(rs, "master_volume_id"));
    entity.setMasterVolumeName(rs.getString("master_volume_name"));
    entity.setSessionKey(rs.getString("session_key"));
    entity.setSlaveHostName(rs.getString("slave_host_name"));
    entity.setSlaveNodeUuid(getGuid(rs, "slave_host_uuid"));
    entity.setSlaveVolumeId(getGuid(rs, "slave_volume_id"));
    entity.setSlaveVolumeName(rs.getString("slave_volume_name"));
    entity.setStatus(GeoRepSessionStatus.valueOf(rs.getString("status")));
    return entity;
}
#end_block

#method_before
@Override
public GlusterGeoRepSessionConfiguration mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterGeoRepSessionConfiguration entity = new GlusterGeoRepSessionConfiguration();
    entity.setId(getGuidDefaultEmpty(rs, "session_id"));
    entity.setKey(rs.getString("config_key"));
    entity.setValue(rs.getString("config_value"));
    return entity;
}
#method_after
@Override
public GlusterGeoRepSessionConfiguration mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterGeoRepSessionConfiguration entity = new GlusterGeoRepSessionConfiguration();
    entity.setId(getGuidDefaultEmpty(rs, "session_id"));
    entity.setKey(rs.getString("config_key"));
    entity.setValue(rs.getString("config_value"));
    entity.setDescription(rs.getString("config_description"));
    entity.setAllowedValues(Arrays.asList(rs.getString("config_possible_values").split(";")));
    return entity;
}
#end_block

#method_before
@Override
public List<GlusterGeoRepSessionDetails> getGeoRepSessionDetails(Guid sessionId) {
    return getCallsHandler().executeReadList("GetGlusterGeoRepSessionDetails", georepSessionDetailsRowMapper, createIdParameterMapper(sessionId));
}
#method_after
@Override
public GlusterGeoRepSessionDetails getGeoRepSessionDetails(Guid sessionId, Guid masterBrickId) {
    return getCallsHandler().executeRead("GetGlusterGeoRepSessionDetailsForBrick", georepSessionDetailsRowMapper, createIdParameterMapper(sessionId).addValue("master_brick_id", masterBrickId));
}
#end_block

#method_before
protected MapSqlParameterSource createFullParametersMapper(GlusterGeoRepSessionConfiguration geoRepSessionConfig) {
    return createIdParameterMapper(geoRepSessionConfig.getId()).addValue("config_key", geoRepSessionConfig.getKey()).addValue("config_value", geoRepSessionConfig.getValue());
}
#method_after
protected MapSqlParameterSource createFullParametersMapper(GlusterGeoRepSessionConfiguration geoRepSessionConfig) {
    return createIdParameterMapper(geoRepSessionConfig.getId()).addValue("config_key", geoRepSessionConfig.getKey()).addValue("config_value", geoRepSessionConfig.getValue()).addValue("config_description", geoRepSessionConfig.getDescription()).addValue("config_possible_values", geoRepSessionConfig.getAllowedValues());
}
#end_block

#method_before
@Override
public void updateSession(GlusterGeoRepSession geoRepSession) {
    getCallsHandler().executeModification("UpdateGlusterGeoRepSessionStatus", createIdParameterMapper(geoRepSession.getId()).addValue("status", geoRepSession.getStatus()));
}
#method_after
@Override
public void updateSession(GlusterGeoRepSession geoRepSession) {
    getCallsHandler().executeModification("UpdateGlusterGeoRepSession", createIdParameterMapper(geoRepSession.getId()).addValue("status", EnumUtils.nameOrNull(geoRepSession.getStatus())).addValue("slave_host_uuid", geoRepSession.getSlaveNodeUuid()).addValue("slave_volume_id", geoRepSession.getSlaveVolumeId()));
}
#end_block

#method_before
public void run() {
    JsonRpcRequest request = null;
    try {
        request = JsonRpcRequest.fromByteArray(message);
        ContextHolder.init();
        ContextHolder.setServerName(client.getHostname());
        ResponseBuilder builder = new ResponseBuilder(request.getId());
        String methodName = request.getMethod();
        builder = CommandFactory.createCommand(methodName).run(request.getParams(), builder);
        send(builder.build(), request.getMethod());
    } catch (Throwable e) {
        log.error("Failure in processing request", e);
        Map<String, Object> error = new HashMap<>();
        error.put("code", 100);
        error.put("message", e.getMessage());
        send(new ResponseBuilder(request.getId()).withError(error).build(), request.getMethod());
    }
}
#method_after
public void run() {
    JsonRpcRequest request = null;
    try {
        request = JsonRpcRequest.fromByteArray(message);
        ContextHolder.init();
        ContextHolder.setServerName(client.getHostname());
        ResponseBuilder builder = new ResponseBuilder(request.getId());
        String methodName = request.getMethod();
        builder = CommandFactory.createCommand(methodName).run(request.getParams(), builder);
        send(builder.build(), request.getMethod());
    } catch (Throwable e) {
        log.error("Failure in processing request", e);
        Map<String, Object> error = new HashMap<>();
        error.put("code", 100);
        error.put("message", e.getMessage());
        if (request != null) {
            send(new ResponseBuilder(request.getId()).withError(error).build(), request.getMethod());
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    GlusterVolumeEntity glusterVolume = getGlusterVolume();
    if (!super.canDoAction()) {
        return false;
    }
    if (!GlusterFeatureSupported.glusterAsyncTasks(getVdsGroup().getCompatibilityVersion())) {
        return failCanDoAction(VdcBllMessages.GLUSTER_TASKS_NOT_SUPPORTED_FOR_CLUSTER_LEVEL, String.format("$%1$s %2$s", "compatibilityVersion", getVdsGroup().getCompatibilityVersion().getValue()));
    }
    if (!glusterVolume.isOnline()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    GlusterVolumeEntity glusterVolume = getGlusterVolume();
    if (!super.canDoAction()) {
        return false;
    }
    if (!GlusterFeatureSupported.glusterAsyncTasks(getVdsGroup().getCompatibilityVersion())) {
        addCanDoActionMessageVariable("compatibilityVersion", getVdsGroup().getCompatibilityVersion().getValue());
        return failCanDoAction(VdcBllMessages.GLUSTER_TASKS_NOT_SUPPORTED_FOR_CLUSTER_LEVEL);
    }
    if (!glusterVolume.isOnline()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED);
    }
    return true;
}
#end_block

#method_before
public String getHibernationVolHandle() {
    return this.vmDynamic.getHibernationVolHandle();
}
#method_after
public String getHibernationVolHandle() {
    return hibernationVolHandle;
}
#end_block

#method_before
public void setHibernationVolHandle(String value) {
    this.vmDynamic.setHibernationVolHandle(value);
}
#method_after
public void setHibernationVolHandle(String value) {
    this.hibernationVolHandle = value;
}
#end_block

#method_before
public void updateRunTimeDynamicData(VmDynamic vm, Guid vdsId, String vdsName) {
    setStatus(vm.getStatus());
    setRunOnVds(vdsId);
    setRunOnVdsName(vdsName);
    setDisplay(vm.getDisplay());
    setDisplaySecurePort(vm.getDisplaySecurePort());
    setVmHost(vm.getVmHost());
    setVmIp(vm.getVmIp());
    setVmFQDN(vm.getVmFQDN());
    // update only if vdsm actually provides some value, otherwise engine has more information
    if (vm.getCurrentCd() != null) {
        setCurrentCd(vm.getCurrentCd());
    }
    // if (!string.IsNullOrEmpty(vm.app_list))
    // {
    setAppList(vm.getAppList());
    // }
    setGuestOs(vm.getGuestOs());
    setDisplayType(vm.getDisplayType());
    getDynamicData().setVncKeyboardLayout(vm.getVncKeyboardLayout());
    setDisplayIp(vm.getDisplayIp());
    setKvmEnable(vm.getKvmEnable());
    setAcpiEnable(vm.getAcpiEnable());
    setGuestCurrentUserName(vm.getGuestCurrentUserName());
    setWin2kHackEnable(vm.getWin2kHackEnable());
    setUtcDiff(vm.getUtcDiff());
    setExitStatus(vm.getExitStatus());
    setExitMessage(vm.getExitMessage());
    setExitReason(vm.getExitReason());
    setClientIp(vm.getClientIp());
    setVmPauseStatus(vm.getPauseStatus());
    setLastWatchdogEvent(vm.getLastWatchdogEvent());
    setGuestCpuCount(vm.getGuestCpuCount());
// TODO: check what to do with update disk data
// updateDisksData(vm);
// updateSession(vm);
}
#method_after
public void updateRunTimeDynamicData(VmDynamic vm, Guid vdsId, String vdsName) {
    setStatus(vm.getStatus());
    setRunOnVds(vdsId);
    setRunOnVdsName(vdsName);
    setVmHost(vm.getVmHost());
    setVmIp(vm.getVmIp());
    setVmFQDN(vm.getVmFQDN());
    // update only if vdsm actually provides some value, otherwise engine has more information
    if (vm.getCurrentCd() != null) {
        setCurrentCd(vm.getCurrentCd());
    }
    // if (!string.IsNullOrEmpty(vm.app_list))
    // {
    setAppList(vm.getAppList());
    // }
    setGuestOs(vm.getGuestOs());
    getDynamicData().setVncKeyboardLayout(vm.getVncKeyboardLayout());
    setKvmEnable(vm.getKvmEnable());
    setAcpiEnable(vm.getAcpiEnable());
    setGuestCurrentUserName(vm.getGuestCurrentUserName());
    setWin2kHackEnable(vm.getWin2kHackEnable());
    setUtcDiff(vm.getUtcDiff());
    setExitStatus(vm.getExitStatus());
    setExitMessage(vm.getExitMessage());
    setExitReason(vm.getExitReason());
    setClientIp(vm.getClientIp());
    setVmPauseStatus(vm.getPauseStatus());
    setLastWatchdogEvent(vm.getLastWatchdogEvent());
    setGuestCpuCount(vm.getGuestCpuCount());
    getGraphicsInfos().putAll(vm.getGraphicsInfos());
// TODO: check what to do with update disk data
// updateDisksData(vm);
// updateSession(vm);
}
#end_block

#method_before
@Override
protected MapSqlParameterSource createFullParametersMapper(VmDynamic vm) {
    return createIdParameterMapper(vm.getId()).addValue("app_list", vm.getAppList()).addValue("guest_cur_user_name", vm.getGuestCurrentUserName()).addValue("console_cur_user_name", vm.getConsoleCurrentUserName()).addValue("console_user_id", vm.getConsoleUserId()).addValue("guest_os", vm.getGuestOs()).addValue("migrating_to_vds", vm.getMigratingToVds()).addValue("run_on_vds", vm.getRunOnVds()).addValue("status", vm.getStatus()).addValue("vm_host", vm.getVmHost()).addValue("vm_ip", vm.getVmIp()).addValue("vm_fqdn", vm.getVmFQDN()).addValue("last_start_time", vm.getLastStartTime()).addValue("last_stop_time", vm.getLastStopTime()).addValue("vm_pid", vm.getVmPid()).addValue("display", vm.getDisplay()).addValue("acpi_enable", vm.getAcpiEnable()).addValue("session", vm.getSession()).addValue("display_ip", vm.getDisplayIp()).addValue("display_type", vm.getDisplayType()).addValue("kvm_enable", vm.getKvmEnable()).addValue("boot_sequence", vm.getBootSequence()).addValue("display_secure_port", vm.getDisplaySecurePort()).addValue("utc_diff", vm.getUtcDiff()).addValue("last_vds_run_on", vm.getLastVdsRunOn()).addValue("client_ip", vm.getClientIp()).addValue("guest_requested_memory", vm.getGuestRequestedMemory()).addValue("hibernation_vol_handle", vm.getHibernationVolHandle()).addValue("exit_status", vm.getExitStatus().getValue()).addValue("pause_status", vm.getPauseStatus().getValue()).addValue("exit_message", vm.getExitMessage()).addValue("hash", vm.getHash()).addValue("guest_agent_nics_hash", vm.getGuestAgentNicsHash()).addValue("last_watchdog_event", vm.getLastWatchdogEvent()).addValue("last_watchdog_action", vm.getLastWatchdogAction()).addValue("is_run_once", vm.isRunOnce()).addValue("cpu_name", vm.getCpuName()).addValue("current_cd", vm.getCurrentCd()).addValue("reason", vm.getStopReason()).addValue("exit_reason", vm.getExitReason().getValue()).addValue("guest_cpu_count", vm.getGuestCpuCount()).addValue("emulated_machine", vm.getEmulatedMachine());
}
#method_after
@Override
protected MapSqlParameterSource createFullParametersMapper(VmDynamic vm) {
    GraphicsInfo spice = vm.getGraphicsInfos().get(GraphicsType.SPICE);
    GraphicsInfo vnc = vm.getGraphicsInfos().get(GraphicsType.VNC);
    return createIdParameterMapper(vm.getId()).addValue("app_list", vm.getAppList()).addValue("guest_cur_user_name", vm.getGuestCurrentUserName()).addValue("console_cur_user_name", vm.getConsoleCurrentUserName()).addValue("console_user_id", vm.getConsoleUserId()).addValue("guest_os", vm.getGuestOs()).addValue("migrating_to_vds", vm.getMigratingToVds()).addValue("run_on_vds", vm.getRunOnVds()).addValue("status", vm.getStatus()).addValue("vm_host", vm.getVmHost()).addValue("vm_ip", vm.getVmIp()).addValue("vm_fqdn", vm.getVmFQDN()).addValue("last_start_time", vm.getLastStartTime()).addValue("last_stop_time", vm.getLastStopTime()).addValue("vm_pid", vm.getVmPid()).addValue("acpi_enable", vm.getAcpiEnable()).addValue("session", vm.getSession()).addValue("kvm_enable", vm.getKvmEnable()).addValue("boot_sequence", vm.getBootSequence()).addValue("utc_diff", vm.getUtcDiff()).addValue("last_vds_run_on", vm.getLastVdsRunOn()).addValue("client_ip", vm.getClientIp()).addValue("guest_requested_memory", vm.getGuestRequestedMemory()).addValue("exit_status", vm.getExitStatus().getValue()).addValue("pause_status", vm.getPauseStatus().getValue()).addValue("exit_message", vm.getExitMessage()).addValue("hash", vm.getHash()).addValue("guest_agent_nics_hash", vm.getGuestAgentNicsHash()).addValue("last_watchdog_event", vm.getLastWatchdogEvent()).addValue("last_watchdog_action", vm.getLastWatchdogAction()).addValue("is_run_once", vm.isRunOnce()).addValue("cpu_name", vm.getCpuName()).addValue("guest_agent_status", vm.getGuestAgentStatus().getValue()).addValue("current_cd", vm.getCurrentCd()).addValue("reason", vm.getStopReason()).addValue("exit_reason", vm.getExitReason().getValue()).addValue("guest_cpu_count", vm.getGuestCpuCount()).addValue("emulated_machine", vm.getEmulatedMachine()).addValue("spice_port", spice != null ? spice.getPort() : null).addValue("spice_tls_port", spice != null ? spice.getTlsPort() : null).addValue("spice_ip", spice != null ? spice.getIp() : null).addValue("vnc_port", vnc != null ? vnc.getPort() : null).addValue("vnc_ip", vnc != null ? vnc.getIp() : null);
}
#end_block

#method_before
@Override
public VmDynamic mapRow(ResultSet rs, int rowNum) throws SQLException {
    VmDynamic entity = new VmDynamic();
    entity.setAppList(rs.getString("app_list"));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setConsoleUserId(getGuid(rs, "console_user_id"));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setMigratingToVds(getGuid(rs, "migrating_to_vds"));
    entity.setRunOnVds(getGuid(rs, "run_on_vds"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmFQDN(rs.getString("vm_fqdn"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setLastStopTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_stop_time")));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setLastVdsRunOn(getGuid(rs, "last_vds_run_on"));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    VmExitStatus exitStatus = VmExitStatus.forValue(rs.getInt("exit_status"));
    VmPauseStatus pauseStatus = VmPauseStatus.forValue(rs.getInt("pause_status"));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(exitStatus);
    entity.setPauseStatus(pauseStatus);
    entity.setHash(rs.getString("hash"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setLastWatchdogEvent(getLong(rs, "last_watchdog_event"));
    entity.setLastWatchdogAction(rs.getString("last_watchdog_action"));
    entity.setRunOnce(rs.getBoolean("is_run_once"));
    entity.setCpuName(rs.getString("cpu_name"));
    entity.setCurrentCd(rs.getString("current_cd"));
    entity.setStopReason(rs.getString("reason"));
    VmExitReason exitReason = VmExitReason.forValue(rs.getInt("exit_reason"));
    entity.setExitReason(exitReason);
    entity.setGuestCpuCount(rs.getInt("guest_cpu_count"));
    entity.setEmulatedMachine(rs.getString("emulated_machine"));
    return entity;
}
#method_after
@Override
public VmDynamic mapRow(ResultSet rs, int rowNum) throws SQLException {
    VmDynamic entity = new VmDynamic();
    entity.setAppList(rs.getString("app_list"));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setConsoleUserId(getGuid(rs, "console_user_id"));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setMigratingToVds(getGuid(rs, "migrating_to_vds"));
    entity.setRunOnVds(getGuid(rs, "run_on_vds"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmFQDN(rs.getString("vm_fqdn"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setLastStopTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_stop_time")));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setLastVdsRunOn(getGuid(rs, "last_vds_run_on"));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    VmExitStatus exitStatus = VmExitStatus.forValue(rs.getInt("exit_status"));
    VmPauseStatus pauseStatus = VmPauseStatus.forValue(rs.getInt("pause_status"));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(exitStatus);
    entity.setPauseStatus(pauseStatus);
    entity.setHash(rs.getString("hash"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setLastWatchdogEvent(getLong(rs, "last_watchdog_event"));
    entity.setLastWatchdogAction(rs.getString("last_watchdog_action"));
    entity.setRunOnce(rs.getBoolean("is_run_once"));
    entity.setCpuName(rs.getString("cpu_name"));
    entity.setGuestAgentStatus(GuestAgentStatus.forValue(rs.getInt("guest_agent_status")));
    entity.setCurrentCd(rs.getString("current_cd"));
    entity.setStopReason(rs.getString("reason"));
    VmExitReason exitReason = VmExitReason.forValue(rs.getInt("exit_reason"));
    entity.setExitReason(exitReason);
    entity.setGuestCpuCount(rs.getInt("guest_cpu_count"));
    entity.setEmulatedMachine(rs.getString("emulated_machine"));
    setGraphicsToEntity(rs, entity);
    return entity;
}
#end_block

#method_before
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) {
    // do the state transition only if that VM is really running on SRC
    if (getVdsId().equals(curVm.getRunOnVds())) {
        ResourceManager.getInstance().InternalSetVmStatus(curVm, parameters.getGracefully() ? VMStatus.PoweringDown : VMStatus.Down);
    }
}
#method_after
private void changeStatus(DestroyVmVDSCommandParameters parameters, VM curVm) {
    // do the state transition only if that VM is really running on SRC
    if (getParameters().getVdsId().equals(curVm.getRunOnVds())) {
        ResourceManager.getInstance().InternalSetVmStatus(curVm, parameters.getGracefully() ? VMStatus.PoweringDown : VMStatus.Down);
    }
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((acpiEnabled == null) ? 0 : acpiEnabled.hashCode());
    result = prime * result + ((appList == null) ? 0 : appList.hashCode());
    result = prime * result + bootSequence.hashCode();
    result = prime * result + ((clientIp == null) ? 0 : clientIp.hashCode());
    result = prime * result + ((display == null) ? 0 : display.hashCode());
    result = prime * result + ((displayIp == null) ? 0 : displayIp.hashCode());
    result = prime * result + ((displaySecurePort == null) ? 0 : displaySecurePort.hashCode());
    result = prime * result + displayType.hashCode();
    result = prime * result + ((vncKeyboardLayout == null) ? 0 : vncKeyboardLayout.hashCode());
    result = prime * result + ((consoleCurrentUserName == null) ? 0 : consoleCurrentUserName.hashCode());
    result = prime * result + ((guestCurUserName == null) ? 0 : guestCurUserName.hashCode());
    result = prime * result + ((consoleUserId == null) ? 0 : consoleUserId.hashCode());
    result = prime * result + ((guestOs == null) ? 0 : guestOs.hashCode());
    result = prime * result + ((guestRequestedMemory == null) ? 0 : guestRequestedMemory.hashCode());
    result = prime * result + ((hibernationVolHandle == null) ? 0 : hibernationVolHandle.hashCode());
    result = prime * result + ((kvmEnable == null) ? 0 : kvmEnable.hashCode());
    result = prime * result + ((lastVdsRunOn == null) ? 0 : lastVdsRunOn.hashCode());
    result = prime * result + ((disks == null) ? 0 : disks.hashCode());
    result = prime * result + ((exitMessage == null) ? 0 : exitMessage.hashCode());
    result = prime * result + exitStatus.hashCode();
    result = prime * result + (win2kHackEnabled ? 1231 : 1237);
    result = prime * result + ((migratingToVds == null) ? 0 : migratingToVds.hashCode());
    result = prime * result + ((pauseStatus == null) ? 0 : pauseStatus.hashCode());
    result = prime * result + ((runOnVds == null) ? 0 : runOnVds.hashCode());
    result = prime * result + session.hashCode();
    result = prime * result + status.hashCode();
    result = prime * result + ((utcDiff == null) ? 0 : utcDiff.hashCode());
    result = prime * result + ((vmHost == null) ? 0 : vmHost.hashCode());
    result = prime * result + ((vmIp == null) ? 0 : vmIp.hashCode());
    result = prime * result + ((vmFQDN == null) ? 0 : vmFQDN.hashCode());
    result = prime * result + ((lastStartTime == null) ? 0 : lastStartTime.hashCode());
    result = prime * result + ((lastStopTime == null) ? 0 : lastStopTime.hashCode());
    result = prime * result + ((vmPid == null) ? 0 : vmPid.hashCode());
    result = prime * result + (lastWatchdogEvent == null ? 0 : lastWatchdogEvent.hashCode());
    result = prime * result + (lastWatchdogAction == null ? 0 : lastWatchdogAction.hashCode());
    result = prime * result + (runOnce ? 1231 : 1237);
    result = prime * result + (cpuName == null ? 0 : cpuName.hashCode());
    result = prime * result + (currentCd == null ? 0 : currentCd.hashCode());
    result = prime * result + (stopReason == null ? 0 : stopReason.hashCode());
    result = prime * result + exitReason.hashCode();
    result = prime * result + (emulatedMachine == null ? 0 : emulatedMachine.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((acpiEnabled == null) ? 0 : acpiEnabled.hashCode());
    result = prime * result + ((appList == null) ? 0 : appList.hashCode());
    result = prime * result + bootSequence.hashCode();
    result = prime * result + ((clientIp == null) ? 0 : clientIp.hashCode());
    result = prime * result + ((vncKeyboardLayout == null) ? 0 : vncKeyboardLayout.hashCode());
    result = prime * result + ((consoleCurrentUserName == null) ? 0 : consoleCurrentUserName.hashCode());
    result = prime * result + ((guestCurUserName == null) ? 0 : guestCurUserName.hashCode());
    result = prime * result + ((consoleUserId == null) ? 0 : consoleUserId.hashCode());
    result = prime * result + ((guestOs == null) ? 0 : guestOs.hashCode());
    result = prime * result + ((guestRequestedMemory == null) ? 0 : guestRequestedMemory.hashCode());
    result = prime * result + ((kvmEnable == null) ? 0 : kvmEnable.hashCode());
    result = prime * result + ((lastVdsRunOn == null) ? 0 : lastVdsRunOn.hashCode());
    result = prime * result + ((disks == null) ? 0 : disks.hashCode());
    result = prime * result + ((exitMessage == null) ? 0 : exitMessage.hashCode());
    result = prime * result + exitStatus.hashCode();
    result = prime * result + (win2kHackEnabled ? 1231 : 1237);
    result = prime * result + ((migratingToVds == null) ? 0 : migratingToVds.hashCode());
    result = prime * result + ((pauseStatus == null) ? 0 : pauseStatus.hashCode());
    result = prime * result + ((runOnVds == null) ? 0 : runOnVds.hashCode());
    result = prime * result + session.hashCode();
    result = prime * result + status.hashCode();
    result = prime * result + ((utcDiff == null) ? 0 : utcDiff.hashCode());
    result = prime * result + ((vmHost == null) ? 0 : vmHost.hashCode());
    result = prime * result + ((vmIp == null) ? 0 : vmIp.hashCode());
    result = prime * result + ((vmFQDN == null) ? 0 : vmFQDN.hashCode());
    result = prime * result + ((lastStartTime == null) ? 0 : lastStartTime.hashCode());
    result = prime * result + ((lastStopTime == null) ? 0 : lastStopTime.hashCode());
    result = prime * result + ((vmPid == null) ? 0 : vmPid.hashCode());
    result = prime * result + (lastWatchdogEvent == null ? 0 : lastWatchdogEvent.hashCode());
    result = prime * result + (lastWatchdogAction == null ? 0 : lastWatchdogAction.hashCode());
    result = prime * result + (runOnce ? 1231 : 1237);
    result = prime * result + (cpuName == null ? 0 : cpuName.hashCode());
    result = prime * result + (guestAgentStatus == null ? 0 : guestAgentStatus.hashCode());
    result = prime * result + (currentCd == null ? 0 : currentCd.hashCode());
    result = prime * result + (stopReason == null ? 0 : stopReason.hashCode());
    result = prime * result + exitReason.hashCode();
    result = prime * result + (emulatedMachine == null ? 0 : emulatedMachine.hashCode());
    result = prime * result + graphicsInfos.hashCode();
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VmDynamic other = (VmDynamic) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(acpiEnabled, other.acpiEnabled) && ObjectUtils.objectsEqual(appList, other.appList) && bootSequence == other.bootSequence && ObjectUtils.objectsEqual(clientIp, other.clientIp) && ObjectUtils.objectsEqual(display, other.display) && ObjectUtils.objectsEqual(displayIp, other.displayIp) && ObjectUtils.objectsEqual(displaySecurePort, other.displaySecurePort) && displayType == other.displayType && ObjectUtils.objectsEqual(vncKeyboardLayout, other.vncKeyboardLayout) && ObjectUtils.objectsEqual(consoleCurrentUserName, other.consoleCurrentUserName) && ObjectUtils.objectsEqual(guestCurUserName, other.guestCurUserName) && ObjectUtils.objectsEqual(consoleUserId, other.consoleUserId) && ObjectUtils.objectsEqual(guestOs, other.guestOs) && ObjectUtils.objectsEqual(guestRequestedMemory, other.guestRequestedMemory) && ObjectUtils.objectsEqual(hibernationVolHandle, other.hibernationVolHandle) && ObjectUtils.objectsEqual(kvmEnable, other.kvmEnable) && ObjectUtils.objectsEqual(lastVdsRunOn, other.lastVdsRunOn) && ObjectUtils.objectsEqual(disks, other.disks) && ObjectUtils.objectsEqual(exitMessage, other.exitMessage) && exitStatus == other.exitStatus && win2kHackEnabled == other.win2kHackEnabled && ObjectUtils.objectsEqual(migratingToVds, other.migratingToVds) && pauseStatus == other.pauseStatus && ObjectUtils.objectsEqual(runOnVds, other.runOnVds) && session == other.session && status == other.status && ObjectUtils.objectsEqual(utcDiff, other.utcDiff) && ObjectUtils.objectsEqual(vmHost, other.vmHost) && ObjectUtils.objectsEqual(vmIp, other.vmIp) && ObjectUtils.objectsEqual(vmFQDN, other.vmFQDN) && ObjectUtils.objectsEqual(lastStartTime, other.lastStartTime) && ObjectUtils.objectsEqual(lastStopTime, other.lastStopTime) && ObjectUtils.objectsEqual(vmPid, other.vmPid) && ObjectUtils.objectsEqual(lastWatchdogEvent, other.lastWatchdogEvent) && ObjectUtils.objectsEqual(lastWatchdogAction, other.lastWatchdogAction) && runOnce == other.runOnce && ObjectUtils.objectsEqual(cpuName, other.cpuName) && ObjectUtils.objectsEqual(currentCd, other.currentCd) && ObjectUtils.objectsEqual(stopReason, other.stopReason) && exitReason == other.exitReason && ObjectUtils.objectsEqual(emulatedMachine, other.emulatedMachine));
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VmDynamic other = (VmDynamic) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(acpiEnabled, other.acpiEnabled) && ObjectUtils.objectsEqual(appList, other.appList) && bootSequence == other.bootSequence && ObjectUtils.objectsEqual(clientIp, other.clientIp) && ObjectUtils.objectsEqual(vncKeyboardLayout, other.vncKeyboardLayout) && ObjectUtils.objectsEqual(consoleCurrentUserName, other.consoleCurrentUserName) && ObjectUtils.objectsEqual(guestCurUserName, other.guestCurUserName) && ObjectUtils.objectsEqual(consoleUserId, other.consoleUserId) && ObjectUtils.objectsEqual(guestOs, other.guestOs) && ObjectUtils.objectsEqual(guestRequestedMemory, other.guestRequestedMemory) && ObjectUtils.objectsEqual(kvmEnable, other.kvmEnable) && ObjectUtils.objectsEqual(lastVdsRunOn, other.lastVdsRunOn) && ObjectUtils.objectsEqual(disks, other.disks) && ObjectUtils.objectsEqual(exitMessage, other.exitMessage) && exitStatus == other.exitStatus && win2kHackEnabled == other.win2kHackEnabled && ObjectUtils.objectsEqual(migratingToVds, other.migratingToVds) && pauseStatus == other.pauseStatus && ObjectUtils.objectsEqual(runOnVds, other.runOnVds) && session == other.session && status == other.status && ObjectUtils.objectsEqual(utcDiff, other.utcDiff) && ObjectUtils.objectsEqual(vmHost, other.vmHost) && ObjectUtils.objectsEqual(vmIp, other.vmIp) && ObjectUtils.objectsEqual(vmFQDN, other.vmFQDN) && ObjectUtils.objectsEqual(lastStartTime, other.lastStartTime) && ObjectUtils.objectsEqual(lastStopTime, other.lastStopTime) && ObjectUtils.objectsEqual(vmPid, other.vmPid) && ObjectUtils.objectsEqual(lastWatchdogEvent, other.lastWatchdogEvent) && ObjectUtils.objectsEqual(lastWatchdogAction, other.lastWatchdogAction) && runOnce == other.runOnce && ObjectUtils.objectsEqual(cpuName, other.cpuName) && ObjectUtils.objectsEqual(guestAgentStatus, other.guestAgentStatus) && ObjectUtils.objectsEqual(currentCd, other.currentCd) && ObjectUtils.objectsEqual(stopReason, other.stopReason) && exitReason == other.exitReason && ObjectUtils.objectsEqual(emulatedMachine, other.emulatedMachine)) && ObjectUtils.objectsEqual(graphicsInfos, other.getGraphicsInfos());
}
#end_block

#method_before
public static StoragePool buildStoragePool(Map<String, Object> xmlRpcStruct) {
    StoragePool sPool = new StoragePool();
    if (xmlRpcStruct.containsKey("type")) {
        sPool.setIsLocal(StorageType.valueOf(xmlRpcStruct.get("type").toString()).isLocal());
    }
    sPool.setName(AssignStringValue(xmlRpcStruct, "name"));
    Integer masterVersion = AssignIntValue(xmlRpcStruct, "master_ver");
    if (masterVersion != null) {
        sPool.setmaster_domain_version(masterVersion);
    }
    return sPool;
}
#method_after
public static StoragePool buildStoragePool(Map<String, Object> xmlRpcStruct) {
    StoragePool sPool = new StoragePool();
    if (xmlRpcStruct.containsKey("type")) {
        sPool.setIsLocal(StorageType.valueOf(xmlRpcStruct.get("type").toString()).isLocal());
    }
    sPool.setName(AssignStringValue(xmlRpcStruct, "name"));
    Integer masterVersion = AssignIntValue(xmlRpcStruct, "master_ver");
    if (masterVersion != null) {
        sPool.setMasterDomainVersion(masterVersion);
    }
    return sPool;
}
#end_block

#method_before
public static void updateVMDynamicData(VmDynamic vm, Map<String, Object> xmlRpcStruct) {
    if (xmlRpcStruct.containsKey(VdsProperties.vm_guid)) {
        vm.setId(new Guid((String) xmlRpcStruct.get(VdsProperties.vm_guid)));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.session)) {
        String session = (String) xmlRpcStruct.get(VdsProperties.session);
        try {
            vm.setSession(SessionState.valueOf(session));
        } catch (Exception e) {
            log.error("Illegal vm session '{}'.", session);
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.kvmEnable)) {
        vm.setKvmEnable(Boolean.parseBoolean((String) xmlRpcStruct.get(VdsProperties.kvmEnable)));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.acpiEnable)) {
        vm.setAcpiEnable(Boolean.parseBoolean((String) xmlRpcStruct.get(VdsProperties.acpiEnable)));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.win2kHackEnable)) {
        vm.setWin2kHackEnable(Boolean.parseBoolean((String) xmlRpcStruct.get(VdsProperties.win2kHackEnable)));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.status)) {
        vm.setStatus(convertToVmStatus((String) xmlRpcStruct.get(VdsProperties.status)));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.display_port)) {
        try {
            vm.setDisplay(Integer.parseInt(xmlRpcStruct.get(VdsProperties.display_port).toString()));
        } catch (NumberFormatException e) {
            log.error("Illegal vm display_port '{}'.", xmlRpcStruct.get(VdsProperties.display_port));
        }
    } else if (xmlRpcStruct.containsKey(VdsProperties.display)) {
        try {
            vm.setDisplay(VNC_START_PORT + Integer.parseInt(xmlRpcStruct.get(VdsProperties.display).toString()));
        } catch (NumberFormatException e) {
            log.error("Illegal vm display '{}'.", xmlRpcStruct.get(VdsProperties.display));
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.display_secure_port)) {
        try {
            vm.setDisplaySecurePort(Integer.parseInt(xmlRpcStruct.get(VdsProperties.display_secure_port).toString()));
        } catch (NumberFormatException e) {
            log.error("Illegal vm display_secure_port '{}'.", xmlRpcStruct.get(VdsProperties.display_secure_port));
        }
    }
    if (xmlRpcStruct.containsKey((VdsProperties.displayType))) {
        String displayType = xmlRpcStruct.get(VdsProperties.displayType).toString();
        try {
            vm.setDisplayType(DisplayType.valueOf(displayType));
        } catch (Exception e2) {
            log.error("Illegal vm display type '{}'.", displayType);
        }
    }
    if (xmlRpcStruct.containsKey((VdsProperties.displayIp))) {
        vm.setDisplayIp((String) xmlRpcStruct.get(VdsProperties.displayIp));
    }
    if (xmlRpcStruct.containsKey((VdsProperties.utc_diff))) {
        String utc_diff = xmlRpcStruct.get(VdsProperties.utc_diff).toString();
        if (utc_diff.startsWith("+")) {
            utc_diff = utc_diff.substring(1);
        }
        try {
            vm.setUtcDiff(Integer.parseInt(utc_diff));
        } catch (NumberFormatException e) {
            log.error("Illegal vm offset (utc_diff) '{}'.", utc_diff);
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.hash)) {
        String hash = (String) xmlRpcStruct.get(VdsProperties.hash);
        try {
            vm.setHash(hash);
        } catch (Exception e) {
            log.error("Illegal vm hash '{}'.", hash);
        }
    }
    /**
     * vm disks
     */
    if (xmlRpcStruct.containsKey(VdsProperties.vm_disks)) {
        initDisks(xmlRpcStruct, vm);
    }
    // ------------- vm internal agent data
    vm.setVmHost(AssignStringValue(xmlRpcStruct, VdsProperties.vm_host));
    String guestUserName = AssignStringValue(xmlRpcStruct, VdsProperties.guest_cur_user_name);
    vm.setGuestCurrentUserName(guestUserName);
    initAppsList(xmlRpcStruct, vm);
    vm.setGuestOs(AssignStringValue(xmlRpcStruct, VdsProperties.guest_os));
    if (xmlRpcStruct.containsKey(VdsProperties.VM_FQDN)) {
        vm.setVmFQDN(AssignStringValue(xmlRpcStruct, VdsProperties.VM_FQDN));
        String fqdn = vm.getVmFQDN().trim();
        if ("localhost".equalsIgnoreCase(fqdn) || "localhost.localdomain".equalsIgnoreCase(fqdn)) {
            vm.setVmFQDN(null);
        } else {
            vm.setVmFQDN(fqdn);
        }
    }
    vm.setVmIp(AssignStringValue(xmlRpcStruct, VdsProperties.VM_IP));
    if (vm.getVmIp() != null) {
        if (vm.getVmIp().startsWith("127.0.")) {
            vm.setVmIp(null);
        } else {
            vm.setVmIp(vm.getVmIp().trim());
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.exit_code)) {
        String exitCodeStr = xmlRpcStruct.get(VdsProperties.exit_code).toString();
        vm.setExitStatus(VmExitStatus.forValue(Integer.parseInt(exitCodeStr)));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.exit_message)) {
        String exitMsg = (String) xmlRpcStruct.get(VdsProperties.exit_message);
        vm.setExitMessage(exitMsg);
    }
    if (xmlRpcStruct.containsKey(VdsProperties.exit_reason)) {
        String exitReasonStr = xmlRpcStruct.get(VdsProperties.exit_reason).toString();
        vm.setExitReason(VmExitReason.forValue(Integer.parseInt(exitReasonStr)));
    } else {
        vm.setExitReason(VmExitReason.Unknown);
    }
    // if monitorResponse returns negative it means its erroneous
    if (xmlRpcStruct.containsKey(VdsProperties.monitorResponse)) {
        int response = Integer.parseInt(xmlRpcStruct.get(VdsProperties.monitorResponse).toString());
        if (response < 0) {
            vm.setStatus(VMStatus.NotResponding);
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.clientIp)) {
        vm.setClientIp(xmlRpcStruct.get(VdsProperties.clientIp).toString());
    }
    VmPauseStatus pauseStatus = VmPauseStatus.NONE;
    if (xmlRpcStruct.containsKey(VdsProperties.pauseCode)) {
        String pauseCodeStr = (String) xmlRpcStruct.get(VdsProperties.pauseCode);
        try {
            pauseStatus = VmPauseStatus.valueOf(pauseCodeStr);
        } catch (IllegalArgumentException ex) {
            log.error("Error in parsing vm pause status. Setting value to NONE");
            pauseStatus = VmPauseStatus.NONE;
        }
    }
    vm.setPauseStatus(pauseStatus);
    if (xmlRpcStruct.containsKey(VdsProperties.watchdogEvent)) {
        Map<String, Object> watchdogStruct = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.watchdogEvent);
        double time = Double.parseDouble(watchdogStruct.get(VdsProperties.time).toString());
        // vdsm may not send the action http://gerrit.ovirt.org/14134
        String action = watchdogStruct.containsKey(VdsProperties.action) ? watchdogStruct.get(VdsProperties.action).toString() : null;
        vm.setLastWatchdogEvent((long) time);
        vm.setLastWatchdogAction(action);
    }
    if (xmlRpcStruct.containsKey(VdsProperties.CDRom)) {
        String isoName = Paths.get((String) xmlRpcStruct.get(VdsProperties.CDRom)).getFileName().toString();
        vm.setCurrentCd(isoName);
    }
    if (xmlRpcStruct.containsKey(VdsProperties.GUEST_CPU_COUNT)) {
        vm.setGuestCpuCount(AssignIntValue(xmlRpcStruct, VdsProperties.GUEST_CPU_COUNT));
    }
}
#method_after
public static void updateVMDynamicData(VmDynamic vm, Map<String, Object> xmlRpcStruct) {
    if (xmlRpcStruct.containsKey(VdsProperties.vm_guid)) {
        vm.setId(new Guid((String) xmlRpcStruct.get(VdsProperties.vm_guid)));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.session)) {
        String session = (String) xmlRpcStruct.get(VdsProperties.session);
        try {
            vm.setSession(SessionState.valueOf(session));
        } catch (Exception e) {
            log.error("Illegal vm session '{}'.", session);
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.kvmEnable)) {
        vm.setKvmEnable(Boolean.parseBoolean((String) xmlRpcStruct.get(VdsProperties.kvmEnable)));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.acpiEnable)) {
        vm.setAcpiEnable(Boolean.parseBoolean((String) xmlRpcStruct.get(VdsProperties.acpiEnable)));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.win2kHackEnable)) {
        vm.setWin2kHackEnable(Boolean.parseBoolean((String) xmlRpcStruct.get(VdsProperties.win2kHackEnable)));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.status)) {
        vm.setStatus(convertToVmStatus((String) xmlRpcStruct.get(VdsProperties.status)));
    }
    boolean hasGraphicsInfo = updateGraphicsInfo(vm, xmlRpcStruct);
    if (!hasGraphicsInfo) {
        updateGraphicsInfoFromConf(vm, xmlRpcStruct);
    }
    if (xmlRpcStruct.containsKey((VdsProperties.utc_diff))) {
        String utc_diff = xmlRpcStruct.get(VdsProperties.utc_diff).toString();
        if (utc_diff.startsWith("+")) {
            utc_diff = utc_diff.substring(1);
        }
        try {
            vm.setUtcDiff(Integer.parseInt(utc_diff));
        } catch (NumberFormatException e) {
            log.error("Illegal vm offset (utc_diff) '{}'.", utc_diff);
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.hash)) {
        String hash = (String) xmlRpcStruct.get(VdsProperties.hash);
        try {
            vm.setHash(hash);
        } catch (Exception e) {
            log.error("Illegal vm hash '{}'.", hash);
        }
    }
    /**
     * vm disks
     */
    if (xmlRpcStruct.containsKey(VdsProperties.vm_disks)) {
        initDisks(xmlRpcStruct, vm);
    }
    // ------------- vm internal agent data
    vm.setVmHost(AssignStringValue(xmlRpcStruct, VdsProperties.vm_host));
    String guestUserName = AssignStringValue(xmlRpcStruct, VdsProperties.guest_cur_user_name);
    vm.setGuestCurrentUserName(guestUserName);
    initAppsList(xmlRpcStruct, vm);
    vm.setGuestOs(AssignStringValue(xmlRpcStruct, VdsProperties.guest_os));
    if (xmlRpcStruct.containsKey(VdsProperties.VM_FQDN)) {
        vm.setVmFQDN(AssignStringValue(xmlRpcStruct, VdsProperties.VM_FQDN));
        String fqdn = vm.getVmFQDN().trim();
        if ("localhost".equalsIgnoreCase(fqdn) || "localhost.localdomain".equalsIgnoreCase(fqdn)) {
            vm.setVmFQDN(null);
        } else {
            vm.setVmFQDN(fqdn);
        }
    }
    vm.setVmIp(AssignStringValue(xmlRpcStruct, VdsProperties.VM_IP));
    if (vm.getVmIp() != null) {
        if (vm.getVmIp().startsWith("127.0.")) {
            vm.setVmIp(null);
        } else {
            vm.setVmIp(vm.getVmIp().trim());
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.exit_code)) {
        String exitCodeStr = xmlRpcStruct.get(VdsProperties.exit_code).toString();
        vm.setExitStatus(VmExitStatus.forValue(Integer.parseInt(exitCodeStr)));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.exit_message)) {
        String exitMsg = (String) xmlRpcStruct.get(VdsProperties.exit_message);
        vm.setExitMessage(exitMsg);
    }
    if (xmlRpcStruct.containsKey(VdsProperties.exit_reason)) {
        String exitReasonStr = xmlRpcStruct.get(VdsProperties.exit_reason).toString();
        vm.setExitReason(VmExitReason.forValue(Integer.parseInt(exitReasonStr)));
    } else {
        vm.setExitReason(VmExitReason.Unknown);
    }
    // if monitorResponse returns negative it means its erroneous
    if (xmlRpcStruct.containsKey(VdsProperties.monitorResponse)) {
        int response = Integer.parseInt(xmlRpcStruct.get(VdsProperties.monitorResponse).toString());
        if (response < 0) {
            vm.setStatus(VMStatus.NotResponding);
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.clientIp)) {
        vm.setClientIp(xmlRpcStruct.get(VdsProperties.clientIp).toString());
    }
    VmPauseStatus pauseStatus = VmPauseStatus.NONE;
    if (xmlRpcStruct.containsKey(VdsProperties.pauseCode)) {
        String pauseCodeStr = (String) xmlRpcStruct.get(VdsProperties.pauseCode);
        try {
            pauseStatus = VmPauseStatus.valueOf(pauseCodeStr);
        } catch (IllegalArgumentException ex) {
            log.error("Error in parsing vm pause status. Setting value to NONE");
            pauseStatus = VmPauseStatus.NONE;
        }
    }
    vm.setPauseStatus(pauseStatus);
    if (xmlRpcStruct.containsKey(VdsProperties.watchdogEvent)) {
        Map<String, Object> watchdogStruct = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.watchdogEvent);
        double time = Double.parseDouble(watchdogStruct.get(VdsProperties.time).toString());
        // vdsm may not send the action http://gerrit.ovirt.org/14134
        String action = watchdogStruct.containsKey(VdsProperties.action) ? watchdogStruct.get(VdsProperties.action).toString() : null;
        vm.setLastWatchdogEvent((long) time);
        vm.setLastWatchdogAction(action);
    }
    if (xmlRpcStruct.containsKey(VdsProperties.CDRom)) {
        String isoName = Paths.get((String) xmlRpcStruct.get(VdsProperties.CDRom)).getFileName().toString();
        vm.setCurrentCd(isoName);
    }
    if (xmlRpcStruct.containsKey(VdsProperties.GUEST_CPU_COUNT)) {
        vm.setGuestCpuCount(AssignIntValue(xmlRpcStruct, VdsProperties.GUEST_CPU_COUNT));
    }
}
#end_block

#method_before
public static void updateVMStatisticsData(VmStatistics vm, Map<String, Object> xmlRpcStruct) {
    if (xmlRpcStruct.containsKey(VdsProperties.vm_guid)) {
        vm.setId(new Guid((String) xmlRpcStruct.get(VdsProperties.vm_guid)));
    }
    vm.setelapsed_time(AssignDoubleValue(xmlRpcStruct, VdsProperties.elapsed_time));
    // ------------- vm network statistics -----------------------
    if (xmlRpcStruct.containsKey(VdsProperties.VM_NETWORK)) {
        Map networkStruct = (Map) xmlRpcStruct.get(VdsProperties.VM_NETWORK);
        vm.setInterfaceStatistics(new ArrayList<VmNetworkInterface>());
        for (Object tempNic : networkStruct.values()) {
            Map nic = (Map) tempNic;
            VmNetworkInterface stats = new VmNetworkInterface();
            vm.getInterfaceStatistics().add(stats);
            if (nic.containsKey(VdsProperties.VM_INTERFACE_NAME)) {
                stats.setName((String) ((nic.get(VdsProperties.VM_INTERFACE_NAME) instanceof String) ? nic.get(VdsProperties.VM_INTERFACE_NAME) : null));
            }
            Double rx_rate = AssignDoubleValue(nic, VdsProperties.rx_rate);
            Double rx_dropped = AssignDoubleValue(nic, VdsProperties.rx_dropped);
            Double tx_rate = AssignDoubleValue(nic, VdsProperties.tx_rate);
            Double tx_dropped = AssignDoubleValue(nic, VdsProperties.tx_dropped);
            stats.getStatistics().setReceiveRate(rx_rate != null ? rx_rate : 0);
            stats.getStatistics().setReceiveDropRate(rx_dropped != null ? rx_dropped : 0);
            stats.getStatistics().setTransmitRate(tx_rate != null ? tx_rate : 0);
            stats.getStatistics().setTransmitDropRate(tx_dropped != null ? tx_dropped : 0);
            stats.setMacAddress((String) ((nic.get(VdsProperties.MAC_ADDR) instanceof String) ? nic.get(VdsProperties.MAC_ADDR) : null));
            stats.setSpeed(AssignIntValue(nic, VdsProperties.INTERFACE_SPEED));
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.VM_DISKS_USAGE)) {
        initDisksUsage(xmlRpcStruct, vm);
    }
    // ------------- vm cpu statistics -----------------------
    vm.setcpu_sys(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_sys));
    vm.setcpu_user(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_user));
    // ------------- vm memory statistics -----------------------
    vm.setusage_mem_percent(AssignIntValue(xmlRpcStruct, VdsProperties.vm_usage_mem_percent));
    vm.setVmBalloonInfo(getBalloonInfo(xmlRpcStruct));
    // ------------- vm migration statistics -----------------------
    Integer migrationProgress = AssignIntValue(xmlRpcStruct, VdsProperties.vm_migration_progress_percent);
    vm.setMigrationProgressPercent(migrationProgress != null ? migrationProgress : 0);
    // ------------- vm jobs -------------
    vm.setVmJobs(getVmJobs(vm.getId(), xmlRpcStruct));
    // ------------- vm numa nodes runtime info -------------------------
    if (xmlRpcStruct.containsKey(VdsProperties.VM_NUMA_NODES_RUNTIME_INFO)) {
        updateVmNumaNodesRuntimeInfo(vm, xmlRpcStruct);
    }
}
#method_after
public static void updateVMStatisticsData(VmStatistics vm, Map<String, Object> xmlRpcStruct) {
    if (xmlRpcStruct.containsKey(VdsProperties.vm_guid)) {
        vm.setId(new Guid((String) xmlRpcStruct.get(VdsProperties.vm_guid)));
    }
    vm.setelapsed_time(AssignDoubleValue(xmlRpcStruct, VdsProperties.elapsed_time));
    // ------------- vm network statistics -----------------------
    if (xmlRpcStruct.containsKey(VdsProperties.VM_NETWORK)) {
        Map networkStruct = (Map) xmlRpcStruct.get(VdsProperties.VM_NETWORK);
        vm.setInterfaceStatistics(new ArrayList<VmNetworkInterface>());
        for (Object tempNic : networkStruct.values()) {
            Map nic = (Map) tempNic;
            VmNetworkInterface stats = new VmNetworkInterface();
            vm.getInterfaceStatistics().add(stats);
            if (nic.containsKey(VdsProperties.VM_INTERFACE_NAME)) {
                stats.setName((String) ((nic.get(VdsProperties.VM_INTERFACE_NAME) instanceof String) ? nic.get(VdsProperties.VM_INTERFACE_NAME) : null));
            }
            extractInterfaceStatistics(nic, stats);
            stats.setMacAddress((String) ((nic.get(VdsProperties.MAC_ADDR) instanceof String) ? nic.get(VdsProperties.MAC_ADDR) : null));
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.VM_DISKS_USAGE)) {
        initDisksUsage(xmlRpcStruct, vm);
    }
    // ------------- vm cpu statistics -----------------------
    vm.setcpu_sys(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_sys));
    vm.setcpu_user(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_user));
    // ------------- vm memory statistics -----------------------
    vm.setusage_mem_percent(AssignIntValue(xmlRpcStruct, VdsProperties.vm_usage_mem_percent));
    vm.setVmBalloonInfo(getBalloonInfo(xmlRpcStruct));
    // ------------- vm migration statistics -----------------------
    Integer migrationProgress = AssignIntValue(xmlRpcStruct, VdsProperties.vm_migration_progress_percent);
    vm.setMigrationProgressPercent(migrationProgress != null ? migrationProgress : 0);
    // ------------- vm jobs -------------
    vm.setVmJobs(getVmJobs(vm.getId(), xmlRpcStruct));
    // ------------- vm numa nodes runtime info -------------------------
    if (xmlRpcStruct.containsKey(VdsProperties.VM_NUMA_NODES_RUNTIME_INFO)) {
        updateVmNumaNodesRuntimeInfo(vm, xmlRpcStruct);
    }
}
#end_block

#method_before
public static void updateVDSStatisticsData(VDS vds, Map<String, Object> xmlRpcStruct) {
    // ------------- vds memory usage ---------------------------
    vds.setUsageMemPercent(AssignIntValue(xmlRpcStruct, VdsProperties.mem_usage));
    // ------------- vds network statistics ---------------------
    Map<String, Object> interfaces = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.NETWORK);
    if (interfaces != null) {
        int networkUsage = 0;
        Map<String, VdsNetworkInterface> nicsByName = Entities.entitiesByName(vds.getInterfaces());
        for (Entry<String, Object> entry : interfaces.entrySet()) {
            if (nicsByName.containsKey(entry.getKey())) {
                VdsNetworkInterface iface = nicsByName.get(entry.getKey());
                iface.setVdsId(vds.getId());
                Map<String, Object> dict = (Map<String, Object>) entry.getValue();
                Double rx_rate = AssignDoubleValue(dict, VdsProperties.rx_rate);
                Double rx_dropped = AssignDoubleValue(dict, VdsProperties.rx_dropped);
                Double tx_rate = AssignDoubleValue(dict, VdsProperties.tx_rate);
                Double tx_dropped = AssignDoubleValue(dict, VdsProperties.tx_dropped);
                iface.getStatistics().setReceiveRate(rx_rate != null ? rx_rate : 0);
                iface.getStatistics().setReceiveDropRate(rx_dropped != null ? rx_dropped : 0);
                iface.getStatistics().setTransmitRate(tx_rate != null ? tx_rate : 0);
                iface.getStatistics().setTransmitDropRate(tx_dropped != null ? tx_dropped : 0);
                iface.setSpeed(AssignIntValue(dict, VdsProperties.INTERFACE_SPEED));
                iface.getStatistics().setStatus(AssignInterfaceStatusValue(dict, VdsProperties.iface_status));
                if (!NetworkUtils.isVlan(iface) && !iface.isBondSlave()) {
                    networkUsage = (int) Math.max(networkUsage, computeInterfaceUsage(iface));
                }
            }
        }
        vds.setUsageNetworkPercent(networkUsage);
    }
    // ----------- vds cpu statistics info ---------------------
    vds.setCpuSys(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_sys));
    vds.setCpuUser(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_user));
    if (vds.getCpuSys() != null && vds.getCpuUser() != null) {
        vds.setUsageCpuPercent((int) (vds.getCpuSys() + vds.getCpuUser()));
    }
    // CPU load reported by VDSM is in uptime-style format, i.e. normalized
    // to unity, so that say an 8% load is reported as 0.08
    Double d = AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_load);
    d = (d != null) ? d : 0;
    vds.setCpuLoad(d.doubleValue() * 100.0);
    vds.setCpuIdle(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_idle));
    vds.setMemAvailable(AssignLongValue(xmlRpcStruct, VdsProperties.mem_available));
    vds.setMemFree(AssignLongValue(xmlRpcStruct, VdsProperties.memFree));
    vds.setMemShared(AssignLongValue(xmlRpcStruct, VdsProperties.mem_shared));
    vds.setSwapFree(AssignLongValue(xmlRpcStruct, VdsProperties.swap_free));
    vds.setSwapTotal(AssignLongValue(xmlRpcStruct, VdsProperties.swap_total));
    vds.setKsmCpuPercent(AssignIntValue(xmlRpcStruct, VdsProperties.ksm_cpu_percent));
    vds.setKsmPages(AssignLongValue(xmlRpcStruct, VdsProperties.ksm_pages));
    vds.setKsmState(AssignBoolValue(xmlRpcStruct, VdsProperties.ksm_state));
    // dynamic data got from GetVdsStats
    if (xmlRpcStruct.containsKey(VdsProperties.transparent_huge_pages_state)) {
        vds.setTransparentHugePagesState(EnumUtils.valueOf(VdsTransparentHugePagesState.class, xmlRpcStruct.get(VdsProperties.transparent_huge_pages_state).toString(), true));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.anonymous_transparent_huge_pages)) {
        vds.setAnonymousHugePages(AssignIntValue(xmlRpcStruct, VdsProperties.anonymous_transparent_huge_pages));
    }
    vds.setNetConfigDirty(AssignBoolValue(xmlRpcStruct, VdsProperties.netConfigDirty));
    vds.setImagesLastCheck(AssignDoubleValue(xmlRpcStruct, VdsProperties.images_last_check));
    vds.setImagesLastDelay(AssignDoubleValue(xmlRpcStruct, VdsProperties.images_last_delay));
    Integer vm_count = AssignIntValue(xmlRpcStruct, VdsProperties.vm_count);
    vds.setVmCount(vm_count == null ? 0 : vm_count);
    vds.setVmActive(AssignIntValue(xmlRpcStruct, VdsProperties.vm_active));
    vds.setVmMigrating(AssignIntValue(xmlRpcStruct, VdsProperties.vm_migrating));
    updateVDSDomainData(vds, xmlRpcStruct);
    updateLocalDisksUsage(vds, xmlRpcStruct);
    // hosted engine
    Integer haScore = null;
    Boolean haIsConfigured = null;
    Boolean haIsActive = null;
    Boolean haGlobalMaint = null;
    Boolean haLocalMaint = null;
    if (xmlRpcStruct.containsKey(VdsProperties.ha_stats)) {
        Map<String, Object> haStats = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.ha_stats);
        if (haStats != null) {
            haScore = AssignIntValue(haStats, VdsProperties.ha_stats_score);
            haIsConfigured = AssignBoolValue(haStats, VdsProperties.ha_stats_is_configured);
            haIsActive = AssignBoolValue(haStats, VdsProperties.ha_stats_is_active);
            haGlobalMaint = AssignBoolValue(haStats, VdsProperties.ha_stats_global_maintenance);
            haLocalMaint = AssignBoolValue(haStats, VdsProperties.ha_stats_local_maintenance);
        }
    } else {
        haScore = AssignIntValue(xmlRpcStruct, VdsProperties.ha_score);
        // prior to 3.4, haScore was returned if ha was installed; assume active if > 0
        if (haScore != null) {
            haIsConfigured = true;
            haIsActive = (haScore > 0);
        }
    }
    vds.setHighlyAvailableScore(haScore != null ? haScore : 0);
    vds.setHighlyAvailableIsConfigured(haIsConfigured != null ? haIsConfigured : false);
    vds.setHighlyAvailableIsActive(haIsActive != null ? haIsActive : false);
    vds.setHighlyAvailableGlobalMaintenance(haGlobalMaint != null ? haGlobalMaint : false);
    vds.setHighlyAvailableLocalMaintenance(haLocalMaint != null ? haLocalMaint : false);
    vds.setBootTime(AssignLongValue(xmlRpcStruct, VdsProperties.bootTime));
    updateNumaStatisticsData(vds, xmlRpcStruct);
}
#method_after
public static void updateVDSStatisticsData(VDS vds, Map<String, Object> xmlRpcStruct) {
    // ------------- vds memory usage ---------------------------
    vds.setUsageMemPercent(AssignIntValue(xmlRpcStruct, VdsProperties.mem_usage));
    // ------------- vds network statistics ---------------------
    Map<String, Object> interfaces = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.NETWORK);
    if (interfaces != null) {
        int networkUsage = 0;
        Map<String, VdsNetworkInterface> nicsByName = Entities.entitiesByName(vds.getInterfaces());
        NetworkStatisticsBuilder statsBuilder = new NetworkStatisticsBuilder(vds.getVdsGroupCompatibilityVersion());
        for (Entry<String, Object> entry : interfaces.entrySet()) {
            if (nicsByName.containsKey(entry.getKey())) {
                VdsNetworkInterface existingIface = nicsByName.get(entry.getKey());
                existingIface.setVdsId(vds.getId());
                Map<String, Object> dict = (Map<String, Object>) entry.getValue();
                VdsNetworkInterface reportedIface = new VdsNetworkInterface();
                extractInterfaceStatistics(dict, reportedIface);
                statsBuilder.updateExistingInterfaceStatistics(existingIface, reportedIface);
                existingIface.getStatistics().setStatus(AssignInterfaceStatusValue(dict, VdsProperties.iface_status));
                if (!NetworkUtils.isVlan(existingIface) && !existingIface.isBondSlave()) {
                    Double ifaceUsage = computeInterfaceUsage(existingIface);
                    if (ifaceUsage != null) {
                        networkUsage = (int) Math.max(networkUsage, ifaceUsage);
                    }
                }
            }
        }
        vds.setUsageNetworkPercent(networkUsage);
    }
    // ----------- vds cpu statistics info ---------------------
    vds.setCpuSys(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_sys));
    vds.setCpuUser(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_user));
    if (vds.getCpuSys() != null && vds.getCpuUser() != null) {
        vds.setUsageCpuPercent((int) (vds.getCpuSys() + vds.getCpuUser()));
    }
    // CPU load reported by VDSM is in uptime-style format, i.e. normalized
    // to unity, so that say an 8% load is reported as 0.08
    Double d = AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_load);
    d = (d != null) ? d : 0;
    vds.setCpuLoad(d.doubleValue() * 100.0);
    vds.setCpuIdle(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_idle));
    vds.setMemAvailable(AssignLongValue(xmlRpcStruct, VdsProperties.mem_available));
    vds.setMemFree(AssignLongValue(xmlRpcStruct, VdsProperties.memFree));
    vds.setMemShared(AssignLongValue(xmlRpcStruct, VdsProperties.mem_shared));
    vds.setSwapFree(AssignLongValue(xmlRpcStruct, VdsProperties.swap_free));
    vds.setSwapTotal(AssignLongValue(xmlRpcStruct, VdsProperties.swap_total));
    vds.setKsmCpuPercent(AssignIntValue(xmlRpcStruct, VdsProperties.ksm_cpu_percent));
    vds.setKsmPages(AssignLongValue(xmlRpcStruct, VdsProperties.ksm_pages));
    vds.setKsmState(AssignBoolValue(xmlRpcStruct, VdsProperties.ksm_state));
    // dynamic data got from GetVdsStats
    if (xmlRpcStruct.containsKey(VdsProperties.transparent_huge_pages_state)) {
        vds.setTransparentHugePagesState(EnumUtils.valueOf(VdsTransparentHugePagesState.class, xmlRpcStruct.get(VdsProperties.transparent_huge_pages_state).toString(), true));
    }
    if (xmlRpcStruct.containsKey(VdsProperties.anonymous_transparent_huge_pages)) {
        vds.setAnonymousHugePages(AssignIntValue(xmlRpcStruct, VdsProperties.anonymous_transparent_huge_pages));
    }
    vds.setNetConfigDirty(AssignBoolValue(xmlRpcStruct, VdsProperties.netConfigDirty));
    vds.setImagesLastCheck(AssignDoubleValue(xmlRpcStruct, VdsProperties.images_last_check));
    vds.setImagesLastDelay(AssignDoubleValue(xmlRpcStruct, VdsProperties.images_last_delay));
    Integer vm_count = AssignIntValue(xmlRpcStruct, VdsProperties.vm_count);
    vds.setVmCount(vm_count == null ? 0 : vm_count);
    vds.setVmActive(AssignIntValue(xmlRpcStruct, VdsProperties.vm_active));
    vds.setVmMigrating(AssignIntValue(xmlRpcStruct, VdsProperties.vm_migrating));
    updateVDSDomainData(vds, xmlRpcStruct);
    updateLocalDisksUsage(vds, xmlRpcStruct);
    // hosted engine
    Integer haScore = null;
    Boolean haIsConfigured = null;
    Boolean haIsActive = null;
    Boolean haGlobalMaint = null;
    Boolean haLocalMaint = null;
    if (xmlRpcStruct.containsKey(VdsProperties.ha_stats)) {
        Map<String, Object> haStats = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.ha_stats);
        if (haStats != null) {
            haScore = AssignIntValue(haStats, VdsProperties.ha_stats_score);
            haIsConfigured = AssignBoolValue(haStats, VdsProperties.ha_stats_is_configured);
            haIsActive = AssignBoolValue(haStats, VdsProperties.ha_stats_is_active);
            haGlobalMaint = AssignBoolValue(haStats, VdsProperties.ha_stats_global_maintenance);
            haLocalMaint = AssignBoolValue(haStats, VdsProperties.ha_stats_local_maintenance);
        }
    } else {
        haScore = AssignIntValue(xmlRpcStruct, VdsProperties.ha_score);
        // prior to 3.4, haScore was returned if ha was installed; assume active if > 0
        if (haScore != null) {
            haIsConfigured = true;
            haIsActive = (haScore > 0);
        }
    }
    vds.setHighlyAvailableScore(haScore != null ? haScore : 0);
    vds.setHighlyAvailableIsConfigured(haIsConfigured != null ? haIsConfigured : false);
    vds.setHighlyAvailableIsActive(haIsActive != null ? haIsActive : false);
    vds.setHighlyAvailableGlobalMaintenance(haGlobalMaint != null ? haGlobalMaint : false);
    vds.setHighlyAvailableLocalMaintenance(haLocalMaint != null ? haLocalMaint : false);
    vds.setBootTime(AssignLongValue(xmlRpcStruct, VdsProperties.bootTime));
    updateNumaStatisticsData(vds, xmlRpcStruct);
}
#end_block

#method_before
private static double computeInterfaceUsage(VdsNetworkInterface iface) {
    return Math.max(truncatePercentage(iface.getStatistics().getReceiveRate()), truncatePercentage(iface.getStatistics().getTransmitRate()));
}
#method_after
private static Double computeInterfaceUsage(VdsNetworkInterface iface) {
    Double receiveRate = truncatePercentage(iface.getStatistics().getReceiveRate());
    Double transmitRate = truncatePercentage(iface.getStatistics().getTransmitRate());
    if (receiveRate == null) {
        return transmitRate;
    } else if (transmitRate == null) {
        return receiveRate;
    } else {
        return Math.max(receiveRate, transmitRate);
    }
}
#end_block

#method_before
private static double truncatePercentage(double value) {
    return Math.min(100, value);
}
#method_after
private static Double truncatePercentage(Double value) {
    return value == null ? null : Math.min(100, value);
}
#end_block

#method_before
public static void updateNumaStatisticsData(VDS vds, Map<String, Object> xmlRpcStruct) {
    List<VdsNumaNode> vdsNumaNodes = new ArrayList<>();
    List<CpuStatistics> cpuStatsData = new ArrayList<>();
    if (xmlRpcStruct.containsKey(VdsProperties.CPU_STATS)) {
        Map<String, Map<String, Object>> cpuStats = (Map<String, Map<String, Object>>) xmlRpcStruct.get(VdsProperties.CPU_STATS);
        Map<Integer, List<CpuStatistics>> numaNodeCpuStats = new HashMap<>();
        for (Map.Entry<String, Map<String, Object>> item : cpuStats.entrySet()) {
            CpuStatistics data = buildVdsCpuStatistics(item);
            cpuStatsData.add(data);
            int numaNodeIndex = AssignIntValue(item.getValue(), VdsProperties.NUMA_NODE_INDEX);
            if (!numaNodeCpuStats.containsKey(numaNodeIndex)) {
                numaNodeCpuStats.put(numaNodeIndex, new ArrayList<CpuStatistics>());
            }
            numaNodeCpuStats.get(numaNodeIndex).add(data);
        }
        DecimalFormat percentageFormatter = new DecimalFormat("#.##");
        for (Map.Entry<Integer, List<CpuStatistics>> item : numaNodeCpuStats.entrySet()) {
            VdsNumaNode node = buildVdsNumaNodeStatistics(percentageFormatter, item);
            vdsNumaNodes.add(node);
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.NUMA_NODE_FREE_MEM_STAT)) {
        Map<String, Map<String, Object>> memStats = (Map<String, Map<String, Object>>) xmlRpcStruct.get(VdsProperties.NUMA_NODE_FREE_MEM_STAT);
        for (Map.Entry<String, Map<String, Object>> item : memStats.entrySet()) {
            VdsNumaNode node = NumaUtils.getVdsNumaNodeByIndex(vdsNumaNodes, Integer.valueOf(item.getKey()));
            if (node != null) {
                node.getNumaNodeStatistics().setMemFree(AssignLongValue(item.getValue(), VdsProperties.NUMA_NODE_FREE_MEM));
                node.getNumaNodeStatistics().setMemUsagePercent(AssignIntValue(item.getValue(), VdsProperties.NUMA_NODE_MEM_PERCENT));
            }
        }
    }
    vds.getNumaNodeList().clear();
    vds.getNumaNodeList().addAll(vdsNumaNodes);
    vds.getStatisticsData().getCpuCoreStatistics().clear();
    vds.getStatisticsData().getCpuCoreStatistics().addAll(cpuStatsData);
}
#method_after
public static void updateNumaStatisticsData(VDS vds, Map<String, Object> xmlRpcStruct) {
    List<VdsNumaNode> vdsNumaNodes = new ArrayList<>();
    if (vds.getNumaNodeList() != null && !vds.getNumaNodeList().isEmpty()) {
        vdsNumaNodes.addAll(vds.getNumaNodeList());
    }
    List<CpuStatistics> cpuStatsData = new ArrayList<>();
    if (xmlRpcStruct.containsKey(VdsProperties.CPU_STATS)) {
        Map<String, Map<String, Object>> cpuStats = (Map<String, Map<String, Object>>) xmlRpcStruct.get(VdsProperties.CPU_STATS);
        Map<Integer, List<CpuStatistics>> numaNodeCpuStats = new HashMap<>();
        for (Map.Entry<String, Map<String, Object>> item : cpuStats.entrySet()) {
            CpuStatistics data = buildVdsCpuStatistics(item);
            cpuStatsData.add(data);
            int numaNodeIndex = AssignIntValue(item.getValue(), VdsProperties.NUMA_NODE_INDEX);
            if (!numaNodeCpuStats.containsKey(numaNodeIndex)) {
                numaNodeCpuStats.put(numaNodeIndex, new ArrayList<CpuStatistics>());
            }
            numaNodeCpuStats.get(numaNodeIndex).add(data);
        }
        DecimalFormat percentageFormatter = new DecimalFormat("#.##");
        for (Map.Entry<Integer, List<CpuStatistics>> item : numaNodeCpuStats.entrySet()) {
            VdsNumaNode nodeWithStatistics = buildVdsNumaNodeStatistics(percentageFormatter, item);
            if (vdsNumaNodes.isEmpty()) {
                vdsNumaNodes.add(nodeWithStatistics);
            } else {
                boolean foundNumaNode = false;
                // append the statistics to the correct numaNode (search by its Index.)
                for (VdsNumaNode currNumaNode : vdsNumaNodes) {
                    if (currNumaNode.getIndex() == nodeWithStatistics.getIndex()) {
                        currNumaNode.setNumaNodeStatistics(nodeWithStatistics.getNumaNodeStatistics());
                        foundNumaNode = true;
                        break;
                    }
                }
                // append new numaNode (contains only statistics) if not found existing
                if (!foundNumaNode) {
                    vdsNumaNodes.add(nodeWithStatistics);
                }
            }
        }
    }
    if (xmlRpcStruct.containsKey(VdsProperties.NUMA_NODE_FREE_MEM_STAT)) {
        Map<String, Map<String, Object>> memStats = (Map<String, Map<String, Object>>) xmlRpcStruct.get(VdsProperties.NUMA_NODE_FREE_MEM_STAT);
        for (Map.Entry<String, Map<String, Object>> item : memStats.entrySet()) {
            VdsNumaNode node = NumaUtils.getVdsNumaNodeByIndex(vdsNumaNodes, Integer.valueOf(item.getKey()));
            if (node != null && node.getNumaNodeStatistics() != null) {
                node.getNumaNodeStatistics().setMemFree(AssignLongValue(item.getValue(), VdsProperties.NUMA_NODE_FREE_MEM));
                node.getNumaNodeStatistics().setMemUsagePercent(AssignIntValue(item.getValue(), VdsProperties.NUMA_NODE_MEM_PERCENT));
            }
        }
    }
    vds.getNumaNodeList().clear();
    vds.getNumaNodeList().addAll(vdsNumaNodes);
    vds.getStatisticsData().getCpuCoreStatistics().clear();
    vds.getStatisticsData().getCpuCoreStatistics().addAll(cpuStatsData);
}
#end_block

#method_before
private static Double AssignDoubleValue(Map<String, Object> input, String name) {
    Double returnValue = null;
    if (input.containsKey(name)) {
        String stringValue = (String) ((input.get(name) instanceof String) ? input.get(name) : null);
        returnValue = (stringValue == null) ? null : Double.parseDouble(stringValue);
    }
    return returnValue;
}
#method_after
private static Double AssignDoubleValue(Map<String, Object> input, String name) {
    Object value = input.get(name);
    if (value instanceof Double) {
        return (Double) value;
    } else if (value instanceof String) {
        return Double.parseDouble((String) value);
    }
    return null;
}
#end_block

#method_before
private static void addHostBondDevices(VDS vds, Map<String, Object> xmlRpcStruct) {
    Map<String, Object> bonds = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.NETWORK_BONDINGS);
    if (bonds != null) {
        for (Entry<String, Object> entry : bonds.entrySet()) {
            VdsNetworkInterface iface = new VdsNetworkInterface();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.newGuid());
            iStats.setVdsId(vds.getId());
            iface.setId(iStats.getId());
            iface.setName(entry.getKey());
            iface.setVdsId(vds.getId());
            iface.setBonded(true);
            Map<String, Object> bond = (Map<String, Object>) entry.getValue();
            if (bond != null) {
                iface.setMacAddress((String) bond.get("hwaddr"));
                iface.setAddress((String) bond.get("addr"));
                iface.setSubnet((String) bond.get("netmask"));
                if (bond.get("slaves") != null) {
                    addBondDeviceToHost(vds, iface, (Object[]) bond.get("slaves"));
                }
                if (StringUtils.isNotBlank((String) bond.get(VdsProperties.MTU))) {
                    iface.setMtu(Integer.parseInt((String) bond.get(VdsProperties.MTU)));
                }
                Map<String, Object> config = (Map<String, Object>) bond.get("cfg");
                if (config != null && config.get("BONDING_OPTS") != null) {
                    iface.setBondOptions(config.get("BONDING_OPTS").toString());
                }
                addBootProtocol(config, vds, iface);
            }
        }
    }
}
#method_after
private static void addHostBondDevices(VDS vds, Map<String, Object> xmlRpcStruct) {
    Map<String, Object> bonds = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.NETWORK_BONDINGS);
    if (bonds != null) {
        for (Entry<String, Object> entry : bonds.entrySet()) {
            VdsNetworkInterface iface = new Bond();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.newGuid());
            iStats.setVdsId(vds.getId());
            iface.setId(iStats.getId());
            iface.setName(entry.getKey());
            iface.setVdsId(vds.getId());
            iface.setBonded(true);
            Map<String, Object> bond = (Map<String, Object>) entry.getValue();
            if (bond != null) {
                iface.setMacAddress((String) bond.get("hwaddr"));
                iface.setAddress((String) bond.get("addr"));
                iface.setSubnet((String) bond.get("netmask"));
                if (bond.get("slaves") != null) {
                    addBondDeviceToHost(vds, iface, (Object[]) bond.get("slaves"));
                }
                if (StringUtils.isNotBlank((String) bond.get(VdsProperties.MTU))) {
                    iface.setMtu(Integer.parseInt((String) bond.get(VdsProperties.MTU)));
                }
                Map<String, Object> config = (Map<String, Object>) bond.get("cfg");
                if (config != null && config.get("BONDING_OPTS") != null) {
                    iface.setBondOptions(config.get("BONDING_OPTS").toString());
                }
                addBootProtocol(config, vds, iface);
            }
        }
    }
}
#end_block

#method_before
private static void addHostVlanDevices(VDS vds, Map<String, Object> xmlRpcStruct) {
    // vlans
    Map<String, Object> vlans = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.NETWORK_VLANS);
    if (vlans != null) {
        for (Entry<String, Object> entry : vlans.entrySet()) {
            VdsNetworkInterface iface = new VdsNetworkInterface();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.newGuid());
            iface.setId(iStats.getId());
            String vlanDeviceName = entry.getKey();
            iface.setName(vlanDeviceName);
            iface.setVdsId(vds.getId());
            Map<String, Object> vlan = (Map<String, Object>) entry.getValue();
            if (vlan.get(VdsProperties.VLAN_ID) != null && vlan.get(VdsProperties.BASE_INTERFACE) != null) {
                iface.setVlanId((Integer) vlan.get(VdsProperties.VLAN_ID));
                iface.setBaseInterface((String) vlan.get(VdsProperties.BASE_INTERFACE));
            } else if (vlanDeviceName.contains(".")) {
                String[] names = vlanDeviceName.split("[.]", -1);
                String vlanId = names[1];
                iface.setVlanId(Integer.parseInt(vlanId));
                iface.setBaseInterface(names[0]);
            }
            iface.setAddress((String) vlan.get("addr"));
            iface.setSubnet((String) vlan.get("netmask"));
            if (StringUtils.isNotBlank((String) vlan.get(VdsProperties.MTU))) {
                iface.setMtu(Integer.parseInt((String) vlan.get(VdsProperties.MTU)));
            }
            iStats.setVdsId(vds.getId());
            addBootProtocol((Map<String, Object>) vlan.get("cfg"), vds, iface);
            vds.getInterfaces().add(iface);
        }
    }
}
#method_after
private static void addHostVlanDevices(VDS vds, Map<String, Object> xmlRpcStruct) {
    // vlans
    Map<String, Object> vlans = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.NETWORK_VLANS);
    if (vlans != null) {
        for (Entry<String, Object> entry : vlans.entrySet()) {
            VdsNetworkInterface iface = new Vlan();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.newGuid());
            iface.setId(iStats.getId());
            String vlanDeviceName = entry.getKey();
            iface.setName(vlanDeviceName);
            iface.setVdsId(vds.getId());
            Map<String, Object> vlan = (Map<String, Object>) entry.getValue();
            if (vlan.get(VdsProperties.VLAN_ID) != null && vlan.get(VdsProperties.BASE_INTERFACE) != null) {
                iface.setVlanId((Integer) vlan.get(VdsProperties.VLAN_ID));
                iface.setBaseInterface((String) vlan.get(VdsProperties.BASE_INTERFACE));
            } else if (vlanDeviceName.contains(".")) {
                String[] names = vlanDeviceName.split("[.]", -1);
                String vlanId = names[1];
                iface.setVlanId(Integer.parseInt(vlanId));
                iface.setBaseInterface(names[0]);
            }
            iface.setAddress((String) vlan.get("addr"));
            iface.setSubnet((String) vlan.get("netmask"));
            if (StringUtils.isNotBlank((String) vlan.get(VdsProperties.MTU))) {
                iface.setMtu(Integer.parseInt((String) vlan.get(VdsProperties.MTU)));
            }
            iStats.setVdsId(vds.getId());
            addBootProtocol((Map<String, Object>) vlan.get("cfg"), vds, iface);
            vds.getInterfaces().add(iface);
        }
    }
}
#end_block

#method_before
private static void addHostNetworkInterfaces(VDS vds, Map<String, Object> xmlRpcStruct) {
    Map<String, Object> nics = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.NETWORK_NICS);
    if (nics != null) {
        for (Entry<String, Object> entry : nics.entrySet()) {
            VdsNetworkInterface iface = new VdsNetworkInterface();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.newGuid());
            iface.setId(iStats.getId());
            iface.setName(entry.getKey());
            iface.setVdsId(vds.getId());
            updateNetworkInterfaceDataFromHost(iface, vds, (Map<String, Object>) entry.getValue());
            iStats.setVdsId(vds.getId());
            vds.getInterfaces().add(iface);
        }
    }
}
#method_after
private static void addHostNetworkInterfaces(VDS vds, Map<String, Object> xmlRpcStruct) {
    Map<String, Object> nics = (Map<String, Object>) xmlRpcStruct.get(VdsProperties.NETWORK_NICS);
    if (nics != null) {
        for (Entry<String, Object> entry : nics.entrySet()) {
            VdsNetworkInterface iface = new Nic();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.newGuid());
            iface.setId(iStats.getId());
            iface.setName(entry.getKey());
            iface.setVdsId(vds.getId());
            updateNetworkInterfaceDataFromHost(iface, vds, (Map<String, Object>) entry.getValue());
            iStats.setVdsId(vds.getId());
            vds.getInterfaces().add(iface);
        }
    }
}
#end_block

#method_before
private static void updateNetworkDetailsInInterface(VdsNetworkInterface iface, Map<String, Object> network, VDS host, Network net) {
    if (iface != null) {
        iface.setNetworkName(net.getName());
        // set the management ip
        if (StringUtils.equals(iface.getNetworkName(), NetworkUtils.getEngineNetwork())) {
            iface.setType(iface.getType() | VdsInterfaceType.MANAGEMENT.getValue());
        }
        iface.setAddress(net.getAddr());
        iface.setSubnet(net.getSubnet());
        boolean bridgedNetwork = isBridgedNetwork(network);
        iface.setBridged(bridgedNetwork);
        setGatewayIfNecessary(iface, host, net.getGateway());
        if (bridgedNetwork) {
            Map<String, Object> networkConfig = (Map<String, Object>) network.get("cfg");
            addBootProtocol(networkConfig, host, iface);
        }
        if (FeatureSupported.hostNetworkQos(Collections.max(host.getSupportedClusterVersionsSet()))) {
            HostNetworkQosMapper qosMapper = new HostNetworkQosMapper(network);
            iface.setQos(qosMapper.deserialize());
        }
    }
}
#method_after
private static void updateNetworkDetailsInInterface(VdsNetworkInterface iface, Map<String, Object> network, VDS host, Network net) {
    if (iface != null) {
        iface.setNetworkName(net.getName());
        // set the management ip
        if (getManagementNetworkUtil().isManagementNetwork(iface.getNetworkName(), host.getVdsGroupId())) {
            iface.setType(iface.getType() | VdsInterfaceType.MANAGEMENT.getValue());
        }
        iface.setAddress(net.getAddr());
        iface.setSubnet(net.getSubnet());
        boolean bridgedNetwork = isBridgedNetwork(network);
        iface.setBridged(bridgedNetwork);
        setGatewayIfNecessary(iface, host, net.getGateway());
        if (bridgedNetwork) {
            Map<String, Object> networkConfig = (Map<String, Object>) network.get("cfg");
            addBootProtocol(networkConfig, host, iface);
        }
        HostNetworkQosMapper qosMapper = new HostNetworkQosMapper(network);
        iface.setQos(qosMapper.deserialize());
    }
}
#end_block

#method_before
private static void setGatewayIfNecessary(VdsNetworkInterface iface, VDS host, String gateway) {
    if (FeatureSupported.multipleGatewaysSupported(host.getVdsGroupCompatibilityVersion()) || NetworkUtils.getEngineNetwork().equals(iface.getNetworkName()) || iface.getName().equals(host.getActiveNic())) {
        iface.setGateway(gateway);
    }
}
#method_after
private static void setGatewayIfNecessary(VdsNetworkInterface iface, VDS host, String gateway) {
    final ManagementNetworkUtil managementNetworkUtil = getManagementNetworkUtil();
    if (FeatureSupported.multipleGatewaysSupported(host.getVdsGroupCompatibilityVersion()) || managementNetworkUtil.isManagementNetwork(iface.getNetworkName(), host.getVdsGroupId()) || iface.getName().equals(host.getActiveNic())) {
        iface.setGateway(gateway);
    }
}
#end_block

#method_before
public static Object clone(Object instance) {
    if (instance instanceof VM) {
        return cloneVM((VM) instance);
    }
    if (instance instanceof VDS) {
        return cloneVDS((VDS) instance);
    }
    if (instance instanceof VDSGroup) {
        return cloneVDSGroup((VDSGroup) instance);
    }
    if (instance instanceof StoragePool) {
        return cloneStorage_pool((StoragePool) instance);
    }
    if (instance instanceof Network) {
        return cloneNetwork((Network) instance);
    }
    if (instance instanceof NetworkCluster) {
        return cloneNetworkCluster((NetworkCluster) instance);
    }
    if (instance instanceof ProviderNetwork) {
        return cloneProviderNetwork((ProviderNetwork) instance);
    }
    if (instance instanceof VmPool) {
        return cloneVmPool((VmPool) instance);
    }
    if (instance instanceof StorageDomainStatic) {
        return cloneStorageDomainStatic((StorageDomainStatic) instance);
    }
    if (instance instanceof VmTemplate) {
        return cloneVmTemplate((VmTemplate) instance);
    }
    if (instance instanceof VmNetworkInterface) {
        return cloneVmNetworkInterface((VmNetworkInterface) instance);
    }
    if (instance instanceof VdsNetworkInterface) {
        return cloneVdsNetworkInterface((VdsNetworkInterface) instance);
    }
    if (instance instanceof VmStatic) {
        return cloneVmStatic((VmStatic) instance);
    }
    if (instance instanceof Version) {
        return cloneVersion((Version) instance);
    }
    if (instance instanceof ClusterPolicy) {
        return cloneClusterPolicy((ClusterPolicy) instance);
    }
    // Throw exception to determine development needs.
    throw new NotImplementedException();
}
#method_after
public static Object clone(Object instance) {
    if (instance instanceof VM) {
        return cloneVM((VM) instance);
    }
    if (instance instanceof VDS) {
        return cloneVDS((VDS) instance);
    }
    if (instance instanceof VDSGroup) {
        return cloneVDSGroup((VDSGroup) instance);
    }
    if (instance instanceof StoragePool) {
        return cloneStorage_pool((StoragePool) instance);
    }
    if (instance instanceof Network) {
        return cloneNetwork((Network) instance);
    }
    if (instance instanceof NetworkCluster) {
        return cloneNetworkCluster((NetworkCluster) instance);
    }
    if (instance instanceof ProviderNetwork) {
        return cloneProviderNetwork((ProviderNetwork) instance);
    }
    if (instance instanceof VmPool) {
        return cloneVmPool((VmPool) instance);
    }
    if (instance instanceof StorageDomainStatic) {
        return cloneStorageDomainStatic((StorageDomainStatic) instance);
    }
    if (instance instanceof VmTemplate) {
        return cloneVmTemplate((VmTemplate) instance);
    }
    if (instance instanceof VmStatic) {
        return cloneVmStatic((VmStatic) instance);
    }
    if (instance instanceof Version) {
        return cloneVersion((Version) instance);
    }
    if (instance instanceof ClusterPolicy) {
        return cloneClusterPolicy((ClusterPolicy) instance);
    }
    // Throw exception to determine development needs.
    throw new NotImplementedException();
}
#end_block

#method_before
private static Object cloneVM(VM instance) {
    if (instance == null) {
        return null;
    }
    VM vm = new VM();
    vm.setAcpiEnable(instance.getAcpiEnable());
    // TODO: this field is read only in serialization - not sure why it is cloned
    // vm.ActualDiskWithSnapshotsSize = instance.ActualDiskWithSnapshotsSize;
    vm.setAppList(instance.getAppList());
    vm.setAutoStartup(instance.isAutoStartup());
    vm.setBootSequence(instance.getBootSequence());
    vm.setClientIp(instance.getClientIp());
    vm.setCpuPerSocket(instance.getCpuPerSocket());
    vm.setCpuSys(instance.getCpuSys());
    vm.setCpuUser(instance.getCpuUser());
    vm.setDedicatedVmForVds(instance.getDedicatedVmForVds());
    vm.setDefaultBootSequence(instance.getDefaultBootSequence());
    vm.setDefaultDisplayType(instance.getDefaultDisplayType());
    // TODO: 1. DiskList is an array - CopyTo should be considered (if it can be converted to java, otherwise a
    // simple loop is needed)
    // TODO: 2. it is also read only in serialization, so not sure why it is cloned. it is manipulated via
    // addDriveToImageMap
    // vm.DiskList = instance.DiskList;
    vm.setDiskSize(instance.getDiskSize());
    // TODO: this is also an object, so needs to be cloned as well. while it is only accessed via VM.DiskMap, which
    // creates a dictionary
    // from it - actually the DiskImage's themselves are probably sharing the same reference...
    vm.setDisplay(instance.getDisplay());
    vm.setDisplayIp(instance.getDisplayIp());
    vm.setDisplaySecurePort(instance.getDisplaySecurePort());
    vm.setDisplayType(instance.getDisplayType());
    vm.getDynamicData().setVncKeyboardLayout(instance.getDynamicData().getVncKeyboardLayout());
    vm.setElapsedTime(instance.getElapsedTime());
    vm.setRoundedElapsedTime(instance.getRoundedElapsedTime());
    vm.setExitMessage(instance.getExitMessage());
    vm.setExitStatus(instance.getExitStatus());
    vm.setExitReason(instance.getExitReason());
    vm.setFailBack(instance.isFailBack());
    vm.setConsoleCurrentUserName(instance.getConsoleCurentUserName());
    vm.setGuestCurrentUserName(instance.getGuestCurentUserName());
    vm.setConsoleUserId(instance.getConsoleUserId());
    vm.setGuestOs(instance.getGuestOs());
    vm.setGuestRequestedMemory(instance.getGuestRequestedMemory());
    // TODO: Object, should be "cloned" (probably easiest via new Version(instance.GuestAgentVersion.ToString())
    // pay attention NOT to use lower case version in UICommon code.
    vm.setGuestAgentVersion(instance.getGuestAgentVersion());
    vm.setInitrdUrl(instance.getInitrdUrl());
    // TODO: array - need to consider cloning of array, and of actual interfaces
    vm.setInterfaces(instance.getInterfaces());
    vm.setInitialized(instance.isInitialized());
    vm.setStateless(instance.isStateless());
    vm.setRunAndPause(instance.isRunAndPause());
    vm.setIsoPath(instance.getIsoPath());
    vm.setKernelParams(instance.getKernelParams());
    vm.setKernelUrl(instance.getKernelUrl());
    vm.setKvmEnable(instance.getKvmEnable());
    // TODO: Guid is an object, but code should treat it as immutable, and not change it's uuid directly.
    // (quick skim of code shows this should be safe with current code)
    vm.setLastVdsRunOn(instance.getLastVdsRunOn());
    vm.setMigratingToVds(instance.getMigratingToVds());
    vm.setMigrationSupport(instance.getMigrationSupport());
    vm.setNiceLevel(instance.getNiceLevel());
    vm.setUseHostCpuFlags(instance.isUseHostCpuFlags());
    // TODO: this is readonly in java, since it is computed.
    // options: use calculation here in cloner, or still wrap this in VM instead of serializing it
    // vm.num_of_cpus = instance.num_of_cpus;
    vm.setNumOfMonitors(instance.getNumOfMonitors());
    vm.setAllowConsoleReconnect(instance.getAllowConsoleReconnect());
    vm.setNumOfSockets(instance.getNumOfSockets());
    vm.setOrigin(instance.getOrigin());
    vm.setVmPauseStatus(instance.getVmPauseStatus());
    vm.setPriority(instance.getPriority());
    vm.setRunOnVds(instance.getRunOnVds());
    vm.setRunOnVdsName(instance.getRunOnVdsName());
    vm.setSession(instance.getSession());
    // TODO: see version comment above
    vm.setSpiceDriverVersion(instance.getSpiceDriverVersion());
    vm.setStatus(instance.getStatus());
    vm.setStoragePoolId(instance.getStoragePoolId());
    vm.setStoragePoolName(instance.getStoragePoolName());
    vm.setTimeZone(instance.getTimeZone());
    vm.setTransparentHugePages(instance.isTransparentHugePages());
    vm.setUsageCpuPercent(instance.getUsageCpuPercent());
    vm.setUsageMemPercent(instance.getUsageMemPercent());
    vm.setUsageNetworkPercent(instance.getUsageNetworkPercent());
    vm.setUsbPolicy(instance.getUsbPolicy());
    vm.setUtcDiff(instance.getUtcDiff());
    vm.setVdsGroupCompatibilityVersion(instance.getVdsGroupCompatibilityVersion());
    vm.setVdsGroupId(instance.getVdsGroupId());
    vm.setVdsGroupName(instance.getVdsGroupName());
    vm.setVmCreationDate(instance.getVmCreationDate());
    vm.setVmDescription(instance.getVmDescription());
    vm.setComment(instance.getComment());
    vm.setId(instance.getId());
    vm.setVmHost(instance.getVmHost());
    vm.setVmIp(instance.getVmIp());
    vm.setVmFQDN(instance.getVmFQDN());
    vm.setLastStartTime(instance.getLastStartTime());
    vm.setVmMemSizeMb(instance.getVmMemSizeMb());
    vm.setName(instance.getName());
    vm.setVmOs(instance.getVmOsId());
    vm.setVmPid(instance.getVmPid());
    vm.setVmType(instance.getVmType());
    vm.setVmPoolId(instance.getVmPoolId());
    vm.setVmPoolName(instance.getVmPoolName());
    vm.setVmtGuid(instance.getVmtGuid());
    vm.setVmtName(instance.getVmtName());
    vm.setCreatedByUserId(instance.getCreatedByUserId());
    vm.setClusterArch(instance.getClusterArch());
    vm.setOriginalTemplateGuid(instance.getOriginalTemplateGuid());
    vm.setOriginalTemplateName(instance.getOriginalTemplateName());
    vm.setMigrationDowntime(instance.getMigrationDowntime());
    vm.setUseLatestVersion(instance.isUseLatestVersion());
    vm.setSerialNumberPolicy(instance.getSerialNumberPolicy());
    vm.setCustomSerialNumber(instance.getCustomSerialNumber());
    vm.setBootMenuEnabled(instance.isBootMenuEnabled());
    vm.setSpiceFileTransferEnabled(instance.isSpiceFileTransferEnabled());
    vm.setSpiceCopyPasteEnabled(instance.isSpiceCopyPasteEnabled());
    vm.setCpuProfileId(instance.getCpuProfileId());
    vm.setAutoConverge(instance.getAutoConverge());
    vm.setMigrateCompressed(instance.getMigrateCompressed());
    vm.setPredefinedProperties(instance.getPredefinedProperties());
    vm.setUserDefinedProperties(instance.getUserDefinedProperties());
    vm.setCustomProperties(instance.getCustomProperties());
    return vm;
}
#method_after
private static Object cloneVM(VM instance) {
    if (instance == null) {
        return null;
    }
    VM vm = new VM();
    vm.setAcpiEnable(instance.getAcpiEnable());
    // TODO: this field is read only in serialization - not sure why it is cloned
    // vm.ActualDiskWithSnapshotsSize = instance.ActualDiskWithSnapshotsSize;
    vm.setAppList(instance.getAppList());
    vm.setAutoStartup(instance.isAutoStartup());
    vm.setBootSequence(instance.getBootSequence());
    vm.setClientIp(instance.getClientIp());
    vm.setCpuPerSocket(instance.getCpuPerSocket());
    vm.setCpuSys(instance.getCpuSys());
    vm.setCpuUser(instance.getCpuUser());
    vm.setDedicatedVmForVds(instance.getDedicatedVmForVds());
    vm.setDefaultBootSequence(instance.getDefaultBootSequence());
    vm.setDefaultDisplayType(instance.getDefaultDisplayType());
    // TODO: 1. DiskList is an array - CopyTo should be considered (if it can be converted to java, otherwise a
    // simple loop is needed)
    // TODO: 2. it is also read only in serialization, so not sure why it is cloned. it is manipulated via
    // addDriveToImageMap
    // vm.DiskList = instance.DiskList;
    vm.setDiskSize(instance.getDiskSize());
    // TODO: this is also an object, so needs to be cloned as well. while it is only accessed via VM.DiskMap, which
    // creates a dictionary
    // from it - actually the DiskImage's themselves are probably sharing the same reference...
    vm.getGraphicsInfos().putAll(instance.getGraphicsInfos());
    vm.getDynamicData().setVncKeyboardLayout(instance.getDynamicData().getVncKeyboardLayout());
    vm.setElapsedTime(instance.getElapsedTime());
    vm.setRoundedElapsedTime(instance.getRoundedElapsedTime());
    vm.setExitMessage(instance.getExitMessage());
    vm.setExitStatus(instance.getExitStatus());
    vm.setExitReason(instance.getExitReason());
    vm.setFailBack(instance.isFailBack());
    vm.setConsoleCurrentUserName(instance.getConsoleCurentUserName());
    vm.setGuestCurrentUserName(instance.getGuestCurentUserName());
    vm.setConsoleUserId(instance.getConsoleUserId());
    vm.setGuestOs(instance.getGuestOs());
    vm.setGuestRequestedMemory(instance.getGuestRequestedMemory());
    // TODO: Object, should be "cloned" (probably easiest via new Version(instance.GuestAgentVersion.ToString())
    // pay attention NOT to use lower case version in UICommon code.
    vm.setGuestAgentVersion(instance.getGuestAgentVersion());
    vm.setInitrdUrl(instance.getInitrdUrl());
    // TODO: array - need to consider cloning of array, and of actual interfaces
    vm.setInterfaces(instance.getInterfaces());
    vm.setInitialized(instance.isInitialized());
    vm.setStateless(instance.isStateless());
    vm.setRunAndPause(instance.isRunAndPause());
    vm.setIsoPath(instance.getIsoPath());
    vm.setKernelParams(instance.getKernelParams());
    vm.setKernelUrl(instance.getKernelUrl());
    vm.setKvmEnable(instance.getKvmEnable());
    // TODO: Guid is an object, but code should treat it as immutable, and not change it's uuid directly.
    // (quick skim of code shows this should be safe with current code)
    vm.setLastVdsRunOn(instance.getLastVdsRunOn());
    vm.setMigratingToVds(instance.getMigratingToVds());
    vm.setMigrationSupport(instance.getMigrationSupport());
    vm.setNiceLevel(instance.getNiceLevel());
    vm.setUseHostCpuFlags(instance.isUseHostCpuFlags());
    // TODO: this is readonly in java, since it is computed.
    // options: use calculation here in cloner, or still wrap this in VM instead of serializing it
    // vm.num_of_cpus = instance.num_of_cpus;
    vm.setNumOfMonitors(instance.getNumOfMonitors());
    vm.setAllowConsoleReconnect(instance.getAllowConsoleReconnect());
    vm.setNumOfSockets(instance.getNumOfSockets());
    vm.setOrigin(instance.getOrigin());
    vm.setVmPauseStatus(instance.getVmPauseStatus());
    vm.setPriority(instance.getPriority());
    vm.setRunOnVds(instance.getRunOnVds());
    vm.setRunOnVdsName(instance.getRunOnVdsName());
    vm.setSession(instance.getSession());
    // TODO: see version comment above
    vm.setSpiceDriverVersion(instance.getSpiceDriverVersion());
    vm.setStatus(instance.getStatus());
    vm.setStoragePoolId(instance.getStoragePoolId());
    vm.setStoragePoolName(instance.getStoragePoolName());
    vm.setTimeZone(instance.getTimeZone());
    vm.setTransparentHugePages(instance.isTransparentHugePages());
    vm.setUsageCpuPercent(instance.getUsageCpuPercent());
    vm.setUsageMemPercent(instance.getUsageMemPercent());
    vm.setUsageNetworkPercent(instance.getUsageNetworkPercent());
    vm.setUsbPolicy(instance.getUsbPolicy());
    vm.setUtcDiff(instance.getUtcDiff());
    vm.setVdsGroupCompatibilityVersion(instance.getVdsGroupCompatibilityVersion());
    vm.setVdsGroupId(instance.getVdsGroupId());
    vm.setVdsGroupName(instance.getVdsGroupName());
    vm.setVmCreationDate(instance.getVmCreationDate());
    vm.setVmDescription(instance.getVmDescription());
    vm.setComment(instance.getComment());
    vm.setCustomEmulatedMachine(instance.getCustomEmulatedMachine());
    vm.setCustomCpuName(instance.getCustomCpuName());
    vm.setId(instance.getId());
    vm.setVmHost(instance.getVmHost());
    vm.setVmIp(instance.getVmIp());
    vm.setVmFQDN(instance.getVmFQDN());
    vm.setLastStartTime(instance.getLastStartTime());
    vm.setVmMemSizeMb(instance.getVmMemSizeMb());
    vm.setName(instance.getName());
    vm.setVmOs(instance.getVmOsId());
    vm.setVmPid(instance.getVmPid());
    vm.setVmType(instance.getVmType());
    vm.setVmPoolId(instance.getVmPoolId());
    vm.setVmPoolName(instance.getVmPoolName());
    vm.setVmtGuid(instance.getVmtGuid());
    vm.setVmtName(instance.getVmtName());
    vm.setCreatedByUserId(instance.getCreatedByUserId());
    vm.setClusterArch(instance.getClusterArch());
    vm.setOriginalTemplateGuid(instance.getOriginalTemplateGuid());
    vm.setOriginalTemplateName(instance.getOriginalTemplateName());
    vm.setMigrationDowntime(instance.getMigrationDowntime());
    vm.setUseLatestVersion(instance.isUseLatestVersion());
    vm.setSerialNumberPolicy(instance.getSerialNumberPolicy());
    vm.setCustomSerialNumber(instance.getCustomSerialNumber());
    vm.setBootMenuEnabled(instance.isBootMenuEnabled());
    vm.setSpiceFileTransferEnabled(instance.isSpiceFileTransferEnabled());
    vm.setSpiceCopyPasteEnabled(instance.isSpiceCopyPasteEnabled());
    vm.setCpuProfileId(instance.getCpuProfileId());
    vm.setAutoConverge(instance.getAutoConverge());
    vm.setMigrateCompressed(instance.getMigrateCompressed());
    vm.setPredefinedProperties(instance.getPredefinedProperties());
    vm.setUserDefinedProperties(instance.getUserDefinedProperties());
    vm.setCustomProperties(instance.getCustomProperties());
    vm.setSingleQxlPci(instance.getSingleQxlPci());
    vm.setMinAllocatedMem(instance.getMinAllocatedMem());
    return vm;
}
#end_block

#method_before
private static Object cloneVDS(VDS instance) {
    VDS obj = new VDS();
    obj.setHostName(instance.getHostName());
    obj.setSshKeyFingerprint(instance.getSshKeyFingerprint());
    obj.setSshPort(instance.getSshPort());
    obj.setSshUsername(instance.getSshUsername());
    obj.setManagementIp(instance.getManagementIp());
    obj.setPmUser(instance.getPmUser());
    obj.setPmPassword(instance.getPmPassword());
    obj.setPmType(instance.getPmType());
    obj.setPmOptionsMap(instance.getPmOptionsMap());
    obj.setPmSecondaryIp(instance.getManagementIp());
    obj.setPmSecondaryUser(instance.getPmUser());
    obj.setPmSecondaryPassword(instance.getPmPassword());
    obj.setPmSecondaryType(instance.getPmType());
    obj.setPmSecondaryOptionsMap(instance.getPmOptionsMap());
    obj.setpm_enabled(instance.getpm_enabled());
    obj.setPmSecondaryConcurrent(instance.isPmSecondaryConcurrent());
    obj.setDisablePowerManagementPolicy(instance.isDisablePowerManagementPolicy());
    obj.setPmKdumpDetection(instance.isPmKdumpDetection());
    obj.setPort(instance.getPort());
    obj.setServerSslEnabled(instance.isServerSslEnabled());
    obj.setVdsGroupId(instance.getVdsGroupId());
    obj.setId(instance.getId());
    obj.setVdsName(instance.getName());
    obj.setVdsStrength(instance.getVdsStrength());
    obj.setVdsType(instance.getVdsType());
    obj.setUniqueId(instance.getUniqueId());
    obj.setVdsSpmPriority(instance.getVdsSpmPriority());
    return obj;
}
#method_after
private static Object cloneVDS(VDS instance) {
    VDS obj = new VDS();
    obj.setHostName(instance.getHostName());
    obj.setSshKeyFingerprint(instance.getSshKeyFingerprint());
    obj.setSshPort(instance.getSshPort());
    obj.setSshUsername(instance.getSshUsername());
    obj.setFenceAgents(cloneAgents(instance.getFenceAgents()));
    obj.setDisablePowerManagementPolicy(instance.isDisablePowerManagementPolicy());
    obj.setPmKdumpDetection(instance.isPmKdumpDetection());
    obj.setPort(instance.getPort());
    obj.setServerSslEnabled(instance.isServerSslEnabled());
    obj.setVdsGroupId(instance.getVdsGroupId());
    obj.setId(instance.getId());
    obj.setVdsName(instance.getName());
    obj.setVdsStrength(instance.getVdsStrength());
    obj.setVdsType(instance.getVdsType());
    obj.setUniqueId(instance.getUniqueId());
    obj.setVdsSpmPriority(instance.getVdsSpmPriority());
    return obj;
}
#end_block

#method_before
private static StoragePool cloneStorage_pool(StoragePool instance) {
    StoragePool obj = new StoragePool();
    obj.setdescription(instance.getdescription());
    obj.setComment(instance.getComment());
    obj.setId(instance.getId());
    obj.setName(instance.getName());
    obj.setIsLocal(instance.isLocal());
    obj.setStatus(instance.getStatus());
    obj.setmaster_domain_version(instance.getmaster_domain_version());
    obj.setLVER(instance.getLVER());
    obj.setrecovery_mode(instance.getrecovery_mode());
    obj.setspm_vds_id(instance.getspm_vds_id());
    obj.setcompatibility_version(instance.getcompatibility_version());
    return obj;
}
#method_after
private static StoragePool cloneStorage_pool(StoragePool instance) {
    StoragePool obj = new StoragePool();
    obj.setdescription(instance.getdescription());
    obj.setComment(instance.getComment());
    obj.setId(instance.getId());
    obj.setName(instance.getName());
    obj.setIsLocal(instance.isLocal());
    obj.setStatus(instance.getStatus());
    obj.setMasterDomainVersion(instance.getMasterDomainVersion());
    obj.setLVER(instance.getLVER());
    obj.setRecoveryMode(instance.getRecoveryMode());
    obj.setSpmVdsId(instance.getSpmVdsId());
    obj.setCompatibilityVersion(instance.getCompatibilityVersion());
    return obj;
}
#end_block

#method_before
private static VDSGroup cloneVDSGroup(VDSGroup instance) {
    VDSGroup obj = new VDSGroup();
    obj.setId(instance.getId());
    obj.setName(instance.getName());
    obj.setdescription(instance.getdescription());
    obj.setComment(instance.getComment());
    obj.setcpu_name(instance.getcpu_name());
    obj.setcompatibility_version(instance.getcompatibility_version());
    obj.setMigrateOnError(instance.getMigrateOnError());
    obj.setTransparentHugepages(instance.getTransparentHugepages());
    obj.setStoragePoolId(instance.getStoragePoolId());
    obj.setmax_vds_memory_over_commit(instance.getmax_vds_memory_over_commit());
    obj.setCountThreadsAsCores(instance.getCountThreadsAsCores());
    obj.setEmulatedMachine(instance.getEmulatedMachine());
    obj.setDetectEmulatedMachine(instance.isDetectEmulatedMachine());
    obj.setArchitecture(instance.getArchitecture());
    obj.setSerialNumberPolicy(instance.getSerialNumberPolicy());
    obj.setCustomSerialNumber(instance.getCustomSerialNumber());
    obj.setFencingPolicy(new FencingPolicy(instance.getFencingPolicy()));
    obj.setAutoConverge(instance.getAutoConverge());
    obj.setMigrateCompressed(instance.getMigrateCompressed());
    return obj;
}
#method_after
private static VDSGroup cloneVDSGroup(VDSGroup instance) {
    VDSGroup obj = new VDSGroup();
    obj.setId(instance.getId());
    obj.setName(instance.getName());
    obj.setDescription(instance.getDescription());
    obj.setComment(instance.getComment());
    obj.setCpuName(instance.getCpuName());
    obj.setCompatibilityVersion(instance.getCompatibilityVersion());
    obj.setMigrateOnError(instance.getMigrateOnError());
    obj.setTransparentHugepages(instance.getTransparentHugepages());
    obj.setStoragePoolId(instance.getStoragePoolId());
    obj.setMaxVdsMemoryOverCommit(instance.getMaxVdsMemoryOverCommit());
    obj.setCountThreadsAsCores(instance.getCountThreadsAsCores());
    obj.setEmulatedMachine(instance.getEmulatedMachine());
    obj.setDetectEmulatedMachine(instance.isDetectEmulatedMachine());
    obj.setArchitecture(instance.getArchitecture());
    obj.setSerialNumberPolicy(instance.getSerialNumberPolicy());
    obj.setCustomSerialNumber(instance.getCustomSerialNumber());
    obj.setFencingPolicy(new FencingPolicy(instance.getFencingPolicy()));
    obj.setAutoConverge(instance.getAutoConverge());
    obj.setMigrateCompressed(instance.getMigrateCompressed());
    return obj;
}
#end_block

#method_before
private static NetworkCluster cloneNetworkCluster(NetworkCluster instance) {
    NetworkCluster obj = new NetworkCluster();
    obj.setId(instance.getId());
    obj.setStatus(instance.getStatus());
    obj.setDisplay(instance.isDisplay());
    obj.setRequired(instance.isRequired());
    obj.setMigration(instance.isMigration());
    return obj;
}
#method_after
private static NetworkCluster cloneNetworkCluster(NetworkCluster instance) {
    NetworkCluster obj = new NetworkCluster();
    obj.setId(instance.getId());
    obj.setStatus(instance.getStatus());
    obj.setDisplay(instance.isDisplay());
    obj.setRequired(instance.isRequired());
    obj.setMigration(instance.isMigration());
    obj.setManagement(instance.isManagement());
    return obj;
}
#end_block

#method_before
private static StorageDomainStatic cloneStorageDomainStatic(StorageDomainStatic instance) {
    StorageDomainStatic obj = new StorageDomainStatic();
    obj.setConnection(instance.getConnection());
    obj.setId(instance.getId());
    obj.setStorage(instance.getStorage());
    obj.setStorageDomainType(instance.getStorageDomainType());
    obj.setStorageType(instance.getStorageType());
    obj.setStorageName(instance.getStorageName());
    obj.setStorageFormat(instance.getStorageFormat());
    return obj;
}
#method_after
private static StorageDomainStatic cloneStorageDomainStatic(StorageDomainStatic instance) {
    StorageDomainStatic obj = new StorageDomainStatic();
    obj.setConnection(instance.getConnection());
    obj.setId(instance.getId());
    obj.setStorage(instance.getStorage());
    obj.setStorageDomainType(instance.getStorageDomainType());
    obj.setStorageType(instance.getStorageType());
    obj.setStorageName(instance.getStorageName());
    obj.setStorageFormat(instance.getStorageFormat());
    obj.setWipeAfterDelete(instance.getWipeAfterDelete());
    return obj;
}
#end_block

#method_before
private static VmTemplate cloneVmTemplate(VmTemplate instance) {
    VmTemplate obj = new VmTemplate();
    obj.setStoragePoolId(instance.getStoragePoolId());
    obj.setStoragePoolName(instance.getStoragePoolName());
    obj.setDefaultDisplayType(instance.getDefaultDisplayType());
    obj.setPriority(instance.getPriority());
    obj.setIsoPath(instance.getIsoPath());
    obj.setOrigin(instance.getOrigin());
    obj.setSizeGB(instance.getSizeGB());
    // TODO: see comments above on DiskImageMap
    obj.setDiskImageMap(instance.getDiskImageMap());
    obj.setInterfaces(instance.getInterfaces());
    obj.setAutoStartup(instance.isAutoStartup());
    obj.setChildCount(instance.getChildCount());
    obj.setCpuPerSocket(instance.getCpuPerSocket());
    obj.setCreationDate(instance.getCreationDate());
    obj.setDefaultBootSequence(instance.getDefaultBootSequence());
    obj.setComment(instance.getComment());
    obj.setFailBack(instance.isFailBack());
    obj.setStateless(instance.isStateless());
    obj.setMemSizeMb(instance.getMemSizeMb());
    obj.setName(instance.getName());
    obj.setNiceLevel(instance.getNiceLevel());
    obj.setNumOfMonitors(instance.getNumOfMonitors());
    obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect());
    obj.setNumOfSockets(instance.getNumOfSockets());
    obj.setStatus(instance.getStatus());
    obj.setTimeZone(instance.getTimeZone());
    obj.setUsbPolicy(instance.getUsbPolicy());
    obj.setVdsGroupId(instance.getVdsGroupId());
    obj.setVdsGroupName(instance.getVdsGroupName());
    obj.setVmType(instance.getVmType());
    obj.setId(instance.getId());
    obj.setDiskList(instance.getDiskList());
    obj.setRunAndPause(instance.isRunAndPause());
    obj.setClusterArch(instance.getClusterArch());
    obj.setTemplateVersionNumber(instance.getTemplateVersionNumber());
    obj.setBaseTemplateId(instance.getBaseTemplateId());
    obj.setTemplateVersionName(instance.getTemplateVersionName());
    obj.setSerialNumberPolicy(instance.getSerialNumberPolicy());
    obj.setCustomSerialNumber(instance.getCustomSerialNumber());
    obj.setBootMenuEnabled(instance.isBootMenuEnabled());
    obj.setCreatedByUserId(instance.getCreatedByUserId());
    obj.setSpiceFileTransferEnabled(instance.isSpiceFileTransferEnabled());
    obj.setSpiceCopyPasteEnabled(instance.isSpiceCopyPasteEnabled());
    obj.setCpuProfileId(instance.getCpuProfileId());
    obj.setAutoConverge(instance.getAutoConverge());
    obj.setMigrateCompressed(instance.getMigrateCompressed());
    obj.setPredefinedProperties(instance.getPredefinedProperties());
    obj.setUserDefinedProperties(instance.getUserDefinedProperties());
    obj.setCustomProperties(instance.getCustomProperties());
    return obj;
}
#method_after
private static VmTemplate cloneVmTemplate(VmTemplate instance) {
    VmTemplate obj = new VmTemplate();
    obj.setStoragePoolId(instance.getStoragePoolId());
    obj.setStoragePoolName(instance.getStoragePoolName());
    obj.setDefaultDisplayType(instance.getDefaultDisplayType());
    obj.setPriority(instance.getPriority());
    obj.setIsoPath(instance.getIsoPath());
    obj.setOrigin(instance.getOrigin());
    obj.setSizeGB(instance.getSizeGB());
    // TODO: see comments above on DiskImageMap
    obj.setDiskImageMap(instance.getDiskImageMap());
    obj.setInterfaces(instance.getInterfaces());
    obj.setAutoStartup(instance.isAutoStartup());
    obj.setChildCount(instance.getChildCount());
    obj.setCpuPerSocket(instance.getCpuPerSocket());
    obj.setCreationDate(instance.getCreationDate());
    obj.setDefaultBootSequence(instance.getDefaultBootSequence());
    obj.setComment(instance.getComment());
    obj.setCustomEmulatedMachine(instance.getCustomEmulatedMachine());
    obj.setCustomCpuName(instance.getCustomCpuName());
    obj.setFailBack(instance.isFailBack());
    obj.setStateless(instance.isStateless());
    obj.setMemSizeMb(instance.getMemSizeMb());
    obj.setName(instance.getName());
    obj.setNiceLevel(instance.getNiceLevel());
    obj.setNumOfMonitors(instance.getNumOfMonitors());
    obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect());
    obj.setNumOfSockets(instance.getNumOfSockets());
    obj.setStatus(instance.getStatus());
    obj.setTimeZone(instance.getTimeZone());
    obj.setUsbPolicy(instance.getUsbPolicy());
    obj.setVdsGroupId(instance.getVdsGroupId());
    obj.setVdsGroupName(instance.getVdsGroupName());
    obj.setVmType(instance.getVmType());
    obj.setId(instance.getId());
    obj.setDiskList(instance.getDiskList());
    obj.setRunAndPause(instance.isRunAndPause());
    obj.setClusterArch(instance.getClusterArch());
    obj.setTemplateVersionNumber(instance.getTemplateVersionNumber());
    obj.setBaseTemplateId(instance.getBaseTemplateId());
    obj.setTemplateVersionName(instance.getTemplateVersionName());
    obj.setSerialNumberPolicy(instance.getSerialNumberPolicy());
    obj.setCustomSerialNumber(instance.getCustomSerialNumber());
    obj.setBootMenuEnabled(instance.isBootMenuEnabled());
    obj.setCreatedByUserId(instance.getCreatedByUserId());
    obj.setSpiceFileTransferEnabled(instance.isSpiceFileTransferEnabled());
    obj.setSpiceCopyPasteEnabled(instance.isSpiceCopyPasteEnabled());
    obj.setCpuProfileId(instance.getCpuProfileId());
    obj.setAutoConverge(instance.getAutoConverge());
    obj.setMigrateCompressed(instance.getMigrateCompressed());
    obj.setPredefinedProperties(instance.getPredefinedProperties());
    obj.setUserDefinedProperties(instance.getUserDefinedProperties());
    obj.setCustomProperties(instance.getCustomProperties());
    return obj;
}
#end_block

#method_before
private static VmStatic cloneVmStatic(VmStatic instance) {
    VmStatic obj = new VmStatic();
    obj.setFailBack(instance.isFailBack());
    obj.setDefaultBootSequence(instance.getDefaultBootSequence());
    obj.setVmType(instance.getVmType());
    obj.setDefaultDisplayType(instance.getDefaultDisplayType());
    obj.setPriority(instance.getPriority());
    obj.setIsoPath(instance.getIsoPath());
    obj.setOrigin(instance.getOrigin());
    obj.setAutoStartup(instance.isAutoStartup());
    obj.setCpuPerSocket(instance.getCpuPerSocket());
    obj.setCreationDate(instance.getCreationDate());
    obj.setDedicatedVmForVds(instance.getDedicatedVmForVds());
    obj.setDescription(instance.getDescription());
    obj.setComment(instance.getComment());
    obj.setInitialized(instance.isInitialized());
    obj.setStateless(instance.isStateless());
    obj.setRunAndPause(instance.isRunAndPause());
    obj.setMemSizeMb(instance.getMemSizeMb());
    obj.setNiceLevel(instance.getNiceLevel());
    obj.setNumOfMonitors(instance.getNumOfMonitors());
    obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect());
    obj.setNumOfSockets(instance.getNumOfSockets());
    obj.setTimeZone(instance.getTimeZone());
    obj.setUsbPolicy(instance.getUsbPolicy());
    obj.setVdsGroupId(instance.getVdsGroupId());
    obj.setId(instance.getId());
    obj.setName(instance.getName());
    obj.setVmtGuid(instance.getVmtGuid());
    obj.setUseLatestVersion(instance.isUseLatestVersion());
    obj.setSerialNumberPolicy(instance.getSerialNumberPolicy());
    obj.setCustomSerialNumber(instance.getCustomSerialNumber());
    obj.setBootMenuEnabled(instance.isBootMenuEnabled());
    obj.setSpiceFileTransferEnabled(instance.isSpiceFileTransferEnabled());
    obj.setSpiceCopyPasteEnabled(instance.isSpiceCopyPasteEnabled());
    obj.setCpuProfileId(instance.getCpuProfileId());
    obj.setAutoConverge(instance.getAutoConverge());
    obj.setMigrateCompressed(instance.getMigrateCompressed());
    obj.setPredefinedProperties(instance.getPredefinedProperties());
    obj.setUserDefinedProperties(instance.getUserDefinedProperties());
    obj.setCustomProperties(instance.getCustomProperties());
    return obj;
}
#method_after
private static VmStatic cloneVmStatic(VmStatic instance) {
    VmStatic obj = new VmStatic();
    obj.setFailBack(instance.isFailBack());
    obj.setDefaultBootSequence(instance.getDefaultBootSequence());
    obj.setVmType(instance.getVmType());
    obj.setDefaultDisplayType(instance.getDefaultDisplayType());
    obj.setPriority(instance.getPriority());
    obj.setIsoPath(instance.getIsoPath());
    obj.setOrigin(instance.getOrigin());
    obj.setAutoStartup(instance.isAutoStartup());
    obj.setCpuPerSocket(instance.getCpuPerSocket());
    obj.setCreationDate(instance.getCreationDate());
    obj.setDedicatedVmForVds(instance.getDedicatedVmForVds());
    obj.setDescription(instance.getDescription());
    obj.setComment(instance.getComment());
    obj.setCustomEmulatedMachine(instance.getCustomEmulatedMachine());
    obj.setCustomCpuName(instance.getCustomCpuName());
    obj.setInitialized(instance.isInitialized());
    obj.setStateless(instance.isStateless());
    obj.setRunAndPause(instance.isRunAndPause());
    obj.setMemSizeMb(instance.getMemSizeMb());
    obj.setNiceLevel(instance.getNiceLevel());
    obj.setNumOfMonitors(instance.getNumOfMonitors());
    obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect());
    obj.setNumOfSockets(instance.getNumOfSockets());
    obj.setTimeZone(instance.getTimeZone());
    obj.setUsbPolicy(instance.getUsbPolicy());
    obj.setVdsGroupId(instance.getVdsGroupId());
    obj.setId(instance.getId());
    obj.setName(instance.getName());
    obj.setVmtGuid(instance.getVmtGuid());
    obj.setUseLatestVersion(instance.isUseLatestVersion());
    obj.setSerialNumberPolicy(instance.getSerialNumberPolicy());
    obj.setCustomSerialNumber(instance.getCustomSerialNumber());
    obj.setBootMenuEnabled(instance.isBootMenuEnabled());
    obj.setSpiceFileTransferEnabled(instance.isSpiceFileTransferEnabled());
    obj.setSpiceCopyPasteEnabled(instance.isSpiceCopyPasteEnabled());
    obj.setCpuProfileId(instance.getCpuProfileId());
    obj.setAutoConverge(instance.getAutoConverge());
    obj.setMigrateCompressed(instance.getMigrateCompressed());
    obj.setPredefinedProperties(instance.getPredefinedProperties());
    obj.setUserDefinedProperties(instance.getUserDefinedProperties());
    obj.setCustomProperties(instance.getCustomProperties());
    return obj;
}
#end_block

#method_before
protected <T extends DAO> T getDao(Class<T> daoType) {
    @SuppressWarnings("unchecked")
    Set<T> daos = (Set<T>) beanManager.getBeans(daoType, (Annotation[]) null);
    if (daos.size() == 0) {
        log.error("Can't find dao for " + daoType);
        return null;
    }
    T dao = daos.iterator().next();
    if (dao instanceof BaseDAODbFacade && !(dao instanceof HibernateFacade)) {
        BaseDAODbFacade dbFacadeDAO = (BaseDAODbFacade) dao;
        dbFacadeDAO.setTemplate(jdbcTemplate);
        dbFacadeDAO.setDialect(dbEngineDialect);
        dbFacadeDAO.setDbFacade(this);
    }
    return dao;
}
#method_after
@SuppressWarnings("unchecked")
protected <T extends DAO> T getDao(Class<T> daoType) {
    for (DAO dao : daos) {
        if (daoType.isAssignableFrom(dao.getClass())) {
            BaseDAODbFacade dbFacadeDAO = (BaseDAODbFacade) dao;
            dbFacadeDAO.setTemplate(jdbcTemplate);
            dbFacadeDAO.setDialect(dbEngineDialect);
            dbFacadeDAO.setDbFacade(this);
            return (T) dao;
        }
    }
    log.error("Can't find dao for " + daoType);
    return null;
}
#end_block

#method_before
public static Version getMinVersionByClusters(List<VDSGroup> source) {
    Version minVersion = source != null && source.size() > 0 ? source.get(0).getcompatibility_version() : null;
    if (minVersion != null) {
        for (VDSGroup cluster : source) {
            minVersion = cluster.getcompatibility_version().compareTo(minVersion) < 0 ? (Version) cluster.getcompatibility_version() : minVersion;
        }
    }
    return minVersion;
}
#method_after
public static Version getMinVersionByClusters(List<VDSGroup> source) {
    Version minVersion = source != null && source.size() > 0 ? source.get(0).getCompatibilityVersion() : null;
    if (minVersion != null) {
        for (VDSGroup cluster : source) {
            minVersion = cluster.getCompatibilityVersion().compareTo(minVersion) < 0 ? (Version) cluster.getCompatibilityVersion() : minVersion;
        }
    }
    return minVersion;
}
#end_block

#method_before
public static ArrayList<VDS> findAllVDSByPmEnabled(ArrayList<VDS> items) {
    ArrayList<VDS> ret = new ArrayList<VDS>();
    for (VDS i : items) {
        if (i.getpm_enabled()) {
            ret.add(i);
        }
    }
    return ret;
}
#method_after
public static ArrayList<VDS> findAllVDSByPmEnabled(ArrayList<VDS> items) {
    ArrayList<VDS> ret = new ArrayList<VDS>();
    for (VDS i : items) {
        if (i.isPmEnabled()) {
            ret.add(i);
        }
    }
    return ret;
}
#end_block

#method_before
public static ArrayList<StorageDomain> getStorageDomainsByIds(ArrayList<Guid> storageIds, ArrayList<StorageDomain> storageDomains) {
    ArrayList<StorageDomain> list = new ArrayList<StorageDomain>();
    for (Guid storageId : storageIds) {
        StorageDomain storageDomain = getStorageById(storageId, storageDomains);
        if (storageDomain != null) {
            list.add(getStorageById(storageId, storageDomains));
        }
    }
    return list;
}
#method_after
public static ArrayList<StorageDomain> getStorageDomainsByIds(ArrayList<Guid> storageIds, ArrayList<StorageDomain> storageDomains) {
    ArrayList<StorageDomain> list = new ArrayList<StorageDomain>();
    for (Guid storageId : storageIds) {
        StorageDomain storageDomain = getStorageById(storageId, storageDomains);
        if (storageDomain != null) {
            list.add(storageDomain);
        }
    }
    return list;
}
#end_block

#method_before
@Override
public int compare(ProviderType type1, ProviderType type2) {
    final EnumTranslator enumTranslator = EnumTranslator.getInstance();
    return LexoNumericComparator.comp(enumTranslator.get(type1), enumTranslator.get(type2));
}
#method_after
@Override
public int compare(ProviderType type1, ProviderType type2) {
    final EnumTranslator enumTranslator = EnumTranslator.getInstance();
    return LexoNumericComparator.comp(enumTranslator.translate(type1), enumTranslator.translate(type2));
}
#end_block

#method_before
@Override
public int compare(ImportEntityData entity1, ImportEntityData entity2) {
    return lexoNumeric.compare(entity1.getName(), entity2.getName());
}
#method_after
@Override
public int compare(ImportEntityData<T> entity1, ImportEntityData<T> entity2) {
    return lexoNumeric.compare(entity1.getName(), entity2.getName());
}
#end_block

#method_before
private void init() {
    setDataCenter(new EntityModel<String>());
    setClusters(new ListModel<VDSGroup>());
    getClusters().getSelectedItemChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            clusterSelectedItemChanged();
        }
    });
    setVolumeName(new EntityModel<String>());
    setClusterConfigOptions(new ListModel<EntityModel<VolumeSnapshotConfigModel>>());
    setVolumeConfigOptions(new ListModel<EntityModel<VolumeSnapshotConfigModel>>());
}
#method_after
private void init() {
    setDataCenter(new EntityModel<String>());
    setClusterName(new EntityModel<String>());
    setVolumeName(new EntityModel<String>());
    setConfigOptions(new ListModel<EntityModel<VolumeSnapshotOptionModel>>());
    populateConfigOptions();
}
#end_block

#method_before
public boolean validate() {
    boolean isValid = true;
    setMessage(null);
    Iterable<EntityModel<VolumeSnapshotConfigModel>> items1 = getClusterConfigOptions().getItems();
    for (EntityModel<VolumeSnapshotConfigModel> model : items1) {
        VolumeSnapshotConfigModel option = model.getEntity();
        if (option.getOptionValue().trim().length() == 0) {
            setMessage(ConstantsManager.getInstance().getMessages().clusterSnapshotOptionValueEmpty(option.getOptionName()));
            isValid = false;
            break;
        }
    }
    Iterable<EntityModel<VolumeSnapshotConfigModel>> items2 = getVolumeConfigOptions().getItems();
    for (EntityModel<VolumeSnapshotConfigModel> model : items2) {
        VolumeSnapshotConfigModel option = model.getEntity();
        if (option.getOptionValue().trim().length() == 0) {
            setMessage(ConstantsManager.getInstance().getMessages().volumeSnapshotOptionValueEmpty(option.getOptionName()));
            isValid = false;
            break;
        }
    }
    return isValid;
}
#method_after
public boolean validate() {
    boolean isValid = true;
    setMessage(null);
    Iterable<EntityModel<VolumeSnapshotOptionModel>> items = getConfigOptions().getItems();
    for (EntityModel<VolumeSnapshotOptionModel> model : items) {
        if (model.getEntity().getOptionValue().trim().length() == 0) {
            setMessage(ConstantsManager.getInstance().getMessages().volumeSnapshotOptionValueEmpty(model.getEntity().getOptionName()));
            isValid = false;
            break;
        }
    }
    return isValid;
}
#end_block

#method_before
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    VolumeStatusColumn statusColumn = new VolumeStatusColumn();
    statusColumn.makeSortable(new Comparator<GlusterVolumeEntity>() {

        @Override
        public int compare(GlusterVolumeEntity o1, GlusterVolumeEntity o2) {
            return GlusterVolumeUtils.getVolumeStatus(o1).ordinal() - GlusterVolumeUtils.getVolumeStatus(o2).ordinal();
        }
    });
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.empty(), "30px");
    TextColumnWithTooltip<GlusterVolumeEntity> nameColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getName();
        }
    };
    nameColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.NameVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> clusterColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getVdsGroupName();
        }
    };
    clusterColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> volumeTypeColumn = new EnumColumn<GlusterVolumeEntity, GlusterVolumeType>() {

        @Override
        protected GlusterVolumeType getRawValue(GlusterVolumeEntity object) {
            return object.getVolumeType();
        }
    };
    volumeTypeColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(volumeTypeColumn, constants.volumeTypeVolume(), "150px");
    // $NON-NLS-1$
    getTable().addColumn(new VolumeBrickStatusColumn(), constants.bricksStatusVolume(), "150px");
    MenuCell<GlusterTaskSupport> rebalanceMenuCell = getRebalanceActivityMenu(constants);
    MenuCell<GlusterTaskSupport> removeBricksMenuCell = getRemoveBrickActivityMenu(constants);
    List<HasCell<GlusterTaskSupport, ?>> list = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    list.add(new VolumeActivityStatusColumn<GlusterTaskSupport>());
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivitySeperatorCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(rebalanceMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(removeBricksMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    List<HasCell<GlusterTaskSupport, ?>> compositeList = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeTaskWaitingCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivityCompositeCell<GlusterTaskSupport>(list)) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    getTable().addColumn(new Column<GlusterVolumeEntity, GlusterVolumeEntity>(new VolumeCapacityCell()) {

        @Override
        public GlusterVolumeEntity getValue(GlusterVolumeEntity object) {
            return object;
        }
    }, constants.volumeCapacity(), // $NON-NLS-1$
    "60px");
    getTable().addColumn(new VolumeActivityColumn<GlusterVolumeEntity>(new VolumeActivityCompositeCell<GlusterTaskSupport>(compositeList) {

        @Override
        protected boolean isVisible(GlusterTaskSupport value) {
            return !(value == null || value.getAsyncTask() == null);
        }
    }), constants.activitiesOnVolume(), // $NON-NLS-1$
    "100px");
    // $NON-NLS-1$
    getTable().addColumn(new GlusterVolumeSnapshotsCountColumn(), constants.noOfSnapshotsLabel(), "100px");
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.newVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.removeVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.rebalanceVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartRebalanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.optimizeForVirtStore()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getOptimizeForVirtStoreCommand();
        }
    });
    List<ActionButtonDefinition<GlusterVolumeEntity>> volumeProfilingActions = new LinkedList<ActionButtonDefinition<GlusterVolumeEntity>>();
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolumeProfiling()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartVolumeProfilingCommand();
        }
    });
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.volumeProfileDetails()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getShowVolumeProfileDetailsCommand();
        }
    });
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolumeProfiling()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopVolumeProfilingCommand();
        }
    });
    getTable().addActionButton(new WebAdminMenuBarButtonDefinition<GlusterVolumeEntity>(constants.volumeProfilingAction(), volumeProfilingActions, CommandLocation.ContextAndToolBar));
    getTable().addActionButton(new WebAdminMenuBarButtonDefinition<GlusterVolumeEntity>(constants.volumeSnapshotMainTabTitle(), getVolumeSnapshotMenu(constants), CommandLocation.ContextAndToolBar));
}
#method_after
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    VolumeStatusColumn statusColumn = new VolumeStatusColumn();
    statusColumn.makeSortable(new Comparator<GlusterVolumeEntity>() {

        @Override
        public int compare(GlusterVolumeEntity o1, GlusterVolumeEntity o2) {
            return GlusterVolumeUtils.getVolumeStatus(o1).ordinal() - GlusterVolumeUtils.getVolumeStatus(o2).ordinal();
        }
    });
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.empty(), "30px");
    AbstractTextColumnWithTooltip<GlusterVolumeEntity> nameColumn = new AbstractTextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getName();
        }
    };
    nameColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.NameVolume(), "150px");
    AbstractTextColumnWithTooltip<GlusterVolumeEntity> clusterColumn = new AbstractTextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getVdsGroupName();
        }
    };
    clusterColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterVolume(), "150px");
    AbstractTextColumnWithTooltip<GlusterVolumeEntity> volumeTypeColumn = new AbstractEnumColumn<GlusterVolumeEntity, GlusterVolumeType>() {

        @Override
        protected GlusterVolumeType getRawValue(GlusterVolumeEntity object) {
            return object.getVolumeType();
        }
    };
    volumeTypeColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(volumeTypeColumn, constants.volumeTypeVolume(), "150px");
    // $NON-NLS-1$
    getTable().addColumn(new VolumeBrickStatusColumn(), constants.bricksStatusVolume(), "150px");
    MenuCell<GlusterTaskSupport> rebalanceMenuCell = getRebalanceActivityMenu(constants);
    MenuCell<GlusterTaskSupport> removeBricksMenuCell = getRemoveBrickActivityMenu(constants);
    List<HasCell<GlusterTaskSupport, ?>> list = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    list.add(new VolumeActivityStatusColumn<GlusterTaskSupport>());
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivitySeperatorCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(rebalanceMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(removeBricksMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    List<HasCell<GlusterTaskSupport, ?>> compositeList = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeTaskWaitingCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivityCompositeCell<GlusterTaskSupport>(list)) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    getTable().addColumn(new Column<GlusterVolumeEntity, GlusterVolumeEntity>(new VolumeCapacityCell()) {

        @Override
        public GlusterVolumeEntity getValue(GlusterVolumeEntity object) {
            return object;
        }
    }, constants.volumeCapacity(), // $NON-NLS-1$
    "60px");
    getTable().addColumn(new VolumeActivityColumn<GlusterVolumeEntity>(new VolumeActivityCompositeCell<GlusterTaskSupport>(compositeList) {

        @Override
        protected boolean isVisible(GlusterTaskSupport value) {
            return !(value == null || value.getAsyncTask() == null);
        }
    }), constants.activitiesOnVolume(), // $NON-NLS-1$
    "100px");
    AbstractTextColumnWithTooltip<GlusterVolumeEntity> snapshotCountColumn = new AbstractTextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getSnapshotsCount().toString();
        }
    };
    snapshotCountColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(snapshotCountColumn, constants.noOfSnapshotsLabel(), "100px");
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.newVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.removeVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.rebalanceVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartRebalanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.optimizeForVirtStore()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getOptimizeForVirtStoreCommand();
        }
    });
    List<ActionButtonDefinition<GlusterVolumeEntity>> volumeProfilingActions = new LinkedList<ActionButtonDefinition<GlusterVolumeEntity>>();
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolumeProfiling()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartVolumeProfilingCommand();
        }
    });
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.volumeProfileDetails()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getShowVolumeProfileDetailsCommand();
        }
    });
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolumeProfiling()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopVolumeProfilingCommand();
        }
    });
    getTable().addActionButton(new WebAdminMenuBarButtonDefinition<GlusterVolumeEntity>(constants.volumeProfilingAction(), volumeProfilingActions, CommandLocation.ContextAndToolBar));
    getTable().addActionButton(new WebAdminMenuBarButtonDefinition<GlusterVolumeEntity>(constants.volumeSnapshotMainTabTitle(), getVolumeSnapshotMenu(constants), CommandLocation.ContextAndToolBar));
}
#end_block

#method_before
private List<ActionButtonDefinition<GlusterVolumeEntity>> getVolumeSnapshotMenu(ApplicationConstants constants) {
    List<ActionButtonDefinition<GlusterVolumeEntity>> snapshotMenu = new ArrayList<ActionButtonDefinition<GlusterVolumeEntity>>();
    WebAdminButtonDefinition<GlusterVolumeEntity> newSnapshotButton = new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.newVolumeSnapshot()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getCreateSnapshotCommand();
        }
    };
    WebAdminButtonDefinition<GlusterVolumeEntity> configureSnapshotButton = new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.configureVolumeSnapshotOptions()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getConfigureSnapshotCommand();
        }
    };
    snapshotMenu.add(newSnapshotButton);
    snapshotMenu.add(configureSnapshotButton);
    return snapshotMenu;
}
#method_after
private List<ActionButtonDefinition<GlusterVolumeEntity>> getVolumeSnapshotMenu(ApplicationConstants constants) {
    List<ActionButtonDefinition<GlusterVolumeEntity>> snapshotMenu = new ArrayList<ActionButtonDefinition<GlusterVolumeEntity>>();
    WebAdminButtonDefinition<GlusterVolumeEntity> configureClusterSnapshotOptionsButton = new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.configureClusterSnapshotOptions()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getConfigureClusterSnapshotOptionsCommand();
        }
    };
    WebAdminButtonDefinition<GlusterVolumeEntity> configureVolumeSnapshotOptionsButton = new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.configureVolumeSnapshotOptions()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getConfigureVolumeSnapshotOptionsCommand();
        }
    };
    snapshotMenu.add(configureClusterSnapshotOptionsButton);
    snapshotMenu.add(configureVolumeSnapshotOptionsButton);
    return snapshotMenu;
}
#end_block

#method_before
public void isClusterEmpty(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter<Boolean>() {

        @Override
        public Boolean Convert(Object source, AsyncQuery _asyncQuery) {
            return (Boolean) source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsClusterEmpty, new IdQueryParameters(id), aQuery);
}
#method_after
public void isClusterEmpty(AsyncQuery aQuery, Guid clusterId) {
    runQueryByIdParameter(VdcQueryType.IsClusterEmpty, aQuery, clusterId);
}
#end_block

#method_before
public void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#method_after
public void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (List<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#end_block

#method_before
public void getUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    getUpHostListByCluster(aQuery, clusterName, null);
}
#method_after
public void getUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : Collections.emptyList();
        }
    };
    getUpHostListByCluster(aQuery, clusterName, null);
}
#end_block

#method_before
// Main List Model
@Provides
@Singleton
public MainModelProvider<GlusterVolumeEntity, VolumeListModel> getVolumeListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VolumePopupPresenterWidget> popupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider, final Provider<VolumeRebalanceStatusPopupPresenterWidget> rebalanceStatusPopupProvider, final Provider<VolumeProfileStatisticsPopupPresenterWidget> volumeProfileStatsPopupProvider, final Provider<VolumeListModel> modelProvider, final Provider<CommonModel> commonModelProvider, final Provider<GlusterVolumeSnapshotConfigurePopupPresenterWidget> snapshotConfigPopupProvider) {
    MainTabModelProvider<GlusterVolumeEntity, VolumeListModel> result = new MainTabModelProvider<GlusterVolumeEntity, VolumeListModel>(eventBus, defaultConfirmPopupProvider, commonModelProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getNewVolumeCommand()) {
                return popupProvider.get();
            } else if (lastExecutedCommand == getModel().getStatusRebalanceCommand() || lastExecutedCommand.getName().equals("onStopRebalance")) {
                // $NON-NLS-1$
                return rebalanceStatusPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getShowVolumeProfileDetailsCommand() || lastExecutedCommand.getName().equals("showProfileDetails")) {
                // $NON-NLS-1$
                return volumeProfileStatsPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getConfigureSnapshotCommand()) {
                return snapshotConfigPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VolumeListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getStopCommand() || lastExecutedCommand == getModel().getRemoveVolumeCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
    result.setModelProvider(modelProvider);
    return result;
}
#method_after
// Main List Model
@Provides
@Singleton
public MainModelProvider<GlusterVolumeEntity, VolumeListModel> getVolumeListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VolumePopupPresenterWidget> popupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider, final Provider<VolumeRebalanceStatusPopupPresenterWidget> rebalanceStatusPopupProvider, final Provider<VolumeProfileStatisticsPopupPresenterWidget> volumeProfileStatsPopupProvider, final Provider<VolumeListModel> modelProvider, final Provider<CommonModel> commonModelProvider, final Provider<GlusterVolumeSnapshotConfigureOptionsPopupPresenterWidget> volumeSnapshotConfigOptionsPopupProvider, final Provider<GlusterClusterSnapshotConfigureOptionsPopupPresenterWidget> clusterSnapshotConfigOptionsPopupProvider) {
    MainTabModelProvider<GlusterVolumeEntity, VolumeListModel> result = new MainTabModelProvider<GlusterVolumeEntity, VolumeListModel>(eventBus, defaultConfirmPopupProvider, commonModelProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getNewVolumeCommand()) {
                return popupProvider.get();
            } else if (lastExecutedCommand == getModel().getStatusRebalanceCommand() || lastExecutedCommand.getName().equals("onStopRebalance")) {
                // $NON-NLS-1$
                return rebalanceStatusPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getShowVolumeProfileDetailsCommand() || lastExecutedCommand.getName().equals("showProfileDetails")) {
                // $NON-NLS-1$
                return volumeProfileStatsPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getConfigureVolumeSnapshotOptionsCommand()) {
                return volumeSnapshotConfigOptionsPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getConfigureClusterSnapshotOptionsCommand()) {
                return clusterSnapshotConfigOptionsPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VolumeListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getStopCommand() || lastExecutedCommand == getModel().getRemoveVolumeCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Provides
@Singleton
public SearchableDetailModelProvider<GlusterVolumeSnapshotEntity, VolumeListModel, GlusterVolumeSnapshotListModel> getVolumeSnapshotListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VolumeListModel> mainModelProvider, final Provider<GlusterVolumeSnapshotListModel> modelProvider, final Provider<GlusterVolumeSnapshotCreatePopupPresenterWidget> snapshotPopupProvider) {
    SearchableDetailTabModelProvider<GlusterVolumeSnapshotEntity, VolumeListModel, GlusterVolumeSnapshotListModel> result = new SearchableDetailTabModelProvider<GlusterVolumeSnapshotEntity, VolumeListModel, GlusterVolumeSnapshotListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(GlusterVolumeSnapshotListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getNewSnapshotCommand()) {
                return snapshotPopupProvider.get();
            }
            return super.getModelPopup(source, lastExecutedCommand, windowModel);
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(GlusterVolumeSnapshotListModel source, UICommand lastExecutedCommand) {
            return super.getConfirmModelPopup(source, lastExecutedCommand);
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#method_after
@Provides
@Singleton
public SearchableDetailModelProvider<GlusterVolumeSnapshotEntity, VolumeListModel, GlusterVolumeSnapshotListModel> getVolumeSnapshotListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VolumeListModel> mainModelProvider, final Provider<GlusterVolumeSnapshotListModel> modelProvider) {
    SearchableDetailTabModelProvider<GlusterVolumeSnapshotEntity, VolumeListModel, GlusterVolumeSnapshotListModel> result = new SearchableDetailTabModelProvider<GlusterVolumeSnapshotEntity, VolumeListModel, GlusterVolumeSnapshotListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(GlusterVolumeSnapshotListModel source, UICommand lastExecutedCommand, Model windowModel) {
            return super.getModelPopup(source, lastExecutedCommand, windowModel);
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(GlusterVolumeSnapshotListModel source, UICommand lastExecutedCommand) {
            return super.getConfirmModelPopup(source, lastExecutedCommand);
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Override
protected void configure() {
    bind(VolumeListModel.class).in(Singleton.class);
    bind(VolumeGeneralModel.class).in(Singleton.class);
    bind(VolumeBrickListModel.class).in(Singleton.class);
    bind(VolumeParameterListModel.class).in(Singleton.class);
    bind(VolumeEventListModel.class).in(Singleton.class);
    bind(new TypeLiteral<PermissionListModel<VolumeListModel>>() {
    }).in(Singleton.class);
    bind(GlusterVolumeSnapshotListModel.class).in(Singleton.class);
    // Form Detail Models
    bind(new TypeLiteral<DetailModelProvider<VolumeListModel, VolumeGeneralModel>>() {
    }).to(new TypeLiteral<DetailTabModelProvider<VolumeListModel, VolumeGeneralModel>>() {
    }).in(Singleton.class);
    // Search-able Detail Models
    bind(new TypeLiteral<SearchableDetailModelProvider<GlusterGeoRepSession, VolumeListModel, VolumeGeoRepListModel>>() {
    }).to(new TypeLiteral<SearchableDetailTabModelProvider<GlusterGeoRepSession, VolumeListModel, VolumeGeoRepListModel>>() {
    }).in(Singleton.class);
    // Permission Detail Model
    bind(new TypeLiteral<SearchableDetailModelProvider<Permissions, VolumeListModel, PermissionListModel<VolumeListModel>>>() {
    }).to(new TypeLiteral<PermissionModelProvider<VolumeListModel>>() {
    }).in(Singleton.class);
}
#method_after
@Override
protected void configure() {
    bind(VolumeListModel.class).in(Singleton.class);
    bind(VolumeGeneralModel.class).in(Singleton.class);
    bind(VolumeBrickListModel.class).in(Singleton.class);
    bind(VolumeParameterListModel.class).in(Singleton.class);
    bind(VolumeEventListModel.class).in(Singleton.class);
    bind(VolumeGeoRepListModel.class).in(Singleton.class);
    bind(GlusterVolumeSnapshotListModel.class).in(Singleton.class);
    bind(new TypeLiteral<PermissionListModel<GlusterVolumeEntity>>() {
    }).in(Singleton.class);
    // Form Detail Models
    bind(new TypeLiteral<DetailModelProvider<VolumeListModel, VolumeGeneralModel>>() {
    }).to(new TypeLiteral<DetailTabModelProvider<VolumeListModel, VolumeGeneralModel>>() {
    }).in(Singleton.class);
    // Permission Detail Model
    bind(new TypeLiteral<SearchableDetailModelProvider<Permissions, VolumeListModel, PermissionListModel<GlusterVolumeEntity>>>() {
    }).to(new TypeLiteral<PermissionModelProvider<GlusterVolumeEntity, VolumeListModel>>() {
    }).in(Singleton.class);
}
#end_block

#method_before
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindPresenterWidget(LoginFormPresenterWidget.class, LoginFormPresenterWidget.ViewDef.class, LoginFormView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    bindPresenterWidget(ManagePolicyUnitPopupPresenterWidget.class, ManagePolicyUnitPopupPresenterWidget.ViewDef.class, ManagePolicyUnitPopupView.class);
    bindPresenterWidget(SharedMacPoolPopupPresenterWidget.class, SharedMacPoolPopupPresenterWidget.ViewDef.class, SharedMacPoolPopupView.class);
    bindPresenterWidget(AffinityGroupPopupPresenterWidget.class, AffinityGroupPopupPresenterWidget.ViewDef.class, AffinityGroupPopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabNetworkPresenter.class, MainTabNetworkPresenter.ViewDef.class, MainTabNetworkView.class, MainTabNetworkPresenter.ProxyDef.class);
    bindPresenter(MainTabVnicProfilePresenter.class, MainTabVnicProfilePresenter.ViewDef.class, MainTabVnicProfileView.class, MainTabVnicProfilePresenter.ProxyDef.class);
    bindPresenter(MainTabProviderPresenter.class, MainTabProviderPresenter.ViewDef.class, MainTabProviderView.class, MainTabProviderPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(DataCenterQosSubTabPanelPresenter.class, DataCenterQosSubTabPanelPresenter.ViewDef.class, DataCenterQosSubTabPanelView.class, DataCenterQosSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterIscsiBondPresenter.class, SubTabDataCenterIscsiBondPresenter.ViewDef.class, SubTabDataCenterIscsiBondView.class, SubTabDataCenterIscsiBondPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkQoSPresenter.class, SubTabDataCenterNetworkQoSPresenter.ViewDef.class, SubTabDataCenterNetworkQoSView.class, SubTabDataCenterNetworkQoSPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStorageQosPresenter.class, SubTabDataCenterStorageQosPresenter.ViewDef.class, SubTabDataCenterStorageQosView.class, SubTabDataCenterStorageQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterCpuQosPresenter.class, SubTabDataCenterCpuQosPresenter.ViewDef.class, SubTabDataCenterCpuQosView.class, SubTabDataCenterCpuQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterHostNetworkQosPresenter.class, SubTabDataCenterHostNetworkQosPresenter.ViewDef.class, SubTabDataCenterHostNetworkQosView.class, SubTabDataCenterHostNetworkQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterVmPresenter.class, SubTabStorageRegisterVmPresenter.ViewDef.class, SubTabStorageRegisterVmView.class, SubTabStorageRegisterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterTemplatePresenter.class, SubTabStorageRegisterTemplatePresenter.ViewDef.class, SubTabStorageRegisterTemplateView.class, SubTabStorageRegisterTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskPresenter.class, SubTabStorageDiskPresenter.ViewDef.class, SubTabStorageDiskView.class, SubTabStorageDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageSnapshotPresenter.class, SubTabStorageSnapshotPresenter.ViewDef.class, SubTabStorageSnapshotView.class, SubTabStorageSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskProfilePresenter.class, SubTabStorageDiskProfilePresenter.ViewDef.class, SubTabStorageDiskProfileView.class, SubTabStorageDiskProfilePresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterServicePresenter.class, SubTabClusterServicePresenter.ViewDef.class, SubTabClusterServiceView.class, SubTabClusterServicePresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGlusterHookPresenter.class, SubTabClusterGlusterHookPresenter.ViewDef.class, SubTabClusterGlusterHookView.class, SubTabClusterGlusterHookPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterAffinityGroupPresenter.class, SubTabClusterAffinityGroupPresenter.ViewDef.class, SubTabClusterAffinityGroupView.class, SubTabClusterAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterCpuProfilePresenter.class, SubTabClusterCpuProfilePresenter.ViewDef.class, SubTabClusterCpuProfileView.class, SubTabClusterCpuProfilePresenter.ProxyDef.class);
    bindPresenterWidget(GlusterVolumeSnapshotCreatePopupPresenterWidget.class, GlusterVolumeSnapshotCreatePopupPresenterWidget.ViewDef.class, GlusterVolumeSnapshotCreatePopupView.class);
    bindPresenterWidget(GlusterVolumeSnapshotConfigurePopupPresenterWidget.class, GlusterVolumeSnapshotConfigurePopupPresenterWidget.ViewDef.class, GlusterVolumeSnapshotConfigurePopupView.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostHardwarePresenter.class, SubTabHostHardwarePresenter.ViewDef.class, SubTabHostHardwareView.class, SubTabHostHardwarePresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGlusterSwiftPresenter.class, SubTabHostGlusterSwiftPresenter.ViewDef.class, SubTabHostGlusterSwiftView.class, SubTabHostGlusterSwiftPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    bindPresenter(SubTabHostBrickPresenter.class, SubTabHostBrickPresenter.ViewDef.class, SubTabHostBrickView.class, SubTabHostBrickPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineAffinityGroupPresenter.class, SubTabVirtualMachineAffinityGroupPresenter.ViewDef.class, SubTabVirtualMachineAffinityGroupView.class, SubTabVirtualMachineAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSessionsPresenter.class, SubTabVirtualMachineSessionsPresenter.ViewDef.class, SubTabVirtualMachineSessionsView.class, SubTabVirtualMachineSessionsPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    bindPresenterWidget(PoolEditPopupPresenterWidget.class, PoolEditPopupPresenterWidget.ViewDef.class, PoolEditPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Network
    bindPresenter(NetworkSubTabPanelPresenter.class, NetworkSubTabPanelPresenter.ViewDef.class, NetworkSubTabPanelView.class, NetworkSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkGeneralPresenter.class, SubTabNetworkGeneralPresenter.ViewDef.class, SubTabNetworkGeneralView.class, SubTabNetworkGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkProfilePresenter.class, SubTabNetworkProfilePresenter.ViewDef.class, SubTabNetworkProfileView.class, SubTabNetworkProfilePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkExternalSubnetPresenter.class, SubTabNetworkExternalSubnetPresenter.ViewDef.class, SubTabNetworkExternalSubnetView.class, SubTabNetworkExternalSubnetPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkClusterPresenter.class, SubTabNetworkClusterPresenter.ViewDef.class, SubTabNetworkClusterView.class, SubTabNetworkClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkHostPresenter.class, SubTabNetworkHostPresenter.ViewDef.class, SubTabNetworkHostView.class, SubTabNetworkHostPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkVmPresenter.class, SubTabNetworkVmPresenter.ViewDef.class, SubTabNetworkVmView.class, SubTabNetworkVmPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkTemplatePresenter.class, SubTabNetworkTemplatePresenter.ViewDef.class, SubTabNetworkTemplateView.class, SubTabNetworkTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkPermissionPresenter.class, SubTabNetworkPermissionPresenter.ViewDef.class, SubTabNetworkPermissionView.class, SubTabNetworkPermissionPresenter.ProxyDef.class);
    // Provider
    bindPresenter(ProviderSubTabPanelPresenter.class, ProviderSubTabPanelPresenter.ViewDef.class, ProviderSubTabPanelView.class, ProviderSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderGeneralPresenter.class, SubTabProviderGeneralPresenter.ViewDef.class, SubTabProviderGeneralView.class, SubTabProviderGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderNetworkPresenter.class, SubTabProviderNetworkPresenter.ViewDef.class, SubTabProviderNetworkView.class, SubTabProviderNetworkPresenter.ProxyDef.class);
    // Profile
    bindPresenter(VnicProfileSubTabPanelPresenter.class, VnicProfileSubTabPanelPresenter.ViewDef.class, VnicProfileSubTabPanelView.class, VnicProfileSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfilePermissionPresenter.class, SubTabVnicProfilePermissionPresenter.ViewDef.class, SubTabVnicProfilePermissionView.class, SubTabVnicProfilePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileVmPresenter.class, SubTabVnicProfileVmPresenter.ViewDef.class, SubTabVnicProfileVmView.class, SubTabVnicProfileVmPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileTemplatePresenter.class, SubTabVnicProfileTemplatePresenter.ViewDef.class, SubTabVnicProfileTemplateView.class, SubTabVnicProfileTemplatePresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    bindPresenterWidget(SystemPermissionsRemoveConfirmationPopupPresenterWidget.class, SystemPermissionsRemoveConfirmationPopupPresenterWidget.ViewDef.class, SystemPermissionsRemoveConfirmationPopupView.class);
    bindPresenterWidget(VmNextRunConfigurationPresenterWidget.class, VmNextRunConfigurationPresenterWidget.ViewDef.class, VmNextRunConfigurationPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    bindPresenterWidget(DataCenterForceRemovePopupPresenterWidget.class, DataCenterForceRemovePopupPresenterWidget.ViewDef.class, DataCenterForceRemovePopupView.class);
    // Cluster
    bindPresenterWidget(NewClusterNetworkPopupPresenterWidget.class, NewClusterNetworkPopupPresenterWidget.ViewDef.class, NewClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(DetachGlusterHostsPopupPresenterWidget.class, DetachGlusterHostsPopupPresenterWidget.ViewDef.class, DetachGlusterHostsPopupView.class);
    bindPresenterWidget(GlusterHookContentPopupPresenterWidget.class, GlusterHookContentPopupPresenterWidget.ViewDef.class, GlusterHookContentPopupView.class);
    bindPresenterWidget(GlusterHookResolveConflictsPopupPresenterWidget.class, GlusterHookResolveConflictsPopupPresenterWidget.ViewDef.class, GlusterHookResolveConflictsPopupView.class);
    bindPresenterWidget(VolumeRebalanceStatusPopupPresenterWidget.class, VolumeRebalanceStatusPopupPresenterWidget.ViewDef.class, VolumeRebalanceStatusPopupView.class);
    bindPresenterWidget(RemoveBrickStatusPopupPresenterWidget.class, RemoveBrickStatusPopupPresenterWidget.ViewDef.class, RemoveBrickStatusPopupView.class);
    bindPresenterWidget(ManageGlusterSwiftPopupPresenterWidget.class, ManageGlusterSwiftPopupPresenterWidget.ViewDef.class, ManageGlusterSwiftPopupView.class);
    bindPresenterWidget(VolumeProfileStatisticsPopupPresenterWidget.class, VolumeProfileStatisticsPopupPresenterWidget.ViewDef.class, VolumeProfileStatisticsPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(SetupNetworksInterfacePopupPresenterWidget.class, SetupNetworksInterfacePopupPresenterWidget.ViewDef.class, SetupNetworksInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(SetupNetworksManagementPopupPresenterWidget.class, SetupNetworksManagementPopupPresenterWidget.ViewDef.class, SetupNetworksManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(SetupNetworksBondPopupPresenterWidget.class, SetupNetworksBondPopupPresenterWidget.ViewDef.class, SetupNetworksBondPopupView.class);
    bindPresenterWidget(HostNicPopupPresenterWidget.class, HostNicPopupPresenterWidget.ViewDef.class, HostNicPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    bindPresenterWidget(HostManagementConfirmationPopupPresenterWidget.class, HostManagementConfirmationPopupPresenterWidget.ViewDef.class, HostManagementConfirmationPopupView.class);
    bindPresenterWidget(MultipleHostsPopupPresenterWidget.class, MultipleHostsPopupPresenterWidget.ViewDef.class, MultipleHostsPopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmFromExportDomainPopupPresenterWidget.class, ImportVmFromExportDomainPopupPresenterWidget.ViewDef.class, ImportVmFromExportDomainPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(RegisterVmPopupPresenterWidget.class, RegisterVmPopupPresenterWidget.ViewDef.class, RegisterVmPopupView.class);
    bindPresenterWidget(RegisterTemplatePopupPresenterWidget.class, RegisterTemplatePopupPresenterWidget.ViewDef.class, RegisterTemplatePopupView.class);
    bindPresenterWidget(ImportCloneDialogPresenterWidget.class, ImportCloneDialogPresenterWidget.ViewDef.class, ImportCloneDialogPopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    bindPresenterWidget(ChangeQuotaPopupPresenterWidget.class, ChangeQuotaPopupPresenterWidget.ViewDef.class, ChangeQuotaPopupView.class);
    bindPresenterWidget(ImportExportImagePopupPresenterWidget.class, ImportExportImagePopupPresenterWidget.ViewDef.class, ImportExportImagePopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(StorageForceCreatePopupPresenterWidget.class, StorageForceCreatePopupPresenterWidget.ViewDef.class, StorageForceCreatePopupView.class);
    bindPresenterWidget(VmPopupPresenterWidget.class, VmPopupPresenterWidget.ViewDef.class, VmPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Snapshot Preview
    bindPresenterWidget(VmSnapshotPreviewPopupPresenterWidget.class, VmSnapshotPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotPreviewPopupView.class);
    bindPresenterWidget(VmSnapshotCustomPreviewPopupPresenterWidget.class, VmSnapshotCustomPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotCustomPreviewPopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // Clone VM
    bindPresenterWidget(CloneVmPopupPresenterWidget.class, CloneVmPopupPresenterWidget.ViewDef.class, CloneVmPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM Remove
    bindPresenterWidget(VmRemovePopupPresenterWidget.class, VmRemovePopupPresenterWidget.ViewDef.class, VmRemovePopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Attach Disk
    bindPresenterWidget(VmDiskAttachPopupPresenterWidget.class, VmDiskAttachPopupPresenterWidget.ViewDef.class, VmDiskAttachPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateNewPresenterWidget.class, TemplateNewPresenterWidget.ViewDef.class, TemplateNewPopupView.class);
    // Instance Types
    bindPresenterWidget(InstanceTypesPopupPresenterWidget.class, InstanceTypesPopupPresenterWidget.ViewDef.class, InstanceTypesPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    // Network QoS
    bindPresenterWidget(NetworkQoSPopupPresenterWidget.class, NetworkQoSPopupPresenterWidget.ViewDef.class, NetworkQoSPopupView.class);
    // Storage QoS
    bindPresenterWidget(StorageQosPopupPresenterWidget.class, StorageQosPopupPresenterWidget.ViewDef.class, StorageQosPopupView.class);
    // Cpu QoS
    bindPresenterWidget(CpuQosPopupPresenterWidget.class, CpuQosPopupPresenterWidget.ViewDef.class, CpuQosPopupView.class);
    // Host Network QoS
    bindPresenterWidget(HostNetworkQosPopupPresenterWidget.class, HostNetworkQosPopupPresenterWidget.ViewDef.class, HostNetworkQosPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    bindPresenterWidget(ImportVmsPopupPresenterWidget.class, ImportVmsPopupPresenterWidget.ViewDef.class, ImportVmsPopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeoRepPresenter.class, SubTabVolumeGeoRepPresenter.ViewDef.class, SubTabVolumeGeoRepView.class, SubTabVolumeGeoRepPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenter(SubTabGlusterVolumeSnapshotPresenter.class, SubTabGlusterVolumeSnapshotPresenter.ViewDef.class, SubTabGlusterVolumeSnapshotView.class, SubTabGlusterVolumeSnapshotPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(RemoveBrickPopupPresenterWidget.class, RemoveBrickPopupPresenterWidget.ViewDef.class, RemoveBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(BrickAdvancedDetailsPopupPresenterWidget.class, BrickAdvancedDetailsPopupPresenterWidget.ViewDef.class, BrickAdvancedDetailsPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
    // Network
    bindPresenterWidget(NewNetworkPopupPresenterWidget.class, NewNetworkPopupPresenterWidget.ViewDef.class, NewNetworkPopupView.class);
    bindPresenterWidget(EditNetworkPopupPresenterWidget.class, EditNetworkPopupPresenterWidget.ViewDef.class, EditNetworkPopupView.class);
    // Event
    bindPresenterWidget(EventPopupPresenterWidget.class, EventPopupPresenterWidget.ViewDef.class, EventPopupView.class);
    // Provider
    bindPresenterWidget(ProviderPopupPresenterWidget.class, ProviderPopupPresenterWidget.ViewDef.class, ProviderPopupView.class);
    bindPresenterWidget(ImportNetworksPopupPresenterWidget.class, ImportNetworksPopupPresenterWidget.ViewDef.class, ImportNetworksPopupView.class);
    // Profile
    bindPresenterWidget(VnicProfilePopupPresenterWidget.class, VnicProfilePopupPresenterWidget.ViewDef.class, VnicProfilePopupView.class);
    bindPresenterWidget(DiskProfilePopupPresenterWidget.class, DiskProfilePopupPresenterWidget.ViewDef.class, DiskProfilePopupView.class);
    bindPresenterWidget(CpuProfilePopupPresenterWidget.class, CpuProfilePopupPresenterWidget.ViewDef.class, CpuProfilePopupView.class);
    // External Subnet
    bindPresenterWidget(ExternalSubnetPopupPresenterWidget.class, ExternalSubnetPopupPresenterWidget.ViewDef.class, ExternalSubnetPopupView.class);
    // ISCSI Bond
    bindPresenterWidget(IscsiBondPopupPresenterWidget.class, IscsiBondPopupPresenterWidget.ViewDef.class, IscsiBondPopupView.class);
}
#method_after
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindPresenterWidget(LoginFormPresenterWidget.class, LoginFormPresenterWidget.ViewDef.class, LoginFormView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    bindPresenterWidget(ManagePolicyUnitPopupPresenterWidget.class, ManagePolicyUnitPopupPresenterWidget.ViewDef.class, ManagePolicyUnitPopupView.class);
    bindPresenterWidget(SharedMacPoolPopupPresenterWidget.class, SharedMacPoolPopupPresenterWidget.ViewDef.class, SharedMacPoolPopupView.class);
    bindPresenterWidget(AffinityGroupPopupPresenterWidget.class, AffinityGroupPopupPresenterWidget.ViewDef.class, AffinityGroupPopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabNetworkPresenter.class, MainTabNetworkPresenter.ViewDef.class, MainTabNetworkView.class, MainTabNetworkPresenter.ProxyDef.class);
    bindPresenter(MainTabVnicProfilePresenter.class, MainTabVnicProfilePresenter.ViewDef.class, MainTabVnicProfileView.class, MainTabVnicProfilePresenter.ProxyDef.class);
    bindPresenter(MainTabProviderPresenter.class, MainTabProviderPresenter.ViewDef.class, MainTabProviderView.class, MainTabProviderPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(DataCenterQosSubTabPanelPresenter.class, DataCenterQosSubTabPanelPresenter.ViewDef.class, DataCenterQosSubTabPanelView.class, DataCenterQosSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterIscsiBondPresenter.class, SubTabDataCenterIscsiBondPresenter.ViewDef.class, SubTabDataCenterIscsiBondView.class, SubTabDataCenterIscsiBondPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkQoSPresenter.class, SubTabDataCenterNetworkQoSPresenter.ViewDef.class, SubTabDataCenterNetworkQoSView.class, SubTabDataCenterNetworkQoSPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStorageQosPresenter.class, SubTabDataCenterStorageQosPresenter.ViewDef.class, SubTabDataCenterStorageQosView.class, SubTabDataCenterStorageQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterCpuQosPresenter.class, SubTabDataCenterCpuQosPresenter.ViewDef.class, SubTabDataCenterCpuQosView.class, SubTabDataCenterCpuQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterHostNetworkQosPresenter.class, SubTabDataCenterHostNetworkQosPresenter.ViewDef.class, SubTabDataCenterHostNetworkQosView.class, SubTabDataCenterHostNetworkQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterVmPresenter.class, SubTabStorageRegisterVmPresenter.ViewDef.class, SubTabStorageRegisterVmView.class, SubTabStorageRegisterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterTemplatePresenter.class, SubTabStorageRegisterTemplatePresenter.ViewDef.class, SubTabStorageRegisterTemplateView.class, SubTabStorageRegisterTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskPresenter.class, SubTabStorageDiskPresenter.ViewDef.class, SubTabStorageDiskView.class, SubTabStorageDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageSnapshotPresenter.class, SubTabStorageSnapshotPresenter.ViewDef.class, SubTabStorageSnapshotView.class, SubTabStorageSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskProfilePresenter.class, SubTabStorageDiskProfilePresenter.ViewDef.class, SubTabStorageDiskProfileView.class, SubTabStorageDiskProfilePresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterServicePresenter.class, SubTabClusterServicePresenter.ViewDef.class, SubTabClusterServiceView.class, SubTabClusterServicePresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGlusterHookPresenter.class, SubTabClusterGlusterHookPresenter.ViewDef.class, SubTabClusterGlusterHookView.class, SubTabClusterGlusterHookPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterAffinityGroupPresenter.class, SubTabClusterAffinityGroupPresenter.ViewDef.class, SubTabClusterAffinityGroupView.class, SubTabClusterAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterCpuProfilePresenter.class, SubTabClusterCpuProfilePresenter.ViewDef.class, SubTabClusterCpuProfileView.class, SubTabClusterCpuProfilePresenter.ProxyDef.class);
    bindPresenterWidget(GlusterVolumeSnapshotConfigureOptionsPopupPresenterWidget.class, GlusterVolumeSnapshotConfigureOptionsPopupPresenterWidget.ViewDef.class, GlusterVolumeSnapshotConfigureOptionsPopupView.class);
    bindPresenterWidget(GlusterClusterSnapshotConfigureOptionsPopupPresenterWidget.class, GlusterClusterSnapshotConfigureOptionsPopupPresenterWidget.ViewDef.class, GlusterClusterSnapshotConfigureOptionsPopupView.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostHardwarePresenter.class, SubTabHostHardwarePresenter.ViewDef.class, SubTabHostHardwareView.class, SubTabHostHardwarePresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGlusterSwiftPresenter.class, SubTabHostGlusterSwiftPresenter.ViewDef.class, SubTabHostGlusterSwiftView.class, SubTabHostGlusterSwiftPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    bindPresenter(SubTabHostBrickPresenter.class, SubTabHostBrickPresenter.ViewDef.class, SubTabHostBrickView.class, SubTabHostBrickPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineAffinityGroupPresenter.class, SubTabVirtualMachineAffinityGroupPresenter.ViewDef.class, SubTabVirtualMachineAffinityGroupView.class, SubTabVirtualMachineAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSessionsPresenter.class, SubTabVirtualMachineSessionsPresenter.ViewDef.class, SubTabVirtualMachineSessionsView.class, SubTabVirtualMachineSessionsPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    bindPresenterWidget(PoolEditPopupPresenterWidget.class, PoolEditPopupPresenterWidget.ViewDef.class, PoolEditPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Network
    bindPresenter(NetworkSubTabPanelPresenter.class, NetworkSubTabPanelPresenter.ViewDef.class, NetworkSubTabPanelView.class, NetworkSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkGeneralPresenter.class, SubTabNetworkGeneralPresenter.ViewDef.class, SubTabNetworkGeneralView.class, SubTabNetworkGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkProfilePresenter.class, SubTabNetworkProfilePresenter.ViewDef.class, SubTabNetworkProfileView.class, SubTabNetworkProfilePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkExternalSubnetPresenter.class, SubTabNetworkExternalSubnetPresenter.ViewDef.class, SubTabNetworkExternalSubnetView.class, SubTabNetworkExternalSubnetPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkClusterPresenter.class, SubTabNetworkClusterPresenter.ViewDef.class, SubTabNetworkClusterView.class, SubTabNetworkClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkHostPresenter.class, SubTabNetworkHostPresenter.ViewDef.class, SubTabNetworkHostView.class, SubTabNetworkHostPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkVmPresenter.class, SubTabNetworkVmPresenter.ViewDef.class, SubTabNetworkVmView.class, SubTabNetworkVmPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkTemplatePresenter.class, SubTabNetworkTemplatePresenter.ViewDef.class, SubTabNetworkTemplateView.class, SubTabNetworkTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkPermissionPresenter.class, SubTabNetworkPermissionPresenter.ViewDef.class, SubTabNetworkPermissionView.class, SubTabNetworkPermissionPresenter.ProxyDef.class);
    // Provider
    bindPresenter(ProviderSubTabPanelPresenter.class, ProviderSubTabPanelPresenter.ViewDef.class, ProviderSubTabPanelView.class, ProviderSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderGeneralPresenter.class, SubTabProviderGeneralPresenter.ViewDef.class, SubTabProviderGeneralView.class, SubTabProviderGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderNetworkPresenter.class, SubTabProviderNetworkPresenter.ViewDef.class, SubTabProviderNetworkView.class, SubTabProviderNetworkPresenter.ProxyDef.class);
    // Profile
    bindPresenter(VnicProfileSubTabPanelPresenter.class, VnicProfileSubTabPanelPresenter.ViewDef.class, VnicProfileSubTabPanelView.class, VnicProfileSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfilePermissionPresenter.class, SubTabVnicProfilePermissionPresenter.ViewDef.class, SubTabVnicProfilePermissionView.class, SubTabVnicProfilePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileVmPresenter.class, SubTabVnicProfileVmPresenter.ViewDef.class, SubTabVnicProfileVmView.class, SubTabVnicProfileVmPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileTemplatePresenter.class, SubTabVnicProfileTemplatePresenter.ViewDef.class, SubTabVnicProfileTemplateView.class, SubTabVnicProfileTemplatePresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    bindPresenterWidget(SystemPermissionsRemoveConfirmationPopupPresenterWidget.class, SystemPermissionsRemoveConfirmationPopupPresenterWidget.ViewDef.class, SystemPermissionsRemoveConfirmationPopupView.class);
    bindPresenterWidget(VmNextRunConfigurationPresenterWidget.class, VmNextRunConfigurationPresenterWidget.ViewDef.class, VmNextRunConfigurationPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    bindPresenterWidget(DataCenterForceRemovePopupPresenterWidget.class, DataCenterForceRemovePopupPresenterWidget.ViewDef.class, DataCenterForceRemovePopupView.class);
    // Cluster
    bindPresenterWidget(NewClusterNetworkPopupPresenterWidget.class, NewClusterNetworkPopupPresenterWidget.ViewDef.class, NewClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(DetachGlusterHostsPopupPresenterWidget.class, DetachGlusterHostsPopupPresenterWidget.ViewDef.class, DetachGlusterHostsPopupView.class);
    bindPresenterWidget(GlusterHookContentPopupPresenterWidget.class, GlusterHookContentPopupPresenterWidget.ViewDef.class, GlusterHookContentPopupView.class);
    bindPresenterWidget(GlusterHookResolveConflictsPopupPresenterWidget.class, GlusterHookResolveConflictsPopupPresenterWidget.ViewDef.class, GlusterHookResolveConflictsPopupView.class);
    bindPresenterWidget(VolumeRebalanceStatusPopupPresenterWidget.class, VolumeRebalanceStatusPopupPresenterWidget.ViewDef.class, VolumeRebalanceStatusPopupView.class);
    bindPresenterWidget(GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.class, GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.ViewDef.class, GeoRepActionConfirmPopUpView.class);
    bindPresenterWidget(RemoveBrickStatusPopupPresenterWidget.class, RemoveBrickStatusPopupPresenterWidget.ViewDef.class, RemoveBrickStatusPopupView.class);
    bindPresenterWidget(ManageGlusterSwiftPopupPresenterWidget.class, ManageGlusterSwiftPopupPresenterWidget.ViewDef.class, ManageGlusterSwiftPopupView.class);
    bindPresenterWidget(VolumeProfileStatisticsPopupPresenterWidget.class, VolumeProfileStatisticsPopupPresenterWidget.ViewDef.class, VolumeProfileStatisticsPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(SetupNetworksInterfacePopupPresenterWidget.class, SetupNetworksInterfacePopupPresenterWidget.ViewDef.class, SetupNetworksInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(SetupNetworksManagementPopupPresenterWidget.class, SetupNetworksManagementPopupPresenterWidget.ViewDef.class, SetupNetworksManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(SetupNetworksBondPopupPresenterWidget.class, SetupNetworksBondPopupPresenterWidget.ViewDef.class, SetupNetworksBondPopupView.class);
    bindPresenterWidget(HostNicPopupPresenterWidget.class, HostNicPopupPresenterWidget.ViewDef.class, HostNicPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    bindPresenterWidget(HostManagementConfirmationPopupPresenterWidget.class, HostManagementConfirmationPopupPresenterWidget.ViewDef.class, HostManagementConfirmationPopupView.class);
    bindPresenterWidget(MultipleHostsPopupPresenterWidget.class, MultipleHostsPopupPresenterWidget.ViewDef.class, MultipleHostsPopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmFromExportDomainPopupPresenterWidget.class, ImportVmFromExportDomainPopupPresenterWidget.ViewDef.class, ImportVmFromExportDomainPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(RegisterVmPopupPresenterWidget.class, RegisterVmPopupPresenterWidget.ViewDef.class, RegisterVmPopupView.class);
    bindPresenterWidget(RegisterTemplatePopupPresenterWidget.class, RegisterTemplatePopupPresenterWidget.ViewDef.class, RegisterTemplatePopupView.class);
    bindPresenterWidget(ImportCloneDialogPresenterWidget.class, ImportCloneDialogPresenterWidget.ViewDef.class, ImportCloneDialogPopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    bindPresenterWidget(ChangeQuotaPopupPresenterWidget.class, ChangeQuotaPopupPresenterWidget.ViewDef.class, ChangeQuotaPopupView.class);
    bindPresenterWidget(ImportExportImagePopupPresenterWidget.class, ImportExportImagePopupPresenterWidget.ViewDef.class, ImportExportImagePopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(StorageForceCreatePopupPresenterWidget.class, StorageForceCreatePopupPresenterWidget.ViewDef.class, StorageForceCreatePopupView.class);
    bindPresenterWidget(VmPopupPresenterWidget.class, VmPopupPresenterWidget.ViewDef.class, VmPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Snapshot Preview
    bindPresenterWidget(VmSnapshotPreviewPopupPresenterWidget.class, VmSnapshotPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotPreviewPopupView.class);
    bindPresenterWidget(VmSnapshotCustomPreviewPopupPresenterWidget.class, VmSnapshotCustomPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotCustomPreviewPopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // Clone VM
    bindPresenterWidget(CloneVmPopupPresenterWidget.class, CloneVmPopupPresenterWidget.ViewDef.class, CloneVmPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM Remove
    bindPresenterWidget(VmRemovePopupPresenterWidget.class, VmRemovePopupPresenterWidget.ViewDef.class, VmRemovePopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Attach Disk
    bindPresenterWidget(VmDiskAttachPopupPresenterWidget.class, VmDiskAttachPopupPresenterWidget.ViewDef.class, VmDiskAttachPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateEditPresenterWidget.class, TemplateEditPresenterWidget.ViewDef.class, TemplateEditPopupView.class);
    // Instance Types
    bindPresenterWidget(InstanceTypesPopupPresenterWidget.class, InstanceTypesPopupPresenterWidget.ViewDef.class, InstanceTypesPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    // Network QoS
    bindPresenterWidget(NetworkQoSPopupPresenterWidget.class, NetworkQoSPopupPresenterWidget.ViewDef.class, NetworkQoSPopupView.class);
    // Storage QoS
    bindPresenterWidget(StorageQosPopupPresenterWidget.class, StorageQosPopupPresenterWidget.ViewDef.class, StorageQosPopupView.class);
    // Cpu QoS
    bindPresenterWidget(CpuQosPopupPresenterWidget.class, CpuQosPopupPresenterWidget.ViewDef.class, CpuQosPopupView.class);
    // Host Network QoS
    bindPresenterWidget(HostNetworkQosPopupPresenterWidget.class, HostNetworkQosPopupPresenterWidget.ViewDef.class, HostNetworkQosPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    bindPresenterWidget(ImportVmsPopupPresenterWidget.class, ImportVmsPopupPresenterWidget.ViewDef.class, ImportVmsPopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeoRepPresenter.class, SubTabVolumeGeoRepPresenter.ViewDef.class, SubTabVolumeGeoRepView.class, SubTabVolumeGeoRepPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenter(SubTabGlusterVolumeSnapshotPresenter.class, SubTabGlusterVolumeSnapshotPresenter.ViewDef.class, SubTabGlusterVolumeSnapshotView.class, SubTabGlusterVolumeSnapshotPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(RemoveBrickPopupPresenterWidget.class, RemoveBrickPopupPresenterWidget.ViewDef.class, RemoveBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(BrickAdvancedDetailsPopupPresenterWidget.class, BrickAdvancedDetailsPopupPresenterWidget.ViewDef.class, BrickAdvancedDetailsPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
    // Network
    bindPresenterWidget(NewNetworkPopupPresenterWidget.class, NewNetworkPopupPresenterWidget.ViewDef.class, NewNetworkPopupView.class);
    bindPresenterWidget(EditNetworkPopupPresenterWidget.class, EditNetworkPopupPresenterWidget.ViewDef.class, EditNetworkPopupView.class);
    // Event
    bindPresenterWidget(EventPopupPresenterWidget.class, EventPopupPresenterWidget.ViewDef.class, EventPopupView.class);
    // Provider
    bindPresenterWidget(ProviderPopupPresenterWidget.class, ProviderPopupPresenterWidget.ViewDef.class, ProviderPopupView.class);
    bindPresenterWidget(ImportNetworksPopupPresenterWidget.class, ImportNetworksPopupPresenterWidget.ViewDef.class, ImportNetworksPopupView.class);
    // Profile
    bindPresenterWidget(VnicProfilePopupPresenterWidget.class, VnicProfilePopupPresenterWidget.ViewDef.class, VnicProfilePopupView.class);
    bindPresenterWidget(DiskProfilePopupPresenterWidget.class, DiskProfilePopupPresenterWidget.ViewDef.class, DiskProfilePopupView.class);
    bindPresenterWidget(CpuProfilePopupPresenterWidget.class, CpuProfilePopupPresenterWidget.ViewDef.class, CpuProfilePopupView.class);
    // External Subnet
    bindPresenterWidget(ExternalSubnetPopupPresenterWidget.class, ExternalSubnetPopupPresenterWidget.ViewDef.class, ExternalSubnetPopupView.class);
    // ISCSI Bond
    bindPresenterWidget(IscsiBondPopupPresenterWidget.class, IscsiBondPopupPresenterWidget.ViewDef.class, IscsiBondPopupView.class);
}
#end_block

#method_before
private void setDetailList(final VolumeGeneralModel volumeGeneralModel, final VolumeParameterListModel volumeParameterListModel, final PermissionListModel<VolumeListModel> permissionListModel, final VolumeEventListModel volumeEventListModel) {
    List<EntityModel> list = new ArrayList<EntityModel>();
    list.add(volumeGeneralModel);
    list.add(volumeParameterListModel);
    list.add(getBrickListModel());
    list.add(getGeoRepListModel());
    list.add(permissionListModel);
    list.add(volumeEventListModel);
    list.add(getSnapshotListModel());
    setDetailModels(list);
}
#method_after
private void setDetailList(final VolumeGeneralModel volumeGeneralModel, final VolumeParameterListModel volumeParameterListModel, final PermissionListModel<GlusterVolumeEntity> permissionListModel, final VolumeEventListModel volumeEventListModel) {
    List<HasEntity<GlusterVolumeEntity>> list = new ArrayList<>();
    list.add(volumeGeneralModel);
    list.add(volumeParameterListModel);
    list.add(getBrickListModel());
    list.add(getGeoRepListModel());
    list.add(permissionListModel);
    list.add(volumeEventListModel);
    list.add(getSnapshotListModel());
    setDetailModels(list);
}
#end_block

#method_before
private void newVolume() {
    if (getWindow() != null) {
        return;
    }
    VolumeModel volumeModel = new VolumeModel();
    volumeModel.setHelpTag(HelpTag.new_volume);
    // $NON-NLS-1$
    volumeModel.setHashName("new_volume");
    volumeModel.setTitle(ConstantsManager.getInstance().getConstants().newVolumeTitle());
    setWindow(volumeModel);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            VolumeListModel volumeListModel = (VolumeListModel) model;
            VolumeModel innerVolumeModel = (VolumeModel) volumeListModel.getWindow();
            ArrayList<StoragePool> dataCenters = (ArrayList<StoragePool>) result;
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (volumeListModel.getSystemTreeSelectedItem() != null) {
                switch(volumeListModel.getSystemTreeSelectedItem().getType()) {
                    case Volumes:
                    case Cluster:
                    case Cluster_Gluster:
                        VDSGroup cluster = (VDSGroup) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        for (StoragePool dc : dataCenters) {
                            if (dc.getId().equals(cluster.getStoragePoolId())) {
                                innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { dc })));
                                innerVolumeModel.getDataCenter().setSelectedItem(dc);
                                break;
                            }
                        }
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        innerVolumeModel.getCluster().setItems(Arrays.asList(cluster));
                        innerVolumeModel.getCluster().setSelectedItem(cluster);
                        innerVolumeModel.getCluster().setIsChangable(false);
                        innerVolumeModel.getCluster().setChangeProhibitionReason(constants.cannotChangeClusterInTreeContext());
                        break;
                    case Clusters:
                    case DataCenter:
                        StoragePool selectDataCenter = (StoragePool) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { selectDataCenter })));
                        innerVolumeModel.getDataCenter().setSelectedItem(selectDataCenter);
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        break;
                    default:
                        innerVolumeModel.getDataCenter().setItems(dataCenters);
                        innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
                        break;
                }
            } else {
                innerVolumeModel.getDataCenter().setItems(dataCenters);
                innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
            }
            // $NON-NLS-1$
            UICommand command = new UICommand("onCreateVolume", volumeListModel);
            command.setTitle(ConstantsManager.getInstance().getConstants().ok());
            command.setIsDefault(true);
            innerVolumeModel.getCommands().add(command);
            // $NON-NLS-1$
            command = new UICommand("Cancel", volumeListModel);
            command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            command.setIsCancel(true);
            innerVolumeModel.getCommands().add(command);
        }
    };
    AsyncDataProvider.getInstance().getDataCenterByClusterServiceList(_asyncQuery, false, true);
}
#method_after
private void newVolume() {
    if (getWindow() != null) {
        return;
    }
    VolumeModel volumeModel = new VolumeModel();
    volumeModel.setHelpTag(HelpTag.new_volume);
    // $NON-NLS-1$
    volumeModel.setHashName("new_volume");
    volumeModel.setTitle(ConstantsManager.getInstance().getConstants().newVolumeTitle());
    setWindow(volumeModel);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            VolumeListModel volumeListModel = (VolumeListModel) model;
            VolumeModel innerVolumeModel = (VolumeModel) volumeListModel.getWindow();
            ArrayList<StoragePool> dataCenters = (ArrayList<StoragePool>) result;
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (volumeListModel.getSystemTreeSelectedItem() != null) {
                switch(volumeListModel.getSystemTreeSelectedItem().getType()) {
                    case Volumes:
                    case Cluster:
                    case Cluster_Gluster:
                        VDSGroup cluster = (VDSGroup) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        for (StoragePool dc : dataCenters) {
                            if (dc.getId().equals(cluster.getStoragePoolId())) {
                                innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { dc })));
                                innerVolumeModel.getDataCenter().setSelectedItem(dc);
                                break;
                            }
                        }
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        innerVolumeModel.getCluster().setItems(Arrays.asList(cluster));
                        innerVolumeModel.getCluster().setSelectedItem(cluster);
                        innerVolumeModel.getCluster().setIsChangable(false);
                        innerVolumeModel.getCluster().setChangeProhibitionReason(constants.cannotChangeClusterInTreeContext());
                        break;
                    case Clusters:
                    case DataCenter:
                        StoragePool selectDataCenter = (StoragePool) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { selectDataCenter })));
                        innerVolumeModel.getDataCenter().setSelectedItem(selectDataCenter);
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        break;
                    default:
                        innerVolumeModel.getDataCenter().setItems(dataCenters);
                        innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
                        break;
                }
            } else {
                innerVolumeModel.getDataCenter().setItems(dataCenters);
                innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
            }
            // $NON-NLS-1$
            UICommand command = UICommand.createDefaultOkUiCommand("onCreateVolume", volumeListModel);
            innerVolumeModel.getCommands().add(command);
            // $NON-NLS-1$
            innerVolumeModel.getCommands().add(UICommand.createCancelUiCommand("Cancel", volumeListModel));
        }
    };
    AsyncDataProvider.getInstance().getDataCenterByClusterServiceList(_asyncQuery, false, true);
}
#end_block

#method_before
private void removeVolume() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeVolumesTitle());
    model.setHelpTag(HelpTag.remove_volume);
    // $NON-NLS-1$
    model.setHashName("remove_volume");
    model.setNote(ConstantsManager.getInstance().getConstants().removeVolumesWarning());
    if (getSelectedItems() == null) {
        return;
    }
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterVolumeEntity item : Linq.<GlusterVolumeEntity>cast(getSelectedItems())) {
        list.add(item.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void removeVolume() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeVolumesTitle());
    model.setHelpTag(HelpTag.remove_volume);
    // $NON-NLS-1$
    model.setHashName("remove_volume");
    model.setNote(ConstantsManager.getInstance().getConstants().removeVolumesWarning());
    if (getSelectedItems() == null) {
        return;
    }
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterVolumeEntity item : Linq.<GlusterVolumeEntity>cast(getSelectedItems())) {
        list.add(item.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnRemove", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void updateActionAvailability() {
    boolean allowStart = true;
    boolean allowStop = true;
    boolean allowRemove = true;
    boolean allowStartRebalance = true;
    boolean allowStopRebalance = true;
    boolean allowStatusRebalance = true;
    boolean allowOptimize = true;
    boolean allowStartProfiling = false;
    boolean allowStopProfiling = false;
    boolean allowProfileStatisticsDetails = false;
    boolean allowCreateSnapshot = false;
    boolean allowConfigureSnapshot = true;
    if (getSelectedItems() == null || getSelectedItems().size() == 0) {
        allowStart = false;
        allowStop = false;
        allowRemove = false;
        allowStartRebalance = false;
        allowStopRebalance = false;
        allowStatusRebalance = false;
        allowOptimize = false;
    } else {
        List<GlusterVolumeEntity> list = Linq.<GlusterVolumeEntity>cast(getSelectedItems());
        allowStartProfiling = isStartProfileAvailable(list);
        allowStopProfiling = isStopProfileAvailable(list);
        for (GlusterVolumeEntity volume : list) {
            if (volume.getStatus() == GlusterStatus.UP) {
                allowStart = false;
                allowRemove = false;
            } else if (volume.getStatus() == GlusterStatus.DOWN) {
                allowStop = false;
                allowStartRebalance = false;
            }
            GlusterAsyncTask asyncTask = volume.getAsyncTask();
            if (asyncTask != null) {
                allowStartRebalance = allowStartRebalance && asyncTask.getStatus() == null ? asyncTask.getJobStatus() != JobExecutionStatus.STARTED : asyncTask.getStatus() != JobExecutionStatus.STARTED;
            }
        }
        if (list.size() == 1) {
            GlusterVolumeEntity volumeEntity = list.get(0);
            GlusterAsyncTask asyncTask = volumeEntity.getAsyncTask();
            allowStopRebalance = volumeEntity.getStatus() == GlusterStatus.UP && asyncTask != null && asyncTask.getType() == GlusterTaskType.REBALANCE && asyncTask.getStatus() == JobExecutionStatus.STARTED;
        } else {
            allowStopRebalance = false;
        }
        allowStatusRebalance = getRebalanceStatusAvailability(getSelectedItems());
        allowProfileStatisticsDetails = getProfileStatisticsAvailability(list);
        allowCreateSnapshot = isSnapshotActionsAvailable(list);
    }
    getStartCommand().setIsExecutionAllowed(allowStart);
    getStopCommand().setIsExecutionAllowed(allowStop);
    getRemoveVolumeCommand().setIsExecutionAllowed(allowRemove);
    getStartRebalanceCommand().setIsExecutionAllowed(allowStartRebalance);
    getStopRebalanceCommand().setIsExecutionAllowed(allowStopRebalance);
    getStatusRebalanceCommand().setIsExecutionAllowed(allowStatusRebalance);
    getOptimizeForVirtStoreCommand().setIsExecutionAllowed(allowOptimize);
    getCreateSnapshotCommand().setIsExecutionAllowed(allowCreateSnapshot);
    getConfigureSnapshotCommand().setIsExecutionAllowed(allowConfigureSnapshot);
    // System tree dependent actions.
    boolean isAvailable = !(getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Volume);
    getNewVolumeCommand().setIsAvailable(isAvailable);
    getRemoveVolumeCommand().setIsAvailable(isAvailable);
    getStartVolumeProfilingCommand().setIsExecutionAllowed(allowStartProfiling);
    getStopVolumeProfilingCommand().setIsExecutionAllowed(allowStopProfiling);
    getShowVolumeProfileDetailsCommand().setIsExecutionAllowed(allowProfileStatisticsDetails);
}
#method_after
private void updateActionAvailability() {
    boolean allowStart = true;
    boolean allowStop = true;
    boolean allowRemove = true;
    boolean allowStartRebalance = true;
    boolean allowStopRebalance = true;
    boolean allowStatusRebalance = true;
    boolean allowOptimize = true;
    boolean allowStartProfiling = false;
    boolean allowStopProfiling = false;
    boolean allowProfileStatisticsDetails = false;
    boolean allowConfigureClusterSnapshotOptions = true;
    boolean allowConfigureVolumeSnapshotOptions = false;
    if (getSelectedItems() == null || getSelectedItems().size() == 0) {
        allowStart = false;
        allowStop = false;
        allowRemove = false;
        allowStartRebalance = false;
        allowStopRebalance = false;
        allowStatusRebalance = false;
        allowOptimize = false;
    } else {
        List<GlusterVolumeEntity> list = Linq.<GlusterVolumeEntity>cast(getSelectedItems());
        allowStartProfiling = isStartProfileAvailable(list);
        allowStopProfiling = isStopProfileAvailable(list);
        for (GlusterVolumeEntity volume : list) {
            if (volume.getStatus() == GlusterStatus.UP) {
                allowStart = false;
                allowRemove = false;
            } else if (volume.getStatus() == GlusterStatus.DOWN) {
                allowStop = false;
                allowStartRebalance = false;
            }
            GlusterAsyncTask asyncTask = volume.getAsyncTask();
            if (asyncTask != null) {
                allowStartRebalance = allowStartRebalance && asyncTask.getStatus() == null ? asyncTask.getJobStatus() != JobExecutionStatus.STARTED : asyncTask.getStatus() != JobExecutionStatus.STARTED;
            }
        }
        if (list.size() == 1) {
            GlusterVolumeEntity volumeEntity = list.get(0);
            GlusterAsyncTask asyncTask = volumeEntity.getAsyncTask();
            allowStopRebalance = volumeEntity.getStatus() == GlusterStatus.UP && asyncTask != null && asyncTask.getType() == GlusterTaskType.REBALANCE && asyncTask.getStatus() == JobExecutionStatus.STARTED;
            allowConfigureVolumeSnapshotOptions = volumeEntity.getStatus() == GlusterStatus.UP;
        } else {
            allowStopRebalance = false;
        }
        allowStatusRebalance = getRebalanceStatusAvailability(getSelectedItems());
        allowProfileStatisticsDetails = getProfileStatisticsAvailability(list);
    }
    getStartCommand().setIsExecutionAllowed(allowStart);
    getStopCommand().setIsExecutionAllowed(allowStop);
    getRemoveVolumeCommand().setIsExecutionAllowed(allowRemove);
    getStartRebalanceCommand().setIsExecutionAllowed(allowStartRebalance);
    getStopRebalanceCommand().setIsExecutionAllowed(allowStopRebalance);
    getStatusRebalanceCommand().setIsExecutionAllowed(allowStatusRebalance);
    getOptimizeForVirtStoreCommand().setIsExecutionAllowed(allowOptimize);
    getConfigureClusterSnapshotOptionsCommand().setIsExecutionAllowed(allowConfigureClusterSnapshotOptions);
    getConfigureVolumeSnapshotOptionsCommand().setIsExecutionAllowed(allowConfigureVolumeSnapshotOptions);
    // System tree dependent actions.
    boolean isAvailable = !(getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Volume);
    getNewVolumeCommand().setIsAvailable(isAvailable);
    getRemoveVolumeCommand().setIsAvailable(isAvailable);
    getStartVolumeProfilingCommand().setIsExecutionAllowed(allowStartProfiling);
    getStopVolumeProfilingCommand().setIsExecutionAllowed(allowStopProfiling);
    getShowVolumeProfileDetailsCommand().setIsExecutionAllowed(allowProfileStatisticsDetails);
}
#end_block

#method_before
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command.equals(getNewVolumeCommand())) {
        newVolume();
    } else if (command.equals(getRemoveVolumeCommand())) {
        removeVolume();
    } else if (command.getName().equals("rebalanceNotStarted")) {
        // $NON-NLS-1$
        closeConfirmationWindow();
    } else if (command.getName().equals("Cancel")) {
        // $NON-NLS-1$
        cancel();
    } else if (command.getName().equals("onCreateVolume")) {
        // $NON-NLS-1$
        onCreateVolume();
    } else if (command.equals(getStartCommand())) {
        start();
    } else if (command.equals(getStopCommand())) {
        stop();
    } else if (command.equals(getStartRebalanceCommand())) {
        startRebalance();
    } else if (command.equals(getStopRebalanceCommand())) {
        stopRebalance();
    } else if (command.getName().equals("onStopRebalance")) {
        // $NON-NLS-1$
        onStopRebalance();
    } else if (command.equals(getStatusRebalanceCommand())) {
        showRebalanceStatus();
    } else if (command.getName().equals("CancelConfirmation")) {
        // $NON-NLS-1$
        setConfirmWindow(null);
    } else if (command.getName().equals("CancelRebalanceStatus")) {
        // $NON-NLS-1$
        cancelRebalanceStatus();
    } else if (command.equals(getOptimizeForVirtStoreCommand())) {
        optimizeForVirtStore();
    } else if (command.getName().equals("onStop")) {
        // $NON-NLS-1$
        onStop();
    } else if (command.getName().equals("OnRemove")) {
        // $NON-NLS-1$
        onRemoveVolume();
    } else if (command.getName().equals("stop_rebalance_from_status")) {
        // $NON-NLS-1$
        stopRebalance();
    } else if (command.equals(getStartVolumeProfilingCommand()) || command.getName().equals("startProfiling")) {
        // $NON-NLS-1$
        startVolumeProfiling();
    } else if (command.equals(getStopVolumeProfilingCommand()) || command.getName().equals("stopProfiling")) {
        // $NON-NLS-1$
        stopVolumeProfiling();
    } else if (command.equals(getShowVolumeProfileDetailsCommand()) || command.getName().equals("showProfileDetails")) {
        // $NON-NLS-1$
        showVolumeProfiling();
    } else if (command.getName().equalsIgnoreCase("closeProfileStats")) {
        // $NON-NLS-1$
        setWindow(null);
    } else if (command.getName().equalsIgnoreCase("CancelOptimizeForVirtStore")) {
        // $NON-NLS-1$
        setConfirmWindow(null);
    } else if (command.getName().equalsIgnoreCase("ConfirmOptimiseForVirtStore")) {
        // $NON-NLS-1$
        List<GlusterVolumeEntity> selectedVolumes = new ArrayList<GlusterVolumeEntity>();
        for (Object selectedVolume : getSelectedItems()) {
            selectedVolumes.add((GlusterVolumeEntity) selectedVolume);
        }
        optimizeVolumesForVirtStore(selectedVolumes);
    } else if (command.equals(getCreateSnapshotCommand())) {
        getSnapshotListModel().getNewSnapshotCommand().execute();
    } else if (command.equals(getConfigureSnapshotCommand())) {
        configureSnapshot();
    } else if (command.getName().equalsIgnoreCase("confirmConfigureSnapshot")) {
        // $NON-NLS-1$
        confirmConfigureSnapshot();
    } else if (command.getName().equalsIgnoreCase("onConfigureSnapshot")) {
        // $NON-NLS-1$
        onConfigureSnapshot();
    }
}
#method_after
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command.equals(getNewVolumeCommand())) {
        newVolume();
    } else if (command.equals(getRemoveVolumeCommand())) {
        removeVolume();
    } else if (command.getName().equals("rebalanceNotStarted")) {
        // $NON-NLS-1$
        closeConfirmationWindow();
    } else if (command.getName().equals("Cancel")) {
        // $NON-NLS-1$
        cancel();
    } else if (command.getName().equals("onCreateVolume")) {
        // $NON-NLS-1$
        onCreateVolume();
    } else if (command.equals(getStartCommand())) {
        start();
    } else if (command.equals(getStopCommand())) {
        stop();
    } else if (command.equals(getStartRebalanceCommand())) {
        startRebalance();
    } else if (command.equals(getStopRebalanceCommand())) {
        stopRebalance();
    } else if (command.getName().equals("onStopRebalance")) {
        // $NON-NLS-1$
        onStopRebalance();
    } else if (command.equals(getStatusRebalanceCommand())) {
        showRebalanceStatus();
    } else if (command.getName().equals("CancelConfirmation")) {
        // $NON-NLS-1$
        setConfirmWindow(null);
    } else if (command.getName().equals("CancelRebalanceStatus")) {
        // $NON-NLS-1$
        cancelRebalanceStatus();
    } else if (command.equals(getOptimizeForVirtStoreCommand())) {
        optimizeForVirtStore();
    } else if (command.getName().equals("onStop")) {
        // $NON-NLS-1$
        onStop();
    } else if (command.getName().equals("OnRemove")) {
        // $NON-NLS-1$
        onRemoveVolume();
    } else if (command.getName().equals("stop_rebalance_from_status")) {
        // $NON-NLS-1$
        stopRebalance();
    } else if (command.equals(getStartVolumeProfilingCommand()) || command.getName().equals("startProfiling")) {
        // $NON-NLS-1$
        startVolumeProfiling();
    } else if (command.equals(getStopVolumeProfilingCommand()) || command.getName().equals("stopProfiling")) {
        // $NON-NLS-1$
        stopVolumeProfiling();
    } else if (command.equals(getShowVolumeProfileDetailsCommand()) || command.getName().equals("showProfileDetails")) {
        // $NON-NLS-1$
        showVolumeProfiling();
    } else if (command.getName().equalsIgnoreCase("closeProfileStats")) {
        // $NON-NLS-1$
        setWindow(null);
    } else if (command.getName().equalsIgnoreCase("CancelOptimizeForVirtStore")) {
        // $NON-NLS-1$
        setConfirmWindow(null);
    } else if (command.getName().equalsIgnoreCase("ConfirmOptimiseForVirtStore")) {
        // $NON-NLS-1$
        List<GlusterVolumeEntity> selectedVolumes = new ArrayList<GlusterVolumeEntity>();
        for (Object selectedVolume : getSelectedItems()) {
            selectedVolumes.add((GlusterVolumeEntity) selectedVolume);
        }
        optimizeVolumesForVirtStore(selectedVolumes);
    } else if (command.equals(getConfigureClusterSnapshotOptionsCommand())) {
        configureClusterSnapshotOptions();
    } else if (command.getName().equalsIgnoreCase("confirmConfigureClusterSnapshotOptions")) {
        // $NON-NLS-1$
        confirmConfigureClusterSnapshotOptions();
    } else if (command.getName().equalsIgnoreCase("onConfigureClusterSnapshotOptions")) {
        // $NON-NLS-1$
        onConfigureClusterSnapshotOptions();
    } else if (command.equals(getConfigureVolumeSnapshotOptionsCommand())) {
        configureVolumeSnapshotOptions();
    } else if (command.getName().equalsIgnoreCase("confirmConfigureVolumeSnapshotOptions")) {
        // $NON-NLS-1$
        confirmConfigureVolumeSnapshotOptions();
    } else if (command.getName().equalsIgnoreCase("onConfigureVolumeSnapshotOptions")) {
        // $NON-NLS-1$
        onConfigureVolumeSnapshotOptions();
    }
}
#end_block

#method_before
private void stopRebalance() {
    if (getSelectedItem() == null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getSelectedItem();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceTitle());
    model.setHelpTag(HelpTag.volume_rebalance_stop);
    // $NON-NLS-1$
    model.setHashName("volume_rebalance_stop");
    model.setMessage(ConstantsManager.getInstance().getMessages().confirmStopVolumeRebalance(volumeEntity.getName()));
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("onStopRebalance", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#method_after
private void stopRebalance() {
    if (getSelectedItem() == null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getSelectedItem();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceTitle());
    model.setHelpTag(HelpTag.volume_rebalance_stop);
    // $NON-NLS-1$
    model.setHashName("volume_rebalance_stop");
    model.setMessage(ConstantsManager.getInstance().getMessages().confirmStopVolumeRebalance(volumeEntity.getName()));
    // $NON-NLS-1$
    UICommand okCommand = UICommand.createDefaultOkUiCommand("onStopRebalance", this);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = UICommand.createCancelUiCommand("CancelConfirmation", this);
    model.getCommands().add(cancelCommand);
}
#end_block

#method_before
private void showRebalanceStatus() {
    if (getSelectedItem() == null) {
        return;
    }
    final ConfirmationModel cModel = new ConfirmationModel();
    final GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getSelectedItem();
    setConfirmWindow(cModel);
    cModel.setTitle(ConstantsManager.getInstance().getConstants().rebalanceStatusTitle());
    // $NON-NLS-1$
    cModel.startProgress(ConstantsManager.getInstance().getConstants().fetchingDataMessage());
    cModel.setHelpTag(HelpTag.volume_rebalance_status);
    // $NON-NLS-1$
    cModel.setHashName("volume_rebalance_status");
    // $NON-NLS-1$
    final UICommand rebalanceStatusOk = new UICommand("rebalanceNotStarted", VolumeListModel.this);
    rebalanceStatusOk.setTitle(ConstantsManager.getInstance().getConstants().ok());
    rebalanceStatusOk.setIsCancel(true);
    cModel.getCommands().add(rebalanceStatusOk);
    AsyncDataProvider.getInstance().getGlusterRebalanceStatus(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            cModel.stopProgress();
            VdcQueryReturnValue vdcValue = (VdcQueryReturnValue) returnValue;
            GlusterVolumeTaskStatusEntity rebalanceStatusEntity = vdcValue.getReturnValue();
            if ((rebalanceStatusEntity == null) || !(vdcValue.getSucceeded())) {
                cModel.setMessage(ConstantsManager.getInstance().getMessages().rebalanceStatusFailed(volumeEntity.getName()));
            } else {
                setConfirmWindow(null);
                if (getWindow() == null) {
                    VolumeRebalanceStatusModel rebalanceStatusModel = new VolumeRebalanceStatusModel(volumeEntity);
                    rebalanceStatusModel.setTitle(ConstantsManager.getInstance().getConstants().volumeRebalanceStatusTitle());
                    setWindow(rebalanceStatusModel);
                    rebalanceStatusModel.setHelpTag(HelpTag.volume_rebalance_status);
                    // $NON-NLS-1$
                    rebalanceStatusModel.setHashName("volume_rebalance_status");
                    rebalanceStatusModel.getVolume().setEntity(volumeEntity.getName());
                    rebalanceStatusModel.getCluster().setEntity(volumeEntity.getVdsGroupName());
                    UICommand stopRebalanceFromStatus = // $NON-NLS-1$
                    new UICommand("stop_rebalance_from_status", VolumeListModel.this);
                    stopRebalanceFromStatus.setTitle(ConstantsManager.getInstance().getConstants().stopRebalance());
                    rebalanceStatusModel.getCommands().add(stopRebalanceFromStatus);
                    rebalanceStatusModel.setStopReblanceFromStatus(stopRebalanceFromStatus);
                    // $NON-NLS-1$
                    UICommand cancelRebalance = new UICommand("CancelRebalanceStatus", VolumeListModel.this);
                    cancelRebalance.setTitle(ConstantsManager.getInstance().getConstants().close());
                    cancelRebalance.setIsCancel(true);
                    rebalanceStatusModel.getCommands().add(cancelRebalance);
                    rebalanceStatusModel.showStatus(rebalanceStatusEntity);
                } else {
                    VolumeRebalanceStatusModel statusModel = (VolumeRebalanceStatusModel) getWindow();
                    statusModel.getCommands().get(0).setIsExecutionAllowed(false);
                    statusModel.showStatus(rebalanceStatusEntity);
                }
            }
        }
    }), volumeEntity.getClusterId(), volumeEntity.getId());
}
#method_after
private void showRebalanceStatus() {
    if (getSelectedItem() == null) {
        return;
    }
    final ConfirmationModel cModel = new ConfirmationModel();
    final GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getSelectedItem();
    setConfirmWindow(cModel);
    cModel.setTitle(ConstantsManager.getInstance().getConstants().rebalanceStatusTitle());
    // $NON-NLS-1$
    cModel.startProgress(ConstantsManager.getInstance().getConstants().fetchingDataMessage());
    cModel.setHelpTag(HelpTag.volume_rebalance_status);
    // $NON-NLS-1$
    cModel.setHashName("volume_rebalance_status");
    // $NON-NLS-1$
    final UICommand rebalanceStatusOk = new UICommand("rebalanceNotStarted", VolumeListModel.this);
    rebalanceStatusOk.setTitle(ConstantsManager.getInstance().getConstants().ok());
    rebalanceStatusOk.setIsCancel(true);
    cModel.getCommands().add(rebalanceStatusOk);
    AsyncDataProvider.getInstance().getGlusterRebalanceStatus(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            cModel.stopProgress();
            VdcQueryReturnValue vdcValue = (VdcQueryReturnValue) returnValue;
            GlusterVolumeTaskStatusEntity rebalanceStatusEntity = vdcValue.getReturnValue();
            if ((rebalanceStatusEntity == null) || !(vdcValue.getSucceeded())) {
                cModel.setMessage(ConstantsManager.getInstance().getMessages().rebalanceStatusFailed(volumeEntity.getName()));
            } else {
                setConfirmWindow(null);
                if (getWindow() == null) {
                    VolumeRebalanceStatusModel rebalanceStatusModel = new VolumeRebalanceStatusModel(volumeEntity);
                    rebalanceStatusModel.setTitle(ConstantsManager.getInstance().getConstants().volumeRebalanceStatusTitle());
                    setWindow(rebalanceStatusModel);
                    rebalanceStatusModel.setHelpTag(HelpTag.volume_rebalance_status);
                    // $NON-NLS-1$
                    rebalanceStatusModel.setHashName("volume_rebalance_status");
                    rebalanceStatusModel.getVolume().setEntity(volumeEntity.getName());
                    rebalanceStatusModel.getCluster().setEntity(volumeEntity.getVdsGroupName());
                    // $NON-NLS-1$
                    UICommand stopRebalanceFromStatus = new UICommand("stop_rebalance_from_status", VolumeListModel.this);
                    stopRebalanceFromStatus.setTitle(ConstantsManager.getInstance().getConstants().stopRebalance());
                    rebalanceStatusModel.getCommands().add(stopRebalanceFromStatus);
                    rebalanceStatusModel.setStopReblanceFromStatus(stopRebalanceFromStatus);
                    // $NON-NLS-1$
                    UICommand cancelRebalance = new UICommand("CancelRebalanceStatus", VolumeListModel.this);
                    cancelRebalance.setTitle(ConstantsManager.getInstance().getConstants().close());
                    cancelRebalance.setIsCancel(true);
                    rebalanceStatusModel.getCommands().add(cancelRebalance);
                    rebalanceStatusModel.showStatus(rebalanceStatusEntity);
                } else {
                    VolumeRebalanceStatusModel statusModel = (VolumeRebalanceStatusModel) getWindow();
                    statusModel.getCommands().get(0).setIsExecutionAllowed(false);
                    statusModel.showStatus(rebalanceStatusEntity);
                }
            }
        }
    }), volumeEntity.getClusterId(), volumeEntity.getId());
}
#end_block

#method_before
private void optimizeVolumesForVirtStore(final List<GlusterVolumeEntity> volumeList) {
    if (getConfirmWindow() != null) {
        setConfirmWindow(null);
    }
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, final Object result) {
            AsyncQuery aQueryInner = new AsyncQuery();
            aQueryInner.setModel(this);
            aQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object modelInner, final Object resultInner) {
                    AsyncQuery aQueryInner1 = new AsyncQuery();
                    aQueryInner1.setModel(this);
                    aQueryInner1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object modelInner1, Object resultInner1) {
                            String optionGroupVirt = (String) result;
                            String optionOwnerUserVirt = (String) resultInner;
                            String optionOwnerGroupVirt = (String) resultInner1;
                            ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
                            for (GlusterVolumeEntity volume : volumeList) {
                                Guid volumeId = volume.getId();
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "group", // $NON-NLS-1$
                                optionGroupVirt)));
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "storage.owner-uid", // $NON-NLS-1$
                                optionOwnerUserVirt)));
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "storage.owner-gid", // $NON-NLS-1$
                                optionOwnerGroupVirt)));
                                final GlusterVolumeOptionEntity checkOption = // $NON-NLS-1$//$NON-NLS-2$
                                getOption(volumeId, "network.ping-timeout", "10");
                                List<PredicateFilter<GlusterVolumeOptionEntity>> predicaetFilters = Collections.singletonList(new PredicateFilter<GlusterVolumeOptionEntity>(new Predicate<GlusterVolumeOptionEntity>() {

                                    @Override
                                    public boolean evaluate(GlusterVolumeOptionEntity obj) {
                                        return obj.getKey().equalsIgnoreCase(checkOption.getKey());
                                    }
                                }));
                                if (!isOptionEnabledOnVolume(volume, predicaetFilters)) {
                                    // $NON-NLS-1$
                                    list.add(new GlusterVolumeOptionParameters(checkOption));
                                }
                            }
                            Frontend.getInstance().runMultipleAction(VdcActionType.SetGlusterVolumeOption, list);
                        }
                    };
                    AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionOwnerGroupVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQueryInner1);
                }
            };
            AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionOwnerUserVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQueryInner);
        }
    };
    AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionGroupVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQuery);
}
#method_after
private void optimizeVolumesForVirtStore(final List<GlusterVolumeEntity> volumeList) {
    if (getConfirmWindow() != null) {
        setConfirmWindow(null);
    }
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, final Object result) {
            AsyncQuery aQueryInner = new AsyncQuery();
            aQueryInner.setModel(this);
            aQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object modelInner, final Object resultInner) {
                    AsyncQuery aQueryInner1 = new AsyncQuery();
                    aQueryInner1.setModel(this);
                    aQueryInner1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object modelInner1, Object resultInner1) {
                            String optionGroupVirt = (String) result;
                            String optionOwnerUserVirt = (String) resultInner;
                            String optionOwnerGroupVirt = (String) resultInner1;
                            ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
                            for (GlusterVolumeEntity volume : volumeList) {
                                Guid volumeId = volume.getId();
                                // $NON-NLS-1$
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "group", optionGroupVirt)));
                                // $NON-NLS-1$
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "storage.owner-uid", optionOwnerUserVirt)));
                                // $NON-NLS-1$
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "storage.owner-gid", optionOwnerGroupVirt)));
                                // $NON-NLS-1$ $NON-NLS-2$
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "server.allow-insecure", "on")));
                                // $NON-NLS-1$//$NON-NLS-2$
                                final GlusterVolumeOptionEntity checkOption = getOption(volumeId, "network.ping-timeout", "10");
                                List<PredicateFilter<GlusterVolumeOptionEntity>> predicaetFilters = Collections.singletonList(new PredicateFilter<GlusterVolumeOptionEntity>(new Predicate<GlusterVolumeOptionEntity>() {

                                    @Override
                                    public boolean evaluate(GlusterVolumeOptionEntity obj) {
                                        return obj.getKey().equalsIgnoreCase(checkOption.getKey());
                                    }
                                }));
                                if (!isOptionEnabledOnVolume(volume, predicaetFilters)) {
                                    // $NON-NLS-1$
                                    list.add(new GlusterVolumeOptionParameters(checkOption));
                                }
                            }
                            Frontend.getInstance().runMultipleAction(VdcActionType.SetGlusterVolumeOption, list);
                        }
                    };
                    AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionOwnerGroupVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQueryInner1);
                }
            };
            AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionOwnerUserVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQueryInner);
        }
    };
    AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionGroupVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQuery);
}
#end_block

#method_before
private void stop() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().confirmStopVolume());
    model.setHelpTag(HelpTag.volume_stop);
    // $NON-NLS-1$
    model.setHashName("volume_stop");
    model.setMessage(ConstantsManager.getInstance().getConstants().stopVolumeMessage());
    model.setNote(ConstantsManager.getInstance().getConstants().stopVolumeWarning());
    if (getSelectedItems() == null) {
        return;
    }
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterVolumeEntity item : Linq.<GlusterVolumeEntity>cast(getSelectedItems())) {
        list.add(item.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("onStop", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void stop() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().confirmStopVolume());
    model.setHelpTag(HelpTag.volume_stop);
    // $NON-NLS-1$
    model.setHashName("volume_stop");
    model.setMessage(ConstantsManager.getInstance().getConstants().stopVolumeMessage());
    model.setNote(ConstantsManager.getInstance().getConstants().stopVolumeWarning());
    if (getSelectedItems() == null) {
        return;
    }
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterVolumeEntity item : Linq.<GlusterVolumeEntity>cast(getSelectedItems())) {
        list.add(item.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("onStop", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getClusterId() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (getParameters() == null || getParameters().getConfigParams() == null || getParameters().getConfigParams().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAMS_IS_EMPTY);
        return false;
    }
    for (GlusterVolumeSnapshotConfig param : getParameters().getConfigParams()) {
        if (param.getParamValue() == null || param.getParamValue().equals("")) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAM_VALUE_IS_EMPTY);
            return false;
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getClusterId() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!GlusterFeatureSupported.glusterSnapshot(getVdsGroup().getCompatibilityVersion())) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED);
    }
    if (getParameters().getConfigParams() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAMS_IS_EMPTY);
        return false;
    }
    for (GlusterVolumeSnapshotConfig param : getParameters().getConfigParams()) {
        if (StringUtils.isEmpty(param.getParamValue())) {
            addCustomValue("snapshotConfigParam", param.getParamName());
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAM_VALUE_IS_EMPTY);
            return false;
        }
    }
    return true;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    Guid clusterId = getParameters().getClusterId();
    Guid volumeId = getParameters().getVolumeId();
    List<GlusterVolumeSnapshotConfig> fetchedConfigParams = getGlusterVolumeSnapshotConfigDao().getConfigByClusterId(clusterId);
    // segregate the fetched cluster and volume specific config params
    Map<String, GlusterVolumeSnapshotConfig> fetchedClusterConfigParams = new HashMap<String, GlusterVolumeSnapshotConfig>();
    Map<String, GlusterVolumeSnapshotConfig> fetchedVolumeConfigParams = new HashMap<String, GlusterVolumeSnapshotConfig>();
    for (GlusterVolumeSnapshotConfig param : fetchedConfigParams) {
        if (Guid.isNullOrEmpty(param.getVolumeId())) {
            fetchedClusterConfigParams.put(param.getParamName(), param);
        } else if (volumeId != null && param.getVolumeId().equals(volumeId)) {
            fetchedVolumeConfigParams.put(param.getParamName(), param);
        }
    }
    List<GlusterVolumeSnapshotConfig> configParams = getParameters().getConfigParams();
    // segregate the cluster and volume specific config params
    Map<String, GlusterVolumeSnapshotConfig> clusterConfigParams = new HashMap<String, GlusterVolumeSnapshotConfig>();
    Map<String, GlusterVolumeSnapshotConfig> volumeConfigParams = new HashMap<String, GlusterVolumeSnapshotConfig>();
    for (GlusterVolumeSnapshotConfig param : configParams) {
        if (Guid.isNullOrEmpty(param.getVolumeId())) {
            clusterConfigParams.put(param.getParamName(), param);
        } else {
            volumeConfigParams.put(param.getParamName(), param);
        }
    }
    // form the final list of updated config params
    List<GlusterVolumeSnapshotConfig> updatedClusterConfigParams = new ArrayList<GlusterVolumeSnapshotConfig>();
    for (GlusterVolumeSnapshotConfig cfgParam : clusterConfigParams.values()) {
        GlusterVolumeSnapshotConfig fetchedCfgParam = fetchedClusterConfigParams.get(cfgParam.getParamName());
        if (!(fetchedCfgParam.getParamValue().equals(cfgParam.getParamValue()))) {
            updatedClusterConfigParams.add(cfgParam);
        }
    }
    List<GlusterVolumeSnapshotConfig> updatedVolumeConfigParams = new ArrayList<GlusterVolumeSnapshotConfig>();
    for (GlusterVolumeSnapshotConfig cfgParam : volumeConfigParams.values()) {
        GlusterVolumeSnapshotConfig fetchedCfgParam = fetchedVolumeConfigParams.get(cfgParam.getParamName());
        if (!(fetchedCfgParam.getParamValue().equals(cfgParam.getParamValue()))) {
            updatedVolumeConfigParams.add(cfgParam);
        }
    }
    // TODO: execute vds command to set the configurations
    List<GlusterVolumeSnapshotConfig> vdsParam = new ArrayList<GlusterVolumeSnapshotConfig>();
    for (GlusterVolumeSnapshotConfig param : updatedClusterConfigParams) vdsParam.add(param);
    for (GlusterVolumeSnapshotConfig param : updatedVolumeConfigParams) vdsParam.add(param);
    VDSReturnValue retVal = runVdsCommand(VDSCommandType.SetGlusterVolumeSnapshotConfig, new GlusterVolumeSnapshotSetConfigVDSParameters(upServer.getId(), vdsParam));
    setSucceeded(retVal.getSucceeded());
    if (getSucceeded()) {
        // persist the configurations
        for (GlusterVolumeSnapshotConfig param : updatedClusterConfigParams) {
            getGlusterVolumeSnapshotConfigDao().updateConfigByClusterIdAndName(param.getClusterId(), param.getParamName(), param.getParamValue());
        }
        for (GlusterVolumeSnapshotConfig param : updatedVolumeConfigParams) {
            getGlusterVolumeSnapshotConfigDao().updateConfigByVolumeIdIdAndName(param.getClusterId(), param.getVolumeId(), param.getParamName(), param.getParamValue());
        }
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CONFIG_UPDATE_FAILED, retVal.getVdsError().getMessage());
    }
}
#method_after
@Override
protected void executeCommand() {
    Guid clusterId = getParameters().getClusterId();
    Guid volumeId = getParameters().getVolumeId();
    List<GlusterVolumeSnapshotConfig> fetchedConfigParams = getGlusterVolumeSnapshotConfigDao().getConfigByClusterId(clusterId);
    // segregate the fetched cluster and volume specific config params
    Map<String, GlusterVolumeSnapshotConfig> fetchedClusterConfigParams = new HashMap<>();
    Map<String, GlusterVolumeSnapshotConfig> fetchedVolumeConfigParams = new HashMap<>();
    for (GlusterVolumeSnapshotConfig param : fetchedConfigParams) {
        if (Guid.isNullOrEmpty(param.getVolumeId())) {
            fetchedClusterConfigParams.put(param.getParamName(), param);
        } else if (volumeId != null && param.getVolumeId().equals(volumeId)) {
            fetchedVolumeConfigParams.put(param.getParamName(), param);
        }
    }
    List<GlusterVolumeSnapshotConfig> configParams = getParameters().getConfigParams();
    // segregate the cluster and volume specific config params
    Map<String, GlusterVolumeSnapshotConfig> clusterConfigParams = new HashMap<>();
    Map<String, GlusterVolumeSnapshotConfig> volumeConfigParams = new HashMap<>();
    for (GlusterVolumeSnapshotConfig param : configParams) {
        if (Guid.isNullOrEmpty(param.getVolumeId())) {
            clusterConfigParams.put(param.getParamName(), param);
        } else {
            volumeConfigParams.put(param.getParamName(), param);
        }
    }
    // form the final list of updated config params
    List<GlusterVolumeSnapshotConfig> updatedClusterConfigParams = new ArrayList<>();
    for (GlusterVolumeSnapshotConfig cfgParam : clusterConfigParams.values()) {
        GlusterVolumeSnapshotConfig fetchedCfgParam = fetchedClusterConfigParams.get(cfgParam.getParamName());
        if (fetchedCfgParam != null && !(fetchedCfgParam.getParamValue().equals(cfgParam.getParamValue()))) {
            updatedClusterConfigParams.add(cfgParam);
        }
    }
    List<GlusterVolumeSnapshotConfig> updatedVolumeConfigParams = new ArrayList<>();
    for (GlusterVolumeSnapshotConfig cfgParam : volumeConfigParams.values()) {
        GlusterVolumeSnapshotConfig fetchedCfgParam = fetchedVolumeConfigParams.get(cfgParam.getParamName());
        if (fetchedCfgParam != null && !(fetchedCfgParam.getParamValue().equals(cfgParam.getParamValue()))) {
            updatedVolumeConfigParams.add(cfgParam);
        }
    }
    List<GlusterVolumeSnapshotConfig> updatedConfigs = new ArrayList<>();
    for (GlusterVolumeSnapshotConfig param : updatedClusterConfigParams) updatedConfigs.add(param);
    for (GlusterVolumeSnapshotConfig param : updatedVolumeConfigParams) updatedConfigs.add(param);
    for (GlusterVolumeSnapshotConfig config : updatedConfigs) {
        VDSReturnValue retVal = runVdsCommand(VDSCommandType.SetGlusterVolumeSnapshotConfig, new GlusterVolumeSnapshotSetConfigVDSParameters(upServer.getId(), config));
        if (!retVal.getSucceeded()) {
            failedCfgs.add(config.getParamName());
            updatesSuccessful = false;
        } else {
            if (config.getVolumeId() != null) {
                getGlusterVolumeSnapshotConfigDao().updateConfigByVolumeIdAndName(config.getClusterId(), config.getVolumeId(), config.getParamName(), config.getParamValue());
            } else {
                getGlusterVolumeSnapshotConfigDao().updateConfigByClusterIdAndName(config.getClusterId(), config.getParamName(), config.getParamValue());
            }
            updatesSuccessful = true;
        }
    }
    if (!updatesSuccessful) {
        addCustomValue("failedSnapshotConfigs", failedCfgs.toString());
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Guid clusterId = getParameters().getConfigParams().get(0).getClusterId();
    if (!isInternalExecution()) {
        return Collections.singletonMap(clusterId.toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.GLUSTER, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    return null;
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Guid clusterId = getParameters().getConfigParams().get(0).getClusterId();
    if (!isInternalExecution()) {
        return Collections.singletonMap(clusterId.toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.GLUSTER_SNAPSHOT, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    return null;
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        return AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CREATED;
    } else {
        return errorType == null ? AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CONFIG_UPDATE_FAILED : errorType;
    }
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        if (updatesSuccessful) {
            return AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CONFIG_UPDATED;
        } else {
            return AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CONFIG_UPDATE_FAILED_PARTIALLY;
        }
    } else {
        return errorType == null ? AuditLogType.GLUSTER_VOLUME_SNAPSHOT_CONFIG_UPDATE_FAILED : errorType;
    }
}
#end_block

#method_before
private String generateSqlFromSyntaxContainer(SyntaxContainer syntax, boolean isSafe) {
    String retval = "";
    if (syntax.getvalid()) {
        ListIterator<SyntaxObject> objIter = syntax.listIterator(0);
        IConditionFieldAutoCompleter conditionFieldAC;
        LinkedList<String> whereBuilder = new LinkedList<String>();
        String searchObjStr = syntax.getSearchObjectStr();
        String sortByPhrase = "";
        String fromStatement = "";
        String pageNumber = "";
        boolean useTags = syntax.isSearchUsingTags();
        while (objIter.hasNext()) {
            SyntaxObject obj = objIter.next();
            switch(obj.getType()) {
                case SEARCH_OBJECT:
                    fromStatement = generateFromStatement(syntax, useTags);
                    break;
                case OR:
                case AND:
                    whereBuilder.addLast(obj.getBody());
                    break;
                case CONDITION_VALUE:
                    ConditionData conditionData = generateConditionStatment(obj, syntax.listIterator(objIter.previousIndex()), searchObjStr, syntax.getCaseSensitive(), isSafe, useTags);
                    whereBuilder.addLast(conditionData.getConditionText());
                    if (conditionData.isFullTableRequired() && !useTags) {
                        useTags = true;
                        fromStatement = generateFromStatement(syntax, useTags);
                    }
                    break;
                case SORTBY:
                    break;
                case PAGE_VALUE:
                    pageNumber = obj.getBody();
                    break;
                case SORT_FIELD:
                    conditionFieldAC = mSearchObjectAC.getFieldAutoCompleter(searchObjStr);
                    sortByPhrase = StringFormat.format(" ORDER BY %1$s", conditionFieldAC.getSortableDbField(obj.getBody()));
                    break;
                case SORT_DIRECTION:
                    // Forcing any sorting using DESC to show NULL values last (NULLS FIRST is the default)
                    String direction = (obj.getBody().equalsIgnoreCase("desc")) ? "DESC NULLS LAST" : obj.getBody();
                    sortByPhrase = StringFormat.format("%1$s %2$s", sortByPhrase, direction);
                    break;
                default:
                    break;
            }
        }
        // implying precedence rules
        String[] lookFor = { "AND", "OR" };
        for (int idx = 0; idx < lookFor.length; idx++) {
            boolean found = true;
            while (found) {
                found = false;
                ListIterator<String> iter = whereBuilder.listIterator(0);
                while (iter.hasNext()) {
                    String queryPart = iter.next();
                    if (lookFor[idx].equals(queryPart)) {
                        iter.remove();
                        String nextPart = iter.next();
                        iter.remove();
                        String prevPart = iter.previous();
                        iter.set(StringFormat.format("( %1$s %2$s %3$s )", prevPart, queryPart, nextPart));
                        found = true;
                        break;
                    }
                }
            }
        }
        // for not deleted events, add this to the where clause
        if (searchObjStr.equalsIgnoreCase("EVENT")) {
            whereBuilder.add("not deleted");
        }
        // adding WHERE if required and All implicit AND
        StringBuilder wherePhrase = new StringBuilder();
        if (whereBuilder.size() > 0) {
            wherePhrase.append(" WHERE ");
            ListIterator<String> iter = whereBuilder.listIterator(0);
            while (iter.hasNext()) {
                String queryPart = iter.next();
                wherePhrase.append(queryPart);
                if (iter.hasNext()) {
                    wherePhrase.append(" AND ");
                }
            }
        }
        // adding the sorting part if required
        if ("".equals(sortByPhrase)) {
            sortByPhrase = " ORDER BY " + mSearchObjectAC.getDefaultSort(searchObjStr);
        }
        // adding the paging phrase
        String pagePhrase = getPagePhrase(syntax, pageNumber);
        String primeryKey = mSearchObjectAC.getPrimeryKeyName(searchObjStr);
        String tableName = mSearchObjectAC.getRelatedTableName(searchObjStr, useTags);
        // adding a secondary default sort by entity name
        StringBuilder sortExpr = new StringBuilder();
        sortExpr.append(sortByPhrase);
        if (sortByPhrase.indexOf(mSearchObjectAC.getDefaultSort(searchObjStr)) < 0) {
            sortExpr.append(",");
            sortExpr.append(mSearchObjectAC.getDefaultSort(searchObjStr));
        }
        // TODO: The database configuration PostgresSearchTemplate has an extra closing braces. Hence our
        // queries in this code have an extra opening one. Fix it in a future patch.
        String inQuery = "";
        if (useTags) {
            inQuery = StringFormat.format("SELECT * FROM %1$s WHERE ( %2$s IN (%3$s)", mSearchObjectAC.getRelatedTableName(searchObjStr, false), primeryKey, getInnerQuery(tableName, primeryKey, fromStatement, wherePhrase));
        } else {
            inQuery = "(" + getInnerQuery(tableName, "*", fromStatement, wherePhrase);
        }
        retval = StringFormat.format(Config.<String>getValue(ConfigValues.DBSearchTemplate), sortExpr.toString(), inQuery, pagePhrase);
        // Check for sql injection if query is not safe
        if (!isSafe) {
            if (sqlInjectionChecker.hasSqlInjection(retval)) {
                throw new SqlInjectionException();
            }
        }
        log.trace("Search: " + retval);
    }
    return retval;
}
#method_after
private String generateSqlFromSyntaxContainer(SyntaxContainer syntax, boolean isSafe) {
    String retval = "";
    if (syntax.getvalid()) {
        ListIterator<SyntaxObject> objIter = syntax.listIterator(0);
        IConditionFieldAutoCompleter conditionFieldAC;
        LinkedList<String> whereBuilder = new LinkedList<String>();
        String searchObjStr = syntax.getSearchObjectStr();
        String sortByPhrase = "";
        String fromStatement = "";
        String pageNumber = "";
        boolean useTags = syntax.isSearchUsingTags();
        while (objIter.hasNext()) {
            SyntaxObject obj = objIter.next();
            switch(obj.getType()) {
                case SEARCH_OBJECT:
                    fromStatement = generateFromStatement(syntax, useTags);
                    break;
                case OR:
                case AND:
                    whereBuilder.addLast(obj.getBody());
                    break;
                case CONDITION_VALUE:
                    ConditionData conditionData = generateConditionStatment(obj, syntax.listIterator(objIter.previousIndex()), searchObjStr, syntax.getCaseSensitive(), isSafe, useTags);
                    whereBuilder.addLast(conditionData.getConditionText());
                    if (conditionData.isFullTableRequired() && !useTags) {
                        useTags = true;
                        fromStatement = generateFromStatement(syntax, useTags);
                    }
                    break;
                case SORTBY:
                    break;
                case PAGE_VALUE:
                    pageNumber = obj.getBody();
                    break;
                case SORT_FIELD:
                    conditionFieldAC = mSearchObjectAC.getFieldAutoCompleter(searchObjStr);
                    sortByPhrase = StringFormat.format(" ORDER BY %1$s", conditionFieldAC.getSortableDbField(obj.getBody()));
                    break;
                case SORT_DIRECTION:
                    // Forcing any sorting using DESC to show NULL values last (NULLS FIRST is the default)
                    String direction = (obj.getBody().equalsIgnoreCase("desc")) ? "DESC NULLS LAST" : obj.getBody();
                    sortByPhrase = StringFormat.format("%1$s %2$s", sortByPhrase, direction);
                    break;
                default:
                    break;
            }
        }
        // implying precedence rules
        String[] lookFor = { "AND", "OR" };
        for (int idx = 0; idx < lookFor.length; idx++) {
            boolean found = true;
            while (found) {
                found = false;
                ListIterator<String> iter = whereBuilder.listIterator(0);
                while (iter.hasNext()) {
                    String queryPart = iter.next();
                    if (lookFor[idx].equals(queryPart)) {
                        iter.remove();
                        String nextPart = iter.next();
                        iter.remove();
                        String prevPart = iter.previous();
                        iter.set(StringFormat.format("( %1$s %2$s %3$s )", prevPart, queryPart, nextPart));
                        found = true;
                        break;
                    }
                }
            }
        }
        // for not deleted events, add this to the where clause
        if (searchObjStr.equalsIgnoreCase("EVENT")) {
            whereBuilder.add("not deleted");
        }
        // adding WHERE if required and All implicit AND
        StringBuilder wherePhrase = new StringBuilder();
        if (whereBuilder.size() > 0) {
            wherePhrase.append(" WHERE ");
            ListIterator<String> iter = whereBuilder.listIterator(0);
            while (iter.hasNext()) {
                String queryPart = iter.next();
                wherePhrase.append(queryPart);
                if (iter.hasNext()) {
                    wherePhrase.append(" AND ");
                }
            }
        }
        // adding the sorting part if required
        if ("".equals(sortByPhrase)) {
            sortByPhrase = " ORDER BY " + mSearchObjectAC.getDefaultSort(searchObjStr);
        }
        // adding the paging phrase
        String pagePhrase = getPagePhrase(syntax, pageNumber);
        String primeryKey = mSearchObjectAC.getPrimeryKeyName(searchObjStr);
        String tableName = mSearchObjectAC.getRelatedTableName(searchObjStr, useTags);
        // adding a secondary default sort by entity name
        StringBuilder sortExpr = new StringBuilder();
        sortExpr.append(sortByPhrase);
        if (sortByPhrase.indexOf(mSearchObjectAC.getDefaultSort(searchObjStr)) < 0) {
            sortExpr.append(",");
            sortExpr.append(mSearchObjectAC.getDefaultSort(searchObjStr));
        }
        // TODO: The database configuration PostgresSearchTemplate has an extra closing braces. Hence our
        // queries in this code have an extra opening one. Fix it in a future patch.
        String inQuery = "";
        if (useTags) {
            inQuery = StringFormat.format("SELECT * FROM %1$s WHERE ( %2$s IN (%3$s)", mSearchObjectAC.getRelatedTableName(searchObjStr, false), primeryKey, getInnerQuery(tableName, primeryKey, fromStatement, wherePhrase));
        } else {
            inQuery = "(" + getInnerQuery(tableName, "*", fromStatement, wherePhrase);
        }
        if (syntax.getSearchFrom() > 0) {
            inQuery = StringFormat.format("%1$s and  %2$s >  %3$s", inQuery, primeryKey, syntax.getSearchFrom());
        }
        retval = StringFormat.format(Config.<String>getValue(ConfigValues.DBSearchTemplate), sortExpr.toString(), inQuery, pagePhrase);
        // Check for sql injection if query is not safe
        if (!isSafe) {
            if (sqlInjectionChecker.hasSqlInjection(retval)) {
                throw new SqlInjectionException();
            }
        }
        log.trace("Search: " + retval);
    }
    return retval;
}
#end_block

#method_before
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeGeoRepStartFailedException:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeGeoRepPauseFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeGeoRepResumeFailed:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterVolumeGeoRepStatusDetailFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepStopFailedException:
        case GlusterSnapshotException:
        case GlusterSnapshotInfoFailedException:
        case GlusterSnapshotCreateFailedException:
        case GlusterSnapshotConfigSetFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#method_after
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeGeoRepSessionStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeGeoRepSessionPauseFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeGeoRepSessionResumeFailed:
        case GlusterGeoRepException:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterGeoRepConfigFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepSessionStopFailed:
        case GlusterSnapshotException:
        case GlusterSnapshotInfoFailedException:
        case GlusterSnapshotDeleteVolumeFailedException:
        case GlusterSnapshotDeleteFailedException:
        case GlusterSnapshotActivateFailedException:
        case GlusterSnapshotDeactivateFailedException:
        case GlusterSnapshotRestoreFailedException:
        case GlusterSnapshotCreateFailedException:
        case GlusterSnapshotConfigFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#end_block

#method_before
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterVolume.snapshotList").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, response);
}
#method_after
@Override
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterVolume.snapshotList").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, response);
}
#end_block

#method_before
public StatusOnlyReturnForXmlRpc glusterVolumeSnapshotConfigSet(String volumeName, String configName, String configValue) {
    JsonRpcRequest request = new RequestBuilder("GlusterVolume.snapshotConfigSet").withParameter("volumeName", volumeName).withParameter("option", configName).withParameter("value", configValue).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new StatusOnlyReturnForXmlRpc(response);
}
#method_after
@Override
public StatusOnlyReturnForXmlRpc glusterVolumeSnapshotConfigSet(String volumeName, String configName, String configValue) {
    JsonRpcRequest request = new RequestBuilder("GlusterVolume.snapshotConfigSet").withParameter("volumeName", volumeName).withParameter("option", configName).withParameter("value", configValue).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new StatusOnlyReturnForXmlRpc(response);
}
#end_block

#method_before
public StatusOnlyReturnForXmlRpc glusterSnapshotConfigSet(String configName, String configValue) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.configSet").withParameter("option", configName).withParameter("value", configValue).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new StatusOnlyReturnForXmlRpc(response);
}
#method_after
@Override
public StatusOnlyReturnForXmlRpc glusterSnapshotConfigSet(String configName, String configValue) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.configSet").withParameter("option", configName).withParameter("value", configValue).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new StatusOnlyReturnForXmlRpc(response);
}
#end_block

#method_before
@Override
public void executeQueryCommand() {
    Guid clusterId = getParameters().getClusterId();
    Guid volumeId = getParameters().getVolumeId();
    List<GlusterVolumeSnapshotConfig> configs = getGlusterVolumeSnapshotConfigDao().getConfigByClusterId(clusterId);
    List<GlusterVolumeSnapshotConfig> clusterCfgs = new ArrayList<GlusterVolumeSnapshotConfig>();
    List<GlusterVolumeSnapshotConfig> volumeCfgs = new ArrayList<GlusterVolumeSnapshotConfig>();
    if (configs != null && configs.size() > 0) {
        for (GlusterVolumeSnapshotConfig config : configs) {
            if (Guid.isNullOrEmpty(config.getVolumeId())) {
                clusterCfgs.add(config);
            } else if (volumeId != null && config.getVolumeId().equals(volumeId)) {
                volumeCfgs.add(config);
            }
        }
        getQueryReturnValue().setReturnValue(new Pair<List<GlusterVolumeSnapshotConfig>, List<GlusterVolumeSnapshotConfig>>(clusterCfgs, volumeCfgs));
    } else {
        String volumeName = volumeId == null ? "" : getGlusterVolumeDao().getById(volumeId).getName();
        Guid serverId = getRandomUpServerId(clusterId);
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeSnapshotConfigInfo, new GlusterVolumeSnapshotVDSParameters(serverId, volumeName, clusterId));
        if (returnValue.getSucceeded()) {
            GlusterSnapshotConfigInfo fetchedConfigInfo = (GlusterSnapshotConfigInfo) returnValue.getReturnValue();
            if (fetchedConfigInfo != null) {
                Map<String, String> fetchedClusterConfigs = fetchedConfigInfo.getClusterConfigOptions();
                for (String key : fetchedClusterConfigs.keySet()) {
                    String value = fetchedClusterConfigs.get(key);
                    if (value != null) {
                        GlusterVolumeSnapshotConfig newConfig = new GlusterVolumeSnapshotConfig(clusterId, null, key, value);
                        clusterCfgs.add(newConfig);
                        getGlusterVolumeSnapshotConfigDao().save(newConfig);
                    }
                }
                Map<String, Map<String, String>> fetchedVolumeConfigs = fetchedConfigInfo.getVolumeConfigOptions();
                if (volumeId != null && fetchedVolumeConfigs != null) {
                    for (String key : fetchedVolumeConfigs.keySet()) {
                        if (key.equals(volumeName)) {
                            Map<String, String> fetchedVolueConfig = fetchedVolumeConfigs.get(key);
                            for (String cfgName : fetchedVolueConfig.keySet()) {
                                String value = fetchedVolueConfig.get(cfgName);
                                if (value != null) {
                                    GlusterVolumeSnapshotConfig newConfig = new GlusterVolumeSnapshotConfig(clusterId, volumeId, cfgName, value);
                                    volumeCfgs.add(newConfig);
                                    getGlusterVolumeSnapshotConfigDao().save(newConfig);
                                }
                            }
                            break;
                        }
                    }
                }
            }
        }
        getQueryReturnValue().setReturnValue(new Pair<List<GlusterVolumeSnapshotConfig>, List<GlusterVolumeSnapshotConfig>>(clusterCfgs, volumeCfgs));
    }
}
#method_after
@Override
public void executeQueryCommand() {
    List<GlusterVolumeSnapshotConfig> configs = getGlusterVolumeSnapshotConfigDao().getConfigByClusterId(getParameters().getClusterId());
    if (configs != null && configs.size() > 0) {
        getQueryReturnValue().setReturnValue(getConfigPair(configs));
    } else {
        GlusterSnapshotSyncJob.getInstance().refreshSnapshotConfigInCluster(getVdsGroupDao().get(getParameters().getClusterId()));
        // fetch the configuration again after sync
        configs = getGlusterVolumeSnapshotConfigDao().getConfigByClusterId(getParameters().getClusterId());
        getQueryReturnValue().setReturnValue(getConfigPair(configs));
    }
}
#end_block

#method_before
private Response addDomain(VdcActionType action, StorageDomain model, StorageDomainStatic entity, Guid hostId, StorageServerConnections connection) {
    Response response = null;
    boolean isConnNew = false;
    if (connection.getstorage_type().isFileDomain() && StringUtils.isEmpty(connection.getid())) {
        isConnNew = true;
        connection.setid(addStorageServerConnection(connection, hostId));
    }
    entity.setStorage(connection.getid());
    if (action == VdcActionType.AddNFSStorageDomain || action == VdcActionType.AddPosixFsStorageDomain || action == VdcActionType.AddGlusterFsStorageDomain) {
        org.ovirt.engine.core.common.businessentities.StorageDomain existing = getExistingStorageDomain(hostId, entity.getStorageType(), entity.getStorageDomainType(), connection);
        if (existing != null) {
            setStorageDomainProperties(entity, existing.getStorageStaticData());
            entity = existing.getStorageStaticData();
            action = VdcActionType.AddExistingFileStorageDomain;
        }
    }
    if (action != VdcActionType.AddExistingFileStorageDomain) {
        validateParameters(model, 2, "name");
    }
    try {
        response = performCreate(action, getAddParams(entity, hostId), ID_RESOLVER);
    } catch (WebFaultException e) {
        // cleanup of created connection
        if (isConnNew) {
            removeStorageServerConnection(connection, hostId);
        }
        throw e;
    }
    return response;
}
#method_after
private Response addDomain(VdcActionType action, StorageDomain model, StorageDomainStatic entity, Guid hostId, StorageServerConnections connection) {
    Response response = null;
    boolean isConnNew = false;
    if (connection.getstorage_type().isFileDomain() && StringUtils.isEmpty(connection.getid())) {
        isConnNew = true;
        connection.setid(addStorageServerConnection(connection, hostId));
    }
    entity.setStorage(connection.getid());
    if (action == VdcActionType.AddNFSStorageDomain || action == VdcActionType.AddPosixFsStorageDomain || action == VdcActionType.AddGlusterFsStorageDomain) {
        org.ovirt.engine.core.common.businessentities.StorageDomain existing = getExistingStorageDomain(hostId, entity.getStorageType(), entity.getStorageDomainType(), connection);
        if (existing != null) {
            StorageDomainMapper.map(model, existing.getStorageStaticData());
            entity = existing.getStorageStaticData();
            action = VdcActionType.AddExistingFileStorageDomain;
        }
    }
    if (action != VdcActionType.AddExistingFileStorageDomain) {
        validateParameters(model, 2, "name");
    }
    try {
        response = performCreate(action, getAddParams(entity, hostId), ID_RESOLVER);
    } catch (WebFaultException e) {
        // cleanup of created connection
        if (isConnNew) {
            removeStorageServerConnection(connection, hostId);
        }
        throw e;
    }
    return response;
}
#end_block

#method_before
private Response addExistingSAN(StorageDomain model, StorageType storageType, Guid hostId) {
    getEntity(VDS.class, VdcQueryType.GetVdsByVdsId, new IdQueryParameters(hostId), "Host: id=" + hostId);
    List<LUNs> existingLuns = getDeviceList(hostId, storageType);
    List<StorageServerConnections> existingStorageServerConnections = getLunsWithInitializedStorageType(existingLuns, storageType);
    List<org.ovirt.engine.core.common.businessentities.StorageDomain> existingStorageDomains = getExistingBlockStorageDomain(hostId, storageType, existingStorageServerConnections);
    StorageDomainStatic storageDomainToImport = getMatchingStorageDomain(asGuid(model.getId()), existingStorageDomains);
    if (storageDomainToImport == null) {
        throw new WebFaultException(new WebApplicationException(), "Storage Domain id " + model.getId() + " Does not exists", Status.NOT_FOUND);
    }
    StorageDomainStatic entity = mapToStatic(model);
    setStorageDomainProperties(entity, storageDomainToImport);
    StorageDomainManagementParameter parameters = new StorageDomainManagementParameter(storageDomainToImport);
    parameters.setVdsId(hostId);
    return performCreate(VdcActionType.AddExistingBlockStorageDomain, parameters, ID_RESOLVER);
}
#method_after
private Response addExistingSAN(StorageDomain model, StorageType storageType, Guid hostId) {
    getEntity(VDS.class, VdcQueryType.GetVdsByVdsId, new IdQueryParameters(hostId), "Host: id=" + hostId);
    List<LUNs> existingLuns = getDeviceList(hostId, storageType);
    List<StorageServerConnections> existingStorageServerConnections = getLunsWithInitializedStorageType(existingLuns, storageType);
    List<org.ovirt.engine.core.common.businessentities.StorageDomain> existingStorageDomains = getExistingBlockStorageDomain(hostId, storageType, existingStorageServerConnections);
    StorageDomainStatic storageDomainToImport = getMatchingStorageDomain(asGuid(model.getId()), existingStorageDomains);
    if (storageDomainToImport == null) {
        throw new WebFaultException(new WebApplicationException(), "Storage Domain id " + model.getId() + " Does not exists", Status.NOT_FOUND);
    }
    StorageDomainMapper.map(model, storageDomainToImport);
    StorageDomainManagementParameter parameters = new StorageDomainManagementParameter(storageDomainToImport);
    parameters.setVdsId(hostId);
    return performCreate(VdcActionType.AddExistingBlockStorageDomain, parameters, ID_RESOLVER);
}
#end_block

#method_before
public boolean hasMemoryToRunVM(VDS curVds, VM vm) {
    boolean retVal = false;
    if (curVds.getMemCommited() != null && curVds.getPhysicalMemMb() != null && curVds.getReservedMem() != null && curVds.getSwapTotal() != null) {
        double vdsCurrentMem = getVdsCurrentReservedMemory(curVds) + vm.getMinAllocatedMem();
        double vdsMemLimit = getVdsMemLimit(curVds);
        log.debug("hasMemoryToRunVM: host '{}' physical vmem size is : {}, swap total vmem size is : {} MB", curVds.getName(), curVds.getPhysicalMemMb(), curVds.getSwapTotal());
        log.debug("Host Mem Conmmitted: '{}', pending vmem size is : {}, Host Guest Overhead {}, Host Reserved Mem: {}, VM Min Allocated Mem {}", curVds.getMemCommited(), curVds.getPendingVmemSize(), curVds.getGuestOverhead(), curVds.getReservedMem(), vm.getMinAllocatedMem());
        log.debug("{} <= ???  {}", vdsCurrentMem, vdsMemLimit);
        retVal = (vdsCurrentMem <= vdsMemLimit);
    }
    return retVal;
}
#method_after
public boolean hasMemoryToRunVM(VDS curVds, VM vm) {
    boolean retVal = false;
    if (curVds.getMemCommited() != null && curVds.getPhysicalMemMb() != null && curVds.getReservedMem() != null) {
        double vdsCurrentMem = getVdsCurrentMemoryInUse(curVds) + vm.getMinAllocatedMem();
        double vdsMemLimit = getVdsMemLimit(curVds);
        log.debug("hasMemoryToRunVM: host '{}' physical vmem size is : {} MB", curVds.getName(), curVds.getPhysicalMemMb());
        log.debug("Host Mem Conmmitted: '{}', pending vmem size is : {}, Host Guest Overhead {}, Host Reserved Mem: {}, VM Min Allocated Mem {}", curVds.getMemCommited(), curVds.getPendingVmemSize(), curVds.getGuestOverhead(), curVds.getReservedMem(), vm.getMinAllocatedMem());
        log.debug("{} <= ???  {}", vdsCurrentMem, vdsMemLimit);
        retVal = (vdsCurrentMem <= vdsMemLimit);
    }
    return retVal;
}
#end_block

#method_before
public int getHostAvailableMemoryLimit(VDS curVds) {
    if (curVds.getMemCommited() != null && curVds.getPhysicalMemMb() != null && curVds.getReservedMem() != null && curVds.getSwapTotal() != null) {
        double vdsCurrentMem = getVdsCurrentReservedMemory(curVds);
        double vdsMemLimit = getVdsMemLimit(curVds);
        return (int) (vdsMemLimit - vdsCurrentMem);
    }
    return 0;
}
#method_after
public int getHostAvailableMemoryLimit(VDS curVds) {
    if (curVds.getMemCommited() != null && curVds.getPhysicalMemMb() != null && curVds.getReservedMem() != null) {
        double vdsCurrentMem = getVdsCurrentMemoryInUse(curVds);
        double vdsMemLimit = getVdsMemLimit(curVds);
        return (int) (vdsMemLimit - vdsCurrentMem);
    }
    return 0;
}
#end_block

#method_before
private double getVdsMemLimit(VDS curVds) {
    // if single vm on host. Disregard memory over commitment
    int computedMemoryOverCommit = (curVds.getVmCount() == 0) ? 100 : curVds.getMaxVdsMemoryOverCommit();
    double vdsMemLimit = computedMemoryOverCommit * curVds.getPhysicalMemMb() / 100.0;
    return vdsMemLimit;
}
#method_after
private double getVdsMemLimit(VDS curVds) {
    // if single vm on host. Disregard memory over commitment
    int computedMemoryOverCommit = (curVds.getVmCount() == 0) ? 100 : curVds.getMaxVdsMemoryOverCommit();
    return (computedMemoryOverCommit * curVds.getPhysicalMemMb() / 100.0);
}
#end_block

#method_before
protected void addVmTemplateImages(Map<Guid, Guid> srcDeviceIdToTargetDeviceIdMapping) {
    Guid vmSnapshotId = Guid.newGuid();
    for (DiskImage diskImage : mImages) {
        // The return value of this action is the 'copyImage' task GUID:
        VdcReturnValueBase retValue = Backend.getInstance().runInternalAction(VdcActionType.CreateImageTemplate, buildChildCommandParameters(diskImage, vmSnapshotId), cloneContextAndDetachFromParent());
        if (!retValue.getSucceeded()) {
            throw new VdcBLLException(retValue.getFault().getError(), retValue.getFault().getMessage());
        }
        getReturnValue().getVdsmTaskIdList().addAll(retValue.getInternalVdsmTaskIdList());
        DiskImage newImage = (DiskImage) retValue.getActionReturnValue();
        srcDeviceIdToTargetDeviceIdMapping.put(diskImage.getId(), newImage.getId());
    }
}
#method_after
protected void addVmTemplateImages(Map<Guid, Guid> srcDeviceIdToTargetDeviceIdMapping) {
    for (DiskImage diskImage : mImages) {
        // The return value of this action is the 'copyImage' task GUID:
        VdcReturnValueBase retValue = Backend.getInstance().runInternalAction(VdcActionType.CreateImageTemplate, buildChildCommandParameters(diskImage, Guid.newGuid()), ExecutionHandler.createDefaultContextForTasks(getContext()));
        if (!retValue.getSucceeded()) {
            throw new VdcBLLException(retValue.getFault().getError(), retValue.getFault().getMessage());
        }
        getReturnValue().getVdsmTaskIdList().addAll(retValue.getInternalVdsmTaskIdList());
        DiskImage newImage = (DiskImage) retValue.getActionReturnValue();
        srcDeviceIdToTargetDeviceIdMapping.put(diskImage.getId(), newImage.getId());
    }
}
#end_block

#method_before
protected void loadVmData(VM vm) {
    setManagedDevices(vm.getStaticData());
    if (vm.getInterfaces().isEmpty()) {
        vm.setInterfaces(getVmNetworkInterfaceDao().getAllForVm(vm.getId()));
    }
    if (StringUtils.isEmpty(vm.getVmtName())) {
        if (!Guid.Empty.equals(vm.getVmtGuid())) {
            VmTemplate t = getVmTemplateDao().get(vm.getVmtGuid());
            vm.setVmtName(t.getName());
        } else {
            vm.setVmtName(VmTemplateHandler.BLANK_VM_TEMPLATE_NAME);
        }
    }
}
#method_after
protected void loadVmData(VM vm) {
    VmDeviceUtils.setVmDevices(vm.getStaticData());
    if (vm.getInterfaces().isEmpty()) {
        vm.setInterfaces(getVmNetworkInterfaceDao().getAllForVm(vm.getId()));
    }
    if (StringUtils.isEmpty(vm.getVmtName())) {
        if (!Guid.Empty.equals(vm.getVmtGuid())) {
            VmTemplate t = getVmTemplateDao().get(vm.getVmtGuid());
            vm.setVmtName(t.getName());
        } else {
            vm.setVmtName(VmTemplateHandler.BLANK_VM_TEMPLATE_NAME);
        }
    }
}
#end_block

#method_before
protected void loadTemplateData(VmTemplate template) {
    setManagedDevices(template);
    if (template.getInterfaces() == null || template.getInterfaces().isEmpty()) {
        template.setInterfaces(getVmNetworkInterfaceDao().getAllForTemplate(template.getId()));
    }
}
#method_after
protected void loadTemplateData(VmTemplate template) {
    VmDeviceUtils.setVmDevices(template);
    if (template.getInterfaces() == null || template.getInterfaces().isEmpty()) {
        template.setInterfaces(getVmNetworkInterfaceDao().getAllForTemplate(template.getId()));
    }
}
#end_block

#method_before
private void createSnapshotsForDisks() {
    for (DiskImage image : getDisksList()) {
        VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.CreateSnapshot, buildCreateSnapshotParameters(image), cloneContextAndDetachFromParent());
        if (vdcReturnValue.getSucceeded()) {
            getTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList());
        } else {
            throw new VdcBLLException(vdcReturnValue.getFault().getError(), "Failed to create snapshot!");
        }
    }
}
#method_after
private void createSnapshotsForDisks() {
    for (DiskImage image : getDisksList()) {
        VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.CreateSnapshot, buildCreateSnapshotParameters(image), ExecutionHandler.createDefaultContextForTasks(getContext()));
        if (vdcReturnValue.getSucceeded()) {
            getTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList());
        } else {
            throw new VdcBLLException(vdcReturnValue.getFault().getError(), "Failed to create snapshot!");
        }
    }
}
#end_block

#method_before
private IStorageModel preparePosixStorageForEdit(StorageDomain storage) {
    final PosixStorageModel model = getPosixModelByStorage(storage);
    model.setRole(storage.getStorageDomainType());
    boolean isPathEditable = isPathEditable(storage);
    model.getPath().setIsChangable(isPathEditable);
    // vfs type is changeable only for general posix storage.
    if (model.getType().equals(StorageType.POSIXFS)) {
        model.getVfsType().setIsChangable(isPathEditable);
    } else {
        model.getVfsType().setIsChangable(false);
    }
    model.getMountOptions().setIsChangable(isPathEditable);
    AsyncDataProvider.getInstance().getStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getVfsType().setEntity(connection.getVfsType());
            model.getMountOptions().setEntity(connection.getMountOptions());
        }
    }), storage.getStorage(), true);
    return model;
}
#method_after
private IStorageModel preparePosixStorageForEdit(StorageDomain storage) {
    final PosixStorageModel model = getPosixModelByStorage(storage);
    model.setRole(storage.getStorageDomainType());
    boolean isPathEditable = isPathEditable(storage);
    model.getPath().setIsChangable(isPathEditable);
    model.setVfsChangeability(isPathEditable);
    model.getMountOptions().setIsChangable(isPathEditable);
    AsyncDataProvider.getInstance().getStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getVfsType().setEntity(connection.getVfsType());
            model.getMountOptions().setEntity(connection.getMountOptions());
        }
    }), storage.getStorage(), true);
    return model;
}
#end_block

#method_before
private IStorageModel preparePosixStorageForEdit(StorageDomain storage) {
    final PosixStorageModel model = getPosixModelByStorage(storage);
    model.setRole(storage.getStorageDomainType());
    boolean isPathEditable = isPathEditable(storage);
    model.getPath().setIsChangable(isPathEditable);
    // vfs type is changeable only for general posix storage.
    if (model.getType().equals(StorageType.POSIXFS)) {
        model.getVfsType().setIsChangable(isPathEditable);
    } else {
        model.getVfsType().setIsChangable(false);
    }
    model.getMountOptions().setIsChangable(isPathEditable);
    AsyncDataProvider.getInstance().getStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getVfsType().setEntity(connection.getVfsType());
            model.getMountOptions().setEntity(connection.getMountOptions());
        }
    }), storage.getStorage(), true);
    return model;
}
#method_after
private IStorageModel preparePosixStorageForEdit(StorageDomain storage) {
    final PosixStorageModel model = getPosixModelByStorage(storage);
    model.setRole(storage.getStorageDomainType());
    boolean isPathEditable = isPathEditable(storage);
    model.getPath().setIsChangable(isPathEditable);
    model.setVfsChangeability(isPathEditable);
    model.getMountOptions().setIsChangable(isPathEditable);
    AsyncDataProvider.getInstance().getStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getVfsType().setEntity(connection.getVfsType());
            model.getMountOptions().setEntity(connection.getMountOptions());
        }
    }), storage.getStorage(), true);
    return model;
}
#end_block

#method_before
private void afterVMsRefreshTreatment() {
    Collection<Guid> movedToDownVms = new ArrayList<>();
    // now loop over the result and act
    for (VmAnalyzer vmUpdater : vmAnalyzers) {
        // rerun all vms from rerun list
        if (vmUpdater.isRerun()) {
            log.error("Rerun VM '{}'. Called from VDS '{}'", vmUpdater.getDbVm().getId(), vdsManager.getVdsName());
            ResourceManager.getInstance().RerunFailedCommand(vmUpdater.getDbVm().getId(), vdsManager.getVdsId());
        }
        if (vmUpdater.isSuccededToRun()) {
            vdsManager.succeededToRunVm(vmUpdater.getDbVm().getId());
            // TODO change {@IVdsEventListener.updateSlaPolicies}
            // to varargs version to avoid creating the list
            // over and over again - updateSlaPolicies(Guid vdsId, Guid... vmIds)
            getVdsEventListener().updateSlaPolicies(Arrays.asList(new Guid[] { vmUpdater.getDbVm().getId() }), vdsManager.getVdsId());
        }
        // Refrain from auto-start HA VM during its re-run attempts.
        if (vmUpdater.isAutoVmToRun() && !vmUpdater.isRerun()) {
            autoVmsToRun.add(vmUpdater.getDbVm().getId());
        }
        // process all vms that their ip changed.
        if (vmUpdater.isClientIpChanged()) {
            getVdsEventListener().processOnClientIpChange(vmUpdater.getVdsmVm().getVmDynamic().getId(), vmUpdater.getVdsmVm().getVmDynamic().getClientIp());
        }
        // process all vms that powering up.
        if (vmUpdater.isPoweringUp()) {
            getVdsEventListener().processOnVmPoweringUp(vmUpdater.getVdsmVm().getVmDynamic().getId());
        }
        if (vmUpdater.isMovedToDown()) {
            movedToDownVms.add(vmUpdater.getDbVm().getId());
        }
        if (vmUpdater.isRemoveFromAsync()) {
            ResourceManager.getInstance().RemoveAsyncRunningVm(vmUpdater.getDbVm().getId());
        }
        if (vmUpdater.isExternalVm()) {
            externalVms.add(new Pair<>(vmUpdater.getDbVm(), vmUpdater.getVdsmVm()));
        }
    }
    // process all vms that went down
    getVdsEventListener().processOnVmStop(movedToDownVms);
    // run all vms that crashed that marked with auto startup
    getVdsEventListener().runFailedAutoStartVMs(autoVmsToRun);
    processExternallyManagedVms();
    processVmsWithDevicesChange();
    saveVmsToDb();
}
#method_after
private void afterVMsRefreshTreatment() {
    Collection<Guid> movedToDownVms = new ArrayList<>();
    // now loop over the result and act
    for (VmAnalyzer vmUpdater : vmAnalyzers) {
        // rerun all vms from rerun list
        if (vmUpdater.isRerun()) {
            log.error("Rerun VM '{}'. Called from VDS '{}'", vmUpdater.getDbVm().getId(), vdsManager.getVdsName());
            ResourceManager.getInstance().RerunFailedCommand(vmUpdater.getDbVm().getId(), vdsManager.getVdsId());
        }
        if (vmUpdater.isSuccededToRun()) {
            vdsManager.succeededToRunVm(vmUpdater.getDbVm().getId());
            // TODO change {@IVdsEventListener.updateSlaPolicies}
            // to varargs version to avoid creating the list
            // over and over again - updateSlaPolicies(Guid vdsId, Guid... vmIds)
            getVdsEventListener().updateSlaPolicies(Arrays.asList(new Guid[] { vmUpdater.getDbVm().getId() }), vdsManager.getVdsId());
        }
        // Refrain from auto-start HA VM during its re-run attempts.
        if (vmUpdater.isAutoVmToRun() && !vmUpdater.isRerun()) {
            autoVmsToRun.add(vmUpdater.getDbVm().getId());
        }
        // process all vms that their ip changed.
        if (vmUpdater.isClientIpChanged()) {
            final VmDynamic vmDynamic = vmUpdater.getVdsmVm().getVmDynamic();
            getVdsEventListener().processOnClientIpChange(vmDynamic.getId(), vmDynamic.getClientIp(), vmDynamic.getConsoleCurrentUserName());
        }
        // process all vms that powering up.
        if (vmUpdater.isPoweringUp()) {
            getVdsEventListener().processOnVmPoweringUp(vmUpdater.getVdsmVm().getVmDynamic().getId());
        }
        if (vmUpdater.isMovedToDown()) {
            movedToDownVms.add(vmUpdater.getDbVm().getId());
        }
        if (vmUpdater.isRemoveFromAsync()) {
            ResourceManager.getInstance().RemoveAsyncRunningVm(vmUpdater.getDbVm().getId());
        }
        if (vmUpdater.isExternalVm()) {
            externalVms.add(new Pair<>(vmUpdater.getDbVm(), vmUpdater.getVdsmVm()));
        }
    }
    // process all vms that went down
    getVdsEventListener().processOnVmStop(movedToDownVms);
    // run all vms that crashed that marked with auto startup
    getVdsEventListener().runFailedAutoStartVMs(autoVmsToRun);
    processExternallyManagedVms();
    processVmsWithDevicesChange();
    saveVmsToDb();
}
#end_block

#method_before
@Override
public void vdsNotResponding(final VDS vds) {
    ExecutionHandler.updateSpecificActionJobCompleted(vds.getId(), VdcActionType.MaintenanceVds, false);
    ThreadPoolUtil.execute(new Runnable() {

        @Override
        public void run() {
            log.info("ResourceManager::vdsNotResponding entered for Host '{}', '{}'", vds.getId(), vds.getHostName());
            FenceVdsActionParameters params = new FenceVdsActionParameters(vds.getId(), FenceActionType.Restart);
            Backend.getInstance().runInternalAction(VdcActionType.VdsNotRespondingTreatment, params, ExecutionHandler.createInternalJobContext());
            moveBricksToUnknown(vds);
        }
    });
}
#method_after
@Override
public void vdsNotResponding(final VDS vds) {
    ExecutionHandler.updateSpecificActionJobCompleted(vds.getId(), VdcActionType.MaintenanceVds, false);
    ThreadPoolUtil.execute(new Runnable() {

        @Override
        public void run() {
            log.info("ResourceManager::vdsNotResponding entered for Host '{}', '{}'", vds.getId(), vds.getHostName());
            FenceVdsActionParameters params = new FenceVdsActionParameters(vds.getId(), FenceActionType.RESTART);
            Backend.getInstance().runInternalAction(VdcActionType.VdsNotRespondingTreatment, params, ExecutionHandler.createInternalJobContext());
            moveBricksToUnknown(vds);
        }
    });
}
#end_block

#method_before
@Override
public void processOnClientIpChange(final Guid vmId, String newClientIp) {
    final VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(vmId);
    final AuditLogableBase event = new AuditLogableBase();
    event.setVmId(vmId);
    event.setUserName(vmDynamic.getConsoleCurrentUserName());
    // (this happened when user close the console to spice/vnc)
    if (StringUtils.isEmpty(newClientIp)) {
        vmDynamic.setConsoleCurrentUserName(null);
        DbFacade.getInstance().getVmDynamicDao().update(vmDynamic);
        AuditLogDirector.log(event, AuditLogType.VM_CONSOLE_DISCONNECTED);
    } else {
        AuditLogDirector.log(event, AuditLogType.VM_CONSOLE_CONNECTED);
    }
}
#method_after
@Override
public void processOnClientIpChange(final Guid vmId, String newClientIp, String newClientUserName) {
    final AuditLogableBase event = new AuditLogableBase();
    event.setVmId(vmId);
    event.setUserName(newClientUserName);
    // (this happened when user close the console to spice/vnc)
    if (StringUtils.isEmpty(newClientIp)) {
        final VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(vmId);
        vmDynamic.setConsoleCurrentUserName(null);
        DbFacade.getInstance().getVmDynamicDao().update(vmDynamic);
        AuditLogDirector.log(event, AuditLogType.VM_CONSOLE_DISCONNECTED);
    } else {
        AuditLogDirector.log(event, AuditLogType.VM_CONSOLE_CONNECTED);
    }
}
#end_block

#method_before
@Override
public String scheduleACronJob(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams, String cronExpression) {
    JobDetail job = createJobWithBasicMapValues(instance, methodName, inputTypes, inputParams);
    try {
        String triggerName = generateUniqueNameForInstance(instance, TRIGGER_PREFIX);
        Trigger trigger = newTrigger().withIdentity(triggerName, Scheduler.DEFAULT_GROUP).withSchedule(cronSchedule(cronExpression)).build();
        sched.scheduleJob(job, trigger);
    } catch (Exception se) {
        log.error("failed to schedule job: {}", se.getMessage());
        log.debug("Exception", se);
    }
    return job.getKey().getName();
}
#method_after
@Override
public String scheduleACronJob(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams, String cronExpression) {
    JobDetail job = createJobWithBasicMapValues(instance, methodName, inputTypes, inputParams);
    try {
        String triggerName = generateUniqueNameForInstance(instance, TRIGGER_PREFIX);
        Trigger trigger = newTrigger().withIdentity(triggerName, Scheduler.DEFAULT_GROUP).withSchedule(cronSchedule(cronExpression)).build();
        sched.scheduleJob(job, trigger);
    } catch (Exception se) {
        log.error("failed to schedule job: {}", se.getMessage());
        log.debug("Exception", se);
        return null;
    }
    return job.getKey().getName();
}
#end_block

#method_before
public String scheduleACronJob(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams, String cronExpression, Date startAt, Date endBy) {
    JobDetail job = createJobWithBasicMapValues(instance, methodName, inputTypes, inputParams);
    try {
        String triggerName = generateUniqueNameForInstance(instance, TRIGGER_PREFIX);
        Trigger trigger = newTrigger().withIdentity(triggerName, Scheduler.DEFAULT_GROUP).withSchedule(cronSchedule(cronExpression)).startAt(startAt).endAt(endBy).build();
        sched.scheduleJob(job, trigger);
    } catch (Exception se) {
        log.error("failed to schedule job: {}", se.getMessage());
        log.debug("Exception", se);
    }
    return job.getKey().getName();
}
#method_after
public String scheduleACronJob(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams, String cronExpression, Date startAt, Date endBy) {
    JobDetail job = createJobWithBasicMapValues(instance, methodName, inputTypes, inputParams);
    try {
        String triggerName = generateUniqueNameForInstance(instance, TRIGGER_PREFIX);
        Trigger trigger = newTrigger().withIdentity(triggerName, Scheduler.DEFAULT_GROUP).withSchedule(cronSchedule(cronExpression)).startAt(startAt).endAt(endBy).build();
        sched.scheduleJob(job, trigger);
    } catch (Exception se) {
        log.error("failed to schedule job: {}", se.getMessage());
        log.debug("Exception", se);
        return null;
    }
    return job.getKey().getName();
}
#end_block

#method_before
public void engineInitialize() {
    createInternalAAAConfigurations();
    createKerberosLdapAAAConfigurations();
    for (File directory : EngineLocalConfig.getInstance().getExtensionsDirectories()) {
        if (!directory.exists()) {
            log.warn("The directory '{}' cotaning configuration files does not exist.", directory.getAbsolutePath());
        } else {
            // The order of the files inside the directory is relevant, as the objects are created in
            // the same order
            // that
            // the files are processed, so it is better to sort them so that objects will always be
            // created in the
            // same
            // order regardless of how the filesystem decides to store the entries of the directory:
            File[] files = directory.listFiles();
            if (files != null) {
                sort(files);
                for (File file : files) {
                    if (file.getName().endsWith(".properties")) {
                        try {
                            load(file);
                        } catch (Exception ex) {
                            log.error("Could not load extension based on configuration file '{}'. Please check the configuration file is valid. Exception message is: {}", file.getAbsolutePath(), ex.getMessage());
                            log.debug("", ex);
                        }
                    }
                }
            }
        }
    }
    for (ExtensionProxy extension : getLoadedExtensions()) {
        if (EngineLocalConfig.getInstance().getBoolean(ENGINE_EXTENSION_ENABLED + normalizeName(extension.getContext().<String>get(Base.ContextKeys.INSTANCE_NAME)), Boolean.parseBoolean(extension.getContext().<Properties>get(Base.ContextKeys.CONFIGURATION).getProperty(Base.ConfigKeys.ENABLED, "true")))) {
            try {
                initialize(extension.getContext().<String>get(Base.ContextKeys.INSTANCE_NAME));
            } catch (Exception ex) {
                log.error("Could not initialize extension '{}'. Exception message is: {}", extension.getContext().<String>get(Base.ContextKeys.INSTANCE_NAME), ex.getMessage());
                log.debug("", ex);
            }
        }
    }
    dump();
}
#method_after
public void engineInitialize() {
    try {
        createInternalAAAConfigurations();
        createKerberosLdapAAAConfigurations();
    } catch (Exception ex) {
        log.error("Could not load built in configuration. Exception message is: {}", ex.getMessage());
        log.debug("", ex);
    }
    for (File directory : EngineLocalConfig.getInstance().getExtensionsDirectories()) {
        if (!directory.exists()) {
            log.warn("The directory '{}' cotaning configuration files does not exist.", directory.getAbsolutePath());
        } else {
            // The order of the files inside the directory is relevant, as the objects are created in
            // the same order
            // that
            // the files are processed, so it is better to sort them so that objects will always be
            // created in the
            // same
            // order regardless of how the filesystem decides to store the entries of the directory:
            File[] files = directory.listFiles();
            if (files != null) {
                sort(files);
                for (File file : files) {
                    if (file.getName().endsWith(".properties")) {
                        try {
                            load(file);
                        } catch (Exception ex) {
                            log.error("Could not load extension based on configuration file '{}'. Please check the configuration file is valid. Exception message is: {}", file.getAbsolutePath(), ex.getMessage());
                            log.debug("", ex);
                        }
                    }
                }
            }
        }
    }
    for (ExtensionProxy extension : getLoadedExtensions()) {
        if (EngineLocalConfig.getInstance().getBoolean(ENGINE_EXTENSION_ENABLED + normalizeName(extension.getContext().<String>get(Base.ContextKeys.INSTANCE_NAME)), Boolean.parseBoolean(extension.getContext().<Properties>get(Base.ContextKeys.CONFIGURATION).getProperty(Base.ConfigKeys.ENABLED, "true")))) {
            try {
                initialize(extension.getContext().<String>get(Base.ContextKeys.INSTANCE_NAME));
            } catch (Exception ex) {
                log.error("Could not initialize extension '{}'. Exception message is: {}", extension.getContext().<String>get(Base.ContextKeys.INSTANCE_NAME), ex.getMessage());
                log.debug("", ex);
            }
        }
    }
    dump();
}
#end_block

#method_before
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterVolumeGeoRepStatusDetailFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepStopFailedException:
        case GlusterSnapshotException:
        case GlusterSnapshotCreateFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#method_after
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeGeoRepSessionStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeGeoRepSessionPauseFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeGeoRepSessionResumeFailed:
        case GlusterGeoRepException:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterGeoRepConfigFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepSessionStopFailed:
        case GlusterSnapshotException:
        case GlusterSnapshotInfoFailedException:
        case GlusterSnapshotDeleteVolumeFailedException:
        case GlusterSnapshotDeleteFailedException:
        case GlusterSnapshotActivateFailedException:
        case GlusterSnapshotDeactivateFailedException:
        case GlusterSnapshotRestoreFailedException:
        case GlusterSnapshotCreateFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#end_block

#method_before
@Override
protected void executeVdsBrokerCommand() {
    GlusterVolumeSnapshotEntity snapshot = new GlusterVolumeSnapshotEntity();
    String volumeName = getParameters().getVolumeName();
    String snapshotName = getParameters().getSnapshotName();
    String description = getParameters().getDescription() == null ? "" : getParameters().getDescription();
    boolean force = getParameters().getForce() ? true : false;
    uuidReturn = getBroker().glusterSnapshotCreate(volumeName, snapshotName, description, force);
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        snapshot.setId(Guid.createGuidFromStringDefaultEmpty(uuidReturn.mUuid));
        setReturnValue(snapshot);
    }
}
#method_after
@Override
protected void executeVdsBrokerCommand() {
    String volumeName = getParameters().getVolumeName();
    String snapshotName = getParameters().getSnapshotName();
    String description = getParameters().getDescription() == null ? "" : getParameters().getDescription();
    boolean force = getParameters().getForce();
    uuidReturn = getBroker().glusterSnapshotCreate(volumeName, snapshotName, description, force);
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        setReturnValue(Guid.createGuidFromStringDefaultEmpty(uuidReturn.mUuid));
    }
}
#end_block

#method_before
@Override
public OneUuidReturnForXmlRpc glusterSnapshotCreate(String volumeName, String snapshotName, String description, boolean force) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.create").withOptionalParameter("volumeName", volumeName).withParameter("snapName", snapshotName).withParameter("description", description).withParameter("force", force).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new OneUuidReturnForXmlRpc(response);
}
#method_after
@Override
public OneUuidReturnForXmlRpc glusterSnapshotCreate(String volumeName, String snapshotName, String description, boolean force) {
    JsonRpcRequest request = new RequestBuilder("GlusterVolume.snapshotCreate").withParameter("volumeName", volumeName).withParameter("snapName", snapshotName).withOptionalParameter("description", description).withParameter("force", force).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new OneUuidReturnForXmlRpc(response);
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCustomValue(GlusterConstants.VOLUME_SNAPSHOT_NAME, getParameters().getSnapshotName());
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
}
#end_block

#method_before
@Override
public void executeCommand() {
    VDSReturnValue retVal = runVdsCommand(VDSCommandType.DeleteGlusterVolume, new GlusterVolumeSnapshotActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getSnapshotName()));
    setSucceeded(retVal.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_DELETE_FAILED, retVal.getVdsError().getMessage());
    } else {
        getGlusterVolumeSnapshotDao().remove(snapshot.getId());
    }
}
#method_after
@Override
public void executeCommand() {
    VDSReturnValue retVal = runVdsCommand(VDSCommandType.DeleteGlusterVolume, new GlusterVolumeSnapshotActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getSnapshotName()));
    setSucceeded(retVal.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_DELETE_FAILED, retVal.getVdsError().getMessage());
    } else {
        getGlusterVolumeSnapshotDao().remove(getSnapshot().getId());
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (StringUtils.isEmpty(getParameters().getSnapshotName())) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_NAME_IS_EMPTY);
    }
    snapshot = getGlusterVolumeSnapshotDao().getByName(getGlusterVolumeId(), getParameters().getSnapshotName());
    if (snapshot == null) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_DOES_NOT_EXIST, getParameters().getSnapshotName());
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    return true;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    snapshots = getGlusterVolumeSnapshotDao().getAllByVolumeId(getGlusterVolumeId());
    if (snapshots == null || snapshots.size() == 0) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NO_SNAPSHOTS_EXIST, getGlusterVolumeName());
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (snapshots == null || snapshots.isEmpty()) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NO_SNAPSHOTS_EXIST, getGlusterVolumeName());
    }
    return true;
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCustomValue(GlusterConstants.VOLUME_SNAPSHOT_NAME, getParameters().getSnapshotName());
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__DEACTIVATE);
}
#end_block

#method_before
@Override
public void executeCommand() {
    VDSReturnValue retVal = runVdsCommand(VDSCommandType.DeactivateGlusterVolumeSnapshot, new GlusterVolumeSnapshotActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getSnapshotName()));
    setSucceeded(retVal.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_DEACTIVATE_FAILED, retVal.getVdsError().getMessage());
    } else {
        getGlusterVolumeSnapshotDao().updateSnapshotStatus(snapshot.getId(), GlusterSnapshotStatus.STOPPED);
    }
}
#method_after
@Override
public void executeCommand() {
    VDSReturnValue retVal = runVdsCommand(VDSCommandType.DeactivateGlusterVolumeSnapshot, new GlusterVolumeSnapshotActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getSnapshotName()));
    setSucceeded(retVal.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_DEACTIVATE_FAILED, retVal.getVdsError().getMessage());
    } else {
        getGlusterVolumeSnapshotDao().updateSnapshotStatus(getSnapshot().getId(), GlusterSnapshotStatus.STOPPED);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    snapshot = getGlusterVolumeSnapshotDao().getByName(getGlusterVolumeId(), getParameters().getSnapshotName());
    if (snapshot == null) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_DOES_NOT_EXIST, getParameters().getSnapshotName());
    } else if (snapshot.getStatus() == GlusterSnapshotStatus.STOPPED) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_ALREADY_DEACTIVATED, snapshot.getSnapshotName());
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getSnapshot().getStatus() == GlusterSnapshotStatus.STOPPED) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_ALREADY_DEACTIVATED, getSnapshot().getSnapshotName());
    }
    return true;
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCustomValue(GlusterConstants.VOLUME_SNAPSHOT_NAME, getParameters().getSnapshotName());
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__RESTORE);
}
#end_block

#method_before
@Override
public void executeCommand() {
    VDSReturnValue retVal = runVdsCommand(VDSCommandType.RestoreGlusterVolumeSnapshot, new GlusterVolumeSnapshotActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getSnapshotName()));
    setSucceeded(retVal.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_RESTORE_FAILED, retVal.getVdsError().getMessage());
    } else {
        getGlusterVolumeSnapshotDao().remove(snapshot.getId());
    // TODO: Was discussed to mark the snapshot as restored and still maintain in engine
    }
}
#method_after
@Override
public void executeCommand() {
    for (GlusterGeoRepSession session : georepSessions) {
        GlusterVolumeEntity slaveVolume = getDbFacade().getGlusterVolumeDao().getById(session.getSlaveVolumeId());
        if (slaveVolume == null) {
            // continue with other sessions and restore the volumes
            continue;
        }
        VDS slaveUpServer = ClusterUtils.getInstance().getRandomUpServer(slaveVolume.getClusterId());
        if (slaveUpServer == null) {
            handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_RESTORE_FAILED, "No up server found in slave cluster of geo-rep session");
            setSucceeded(false);
            return;
        }
        // Bring down the remote volume and restore snapshot
        if (slaveVolume.getStatus() == GlusterStatus.UP) {
            VdcReturnValueBase volumeDownRetVal = runInternalAction(VdcActionType.StopGlusterVolume, new GlusterVolumeActionParameters(slaveVolume.getId(), true));
            if (!volumeDownRetVal.getSucceeded()) {
                handleVdsError(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, slaveVolume.getName());
                setSucceeded(false);
                return;
            } else {
                GlusterVolumeSnapshotEntity slaveVolumeSnapshot = getGlusterVolumeSnapshotDao().getByName(slaveVolume.getId(), getParameters().getSnapshotName());
                if (slaveVolumeSnapshot == null) {
                    handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_RESTORE_FAILED, "Unable to find snapshot for slave volume");
                    setSucceeded(false);
                    return;
                }
                VDSReturnValue slaveRestoreRetVal = runVdsCommand(VDSCommandType.RestoreGlusterVolumeSnapshot, new GlusterVolumeSnapshotActionVDSParameters(slaveUpServer.getId(), slaveVolume.getName(), slaveVolumeSnapshot.getSnapshotName()));
                if (!slaveRestoreRetVal.getSucceeded()) {
                    handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_RESTORE_FAILED, slaveRestoreRetVal.getVdsError().getMessage());
                    setSucceeded(false);
                    return;
                } else {
                    getGlusterVolumeSnapshotDao().remove(slaveVolumeSnapshot.getId());
                }
            }
        }
    }
    VDSReturnValue retVal = runVdsCommand(VDSCommandType.RestoreGlusterVolumeSnapshot, new GlusterVolumeSnapshotActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getSnapshotName()));
    setSucceeded(retVal.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_RESTORE_FAILED, retVal.getVdsError().getMessage());
    } else {
        getGlusterVolumeSnapshotDao().remove(getSnapshot().getId());
    // TODO: Was discussed to mark the snapshot as restored and still maintain in engine
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    snapshot = getGlusterVolumeSnapshotDao().getByName(getGlusterVolumeId(), getParameters().getSnapshotName());
    if (snapshot == null) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_DOES_NOT_EXIST, getParameters().getSnapshotName());
    }
    if (getGlusterVolume().getStatus() == GlusterStatus.DOWN) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN, getGlusterVolumeName());
    }
    if (getGlusterVolume().getAsyncTask().getStatus() == JobExecutionStatus.STARTED) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VOLUME_OPERATION_IN_PROGRESS, getGlusterVolumeName(), getVdsGroupName());
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getGlusterVolume().getStatus() != GlusterStatus.DOWN) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_UP, getGlusterVolumeName());
    }
    for (GlusterGeoRepSession session : georepSessions) {
        if (session.getSlaveVolumeId() == null || session.getSlaveNodeUuid() == null) {
            failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_REMOTE_CLUSTER_NOT_MAINTAINED_BY_ENGINE);
        }
    }
    return true;
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCustomValue(GlusterConstants.VOLUME_SNAPSHOT_NAME, getParameters().getSnapshotName());
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ACTIVATE);
}
#end_block

#method_before
@Override
public void executeCommand() {
    VDSReturnValue retVal = runVdsCommand(VDSCommandType.ActivateGlusterVolumeSnapshot, new GlusterVolumeActivateSnapshotVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getSnapshotName(), getParameters().getForce()));
    setSucceeded(retVal.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_ACTIVATE_FAILED, retVal.getVdsError().getMessage());
    } else {
        getGlusterVolumeSnapshotDao().updateSnapshotStatus(snapshot.getId(), GlusterSnapshotStatus.STARTED);
    }
}
#method_after
@Override
public void executeCommand() {
    VDSReturnValue retVal = runVdsCommand(VDSCommandType.ActivateGlusterVolumeSnapshot, new GlusterVolumeActivateSnapshotVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getSnapshotName(), getParameters().getForce()));
    setSucceeded(retVal.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_ACTIVATE_FAILED, retVal.getVdsError().getMessage());
    } else {
        getGlusterVolumeSnapshotDao().updateSnapshotStatus(getSnapshot().getId(), GlusterSnapshotStatus.STARTED);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    snapshot = getGlusterVolumeSnapshotDao().getByName(getGlusterVolumeId(), getParameters().getSnapshotName());
    if (snapshot == null) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_DOES_NOT_EXIST, getParameters().getSnapshotName());
    } else if (snapshot.getStatus() == GlusterSnapshotStatus.STARTED) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_ALREADY_ACTIVATED, snapshot.getSnapshotName());
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getSnapshot().getStatus() == GlusterSnapshotStatus.STARTED) {
        failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_ALREADY_ACTIVATED, getSnapshot().getSnapshotName());
    }
    return true;
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.info").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, response);
}
#method_after
@Override
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterVolume.snapshotList").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, response);
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotConfigReturnForXmlRpc glusterVolumeSnapshotConfigGet(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.configGet").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotConfigReturnForXmlRpc(clusterId, response);
}
#method_after
@Override
public GlusterVolumeSnapshotConfigReturnForXmlRpc glusterVolumeSnapshotConfigGet(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.configList").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotConfigReturnForXmlRpc(clusterId, response);
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.glusterSnapshotInfo("", volumeName);
        GlusterVolumeSnapshotInfoReturnForXmlRpc wrapper = new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#method_after
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.glusterSnapshotInfo("", volumeName);
        GlusterVolumeSnapshotInfoReturnForXmlRpc wrapper = new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#end_block

#method_before
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeGeoRepStartFailedException:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeGeoRepPauseFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeGeoRepResumeFailed:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterVolumeGeoRepStatusDetailFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepStopFailedException:
        case GlusterSnapshotException:
        case GlusterSnapshotInfoFailedException:
        case GlusterSnapshotDeleteVolumeFailedException:
        case GlusterSnapshotDeleteFailedException:
        case GlusterSnapshotActivateFailedException:
        case GlusterSnapshotDeactivateFailedException:
        case GlusterSnapshotRestoreFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#method_after
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeGeoRepSessionStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeGeoRepSessionPauseFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeGeoRepSessionResumeFailed:
        case GlusterGeoRepException:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterGeoRepConfigFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepSessionStopFailed:
        case GlusterSnapshotException:
        case GlusterSnapshotInfoFailedException:
        case GlusterSnapshotDeleteVolumeFailedException:
        case GlusterSnapshotDeleteFailedException:
        case GlusterSnapshotActivateFailedException:
        case GlusterSnapshotDeactivateFailedException:
        case GlusterSnapshotRestoreFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.glusterSnapshotInfo("", volumeName);
        GlusterVolumeSnapshotInfoReturnForXmlRpc wrapper = new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#method_after
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.glusterSnapshotInfo("", volumeName);
        GlusterVolumeSnapshotInfoReturnForXmlRpc wrapper = new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#end_block

#method_before
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeGeoRepStartFailedException:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeGeoRepPauseFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeGeoRepResumeFailed:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterVolumeGeoRepStatusDetailFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepStopFailedException:
        case GlusterSnapshotException:
        case GlusterSnapshotInfoFailedException:
        case GlusterSnapshotDeleteVolumeFailedException:
        case GlusterSnapshotDeleteFailedException:
        case GlusterSnapshotActivateFailedException:
        case GlusterSnapshotDeactivateFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#method_after
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeGeoRepSessionStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeGeoRepSessionPauseFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeGeoRepSessionResumeFailed:
        case GlusterGeoRepException:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterGeoRepConfigFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepSessionStopFailed:
        case GlusterSnapshotException:
        case GlusterSnapshotInfoFailedException:
        case GlusterSnapshotDeleteVolumeFailedException:
        case GlusterSnapshotDeleteFailedException:
        case GlusterSnapshotActivateFailedException:
        case GlusterSnapshotDeactivateFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.info").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, response);
}
#method_after
@Override
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterVolume.snapshotList").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, response);
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotConfigReturnForXmlRpc glusterVolumeSnapshotConfigGet(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.configGet").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotConfigReturnForXmlRpc(clusterId, response);
}
#method_after
@Override
public GlusterVolumeSnapshotConfigReturnForXmlRpc glusterVolumeSnapshotConfigGet(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.configList").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotConfigReturnForXmlRpc(clusterId, response);
}
#end_block

#method_before
@Override
protected void executeVdsBrokerCommand() {
    String snapshotName = getParameters().getSnapshotName();
    result = getBroker().glusterSnapshotDelete(snapshotName);
    proceedProxyReturnValue();
}
#method_after
@Override
protected void executeVdsBrokerCommand() {
    String snapshotName = getParameters().getSnapshotName();
    status = getBroker().glusterSnapshotDelete(snapshotName);
    proceedProxyReturnValue();
}
#end_block

#method_before
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterVolumeGeoRepStatusDetailFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepStopFailedException:
        case GlusterSnapshotException:
        case GlusterSnapshotCreateFailedException:
        case GlusterSnapshotDeleteFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#method_after
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeGeoRepSessionStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeGeoRepSessionPauseFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeGeoRepSessionResumeFailed:
        case GlusterGeoRepException:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterGeoRepConfigFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepSessionStopFailed:
        case GlusterSnapshotException:
        case GlusterSnapshotInfoFailedException:
        case GlusterSnapshotDeleteVolumeFailedException:
        case GlusterSnapshotDeleteFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#end_block

#method_before
private static Collection getCollection(BaseResource model, Class<? extends BaseResource> suggestedParentType) {
    ParentToCollectionMap collections = TYPES.get(model.getClass());
    if (collections == null) {
        return null;
    }
    if (suggestedParentType != null) {
        for (Entry<Class<? extends BaseResource>, Collection> entry : collections.entrySet()) {
            if (entry.getKey().equals(suggestedParentType)) {
                return entry.getValue();
            }
        }
    }
    for (Entry<Class<? extends BaseResource>, Collection> parentTypeEntry : collections.entrySet()) {
        if (parentTypeEntry.getKey() != NO_PARENT && getParentModel(model, parentTypeEntry.getKey()) != null) {
            return parentTypeEntry.getValue();
        }
    }
    return collections.get(NO_PARENT);
}
#method_after
private static Collection getCollection(BaseResource model, Class<? extends BaseResource> suggestedParentType) {
    ParentToCollectionMap collections = TYPES.get(model.getClass());
    if (collections == null) {
        return null;
    }
    if (suggestedParentType != null && collections.get(suggestedParentType) != null) {
        return collections.get(suggestedParentType);
    }
    for (Entry<Class<? extends BaseResource>, Collection> parentTypeEntry : collections.entrySet()) {
        if (parentTypeEntry.getKey() != NO_PARENT && getParentModel(model, parentTypeEntry.getKey()) != null) {
            return parentTypeEntry.getValue();
        }
    }
    return collections.get(NO_PARENT);
}
#end_block

#method_before
public static <R extends BaseResource> UriBuilder getUriBuilder(UriInfo uriInfo, R model, Class<? extends BaseResource> suggestedParentType) {
    UriBuilder uriBuilder = builderMap.get(model.getClass());
    if (uriBuilder == null) {
        Collection collection = getCollection(model, suggestedParentType);
        if (collection == null) {
            return null;
        }
        if (collection.getParentType() != NO_PARENT) {
            BaseResource parent = getParentModel(model, collection.getParentType());
            Collection parentCollection = getCollection(parent, suggestedParentType);
            String path = getPath(collection.getCollectionType(), parentCollection.getResourceType(), model.getClass());
            uriBuilder = getUriBuilder(uriInfo, parent).path(path);
        } else {
            String path = getPath(collection.getCollectionType());
            uriBuilder = uriInfo != null ? UriBuilder.fromPath(uriInfo.getBaseUri().getPath()).path(path) : UriBuilder.fromPath(path);
        }
        builderMap.put(model.getClass(), uriBuilder.clone());
    } else {
        // We need to clone so we have our own copy to work with. Cloning is much faster than building a new one
        // from scratch each time.
        uriBuilder = uriBuilder.clone();
    }
    return uriBuilder.path(model.getId());
}
#method_after
public static <R extends BaseResource> UriBuilder getUriBuilder(UriInfo uriInfo, R model, Class<? extends BaseResource> suggestedParentType) {
    Collection collection = getCollection(model, suggestedParentType);
    if (collection == null) {
        return null;
    }
    UriBuilder uriBuilder;
    if (collection.getParentType() != NO_PARENT) {
        BaseResource parent = getParentModel(model, collection.getParentType());
        Collection parentCollection = getCollection(parent, suggestedParentType);
        String path = getPath(collection.getCollectionType(), parentCollection.getResourceType(), model.getClass());
        uriBuilder = getUriBuilder(uriInfo, parent).path(path);
    } else {
        uriBuilder = builderMap.get(collection);
        if (uriBuilder == null) {
            String path = getPath(collection.getCollectionType());
            uriBuilder = uriInfo != null ? UriBuilder.fromPath(uriInfo.getBaseUri().getPath()).path(path) : UriBuilder.fromPath(path);
            builderMap.put(collection, uriBuilder.clone());
        } else {
            // We need to clone so we have our own copy to work with. Cloning is much faster than building a new one
            // from scratch each time.
            uriBuilder = uriBuilder.clone();
        }
    }
    return uriBuilder.path(model.getId());
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    GlusterGeoRepDao geoRepDb = getGeoRepDao();
    Guid sessionId = getParameters().getId();
    GlusterGeoRepSession session = geoRepDb.getById(sessionId);
    GlusterVolumeEntity masterVolume = getGlusterVolumeDao().getById(session.getMasterVolumeId());
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeGeoRepConfigList, new GlusterVolumeGeoRepSessionVDSParameters(getUpServerId(masterVolume.getClusterId()), sessionId, masterVolume.getName()));
    getQueryReturnValue().setReturnValue((List<GlusterGeoRepSessionConfiguration>) returnValue.getReturnValue());
}
#method_after
@Override
protected void executeQueryCommand() {
    getQueryReturnValue().setReturnValue(getGeoRepDao().getGeoRepSessionConfig(getParameters().getId()));
}
#end_block

#method_before
@Override
protected void executeCommand() {
    GlusterGeoRepSession session = getGeoRepSession();
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.SetGlusterVolumeGeoRepConfigDefault, new GlusterVolumeGeoRepConfigVdsParameters(upServer.getId(), session.getMasterVolumeName(), session.getSlaveHostName(), session.getSlaveVolumeName(), getParameters().getConfigKey()));
    setSucceeded(returnValue.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_GEOREP_CONFIG_SET_DEFAULT_FAILED, returnValue.getVdsError().getMessage());
        return;
    } else {
        logAuditMessages(getParameters());
    }
}
#method_after
@Override
protected void executeCommand() {
    GlusterGeoRepSession session = getGeoRepSession();
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.SetGlusterVolumeGeoRepConfigDefault, new GlusterVolumeGeoRepConfigVdsParameters(upServer.getId(), session.getMasterVolumeName(), session.getSlaveHostName(), session.getSlaveVolumeName(), getParameters().getConfigKey()));
    setSucceeded(returnValue.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_GEOREP_CONFIG_SET_DEFAULT_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    setGlusterVolumeId(getGeoRepSession().getMasterVolumeId());
    return super.canDoAction();
}
#method_after
@Override
protected boolean canDoAction() {
    return super.canDoAction();
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    super.setActionMessageParameters();
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__RESET);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_GEOREP_CONFIG);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    setGlusterVolumeId(getGeoRepSession().getMasterVolumeId());
    return super.canDoAction();
}
#method_after
@Override
protected boolean canDoAction() {
    return super.canDoAction();
}
#end_block

#method_before
@Override
protected void executeCommand() {
    GlusterGeoRepSession session = getGeoRepSession();
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.SetGlusterVolumeGeoRepConfig, new GlusterVolumeGeoRepConfigVdsParameters(upServer.getId(), session.getMasterVolumeName(), session.getSlaveHostName(), session.getSlaveVolumeName(), getParameters().getConfigKey(), getParameters().getConfigValue()));
    setSucceeded(returnValue.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_GEOREP_CONFIG_SET_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#method_after
@Override
protected void executeCommand() {
    GlusterGeoRepSession session = getGeoRepSession();
    String configKey = getParameters().getConfigKey();
    String configValue = getParameters().getConfigValue();
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.SetGlusterVolumeGeoRepConfig, new GlusterVolumeGeoRepConfigVdsParameters(upServer.getId(), session.getMasterVolumeName(), session.getSlaveHostName(), session.getSlaveVolumeName(), configKey, configValue));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        GlusterGeoRepSessionConfiguration geoRepSessionConfig = new GlusterGeoRepSessionConfiguration();
        geoRepSessionConfig.setValue(configValue);
        geoRepSessionConfig.setKey(configKey);
        geoRepSessionConfig.setId(session.getId());
        getGlusterGeoRepDao().updateConfig(geoRepSessionConfig);
    } else {
        handleVdsError(AuditLogType.GLUSTER_GEOREP_CONFIG_SET_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    super.setActionMessageParameters();
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__SET);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_GEOREP_CONFIG);
    addCanDoActionMessageVariable("configName", getParameters().getConfigKey());
    addCanDoActionMessageVariable("geoRepSessionKey", getGeoRepSession().getSessionKey());
    addCanDoActionMessageVariable("configValue", getParameters().getConfigValue());
}
#end_block

#method_before
protected List<VdcActionParametersBase> getParameters() {
    return parameters;
}
#method_after
protected Set<VdcActionParametersBase> getParameters() {
    return parameters;
}
#end_block

#method_before
protected void initCommandsAndReturnValues(ArrayList<VdcReturnValueBase> returnValues) {
    VdcReturnValueBase returnValue;
    for (VdcActionParametersBase parameter : getParameters()) {
        parameter.setMultipleAction(true);
        returnValue = ExecutionHandler.evaluateCorrelationId(parameter);
        if (returnValue == null) {
            CommandBase<?> command = isInternal ? CommandsFactory.createCommand(actionType, parameter, commandContext.clone().withoutCompensationContext()) : CommandsFactory.createCommand(actionType, parameter);
            command.setInternalExecution(isInternal);
            getCommands().add(command);
        } else {
            returnValues.add(returnValue);
        }
    }
}
#method_after
private void initCommandsAndReturnValues(ArrayList<VdcReturnValueBase> returnValues) {
    VdcReturnValueBase returnValue;
    for (VdcActionParametersBase parameter : getParameters()) {
        parameter.setMultipleAction(true);
        returnValue = ExecutionHandler.evaluateCorrelationId(parameter);
        if (returnValue == null) {
            CommandBase<?> command = isInternal ? CommandsFactory.createCommand(actionType, parameter, commandContext.clone().withoutCompensationContext()) : CommandsFactory.createCommand(actionType, parameter);
            command.setInternalExecution(isInternal);
            getCommands().add(command);
        } else {
            returnValues.add(returnValue);
        }
    }
}
#end_block

#method_before
protected void invokeCommands(ArrayList<VdcReturnValueBase> returnValues) {
    if (canRunActions(returnValues)) {
        if (isWaitForResult) {
            invokeSyncCommands();
        } else {
            invokeCommands();
        }
    }
}
#method_after
private void invokeCommands(ArrayList<VdcReturnValueBase> returnValues) {
    if (canRunActions(returnValues)) {
        if (isWaitForResult) {
            invokeSyncCommands();
        } else {
            invokeCommands();
        }
    }
}
#end_block

#method_before
protected boolean canRunActions(ArrayList<VdcReturnValueBase> returnValues) {
    if (getCommands().size() == 1) {
        CorrelationIdTracker.setCorrelationId(getCommands().get(0).getCorrelationId());
        returnValues.add(getCommands().get(0).canDoActionOnly());
    } else {
        checkCanDoActionsAsynchronously(returnValues);
    }
    if (isRunOnlyIfAllCanDoPass) {
        for (VdcReturnValueBase value : returnValues) {
            if (!value.getCanDoAction()) {
                return false;
            }
        }
    }
    return true;
}
#method_after
private boolean canRunActions(ArrayList<VdcReturnValueBase> returnValues) {
    if (getCommands().size() == 1) {
        CorrelationIdTracker.setCorrelationId(getCommands().get(0).getCorrelationId());
        returnValues.add(getCommands().get(0).canDoActionOnly());
    } else {
        checkCanDoActionsAsynchronously(returnValues);
    }
    if (isRunOnlyIfAllCanDoPass) {
        for (VdcReturnValueBase value : returnValues) {
            if (!value.getCanDoAction()) {
                return false;
            }
        }
    }
    return true;
}
#end_block

#method_before
protected List<VdcActionParametersBase> getParameters() {
    return parameters;
}
#method_after
protected Set<VdcActionParametersBase> getParameters() {
    return parameters;
}
#end_block

#method_before
protected void invokeCommands(ArrayList<VdcReturnValueBase> returnValues) {
    if (canRunActions(returnValues)) {
        if (isWaitForResult) {
            invokeSyncCommands();
        } else {
            invokeCommands();
        }
    }
}
#method_after
private void invokeCommands(ArrayList<VdcReturnValueBase> returnValues) {
    if (canRunActions(returnValues)) {
        if (isWaitForResult) {
            invokeSyncCommands();
        } else {
            invokeCommands();
        }
    }
}
#end_block

#method_before
protected boolean canRunActions(ArrayList<VdcReturnValueBase> returnValues) {
    if (getCommands().size() == 1) {
        CorrelationIdTracker.setCorrelationId(getCommands().get(0).getCorrelationId());
        returnValues.add(getCommands().get(0).canDoActionOnly());
    } else {
        checkCanDoActionsAsynchronously(returnValues);
    }
    if (isRunOnlyIfAllCanDoPass) {
        for (VdcReturnValueBase value : returnValues) {
            if (!value.getCanDoAction()) {
                return false;
            }
        }
    }
    return true;
}
#method_after
private boolean canRunActions(ArrayList<VdcReturnValueBase> returnValues) {
    if (getCommands().size() == 1) {
        CorrelationIdTracker.setCorrelationId(getCommands().get(0).getCorrelationId());
        returnValues.add(getCommands().get(0).canDoActionOnly());
    } else {
        checkCanDoActionsAsynchronously(returnValues);
    }
    if (isRunOnlyIfAllCanDoPass) {
        for (VdcReturnValueBase value : returnValues) {
            if (!value.getCanDoAction()) {
                return false;
            }
        }
    }
    return true;
}
#end_block

#method_before
protected List<VdcActionParametersBase> getParameters() {
    return parameters;
}
#method_after
protected Set<VdcActionParametersBase> getParameters() {
    return parameters;
}
#end_block

#method_before
protected boolean canRunActions(ArrayList<VdcReturnValueBase> returnValues) {
    if (getCommands().size() == 1) {
        CorrelationIdTracker.setCorrelationId(getCommands().get(0).getCorrelationId());
        returnValues.add(getCommands().get(0).canDoActionOnly());
    } else {
        checkCanDoActionsAsynchronously(returnValues);
    }
    if (isRunOnlyIfAllCanDoPass) {
        for (VdcReturnValueBase value : returnValues) {
            if (!value.getCanDoAction()) {
                return false;
            }
        }
    }
    return true;
}
#method_after
private boolean canRunActions(ArrayList<VdcReturnValueBase> returnValues) {
    if (getCommands().size() == 1) {
        CorrelationIdTracker.setCorrelationId(getCommands().get(0).getCorrelationId());
        returnValues.add(getCommands().get(0).canDoActionOnly());
    } else {
        checkCanDoActionsAsynchronously(returnValues);
    }
    if (isRunOnlyIfAllCanDoPass) {
        for (VdcReturnValueBase value : returnValues) {
            if (!value.getCanDoAction()) {
                return false;
            }
        }
    }
    return true;
}
#end_block

#method_before
private void updateActionAvailability(GlusterVolumeEntity volumeEntity) {
    boolean allowStartSessionCommand = true;
    if (volumeEntity == null) {
        return;
    }
    getNewSessionCommand().setIsAvailable(volumeEntity == null);
    if (getSelectedItem() == null) {
        allowStartSessionCommand = false;
    } else {
        if (getSelectedItems().size() == 1) {
            GlusterGeoRepSession selectedSession = (GlusterGeoRepSession) getSelectedItem();
            allowStartSessionCommand = selectedSession.getStatus() == GeoRepSessionStatus.NOTSTARTED || selectedSession.getStatus() == GeoRepSessionStatus.STOPPED;
        }
    }
    getNewSessionCommand().setIsAvailable(true);
    getRemoveSessionCommand().setIsAvailable(false);
    getStartSessionCommand().setIsExecutionAllowed(allowStartSessionCommand);
    getStopSessionCommand().setIsAvailable(false);
    getSessionOptionsCommand().setIsAvailable(false);
    getViewSessionDetailsCommand().setIsAvailable(false);
}
#method_after
private void updateActionAvailability(GlusterVolumeEntity volumeEntity) {
    boolean allowStartSessionCommand = false;
    boolean allowStopSessionCommand = false;
    boolean allowResumeSessionCommand = false;
    boolean allowPauseSessionCommand = false;
    if (volumeEntity == null) {
        return;
    }
    if (getSelectedItems() != null && getSelectedItems().size() == 1) {
        GlusterGeoRepSession selectedSession = (GlusterGeoRepSession) getSelectedItem();
        GeoRepSessionStatus sessionStatus = selectedSession.getStatus();
        allowStartSessionCommand = sessionStatus == GeoRepSessionStatus.NOTSTARTED || sessionStatus == GeoRepSessionStatus.STOPPED;
        allowStopSessionCommand = !allowStartSessionCommand;
        allowResumeSessionCommand = sessionStatus == GeoRepSessionStatus.PAUSED;
        allowPauseSessionCommand = sessionStatus == GeoRepSessionStatus.ACTIVE || sessionStatus == GeoRepSessionStatus.INITIALIZING;
    }
    getNewSessionCommand().setIsAvailable(true);
    getRemoveSessionCommand().setIsAvailable(false);
    getStartSessionCommand().setIsExecutionAllowed(allowStartSessionCommand);
    getStopSessionCommand().setIsExecutionAllowed(allowStopSessionCommand);
    getPauseSessionCommand().setIsExecutionAllowed(allowPauseSessionCommand);
    getResumeSessionCommand().setIsExecutionAllowed(allowResumeSessionCommand);
    getSessionOptionsCommand().setIsExecutionAllowed(true);
    getViewSessionDetailsCommand().setIsAvailable(false);
    getRefreshSessionsCommand().setIsAvailable(true);
}
#end_block

#method_before
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command.equals(getNewSessionCommand())) {
    } else if (command.equals(getRemoveSessionCommand())) {
    } else if (command.equals(getStartSessionCommand())) {
        startGeoRepSession();
    } else if (command.equals(getStopSessionCommand())) {
    } else if (command.equals(getSessionOptionsCommand())) {
    } else if (command.equals(getViewSessionDetailsCommand())) {
    } else if (command.getName().equalsIgnoreCase("createSession")) {
        // $NON-NLS-1$
        setWindow(null);
    // Action to follow in next patch
    } else if (command.getName().equalsIgnoreCase("close")) {
        // $NON-NLS-1$
        setWindow(null);
    } else if (command.getName().equalsIgnoreCase("closeConfirmWindow")) {
        // $NON-NLS-1$
        setConfirmWindow(null);
    } else if (command.getName().equalsIgnoreCase("closeConfirmationWindow")) {
        // $NON-NLS-1$
        closeConfirmationWindow();
    } else if (command.getName().equalsIgnoreCase("onStartGeoRepSession")) {
        // $NON-NLS-1$
        onStartGeoRepSession();
    } else if (command.getName().equalsIgnoreCase("closeWindow")) {
        // $NON-NLS-1$
        closeWindow();
    }
}
#method_after
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command.equals(getRemoveSessionCommand())) {
    } else if (command.equals(getStartSessionCommand())) {
        startGeoRepSession();
    } else if (command.equals(getStopSessionCommand())) {
        stopGeoRepSession();
    } else if (command.equals(getPauseSessionCommand())) {
        pauseGeoRepSession();
    } else if (command.equals(getResumeSessionCommand())) {
        resumeGeoRepSession();
    } else if (command.equals(getSessionOptionsCommand())) {
    } else if (command.equals(getViewSessionDetailsCommand())) {
    } else if (command.equals(getRefreshSessionsCommand())) {
        refreshSessions();
    } else if (command.getName().equalsIgnoreCase("onStartGeoRepSession")) {
        // $NON-NLS-1$
        onGeoRepSessionAction(VdcActionType.StartGlusterVolumeGeoRep);
    } else if (command.getName().equalsIgnoreCase("onStopGeoRepSession")) {
        // $NON-NLS-1$
        onGeoRepSessionAction(VdcActionType.StopGeoRepSession);
    } else if (command.getName().equalsIgnoreCase("onPauseGeoRepSession")) {
        // $NON-NLS-1$
        onGeoRepSessionAction(VdcActionType.PauseGlusterVolumeGeoRepSession);
    } else if (command.getName().equalsIgnoreCase("onResumeGeoRepSession")) {
        // $NON-NLS-1$
        onGeoRepSessionAction(VdcActionType.ResumeGeoRepSession);
    } else if (command.getName().equalsIgnoreCase("closeWindow")) {
        // $NON-NLS-1$
        closeWindow();
    }
}
#end_block

#method_before
private void startGeoRepSession() {
    GlusterGeoRepSession selectedSession = (GlusterGeoRepSession) getSelectedItem();
    if (selectedSession == null) {
        return;
    }
    GlusterVolumeGeoRepActionConfirmationModel cModel = new GlusterVolumeGeoRepActionConfirmationModel();
    cModel.setTitle(constants.geoReplicationStartTitle());
    cModel.setHelpTag(HelpTag.volume_geo_rep_start_confirmation);
    // $NON-NLS-1$
    cModel.setHashName("volume_geo_rep_start_confirmation");
    cModel.setMessage(constants.geoRepStartConfirmation());
    cModel.setForceLabel(constants.geoRepStartForce());
    cModel.getMasterVolume().setEntity(selectedSession.getMasterVolumeName() == null ? constants.notAvailableLabel() : selectedSession.getMasterVolumeName());
    cModel.getSlaveVolume().setEntity(selectedSession.getSlaveVolumeName());
    cModel.getSlaveHost().setEntity(selectedSession.getSlaveHostName());
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("onStartGeoRepSession", this);
    okCommand.setTitle(constants.ok());
    okCommand.setIsDefault(true);
    cModel.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("closeWindow", this);
    cancelCommand.setTitle(constants.cancel());
    cancelCommand.setIsCancel(true);
    cModel.getCommands().add(cancelCommand);
    setWindow(cModel);
}
#method_after
private void startGeoRepSession() {
    // $NON-NLS-1$//$NON-NLS-2$
    performGeoRepAction("onStartGeoRepSession", constants.geoReplicationStartTitle(), HelpTag.volume_geo_rep_start_confirmation, "volume_geo_rep_start_confirmation", constants.startGeoRep(), VdcActionType.StartGlusterVolumeGeoRep, constants.startGeoRepProgressText());
}
#end_block

#method_before
// Main List Model
@Provides
@Singleton
public MainModelProvider<GlusterVolumeEntity, VolumeListModel> getVolumeListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VolumePopupPresenterWidget> popupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider, final Provider<VolumeRebalanceStatusPopupPresenterWidget> rebalanceStatusPopupProvider, final Provider<VolumeProfileStatisticsPopupPresenterWidget> volumeProfileStatsPopupProvider) {
    return new MainTabModelProvider<GlusterVolumeEntity, VolumeListModel>(eventBus, defaultConfirmPopupProvider, VolumeListModel.class) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getNewVolumeCommand()) {
                return popupProvider.get();
            } else if (lastExecutedCommand == getModel().getStatusRebalanceCommand() || lastExecutedCommand.getName().equals("onStopRebalance")) {
                // $NON-NLS-1$
                return rebalanceStatusPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getShowVolumeProfileDetailsCommand() || lastExecutedCommand.getName().equals("showProfileDetails")) {
                // $NON-NLS-1$
                return volumeProfileStatsPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VolumeListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getStopCommand() || lastExecutedCommand == getModel().getRemoveVolumeCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
}
#method_after
// Main List Model
@Provides
@Singleton
public MainModelProvider<GlusterVolumeEntity, VolumeListModel> getVolumeListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VolumePopupPresenterWidget> popupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider, final Provider<VolumeRebalanceStatusPopupPresenterWidget> rebalanceStatusPopupProvider, final Provider<VolumeProfileStatisticsPopupPresenterWidget> volumeProfileStatsPopupProvider, final Provider<VolumeListModel> modelProvider, final Provider<CommonModel> commonModelProvider) {
    MainTabModelProvider<GlusterVolumeEntity, VolumeListModel> result = new MainTabModelProvider<GlusterVolumeEntity, VolumeListModel>(eventBus, defaultConfirmPopupProvider, commonModelProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getNewVolumeCommand()) {
                return popupProvider.get();
            } else if (lastExecutedCommand == getModel().getStatusRebalanceCommand() || lastExecutedCommand.getName().equals("onStopRebalance")) {
                // $NON-NLS-1$
                return rebalanceStatusPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getShowVolumeProfileDetailsCommand() || lastExecutedCommand.getName().equals("showProfileDetails")) {
                // $NON-NLS-1$
                return volumeProfileStatsPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VolumeListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getStopCommand() || lastExecutedCommand == getModel().getRemoveVolumeCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Provides
@Singleton
public SearchableDetailModelProvider<GlusterBrickEntity, VolumeListModel, VolumeBrickListModel> getVolumeBrickListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<AddBrickPopupPresenterWidget> addBrickPopupProvider, final Provider<RemoveBrickPopupPresenterWidget> removeConfirmPopupProvider, final Provider<RemoveBrickPopupPresenterWidget> removeBrickPopupProvider, final Provider<RemoveBrickStatusPopupPresenterWidget> removeBricksStatusPopupProvider, final Provider<ReplaceBrickPopupPresenterWidget> replaceBrickPopupProvider, final Provider<BrickAdvancedDetailsPopupPresenterWidget> brickDetailsPopupProvider) {
    return new SearchableDetailTabModelProvider<GlusterBrickEntity, VolumeListModel, VolumeBrickListModel>(eventBus, defaultConfirmPopupProvider, VolumeListModel.class, VolumeBrickListModel.class) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeBrickListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getAddBricksCommand()) {
                return addBrickPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getRemoveBricksCommand()) {
                return removeBrickPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getStatusRemoveBricksCommand()) {
                return removeBricksStatusPopupProvider.get();
            } else if (lastExecutedCommand.getName().equals("OnStopRemoveBricks")) {
                // $NON-NLS-1$
                return removeBricksStatusPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getReplaceBrickCommand()) {
                return replaceBrickPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getBrickAdvancedDetailsCommand()) {
                return brickDetailsPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VolumeBrickListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveBricksCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
}
#method_after
@Provides
@Singleton
public SearchableDetailModelProvider<GlusterBrickEntity, VolumeListModel, VolumeBrickListModel> getVolumeBrickListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<AddBrickPopupPresenterWidget> addBrickPopupProvider, final Provider<RemoveBrickPopupPresenterWidget> removeConfirmPopupProvider, final Provider<RemoveBrickPopupPresenterWidget> removeBrickPopupProvider, final Provider<RemoveBrickStatusPopupPresenterWidget> removeBricksStatusPopupProvider, final Provider<ReplaceBrickPopupPresenterWidget> replaceBrickPopupProvider, final Provider<BrickAdvancedDetailsPopupPresenterWidget> brickDetailsPopupProvider, final Provider<VolumeListModel> mainModelProvider, final Provider<VolumeBrickListModel> modelProvider) {
    SearchableDetailTabModelProvider<GlusterBrickEntity, VolumeListModel, VolumeBrickListModel> result = new SearchableDetailTabModelProvider<GlusterBrickEntity, VolumeListModel, VolumeBrickListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeBrickListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getAddBricksCommand()) {
                return addBrickPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getRemoveBricksCommand()) {
                return removeBrickPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getStatusRemoveBricksCommand()) {
                return removeBricksStatusPopupProvider.get();
            } else if (lastExecutedCommand.getName().equals("OnStopRemoveBricks")) {
                // $NON-NLS-1$
                return removeBricksStatusPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getReplaceBrickCommand()) {
                return replaceBrickPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getBrickAdvancedDetailsCommand()) {
                return brickDetailsPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(VolumeBrickListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveBricksCommand()) {
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Provides
@Singleton
public SearchableDetailModelProvider<GlusterVolumeOptionEntity, VolumeListModel, VolumeParameterListModel> getVolumeParameterListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VolumeParameterPopupPresenterWidget> addParameterPopupProvider, final Provider<VolumeParameterPopupPresenterWidget> editParameterPopupProvider) {
    return new SearchableDetailTabModelProvider<GlusterVolumeOptionEntity, VolumeListModel, VolumeParameterListModel>(eventBus, defaultConfirmPopupProvider, VolumeListModel.class, VolumeParameterListModel.class) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeParameterListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getAddParameterCommand()) {
                return addParameterPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getEditParameterCommand()) {
                return editParameterPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }
    };
}
#method_after
@Provides
@Singleton
public SearchableDetailModelProvider<GlusterVolumeOptionEntity, VolumeListModel, VolumeParameterListModel> getVolumeParameterListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<VolumeParameterPopupPresenterWidget> addParameterPopupProvider, final Provider<VolumeParameterPopupPresenterWidget> editParameterPopupProvider, final Provider<VolumeListModel> mainModelProvider, final Provider<VolumeParameterListModel> modelProvider) {
    SearchableDetailTabModelProvider<GlusterVolumeOptionEntity, VolumeListModel, VolumeParameterListModel> result = new SearchableDetailTabModelProvider<GlusterVolumeOptionEntity, VolumeListModel, VolumeParameterListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeParameterListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getAddParameterCommand()) {
                return addParameterPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getEditParameterCommand()) {
                return editParameterPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Provides
@Singleton
public SearchableDetailModelProvider<AuditLog, VolumeListModel, VolumeEventListModel> getVolumeEventListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<EventPopupPresenterWidget> eventPopupProvider) {
    return new SearchableDetailTabModelProvider<AuditLog, VolumeListModel, VolumeEventListModel>(eventBus, defaultConfirmPopupProvider, VolumeListModel.class, VolumeEventListModel.class) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeEventListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand.equals(getModel().getDetailsCommand())) {
                return eventPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }
    };
}
#method_after
@Provides
@Singleton
public SearchableDetailModelProvider<AuditLog, VolumeListModel, VolumeEventListModel> getVolumeEventListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<EventPopupPresenterWidget> eventPopupProvider, final Provider<VolumeListModel> mainModelProvider, final Provider<VolumeEventListModel> modelProvider) {
    SearchableDetailTabModelProvider<AuditLog, VolumeListModel, VolumeEventListModel> result = new SearchableDetailTabModelProvider<AuditLog, VolumeListModel, VolumeEventListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeEventListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand.equals(getModel().getDetailsCommand())) {
                return eventPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Provides
@Singleton
public SearchableDetailModelProvider<GlusterGeoRepSession, VolumeListModel, VolumeGeoRepListModel> getVolumeGeoRepListProvider(EventBus eventBus, Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget> geoRepActionConfirmationPopupProvider) {
    return new SearchableDetailTabModelProvider<GlusterGeoRepSession, VolumeListModel, VolumeGeoRepListModel>(eventBus, defaultConfirmPopupProvider, VolumeListModel.class, VolumeGeoRepListModel.class) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeGeoRepListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getStartSessionCommand()) {
                return geoRepActionConfirmationPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
}
#method_after
@Provides
@Singleton
public SearchableDetailModelProvider<GlusterGeoRepSession, VolumeListModel, VolumeGeoRepListModel> getVolumeGeoRepListProvider(EventBus eventBus, final Provider<DefaultConfirmationPopupPresenterWidget> defaultConfirmPopupProvider, final Provider<GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget> geoRepActionConfirmationPopupProvider, final Provider<VolumeListModel> mainModelProvider, final Provider<VolumeGeoRepListModel> modelProvider) {
    SearchableDetailTabModelProvider<GlusterGeoRepSession, VolumeListModel, VolumeGeoRepListModel> result = new SearchableDetailTabModelProvider<GlusterGeoRepSession, VolumeListModel, VolumeGeoRepListModel>(eventBus, defaultConfirmPopupProvider) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(VolumeGeoRepListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getStartSessionCommand() || lastExecutedCommand == getModel().getStopSessionCommand() || lastExecutedCommand == getModel().getPauseSessionCommand() || lastExecutedCommand == getModel().getResumeSessionCommand()) {
                return geoRepActionConfirmationPopupProvider.get();
            } else {
                return defaultConfirmPopupProvider.get();
            }
        }
    };
    result.setMainModelProvider(mainModelProvider);
    result.setModelProvider(modelProvider);
    return result;
}
#end_block

#method_before
@Override
protected void configure() {
}
#method_after
@Override
protected void configure() {
    bind(VolumeListModel.class).in(Singleton.class);
    bind(VolumeGeneralModel.class).in(Singleton.class);
    bind(VolumeBrickListModel.class).in(Singleton.class);
    bind(VolumeParameterListModel.class).in(Singleton.class);
    bind(VolumeEventListModel.class).in(Singleton.class);
    bind(VolumeGeoRepListModel.class).in(Singleton.class);
    bind(GlusterVolumeSnapshotListModel.class).in(Singleton.class);
    bind(new TypeLiteral<PermissionListModel<VolumeListModel>>() {
    }).in(Singleton.class);
    // Form Detail Models
    bind(new TypeLiteral<DetailModelProvider<VolumeListModel, VolumeGeneralModel>>() {
    }).to(new TypeLiteral<DetailTabModelProvider<VolumeListModel, VolumeGeneralModel>>() {
    }).in(Singleton.class);
    // Permission Detail Model
    bind(new TypeLiteral<SearchableDetailModelProvider<Permissions, VolumeListModel, PermissionListModel<VolumeListModel>>>() {
    }).to(new TypeLiteral<PermissionModelProvider<VolumeListModel>>() {
    }).in(Singleton.class);
}
#end_block

#method_before
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    getTable().addColumn(new TextColumnWithTooltip<GlusterGeoRepSession>() {

        @Override
        public String getValue(GlusterGeoRepSession object) {
            return object.getSlaveHostName();
        }
    }, constants.volumeSubTabGeoRepSlaveClusterHostColumn(), // $NON-NLS-1$
    "220px");
    getTable().addColumn(new TextColumnWithTooltip<GlusterGeoRepSession>() {

        @Override
        public String getValue(GlusterGeoRepSession object) {
            return object.getSlaveVolumeName();
        }
    }, constants.volumeSubTabGeoRepSlaveVolumeColumn(), // $NON-NLS-1$
    "220px");
    getTable().addColumn(new TextColumnWithTooltip<GlusterGeoRepSession>() {

        @Override
        public String getValue(GlusterGeoRepSession object) {
            return object.getStatus().toString();
        }
    }, constants.volumeSubTabGeoRepStatusColumn(), // $NON-NLS-1$
    "150px");
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.newGeoRepSession()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getNewSessionCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.removeGeoRepSession()) {

        @Override
        protected UICommand resolveCommand() {
            return null;
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.startGeoRepSession()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getStartSessionCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.stopGeoRepSession()) {

        @Override
        protected UICommand resolveCommand() {
            return null;
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.geoRepSessionsOptions()) {

        @Override
        protected UICommand resolveCommand() {
            return null;
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.geoRepSessionDetails()) {

        @Override
        protected UICommand resolveCommand() {
            return null;
        }
    });
}
#method_after
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    getTable().addColumn(new AbstractTextColumnWithTooltip<GlusterGeoRepSession>() {

        @Override
        public String getValue(GlusterGeoRepSession object) {
            return object.getSlaveHostName();
        }
    }, constants.volumeSubTabGeoRepSlaveClusterHostColumn(), // $NON-NLS-1$
    "220px");
    getTable().addColumn(new AbstractTextColumnWithTooltip<GlusterGeoRepSession>() {

        @Override
        public String getValue(GlusterGeoRepSession object) {
            return object.getSlaveVolumeName();
        }
    }, constants.volumeSubTabGeoRepSlaveVolumeColumn(), // $NON-NLS-1$
    "220px");
    getTable().addColumn(new AbstractTextColumnWithTooltip<GlusterGeoRepSession>() {

        @Override
        public String getValue(GlusterGeoRepSession object) {
            return object.getStatus().toString();
        }
    }, constants.volumeSubTabGeoRepStatusColumn(), // $NON-NLS-1$
    "150px");
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.newGeoRepSession()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getNewSessionCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.removeGeoRepSession()) {

        @Override
        protected UICommand resolveCommand() {
            return null;
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.startGeoRepSession()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getStartSessionCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.stopGeoRepSession()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getStopSessionCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.pauseGeoRepSession()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getPauseSessionCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.resumeGeoRepSession()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getResumeSessionCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.geoRepSessionsOptions()) {

        @Override
        protected UICommand resolveCommand() {
            return null;
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.geoRepSessionDetails()) {

        @Override
        protected UICommand resolveCommand() {
            return null;
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterGeoRepSession>(constants.geoRepSessionSync()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRefreshSessionsCommand();
        }
    });
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    Guid vmTemplateId = getVmTemplateId();
    VmTemplate template = getVmTemplate();
    if (!super.canDoAction()) {
        return false;
    }
    boolean isInstanceType = getVmTemplate().getTemplateType() == VmEntityType.INSTANCE_TYPE;
    if (getVdsGroup() == null && !isInstanceType) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY);
        return false;
    }
    // check template exists
    if (!validate(templateExists())) {
        return false;
    }
    // check not blank template
    if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(vmTemplateId)) {
        return failCanDoAction(VdcBllMessages.VMT_CANNOT_REMOVE_BLANK_TEMPLATE);
    }
    // check storage pool valid
    if (!isInstanceType && !validate(new StoragePoolValidator(getStoragePool()).isUp())) {
        return false;
    }
    // check if delete protected
    if (template.isDeleteProtected()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DELETE_PROTECTION_ENABLED);
    }
    if (!isInstanceType) {
        fetchImageTemplates();
    }
    Set<Guid> allDomainsList = getStorageDomainsByDisks(imageTemplates, true);
    // populate all the domains of the template
    getParameters().setStorageDomainsList(new ArrayList<Guid>(allDomainsList));
    // check template images for selected domains
    ArrayList<String> canDoActionMessages = getReturnValue().getCanDoActionMessages();
    for (Guid domainId : getParameters().getStorageDomainsList()) {
        if (!isVmTemplateImagesReady(getVmTemplate(), domainId, canDoActionMessages, getParameters().getCheckDisksExists(), true, false, true, storageToDisksMap.get(domainId))) {
            return false;
        }
    }
    // check no vms from this template on selected domains
    List<VM> vms = getVmDAO().getAllWithTemplate(vmTemplateId);
    List<String> problematicVmNames = new ArrayList<String>();
    for (VM vm : vms) {
        problematicVmNames.add(vm.getName());
    }
    if (!problematicVmNames.isEmpty()) {
        return failCanDoAction(VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM, String.format("$vmsList %1$s", StringUtils.join(problematicVmNames, ",")));
    }
    // for base templates, make sure it has no versions that need to be removed first
    if (vmTemplateId.equals(template.getBaseTemplateId())) {
        List<VmTemplate> templateVersions = getVmTemplateDAO().getTemplateVersionsForBaseTemplate(vmTemplateId);
        if (!templateVersions.isEmpty()) {
            List<String> templateVersionsNames = new ArrayList<>();
            for (VmTemplate version : templateVersions) {
                templateVersionsNames.add(version.getName());
            }
            return failCanDoAction(VdcBllMessages.VMT_CANNOT_REMOVE_BASE_WITH_VERSIONS, String.format("$versionsList %1$s", StringUtils.join(templateVersionsNames, ",")));
        }
    }
    if (!isInstanceType && !validate(checkNoDisksBasedOnTemplateDisks())) {
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    Guid vmTemplateId = getVmTemplateId();
    VmTemplate template = getVmTemplate();
    if (!super.canDoAction()) {
        return false;
    }
    boolean isInstanceType = getVmTemplate().getTemplateType() == VmEntityType.INSTANCE_TYPE;
    if (getVdsGroup() == null && !isInstanceType) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY);
        return false;
    }
    // check template exists
    if (!validate(templateExists())) {
        return false;
    }
    // check not blank template
    if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(vmTemplateId)) {
        return failCanDoAction(VdcBllMessages.VMT_CANNOT_REMOVE_BLANK_TEMPLATE);
    }
    // check storage pool valid
    if (!isInstanceType && !validate(new StoragePoolValidator(getStoragePool()).isUp())) {
        return false;
    }
    // check if delete protected
    if (template.isDeleteProtected()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DELETE_PROTECTION_ENABLED);
    }
    if (!isInstanceType) {
        fetchImageTemplates();
    }
    // populate all the domains of the template
    Set<Guid> allDomainsList = getStorageDomainsByDisks(imageTemplates, true);
    getParameters().setStorageDomainsList(new ArrayList<>(allDomainsList));
    // check template images for selected domains
    ArrayList<String> canDoActionMessages = getReturnValue().getCanDoActionMessages();
    for (Guid domainId : getParameters().getStorageDomainsList()) {
        if (!isVmTemplateImagesReady(getVmTemplate(), domainId, canDoActionMessages, getParameters().getCheckDisksExists(), true, false, true, storageToDisksMap.get(domainId))) {
            return false;
        }
    }
    // check no vms from this template on selected domains
    List<VM> vms = getVmDAO().getAllWithTemplate(vmTemplateId);
    List<String> problematicVmNames = new ArrayList<String>();
    for (VM vm : vms) {
        problematicVmNames.add(vm.getName());
    }
    if (!problematicVmNames.isEmpty()) {
        return failCanDoAction(VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM, String.format("$vmsList %1$s", StringUtils.join(problematicVmNames, ",")));
    }
    // for base templates, make sure it has no versions that need to be removed first
    if (vmTemplateId.equals(template.getBaseTemplateId())) {
        List<VmTemplate> templateVersions = getVmTemplateDAO().getTemplateVersionsForBaseTemplate(vmTemplateId);
        if (!templateVersions.isEmpty()) {
            List<String> templateVersionsNames = new ArrayList<>();
            for (VmTemplate version : templateVersions) {
                templateVersionsNames.add(version.getName());
            }
            return failCanDoAction(VdcBllMessages.VMT_CANNOT_REMOVE_BASE_WITH_VERSIONS, String.format("$versionsList %1$s", StringUtils.join(templateVersionsNames, ",")));
        }
    }
    if (!isInstanceType && !validate(checkNoDisksBasedOnTemplateDisks())) {
        return false;
    }
    return true;
}
#end_block

#method_before
private boolean internalCanDoAction() {
    boolean returnValue = false;
    try {
        Transaction transaction = TransactionSupport.suspend();
        try {
            returnValue = isUserAuthorizedToRunAction() && isBackwardsCompatible() && validateInputs() && acquireLock() && canDoAction() && internalValidateAndSetQuota();
            if (!returnValue && getReturnValue().getCanDoActionMessages().size() > 0) {
                log.warn("CanDoAction of action '{}' failed for user {}. Reasons: {}", getActionType(), getUserName(), StringUtils.join(getReturnValue().getCanDoActionMessages(), ','));
            }
        } finally {
            TransactionSupport.resume(transaction);
        }
    } catch (DataAccessException dataAccessEx) {
        log.error("Data access error during CanDoActionFailure.", dataAccessEx);
        addCanDoActionMessage(VdcBllMessages.CAN_DO_ACTION_DATABASE_CONNECTION_FAILURE);
    } catch (RuntimeException ex) {
        log.error("Error during CanDoActionFailure.", ex);
        addCanDoActionMessage(VdcBllMessages.CAN_DO_ACTION_GENERAL_FAILURE);
    } finally {
        if (!returnValue) {
            freeLock();
        }
    }
    return returnValue;
}
#method_after
private boolean internalCanDoAction() {
    boolean returnValue = false;
    try {
        Transaction transaction = null;
        if (!isCanDoActionSupportsTransaction()) {
            transaction = TransactionSupport.suspend();
        }
        try {
            returnValue = isUserAuthorizedToRunAction() && isBackwardsCompatible() && validateInputs() && acquireLock() && canDoAction() && internalValidateAndSetQuota();
            if (!returnValue && getReturnValue().getCanDoActionMessages().size() > 0) {
                log.warn("CanDoAction of action '{}' failed for user {}. Reasons: {}", getActionType(), getUserName(), StringUtils.join(getReturnValue().getCanDoActionMessages(), ','));
            }
        } finally {
            if (transaction != null) {
                TransactionSupport.resume(transaction);
            }
        }
    } catch (DataAccessException dataAccessEx) {
        log.error("Data access error during CanDoActionFailure.", dataAccessEx);
        addCanDoActionMessage(VdcBllMessages.CAN_DO_ACTION_DATABASE_CONNECTION_FAILURE);
    } catch (RuntimeException ex) {
        log.error("Error during CanDoActionFailure.", ex);
        addCanDoActionMessage(VdcBllMessages.CAN_DO_ACTION_GENERAL_FAILURE);
    } finally {
        if (!returnValue) {
            freeLock();
        }
    }
    return returnValue;
}
#end_block

#method_before
final protected boolean checkSinglePermission(PermissionSubject permSubject, Collection<String> messages) {
    final Guid objectId = permSubject.getObjectId();
    final VdcObjectType objectType = permSubject.getObjectType();
    final ActionGroup objectActionGroup = permSubject.getActionGroup();
    // if objectId is null we can't check permission
    if (objectId == null) {
        if (log.isDebugEnabled()) {
            log.debug("The object to check is null for action '{}'.", getActionType());
        }
        messages.add(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION.name());
        return false;
    }
    // Check that an action group is defined for this action;
    if (objectActionGroup == null) {
        if (log.isDebugEnabled()) {
            log.debug("No action group is defined for action '{}'.", getActionType());
        }
        return false;
    }
    // Check the authorization:
    if (!checkUserAuthorization(getCurrentUser().getId(), objectActionGroup, objectId, objectType)) {
        messages.add(permSubject.getMessage().name());
        return false;
    }
    return true;
}
#method_after
final public boolean checkSinglePermission(PermissionSubject permSubject, Collection<String> messages) {
    final Guid objectId = permSubject.getObjectId();
    final VdcObjectType objectType = permSubject.getObjectType();
    final ActionGroup objectActionGroup = permSubject.getActionGroup();
    // if objectId is null we can't check permission
    if (objectId == null) {
        if (log.isDebugEnabled()) {
            log.debug("The object to check is null for action '{}'.", getActionType());
        }
        messages.add(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION.name());
        return false;
    }
    // Check that an action group is defined for this action;
    if (objectActionGroup == null) {
        if (log.isDebugEnabled()) {
            log.debug("No action group is defined for action '{}'.", getActionType());
        }
        return false;
    }
    // Check the authorization:
    if (!checkUserAuthorization(getCurrentUser().getId(), objectActionGroup, objectId, objectType)) {
        messages.add(permSubject.getMessage().name());
        return false;
    }
    return true;
}
#end_block

#method_before
public static Collection<ExtMap> queryPrincipalRecords(final ExtensionProxy extension, final String namespace, final ExtMap filter, boolean groupsResolving, boolean groupsResolvingRecursive) {
    ExtMap inputMap = new ExtMap().mput(Authz.InvokeKeys.QUERY_ENTITY, Authz.QueryEntity.PRINCIPAL).mput(Authz.InvokeKeys.QUERY_FLAGS, queryFlagValue(groupsResolving, groupsResolvingRecursive)).mput(Authz.InvokeKeys.QUERY_FILTER, filter).mput(Authz.InvokeKeys.NAMESPACE, namespace);
    return populatePrincipalRecords(extension, namespace, inputMap);
}
#method_after
public static Collection<ExtMap> queryPrincipalRecords(final ExtensionProxy extension, final String namespace, final ExtMap filter, boolean groupsResolving, boolean groupsResolvingRecursive) {
    ExtMap inputMap = new ExtMap().mput(Authz.InvokeKeys.QUERY_ENTITY, Authz.QueryEntity.PRINCIPAL).mput(Authz.InvokeKeys.QUERY_FLAGS, queryFlagValue(groupsResolving, groupsResolvingRecursive)).mput(Authz.InvokeKeys.QUERY_FILTER, filter).mput(Authz.InvokeKeys.NAMESPACE, namespace);
    return populateRecords(extension, namespace, inputMap);
}
#end_block

#method_before
public static Collection<ExtMap> queryGroupRecords(final ExtensionProxy extension, final String namespace, final ExtMap filter, boolean groupsResolving, boolean groupsResolvingRecursive) {
    ExtMap inputMap = new ExtMap().mput(Authz.InvokeKeys.QUERY_ENTITY, Authz.QueryEntity.GROUP).mput(Authz.InvokeKeys.QUERY_FLAGS, queryFlagValue(groupsResolving, groupsResolvingRecursive)).mput(Authz.InvokeKeys.QUERY_FILTER, filter).mput(Authz.InvokeKeys.NAMESPACE, namespace);
    return populateGroups(extension, namespace, inputMap);
}
#method_after
public static Collection<ExtMap> queryGroupRecords(final ExtensionProxy extension, final String namespace, final ExtMap filter, boolean groupsResolving, boolean groupsResolvingRecursive) {
    ExtMap inputMap = new ExtMap().mput(Authz.InvokeKeys.QUERY_ENTITY, Authz.QueryEntity.GROUP).mput(Authz.InvokeKeys.QUERY_FLAGS, queryFlagValue(groupsResolving, groupsResolvingRecursive)).mput(Authz.InvokeKeys.QUERY_FILTER, filter).mput(Authz.InvokeKeys.NAMESPACE, namespace);
    return populateRecords(extension, namespace, inputMap);
}
#end_block

#method_before
public static DbFacade getInstance() {
    return DbFacadeLocator.getDbFacade();
}
#method_after
public static DbFacade getInstance() {
    return instance;
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotSchedule mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterVolumeSnapshotSchedule schedule = new GlusterVolumeSnapshotSchedule();
    schedule.setClusterId(getGuidDefaultEmpty(rs, "cluster_id"));
    schedule.setVolumeId(getGuidDefaultEmpty(rs, "volume_id"));
    schedule.setJobId(getGuidDefaultEmpty(rs, "job_id"));
    schedule.setRecurrence(GlusterVolumeSnapshotScheduleRecurrence.from(rs.getString("recurrence")));
    schedule.setInterval(rs.getInt("interval"));
    schedule.setStartDate(rs.getTimestamp("start_date") == null ? null : new Date(rs.getTimestamp("start_date").getTime()));
    schedule.setExecutionTime(rs.getTime("execution_time"));
    schedule.setDays(rs.getString("days"));
    schedule.setEndByDate(rs.getTimestamp("end_by"));
    return schedule;
}
#method_after
@Override
public GlusterVolumeSnapshotSchedule mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterVolumeSnapshotSchedule schedule = new GlusterVolumeSnapshotSchedule();
    schedule.setClusterId(getGuidDefaultEmpty(rs, "cluster_id"));
    schedule.setVolumeId(getGuidDefaultEmpty(rs, "volume_id"));
    schedule.setJobId(rs.getString("job_id"));
    schedule.setSnapshotNamePrefix(rs.getString("snapshot_name_prefix"));
    schedule.setSnapshotDescription(rs.getString("snapshot_description"));
    schedule.setRecurrence(GlusterVolumeSnapshotScheduleRecurrence.from(rs.getString("recurrence")));
    schedule.setTimeZone(rs.getString("time_zone"));
    schedule.setInterval(rs.getInt("interval"));
    schedule.setStartDate(rs.getTimestamp("start_date") == null ? null : new Date(rs.getTimestamp("start_date").getTime()));
    schedule.setExecutionTime(rs.getTime("execution_time"));
    schedule.setDays(rs.getString("days"));
    schedule.setEndByDate(rs.getTimestamp("end_by"));
    return schedule;
}
#end_block

#method_before
protected MapSqlParameterSource createFullParameterMapper(GlusterVolumeSnapshotSchedule schedule) {
    return getCustomMapSqlParameterSource().addValue("volume_id", schedule.getVolumeId()).addValue("job_id", schedule.getJobId()).addValue("recurrence", schedule.getRecurrence().toString()).addValue("interval", schedule.getInterval()).addValue("start_date", schedule.getStartDate()).addValue("execution_time", schedule.getExecutionTime()).addValue("days", schedule.getDays()).addValue("end_by", schedule.getEndByDate());
}
#method_after
protected MapSqlParameterSource createFullParameterMapper(GlusterVolumeSnapshotSchedule schedule) {
    return getCustomMapSqlParameterSource().addValue("volume_id", schedule.getVolumeId()).addValue("job_id", schedule.getJobId()).addValue("snapshot_name_prefix", schedule.getSnapshotNamePrefix()).addValue("snapshot_description", schedule.getSnapshotDescription()).addValue("recurrence", schedule.getRecurrence().toString()).addValue("time_zone", schedule.getTimeZone()).addValue("interval", schedule.getInterval()).addValue("start_date", schedule.getStartDate()).addValue("execution_time", schedule.getExecutionTime()).addValue("days", schedule.getDays()).addValue("end_by", schedule.getEndByDate());
}
#end_block

#method_before
private GlusterVolumeSnapshotSchedule insertSnapshotSchedule() {
    GlusterVolumeSnapshotSchedule schedule = new GlusterVolumeSnapshotSchedule();
    schedule.setClusterId(CLUSTER_ID);
    schedule.setVolumeId(VOLUME_ID_2);
    schedule.setJobId(Guid.newGuid());
    schedule.setInterval(0);
    schedule.setRecurrence(GlusterVolumeSnapshotScheduleRecurrence.DAILY);
    schedule.setExecutionTime(new Time(10, 30, 0));
    schedule.setEndByDate(null);
    dao.save(schedule);
    return schedule;
}
#method_after
private GlusterVolumeSnapshotSchedule insertSnapshotSchedule() {
    GlusterVolumeSnapshotSchedule schedule = new GlusterVolumeSnapshotSchedule();
    schedule.setClusterId(CLUSTER_ID);
    schedule.setVolumeId(VOLUME_ID_2);
    schedule.setJobId("test_job_id");
    schedule.setSnapshotNamePrefix("prefix");
    schedule.setSnapshotDescription("desc");
    schedule.setInterval(0);
    schedule.setRecurrence(GlusterVolumeSnapshotScheduleRecurrence.DAILY);
    schedule.setTimeZone("Asia/Calcutta");
    schedule.setExecutionTime(new Time(10, 30, 0));
    schedule.setEndByDate(null);
    dao.save(schedule);
    return schedule;
}
#end_block

#method_before
private String notLocalizedKey(Enum<?> key, MissingResourceException e) {
    // $NON-NLS-1$
    String logString = "Missing Enum resource '" + key + "'.";
    if (e != null) {
        logString += e.getLocalizedMessage();
    }
    logger.info(logString);
    return key.name();
}
#method_after
private String notLocalizedKey(Enum<?> key, MissingResourceException e) {
    // $NON-NLS-1$
    String logString = "Missing Enum resource '" + key + "'.";
    if (e != null) {
        logString += " " + e.getLocalizedMessage();
    }
    logger.warning(logString);
    return key.name();
}
#end_block

#method_before
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindPresenterWidget(LoginFormPresenterWidget.class, LoginFormPresenterWidget.ViewDef.class, LoginFormView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    bindPresenterWidget(ManagePolicyUnitPopupPresenterWidget.class, ManagePolicyUnitPopupPresenterWidget.ViewDef.class, ManagePolicyUnitPopupView.class);
    bindPresenterWidget(SharedMacPoolPopupPresenterWidget.class, SharedMacPoolPopupPresenterWidget.ViewDef.class, SharedMacPoolPopupView.class);
    bindPresenterWidget(AffinityGroupPopupPresenterWidget.class, AffinityGroupPopupPresenterWidget.ViewDef.class, AffinityGroupPopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabNetworkPresenter.class, MainTabNetworkPresenter.ViewDef.class, MainTabNetworkView.class, MainTabNetworkPresenter.ProxyDef.class);
    bindPresenter(MainTabVnicProfilePresenter.class, MainTabVnicProfilePresenter.ViewDef.class, MainTabVnicProfileView.class, MainTabVnicProfilePresenter.ProxyDef.class);
    bindPresenter(MainTabProviderPresenter.class, MainTabProviderPresenter.ViewDef.class, MainTabProviderView.class, MainTabProviderPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(DataCenterQosSubTabPanelPresenter.class, DataCenterQosSubTabPanelPresenter.ViewDef.class, DataCenterQosSubTabPanelView.class, DataCenterQosSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterIscsiBondPresenter.class, SubTabDataCenterIscsiBondPresenter.ViewDef.class, SubTabDataCenterIscsiBondView.class, SubTabDataCenterIscsiBondPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkQoSPresenter.class, SubTabDataCenterNetworkQoSPresenter.ViewDef.class, SubTabDataCenterNetworkQoSView.class, SubTabDataCenterNetworkQoSPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStorageQosPresenter.class, SubTabDataCenterStorageQosPresenter.ViewDef.class, SubTabDataCenterStorageQosView.class, SubTabDataCenterStorageQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterCpuQosPresenter.class, SubTabDataCenterCpuQosPresenter.ViewDef.class, SubTabDataCenterCpuQosView.class, SubTabDataCenterCpuQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterHostNetworkQosPresenter.class, SubTabDataCenterHostNetworkQosPresenter.ViewDef.class, SubTabDataCenterHostNetworkQosView.class, SubTabDataCenterHostNetworkQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterVmPresenter.class, SubTabStorageRegisterVmPresenter.ViewDef.class, SubTabStorageRegisterVmView.class, SubTabStorageRegisterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterTemplatePresenter.class, SubTabStorageRegisterTemplatePresenter.ViewDef.class, SubTabStorageRegisterTemplateView.class, SubTabStorageRegisterTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskPresenter.class, SubTabStorageDiskPresenter.ViewDef.class, SubTabStorageDiskView.class, SubTabStorageDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageSnapshotPresenter.class, SubTabStorageSnapshotPresenter.ViewDef.class, SubTabStorageSnapshotView.class, SubTabStorageSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskProfilePresenter.class, SubTabStorageDiskProfilePresenter.ViewDef.class, SubTabStorageDiskProfileView.class, SubTabStorageDiskProfilePresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterServicePresenter.class, SubTabClusterServicePresenter.ViewDef.class, SubTabClusterServiceView.class, SubTabClusterServicePresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGlusterHookPresenter.class, SubTabClusterGlusterHookPresenter.ViewDef.class, SubTabClusterGlusterHookView.class, SubTabClusterGlusterHookPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterAffinityGroupPresenter.class, SubTabClusterAffinityGroupPresenter.ViewDef.class, SubTabClusterAffinityGroupView.class, SubTabClusterAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterCpuProfilePresenter.class, SubTabClusterCpuProfilePresenter.ViewDef.class, SubTabClusterCpuProfileView.class, SubTabClusterCpuProfilePresenter.ProxyDef.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostHardwarePresenter.class, SubTabHostHardwarePresenter.ViewDef.class, SubTabHostHardwareView.class, SubTabHostHardwarePresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGlusterSwiftPresenter.class, SubTabHostGlusterSwiftPresenter.ViewDef.class, SubTabHostGlusterSwiftView.class, SubTabHostGlusterSwiftPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    bindPresenter(SubTabHostBrickPresenter.class, SubTabHostBrickPresenter.ViewDef.class, SubTabHostBrickView.class, SubTabHostBrickPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineAffinityGroupPresenter.class, SubTabVirtualMachineAffinityGroupPresenter.ViewDef.class, SubTabVirtualMachineAffinityGroupView.class, SubTabVirtualMachineAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSessionsPresenter.class, SubTabVirtualMachineSessionsPresenter.ViewDef.class, SubTabVirtualMachineSessionsView.class, SubTabVirtualMachineSessionsPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    bindPresenterWidget(PoolEditPopupPresenterWidget.class, PoolEditPopupPresenterWidget.ViewDef.class, PoolEditPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Network
    bindPresenter(NetworkSubTabPanelPresenter.class, NetworkSubTabPanelPresenter.ViewDef.class, NetworkSubTabPanelView.class, NetworkSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkGeneralPresenter.class, SubTabNetworkGeneralPresenter.ViewDef.class, SubTabNetworkGeneralView.class, SubTabNetworkGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkProfilePresenter.class, SubTabNetworkProfilePresenter.ViewDef.class, SubTabNetworkProfileView.class, SubTabNetworkProfilePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkExternalSubnetPresenter.class, SubTabNetworkExternalSubnetPresenter.ViewDef.class, SubTabNetworkExternalSubnetView.class, SubTabNetworkExternalSubnetPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkClusterPresenter.class, SubTabNetworkClusterPresenter.ViewDef.class, SubTabNetworkClusterView.class, SubTabNetworkClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkHostPresenter.class, SubTabNetworkHostPresenter.ViewDef.class, SubTabNetworkHostView.class, SubTabNetworkHostPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkVmPresenter.class, SubTabNetworkVmPresenter.ViewDef.class, SubTabNetworkVmView.class, SubTabNetworkVmPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkTemplatePresenter.class, SubTabNetworkTemplatePresenter.ViewDef.class, SubTabNetworkTemplateView.class, SubTabNetworkTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkPermissionPresenter.class, SubTabNetworkPermissionPresenter.ViewDef.class, SubTabNetworkPermissionView.class, SubTabNetworkPermissionPresenter.ProxyDef.class);
    // Provider
    bindPresenter(ProviderSubTabPanelPresenter.class, ProviderSubTabPanelPresenter.ViewDef.class, ProviderSubTabPanelView.class, ProviderSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderGeneralPresenter.class, SubTabProviderGeneralPresenter.ViewDef.class, SubTabProviderGeneralView.class, SubTabProviderGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderNetworkPresenter.class, SubTabProviderNetworkPresenter.ViewDef.class, SubTabProviderNetworkView.class, SubTabProviderNetworkPresenter.ProxyDef.class);
    // Profile
    bindPresenter(VnicProfileSubTabPanelPresenter.class, VnicProfileSubTabPanelPresenter.ViewDef.class, VnicProfileSubTabPanelView.class, VnicProfileSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfilePermissionPresenter.class, SubTabVnicProfilePermissionPresenter.ViewDef.class, SubTabVnicProfilePermissionView.class, SubTabVnicProfilePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileVmPresenter.class, SubTabVnicProfileVmPresenter.ViewDef.class, SubTabVnicProfileVmView.class, SubTabVnicProfileVmPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileTemplatePresenter.class, SubTabVnicProfileTemplatePresenter.ViewDef.class, SubTabVnicProfileTemplateView.class, SubTabVnicProfileTemplatePresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    bindPresenterWidget(SystemPermissionsRemoveConfirmationPopupPresenterWidget.class, SystemPermissionsRemoveConfirmationPopupPresenterWidget.ViewDef.class, SystemPermissionsRemoveConfirmationPopupView.class);
    bindPresenterWidget(VmNextRunConfigurationPresenterWidget.class, VmNextRunConfigurationPresenterWidget.ViewDef.class, VmNextRunConfigurationPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    bindPresenterWidget(DataCenterForceRemovePopupPresenterWidget.class, DataCenterForceRemovePopupPresenterWidget.ViewDef.class, DataCenterForceRemovePopupView.class);
    // Cluster
    bindPresenterWidget(NewClusterNetworkPopupPresenterWidget.class, NewClusterNetworkPopupPresenterWidget.ViewDef.class, NewClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(DetachGlusterHostsPopupPresenterWidget.class, DetachGlusterHostsPopupPresenterWidget.ViewDef.class, DetachGlusterHostsPopupView.class);
    bindPresenterWidget(GlusterHookContentPopupPresenterWidget.class, GlusterHookContentPopupPresenterWidget.ViewDef.class, GlusterHookContentPopupView.class);
    bindPresenterWidget(GlusterHookResolveConflictsPopupPresenterWidget.class, GlusterHookResolveConflictsPopupPresenterWidget.ViewDef.class, GlusterHookResolveConflictsPopupView.class);
    bindPresenterWidget(VolumeRebalanceStatusPopupPresenterWidget.class, VolumeRebalanceStatusPopupPresenterWidget.ViewDef.class, VolumeRebalanceStatusPopupView.class);
    bindPresenterWidget(RemoveBrickStatusPopupPresenterWidget.class, RemoveBrickStatusPopupPresenterWidget.ViewDef.class, RemoveBrickStatusPopupView.class);
    bindPresenterWidget(ManageGlusterSwiftPopupPresenterWidget.class, ManageGlusterSwiftPopupPresenterWidget.ViewDef.class, ManageGlusterSwiftPopupView.class);
    bindPresenterWidget(VolumeProfileStatisticsPopupPresenterWidget.class, VolumeProfileStatisticsPopupPresenterWidget.ViewDef.class, VolumeProfileStatisticsPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(SetupNetworksInterfacePopupPresenterWidget.class, SetupNetworksInterfacePopupPresenterWidget.ViewDef.class, SetupNetworksInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(SetupNetworksManagementPopupPresenterWidget.class, SetupNetworksManagementPopupPresenterWidget.ViewDef.class, SetupNetworksManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(SetupNetworksBondPopupPresenterWidget.class, SetupNetworksBondPopupPresenterWidget.ViewDef.class, SetupNetworksBondPopupView.class);
    bindPresenterWidget(HostNicPopupPresenterWidget.class, HostNicPopupPresenterWidget.ViewDef.class, HostNicPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    bindPresenterWidget(HostManagementConfirmationPopupPresenterWidget.class, HostManagementConfirmationPopupPresenterWidget.ViewDef.class, HostManagementConfirmationPopupView.class);
    bindPresenterWidget(MultipleHostsPopupPresenterWidget.class, MultipleHostsPopupPresenterWidget.ViewDef.class, MultipleHostsPopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmFromExportDomainPopupPresenterWidget.class, ImportVmFromExportDomainPopupPresenterWidget.ViewDef.class, ImportVmFromExportDomainPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(RegisterVmPopupPresenterWidget.class, RegisterVmPopupPresenterWidget.ViewDef.class, RegisterVmPopupView.class);
    bindPresenterWidget(RegisterTemplatePopupPresenterWidget.class, RegisterTemplatePopupPresenterWidget.ViewDef.class, RegisterTemplatePopupView.class);
    bindPresenterWidget(ImportCloneDialogPresenterWidget.class, ImportCloneDialogPresenterWidget.ViewDef.class, ImportCloneDialogPopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    bindPresenterWidget(ChangeQuotaPopupPresenterWidget.class, ChangeQuotaPopupPresenterWidget.ViewDef.class, ChangeQuotaPopupView.class);
    bindPresenterWidget(ImportExportImagePopupPresenterWidget.class, ImportExportImagePopupPresenterWidget.ViewDef.class, ImportExportImagePopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(StorageForceCreatePopupPresenterWidget.class, StorageForceCreatePopupPresenterWidget.ViewDef.class, StorageForceCreatePopupView.class);
    bindPresenterWidget(VmPopupPresenterWidget.class, VmPopupPresenterWidget.ViewDef.class, VmPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Snapshot Preview
    bindPresenterWidget(VmSnapshotPreviewPopupPresenterWidget.class, VmSnapshotPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotPreviewPopupView.class);
    bindPresenterWidget(VmSnapshotCustomPreviewPopupPresenterWidget.class, VmSnapshotCustomPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotCustomPreviewPopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // Clone VM
    bindPresenterWidget(CloneVmPopupPresenterWidget.class, CloneVmPopupPresenterWidget.ViewDef.class, CloneVmPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM Remove
    bindPresenterWidget(VmRemovePopupPresenterWidget.class, VmRemovePopupPresenterWidget.ViewDef.class, VmRemovePopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Attach Disk
    bindPresenterWidget(VmDiskAttachPopupPresenterWidget.class, VmDiskAttachPopupPresenterWidget.ViewDef.class, VmDiskAttachPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateNewPresenterWidget.class, TemplateNewPresenterWidget.ViewDef.class, TemplateNewPopupView.class);
    // Instance Types
    bindPresenterWidget(InstanceTypesPopupPresenterWidget.class, InstanceTypesPopupPresenterWidget.ViewDef.class, InstanceTypesPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    // Network QoS
    bindPresenterWidget(NetworkQoSPopupPresenterWidget.class, NetworkQoSPopupPresenterWidget.ViewDef.class, NetworkQoSPopupView.class);
    // Storage QoS
    bindPresenterWidget(StorageQosPopupPresenterWidget.class, StorageQosPopupPresenterWidget.ViewDef.class, StorageQosPopupView.class);
    // Cpu QoS
    bindPresenterWidget(CpuQosPopupPresenterWidget.class, CpuQosPopupPresenterWidget.ViewDef.class, CpuQosPopupView.class);
    // Host Network QoS
    bindPresenterWidget(HostNetworkQosPopupPresenterWidget.class, HostNetworkQosPopupPresenterWidget.ViewDef.class, HostNetworkQosPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    bindPresenterWidget(ImportVmsPopupPresenterWidget.class, ImportVmsPopupPresenterWidget.ViewDef.class, ImportVmsPopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeoRepPresenter.class, SubTabVolumeGeoRepPresenter.ViewDef.class, SubTabVolumeGeoRepView.class, SubTabVolumeGeoRepPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenter(SubTabGlusterVolumeSnapshotPresenter.class, SubTabGlusterVolumeSnapshotPresenter.ViewDef.class, SubTabGlusterVolumeSnapshotView.class, SubTabGlusterVolumeSnapshotPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(RemoveBrickPopupPresenterWidget.class, RemoveBrickPopupPresenterWidget.ViewDef.class, RemoveBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(BrickAdvancedDetailsPopupPresenterWidget.class, BrickAdvancedDetailsPopupPresenterWidget.ViewDef.class, BrickAdvancedDetailsPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
    // Network
    bindPresenterWidget(NewNetworkPopupPresenterWidget.class, NewNetworkPopupPresenterWidget.ViewDef.class, NewNetworkPopupView.class);
    bindPresenterWidget(EditNetworkPopupPresenterWidget.class, EditNetworkPopupPresenterWidget.ViewDef.class, EditNetworkPopupView.class);
    // Event
    bindPresenterWidget(EventPopupPresenterWidget.class, EventPopupPresenterWidget.ViewDef.class, EventPopupView.class);
    // Provider
    bindPresenterWidget(ProviderPopupPresenterWidget.class, ProviderPopupPresenterWidget.ViewDef.class, ProviderPopupView.class);
    bindPresenterWidget(ImportNetworksPopupPresenterWidget.class, ImportNetworksPopupPresenterWidget.ViewDef.class, ImportNetworksPopupView.class);
    // Profile
    bindPresenterWidget(VnicProfilePopupPresenterWidget.class, VnicProfilePopupPresenterWidget.ViewDef.class, VnicProfilePopupView.class);
    bindPresenterWidget(DiskProfilePopupPresenterWidget.class, DiskProfilePopupPresenterWidget.ViewDef.class, DiskProfilePopupView.class);
    bindPresenterWidget(CpuProfilePopupPresenterWidget.class, CpuProfilePopupPresenterWidget.ViewDef.class, CpuProfilePopupView.class);
    // External Subnet
    bindPresenterWidget(ExternalSubnetPopupPresenterWidget.class, ExternalSubnetPopupPresenterWidget.ViewDef.class, ExternalSubnetPopupView.class);
    // ISCSI Bond
    bindPresenterWidget(IscsiBondPopupPresenterWidget.class, IscsiBondPopupPresenterWidget.ViewDef.class, IscsiBondPopupView.class);
}
#method_after
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindPresenterWidget(LoginFormPresenterWidget.class, LoginFormPresenterWidget.ViewDef.class, LoginFormView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    bindPresenterWidget(ManagePolicyUnitPopupPresenterWidget.class, ManagePolicyUnitPopupPresenterWidget.ViewDef.class, ManagePolicyUnitPopupView.class);
    bindPresenterWidget(SharedMacPoolPopupPresenterWidget.class, SharedMacPoolPopupPresenterWidget.ViewDef.class, SharedMacPoolPopupView.class);
    bindPresenterWidget(AffinityGroupPopupPresenterWidget.class, AffinityGroupPopupPresenterWidget.ViewDef.class, AffinityGroupPopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabNetworkPresenter.class, MainTabNetworkPresenter.ViewDef.class, MainTabNetworkView.class, MainTabNetworkPresenter.ProxyDef.class);
    bindPresenter(MainTabVnicProfilePresenter.class, MainTabVnicProfilePresenter.ViewDef.class, MainTabVnicProfileView.class, MainTabVnicProfilePresenter.ProxyDef.class);
    bindPresenter(MainTabProviderPresenter.class, MainTabProviderPresenter.ViewDef.class, MainTabProviderView.class, MainTabProviderPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(DataCenterQosSubTabPanelPresenter.class, DataCenterQosSubTabPanelPresenter.ViewDef.class, DataCenterQosSubTabPanelView.class, DataCenterQosSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterIscsiBondPresenter.class, SubTabDataCenterIscsiBondPresenter.ViewDef.class, SubTabDataCenterIscsiBondView.class, SubTabDataCenterIscsiBondPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkQoSPresenter.class, SubTabDataCenterNetworkQoSPresenter.ViewDef.class, SubTabDataCenterNetworkQoSView.class, SubTabDataCenterNetworkQoSPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStorageQosPresenter.class, SubTabDataCenterStorageQosPresenter.ViewDef.class, SubTabDataCenterStorageQosView.class, SubTabDataCenterStorageQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterCpuQosPresenter.class, SubTabDataCenterCpuQosPresenter.ViewDef.class, SubTabDataCenterCpuQosView.class, SubTabDataCenterCpuQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterHostNetworkQosPresenter.class, SubTabDataCenterHostNetworkQosPresenter.ViewDef.class, SubTabDataCenterHostNetworkQosView.class, SubTabDataCenterHostNetworkQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterVmPresenter.class, SubTabStorageRegisterVmPresenter.ViewDef.class, SubTabStorageRegisterVmView.class, SubTabStorageRegisterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterTemplatePresenter.class, SubTabStorageRegisterTemplatePresenter.ViewDef.class, SubTabStorageRegisterTemplateView.class, SubTabStorageRegisterTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskPresenter.class, SubTabStorageDiskPresenter.ViewDef.class, SubTabStorageDiskView.class, SubTabStorageDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageSnapshotPresenter.class, SubTabStorageSnapshotPresenter.ViewDef.class, SubTabStorageSnapshotView.class, SubTabStorageSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskProfilePresenter.class, SubTabStorageDiskProfilePresenter.ViewDef.class, SubTabStorageDiskProfileView.class, SubTabStorageDiskProfilePresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterServicePresenter.class, SubTabClusterServicePresenter.ViewDef.class, SubTabClusterServiceView.class, SubTabClusterServicePresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGlusterHookPresenter.class, SubTabClusterGlusterHookPresenter.ViewDef.class, SubTabClusterGlusterHookView.class, SubTabClusterGlusterHookPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterAffinityGroupPresenter.class, SubTabClusterAffinityGroupPresenter.ViewDef.class, SubTabClusterAffinityGroupView.class, SubTabClusterAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterCpuProfilePresenter.class, SubTabClusterCpuProfilePresenter.ViewDef.class, SubTabClusterCpuProfileView.class, SubTabClusterCpuProfilePresenter.ProxyDef.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostHardwarePresenter.class, SubTabHostHardwarePresenter.ViewDef.class, SubTabHostHardwareView.class, SubTabHostHardwarePresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGlusterSwiftPresenter.class, SubTabHostGlusterSwiftPresenter.ViewDef.class, SubTabHostGlusterSwiftView.class, SubTabHostGlusterSwiftPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    bindPresenter(SubTabHostBrickPresenter.class, SubTabHostBrickPresenter.ViewDef.class, SubTabHostBrickView.class, SubTabHostBrickPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineAffinityGroupPresenter.class, SubTabVirtualMachineAffinityGroupPresenter.ViewDef.class, SubTabVirtualMachineAffinityGroupView.class, SubTabVirtualMachineAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSessionsPresenter.class, SubTabVirtualMachineSessionsPresenter.ViewDef.class, SubTabVirtualMachineSessionsView.class, SubTabVirtualMachineSessionsPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    bindPresenterWidget(PoolEditPopupPresenterWidget.class, PoolEditPopupPresenterWidget.ViewDef.class, PoolEditPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Network
    bindPresenter(NetworkSubTabPanelPresenter.class, NetworkSubTabPanelPresenter.ViewDef.class, NetworkSubTabPanelView.class, NetworkSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkGeneralPresenter.class, SubTabNetworkGeneralPresenter.ViewDef.class, SubTabNetworkGeneralView.class, SubTabNetworkGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkProfilePresenter.class, SubTabNetworkProfilePresenter.ViewDef.class, SubTabNetworkProfileView.class, SubTabNetworkProfilePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkExternalSubnetPresenter.class, SubTabNetworkExternalSubnetPresenter.ViewDef.class, SubTabNetworkExternalSubnetView.class, SubTabNetworkExternalSubnetPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkClusterPresenter.class, SubTabNetworkClusterPresenter.ViewDef.class, SubTabNetworkClusterView.class, SubTabNetworkClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkHostPresenter.class, SubTabNetworkHostPresenter.ViewDef.class, SubTabNetworkHostView.class, SubTabNetworkHostPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkVmPresenter.class, SubTabNetworkVmPresenter.ViewDef.class, SubTabNetworkVmView.class, SubTabNetworkVmPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkTemplatePresenter.class, SubTabNetworkTemplatePresenter.ViewDef.class, SubTabNetworkTemplateView.class, SubTabNetworkTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkPermissionPresenter.class, SubTabNetworkPermissionPresenter.ViewDef.class, SubTabNetworkPermissionView.class, SubTabNetworkPermissionPresenter.ProxyDef.class);
    // Provider
    bindPresenter(ProviderSubTabPanelPresenter.class, ProviderSubTabPanelPresenter.ViewDef.class, ProviderSubTabPanelView.class, ProviderSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderGeneralPresenter.class, SubTabProviderGeneralPresenter.ViewDef.class, SubTabProviderGeneralView.class, SubTabProviderGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderNetworkPresenter.class, SubTabProviderNetworkPresenter.ViewDef.class, SubTabProviderNetworkView.class, SubTabProviderNetworkPresenter.ProxyDef.class);
    // Profile
    bindPresenter(VnicProfileSubTabPanelPresenter.class, VnicProfileSubTabPanelPresenter.ViewDef.class, VnicProfileSubTabPanelView.class, VnicProfileSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfilePermissionPresenter.class, SubTabVnicProfilePermissionPresenter.ViewDef.class, SubTabVnicProfilePermissionView.class, SubTabVnicProfilePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileVmPresenter.class, SubTabVnicProfileVmPresenter.ViewDef.class, SubTabVnicProfileVmView.class, SubTabVnicProfileVmPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileTemplatePresenter.class, SubTabVnicProfileTemplatePresenter.ViewDef.class, SubTabVnicProfileTemplateView.class, SubTabVnicProfileTemplatePresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    bindPresenterWidget(SystemPermissionsRemoveConfirmationPopupPresenterWidget.class, SystemPermissionsRemoveConfirmationPopupPresenterWidget.ViewDef.class, SystemPermissionsRemoveConfirmationPopupView.class);
    bindPresenterWidget(VmNextRunConfigurationPresenterWidget.class, VmNextRunConfigurationPresenterWidget.ViewDef.class, VmNextRunConfigurationPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    bindPresenterWidget(DataCenterForceRemovePopupPresenterWidget.class, DataCenterForceRemovePopupPresenterWidget.ViewDef.class, DataCenterForceRemovePopupView.class);
    // Cluster
    bindPresenterWidget(NewClusterNetworkPopupPresenterWidget.class, NewClusterNetworkPopupPresenterWidget.ViewDef.class, NewClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(DetachGlusterHostsPopupPresenterWidget.class, DetachGlusterHostsPopupPresenterWidget.ViewDef.class, DetachGlusterHostsPopupView.class);
    bindPresenterWidget(GlusterHookContentPopupPresenterWidget.class, GlusterHookContentPopupPresenterWidget.ViewDef.class, GlusterHookContentPopupView.class);
    bindPresenterWidget(GlusterHookResolveConflictsPopupPresenterWidget.class, GlusterHookResolveConflictsPopupPresenterWidget.ViewDef.class, GlusterHookResolveConflictsPopupView.class);
    bindPresenterWidget(VolumeRebalanceStatusPopupPresenterWidget.class, VolumeRebalanceStatusPopupPresenterWidget.ViewDef.class, VolumeRebalanceStatusPopupView.class);
    bindPresenterWidget(GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.class, GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.ViewDef.class, GeoRepActionConfirmPopUpView.class);
    bindPresenterWidget(RemoveBrickStatusPopupPresenterWidget.class, RemoveBrickStatusPopupPresenterWidget.ViewDef.class, RemoveBrickStatusPopupView.class);
    bindPresenterWidget(ManageGlusterSwiftPopupPresenterWidget.class, ManageGlusterSwiftPopupPresenterWidget.ViewDef.class, ManageGlusterSwiftPopupView.class);
    bindPresenterWidget(VolumeProfileStatisticsPopupPresenterWidget.class, VolumeProfileStatisticsPopupPresenterWidget.ViewDef.class, VolumeProfileStatisticsPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(SetupNetworksInterfacePopupPresenterWidget.class, SetupNetworksInterfacePopupPresenterWidget.ViewDef.class, SetupNetworksInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(SetupNetworksManagementPopupPresenterWidget.class, SetupNetworksManagementPopupPresenterWidget.ViewDef.class, SetupNetworksManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(SetupNetworksBondPopupPresenterWidget.class, SetupNetworksBondPopupPresenterWidget.ViewDef.class, SetupNetworksBondPopupView.class);
    bindPresenterWidget(HostNicPopupPresenterWidget.class, HostNicPopupPresenterWidget.ViewDef.class, HostNicPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    bindPresenterWidget(HostManagementConfirmationPopupPresenterWidget.class, HostManagementConfirmationPopupPresenterWidget.ViewDef.class, HostManagementConfirmationPopupView.class);
    bindPresenterWidget(MultipleHostsPopupPresenterWidget.class, MultipleHostsPopupPresenterWidget.ViewDef.class, MultipleHostsPopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmFromExportDomainPopupPresenterWidget.class, ImportVmFromExportDomainPopupPresenterWidget.ViewDef.class, ImportVmFromExportDomainPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(RegisterVmPopupPresenterWidget.class, RegisterVmPopupPresenterWidget.ViewDef.class, RegisterVmPopupView.class);
    bindPresenterWidget(RegisterTemplatePopupPresenterWidget.class, RegisterTemplatePopupPresenterWidget.ViewDef.class, RegisterTemplatePopupView.class);
    bindPresenterWidget(ImportCloneDialogPresenterWidget.class, ImportCloneDialogPresenterWidget.ViewDef.class, ImportCloneDialogPopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    bindPresenterWidget(ChangeQuotaPopupPresenterWidget.class, ChangeQuotaPopupPresenterWidget.ViewDef.class, ChangeQuotaPopupView.class);
    bindPresenterWidget(ImportExportImagePopupPresenterWidget.class, ImportExportImagePopupPresenterWidget.ViewDef.class, ImportExportImagePopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(StorageForceCreatePopupPresenterWidget.class, StorageForceCreatePopupPresenterWidget.ViewDef.class, StorageForceCreatePopupView.class);
    bindPresenterWidget(VmPopupPresenterWidget.class, VmPopupPresenterWidget.ViewDef.class, VmPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Snapshot Preview
    bindPresenterWidget(VmSnapshotPreviewPopupPresenterWidget.class, VmSnapshotPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotPreviewPopupView.class);
    bindPresenterWidget(VmSnapshotCustomPreviewPopupPresenterWidget.class, VmSnapshotCustomPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotCustomPreviewPopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // Clone VM
    bindPresenterWidget(CloneVmPopupPresenterWidget.class, CloneVmPopupPresenterWidget.ViewDef.class, CloneVmPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM Remove
    bindPresenterWidget(VmRemovePopupPresenterWidget.class, VmRemovePopupPresenterWidget.ViewDef.class, VmRemovePopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Attach Disk
    bindPresenterWidget(VmDiskAttachPopupPresenterWidget.class, VmDiskAttachPopupPresenterWidget.ViewDef.class, VmDiskAttachPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateEditPresenterWidget.class, TemplateEditPresenterWidget.ViewDef.class, TemplateEditPopupView.class);
    // Instance Types
    bindPresenterWidget(InstanceTypesPopupPresenterWidget.class, InstanceTypesPopupPresenterWidget.ViewDef.class, InstanceTypesPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    // Network QoS
    bindPresenterWidget(NetworkQoSPopupPresenterWidget.class, NetworkQoSPopupPresenterWidget.ViewDef.class, NetworkQoSPopupView.class);
    // Storage QoS
    bindPresenterWidget(StorageQosPopupPresenterWidget.class, StorageQosPopupPresenterWidget.ViewDef.class, StorageQosPopupView.class);
    // Cpu QoS
    bindPresenterWidget(CpuQosPopupPresenterWidget.class, CpuQosPopupPresenterWidget.ViewDef.class, CpuQosPopupView.class);
    // Host Network QoS
    bindPresenterWidget(HostNetworkQosPopupPresenterWidget.class, HostNetworkQosPopupPresenterWidget.ViewDef.class, HostNetworkQosPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    bindPresenterWidget(ImportVmsPopupPresenterWidget.class, ImportVmsPopupPresenterWidget.ViewDef.class, ImportVmsPopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeoRepPresenter.class, SubTabVolumeGeoRepPresenter.ViewDef.class, SubTabVolumeGeoRepView.class, SubTabVolumeGeoRepPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenter(SubTabGlusterVolumeSnapshotPresenter.class, SubTabGlusterVolumeSnapshotPresenter.ViewDef.class, SubTabGlusterVolumeSnapshotView.class, SubTabGlusterVolumeSnapshotPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(RemoveBrickPopupPresenterWidget.class, RemoveBrickPopupPresenterWidget.ViewDef.class, RemoveBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(BrickAdvancedDetailsPopupPresenterWidget.class, BrickAdvancedDetailsPopupPresenterWidget.ViewDef.class, BrickAdvancedDetailsPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
    // Network
    bindPresenterWidget(NewNetworkPopupPresenterWidget.class, NewNetworkPopupPresenterWidget.ViewDef.class, NewNetworkPopupView.class);
    bindPresenterWidget(EditNetworkPopupPresenterWidget.class, EditNetworkPopupPresenterWidget.ViewDef.class, EditNetworkPopupView.class);
    // Event
    bindPresenterWidget(EventPopupPresenterWidget.class, EventPopupPresenterWidget.ViewDef.class, EventPopupView.class);
    // Provider
    bindPresenterWidget(ProviderPopupPresenterWidget.class, ProviderPopupPresenterWidget.ViewDef.class, ProviderPopupView.class);
    bindPresenterWidget(ImportNetworksPopupPresenterWidget.class, ImportNetworksPopupPresenterWidget.ViewDef.class, ImportNetworksPopupView.class);
    // Profile
    bindPresenterWidget(VnicProfilePopupPresenterWidget.class, VnicProfilePopupPresenterWidget.ViewDef.class, VnicProfilePopupView.class);
    bindPresenterWidget(DiskProfilePopupPresenterWidget.class, DiskProfilePopupPresenterWidget.ViewDef.class, DiskProfilePopupView.class);
    bindPresenterWidget(CpuProfilePopupPresenterWidget.class, CpuProfilePopupPresenterWidget.ViewDef.class, CpuProfilePopupView.class);
    // External Subnet
    bindPresenterWidget(ExternalSubnetPopupPresenterWidget.class, ExternalSubnetPopupPresenterWidget.ViewDef.class, ExternalSubnetPopupView.class);
    // ISCSI Bond
    bindPresenterWidget(IscsiBondPopupPresenterWidget.class, IscsiBondPopupPresenterWidget.ViewDef.class, IscsiBondPopupView.class);
}
#end_block

#method_before
public static Version getMinVersionByClusters(List<VDSGroup> source) {
    Version minVersion = source != null && source.size() > 0 ? source.get(0).getcompatibility_version() : null;
    if (minVersion != null) {
        for (VDSGroup cluster : source) {
            minVersion = cluster.getcompatibility_version().compareTo(minVersion) < 0 ? (Version) cluster.getcompatibility_version() : minVersion;
        }
    }
    return minVersion;
}
#method_after
public static Version getMinVersionByClusters(List<VDSGroup> source) {
    Version minVersion = source != null && source.size() > 0 ? source.get(0).getCompatibilityVersion() : null;
    if (minVersion != null) {
        for (VDSGroup cluster : source) {
            minVersion = cluster.getCompatibilityVersion().compareTo(minVersion) < 0 ? (Version) cluster.getCompatibilityVersion() : minVersion;
        }
    }
    return minVersion;
}
#end_block

#method_before
public static ArrayList<VDS> findAllVDSByPmEnabled(ArrayList<VDS> items) {
    ArrayList<VDS> ret = new ArrayList<VDS>();
    for (VDS i : items) {
        if (i.getpm_enabled()) {
            ret.add(i);
        }
    }
    return ret;
}
#method_after
public static ArrayList<VDS> findAllVDSByPmEnabled(ArrayList<VDS> items) {
    ArrayList<VDS> ret = new ArrayList<VDS>();
    for (VDS i : items) {
        if (i.isPmEnabled()) {
            ret.add(i);
        }
    }
    return ret;
}
#end_block

#method_before
public static ArrayList<StorageDomain> getStorageDomainsByIds(ArrayList<Guid> storageIds, ArrayList<StorageDomain> storageDomains) {
    ArrayList<StorageDomain> list = new ArrayList<StorageDomain>();
    for (Guid storageId : storageIds) {
        StorageDomain storageDomain = getStorageById(storageId, storageDomains);
        if (storageDomain != null) {
            list.add(getStorageById(storageId, storageDomains));
        }
    }
    return list;
}
#method_after
public static ArrayList<StorageDomain> getStorageDomainsByIds(ArrayList<Guid> storageIds, ArrayList<StorageDomain> storageDomains) {
    ArrayList<StorageDomain> list = new ArrayList<StorageDomain>();
    for (Guid storageId : storageIds) {
        StorageDomain storageDomain = getStorageById(storageId, storageDomains);
        if (storageDomain != null) {
            list.add(storageDomain);
        }
    }
    return list;
}
#end_block

#method_before
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    VolumeStatusColumn statusColumn = new VolumeStatusColumn();
    statusColumn.makeSortable(new Comparator<GlusterVolumeEntity>() {

        @Override
        public int compare(GlusterVolumeEntity o1, GlusterVolumeEntity o2) {
            return GlusterVolumeUtils.getVolumeStatus(o1).ordinal() - GlusterVolumeUtils.getVolumeStatus(o2).ordinal();
        }
    });
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.empty(), "30px");
    TextColumnWithTooltip<GlusterVolumeEntity> nameColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getName();
        }
    };
    nameColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.NameVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> clusterColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getVdsGroupName();
        }
    };
    clusterColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> volumeTypeColumn = new EnumColumn<GlusterVolumeEntity, GlusterVolumeType>() {

        @Override
        protected GlusterVolumeType getRawValue(GlusterVolumeEntity object) {
            return object.getVolumeType();
        }
    };
    volumeTypeColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(volumeTypeColumn, constants.volumeTypeVolume(), "150px");
    // $NON-NLS-1$
    getTable().addColumn(new VolumeBrickStatusColumn(), constants.bricksStatusVolume(), "150px");
    MenuCell<GlusterTaskSupport> rebalanceMenuCell = getRebalanceActivityMenu(constants);
    MenuCell<GlusterTaskSupport> removeBricksMenuCell = getRemoveBrickActivityMenu(constants);
    List<HasCell<GlusterTaskSupport, ?>> list = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    list.add(new VolumeActivityStatusColumn<GlusterTaskSupport>());
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivitySeperatorCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(rebalanceMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(removeBricksMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    List<HasCell<GlusterTaskSupport, ?>> compositeList = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeTaskWaitingCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivityCompositeCell<GlusterTaskSupport>(list)) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    getTable().addColumn(new Column<GlusterVolumeEntity, GlusterVolumeEntity>(new VolumeCapacityCell()) {

        @Override
        public GlusterVolumeEntity getValue(GlusterVolumeEntity object) {
            return object;
        }
    }, constants.volumeCapacity(), // $NON-NLS-1$
    "60px");
    getTable().addColumn(new VolumeActivityColumn<GlusterVolumeEntity>(new VolumeActivityCompositeCell<GlusterTaskSupport>(compositeList) {

        @Override
        protected boolean isVisible(GlusterTaskSupport value) {
            return !(value == null || value.getAsyncTask() == null);
        }
    }), constants.activitiesOnVolume(), // $NON-NLS-1$
    "100px");
    TextColumnWithTooltip<GlusterVolumeEntity> snapshotCountColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getNoOfSnapshots().toString();
        }
    };
    snapshotCountColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(snapshotCountColumn, constants.noOfSnapshotsLabel(), "100px");
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.newVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.removeVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.rebalanceVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartRebalanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.optimizeForVirtStore()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getOptimizeForVirtStoreCommand();
        }
    });
    List<ActionButtonDefinition<GlusterVolumeEntity>> volumeProfilingActions = new LinkedList<ActionButtonDefinition<GlusterVolumeEntity>>();
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolumeProfiling()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartVolumeProfilingCommand();
        }
    });
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.volumeProfileDetails()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getShowVolumeProfileDetailsCommand();
        }
    });
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolumeProfiling()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopVolumeProfilingCommand();
        }
    });
    getTable().addActionButton(new WebAdminMenuBarButtonDefinition<GlusterVolumeEntity>(constants.volumeProfilingAction(), volumeProfilingActions, CommandLocation.ContextAndToolBar));
}
#method_after
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    VolumeStatusColumn statusColumn = new VolumeStatusColumn();
    statusColumn.makeSortable(new Comparator<GlusterVolumeEntity>() {

        @Override
        public int compare(GlusterVolumeEntity o1, GlusterVolumeEntity o2) {
            return GlusterVolumeUtils.getVolumeStatus(o1).ordinal() - GlusterVolumeUtils.getVolumeStatus(o2).ordinal();
        }
    });
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.empty(), "30px");
    AbstractTextColumnWithTooltip<GlusterVolumeEntity> nameColumn = new AbstractTextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getName();
        }
    };
    nameColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.NameVolume(), "150px");
    AbstractTextColumnWithTooltip<GlusterVolumeEntity> clusterColumn = new AbstractTextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getVdsGroupName();
        }
    };
    clusterColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterVolume(), "150px");
    AbstractTextColumnWithTooltip<GlusterVolumeEntity> volumeTypeColumn = new AbstractEnumColumn<GlusterVolumeEntity, GlusterVolumeType>() {

        @Override
        protected GlusterVolumeType getRawValue(GlusterVolumeEntity object) {
            return object.getVolumeType();
        }
    };
    volumeTypeColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(volumeTypeColumn, constants.volumeTypeVolume(), "150px");
    // $NON-NLS-1$
    getTable().addColumn(new VolumeBrickStatusColumn(), constants.bricksStatusVolume(), "150px");
    MenuCell<GlusterTaskSupport> rebalanceMenuCell = getRebalanceActivityMenu(constants);
    MenuCell<GlusterTaskSupport> removeBricksMenuCell = getRemoveBrickActivityMenu(constants);
    List<HasCell<GlusterTaskSupport, ?>> list = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    list.add(new VolumeActivityStatusColumn<GlusterTaskSupport>());
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivitySeperatorCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(rebalanceMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    list.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(removeBricksMenuCell) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    List<HasCell<GlusterTaskSupport, ?>> compositeList = new ArrayList<HasCell<GlusterTaskSupport, ?>>();
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeTaskWaitingCell<GlusterTaskSupport>()) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    compositeList.add(new Column<GlusterTaskSupport, GlusterTaskSupport>(new VolumeActivityCompositeCell<GlusterTaskSupport>(list)) {

        @Override
        public GlusterTaskSupport getValue(GlusterTaskSupport object) {
            return object;
        }
    });
    getTable().addColumn(new Column<GlusterVolumeEntity, GlusterVolumeEntity>(new VolumeCapacityCell()) {

        @Override
        public GlusterVolumeEntity getValue(GlusterVolumeEntity object) {
            return object;
        }
    }, constants.volumeCapacity(), // $NON-NLS-1$
    "60px");
    getTable().addColumn(new VolumeActivityColumn<GlusterVolumeEntity>(new VolumeActivityCompositeCell<GlusterTaskSupport>(compositeList) {

        @Override
        protected boolean isVisible(GlusterTaskSupport value) {
            return !(value == null || value.getAsyncTask() == null);
        }
    }), constants.activitiesOnVolume(), // $NON-NLS-1$
    "100px");
    AbstractTextColumnWithTooltip<GlusterVolumeEntity> snapshotCountColumn = new AbstractTextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getSnapshotsCount().toString();
        }
    };
    snapshotCountColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(snapshotCountColumn, constants.noOfSnapshotsLabel(), "100px");
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.newVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.removeVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.rebalanceVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartRebalanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.optimizeForVirtStore()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getOptimizeForVirtStoreCommand();
        }
    });
    List<ActionButtonDefinition<GlusterVolumeEntity>> volumeProfilingActions = new LinkedList<ActionButtonDefinition<GlusterVolumeEntity>>();
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolumeProfiling()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartVolumeProfilingCommand();
        }
    });
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.volumeProfileDetails()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getShowVolumeProfileDetailsCommand();
        }
    });
    volumeProfilingActions.add(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolumeProfiling()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopVolumeProfilingCommand();
        }
    });
    getTable().addActionButton(new WebAdminMenuBarButtonDefinition<GlusterVolumeEntity>(constants.volumeProfilingAction(), volumeProfilingActions, CommandLocation.ContextAndToolBar));
}
#end_block

#method_before
public void isClusterEmpty(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter<Boolean>() {

        @Override
        public Boolean Convert(Object source, AsyncQuery _asyncQuery) {
            return (Boolean) source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.IsClusterEmpty, new IdQueryParameters(id), aQuery);
}
#method_after
public void isClusterEmpty(AsyncQuery aQuery, Guid clusterId) {
    runQueryByIdParameter(VdcQueryType.IsClusterEmpty, aQuery, clusterId);
}
#end_block

#method_before
public void getUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    getUpHostListByCluster(aQuery, clusterName, null);
}
#method_after
public void getUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : Collections.emptyList();
        }
    };
    getUpHostListByCluster(aQuery, clusterName, null);
}
#end_block

#method_before
@Override
protected void configure() {
    bind(VolumeListModel.class).in(Singleton.class);
    bind(VolumeGeneralModel.class).in(Singleton.class);
    bind(VolumeBrickListModel.class).in(Singleton.class);
    bind(VolumeParameterListModel.class).in(Singleton.class);
    bind(VolumeEventListModel.class).in(Singleton.class);
    bind(new TypeLiteral<PermissionListModel<VolumeListModel>>() {
    }).in(Singleton.class);
    bind(GlusterVolumeSnapshotListModel.class).in(Singleton.class);
    // Form Detail Models
    bind(new TypeLiteral<DetailModelProvider<VolumeListModel, VolumeGeneralModel>>() {
    }).to(new TypeLiteral<DetailTabModelProvider<VolumeListModel, VolumeGeneralModel>>() {
    }).in(Singleton.class);
    // Search-able Detail Models
    bind(new TypeLiteral<SearchableDetailModelProvider<GlusterGeoRepSession, VolumeListModel, VolumeGeoRepListModel>>() {
    }).to(new TypeLiteral<SearchableDetailTabModelProvider<GlusterGeoRepSession, VolumeListModel, VolumeGeoRepListModel>>() {
    }).in(Singleton.class);
    // Permission Detail Model
    bind(new TypeLiteral<SearchableDetailModelProvider<Permissions, VolumeListModel, PermissionListModel<VolumeListModel>>>() {
    }).to(new TypeLiteral<PermissionModelProvider<VolumeListModel>>() {
    }).in(Singleton.class);
}
#method_after
@Override
protected void configure() {
    bind(VolumeListModel.class).in(Singleton.class);
    bind(VolumeGeneralModel.class).in(Singleton.class);
    bind(VolumeBrickListModel.class).in(Singleton.class);
    bind(VolumeParameterListModel.class).in(Singleton.class);
    bind(VolumeEventListModel.class).in(Singleton.class);
    bind(VolumeGeoRepListModel.class).in(Singleton.class);
    bind(GlusterVolumeSnapshotListModel.class).in(Singleton.class);
    bind(new TypeLiteral<PermissionListModel<VolumeListModel>>() {
    }).in(Singleton.class);
    // Form Detail Models
    bind(new TypeLiteral<DetailModelProvider<VolumeListModel, VolumeGeneralModel>>() {
    }).to(new TypeLiteral<DetailTabModelProvider<VolumeListModel, VolumeGeneralModel>>() {
    }).in(Singleton.class);
    // Search-able Detail Models
    bind(new TypeLiteral<SearchableDetailModelProvider<GlusterGeoRepSession, VolumeListModel, VolumeGeoRepListModel>>() {
    }).to(new TypeLiteral<SearchableDetailTabModelProvider<GlusterGeoRepSession, VolumeListModel, VolumeGeoRepListModel>>() {
    }).in(Singleton.class);
    // Permission Detail Model
    bind(new TypeLiteral<SearchableDetailModelProvider<Permissions, VolumeListModel, PermissionListModel<VolumeListModel>>>() {
    }).to(new TypeLiteral<PermissionModelProvider<VolumeListModel>>() {
    }).in(Singleton.class);
}
#end_block

#method_before
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    GlusterVolumeSnapshotStatusColumn snapshotStatusColumn = new GlusterVolumeSnapshotStatusColumn();
    snapshotStatusColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(snapshotStatusColumn, constants.empty(), "30px");
    TextColumnWithTooltip<GlusterVolumeSnapshotEntity> snapshotNameColumn = new TextColumnWithTooltip<GlusterVolumeSnapshotEntity>() {

        @Override
        public String getValue(GlusterVolumeSnapshotEntity snapshot) {
            return snapshot.getSnapshotName();
        }
    };
    snapshotNameColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(snapshotNameColumn, constants.volumeSnapshotName(), "300px");
    TextColumnWithTooltip<GlusterVolumeSnapshotEntity> descriptionColumn = new TextColumnWithTooltip<GlusterVolumeSnapshotEntity>() {

        @Override
        public String getValue(GlusterVolumeSnapshotEntity snapshot) {
            return snapshot.getDescription();
        }
    };
    descriptionColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(descriptionColumn, constants.volumeSnapshotDescription(), "400px");
    TextColumnWithTooltip<GlusterVolumeSnapshotEntity> creationTimeColumn = new TextColumnWithTooltip<GlusterVolumeSnapshotEntity>() {

        @Override
        public String getValue(GlusterVolumeSnapshotEntity snapshot) {
            // $NON-NLS-1$
            DateTimeFormat df = DateTimeFormat.getFormat("yyyy-MM-dd, HH:mm:ss");
            return df.format(snapshot.getCreatedAt());
        }
    };
    creationTimeColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(creationTimeColumn, constants.volumeSnapshotCreationTime(), "400px");
}
#method_after
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    GlusterVolumeSnapshotStatusColumn snapshotStatusColumn = new GlusterVolumeSnapshotStatusColumn();
    snapshotStatusColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(snapshotStatusColumn, constants.empty(), "30px");
    AbstractTextColumnWithTooltip<GlusterVolumeSnapshotEntity> snapshotNameColumn = new AbstractTextColumnWithTooltip<GlusterVolumeSnapshotEntity>() {

        @Override
        public String getValue(GlusterVolumeSnapshotEntity snapshot) {
            return snapshot.getSnapshotName();
        }
    };
    snapshotNameColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(snapshotNameColumn, constants.volumeSnapshotName(), "300px");
    AbstractTextColumnWithTooltip<GlusterVolumeSnapshotEntity> descriptionColumn = new AbstractTextColumnWithTooltip<GlusterVolumeSnapshotEntity>() {

        @Override
        public String getValue(GlusterVolumeSnapshotEntity snapshot) {
            return snapshot.getDescription();
        }
    };
    descriptionColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(descriptionColumn, constants.volumeSnapshotDescription(), "400px");
    AbstractTextColumnWithTooltip<GlusterVolumeSnapshotEntity> creationTimeColumn = new AbstractTextColumnWithTooltip<GlusterVolumeSnapshotEntity>() {

        @Override
        public String getValue(GlusterVolumeSnapshotEntity snapshot) {
            // $NON-NLS-1$
            DateTimeFormat df = DateTimeFormat.getFormat("yyyy-MM-dd, HH:mm:ss");
            return df.format(snapshot.getCreatedAt());
        }
    };
    creationTimeColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(creationTimeColumn, constants.volumeSnapshotCreationTime(), "400px");
}
#end_block

#method_before
public GlusterVolumeSnapshotListModel getSnapshotListModel() {
    return this.snapshotListModel;
}
#method_after
public GlusterVolumeSnapshotListModel getSnapshotListModel() {
    return snapshotListModel;
}
#end_block

#method_before
private void newVolume() {
    if (getWindow() != null) {
        return;
    }
    VolumeModel volumeModel = new VolumeModel();
    volumeModel.setHelpTag(HelpTag.new_volume);
    // $NON-NLS-1$
    volumeModel.setHashName("new_volume");
    volumeModel.setTitle(ConstantsManager.getInstance().getConstants().newVolumeTitle());
    setWindow(volumeModel);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            VolumeListModel volumeListModel = (VolumeListModel) model;
            VolumeModel innerVolumeModel = (VolumeModel) volumeListModel.getWindow();
            ArrayList<StoragePool> dataCenters = (ArrayList<StoragePool>) result;
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (volumeListModel.getSystemTreeSelectedItem() != null) {
                switch(volumeListModel.getSystemTreeSelectedItem().getType()) {
                    case Volumes:
                    case Cluster:
                    case Cluster_Gluster:
                        VDSGroup cluster = (VDSGroup) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        for (StoragePool dc : dataCenters) {
                            if (dc.getId().equals(cluster.getStoragePoolId())) {
                                innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { dc })));
                                innerVolumeModel.getDataCenter().setSelectedItem(dc);
                                break;
                            }
                        }
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        innerVolumeModel.getCluster().setItems(Arrays.asList(cluster));
                        innerVolumeModel.getCluster().setSelectedItem(cluster);
                        innerVolumeModel.getCluster().setIsChangable(false);
                        innerVolumeModel.getCluster().setChangeProhibitionReason(constants.cannotChangeClusterInTreeContext());
                        break;
                    case Clusters:
                    case DataCenter:
                        StoragePool selectDataCenter = (StoragePool) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { selectDataCenter })));
                        innerVolumeModel.getDataCenter().setSelectedItem(selectDataCenter);
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        break;
                    default:
                        innerVolumeModel.getDataCenter().setItems(dataCenters);
                        innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
                        break;
                }
            } else {
                innerVolumeModel.getDataCenter().setItems(dataCenters);
                innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
            }
            // $NON-NLS-1$
            UICommand command = new UICommand("onCreateVolume", volumeListModel);
            command.setTitle(ConstantsManager.getInstance().getConstants().ok());
            command.setIsDefault(true);
            innerVolumeModel.getCommands().add(command);
            // $NON-NLS-1$
            command = new UICommand("Cancel", volumeListModel);
            command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            command.setIsCancel(true);
            innerVolumeModel.getCommands().add(command);
        }
    };
    AsyncDataProvider.getInstance().getDataCenterByClusterServiceList(_asyncQuery, false, true);
}
#method_after
private void newVolume() {
    if (getWindow() != null) {
        return;
    }
    VolumeModel volumeModel = new VolumeModel();
    volumeModel.setHelpTag(HelpTag.new_volume);
    // $NON-NLS-1$
    volumeModel.setHashName("new_volume");
    volumeModel.setTitle(ConstantsManager.getInstance().getConstants().newVolumeTitle());
    setWindow(volumeModel);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            VolumeListModel volumeListModel = (VolumeListModel) model;
            VolumeModel innerVolumeModel = (VolumeModel) volumeListModel.getWindow();
            ArrayList<StoragePool> dataCenters = (ArrayList<StoragePool>) result;
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (volumeListModel.getSystemTreeSelectedItem() != null) {
                switch(volumeListModel.getSystemTreeSelectedItem().getType()) {
                    case Volumes:
                    case Cluster:
                    case Cluster_Gluster:
                        VDSGroup cluster = (VDSGroup) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        for (StoragePool dc : dataCenters) {
                            if (dc.getId().equals(cluster.getStoragePoolId())) {
                                innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { dc })));
                                innerVolumeModel.getDataCenter().setSelectedItem(dc);
                                break;
                            }
                        }
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        innerVolumeModel.getCluster().setItems(Arrays.asList(cluster));
                        innerVolumeModel.getCluster().setSelectedItem(cluster);
                        innerVolumeModel.getCluster().setIsChangable(false);
                        innerVolumeModel.getCluster().setChangeProhibitionReason(constants.cannotChangeClusterInTreeContext());
                        break;
                    case Clusters:
                    case DataCenter:
                        StoragePool selectDataCenter = (StoragePool) volumeListModel.getSystemTreeSelectedItem().getEntity();
                        innerVolumeModel.getDataCenter().setItems(new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { selectDataCenter })));
                        innerVolumeModel.getDataCenter().setSelectedItem(selectDataCenter);
                        innerVolumeModel.getDataCenter().setIsChangable(false);
                        innerVolumeModel.getDataCenter().setChangeProhibitionReason(constants.cannotChangeDCInTreeContext());
                        break;
                    default:
                        innerVolumeModel.getDataCenter().setItems(dataCenters);
                        innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
                        break;
                }
            } else {
                innerVolumeModel.getDataCenter().setItems(dataCenters);
                innerVolumeModel.getDataCenter().setSelectedItem(Linq.firstOrDefault(dataCenters));
            }
            // $NON-NLS-1$
            UICommand command = UICommand.createDefaultOkUiCommand("onCreateVolume", volumeListModel);
            innerVolumeModel.getCommands().add(command);
            // $NON-NLS-1$
            innerVolumeModel.getCommands().add(UICommand.createCancelUiCommand("Cancel", volumeListModel));
        }
    };
    AsyncDataProvider.getInstance().getDataCenterByClusterServiceList(_asyncQuery, false, true);
}
#end_block

#method_before
private void removeVolume() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeVolumesTitle());
    model.setHelpTag(HelpTag.remove_volume);
    // $NON-NLS-1$
    model.setHashName("remove_volume");
    model.setNote(ConstantsManager.getInstance().getConstants().removeVolumesWarning());
    if (getSelectedItems() == null) {
        return;
    }
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterVolumeEntity item : Linq.<GlusterVolumeEntity>cast(getSelectedItems())) {
        list.add(item.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void removeVolume() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeVolumesTitle());
    model.setHelpTag(HelpTag.remove_volume);
    // $NON-NLS-1$
    model.setHashName("remove_volume");
    model.setNote(ConstantsManager.getInstance().getConstants().removeVolumesWarning());
    if (getSelectedItems() == null) {
        return;
    }
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterVolumeEntity item : Linq.<GlusterVolumeEntity>cast(getSelectedItems())) {
        list.add(item.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnRemove", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void stopRebalance() {
    if (getSelectedItem() == null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getSelectedItem();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceTitle());
    model.setHelpTag(HelpTag.volume_rebalance_stop);
    // $NON-NLS-1$
    model.setHashName("volume_rebalance_stop");
    model.setMessage(ConstantsManager.getInstance().getMessages().confirmStopVolumeRebalance(volumeEntity.getName()));
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("onStopRebalance", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("CancelConfirmation", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#method_after
private void stopRebalance() {
    if (getSelectedItem() == null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getSelectedItem();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceTitle());
    model.setHelpTag(HelpTag.volume_rebalance_stop);
    // $NON-NLS-1$
    model.setHashName("volume_rebalance_stop");
    model.setMessage(ConstantsManager.getInstance().getMessages().confirmStopVolumeRebalance(volumeEntity.getName()));
    // $NON-NLS-1$
    UICommand okCommand = UICommand.createDefaultOkUiCommand("onStopRebalance", this);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = UICommand.createCancelUiCommand("CancelConfirmation", this);
    model.getCommands().add(cancelCommand);
}
#end_block

#method_before
private void optimizeVolumesForVirtStore(final List<GlusterVolumeEntity> volumeList) {
    if (getConfirmWindow() != null) {
        setConfirmWindow(null);
    }
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, final Object result) {
            AsyncQuery aQueryInner = new AsyncQuery();
            aQueryInner.setModel(this);
            aQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object modelInner, final Object resultInner) {
                    AsyncQuery aQueryInner1 = new AsyncQuery();
                    aQueryInner1.setModel(this);
                    aQueryInner1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object modelInner1, Object resultInner1) {
                            String optionGroupVirt = (String) result;
                            String optionOwnerUserVirt = (String) resultInner;
                            String optionOwnerGroupVirt = (String) resultInner1;
                            ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
                            for (GlusterVolumeEntity volume : volumeList) {
                                Guid volumeId = volume.getId();
                                // $NON-NLS-1$
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "group", optionGroupVirt)));
                                // $NON-NLS-1$
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "storage.owner-uid", optionOwnerUserVirt)));
                                // $NON-NLS-1$
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "storage.owner-gid", optionOwnerGroupVirt)));
                                // $NON-NLS-1$//$NON-NLS-2$
                                final GlusterVolumeOptionEntity checkOption = getOption(volumeId, "network.ping-timeout", "10");
                                List<PredicateFilter<GlusterVolumeOptionEntity>> predicaetFilters = Collections.singletonList(new PredicateFilter<GlusterVolumeOptionEntity>(new Predicate<GlusterVolumeOptionEntity>() {

                                    @Override
                                    public boolean evaluate(GlusterVolumeOptionEntity obj) {
                                        return obj.getKey().equalsIgnoreCase(checkOption.getKey());
                                    }
                                }));
                                if (!isOptionEnabledOnVolume(volume, predicaetFilters)) {
                                    // $NON-NLS-1$
                                    list.add(new GlusterVolumeOptionParameters(checkOption));
                                }
                            }
                            Frontend.getInstance().runMultipleAction(VdcActionType.SetGlusterVolumeOption, list);
                        }
                    };
                    AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionOwnerGroupVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQueryInner1);
                }
            };
            AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionOwnerUserVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQueryInner);
        }
    };
    AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionGroupVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQuery);
}
#method_after
private void optimizeVolumesForVirtStore(final List<GlusterVolumeEntity> volumeList) {
    if (getConfirmWindow() != null) {
        setConfirmWindow(null);
    }
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, final Object result) {
            AsyncQuery aQueryInner = new AsyncQuery();
            aQueryInner.setModel(this);
            aQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object modelInner, final Object resultInner) {
                    AsyncQuery aQueryInner1 = new AsyncQuery();
                    aQueryInner1.setModel(this);
                    aQueryInner1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object modelInner1, Object resultInner1) {
                            String optionGroupVirt = (String) result;
                            String optionOwnerUserVirt = (String) resultInner;
                            String optionOwnerGroupVirt = (String) resultInner1;
                            ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
                            for (GlusterVolumeEntity volume : volumeList) {
                                Guid volumeId = volume.getId();
                                // $NON-NLS-1$
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "group", optionGroupVirt)));
                                // $NON-NLS-1$
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "storage.owner-uid", optionOwnerUserVirt)));
                                // $NON-NLS-1$
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "storage.owner-gid", optionOwnerGroupVirt)));
                                // $NON-NLS-1$ $NON-NLS-2$
                                list.add(new GlusterVolumeOptionParameters(getOption(volumeId, "server.allow-insecure", "on")));
                                // $NON-NLS-1$//$NON-NLS-2$
                                final GlusterVolumeOptionEntity checkOption = getOption(volumeId, "network.ping-timeout", "10");
                                List<PredicateFilter<GlusterVolumeOptionEntity>> predicaetFilters = Collections.singletonList(new PredicateFilter<GlusterVolumeOptionEntity>(new Predicate<GlusterVolumeOptionEntity>() {

                                    @Override
                                    public boolean evaluate(GlusterVolumeOptionEntity obj) {
                                        return obj.getKey().equalsIgnoreCase(checkOption.getKey());
                                    }
                                }));
                                if (!isOptionEnabledOnVolume(volume, predicaetFilters)) {
                                    // $NON-NLS-1$
                                    list.add(new GlusterVolumeOptionParameters(checkOption));
                                }
                            }
                            Frontend.getInstance().runMultipleAction(VdcActionType.SetGlusterVolumeOption, list);
                        }
                    };
                    AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionOwnerGroupVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQueryInner1);
                }
            };
            AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionOwnerUserVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQueryInner);
        }
    };
    AsyncDataProvider.getInstance().getConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.GlusterVolumeOptionGroupVirtValue, AsyncDataProvider.getInstance().getDefaultConfigurationVersion()), aQuery);
}
#end_block

#method_before
private void stop() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().confirmStopVolume());
    model.setHelpTag(HelpTag.volume_stop);
    // $NON-NLS-1$
    model.setHashName("volume_stop");
    model.setMessage(ConstantsManager.getInstance().getConstants().stopVolumeMessage());
    model.setNote(ConstantsManager.getInstance().getConstants().stopVolumeWarning());
    if (getSelectedItems() == null) {
        return;
    }
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterVolumeEntity item : Linq.<GlusterVolumeEntity>cast(getSelectedItems())) {
        list.add(item.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("onStop", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void stop() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().confirmStopVolume());
    model.setHelpTag(HelpTag.volume_stop);
    // $NON-NLS-1$
    model.setHashName("volume_stop");
    model.setMessage(ConstantsManager.getInstance().getConstants().stopVolumeMessage());
    model.setNote(ConstantsManager.getInstance().getConstants().stopVolumeWarning());
    if (getSelectedItems() == null) {
        return;
    }
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterVolumeEntity item : Linq.<GlusterVolumeEntity>cast(getSelectedItems())) {
        list.add(item.getName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("onStop", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
@SuppressWarnings("deprecation")
@Override
public MapSqlParameterMapper<GlusterVolumeSnapshotEntity> getBatchMapper() {
    // TODO: Implement this
    throw new NotImplementedException("Unsupported operation");
}
#method_after
@Override
public MapSqlParameterMapper<GlusterVolumeSnapshotEntity> getBatchMapper() {
    return new MapSqlParameterMapper<GlusterVolumeSnapshotEntity>() {

        @Override
        public MapSqlParameterSource map(GlusterVolumeSnapshotEntity entity) {
            MapSqlParameterSource paramValue = new MapSqlParameterSource().addValue("snapshot_id", entity.getId()).addValue("snapshot_name", entity.getSnapshotName()).addValue("volume_id", entity.getVolumeId()).addValue("description", entity.getDescription()).addValue("status", EnumUtils.nameOrNull(entity.getStatus())).addValue("_create_date", entity.getCreatedAt());
            return paramValue;
        }
    };
}
#end_block

#method_before
private List<GlusterVolumeSnapshotEntity> prepareVolumeSnapshotsList(GlusterVolumeEntity volume, Object[] snapshotInfoDetails) {
    List<GlusterVolumeSnapshotEntity> newSnapshotsList = new ArrayList<GlusterVolumeSnapshotEntity>();
    for (Object obj : snapshotInfoDetails) {
        Map<String, Object> snapshotInfo = (Map<String, Object>) obj;
        Object[] snapVolumes = (Object[]) (snapshotInfo.get(SNAPVOLUMES));
        Map<String, Object> snapVolume = (Map<String, Object>) snapVolumes[0];
        GlusterVolumeSnapshotEntity newSnapshot = new GlusterVolumeSnapshotEntity();
        newSnapshot.setClusterId(volume.getClusterId());
        newSnapshot.setVolumeId(volume.getId());
        try {
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            newSnapshot.setCreatedAt(df.parse((String) snapshotInfo.get(CREATETIME)));
        } catch (Exception e) {
            log.error("Could not populate snapshots of volume '{}' on cluster '{}': {}", volume.getName(), volume.getClusterId(), e.getMessage());
            log.debug("Exception", e);
        }
        newSnapshot.setSnapshotId(Guid.createGuidFromString((String) snapshotInfo.get(UUID)));
        newSnapshot.setSnapshotName((String) snapshotInfo.get(NAME));
        newSnapshot.setDescription((String) snapshotInfo.get(DESCRIPTION));
        newSnapshot.setStatus(GlusterSnapshotStatus.from((String) snapVolume.get(STATUS)));
        newSnapshotsList.add(newSnapshot);
    }
    return newSnapshotsList;
}
#method_after
private List<GlusterVolumeSnapshotEntity> prepareVolumeSnapshotsList(Guid clusterId, Map<String, Object> snapshots) {
    List<GlusterVolumeSnapshotEntity> newSnapshotsList = new ArrayList<GlusterVolumeSnapshotEntity>();
    for (Map.Entry<String, Object> entry : snapshots.entrySet()) {
        String volumeName = entry.getKey();
        Map<String, Object> snapshotInfo = (Map<String, Object>) entry.getValue();
        Object[] volumeSnapshots = (Object[]) (snapshotInfo.get(SNAPSHOTS));
        GlusterVolumeEntity volumeEntity = getGlusterVolumeDao().getByName(clusterId, volumeName);
        for (Object snapshot : volumeSnapshots) {
            Map<String, Object> individualSnapshot = (Map<String, Object>) snapshot;
            GlusterVolumeSnapshotEntity newSnapshot = new GlusterVolumeSnapshotEntity();
            newSnapshot.setClusterId(clusterId);
            newSnapshot.setVolumeId(volumeEntity.getId());
            newSnapshot.setSnapshotId(Guid.createGuidFromString((String) individualSnapshot.get(SNAPSHOT_UUID)));
            newSnapshot.setSnapshotName((String) individualSnapshot.get(SNAPSHOT_NAME));
            newSnapshot.setDescription((String) individualSnapshot.get(DESCRIPTION));
            newSnapshot.setStatus(GlusterSnapshotStatus.from((String) individualSnapshot.get(SNAP_VOLUME_STATUS)));
            try {
                DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                newSnapshot.setCreatedAt(df.parse((String) individualSnapshot.get(CREATETIME)));
            } catch (Exception e) {
                log.info("Could not populate creation time for snapshot '{}' of volume '{}' on cluster '{}': {}", (String) snapshotInfo.get(NAME), volumeEntity.getName(), clusterId, e.getMessage());
                log.debug("Exception", e);
            }
            newSnapshotsList.add(newSnapshot);
        }
    }
    return newSnapshotsList;
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName, String snapshotName) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.info").withOptionalParameter("snapName", snapshotName).withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, volumeName, response);
}
#method_after
@Override
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterVolume.snapshotList").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, response);
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotConfigReturnForXmlRpc glusterVolumeSnapshotConfigGet(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.configGet").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotConfigReturnForXmlRpc(clusterId, response);
}
#method_after
@Override
public GlusterVolumeSnapshotConfigReturnForXmlRpc glusterVolumeSnapshotConfigGet(Guid clusterId, String volumeName) {
    JsonRpcRequest request = new RequestBuilder("GlusterSnapshot.configList").withOptionalParameter("volumeName", volumeName).build();
    Map<String, Object> response = new FutureMap(this.client, request).withIgnoreResponseKey();
    return new GlusterVolumeSnapshotConfigReturnForXmlRpc(clusterId, response);
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName, String snapshotName) {
    try {
        Map<String, Object> xmlRpcReturnValue;
        if (snapshotName == null) {
            xmlRpcReturnValue = vdsServer.glusterSnapshotInfo("", volumeName);
        } else {
            xmlRpcReturnValue = vdsServer.glusterSnapshotInfo(snapshotName, volumeName);
        }
        GlusterVolumeSnapshotInfoReturnForXmlRpc wrapper = new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, volumeName, xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#method_after
public GlusterVolumeSnapshotInfoReturnForXmlRpc glusterSnapshotInfo(Guid clusterId, String volumeName) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.glusterSnapshotInfo("", volumeName);
        GlusterVolumeSnapshotInfoReturnForXmlRpc wrapper = new GlusterVolumeSnapshotInfoReturnForXmlRpc(clusterId, xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#end_block

#method_before
@Before
public void init() {
    syncJob = Mockito.spy(GlusterSnapshotSyncJob.getInstance());
    MockitoAnnotations.initMocks(this);
    syncJob.setLogUtil(logUtil);
    doReturn(clusterDao).when(syncJob).getClusterDao();
    doReturn(volumeDao).when(syncJob).getGlusterVolumeDao();
    doReturn(snapshotDao).when(syncJob).getGlusterVolumeSnapshotDao();
    doReturn(snapshotConfigDao).when(syncJob).getGlusterVolumeSnapshotConfigDao();
    doReturn(clusterUtils).when(syncJob).getClusterUtils();
    doReturn(getClusters()).when(clusterDao).getAll();
    doReturn(getVolumes()).when(volumeDao).getByClusterId(argThat(validClusterId()));
    doReturn(getVolume(CLUSTER_ID_1, VOLUME_ID_1, VOLUME_NAME_1)).when(volumeDao).getByName(argThat(validClusterId()), argThat(validVolumeName()));
    doReturn(getServer()).when(clusterUtils).getRandomUpServer(any(Guid.class));
    doReturn(getMockLock()).when(syncJob).acquireEntityLock(any(Guid.class));
}
#method_after
@Before
public void init() {
    syncJob = Mockito.spy(GlusterSnapshotSyncJob.getInstance());
    MockitoAnnotations.initMocks(this);
    syncJob.setLogUtil(logUtil);
    doReturn(clusterDao).when(syncJob).getClusterDao();
    doReturn(volumeDao).when(syncJob).getGlusterVolumeDao();
    doReturn(snapshotDao).when(syncJob).getGlusterVolumeSnapshotDao();
    doReturn(snapshotConfigDao).when(syncJob).getGlusterVolumeSnapshotConfigDao();
    doReturn(clusterUtils).when(syncJob).getClusterUtils();
    doReturn(getClusters()).when(clusterDao).getAll();
    doReturn(getVolumes()).when(volumeDao).getByClusterId(argThat(validClusterId()));
    doReturn(getVolume(CLUSTER_ID_1, VOLUME_ID_1, VOLUME_NAME_1)).when(volumeDao).getByName(argThat(validClusterId()), argThat(validVolumeName()));
    doReturn(getServer()).when(clusterUtils).getRandomUpServer(any(Guid.class));
    doReturn(engineLock).when(syncJob).acquireVolumeSnapshotLock(any(Guid.class));
}
#end_block

#method_before
@Test
public void testSyncSnapshotsList() {
    doReturn(getExistingSnapshots()).when(snapshotDao).getAllByVolumeId(argThat(validVolumeId()));
    doReturn(getSnapshotVDSReturnVal(true)).when(syncJob).runVdsCommand(eq(VDSCommandType.GetGlusterVolumeSnapshotInfo), argThat(snapshotInfoParam()));
    syncJob.refreshSnapshotList();
    Mockito.verify(snapshotDao, times(1)).save(any(GlusterVolumeSnapshotEntity.class));
    Mockito.verify(snapshotDao, times(1)).remove(any(Guid.class));
    Mockito.verify(snapshotDao, times(1)).updateSnapshotStatus(any(Guid.class), any(GlusterSnapshotStatus.class));
}
#method_after
@Test
public void testSyncSnapshotsList() {
    doReturn(getExistingSnapshots()).when(snapshotDao).getAllByVolumeId(argThat(validVolumeId()));
    doReturn(getSnapshotVDSReturnVal(true)).when(syncJob).runVdsCommand(eq(VDSCommandType.GetGlusterVolumeSnapshotInfo), argThat(snapshotInfoParam()));
    syncJob.refreshSnapshotList();
    Mockito.verify(snapshotDao, times(1)).saveAll(any(List.class));
    Mockito.verify(snapshotDao, times(1)).removeAll(any(List.class));
    Mockito.verify(snapshotDao, times(1)).updateAllInBatch(any(List.class));
}
#end_block

#method_before
@Test
public void testSyncSnapshotConfigs() {
    doReturn(getClusterSnapMaxLimit()).when(snapshotConfigDao).getConfigByClusterIdAndName(CLUSTER_ID_1, PARAM_SNAP_MAX_LIMIT);
    doReturn(null).when(snapshotConfigDao).getConfigByClusterIdAndName(CLUSTER_ID_1, PARAM_SNAP_MAX_SOFT_LIMIT);
    doReturn(null).when(snapshotConfigDao).getConfigByClusterIdAndName(CLUSTER_ID_1, PARAM_AUTO_DELETE);
    doReturn(getVolume(CLUSTER_ID_1, VOLUME_ID_1, VOLUME_NAME_1)).when(volumeDao).getByName(CLUSTER_ID_1, VOLUME_NAME_1);
    doReturn(getVolume(CLUSTER_ID_1, VOLUME_ID_2, VOLUME_NAME_2)).when(volumeDao).getByName(CLUSTER_ID_1, VOLUME_NAME_2);
    doReturn(getVolumeSnapMaxLimit()).when(snapshotConfigDao).getConfigByVolumeIdAndName(CLUSTER_ID_1, VOLUME_ID_1, PARAM_SNAP_MAX_LIMIT);
    doReturn(null).when(snapshotConfigDao).getConfigByVolumeIdAndName(CLUSTER_ID_1, VOLUME_ID_2, PARAM_SNAP_MAX_LIMIT);
    doReturn(getSnapshotConfigVDSReturnValue()).when(syncJob).runVdsCommand(eq(VDSCommandType.GetGlusterVolumeSnapshotConfigInfo), argThat(snapshotConfigInfoParam()));
    syncJob.refreshSnapshotConfig();
    Mockito.verify(snapshotConfigDao, times(3)).save(any(GlusterVolumeSnapshotConfig.class));
    Mockito.verify(snapshotConfigDao, times(1)).updateConfigByClusterIdAndName(any(Guid.class), any(String.class), any(String.class));
    Mockito.verify(snapshotConfigDao, times(1)).updateConfigByVolumeIdIdAndName(any(Guid.class), any(Guid.class), any(String.class), any(String.class));
}
#method_after
@Test
public void testSyncSnapshotConfigs() {
    doReturn(getClusterSnapMaxLimit()).when(snapshotConfigDao).getConfigByClusterIdAndName(CLUSTER_ID_1, PARAM_SNAP_MAX_LIMIT);
    doReturn(null).when(snapshotConfigDao).getConfigByClusterIdAndName(CLUSTER_ID_1, PARAM_SNAP_MAX_SOFT_LIMIT);
    doReturn(null).when(snapshotConfigDao).getConfigByClusterIdAndName(CLUSTER_ID_1, PARAM_AUTO_DELETE);
    doReturn(getVolume(CLUSTER_ID_1, VOLUME_ID_1, VOLUME_NAME_1)).when(volumeDao).getByName(CLUSTER_ID_1, VOLUME_NAME_1);
    doReturn(getVolume(CLUSTER_ID_1, VOLUME_ID_2, VOLUME_NAME_2)).when(volumeDao).getByName(CLUSTER_ID_1, VOLUME_NAME_2);
    doReturn(getVolumeSnapMaxLimit()).when(snapshotConfigDao).getConfigByVolumeIdAndName(CLUSTER_ID_1, VOLUME_ID_1, PARAM_SNAP_MAX_LIMIT);
    doReturn(null).when(snapshotConfigDao).getConfigByVolumeIdAndName(CLUSTER_ID_1, VOLUME_ID_2, PARAM_SNAP_MAX_LIMIT);
    doReturn(getSnapshotConfigVDSReturnValue()).when(syncJob).runVdsCommand(eq(VDSCommandType.GetGlusterVolumeSnapshotConfigInfo), argThat(snapshotInfoParam()));
    syncJob.refreshSnapshotConfig();
    Mockito.verify(snapshotConfigDao, times(3)).save(any(GlusterVolumeSnapshotConfig.class));
    Mockito.verify(snapshotConfigDao, times(1)).updateConfigByClusterIdAndName(any(Guid.class), any(String.class), any(String.class));
    Mockito.verify(snapshotConfigDao, times(1)).updateConfigByVolumeIdAndName(any(Guid.class), any(Guid.class), any(String.class), any(String.class));
}
#end_block

#method_before
private ArgumentMatcher<GlusterVolumeSnapshotInfoVDSParameters> snapshotInfoParam() {
    return new ArgumentMatcher<GlusterVolumeSnapshotInfoVDSParameters>() {

        @Override
        public boolean matches(Object argument) {
            if (!(argument instanceof GlusterVolumeSnapshotInfoVDSParameters)) {
                return false;
            }
            return ((GlusterVolumeSnapshotInfoVDSParameters) argument).getClusterId().equals(CLUSTER_ID_1);
        }
    };
}
#method_after
private ArgumentMatcher<GlusterVolumeSnapshotVDSParameters> snapshotInfoParam() {
    return new ArgumentMatcher<GlusterVolumeSnapshotVDSParameters>() {

        @Override
        public boolean matches(Object argument) {
            if (!(argument instanceof GlusterVolumeSnapshotVDSParameters)) {
                return false;
            }
            return ((GlusterVolumeSnapshotVDSParameters) argument).getClusterId().equals(CLUSTER_ID_1);
        }
    };
}
#end_block

#method_before
private GlusterSnapshotConfigInfo getSnapshotConfigInfo() {
    GlusterSnapshotConfigInfo config = new GlusterSnapshotConfigInfo();
    config.setClusterId(CLUSTER_ID_1);
    config.setSystemSnapMaxHardLimit(200);
    config.setSystemSoftLimitPcnt("90%");
    config.setAutoDeleteEnabled(false);
    List<VolumeSnapshotConfigInfo> volumeConfigs = new ArrayList<VolumeSnapshotConfigInfo>();
    GlusterSnapshotConfigInfo.VolumeSnapshotConfigInfo volConf1 = config.new VolumeSnapshotConfigInfo();
    volConf1.setVolumeName(VOLUME_NAME_1);
    volConf1.setVolumeSnapMaxHardLimit(30);
    volumeConfigs.add(volConf1);
    GlusterSnapshotConfigInfo.VolumeSnapshotConfigInfo volConf2 = config.new VolumeSnapshotConfigInfo();
    volConf2.setVolumeName(VOLUME_NAME_2);
    volConf2.setVolumeSnapMaxHardLimit(50);
    volumeConfigs.add(volConf2);
    config.setVolumeConfigList(volumeConfigs);
    return config;
}
#method_after
private GlusterSnapshotConfigInfo getSnapshotConfigInfo() {
    GlusterSnapshotConfigInfo config = new GlusterSnapshotConfigInfo();
    Map<String, String> clusterConfigs = new HashMap<String, String>();
    clusterConfigs.put("snap-max-hard-limit", "200");
    clusterConfigs.put("snap-max-soft-limit", "90%");
    clusterConfigs.put("auto-delete", "enable");
    config.setClusterConfigOptions(clusterConfigs);
    Map<String, Map<String, String>> volumeConfigs = new HashMap<String, Map<String, String>>();
    Map<String, String> volConf1 = new HashMap<String, String>();
    volConf1.put("snap-max-hard-limit", "30");
    volumeConfigs.put(VOLUME_NAME_1, volConf1);
    Map<String, String> volConf2 = new HashMap<String, String>();
    volConf2.put("snap-max-hard-limit", "50");
    volumeConfigs.put(VOLUME_NAME_2, volConf2);
    config.setVolumeConfigOptions(volumeConfigs);
    return config;
}
#end_block

#method_before
private List<VDSGroup> getClusters() {
    List<VDSGroup> list = new ArrayList<>();
    VDSGroup cluster = new VDSGroup();
    cluster.setId(CLUSTER_ID_1);
    cluster.setName("cluster");
    cluster.setGlusterService(true);
    cluster.setVirtService(false);
    cluster.setcompatibility_version(Version.v3_5);
    list.add(cluster);
    VDSGroup cluster1 = new VDSGroup();
    cluster1.setId(CLUSTER_ID_2);
    cluster1.setName("cluster1");
    cluster1.setGlusterService(true);
    cluster1.setVirtService(false);
    cluster1.setcompatibility_version(Version.v3_4);
    list.add(cluster1);
    return list;
}
#method_after
private List<VDSGroup> getClusters() {
    List<VDSGroup> list = new ArrayList<>();
    VDSGroup cluster = new VDSGroup();
    cluster.setId(CLUSTER_ID_1);
    cluster.setName("cluster");
    cluster.setGlusterService(true);
    cluster.setVirtService(false);
    cluster.setCompatibilityVersion(Version.v3_5);
    list.add(cluster);
    VDSGroup cluster1 = new VDSGroup();
    cluster1.setId(CLUSTER_ID_2);
    cluster1.setName("cluster1");
    cluster1.setGlusterService(true);
    cluster1.setVirtService(false);
    cluster1.setCompatibilityVersion(Version.v3_4);
    list.add(cluster1);
    return list;
}
#end_block

#method_before
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterVolumeGeoRepStatusDetailFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepStopFailedException:
        case GlusterSnapshotException:
        case GlusterSnapshotCreateFailedException:
        case GlusterSnapshotInfoFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#method_after
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeGeoRepSessionStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeGeoRepSessionPauseFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeGeoRepSessionResumeFailed:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterGeoRepConfigFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepSessionStopFailed:
        case GlusterSnapshotException:
        case GlusterSnapshotInfoFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#end_block

#method_before
@Override
protected void executeVdsBrokerCommand() {
    Guid clusterId = getParameters().getClusterId();
    String volumeName = getParameters().getVolumeName();
    String snapshotName = getParameters().getSnapshotName();
    infoReturn = getBroker().glusterSnapshotInfo(clusterId, volumeName, snapshotName);
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        setReturnValue(infoReturn.getGlusterVolumeSnapshotInfo().getSnapshots());
    }
}
#method_after
@Override
protected void executeVdsBrokerCommand() {
    Guid clusterId = getParameters().getClusterId();
    String volumeName = getParameters().getVolumeName();
    infoReturn = getBroker().glusterSnapshotInfo(clusterId, volumeName);
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        setReturnValue(infoReturn.getSnapshots());
    }
}
#end_block

#method_before
public static void init() {
    if (!glusterModeSupported()) {
        log.debug("Gluster mode not supported. Will not schedule jobs for refreshing Gluster data.");
        return;
    }
    log.debug("Initializing Gluster Jobs Manager");
    SchedulerUtil scheduler = SchedulerUtilQuartzImpl.getInstance();
    scheduler.scheduleAFixedDelayJob(GlusterSyncJob.getInstance(), "refreshLightWeightData", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateLight), getRefreshRate(ConfigValues.GlusterRefreshRateLight), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterSyncJob.getInstance(), "refreshHeavyWeightData", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateHeavy), getRefreshRate(ConfigValues.GlusterRefreshRateHeavy), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterHookSyncJob.getInstance(), "refreshHooks", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateHooks), getRefreshRate(ConfigValues.GlusterRefreshRateHooks), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterServiceSyncJob.getInstance(), "refreshGlusterServices", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateLight), getRefreshRate(ConfigValues.GlusterRefreshRateLight), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterTasksSyncJob.getInstance(), "gluster_async_task_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateTasks), getRefreshRate(ConfigValues.GlusterRefreshRateTasks), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterGeoRepSyncJob.getInstance(), "gluster_georep_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepDiscovery), getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepDiscovery), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterSnapshotSyncJob.getInstance(), "gluster_snapshot_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateSnapshotDiscovery), getRefreshRate(ConfigValues.GlusterRefreshRateSnapshotDiscovery), TimeUnit.SECONDS);
}
#method_after
public static void init() {
    if (!glusterModeSupported()) {
        log.debug("Gluster mode not supported. Will not schedule jobs for refreshing Gluster data.");
        return;
    }
    log.debug("Initializing Gluster Jobs Manager");
    SchedulerUtil scheduler = SchedulerUtilQuartzImpl.getInstance();
    scheduler.scheduleAFixedDelayJob(GlusterSyncJob.getInstance(), "refreshLightWeightData", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateLight), getRefreshRate(ConfigValues.GlusterRefreshRateLight), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterSyncJob.getInstance(), "refreshHeavyWeightData", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateHeavy), getRefreshRate(ConfigValues.GlusterRefreshRateHeavy), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterHookSyncJob.getInstance(), "refreshHooks", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateHooks), getRefreshRate(ConfigValues.GlusterRefreshRateHooks), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterServiceSyncJob.getInstance(), "refreshGlusterServices", new Class[0], new Object[0], getRefreshRate(ConfigValues.GlusterRefreshRateLight), getRefreshRate(ConfigValues.GlusterRefreshRateLight), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterTasksSyncJob.getInstance(), "gluster_async_task_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateTasks), getRefreshRate(ConfigValues.GlusterRefreshRateTasks), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterGeoRepSyncJob.getInstance(), "gluster_georep_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepDiscoveryInSecs), getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepDiscoveryInSecs), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterGeoRepSyncJob.getInstance(), "gluster_georepstatus_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepStatusInSecs), getRefreshRate(ConfigValues.GlusterRefreshRateGeoRepStatusInSecs), TimeUnit.SECONDS);
    scheduler.scheduleAFixedDelayJob(GlusterSnapshotSyncJob.getInstance(), "gluster_snapshot_poll_event", new Class[0], new Class[0], getRefreshRate(ConfigValues.GlusterRefreshRateSnapshotDiscovery), getRefreshRate(ConfigValues.GlusterRefreshRateSnapshotDiscovery), TimeUnit.SECONDS);
}
#end_block

#method_before
@Override
protected void executeVdsBrokerCommand() {
    GlusterSnapshotConfigInfo config = new GlusterSnapshotConfigInfo();
    Guid clusterId = getParameters().getClusterId();
    String volumeName = getParameters().getVolumeName();
    infoReturn = getBroker().glusterVolumeSnapshotConfigGet(clusterId, volumeName);
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        config = infoReturn.getGlusterSnapshotConfigInfo();
        setReturnValue(config);
    }
}
#method_after
@Override
protected void executeVdsBrokerCommand() {
    Guid clusterId = getParameters().getClusterId();
    String volumeName = getParameters().getVolumeName();
    infoReturn = getBroker().glusterVolumeSnapshotConfigGet(clusterId, volumeName);
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        setReturnValue(infoReturn.getGlusterSnapshotConfigInfo());
    }
}
#end_block

#method_before
private List<GlusterSnapshotConfigInfo.VolumeSnapshotConfigInfo> parseVolumeConfigDetails(Object[] configs) {
    List<GlusterSnapshotConfigInfo.VolumeSnapshotConfigInfo> volumeConfigs = new ArrayList<GlusterSnapshotConfigInfo.VolumeSnapshotConfigInfo>();
    for (Object config : configs) {
        GlusterSnapshotConfigInfo.VolumeSnapshotConfigInfo cfg = (new GlusterSnapshotConfigInfo()).new VolumeSnapshotConfigInfo();
        Map<String, Object> volConfig = (Map<String, Object>) config;
        cfg.setVolumeName(volConfig.get(NAME) == null ? "" : (String) volConfig.get(NAME));
        cfg.setVolumeSnapMaxHardLimit(volConfig.get(EFFECTIVE_HARD_LIMIT) == null ? 0 : Integer.parseInt((String) volConfig.get(EFFECTIVE_HARD_LIMIT)));
        volumeConfigs.add(cfg);
    }
    return volumeConfigs;
}
#method_after
private Map<String, Map<String, String>> parseVolumeConfigDetails(Map<String, Object> configs) {
    Map<String, Map<String, String>> volumeConfigs = new HashMap<String, Map<String, String>>();
    for (Map.Entry<String, Object> entry : configs.entrySet()) {
        Map<String, Object> fetchedVolumeConfig = (Map<String, Object>) entry.getValue();
        Map<String, String> volConfig = new HashMap<String, String>();
        for (Map.Entry<String, Object> config : fetchedVolumeConfig.entrySet()) {
            String value = (String) config.getValue();
            volConfig.put(config.getKey(), value);
        }
        volumeConfigs.put(entry.getKey(), volConfig);
    }
    return volumeConfigs;
}
#end_block

#method_before
public void refreshSnapshotList() {
    // get all clusters
    List<VDSGroup> clusters = getClusterDao().getAll();
    for (VDSGroup cluster : clusters) {
        refreshSnapshotsInCluster(cluster, false);
    }
}
#method_after
public void refreshSnapshotList() {
    // get all clusters
    List<VDSGroup> clusters = getClusterDao().getAll();
    for (VDSGroup cluster : clusters) {
        refreshSnapshotsInCluster(cluster);
    }
}
#end_block

#method_before
public void refreshSnapshotConfig() {
    // get all clusters
    List<VDSGroup> clusters = getClusterDao().getAll();
    for (VDSGroup cluster : clusters) {
        refreshSnapshotConfigInCluster(cluster, false);
    }
}
#method_after
public void refreshSnapshotConfig() {
    // get all clusters
    List<VDSGroup> clusters = getClusterDao().getAll();
    for (VDSGroup cluster : clusters) {
        refreshSnapshotConfigInCluster(cluster);
    }
}
#end_block

#method_before
private void refreshSnapshotsInCluster(VDSGroup cluster, boolean throwError) {
    if (!supportsGlusterSnapshotFeature(cluster)) {
        return;
    }
    final VDS upServer = getClusterUtils().getRandomUpServer(cluster.getId());
    List<GlusterVolumeEntity> volumes = getGlusterVolumeDao().getByClusterId(cluster.getId());
    if (volumes != null && volumes.size() > 0) {
        List<Callable<Pair<GlusterVolumeEntity, VDSReturnValue>>> taskList = new ArrayList<Callable<Pair<GlusterVolumeEntity, VDSReturnValue>>>();
        for (final GlusterVolumeEntity volume : volumes) {
            taskList.add(new Callable<Pair<GlusterVolumeEntity, VDSReturnValue>>() {

                @Override
                public Pair<GlusterVolumeEntity, VDSReturnValue> call() throws Exception {
                    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeSnapshotInfo, new GlusterVolumeSnapshotInfoVDSParameters(volume.getClusterId(), upServer.getId(), volume.getName(), null));
                    return new Pair<GlusterVolumeEntity, VDSReturnValue>(volume, returnValue);
                }
            });
        }
        List<Pair<GlusterVolumeEntity, VDSReturnValue>> pairResults = ThreadPoolUtil.invokeAll(taskList);
        try {
            addOrUpdateSnapshots(cluster.getId(), pairResults);
        } catch (VdcBLLException e) {
            if (throwError) {
                throw e;
            }
        }
    }
}
#method_after
private void refreshSnapshotsInCluster(VDSGroup cluster) {
    if (!supportsGlusterSnapshotFeature(cluster)) {
        return;
    }
    final VDS upServer = getClusterUtils().getRandomUpServer(cluster.getId());
    if (upServer == null) {
        log.info("No UP server found in cluster '{}' for snapshot monitoring", cluster.getName());
        return;
    }
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeSnapshotInfo, new GlusterVolumeSnapshotVDSParameters(upServer.getId(), cluster.getId(), null));
    if (returnValue.getSucceeded()) {
        addOrUpdateSnapshots(cluster.getId(), (ArrayList<GlusterVolumeSnapshotEntity>) returnValue.getReturnValue());
    } else {
        log.error("VDS Error {}", returnValue.getVdsError().getMessage());
        log.debug("VDS Error {}", returnValue.getVdsError());
    }
}
#end_block

#method_before
private void refreshSnapshotConfigInCluster(VDSGroup cluster, boolean throwError) {
    if (!supportsGlusterSnapshotFeature(cluster)) {
        return;
    }
    final VDS upServer = getClusterUtils().getRandomUpServer(cluster.getId());
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeSnapshotConfigInfo, new GlusterVolumeSnapshotConfigVDSParameters(cluster.getId(), upServer.getId(), null));
    try {
        addOrUpdateSnapshotsConfig(cluster.getId(), (GlusterSnapshotConfigInfo) returnValue.getReturnValue());
    } catch (VdcBLLException e) {
        if (throwError) {
            throw e;
        }
    }
}
#method_after
private void refreshSnapshotConfigInCluster(VDSGroup cluster) {
    if (!supportsGlusterSnapshotFeature(cluster)) {
        return;
    }
    final VDS upServer = getClusterUtils().getRandomUpServer(cluster.getId());
    if (upServer == null) {
        log.info("No UP server found in cluster '{}' for snapshot configurations monitoring", cluster.getName());
        return;
    }
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeSnapshotConfigInfo, new GlusterVolumeSnapshotVDSParameters(upServer.getId(), cluster.getId(), null));
    if (returnValue.getSucceeded()) {
        addOrUpdateSnapshotsConfig(cluster.getId(), (GlusterSnapshotConfigInfo) returnValue.getReturnValue());
    } else {
        log.error("VDS Error {}", returnValue.getVdsError().getMessage());
        log.debug("VDS Error {}", returnValue.getVdsError());
    }
}
#end_block

#method_before
private void addOrUpdateSnapshots(Guid clusterId, List<Pair<GlusterVolumeEntity, VDSReturnValue>> pairResults) {
    try {
        for (Pair<GlusterVolumeEntity, VDSReturnValue> entry : pairResults) {
            GlusterVolumeEntity volume = entry.getFirst();
            List<GlusterVolumeSnapshotEntity> existingSnapshots = getGlusterVolumeSnapshotDao().getAllByVolumeId(volume.getId());
            List<GlusterVolumeSnapshotEntity> fetchedSnapshots = (ArrayList<GlusterVolumeSnapshotEntity>) entry.getSecond().getReturnValue();
            // form the maps for fetched and existing snapshots
            Map<Guid, GlusterVolumeSnapshotEntity> existingSnapshotsMap = new HashMap<Guid, GlusterVolumeSnapshotEntity>();
            for (final GlusterVolumeSnapshotEntity existingSnapshot : existingSnapshots) {
                existingSnapshotsMap.put(existingSnapshot.getSnapshotId(), existingSnapshot);
            }
            Map<Guid, GlusterVolumeSnapshotEntity> fetchedSnapshotsMap = new HashMap<Guid, GlusterVolumeSnapshotEntity>();
            for (final GlusterVolumeSnapshotEntity fetchedSnapshot : fetchedSnapshots) {
                fetchedSnapshotsMap.put(fetchedSnapshot.getId(), fetchedSnapshot);
            }
            List<GlusterVolumeSnapshotEntity> updatedSnapshots = new ArrayList<GlusterVolumeSnapshotEntity>();
            List<GlusterVolumeSnapshotEntity> newlyAddedSnapshots = new ArrayList<GlusterVolumeSnapshotEntity>();
            List<GlusterVolumeSnapshotEntity> deletedSnapshots = new ArrayList<GlusterVolumeSnapshotEntity>();
            for (final GlusterVolumeSnapshotEntity fetchedSnapshot : fetchedSnapshots) {
                GlusterVolumeSnapshotEntity existingSnapshot = existingSnapshotsMap.get(fetchedSnapshot.getId());
                if (existingSnapshot != null) {
                    existingSnapshot.setStatus(fetchedSnapshot.getStatus());
                    updatedSnapshots.add(existingSnapshot);
                } else {
                    newlyAddedSnapshots.add(fetchedSnapshot);
                }
            }
            for (final GlusterVolumeSnapshotEntity existingSnapshot : existingSnapshots) {
                if (fetchedSnapshotsMap.get(existingSnapshot.getId()) == null) {
                    deletedSnapshots.add(existingSnapshot);
                }
            }
            // update snapshot details
            try (EngineLock lock = acquireEntityLock(volume.getId())) {
                saveNewSnapshots(newlyAddedSnapshots);
                updateSnapshots(updatedSnapshots);
                deleteSnapshots(deletedSnapshots);
            }
        }
    } catch (Exception e) {
        log.error("Exception in sync", e);
        throw new VdcBLLException(VdcBllErrors.GlusterSnapshotInfoFailedException, e.getLocalizedMessage());
    }
}
#method_after
private void addOrUpdateSnapshots(Guid clusterId, List<GlusterVolumeSnapshotEntity> fetchedSnapshots) {
    Map<Guid, GlusterVolumeSnapshotEntity> fetchedSnapshotsMap = new HashMap<>();
    for (GlusterVolumeSnapshotEntity fetchedSnapshot : fetchedSnapshots) {
        fetchedSnapshotsMap.put(fetchedSnapshot.getId(), fetchedSnapshot);
    }
    List<GlusterVolumeSnapshotEntity> existingSnapshots = getGlusterVolumeSnapshotDao().getAllByClusterId(clusterId);
    Map<Guid, GlusterVolumeSnapshotEntity> existingSnapshotsMap = new HashMap<>();
    for (GlusterVolumeSnapshotEntity existingSnapshot : existingSnapshots) {
        existingSnapshotsMap.put(existingSnapshot.getId(), existingSnapshot);
    }
    List<GlusterVolumeSnapshotEntity> updatedSnapshots = new ArrayList<>();
    List<GlusterVolumeSnapshotEntity> newlyAddedSnapshots = new ArrayList<>();
    List<GlusterVolumeSnapshotEntity> deletedSnapshots = new ArrayList<>();
    for (GlusterVolumeSnapshotEntity fetchedSnapshot : fetchedSnapshots) {
        GlusterVolumeSnapshotEntity correspondingExistingSnapshot = existingSnapshotsMap.get(fetchedSnapshot.getId());
        if (correspondingExistingSnapshot == null) {
            newlyAddedSnapshots.add(fetchedSnapshot);
        } else if (correspondingExistingSnapshot.getStatus() != fetchedSnapshot.getStatus()) {
            correspondingExistingSnapshot.setStatus(fetchedSnapshot.getStatus());
            updatedSnapshots.add(correspondingExistingSnapshot);
        }
    }
    for (GlusterVolumeSnapshotEntity existingSnapshot : existingSnapshots) {
        GlusterVolumeSnapshotEntity correspondingFetchedSnapshot = fetchedSnapshotsMap.get(existingSnapshot.getId());
        if (correspondingFetchedSnapshot == null) {
            deletedSnapshots.add(existingSnapshot);
        }
    }
    // update snapshot details
    try (EngineLock lock = acquireVolumeSnapshotLock(clusterId)) {
        saveNewSnapshots(newlyAddedSnapshots);
        updateSnapshots(updatedSnapshots);
        deleteSnapshots(deletedSnapshots);
    } catch (Exception e) {
        log.error("Exception ocuured while adding/updating snapshots from CLI - '{}'", e.getMessage());
        log.debug("Exception", e);
        throw new VdcBLLException(VdcBllErrors.GlusterSnapshotInfoFailedException, e.getLocalizedMessage());
    }
}
#end_block

#method_before
private void addOrUpdateSnapshotsConfig(Guid clusterId, GlusterSnapshotConfigInfo configInfo) {
    try (EngineLock lock = acquireEntityLock(clusterId)) {
        addOrUpdateClusterConfig(clusterId, "snap-max-hard-limit", configInfo.getSystemSnapMaxHardLimit().toString());
        addOrUpdateClusterConfig(clusterId, "snap-max-soft-limit", configInfo.getSystemSoftLimitPcnt());
        addOrUpdateClusterConfig(clusterId, "auto-delete", configInfo.isAutoDeleteEnabled() ? "enable" : "disable");
    }
    List<GlusterSnapshotConfigInfo.VolumeSnapshotConfigInfo> volumeConfigs = configInfo.getVolumeConfigList();
    for (GlusterSnapshotConfigInfo.VolumeSnapshotConfigInfo volumeConfig : volumeConfigs) {
        GlusterVolumeEntity volume = getGlusterVolumeDao().getByName(clusterId, volumeConfig.getVolumeName());
        try (EngineLock lock = acquireEntityLock(volume.getId())) {
            addOrUpdateVolumeConfig(clusterId, volume.getId(), "snap-max-hard-limit", volumeConfig.getVolumeSnapMaxHardLimit().toString());
        }
    }
}
#method_after
private void addOrUpdateSnapshotsConfig(Guid clusterId, GlusterSnapshotConfigInfo configInfo) {
    try (EngineLock lock = acquireVolumeSnapshotLock(clusterId)) {
        for (Map.Entry<String, String> entry : configInfo.getClusterConfigOptions().entrySet()) {
            if (entry.getValue() != null) {
                addOrUpdateClusterConfig(clusterId, entry.getKey(), entry.getValue());
            }
        }
    } catch (Exception e) {
        log.error("Exception ocuured while adding/updating snapshots configurations from CLI - '{}'", e.getMessage());
        log.debug("Exception", e);
        throw new VdcBLLException(VdcBllErrors.GlusterSnapshotInfoFailedException, e.getLocalizedMessage());
    }
    Map<String, Map<String, String>> volumeConfigs = configInfo.getVolumeConfigOptions();
    for (Map.Entry<String, Map<String, String>> entry : volumeConfigs.entrySet()) {
        GlusterVolumeEntity volume = getGlusterVolumeDao().getByName(clusterId, entry.getKey());
        if (volume == null) {
            continue;
        }
        try (EngineLock lock = acquireVolumeSnapshotLock(volume.getId())) {
            Map<String, String> volumeConfig = entry.getValue();
            if (volumeConfig != null) {
                for (Map.Entry<String, String> entry1 : volumeConfig.entrySet()) {
                    if (entry.getValue() != null) {
                        addOrUpdateVolumeConfig(clusterId, volume.getId(), entry1.getKey(), entry1.getValue());
                    }
                }
            }
        } catch (Exception e) {
            log.error("Exception ocuured while adding/updating snapshots configurations from CLI - '{}'", e.getMessage());
            log.debug("Exception", e);
            throw new VdcBLLException(VdcBllErrors.GlusterSnapshotInfoFailedException, e.getLocalizedMessage());
        }
    }
}
#end_block

#method_before
private void addOrUpdateClusterConfig(Guid clusterId, String paramName, String paramValue) {
    GlusterVolumeSnapshotConfig param = new GlusterVolumeSnapshotConfig();
    param.setClusterId(clusterId);
    param.setVolumeId(null);
    param.setParamName(paramName);
    param.setParamValue(paramValue);
    GlusterVolumeSnapshotConfig existingParamDetail = getGlusterVolumeSnapshotConfigDao().getConfigByClusterIdAndName(clusterId, paramName);
    if (existingParamDetail == null) {
        getGlusterVolumeSnapshotConfigDao().save(param);
    } else {
        getGlusterVolumeSnapshotConfigDao().updateConfigByClusterIdAndName(clusterId, paramName, paramValue);
    }
}
#method_after
private void addOrUpdateClusterConfig(Guid clusterId, String paramName, String paramValue) {
    GlusterVolumeSnapshotConfig param = new GlusterVolumeSnapshotConfig();
    param.setClusterId(clusterId);
    param.setVolumeId(null);
    param.setParamName(paramName);
    param.setParamValue(paramValue);
    GlusterVolumeSnapshotConfig existingParamDetail = getGlusterVolumeSnapshotConfigDao().getConfigByClusterIdAndName(clusterId, paramName);
    if (existingParamDetail == null) {
        getGlusterVolumeSnapshotConfigDao().save(param);
    } else if (!(existingParamDetail.getParamValue().equals(paramValue))) {
        getGlusterVolumeSnapshotConfigDao().updateConfigByClusterIdAndName(clusterId, paramName, paramValue);
    }
}
#end_block

#method_before
private void addOrUpdateVolumeConfig(Guid clusterId, Guid volumeId, String paramName, String paramValue) {
    GlusterVolumeSnapshotConfig cfg = new GlusterVolumeSnapshotConfig();
    cfg.setClusterId(clusterId);
    cfg.setVolumeId(volumeId);
    cfg.setParamName(paramName);
    cfg.setParamValue(paramValue);
    GlusterVolumeSnapshotConfig existingVolumeSnapMaxLimit = getGlusterVolumeSnapshotConfigDao().getConfigByVolumeIdAndName(clusterId, volumeId, paramName);
    if (existingVolumeSnapMaxLimit == null) {
        getGlusterVolumeSnapshotConfigDao().save(cfg);
    } else {
        getGlusterVolumeSnapshotConfigDao().updateConfigByVolumeIdIdAndName(clusterId, volumeId, paramName, paramValue);
    }
}
#method_after
private void addOrUpdateVolumeConfig(Guid clusterId, Guid volumeId, String paramName, String paramValue) {
    GlusterVolumeSnapshotConfig cfg = new GlusterVolumeSnapshotConfig();
    cfg.setClusterId(clusterId);
    cfg.setVolumeId(volumeId);
    cfg.setParamName(paramName);
    cfg.setParamValue(paramValue);
    GlusterVolumeSnapshotConfig existingParamDetail = getGlusterVolumeSnapshotConfigDao().getConfigByVolumeIdAndName(clusterId, volumeId, paramName);
    if (existingParamDetail == null) {
        getGlusterVolumeSnapshotConfigDao().save(cfg);
    } else if (!(existingParamDetail.getParamValue().equals(paramValue))) {
        getGlusterVolumeSnapshotConfigDao().updateConfigByVolumeIdAndName(clusterId, volumeId, paramName, paramValue);
    }
}
#end_block

#method_before
private void saveNewSnapshots(List<GlusterVolumeSnapshotEntity> snaphosts) {
    for (GlusterVolumeSnapshotEntity snapshot : snaphosts) {
        getGlusterVolumeSnapshotDao().save(snapshot);
    }
}
#method_after
private void saveNewSnapshots(List<GlusterVolumeSnapshotEntity> snapshots) {
    getGlusterVolumeSnapshotDao().saveAll(snapshots);
}
#end_block

#method_before
private void updateSnapshots(List<GlusterVolumeSnapshotEntity> snapshots) {
    for (GlusterVolumeSnapshotEntity snapshot : snapshots) {
        getGlusterVolumeSnapshotDao().updateSnapshotStatus(snapshot.getId(), snapshot.getStatus());
    }
}
#method_after
private void updateSnapshots(List<GlusterVolumeSnapshotEntity> snapshots) {
    getGlusterVolumeSnapshotDao().updateAllInBatch(snapshots);
}
#end_block

#method_before
private void deleteSnapshots(List<GlusterVolumeSnapshotEntity> snaphosts) {
    for (GlusterVolumeSnapshotEntity snapshot : snaphosts) {
        getGlusterVolumeSnapshotDao().remove(snapshot.getId());
    }
}
#method_after
private void deleteSnapshots(List<GlusterVolumeSnapshotEntity> snaphosts) {
    List<Guid> deletedIds = new ArrayList<>();
    for (GlusterVolumeSnapshotEntity snapshot : snaphosts) {
        deletedIds.add(snapshot.getId());
    }
    getGlusterVolumeSnapshotDao().removeAll(deletedIds);
}
#end_block

#method_before
private boolean supportsGlusterSnapshotFeature(VDSGroup cluster) {
    return cluster.supportsGlusterService() && GlusterFeatureSupported.glusterSnapshot(cluster.getcompatibility_version());
}
#method_after
private boolean supportsGlusterSnapshotFeature(VDSGroup cluster) {
    return cluster.supportsGlusterService() && GlusterFeatureSupported.glusterSnapshot(cluster.getCompatibilityVersion());
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterSnapshotConfigInfo)) {
        return false;
    }
    GlusterSnapshotConfigInfo configInfo = (GlusterSnapshotConfigInfo) obj;
    if (!ObjectUtils.objectsEqual(getClusterId(), configInfo.getClusterId())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(getSystemSnapMaxHardLimit(), configInfo.getSystemSnapMaxHardLimit())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(getSystemSoftLimitPcnt(), configInfo.getSystemSoftLimitPcnt())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(isAutoDeleteEnabled(), configInfo.isAutoDeleteEnabled())) {
        return false;
    }
    if (!ListUtils.listsEqual(getVolumeConfigList(), configInfo.getVolumeConfigList())) {
        return false;
    }
    return true;
}
#method_after
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterSnapshotConfigInfo)) {
        return false;
    }
    GlusterSnapshotConfigInfo configInfo = (GlusterSnapshotConfigInfo) obj;
    if (!ObjectUtils.objectsEqual(getClusterConfigOptions(), configInfo.getClusterConfigOptions())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(getVolumeConfigOptions(), configInfo.getVolumeConfigOptions())) {
        return false;
    }
    return true;
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((getClusterId() == null) ? 0 : getClusterId().hashCode());
    result = prime * result + ((getSystemSnapMaxHardLimit() == null) ? 0 : getSystemSnapMaxHardLimit().hashCode());
    result = prime * result + ((getSystemSoftLimitPcnt() == null) ? 0 : getSystemSoftLimitPcnt().hashCode());
    result = prime * result + ((isAutoDeleteEnabled() == null) ? 0 : isAutoDeleteEnabled().hashCode());
    result = prime * result + ((getVolumeConfigList() == null) ? 0 : getVolumeConfigList().hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((getClusterConfigOptions() == null) ? 0 : getClusterConfigOptions().hashCode());
    result = prime * result + ((getVolumeConfigOptions() == null) ? 0 : getVolumeConfigOptions().hashCode());
    return result;
}
#end_block

#method_before
@Override
protected void executeVdsBrokerCommand() {
    status = getBroker().glusterVolumeGeoRepConfigSetDefault(getParameters().getVolumeName(), getParameters().getSlaveHost(), getParameters().getSlaveVolume(), getParameters().getConfigKey());
    proceedProxyReturnValue();
}
#method_after
@Override
protected void executeVdsBrokerCommand() {
    status = getBroker().glusterVolumeGeoRepConfigReset(getParameters().getVolumeName(), getParameters().getSlaveHost(), getParameters().getSlaveVolume(), getParameters().getConfigKey());
    proceedProxyReturnValue();
}
#end_block

#method_before
@Override
protected void executeVdsBrokerCommand() {
    Guid sessionId = getParameters().getSessionId();
    GlusterGeoRepDao geoRepDao = DbFacade.getInstance().getGlusterGeoRepDao();
    List<GlusterGeoRepSessionConfiguration> existingSessionConfigs = geoRepDao.getGeoRepSessionConfig(sessionId);
    GlusterGeoRepSession session = geoRepDao.getById(sessionId);
    result = getBroker().glusterVolumeGeoRepConfigList(session.getMasterVolumeName(), session.getSlaveHostName(), session.getSlaveVolumeName());
    proceedProxyReturnValue();
    List<GlusterGeoRepSessionConfiguration> sessionConfigs = result.getSessionConfig();
    if (!existingSessionConfigs.containsAll(sessionConfigs)) {
        for (GlusterGeoRepSessionConfiguration geoRepSessionConfig : sessionConfigs) {
            if (!existingSessionConfigs.contains(geoRepSessionConfig)) {
                if (prepareMapOfExistingConfigs(existingSessionConfigs).containsKey(geoRepSessionConfig.getKey())) {
                    geoRepDao.updateConfig(geoRepSessionConfig);
                } else {
                    geoRepDao.saveConfig(geoRepSessionConfig);
                }
            }
        }
    }
    setReturnValue(sessionConfigs);
}
#method_after
@Override
protected void executeVdsBrokerCommand() {
    result = getBroker().glusterVolumeGeoRepConfigList(getParameters().getVolumeName(), getParameters().getSlaveHost(), getParameters().getSlaveVolume());
    proceedProxyReturnValue();
    List<GlusterGeoRepSessionConfiguration> sessionConfigs = result.getSessionConfig();
    setReturnValue(sessionConfigs);
}
#end_block

#method_before
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterVolumeGeoRepStatusDetailFailed:
        case GlusterGeoRepConfigSetDefaultFailed:
        case GlusterGeoRepConfigListFailed:
        case GlusterGeoRepConfigSetFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepStopFailedException:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#method_after
@Override
protected void proceedProxyReturnValue() {
    VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterGeneralException:
        case GlusterPermissionDeniedException:
        case GlusterSyntaxErrorException:
        case GlusterMissingArgumentException:
        case GlusterCmdExecFailedException:
        case GlusterXmlErrorException:
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case AddBricksToGlusterVolumeFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeGeoRepSessionStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterVolumeListFailed:
        case GlusterVolumeOptionInfoFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeProfileStartFailed:
        case GlusterVolumeGeoRepSessionPauseFailed:
        case GlusterVolumeProfileStopFailed:
        case GlusterAddHostFailed:
        case GlusterHostRemoveFailedException:
        case GlusterHostIsNotPartOfCluster:
        case GlusterPeerListFailed:
        case GlusterVolumeStatusFailed:
        case GlusterVolumeProfileInfoFailed:
        case GlusterHookFailed:
        case GlusterHookEnableFailed:
        case GlusterHookDisableFailed:
        case GlusterHookNotFound:
        case GlusterHookListException:
        case GlusterHostUUIDNotFound:
        case GlusterHookConflict:
        case GlusterServicesListFailed:
        case GlusterHookUpdateFailed:
        case GlusterHookAlreadyExists:
        case GlusterHookChecksumMismatch:
        case GlusterHookAddFailed:
        case GlusterHookRemoveFailed:
        case GlusterServicesActionFailed:
        case GlusterServiceActionNotSupported:
        case GlusterVolumeRebalanceStopFailed:
        case GlusterVolumeStatusAllFailedException:
        case GlusterVolumeRebalanceStatusFailedException:
        case GlusterVolumeGeoRepSessionResumeFailed:
        case GlusterVolumeRemoveBricksStartFailed:
        case GlusterVolumeRemoveBricksStopFailed:
        case GlusterVolumeRemoveBrickStatusFailed:
        case GlusterVolumeRemoveBricksCommitFailed:
        case GlusterVolumeGeoRepStatusFailed:
        case GlusterGeoRepConfigFailed:
        case GlusterLibgfapiException:
        case GlfsStatvfsException:
        case GlfsInitException:
        case GlfsFiniException:
        case GlusterGeoRepSessionDeleteFailedException:
        case GlusterVolumeGeoRepSessionStopFailed:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.proceedProxyReturnValue();
            break;
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    GlusterGeoRepSession session = getGeoRepSession();
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StartGlusterVolumeGeoRep, new GlusterVolumeGeoRepSessionVDSParameters(upServer.getId(), getGlusterVolumeName(), session.getSlaveHostName(), session.getSlaveVolumeName()));
    setSucceeded(returnValue.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_GEO_REP_START_FAILED_EXCEPTION, returnValue.getVdsError().getMessage());
        return;
    }
}
#method_after
@Override
protected void executeCommand() {
    GlusterGeoRepSession session = getGeoRepSession();
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StartGlusterVolumeGeoRep, new GlusterVolumeGeoRepSessionVDSParameters(upServer.getId(), getGlusterVolumeName(), session.getSlaveHostName(), session.getSlaveVolumeName()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        session.setStatus(GeoRepSessionStatus.INITIALIZING);
        getGlusterGeoRepDao().updateSession(session);
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_GEO_REP_START_FAILED_EXCEPTION, returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    setGlusterVolumeId(getGeoRepSession().getMasterVolumeId());
    if (!super.canDoAction())
        return false;
    if (getGeoRepSession().getStatus().equals(GeoRepSessionStatus.ACTIVE)) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GEOREP_SESSION_ALREADY_STARTED);
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    setGlusterVolumeId(getGeoRepSession().getMasterVolumeId());
    if (!super.canDoAction()) {
        return false;
    }
    if (getGeoRepSession().getStatus().equals(GeoRepSessionStatus.ACTIVE)) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GEOREP_SESSION_ALREADY_STARTED);
    }
    return true;
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded())
        return AuditLogType.GLUSTER_VOLUME_GEO_REP_START;
    else
        return errorType == null ? AuditLogType.GLUSTER_VOLUME_GEO_REP_START_FAILED_EXCEPTION : errorType;
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        return AuditLogType.GLUSTER_VOLUME_GEO_REP_START;
    } else {
        return errorType == null ? AuditLogType.GLUSTER_VOLUME_GEO_REP_START_FAILED_EXCEPTION : errorType;
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction())
        return false;
    if (getGeoRepSession().getStatus() == GeoRepSessionStatus.PASSIVE) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GEOREP_SESSION_ALREADY_PAUSED);
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getGeoRepSession().getStatus() == GeoRepSessionStatus.PASSIVE) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GEOREP_SESSION_ALREADY_PAUSED);
    }
    return true;
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded())
        return AuditLogType.GLUSTER_VOLUME_GEO_REP_PAUSE;
    else
        return AuditLogType.GLUSTER_VOLUME_GEO_REP_PAUSE_FAILED;
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        return AuditLogType.GLUSTER_VOLUME_GEO_REP_PAUSE;
    } else {
        return AuditLogType.GLUSTER_VOLUME_GEO_REP_PAUSE_FAILED;
    }
}
#end_block

#method_before
private boolean isCompatibilityVersionChangeAllowedForDomains(List<StorageDomainStatic> poolDomains) {
    List<Object> formatProblematicDomains = new ArrayList<>();
    List<Object> typeProblematicDomains = new ArrayList<>();
    boolean failOnSupportedTypeMixing = false;
    for (StorageDomainStatic domainStatic : poolDomains) {
        if (!failOnSupportedTypeMixing && !isStorageDomainTypeFitsPoolIfMixed(domainStatic)) {
            failOnSupportedTypeMixing = true;
        }
        if (!isStorageDomainCompatibleWithDC(domainStatic, false)) {
            typeProblematicDomains.add(domainStatic.getName());
        }
        if (!isStorageDomainFormatCorrectForDC(domainStatic, getStoragePool())) {
            formatProblematicDomains.add(domainStatic.getName());
        }
    }
    return manageCompatibilityVersionChangeCheckResult(failOnSupportedTypeMixing, formatProblematicDomains, typeProblematicDomains);
}
#method_after
private boolean isCompatibilityVersionChangeAllowedForDomains(List<StorageDomainStatic> poolDomains) {
    List<Object> formatProblematicDomains = new ArrayList<>();
    List<Object> typeProblematicDomains = new ArrayList<>();
    boolean failOnSupportedTypeMixing = false;
    for (StorageDomainStatic domainStatic : poolDomains) {
        if (!failOnSupportedTypeMixing && !isStorageDomainTypeFitsPoolIfMixed(domainStatic)) {
            failOnSupportedTypeMixing = true;
        }
        if (!isStorageDomainCompatibleWithDC(domainStatic).isValid()) {
            typeProblematicDomains.add(domainStatic.getName());
        }
        if (!isStorageDomainFormatCorrectForDC(domainStatic, getStoragePool())) {
            formatProblematicDomains.add(domainStatic.getName());
        }
    }
    return manageCompatibilityVersionChangeCheckResult(failOnSupportedTypeMixing, formatProblematicDomains, typeProblematicDomains);
}
#end_block

#method_before
private void setAttachedDomains(StorageDomain... sDomains) {
    List<StorageDomainStatic> sdListWithDomains = new ArrayList<>();
    for (StorageDomain sd : sDomains) {
        sdListWithDomains.add(sd.getStorageStaticData());
    // Set the specific validator for this domain.
    /*AttachDomainValidatorForTesting attachDomainValidator = spy(new AttachDomainValidatorForTesting(sd.getStorageStaticData(), cmd.getStoragePool()));
            doReturn(attachDomainValidator).when(cmd).getAttachDomainValidator(sd.getStorageStaticData());
            doReturn(spDao).when(attachDomainValidator).getStoragePoolDao();*/
    }
    when(sdDao.getAllForStoragePool(any(Guid.class))).thenReturn(sdListWithDomains);
}
#method_after
private void setAttachedDomains(StorageDomain... sDomains) {
    List<StorageDomainStatic> sdListWithDomains = new ArrayList<>();
    for (StorageDomain sd : sDomains) {
        sdListWithDomains.add(sd.getStorageStaticData());
    }
    when(sdDao.getAllForStoragePool(any(Guid.class))).thenReturn(sdListWithDomains);
}
#end_block

#method_before
protected boolean isStorageDomainCompatibleWithDC(StorageDomain storageDomain, boolean doValidate) {
    return isStorageDomainCompatibleWithDC(storageDomain.getStorageStaticData(), doValidate);
}
#method_after
protected ValidationResult isStorageDomainCompatibleWithDC(StorageDomainStatic domainStatic) {
    StoragePoolValidator spv = new StoragePoolValidator(getStoragePool());
    if (domainStatic.getStorageType() == StorageType.GLUSTERFS) {
        return spv.isGlusterSupportedInDC();
    }
    if (domainStatic.getStorageType() == StorageType.POSIXFS) {
        return spv.isPosixSupportedInDC();
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
protected boolean checkDomainCanBeAttached(StorageDomain storageDomain) {
    if (!validateAmountOfIsoAndExportDomainsInDC(storageDomain)) {
        return false;
    }
    if (!isStorageDomainFormatCorrectForDC(storageDomain, getStoragePool())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL);
        getReturnValue().getCanDoActionMessages().add(String.format("$storageFormat %1$s", storageDomain.getStorageFormat().toString()));
        return false;
    }
    if (!checkStorageDomainSharedStatusNotLocked(storageDomain)) {
        return false;
    }
    if (!(isStorageDomainOfTypeIsoOrExport(storageDomain) || isStorageDomainNotInPool(storageDomain))) {
        return false;
    }
    if (!isStorageDomainTypeCorrect(storageDomain)) {
        return false;
    }
    if (!isStorageDomainCompatibleWithDC(storageDomain, true)) {
        return false;
    }
    if (!isStorageDomainOfTypeIsoOrExport(storageDomain) && !isMixedTypesAllowedInDC(getStoragePool().getcompatibility_version()) && isMixedTypeDC(storageDomain)) {
        return false;
    }
    return true;
}
#method_after
protected boolean checkDomainCanBeAttached(StorageDomain storageDomain) {
    if (!validateAmountOfIsoAndExportDomainsInDC(storageDomain)) {
        return false;
    }
    if (!isStorageDomainFormatCorrectForDC(storageDomain.getStorageStaticData(), getStoragePool())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL);
        getReturnValue().getCanDoActionMessages().add(String.format("$storageFormat %1$s", storageDomain.getStorageFormat().toString()));
        return false;
    }
    if (!checkStorageDomainSharedStatusNotLocked(storageDomain)) {
        return false;
    }
    if (!(isStorageDomainOfTypeIsoOrExport(storageDomain) || isStorageDomainNotInPool(storageDomain))) {
        return false;
    }
    if (!isStorageDomainTypeCorrect(storageDomain)) {
        return false;
    }
    if (!validate(isStorageDomainCompatibleWithDC(storageDomain.getStorageStaticData()))) {
        return false;
    }
    if (!isStorageDomainOfTypeIsoOrExport(storageDomain) && !isMixedTypesAllowedInDC(getStoragePool().getcompatibility_version()) && isMixedTypeDC(storageDomain.getStorageStaticData())) {
        return false;
    }
    return true;
}
#end_block

#method_before
final protected boolean checkSinglePermission(PermissionSubject permSubject, Collection<String> messages) {
    final Guid objectId = permSubject.getObjectId();
    final VdcObjectType objectType = permSubject.getObjectType();
    final ActionGroup objectActionGroup = permSubject.getActionGroup();
    // if objectId is null we can't check permission
    if (objectId == null) {
        if (log.isDebugEnabled()) {
            log.debug("The object to check is null for action '{}'.", getActionType());
        }
        messages.add(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION.name());
        return false;
    }
    // Check that an action group is defined for this action;
    if (objectActionGroup == null) {
        if (log.isDebugEnabled()) {
            log.debug("No action group is defined for action '{}'.", getActionType());
        }
        return false;
    }
    // Check the authorization:
    if (!checkUserAuthorization(getCurrentUser().getId(), objectActionGroup, objectId, objectType)) {
        messages.add(permSubject.getMessage().name());
        return false;
    }
    return true;
}
#method_after
final public boolean checkSinglePermission(PermissionSubject permSubject, Collection<String> messages) {
    final Guid objectId = permSubject.getObjectId();
    final VdcObjectType objectType = permSubject.getObjectType();
    final ActionGroup objectActionGroup = permSubject.getActionGroup();
    // if objectId is null we can't check permission
    if (objectId == null) {
        if (log.isDebugEnabled()) {
            log.debug("The object to check is null for action '{}'.", getActionType());
        }
        messages.add(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION.name());
        return false;
    }
    // Check that an action group is defined for this action;
    if (objectActionGroup == null) {
        if (log.isDebugEnabled()) {
            log.debug("No action group is defined for action '{}'.", getActionType());
        }
        return false;
    }
    // Check the authorization:
    if (!checkUserAuthorization(getCurrentUser().getId(), objectActionGroup, objectId, objectType)) {
        messages.add(permSubject.getMessage().name());
        return false;
    }
    return true;
}
#end_block

#method_before
void initTable(ApplicationConstants constants, ApplicationTemplates templates) {
    // Interface Panel
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.empty(), "30px");
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.nameInterface(), "200px");
    // Bond Panel
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.bondInterface(), "200px");
    // Vlan Panel
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.vlanInterface(), "200px");
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.networkNameInterface(), "200px");
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.addressInterface(), "120px");
    // Statistics Panel
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.macInterface(), "120px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.speedInterface(), constants.mbps()).asString(), // $NON-NLS-1$
    "100px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.rxInterface(), constants.mbps()).asString(), // $NON-NLS-1$
    "100px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.txInterface(), constants.mbps()).asString(), // $NON-NLS-1$
    "100px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.rxTotal(), constants.bytes()).asString(), // $NON-NLS-1$
    "150px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.txTotal(), constants.bytes()).asString(), // $NON-NLS-1$
    "150px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.dropsInterface(), constants.pkts()).asString(), // $NON-NLS-1$
    "100px");
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.addEditInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getEditCommand();
        }
    });
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.editManageNetInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getEditManagementNetworkCommand();
        }
    });
    // TODO: separator
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.bondInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getBondCommand();
        }
    });
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.detachInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getDetachCommand();
        }
    });
    // TODO: separator
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.setupHostNetworksInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getSetupNetworksCommand();
        }
    });
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.saveNetConfigInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getSaveNetworkConfigCommand();
        }
    });
    // The table items are in the form, so the table itself will never have items, so don't display the 'empty
    // message'
    table.table.setEmptyTableWidget(null);
}
#method_after
void initTable(ApplicationConstants constants, ApplicationTemplates templates) {
    // Interface Panel
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.empty(), "30px");
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.nameInterface(), "200px");
    // Bond Panel
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.bondInterface(), "200px");
    // Vlan Panel
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.vlanInterface(), "200px");
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.networkNameInterface(), "200px");
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.addressInterface(), "120px");
    // Statistics Panel
    // $NON-NLS-1$
    table.addColumn(new EmptyColumn(), constants.macInterface(), "120px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.speedInterface(), constants.mbps()).asString(), // $NON-NLS-1$
    "100px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.rxRate(), constants.mbps()).asString(), // $NON-NLS-1$
    "100px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.txRate(), constants.mbps()).asString(), // $NON-NLS-1$
    "100px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.rxTotal(), constants.bytes()).asString(), // $NON-NLS-1$
    "150px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.txTotal(), constants.bytes()).asString(), // $NON-NLS-1$
    "150px");
    table.addColumnWithHtmlHeader(new EmptyColumn(), templates.sub(constants.dropsInterface(), constants.pkts()).asString(), // $NON-NLS-1$
    "100px");
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.addEditInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getEditCommand();
        }
    });
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.editManageNetInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getEditManagementNetworkCommand();
        }
    });
    // TODO: separator
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.bondInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getBondCommand();
        }
    });
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.detachInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getDetachCommand();
        }
    });
    // TODO: separator
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.setupHostNetworksInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getSetupNetworksCommand();
        }
    });
    table.addActionButton(new WebAdminButtonDefinition<HostInterfaceLineModel>(constants.saveNetConfigInterface()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getSaveNetworkConfigCommand();
        }
    });
    // The table items are in the form, so the table itself will never have items, so don't display the 'empty
    // message'
    table.table.setEmptyTableWidget(null);
}
#end_block

#method_before
public void edit() {
    if (getWindow() != null) {
        return;
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networksByCluster = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            ArrayList<Network> networksToAdd = new ArrayList<Network>();
            Network selectedNetwork = null;
            if (item.getVlanId() != null) {
                for (Network network : networksByCluster) {
                    if (ObjectUtils.objectsEqual(network.getName(), item.getNetworkName())) {
                        networksToAdd.add(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
            } else {
                // creating dictionary of networks by name
                HashMap<String, Network> networkDictionary = new HashMap<String, Network>();
                for (Network network : networksByCluster) {
                    networkDictionary.put(network.getName(), network);
                }
                // creating list of attached networks.
                ArrayList<Network> attachedNetworks = new ArrayList<Network>();
                for (VdsNetworkInterface nic : hostInterfaceListModel.getAllItems()) {
                    if (nic.getNetworkName() != null && networkDictionary.containsKey(nic.getNetworkName())) {
                        attachedNetworks.add(networkDictionary.get(nic.getNetworkName()));
                    }
                }
                ArrayList<Network> unAttachedNetworks = Linq.except(networksByCluster, attachedNetworks);
                // adding selected network names to list.
                boolean isVlanSelected = false;
                boolean isManagementSelected = false;
                ArrayList<VdsNetworkInterface> selectedItems = hostInterfaceListModel.getSelectedItemsWithVlans();
                ArrayList<String> selectedNicsNetworks = new ArrayList<String>();
                for (VdsNetworkInterface nic : selectedItems) {
                    if (!StringHelper.isNullOrEmpty(nic.getNetworkName())) {
                        if (nic.getIsManagement()) {
                            isManagementSelected = true;
                        }
                        selectedNicsNetworks.add(nic.getNetworkName());
                        if (!isVlanSelected && nic.getVlanId() != null) {
                            isVlanSelected = true;
                        }
                    }
                }
                for (String selectedNetworkName : selectedNicsNetworks) {
                    if (networkDictionary.containsKey(selectedNetworkName)) {
                        Network network = networkDictionary.get(selectedNetworkName);
                        networksToAdd.add(network);
                        attachedNetworks.remove(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
                if (!isManagementSelected || isVlanSelected) {
                    for (Network unAttachedNetwork : unAttachedNetworks) {
                        if (isVlanSelected) {
                            if (unAttachedNetwork.getVlanId() != null) {
                                networksToAdd.add(unAttachedNetwork);
                            }
                        } else {
                            networksToAdd.add(unAttachedNetwork);
                        }
                    }
                }
            }
            Collections.sort(networksToAdd, new NameableComparator());
            // Add a 'none' option to networks.
            if (!StringHelper.isNullOrEmpty(item.getNetworkName())) {
                Network tempVar = new Network();
                tempVar.setId(Guid.Empty);
                // $NON-NLS-1$
                tempVar.setName("None");
                networksToAdd.add(0, tempVar);
            }
            HostInterfaceModel hostInterfaceModel = new HostInterfaceModel();
            hostInterfaceListModel.setWindow(hostInterfaceModel);
            hostInterfaceModel.setEntity(item.getName());
            hostInterfaceModel.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
            hostInterfaceModel.setHelpTag(HelpTag.edit_network_interface_hosts);
            // $NON-NLS-1$
            hostInterfaceModel.setHashName("edit_network_interface_hosts");
            hostInterfaceModel.setNetworks(hostInterfaceListModel.getSelectedItemsWithVlans());
            hostInterfaceModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            hostInterfaceModel.setBootProtocol(!hostInterfaceModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : item.getBootProtocol());
            hostInterfaceModel.getAddress().setEntity(item.getAddress());
            hostInterfaceModel.getSubnet().setEntity(item.getSubnet());
            hostInterfaceModel.getNetwork().setItems(networksToAdd);
            hostInterfaceModel.getName().setEntity(item.getName());
            hostInterfaceModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                hostInterfaceModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel<String>> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel<String>>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel<String>>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel<String>>> list = AsyncDataProvider.getInstance().getBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel<String>> selectBondingOpt = new KeyValuePairCompat<String, EntityModel<String>>();
                boolean containsSelectBondingOpt = false;
                hostInterfaceModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (ObjectUtils.objectsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (ObjectUtils.objectsEqual(item.getBondOptions(), AsyncDataProvider.getInstance().getDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel<String> entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                hostInterfaceModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            if (selectedNetwork == null && networksToAdd.size() > 0) {
                selectedNetwork = networksToAdd.get(0);
            }
            hostInterfaceModel.getNetwork().setSelectedItem(selectedNetwork);
            hostInterfaceModel.getCheckConnectivity().setIsAvailable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setIsChangable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setEntity(item.getIsManagement());
            if (networksToAdd.isEmpty()) {
                hostInterfaceModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
                // $NON-NLS-1$
                UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar2.setIsDefault(true);
                tempVar2.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar2);
            } else {
                // $NON-NLS-1$
                UICommand tempVar3 = new UICommand("OnSave", hostInterfaceListModel);
                tempVar3.setTitle(ConstantsManager.getInstance().getConstants().ok());
                tempVar3.setIsDefault(true);
                hostInterfaceModel.getCommands().add(tempVar3);
                // $NON-NLS-1$
                UICommand tempVar4 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar4.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                tempVar4.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar4);
            }
        }
    };
    AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
}
#method_after
public void edit() {
    if (getWindow() != null) {
        return;
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networksByCluster = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            ArrayList<Network> networksToAdd = new ArrayList<Network>();
            Network selectedNetwork = null;
            if (item.getVlanId() != null) {
                for (Network network : networksByCluster) {
                    if (ObjectUtils.objectsEqual(network.getName(), item.getNetworkName())) {
                        networksToAdd.add(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
            } else {
                // creating dictionary of networks by name
                HashMap<String, Network> networkDictionary = new HashMap<String, Network>();
                for (Network network : networksByCluster) {
                    networkDictionary.put(network.getName(), network);
                }
                // creating list of attached networks.
                ArrayList<Network> attachedNetworks = new ArrayList<Network>();
                for (VdsNetworkInterface nic : hostInterfaceListModel.getAllItems()) {
                    if (nic.getNetworkName() != null && networkDictionary.containsKey(nic.getNetworkName())) {
                        attachedNetworks.add(networkDictionary.get(nic.getNetworkName()));
                    }
                }
                ArrayList<Network> unAttachedNetworks = Linq.except(networksByCluster, attachedNetworks);
                // adding selected network names to list.
                boolean isVlanSelected = false;
                boolean isManagementSelected = false;
                ArrayList<VdsNetworkInterface> selectedItems = hostInterfaceListModel.getSelectedItemsWithVlans();
                ArrayList<String> selectedNicsNetworks = new ArrayList<String>();
                for (VdsNetworkInterface nic : selectedItems) {
                    if (!StringHelper.isNullOrEmpty(nic.getNetworkName())) {
                        if (nic.getIsManagement()) {
                            isManagementSelected = true;
                        }
                        selectedNicsNetworks.add(nic.getNetworkName());
                        if (!isVlanSelected && nic.getVlanId() != null) {
                            isVlanSelected = true;
                        }
                    }
                }
                for (String selectedNetworkName : selectedNicsNetworks) {
                    if (networkDictionary.containsKey(selectedNetworkName)) {
                        Network network = networkDictionary.get(selectedNetworkName);
                        networksToAdd.add(network);
                        attachedNetworks.remove(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
                if (!isManagementSelected || isVlanSelected) {
                    for (Network unAttachedNetwork : unAttachedNetworks) {
                        if (isVlanSelected) {
                            if (unAttachedNetwork.getVlanId() != null) {
                                networksToAdd.add(unAttachedNetwork);
                            }
                        } else {
                            networksToAdd.add(unAttachedNetwork);
                        }
                    }
                }
            }
            Collections.sort(networksToAdd, new NameableComparator());
            // Add a 'none' option to networks.
            if (!StringHelper.isNullOrEmpty(item.getNetworkName())) {
                Network tempVar = new Network();
                tempVar.setId(Guid.Empty);
                // $NON-NLS-1$
                tempVar.setName("None");
                networksToAdd.add(0, tempVar);
            }
            HostInterfaceModel hostInterfaceModel = new HostInterfaceModel();
            hostInterfaceListModel.setWindow(hostInterfaceModel);
            hostInterfaceModel.setEntity(item.getName());
            hostInterfaceModel.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
            hostInterfaceModel.setHelpTag(HelpTag.edit_network_interface_hosts);
            // $NON-NLS-1$
            hostInterfaceModel.setHashName("edit_network_interface_hosts");
            hostInterfaceModel.setNetworks(hostInterfaceListModel.getSelectedItemsWithVlans());
            hostInterfaceModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            hostInterfaceModel.setBootProtocol(!hostInterfaceModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : item.getBootProtocol());
            hostInterfaceModel.getAddress().setEntity(item.getAddress());
            hostInterfaceModel.getSubnet().setEntity(item.getSubnet());
            hostInterfaceModel.getNetwork().setItems(networksToAdd);
            hostInterfaceModel.getName().setEntity(item.getName());
            hostInterfaceModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                hostInterfaceModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel<String>> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel<String>>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel<String>>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel<String>>> list = AsyncDataProvider.getInstance().getBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel<String>> selectBondingOpt = new KeyValuePairCompat<String, EntityModel<String>>();
                boolean containsSelectBondingOpt = false;
                hostInterfaceModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (ObjectUtils.objectsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (ObjectUtils.objectsEqual(item.getBondOptions(), AsyncDataProvider.getInstance().getDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel<String> entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                hostInterfaceModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            if (selectedNetwork == null && networksToAdd.size() > 0) {
                selectedNetwork = networksToAdd.get(0);
            }
            hostInterfaceModel.getNetwork().setSelectedItem(selectedNetwork);
            hostInterfaceModel.getCheckConnectivity().setIsAvailable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setIsChangable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setEntity(item.getIsManagement());
            if (networksToAdd.isEmpty()) {
                hostInterfaceModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
                // $NON-NLS-1$
                UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar2.setIsDefault(true);
                tempVar2.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar2);
            } else {
                // $NON-NLS-1$
                UICommand tempVar3 = UICommand.createDefaultOkUiCommand("OnSave", hostInterfaceListModel);
                hostInterfaceModel.getCommands().add(tempVar3);
                // $NON-NLS-1$
                UICommand tempVar4 = UICommand.createCancelUiCommand("Cancel", hostInterfaceListModel);
                hostInterfaceModel.getCommands().add(tempVar4);
            }
        }
    };
    AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
}
#end_block

#method_before
public void editManagementNetwork() {
    if (getWindow() != null) {
        return;
    }
    HostManagementNetworkModel managementNicModel = new HostManagementNetworkModel();
    setWindow(managementNicModel);
    managementNicModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
    managementNicModel.setHelpTag(HelpTag.edit_management_network);
    // $NON-NLS-1$
    managementNicModel.setHashName("edit_management_network");
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            final HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> clusterNetworks = (ArrayList<Network>) ReturnValue;
            final VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            final HostManagementNetworkModel managementModel = (HostManagementNetworkModel) hostInterfaceListModel.getWindow();
            Network networkToEdit = Linq.findNetworkByName(clusterNetworks, item.getNetworkName());
            managementModel.setEntity(networkToEdit);
            managementModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            managementModel.setBootProtocol(!managementModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : item.getBootProtocol());
            managementModel.getAddress().setEntity(item.getAddress());
            managementModel.getSubnet().setEntity(item.getSubnet());
            managementModel.getGateway().setEntity(item.getGateway());
            final StringBuilder tmpDefaultInterfaceName = new StringBuilder();
            AsyncDataProvider.getInstance().getInterfaceOptionsForEditNetwork(new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    ArrayList<VdsNetworkInterface> interfaces = (ArrayList<VdsNetworkInterface>) returnValue;
                    String defaultInterfaceName = tmpDefaultInterfaceName.toString();
                    managementModel.getInterface().setItems(interfaces);
                    managementModel.getInterface().setSelectedItem(Linq.findInterfaceByNetworkName(interfaces, defaultInterfaceName));
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getInterface().setTitle(ConstantsManager.getInstance().getConstants().interfaceListTitle());
                        managementModel.getInterface().getSelectedItemChangedEvent().addListener(hostInterfaceListModel);
                    }
                    managementModel.getCheckConnectivity().setIsAvailable(true);
                    managementModel.getCheckConnectivity().setIsChangable(true);
                    // currently, always
                    managementModel.getCheckConnectivity().setEntity(item.getIsManagement());
                    // should be
                    // true
                    managementModel.getBondingOptions().setIsAvailable(false);
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getBondingOptions().setIsAvailable(true);
                        Map.Entry<String, EntityModel<String>> defaultItem = null;
                        RefObject<Map.Entry<String, EntityModel<String>>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel<String>>>(defaultItem);
                        ArrayList<Map.Entry<String, EntityModel<String>>> list = AsyncDataProvider.getInstance().getBondingOptionList(tempRef_defaultItem);
                        defaultItem = tempRef_defaultItem.argvalue;
                        Map.Entry<String, EntityModel<String>> selectBondingOpt = new KeyValuePairCompat<String, EntityModel<String>>();
                        boolean containsSelectBondingOpt = false;
                        managementModel.getBondingOptions().setItems(list);
                        for (int i = 0; i < list.size(); i++) {
                            if (ObjectUtils.objectsEqual(list.get(i).getKey(), item.getBondOptions())) {
                                selectBondingOpt = list.get(i);
                                containsSelectBondingOpt = true;
                                break;
                            }
                        }
                        if (containsSelectBondingOpt == false) {
                            if (ObjectUtils.objectsEqual(item.getBondOptions(), AsyncDataProvider.getInstance().getDefaultBondingOption())) {
                                selectBondingOpt = defaultItem;
                            } else {
                                selectBondingOpt = list.get(list.size() - 1);
                                EntityModel<String> entityModel = selectBondingOpt.getValue();
                                entityModel.setEntity(item.getBondOptions());
                            }
                        }
                        managementModel.getBondingOptions().setSelectedItem(selectBondingOpt);
                    }
                    UICommand tempVar = // $NON-NLS-1$
                    new UICommand("OnEditManagementNetworkConfirmation", hostInterfaceListModel);
                    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
                    tempVar.setIsDefault(true);
                    managementModel.getCommands().add(tempVar);
                    // $NON-NLS-1$
                    UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                    tempVar2.setIsCancel(true);
                    managementModel.getCommands().add(tempVar2);
                }
            }), getOriginalItems(), item, networkToEdit, getEntity().getId(), tmpDefaultInterfaceName);
        }
    };
    AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
}
#method_after
public void editManagementNetwork() {
    if (getWindow() != null) {
        return;
    }
    HostManagementNetworkModel managementNicModel = new HostManagementNetworkModel();
    setWindow(managementNicModel);
    managementNicModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
    managementNicModel.setHelpTag(HelpTag.edit_management_network);
    // $NON-NLS-1$
    managementNicModel.setHashName("edit_management_network");
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            final HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> clusterNetworks = (ArrayList<Network>) ReturnValue;
            final VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            final HostManagementNetworkModel managementModel = (HostManagementNetworkModel) hostInterfaceListModel.getWindow();
            Network networkToEdit = Linq.findNetworkByName(clusterNetworks, item.getNetworkName());
            managementModel.setEntity(networkToEdit);
            managementModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            managementModel.setBootProtocol(!managementModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : item.getBootProtocol());
            managementModel.getAddress().setEntity(item.getAddress());
            managementModel.getSubnet().setEntity(item.getSubnet());
            managementModel.getGateway().setEntity(item.getGateway());
            final StringBuilder tmpDefaultInterfaceName = new StringBuilder();
            AsyncDataProvider.getInstance().getInterfaceOptionsForEditNetwork(new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    ArrayList<VdsNetworkInterface> interfaces = (ArrayList<VdsNetworkInterface>) returnValue;
                    String defaultInterfaceName = tmpDefaultInterfaceName.toString();
                    managementModel.getInterface().setItems(interfaces);
                    managementModel.getInterface().setSelectedItem(Linq.findInterfaceByNetworkName(interfaces, defaultInterfaceName));
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getInterface().setTitle(ConstantsManager.getInstance().getConstants().interfaceListTitle());
                        managementModel.getInterface().getSelectedItemChangedEvent().addListener(hostInterfaceListModel);
                    }
                    managementModel.getCheckConnectivity().setIsAvailable(true);
                    managementModel.getCheckConnectivity().setIsChangable(true);
                    // currently, always
                    managementModel.getCheckConnectivity().setEntity(item.getIsManagement());
                    // should be
                    // true
                    managementModel.getBondingOptions().setIsAvailable(false);
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getBondingOptions().setIsAvailable(true);
                        Map.Entry<String, EntityModel<String>> defaultItem = null;
                        RefObject<Map.Entry<String, EntityModel<String>>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel<String>>>(defaultItem);
                        ArrayList<Map.Entry<String, EntityModel<String>>> list = AsyncDataProvider.getInstance().getBondingOptionList(tempRef_defaultItem);
                        defaultItem = tempRef_defaultItem.argvalue;
                        Map.Entry<String, EntityModel<String>> selectBondingOpt = new KeyValuePairCompat<String, EntityModel<String>>();
                        boolean containsSelectBondingOpt = false;
                        managementModel.getBondingOptions().setItems(list);
                        for (int i = 0; i < list.size(); i++) {
                            if (ObjectUtils.objectsEqual(list.get(i).getKey(), item.getBondOptions())) {
                                selectBondingOpt = list.get(i);
                                containsSelectBondingOpt = true;
                                break;
                            }
                        }
                        if (containsSelectBondingOpt == false) {
                            if (ObjectUtils.objectsEqual(item.getBondOptions(), AsyncDataProvider.getInstance().getDefaultBondingOption())) {
                                selectBondingOpt = defaultItem;
                            } else {
                                selectBondingOpt = list.get(list.size() - 1);
                                EntityModel<String> entityModel = selectBondingOpt.getValue();
                                entityModel.setEntity(item.getBondOptions());
                            }
                        }
                        managementModel.getBondingOptions().setSelectedItem(selectBondingOpt);
                    }
                    UICommand tempVar = // $NON-NLS-1$
                    UICommand.createDefaultOkUiCommand("OnEditManagementNetworkConfirmation", hostInterfaceListModel);
                    managementModel.getCommands().add(tempVar);
                    // $NON-NLS-1$
                    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", hostInterfaceListModel);
                    managementModel.getCommands().add(tempVar2);
                }
            }), getOriginalItems(), item, networkToEdit, getEntity().getId(), tmpDefaultInterfaceName);
        }
    };
    AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
}
#end_block

#method_before
public void onEditManagementNetworkConfirmation(boolean isBond) {
    if (!isBond) {
        HostManagementNetworkModel model = (HostManagementNetworkModel) getWindow();
        if (!model.validate()) {
            return;
        }
        if (model.getCheckConnectivity().getEntity() == true) {
            onEditManagementNetwork();
            return;
        }
    } else {
        HostBondInterfaceModel model = (HostBondInterfaceModel) getWindow();
        if (!model.validate()) {
            return;
        }
        if (model.getCheckConnectivity().getEntity() == true) {
            onBond();
            return;
        }
    }
    ConfirmationModel confirmModel = new ConfirmationModel();
    setConfirmWindow(confirmModel);
    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().confirmTitle());
    confirmModel.getLatch().setEntity(true);
    confirmModel.getLatch().setIsAvailable(true);
    confirmModel.getLatch().setIsChangable(true);
    if (!isBond) {
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnEditManagementNetwork", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        confirmModel.getCommands().add(tempVar);
    } else {
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("OnBond", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar2.setIsDefault(true);
        confirmModel.getCommands().add(tempVar2);
    }
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("CancelConfirm", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar3.setIsCancel(true);
    confirmModel.getCommands().add(tempVar3);
}
#method_after
public void onEditManagementNetworkConfirmation(boolean isBond) {
    if (!isBond) {
        HostManagementNetworkModel model = (HostManagementNetworkModel) getWindow();
        if (!model.validate()) {
            return;
        }
        if (model.getCheckConnectivity().getEntity() == true) {
            onEditManagementNetwork();
            return;
        }
    } else {
        HostBondInterfaceModel model = (HostBondInterfaceModel) getWindow();
        if (!model.validate()) {
            return;
        }
        if (model.getCheckConnectivity().getEntity() == true) {
            onBond();
            return;
        }
    }
    ConfirmationModel confirmModel = new ConfirmationModel();
    setConfirmWindow(confirmModel);
    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().confirmTitle());
    confirmModel.getLatch().setEntity(true);
    confirmModel.getLatch().setIsAvailable(true);
    confirmModel.getLatch().setIsChangable(true);
    if (!isBond) {
        // $NON-NLS-1$
        UICommand tempVar = UICommand.createDefaultOkUiCommand("OnEditManagementNetwork", this);
        confirmModel.getCommands().add(tempVar);
    } else {
        // $NON-NLS-1$
        UICommand tempVar2 = UICommand.createDefaultOkUiCommand("OnBond", this);
        confirmModel.getCommands().add(tempVar2);
    }
    // $NON-NLS-1$
    UICommand tempVar3 = UICommand.createCancelUiCommand("CancelConfirm", this);
    confirmModel.getCommands().add(tempVar3);
}
#end_block

#method_before
public void postBond(HostInterfaceListModel hostInterfaceListModel, HostBondInterfaceModel innerBondModel, ArrayList<Network> networksToAdd, boolean isAnyManagement) {
    VdsNetworkInterface interfaceWithNetwork = Linq.findInterfaceNetworkNameNotEmpty(getSelectedItemsWithVlans());
    innerBondModel.getCheckConnectivity().setIsChangable(interfaceWithNetwork != null);
    innerBondModel.getCheckConnectivity().setIsAvailable(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement());
    innerBondModel.getCheckConnectivity().setEntity(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement());
    innerBondModel.setNoneBootProtocolAvailable(!(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement()));
    if (interfaceWithNetwork != null) {
        innerBondModel.setBootProtocol(!innerBondModel.getNoneBootProtocolAvailable() && interfaceWithNetwork.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : interfaceWithNetwork.getBootProtocol());
        innerBondModel.getAddress().setEntity(interfaceWithNetwork.getAddress());
        innerBondModel.getSubnet().setEntity(interfaceWithNetwork.getSubnet());
        innerBondModel.getGateway().setEntity(interfaceWithNetwork.getGateway());
    } else {
        innerBondModel.setBootProtocol(NetworkBootProtocol.NONE);
    }
    innerBondModel.getGateway().setIsAvailable(isAnyManagement);
    if (networksToAdd.isEmpty()) {
        innerBondModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("Cancel", hostInterfaceListModel);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
        tempVar.setIsDefault(true);
        tempVar.setIsCancel(true);
        innerBondModel.getCommands().add(tempVar);
    } else {
        if (interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement()) {
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("OnEditManagementNetworkConfirmation_Bond", hostInterfaceListModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar2.setIsDefault(true);
            innerBondModel.getCommands().add(tempVar2);
            // $NON-NLS-1$
            UICommand tempVar3 = new UICommand("Cancel", hostInterfaceListModel);
            tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar3.setIsCancel(true);
            innerBondModel.getCommands().add(tempVar3);
        } else {
            // $NON-NLS-1$
            UICommand tempVar4 = new UICommand("OnBond", hostInterfaceListModel);
            tempVar4.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar4.setIsDefault(true);
            innerBondModel.getCommands().add(tempVar4);
            // $NON-NLS-1$
            UICommand tempVar5 = new UICommand("Cancel", hostInterfaceListModel);
            tempVar5.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar5.setIsCancel(true);
            innerBondModel.getCommands().add(tempVar5);
        }
    }
}
#method_after
public void postBond(HostInterfaceListModel hostInterfaceListModel, HostBondInterfaceModel innerBondModel, ArrayList<Network> networksToAdd, boolean isAnyManagement) {
    VdsNetworkInterface interfaceWithNetwork = Linq.findInterfaceNetworkNameNotEmpty(getSelectedItemsWithVlans());
    innerBondModel.getCheckConnectivity().setIsChangable(interfaceWithNetwork != null);
    innerBondModel.getCheckConnectivity().setIsAvailable(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement());
    innerBondModel.getCheckConnectivity().setEntity(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement());
    innerBondModel.setNoneBootProtocolAvailable(!(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement()));
    if (interfaceWithNetwork != null) {
        innerBondModel.setBootProtocol(!innerBondModel.getNoneBootProtocolAvailable() && interfaceWithNetwork.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : interfaceWithNetwork.getBootProtocol());
        innerBondModel.getAddress().setEntity(interfaceWithNetwork.getAddress());
        innerBondModel.getSubnet().setEntity(interfaceWithNetwork.getSubnet());
        innerBondModel.getGateway().setEntity(interfaceWithNetwork.getGateway());
    } else {
        innerBondModel.setBootProtocol(NetworkBootProtocol.NONE);
    }
    innerBondModel.getGateway().setIsAvailable(isAnyManagement);
    if (networksToAdd.isEmpty()) {
        innerBondModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("Cancel", hostInterfaceListModel);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
        tempVar.setIsDefault(true);
        tempVar.setIsCancel(true);
        innerBondModel.getCommands().add(tempVar);
    } else {
        if (interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement()) {
            // $NON-NLS-1$
            UICommand tempVar2 = UICommand.createDefaultOkUiCommand("OnEditManagementNetworkConfirmation_Bond", hostInterfaceListModel);
            innerBondModel.getCommands().add(tempVar2);
            // $NON-NLS-1$
            UICommand tempVar3 = UICommand.createCancelUiCommand("Cancel", hostInterfaceListModel);
            innerBondModel.getCommands().add(tempVar3);
        } else {
            // $NON-NLS-1$
            UICommand tempVar4 = UICommand.createDefaultOkUiCommand("OnBond", hostInterfaceListModel);
            innerBondModel.getCommands().add(tempVar4);
            // $NON-NLS-1$
            UICommand tempVar5 = UICommand.createCancelUiCommand("Cancel", hostInterfaceListModel);
            innerBondModel.getCommands().add(tempVar5);
        }
    }
}
#end_block

#method_before
public void detach() {
    if (getWindow() != null) {
        return;
    }
    HostInterfaceModel model = new HostInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().detachNetworkInterfacesTitle());
    model.setHelpTag(HelpTag.detach_network_interfaces);
    // $NON-NLS-1$
    model.setHashName("detach_network_interfaces");
    VdsNetworkInterface nic = (VdsNetworkInterface) getSelectedItem();
    model.getName().setEntity(nic.getName());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnDetach", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void detach() {
    if (getWindow() != null) {
        return;
    }
    HostInterfaceModel model = new HostInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().detachNetworkInterfacesTitle());
    model.setHelpTag(HelpTag.detach_network_interfaces);
    // $NON-NLS-1$
    model.setHashName("detach_network_interfaces");
    VdsNetworkInterface nic = (VdsNetworkInterface) getSelectedItem();
    model.getName().setEntity(nic.getName());
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnDetach", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
public void onSave() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (!model.validate()) {
        return;
    }
    String nicName = (String) model.getEntity();
    final VdsNetworkInterface nic = (VdsNetworkInterface) Linq.findInterfaceByName(getAllItems(), nicName);
    if (nic == null) {
        cancel();
        return;
    }
    Network network = model.getNetwork().getSelectedItem();
    // Save changes.
    if (network.getId().equals(Guid.Empty)) {
        if (nic.getIsManagement()) {
            // We are trying to disconnect the management interface from its
            // network -> ask for the user's confirmation before doing that.
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkInterfaceTitle());
            confirmModel.setHelpTag(HelpTag.edit_management_network_interface);
            // $NON-NLS-1$
            confirmModel.setHashName("edit_management_network_interface");
            confirmModel.setMessage(ConstantsManager.getInstance().getMessages().youAreAboutToDisconnectHostInterfaceMsg(nic.getName()));
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnConfirmManagementDetach", this);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", this);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            AsyncQuery _asyncQuery = new AsyncQuery();
            _asyncQuery.setModel(this);
            _asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object ReturnValue) {
                    final HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
                    HostInterfaceModel hostInterfaceModel = (HostInterfaceModel) hostInterfaceListModel.getWindow();
                    ArrayList<Network> networks = (ArrayList<Network>) ReturnValue;
                    Network defaultNetwork = new Network();
                    defaultNetwork.setName(nic.getNetworkName());
                    Network tempVar3 = Linq.findNetworkByName(networks, nic.getNetworkName());
                    Network net = (tempVar3 != null) ? tempVar3 : defaultNetwork;
                    hostInterfaceModel.startProgress(null);
                    setcurrentModel(hostInterfaceModel);
                    Frontend.getInstance().runAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                        @Override
                        public void executed(FrontendActionAsyncResult result) {
                            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                            VdcReturnValueBase returnValueBase = result.getReturnValue();
                            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                                EntityModel<Boolean> commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                                if (commitChanges.getEntity()) {
                                    new SaveNetworkConfigAction(HostInterfaceListModel.this, getcurrentModel(), getEntity()).execute();
                                } else {
                                    hostInterfaceListModel.getcurrentModel().stopProgress();
                                    hostInterfaceListModel.cancel();
                                    hostInterfaceListModel.search();
                                }
                            } else {
                                hostInterfaceListModel.getcurrentModel().stopProgress();
                            }
                        }
                    }, hostInterfaceListModel);
                }
            };
            AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        AttachNetworkToVdsParameters parameters;
        VdcActionType actionType;
        boolean vLanAttached = false;
        boolean bondWithVlans = false;
        boolean isUpdateVlan = false;
        if (nic.getBonded() != null && nic.getBonded()) {
            for (HostInterfaceLineModel item : (ArrayList<HostInterfaceLineModel>) getItems()) {
                if (item.getInterface() != null && item.getInterface().getId().equals(nic.getId())) {
                    if (item.getVLans() != null && item.getVLans().size() > 0) {
                        bondWithVlans = true;
                        for (HostVLan vLan : item.getVLans()) {
                            if (ObjectUtils.objectsEqual(network.getName(), vLan.getNetworkName())) {
                                vLanAttached = true;
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        } else {
            for (VdsNetworkInterface item : getSelectedItemsWithVlans()) {
                if (item.getVlanId() != null && ObjectUtils.objectsEqual(item.getNetworkName(), network.getName())) {
                    isUpdateVlan = true;
                    break;
                }
            }
        }
        // and the selected network in the dialog is a new vlan, attach selected network.
        if ((StringHelper.isNullOrEmpty(nic.getNetworkName()) && (nic.getBonded() == null || !nic.getBonded()) && !isUpdateVlan) || (bondWithVlans && (!vLanAttached && network.getVlanId() != null))) {
            parameters = new AttachNetworkToVdsParameters(getEntity().getId(), network, nic);
            actionType = VdcActionType.AttachNetworkToVdsInterface;
        } else {
            parameters = new UpdateNetworkToVdsParameters(getEntity().getId(), network, new ArrayList<VdsNetworkInterface>(Arrays.asList(new VdsNetworkInterface[] { nic })));
            parameters.setOldNetworkName((nic.getNetworkName() != null ? nic.getNetworkName() : network.getName()));
            parameters.setCheckConnectivity(model.getCheckConnectivity().getEntity());
            actionType = VdcActionType.UpdateNetworkToVdsInterface;
        }
        Map.Entry<String, EntityModel<String>> bondingOption;
        if (model.getBondingOptions().getSelectedItem() != null) {
            bondingOption = model.getBondingOptions().getSelectedItem();
            if (// $NON-NLS-1$
            !bondingOption.getKey().equals("custom")) {
                parameters.setBondingOptions((StringHelper.isNullOrEmpty(bondingOption.getKey()) ? null : bondingOption.getKey()));
            } else {
                EntityModel entityModel = bondingOption.getValue();
                if (entityModel.getEntity() != null) {
                    parameters.setBondingOptions(entityModel.getEntity().toString());
                }
            }
        }
        parameters.setBootProtocol(model.getBootProtocol());
        if (model.getIsStaticAddress()) {
            parameters.setAddress(model.getAddress().getEntity());
            parameters.setSubnet(model.getSubnet().getEntity());
        }
        model.startProgress(null);
        setcurrentModel(model);
        Frontend.getInstance().runAction(actionType, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void executed(FrontendActionAsyncResult result) {
                HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    EntityModel<Boolean> commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                    if (commitChanges.getEntity()) {
                        new SaveNetworkConfigAction(HostInterfaceListModel.this, hostInterfaceListModel.getcurrentModel(), getEntity()).execute();
                    } else {
                        hostInterfaceListModel.getcurrentModel().stopProgress();
                        hostInterfaceListModel.cancel();
                        hostInterfaceListModel.search();
                    }
                } else {
                    hostInterfaceListModel.getcurrentModel().stopProgress();
                }
            }
        }, this);
    }
}
#method_after
public void onSave() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (!model.validate()) {
        return;
    }
    String nicName = (String) model.getEntity();
    final VdsNetworkInterface nic = (VdsNetworkInterface) Linq.findInterfaceByName(getAllItems(), nicName);
    if (nic == null) {
        cancel();
        return;
    }
    Network network = model.getNetwork().getSelectedItem();
    // Save changes.
    if (network.getId().equals(Guid.Empty)) {
        if (nic.getIsManagement()) {
            // We are trying to disconnect the management interface from its
            // network -> ask for the user's confirmation before doing that.
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkInterfaceTitle());
            confirmModel.setHelpTag(HelpTag.edit_management_network_interface);
            // $NON-NLS-1$
            confirmModel.setHashName("edit_management_network_interface");
            confirmModel.setMessage(ConstantsManager.getInstance().getMessages().youAreAboutToDisconnectHostInterfaceMsg(nic.getName()));
            // $NON-NLS-1$
            UICommand tempVar = UICommand.createDefaultOkUiCommand("OnConfirmManagementDetach", this);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            AsyncQuery _asyncQuery = new AsyncQuery();
            _asyncQuery.setModel(this);
            _asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object ReturnValue) {
                    final HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
                    HostInterfaceModel hostInterfaceModel = (HostInterfaceModel) hostInterfaceListModel.getWindow();
                    ArrayList<Network> networks = (ArrayList<Network>) ReturnValue;
                    Network defaultNetwork = new Network();
                    defaultNetwork.setName(nic.getNetworkName());
                    Network tempVar3 = Linq.findNetworkByName(networks, nic.getNetworkName());
                    Network net = (tempVar3 != null) ? tempVar3 : defaultNetwork;
                    hostInterfaceModel.startProgress(null);
                    setcurrentModel(hostInterfaceModel);
                    Frontend.getInstance().runAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                        @Override
                        public void executed(FrontendActionAsyncResult result) {
                            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                            VdcReturnValueBase returnValueBase = result.getReturnValue();
                            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                                EntityModel<Boolean> commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                                if (commitChanges.getEntity()) {
                                    new SaveNetworkConfigAction(HostInterfaceListModel.this, getcurrentModel(), getEntity()).execute();
                                } else {
                                    hostInterfaceListModel.getcurrentModel().stopProgress();
                                    hostInterfaceListModel.cancel();
                                    hostInterfaceListModel.search();
                                }
                            } else {
                                hostInterfaceListModel.getcurrentModel().stopProgress();
                            }
                        }
                    }, hostInterfaceListModel);
                }
            };
            AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        AttachNetworkToVdsParameters parameters;
        VdcActionType actionType;
        boolean vLanAttached = false;
        boolean bondWithVlans = false;
        boolean isUpdateVlan = false;
        if (nic.getBonded() != null && nic.getBonded()) {
            for (HostInterfaceLineModel item : (ArrayList<HostInterfaceLineModel>) getItems()) {
                if (item.getInterface() != null && item.getInterface().getId().equals(nic.getId())) {
                    if (item.getVLans() != null && item.getVLans().size() > 0) {
                        bondWithVlans = true;
                        for (HostVLan vLan : item.getVLans()) {
                            if (ObjectUtils.objectsEqual(network.getName(), vLan.getNetworkName())) {
                                vLanAttached = true;
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        } else {
            for (VdsNetworkInterface item : getSelectedItemsWithVlans()) {
                if (item.getVlanId() != null && ObjectUtils.objectsEqual(item.getNetworkName(), network.getName())) {
                    isUpdateVlan = true;
                    break;
                }
            }
        }
        // and the selected network in the dialog is a new vlan, attach selected network.
        if ((StringHelper.isNullOrEmpty(nic.getNetworkName()) && (nic.getBonded() == null || !nic.getBonded()) && !isUpdateVlan) || (bondWithVlans && (!vLanAttached && network.getVlanId() != null))) {
            parameters = new AttachNetworkToVdsParameters(getEntity().getId(), network, nic);
            actionType = VdcActionType.AttachNetworkToVdsInterface;
        } else {
            parameters = new UpdateNetworkToVdsParameters(getEntity().getId(), network, new ArrayList<VdsNetworkInterface>(Arrays.asList(new VdsNetworkInterface[] { nic })));
            parameters.setOldNetworkName((nic.getNetworkName() != null ? nic.getNetworkName() : network.getName()));
            parameters.setCheckConnectivity(model.getCheckConnectivity().getEntity());
            actionType = VdcActionType.UpdateNetworkToVdsInterface;
        }
        Map.Entry<String, EntityModel<String>> bondingOption;
        if (model.getBondingOptions().getSelectedItem() != null) {
            bondingOption = model.getBondingOptions().getSelectedItem();
            if (// $NON-NLS-1$
            !bondingOption.getKey().equals("custom")) {
                parameters.setBondingOptions((StringHelper.isNullOrEmpty(bondingOption.getKey()) ? null : bondingOption.getKey()));
            } else {
                EntityModel entityModel = bondingOption.getValue();
                if (entityModel.getEntity() != null) {
                    parameters.setBondingOptions(entityModel.getEntity().toString());
                }
            }
        }
        parameters.setBootProtocol(model.getBootProtocol());
        if (model.getIsStaticAddress()) {
            parameters.setAddress(model.getAddress().getEntity());
            parameters.setSubnet(model.getSubnet().getEntity());
        }
        model.startProgress(null);
        setcurrentModel(model);
        Frontend.getInstance().runAction(actionType, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void executed(FrontendActionAsyncResult result) {
                HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    EntityModel<Boolean> commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                    if (commitChanges.getEntity()) {
                        new SaveNetworkConfigAction(HostInterfaceListModel.this, hostInterfaceListModel.getcurrentModel(), getEntity()).execute();
                    } else {
                        hostInterfaceListModel.getcurrentModel().stopProgress();
                        hostInterfaceListModel.cancel();
                        hostInterfaceListModel.search();
                    }
                } else {
                    hostInterfaceListModel.getcurrentModel().stopProgress();
                }
            }
        }, this);
    }
}
#end_block

#method_before
public void saveNetworkConfig() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().saveNetworkConfigurationTitle());
    model.setHelpTag(HelpTag.save_network_configuration);
    // $NON-NLS-1$
    model.setHashName("save_network_configuration");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToMakeTheChangesPersistentMsg());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSaveNetworkConfig", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void saveNetworkConfig() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().saveNetworkConfigurationTitle());
    model.setHelpTag(HelpTag.save_network_configuration);
    // $NON-NLS-1$
    model.setHashName("save_network_configuration");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToMakeTheChangesPersistentMsg());
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnSaveNetworkConfig", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void initStatitsticsTable() {
    statisticsTable = new EntityModelCellTable<ListModel>(false, true);
    statisticsTable.enableColumnResizing();
    TextColumnWithTooltip<VmNetworkInterface> rxColumn = new RxTxRateColumn<VmNetworkInterface>() {

        @Override
        protected Double getRate(VmNetworkInterface object) {
            return object.getStatistics().getReceiveRate();
        }

        @Override
        protected Double getSpeed(VmNetworkInterface object) {
            if (object.getSpeed() != null) {
                return object.getSpeed().doubleValue();
            } else {
                return null;
            }
        }
    };
    statisticsTable.addColumn(rxColumn, templates.sub(constants.rxInterface(), constants.mbps()), // $NON-NLS-1$
    "100px");
    TextColumnWithTooltip<VmNetworkInterface> txColumn = new RxTxRateColumn<VmNetworkInterface>() {

        @Override
        protected Double getRate(VmNetworkInterface object) {
            return object.getStatistics().getTransmitRate();
        }

        @Override
        protected Double getSpeed(VmNetworkInterface object) {
            if (object.getSpeed() != null) {
                return object.getSpeed().doubleValue();
            } else {
                return null;
            }
        }
    };
    statisticsTable.addColumn(txColumn, templates.sub(constants.txInterface(), constants.mbps()), // $NON-NLS-1$
    "100px");
    NullableNumberColumn<VmNetworkInterface> totalRxColumn = new NullableNumberColumn<VmNetworkInterface>() {

        @Override
        protected Number getRawValue(VmNetworkInterface object) {
            return object.getStatistics().getReceivedBytes();
        }
    };
    // $NON-NLS-1$
    statisticsTable.addColumn(totalRxColumn, templates.sub(constants.rxTotal(), constants.bytes()), "150px");
    NullableNumberColumn<VmNetworkInterface> totalTxColumn = new NullableNumberColumn<VmNetworkInterface>() {

        @Override
        protected Number getRawValue(VmNetworkInterface object) {
            return object.getStatistics().getTransmittedBytes();
        }
    };
    // $NON-NLS-1$
    statisticsTable.addColumn(totalTxColumn, templates.sub(constants.txTotal(), constants.bytes()), "150px");
    TextColumnWithTooltip<VmNetworkInterface> dropsColumn = new SumUpColumn<VmNetworkInterface>() {

        @Override
        protected Double[] getRawValue(VmNetworkInterface object) {
            Double receiveDropRate = object != null ? object.getStatistics().getReceiveDropRate() : null;
            Double transmitDropRate = object != null ? object.getStatistics().getTransmitDropRate() : null;
            return new Double[] { receiveDropRate, transmitDropRate };
        }
    };
    statisticsTable.addColumn(dropsColumn, templates.sub(constants.dropsInterface(), constants.pkts()), // $NON-NLS-1$
    "100px");
    statisticsTable.setRowData(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    statisticsTable.setWidth("100%", true);
    statisticsTable.setSelectionModel(new NoSelectionModel());
}
#method_after
private void initStatitsticsTable() {
    statisticsTable = new EntityModelCellTable<ListModel>(false, true);
    statisticsTable.enableColumnResizing();
    TextColumnWithTooltip<VmNetworkInterface> rxColumn = new RxTxRateColumn<VmNetworkInterface>() {

        @Override
        protected Double getRate(VmNetworkInterface object) {
            return object.getStatistics().getReceiveRate();
        }

        @Override
        protected Double getSpeed(VmNetworkInterface object) {
            if (object.getSpeed() != null) {
                return object.getSpeed().doubleValue();
            } else {
                return null;
            }
        }
    };
    statisticsTable.addColumn(rxColumn, templates.sub(constants.rxRate(), constants.mbps()), // $NON-NLS-1$
    "100px");
    TextColumnWithTooltip<VmNetworkInterface> txColumn = new RxTxRateColumn<VmNetworkInterface>() {

        @Override
        protected Double getRate(VmNetworkInterface object) {
            return object.getStatistics().getTransmitRate();
        }

        @Override
        protected Double getSpeed(VmNetworkInterface object) {
            if (object.getSpeed() != null) {
                return object.getSpeed().doubleValue();
            } else {
                return null;
            }
        }
    };
    statisticsTable.addColumn(txColumn, templates.sub(constants.txRate(), constants.mbps()), // $NON-NLS-1$
    "100px");
    NullableNumberColumn<VmNetworkInterface> totalRxColumn = new NullableNumberColumn<VmNetworkInterface>() {

        @Override
        protected Number getRawValue(VmNetworkInterface object) {
            return object.getStatistics().getReceivedBytes();
        }
    };
    // $NON-NLS-1$
    statisticsTable.addColumn(totalRxColumn, templates.sub(constants.rxTotal(), constants.bytes()), "150px");
    NullableNumberColumn<VmNetworkInterface> totalTxColumn = new NullableNumberColumn<VmNetworkInterface>() {

        @Override
        protected Number getRawValue(VmNetworkInterface object) {
            return object.getStatistics().getTransmittedBytes();
        }
    };
    // $NON-NLS-1$
    statisticsTable.addColumn(totalTxColumn, templates.sub(constants.txTotal(), constants.bytes()), "150px");
    TextColumnWithTooltip<VmNetworkInterface> dropsColumn = new SumUpColumn<VmNetworkInterface>() {

        @Override
        protected Double[] getRawValue(VmNetworkInterface object) {
            Double receiveDropRate = object != null ? object.getStatistics().getReceiveDropRate() : null;
            Double transmitDropRate = object != null ? object.getStatistics().getTransmitDropRate() : null;
            return new Double[] { receiveDropRate, transmitDropRate };
        }
    };
    statisticsTable.addColumn(dropsColumn, templates.sub(constants.dropsInterface(), constants.pkts()), // $NON-NLS-1$
    "100px");
    statisticsTable.setRowData(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    statisticsTable.setWidth("100%", true);
    statisticsTable.setSelectionModel(new NoSelectionModel());
}
#end_block

#method_before
private boolean updateVmRunTimeInfo() {
    boolean returnValue = false;
    if (dbVm == null) {
        dbVm = getDbFacade().getVmDao().get(vdsmVm.getVmDynamic().getId());
        // if vm exists in db update info
        if (dbVm != null) {
            // TODO: This is done to keep consistency with VmDAO.getById(Guid).
            // It should probably be removed, but some research is required.
            dbVm.setInterfaces(getDbFacade().getVmNetworkInterfaceDao().getAllForVm(dbVm.getId()));
            if (vdsmVm.getVmDynamic().getStatus() == VMStatus.Up) {
                succeededToRun = true;
            }
        }
    }
    if (dbVm != null) {
        // check if dynamic data changed - update cache and DB
        List<String> props = ObjectIdentityChecker.GetChangedFields(dbVm.getDynamicData(), vdsmVm.getVmDynamic());
        // remove all fields that should not be checked:
        props.removeAll(UNCHANGEABLE_FIELDS_BY_VDSM);
        if (vdsmVm.getVmDynamic().getStatus() != VMStatus.Up) {
            props.remove(VmDynamic.APPLICATIONS_LIST_FIELD_NAME);
            vdsmVm.getVmDynamic().setAppList(dbVm.getAppList());
        } else if (props.contains(VmDynamic.STATUS_FIELD_NAME) && dbVm.getDynamicData().getStatus() == VMStatus.PreparingForHibernate) {
            vdsmVm.getVmDynamic().setStatus(VMStatus.PreparingForHibernate);
            props.remove(VmDynamic.STATUS_FIELD_NAME);
        }
        // if anything else changed
        if (!props.isEmpty()) {
            dbVm.updateRunTimeDynamicData(vdsmVm.getVmDynamic(), getVdsManager().getVdsId(), getVdsManager().getVdsName());
            returnValue = true;
        }
    }
    return returnValue;
}
#method_after
private boolean updateVmRunTimeInfo() {
    boolean returnValue = false;
    if (dbVm == null) {
        dbVm = getDbFacade().getVmDao().get(vdsmVm.getVmDynamic().getId());
        // if vm exists in db update info
        if (dbVm != null) {
            // TODO: This is done to keep consistency with VmDAO.getById(Guid).
            // It should probably be removed, but some research is required.
            dbVm.setInterfaces(getDbFacade().getVmNetworkInterfaceDao().getAllForVm(dbVm.getId()));
            if (vdsmVm.getVmDynamic().getStatus() == VMStatus.Up) {
                succeededToRun = true;
            }
        }
    }
    if (dbVm != null) {
        // check if dynamic data changed - update cache and DB
        List<String> props = ObjectIdentityChecker.GetChangedFields(dbVm.getDynamicData(), vdsmVm.getVmDynamic());
        // remove all fields that should not be checked:
        props.removeAll(UNCHANGEABLE_FIELDS_BY_VDSM);
        if (vdsmVm.getVmDynamic().getStatus() != VMStatus.Up) {
            props.remove(VmDynamic.APPLICATIONS_LIST_FIELD_NAME);
            vdsmVm.getVmDynamic().setAppList(dbVm.getAppList());
        }
        // if anything else changed
        if (!props.isEmpty()) {
            dbVm.updateRunTimeDynamicData(vdsmVm.getVmDynamic(), getVdsManager().getVdsId(), getVdsManager().getVdsName());
            returnValue = true;
        }
    }
    return returnValue;
}
#end_block

#method_before
private static void updateNetworkDetailsInInterface(VdsNetworkInterface iface, Map<String, Object> network, VDS host, Network net) {
    if (iface != null) {
        iface.setNetworkName(net.getName());
        // set the management ip
        if (StringUtils.equals(iface.getNetworkName(), NetworkUtils.getEngineNetwork())) {
            iface.setType(iface.getType() | VdsInterfaceType.MANAGEMENT.getValue());
        }
        iface.setAddress(net.getAddr());
        iface.setSubnet(net.getSubnet());
        boolean bridgedNetwork = isBridgedNetwork(network);
        iface.setBridged(bridgedNetwork);
        setGatewayIfNecessary(iface, host, net.getGateway());
        if (bridgedNetwork) {
            Map<String, Object> networkConfig = (Map<String, Object>) network.get("cfg");
            addBootProtocol(networkConfig, host, iface);
        }
        HostNetworkQosMapper qosMapper = new HostNetworkQosMapper(network);
        iface.setQos(qosMapper.deserialize());
    }
}
#method_after
private static void updateNetworkDetailsInInterface(VdsNetworkInterface iface, Map<String, Object> network, VDS host, Network net) {
    if (iface != null) {
        iface.setNetworkName(net.getName());
        // set the management ip
        if (getManagementNetworkUtil().isManagementNetwork(iface.getNetworkName(), host.getVdsGroupId())) {
            iface.setType(iface.getType() | VdsInterfaceType.MANAGEMENT.getValue());
        }
        iface.setAddress(net.getAddr());
        iface.setSubnet(net.getSubnet());
        boolean bridgedNetwork = isBridgedNetwork(network);
        iface.setBridged(bridgedNetwork);
        setGatewayIfNecessary(iface, host, net.getGateway());
        if (bridgedNetwork) {
            Map<String, Object> networkConfig = (Map<String, Object>) network.get("cfg");
            addBootProtocol(networkConfig, host, iface);
        }
        HostNetworkQosMapper qosMapper = new HostNetworkQosMapper(network);
        iface.setQos(qosMapper.deserialize());
    }
}
#end_block

#method_before
private static void setGatewayIfNecessary(VdsNetworkInterface iface, VDS host, String gateway) {
    if (FeatureSupported.multipleGatewaysSupported(host.getVdsGroupCompatibilityVersion()) || NetworkUtils.getEngineNetwork().equals(iface.getNetworkName()) || iface.getName().equals(host.getActiveNic())) {
        iface.setGateway(gateway);
    }
}
#method_after
private static void setGatewayIfNecessary(VdsNetworkInterface iface, VDS host, String gateway) {
    final ManagementNetworkUtil managementNetworkUtil = getManagementNetworkUtil();
    if (FeatureSupported.multipleGatewaysSupported(host.getVdsGroupCompatibilityVersion()) || managementNetworkUtil.isManagementNetwork(iface.getNetworkName(), host.getVdsGroupId()) || iface.getName().equals(host.getActiveNic())) {
        iface.setGateway(gateway);
    }
}
#end_block

#method_before
@Override
protected VmNetworkInterface createBaseNic() {
    return Cloner.clone(getNic());
}
#method_after
@Override
protected VmNetworkInterface createBaseNic() {
    return new VmNetworkInterface(getNic());
}
#end_block

#method_before
private static VDSGroup cloneVDSGroup(VDSGroup instance) {
    VDSGroup obj = new VDSGroup();
    obj.setId(instance.getId());
    obj.setName(instance.getName());
    obj.setdescription(instance.getdescription());
    obj.setComment(instance.getComment());
    obj.setcpu_name(instance.getcpu_name());
    obj.setcompatibility_version(instance.getcompatibility_version());
    obj.setMigrateOnError(instance.getMigrateOnError());
    obj.setTransparentHugepages(instance.getTransparentHugepages());
    obj.setStoragePoolId(instance.getStoragePoolId());
    obj.setmax_vds_memory_over_commit(instance.getmax_vds_memory_over_commit());
    obj.setCountThreadsAsCores(instance.getCountThreadsAsCores());
    obj.setEmulatedMachine(instance.getEmulatedMachine());
    obj.setDetectEmulatedMachine(instance.isDetectEmulatedMachine());
    obj.setArchitecture(instance.getArchitecture());
    obj.setSerialNumberPolicy(instance.getSerialNumberPolicy());
    obj.setCustomSerialNumber(instance.getCustomSerialNumber());
    obj.setFencingPolicy(new FencingPolicy(instance.getFencingPolicy()));
    obj.setAutoConverge(instance.getAutoConverge());
    obj.setMigrateCompressed(instance.getMigrateCompressed());
    return obj;
}
#method_after
private static VDSGroup cloneVDSGroup(VDSGroup instance) {
    VDSGroup obj = new VDSGroup();
    obj.setId(instance.getId());
    obj.setName(instance.getName());
    obj.setDescription(instance.getDescription());
    obj.setComment(instance.getComment());
    obj.setCpuName(instance.getCpuName());
    obj.setCompatibilityVersion(instance.getCompatibilityVersion());
    obj.setMigrateOnError(instance.getMigrateOnError());
    obj.setTransparentHugepages(instance.getTransparentHugepages());
    obj.setStoragePoolId(instance.getStoragePoolId());
    obj.setMaxVdsMemoryOverCommit(instance.getMaxVdsMemoryOverCommit());
    obj.setCountThreadsAsCores(instance.getCountThreadsAsCores());
    obj.setEmulatedMachine(instance.getEmulatedMachine());
    obj.setDetectEmulatedMachine(instance.isDetectEmulatedMachine());
    obj.setArchitecture(instance.getArchitecture());
    obj.setSerialNumberPolicy(instance.getSerialNumberPolicy());
    obj.setCustomSerialNumber(instance.getCustomSerialNumber());
    obj.setFencingPolicy(new FencingPolicy(instance.getFencingPolicy()));
    obj.setAutoConverge(instance.getAutoConverge());
    obj.setMigrateCompressed(instance.getMigrateCompressed());
    return obj;
}
#end_block

#method_before
private static NetworkCluster cloneNetworkCluster(NetworkCluster instance) {
    NetworkCluster obj = new NetworkCluster();
    obj.setId(instance.getId());
    obj.setStatus(instance.getStatus());
    obj.setDisplay(instance.isDisplay());
    obj.setRequired(instance.isRequired());
    obj.setMigration(instance.isMigration());
    return obj;
}
#method_after
private static NetworkCluster cloneNetworkCluster(NetworkCluster instance) {
    NetworkCluster obj = new NetworkCluster();
    obj.setId(instance.getId());
    obj.setStatus(instance.getStatus());
    obj.setDisplay(instance.isDisplay());
    obj.setRequired(instance.isRequired());
    obj.setMigration(instance.isMigration());
    obj.setManagement(instance.isManagement());
    return obj;
}
#end_block

#method_before
@Override
public VmNetworkInterface mapRow(ResultSet rs, int rowNum) throws SQLException {
    VmNetworkInterface entity = super.mapRow(rs, rowNum);
    VmNetworkStatisticsRowMapper statisticsMapper = new VmNetworkStatisticsRowMapper();
    entity.setStatistics(statisticsMapper.mapRow(rs, rowNum));
    entity.setNetworkName(rs.getString("network_name"));
    entity.setVmName(rs.getString("vm_name"));
    entity.setVnicProfileName(rs.getString("vnic_profile_name"));
    entity.setPlugged(rs.getBoolean("is_plugged"));
    entity.setPortMirroring(rs.getBoolean("port_mirroring"));
    entity.setQosName(rs.getString("qos_name"));
    return entity;
}
#method_after
@Override
public VmNetworkInterface mapRow(ResultSet rs, int rowNum) throws SQLException {
    VmNetworkInterface entity = super.mapRow(rs, rowNum);
    entity.setStatistics(VmNetworkStatisticsRowMapper.INSTANCE.mapRow(rs, rowNum));
    entity.setNetworkName(rs.getString("network_name"));
    entity.setVmName(rs.getString("vm_name"));
    entity.setVnicProfileName(rs.getString("vnic_profile_name"));
    entity.setPlugged(rs.getBoolean("is_plugged"));
    entity.setPortMirroring(rs.getBoolean("port_mirroring"));
    entity.setQosName(rs.getString("qos_name"));
    return entity;
}
#end_block

#method_before
@Override
protected RowMapper<VmNetworkStatistics> createEntityRowMapper() {
    return new VmNetworkStatisticsRowMapper();
}
#method_after
@Override
protected RowMapper<VmNetworkStatistics> createEntityRowMapper() {
    return VmNetworkStatisticsRowMapper.INSTANCE;
}
#end_block

#method_before
@Override
protected void initWidget(Widget wrapperWidget) {
    super.initWidget(wrapperWidget);
    contentWidgetContainer.setWidget(contentWidget);
    // Adjust content widget width
    // $NON-NLS-1$
    contentWidget.asWidget().setWidth("100%");
    // Assign ID to content widget element if it's missing or empty
    Element contentWidgetElement = getContentWidgetElement();
    if (contentWidgetElement.getId() == null || contentWidgetElement.getId().isEmpty()) {
        contentWidgetElement.setId(DOM.createUniqueId());
    }
    // Connect label with content widget for better accessibility
    updateLabelElementId(getContentWidgetElement().getId());
}
#method_after
@Override
protected void initWidget(Widget wrapperWidget) {
    super.initWidget(wrapperWidget);
    contentWidgetContainer.setWidget(contentWidget);
    label.addStyleName(OvirtCss.LABEL_ENABLED);
    // Assign ID to content widget element if it's missing or empty
    Element contentWidgetElement = getContentWidgetElement();
    if (contentWidgetElement.getId() == null || contentWidgetElement.getId().isEmpty()) {
        setElementId(DOM.createUniqueId());
    }
}
#end_block

#method_before
protected void updateLabelElementId(String elementId) {
    labelElement.setHtmlFor(elementId);
}
#method_after
protected void updateLabelElementId(String elementId) {
    label.setFor(elementId);
}
#end_block

#method_before
public void setUsePatternFly(final boolean usePatternFly) {
    // clear out styles
    // $NON-NLS-1$
    setWrapperStyleName("");
    // $NON-NLS-1$
    setContentWidgetContainerStyleName("");
    // $NON-NLS-1$
    setContentWidgetContainerStyleName("");
    // $NON-NLS-1$
    setLabelStyleName("");
    // add proper styles
    if (usePatternFly) {
        addContentWidgetStyleName(PatternflyConstants.FORM_CONTROL);
        addWrapperStyleName(PatternflyConstants.FORM_GROUP);
    } else {
        addContentWidgetContainerStyleName(style.contentWidget());
        addWrapperStyleName(style.wrapper());
    }
    // $NON-NLS-1$
    addContentWidgetContainerStyleName("avw_contentWidget_pfly_fix");
    // $NON-NLS-1$
    addWrapperStyleName("avw_wrapper_pfly_fix");
    addLabelStyleName(style.label());
    addLabelStyleName(style.labelEnabled());
}
#method_after
public void setUsePatternFly(final boolean usePatternFly) {
    // toggle styles -- remove both PatternFly and non-PatternFly styles
    removeLabelStyleName(style.label_legacy());
    removeContentWidgetStyleName(style.contentWidget_legacy());
    removeContentWidgetStyleName(Styles.FORM_CONTROL);
    removeContentWidgetContainerStyleName(style.contentWidgetContainer_legacy());
    // $NON-NLS-1$
    removeContentWidgetContainerStyleName("avw_contentWidgetContainer_pfly_fix");
    removeWrapperStyleName(Styles.FORM_GROUP);
    removeWrapperStyleName(style.wrapper_legacy());
    // $NON-NLS-1$
    removeWrapperStyleName("avw_wrapper_pfly_fix");
    // add the proper styles
    if (usePatternFly) {
        addContentWidgetStyleName(Styles.FORM_CONTROL);
        addWrapperStyleName(Styles.FORM_GROUP);
    } else {
        addLabelStyleName(style.label_legacy());
        addContentWidgetStyleName(style.contentWidget_legacy());
        addContentWidgetContainerStyleName(style.contentWidgetContainer_legacy());
        // $NON-NLS-1$
        addContentWidgetContainerStyleName("avw_contentWidgetContainer_pfly_fix");
        addWrapperStyleName(style.wrapper_legacy());
        // $NON-NLS-1$
        addWrapperStyleName("avw_wrapper_pfly_fix");
    }
}
#end_block

#method_before
@Override
public String getLabel() {
    return labelElement.getInnerText();
}
#method_after
@Override
public String getLabel() {
    return label.getElement().getInnerText();
}
#end_block

#method_before
@Override
public void setLabel(String label) {
    labelElement.setInnerText(label);
}
#method_after
@Override
public void setLabel(String labelText) {
    label.getElement().setInnerText(labelText);
}
#end_block

#method_before
@Override
public void setEnabled(boolean enabled) {
    contentWidget.setEnabled(enabled);
    if (enabled) {
        getLabelElement().replaceClassName(style.labelDisabled(), style.labelEnabled());
    } else {
        getLabelElement().replaceClassName(style.labelEnabled(), style.labelDisabled());
    }
    if (!keepTitleOnSetEnabled) {
        updateWidgetTitle(null);
    }
}
#method_after
@Override
public void setEnabled(boolean enabled) {
    contentWidget.setEnabled(enabled);
    if (enabled) {
        getFormLabel().getElement().replaceClassName(OvirtCss.LABEL_DISABLED, OvirtCss.LABEL_ENABLED);
    } else {
        getFormLabel().getElement().replaceClassName(OvirtCss.LABEL_ENABLED, OvirtCss.LABEL_DISABLED);
    }
    if (!keepTitleOnSetEnabled) {
        updateWidgetTitle(null);
    }
}
#end_block

#method_before
public void addLabelStyleName(String styleName) {
    getLabelElement().addClassName(styleName);
}
#method_after
public void addLabelStyleName(String styleName) {
    getFormLabel().addStyleName(styleName);
}
#end_block

#method_before
public void setLabelStyleName(String styleName) {
    getLabelElement().setClassName(styleName);
}
#method_after
public void setLabelStyleName(String styleName) {
    getFormLabel().setStyleName(styleName);
}
#end_block

#method_before
// end set styleNames on my components
public void hideLabel() {
    getLabelElement().addClassName(style.labelHidden());
}
#method_after
// end set styleNames on my components
public void hideLabel() {
    getFormLabel().setVisible(false);
}
#end_block

#method_before
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterWithClusterEditor = new ListModelTypeAheadListBoxEditor<DataCenterWithCluster>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<DataCenterWithCluster>() {

        @Override
        public String getReplacementStringNullSafe(DataCenterWithCluster data) {
            return // $NON-NLS-1$
            data.getCluster().getName() + "/" + data.getDataCenter().getName();
        }

        @Override
        public String getDisplayStringNullSafe(DataCenterWithCluster data) {
            String dcDescription = data.getDataCenter().getdescription();
            return typeAheadNameDescriptionTemplateNullSafe(data.getCluster().getName(), !StringHelper.isNullOrEmpty(dcDescription) ? dcDescription : data.getDataCenter().getName());
        }
    }, new ModeSwitchingVisibilityRenderer());
    quotaEditor = new ListModelTypeAheadListBoxEditor<Quota>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<Quota>() {

        @Override
        public String getReplacementStringNullSafe(Quota data) {
            return data.getQuotaName();
        }

        @Override
        public String getDisplayStringNullSafe(Quota data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getQuotaName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    baseTemplateEditor = new ListModelTypeAheadListBoxEditor<VmTemplate>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<VmTemplate>() {

        @Override
        public String getReplacementStringNullSafe(VmTemplate data) {
            return data.getName();
        }

        @Override
        public String getDisplayStringNullSafe(VmTemplate data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    templateWithVersionEditor = new ListModelTypeAheadListBoxEditor<>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<TemplateWithVersion>() {

        @Override
        public String getReplacementStringNullSafe(TemplateWithVersion templateWithVersion) {
            return getFirstColumn(templateWithVersion) + // $NON-NLS-1$
            " | " + getSecondColumn(templateWithVersion);
        }

        @Override
        public String getDisplayStringNullSafe(TemplateWithVersion templateWithVersion) {
            return typeAheadNameDescriptionTemplateNullSafe(getFirstColumn(templateWithVersion), getSecondColumn(templateWithVersion));
        }

        private String getFirstColumn(TemplateWithVersion templateWithVersion) {
            return templateWithVersion.getBaseTemplate().getName();
        }

        private String getSecondColumn(TemplateWithVersion templateWithVersion) {
            final VmTemplate versionTemplate = templateWithVersion.getTemplateVersion();
            final String versionName = versionTemplate.getTemplateVersionName() == null ? // $NON-NLS-1$
            "" : // $NON-NLS-1$
            versionTemplate.getTemplateVersionName() + " ";
            return templateWithVersion.isLatest() ? constants.latest() : // $NON-NLS-1$
            versionName + "(" + versionTemplate.getTemplateVersionNumber() + // $NON-NLS-1$
            ")";
        }
    }, new ModeSwitchingVisibilityRenderer(), new SuggestionMatcher.ContainsSuggestionMatcher());
    oSTypeEditor = new ListModelListBoxEditor<Integer>(new AbstractRenderer<Integer>() {

        @Override
        public String render(Integer object) {
            return AsyncDataProvider.getInstance().getOsName(object);
        }
    }, new ModeSwitchingVisibilityRenderer());
    vmTypeEditor = new ListModelListBoxEditor<VmType>(new EnumRenderer<VmType>(), new ModeSwitchingVisibilityRenderer());
    instanceTypesEditor = new ListModelTypeAheadListBoxEditor<InstanceType>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<InstanceType>() {

        @Override
        public String getReplacementStringNullSafe(InstanceType data) {
            return data.getName();
        }

        @Override
        public String getDisplayStringNullSafe(InstanceType data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    emulatedMachine = new ListModelTypeAheadChangeableListBoxEditor(new ListModelTypeAheadChangeableListBoxEditor.NullSafeSuggestBoxRenderer() {

        @Override
        public String getDisplayStringNullSafe(String data) {
            if (data == null || data.trim().isEmpty()) {
                data = constants.clusterDefaultOption();
            }
            return typeAheadNameTemplateNullSafe(data);
        }
    }, false, new ModeSwitchingVisibilityRenderer(), constants.clusterDefaultOption());
    customCpu = new ListModelTypeAheadChangeableListBoxEditor(new ListModelTypeAheadChangeableListBoxEditor.NullSafeSuggestBoxRenderer() {

        @Override
        public String getDisplayStringNullSafe(String data) {
            if (data == null || data.trim().isEmpty()) {
                data = constants.clusterDefaultOption();
            }
            return typeAheadNameTemplateNullSafe(data);
        }
    }, false, new ModeSwitchingVisibilityRenderer(), constants.clusterDefaultOption());
    numOfSocketsEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    numOfSocketsEditorWithDetachable = new EntityModelDetachableWidgetWithLabel(numOfSocketsEditor);
    corePerSocketEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    corePerSocketEditorWithDetachable = new EntityModelDetachableWidgetWithLabel(corePerSocketEditor);
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<EntityModel<VmPoolType>>(new NullSafeRenderer<EntityModel<VmPoolType>>() {

        @Override
        public String renderNullSafe(EntityModel<VmPoolType> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    timeZoneEditor = new ListModelListBoxOnlyEditor<TimeZoneModel>(new NullSafeRenderer<TimeZoneModel>() {

        @Override
        public String renderNullSafe(TimeZoneModel timeZone) {
            if (timeZone.isDefault()) {
                return messages.defaultTimeZoneCaption(timeZone.getDisplayValue());
            } else {
                return timeZone.getDisplayValue();
            }
        }
    }, new ModeSwitchingVisibilityRenderer());
    StringEntityModelLabel label = new StringEntityModelLabel();
    label.setText(constants.tzVmPopup());
    timeZoneEditorWithInfo = new EntityModelWidgetWithInfo<String>(label, timeZoneEditor);
    timeZoneEditorWithInfo.setExplanation(applicationTemplates.italicText(constants.timeZoneInfo()));
    // Console tab
    displayTypeEditor = new ListModelListBoxEditor<EntityModel<DisplayType>>(new NullSafeRenderer<EntityModel<DisplayType>>() {

        @Override
        public String renderNullSafe(EntityModel<DisplayType> object) {
            return EnumTranslator.getInstance().get(object.getEntity());
        }
    }, new ModeSwitchingVisibilityRenderer());
    graphicsTypeEditor = new ListModelListBoxEditor<UnitVmModel.GraphicsTypes>(new EnumRenderer<UnitVmModel.GraphicsTypes>());
    usbSupportEditor = new ListModelListBoxEditor<UsbPolicy>(new EnumRenderer<UsbPolicy>(), new ModeSwitchingVisibilityRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Integer>(new NullSafeRenderer<Integer>() {

        @Override
        public String renderNullSafe(Integer object) {
            return object.toString();
        }
    }, new ModeSwitchingVisibilityRenderer());
    vncKeyboardLayoutEditor = new ListModelListBoxEditor<String>(new VncKeyMapRenderer(messages), new ModeSwitchingVisibilityRenderer());
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    isAutoAssignEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("runVmOnHostGroup", new ModeSwitchingVisibilityRenderer());
    defaultHostEditor = new ListModelListBoxEditor<VDS>(new NullSafeRenderer<VDS>() {

        @Override
        public String renderNullSafe(VDS object) {
            return object.getName();
        }
    }, new ModeSwitchingVisibilityRenderer());
    migrationModeEditor = new ListModelListBoxEditor<MigrationSupport>(new EnumRenderer<MigrationSupport>(), new ModeSwitchingVisibilityRenderer());
    overrideMigrationDowntimeEditor = new EntityModelCheckBoxOnlyEditor(new ModeSwitchingVisibilityRenderer(), false);
    migrationDowntimeEditor = new IntegerEntityModelTextBoxOnlyEditor(new ModeSwitchingVisibilityRenderer());
    autoConvergeEditor = new ListModelListBoxEditor<Boolean>(new BooleanRendererWithNullText(constants.autoConverge(), constants.dontAutoConverge(), constants.inheritFromCluster()), new ModeSwitchingVisibilityRenderer());
    migrateCompressedEditor = new ListModelListBoxEditor<Boolean>(new BooleanRendererWithNullText(constants.compress(), constants.dontCompress(), constants.inheritFromCluster()), new ModeSwitchingVisibilityRenderer());
    // Resource Allocation
    provisioningThinEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    provisioningCloneEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    secondBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    cdImageEditor = new ListModelListBoxEditor<String>(new NullSafeRenderer<String>() {

        @Override
        public String renderNullSafe(String object) {
            return object;
        }
    }, new ModeSwitchingVisibilityRenderer());
    cpuProfilesEditor = new ListModelListBoxEditor<CpuProfile>(new NullSafeRenderer<CpuProfile>() {

        @Override
        protected String renderNullSafe(CpuProfile object) {
            return object.getName();
        }
    });
    cpuSharesAmountSelectionEditor = new ListModelListBoxOnlyEditor<UnitVmModel.CpuSharesAmount>(new EnumRenderer<UnitVmModel.CpuSharesAmount>(), new ModeSwitchingVisibilityRenderer());
    numaTuneMode = new ListModelListBoxEditor<NumaTuneMode>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
}
#method_after
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterWithClusterEditor = new ListModelTypeAheadListBoxEditor<DataCenterWithCluster>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<DataCenterWithCluster>() {

        @Override
        public String getReplacementStringNullSafe(DataCenterWithCluster data) {
            return // $NON-NLS-1$
            data.getCluster().getName() + "/" + data.getDataCenter().getName();
        }

        @Override
        public String getDisplayStringNullSafe(DataCenterWithCluster data) {
            String dcDescription = data.getDataCenter().getdescription();
            return typeAheadNameDescriptionTemplateNullSafe(data.getCluster().getName(), !StringHelper.isNullOrEmpty(dcDescription) ? dcDescription : data.getDataCenter().getName());
        }
    }, new ModeSwitchingVisibilityRenderer());
    quotaEditor = new ListModelTypeAheadListBoxEditor<Quota>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<Quota>() {

        @Override
        public String getReplacementStringNullSafe(Quota data) {
            return data.getQuotaName();
        }

        @Override
        public String getDisplayStringNullSafe(Quota data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getQuotaName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    baseTemplateEditor = new ListModelTypeAheadListBoxEditor<VmTemplate>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<VmTemplate>() {

        @Override
        public String getReplacementStringNullSafe(VmTemplate data) {
            return data.getName();
        }

        @Override
        public String getDisplayStringNullSafe(VmTemplate data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    templateWithVersionEditor = new ListModelTypeAheadListBoxEditor<>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<TemplateWithVersion>() {

        @Override
        public String getReplacementStringNullSafe(TemplateWithVersion templateWithVersion) {
            return getFirstColumn(templateWithVersion) + // $NON-NLS-1$
            " | " + getSecondColumn(templateWithVersion);
        }

        @Override
        public String getDisplayStringNullSafe(TemplateWithVersion templateWithVersion) {
            return typeAheadNameDescriptionTemplateNullSafe(getFirstColumn(templateWithVersion), getSecondColumn(templateWithVersion));
        }

        private String getFirstColumn(TemplateWithVersion templateWithVersion) {
            return templateWithVersion.getBaseTemplate().getName();
        }

        private String getSecondColumn(TemplateWithVersion templateWithVersion) {
            final VmTemplate versionTemplate = templateWithVersion.getTemplateVersion();
            final String versionName = versionTemplate.getTemplateVersionName() == null ? // $NON-NLS-1$
            "" : // $NON-NLS-1$
            versionTemplate.getTemplateVersionName() + " ";
            return templateWithVersion.isLatest() ? constants.latest() : // $NON-NLS-1$
            versionName + "(" + versionTemplate.getTemplateVersionNumber() + // $NON-NLS-1$
            ")";
        }
    }, new ModeSwitchingVisibilityRenderer(), new SuggestionMatcher.ContainsSuggestionMatcher());
    oSTypeEditor = new ListModelListBoxEditor<Integer>(new AbstractRenderer<Integer>() {

        @Override
        public String render(Integer object) {
            return AsyncDataProvider.getInstance().getOsName(object);
        }
    }, new ModeSwitchingVisibilityRenderer());
    vmTypeEditor = new ListModelListBoxEditor<VmType>(new EnumRenderer<VmType>(), new ModeSwitchingVisibilityRenderer());
    instanceTypesEditor = new ListModelTypeAheadListBoxEditor<InstanceType>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<InstanceType>() {

        @Override
        public String getReplacementStringNullSafe(InstanceType data) {
            return data.getName();
        }

        @Override
        public String getDisplayStringNullSafe(InstanceType data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    emulatedMachine = new ListModelTypeAheadChangeableListBoxEditor(new ListModelTypeAheadChangeableListBoxEditor.NullSafeSuggestBoxRenderer() {

        @Override
        public String getDisplayStringNullSafe(String data) {
            if (data == null || data.trim().isEmpty()) {
                data = constants.clusterDefaultOption();
            }
            return typeAheadNameTemplateNullSafe(data);
        }
    }, false, new ModeSwitchingVisibilityRenderer(), constants.clusterDefaultOption());
    customCpu = new ListModelTypeAheadChangeableListBoxEditor(new ListModelTypeAheadChangeableListBoxEditor.NullSafeSuggestBoxRenderer() {

        @Override
        public String getDisplayStringNullSafe(String data) {
            if (data == null || data.trim().isEmpty()) {
                data = constants.clusterDefaultOption();
            }
            return typeAheadNameTemplateNullSafe(data);
        }
    }, false, new ModeSwitchingVisibilityRenderer(), constants.clusterDefaultOption());
    numOfSocketsEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    numOfSocketsEditorWithDetachable = new EntityModelDetachableWidgetWithLabel(numOfSocketsEditor);
    corePerSocketEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    corePerSocketEditorWithDetachable = new EntityModelDetachableWidgetWithLabel(corePerSocketEditor);
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<EntityModel<VmPoolType>>(new NullSafeRenderer<EntityModel<VmPoolType>>() {

        @Override
        public String renderNullSafe(EntityModel<VmPoolType> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    timeZoneEditor = new ListModelListBoxOnlyEditor<TimeZoneModel>(new NullSafeRenderer<TimeZoneModel>() {

        @Override
        public String renderNullSafe(TimeZoneModel timeZone) {
            if (timeZone.isDefault()) {
                return messages.defaultTimeZoneCaption(timeZone.getDisplayValue());
            } else {
                return timeZone.getDisplayValue();
            }
        }
    }, new ModeSwitchingVisibilityRenderer());
    StringEntityModelLabel label = new StringEntityModelLabel();
    label.setText(constants.tzVmPopup());
    timeZoneEditorWithInfo = new EntityModelWidgetWithInfo<String>(label, timeZoneEditor);
    timeZoneEditorWithInfo.setExplanation(applicationTemplates.italicText(constants.timeZoneInfo()));
    // Console tab
    displayTypeEditor = new ListModelListBoxEditor<>(new EnumRenderer<DisplayType>(), new ModeSwitchingVisibilityRenderer());
    graphicsTypeEditor = new ListModelListBoxEditor<>(new EnumRenderer<UnitVmModel.GraphicsTypes>());
    usbSupportEditor = new ListModelListBoxEditor<UsbPolicy>(new EnumRenderer<UsbPolicy>(), new ModeSwitchingVisibilityRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Integer>(new NullSafeRenderer<Integer>() {

        @Override
        public String renderNullSafe(Integer object) {
            return object.toString();
        }
    }, new ModeSwitchingVisibilityRenderer());
    vncKeyboardLayoutEditor = new ListModelListBoxEditor<String>(new VncKeyMapRenderer(messages), new ModeSwitchingVisibilityRenderer());
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    isAutoAssignEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("runVmOnHostGroup", new ModeSwitchingVisibilityRenderer());
    defaultHostEditor = new ListModelListBoxEditor<VDS>(new NullSafeRenderer<VDS>() {

        @Override
        public String renderNullSafe(VDS object) {
            return object.getName();
        }
    }, new ModeSwitchingVisibilityRenderer());
    migrationModeEditor = new ListModelListBoxEditor<MigrationSupport>(new EnumRenderer<MigrationSupport>(), new ModeSwitchingVisibilityRenderer());
    overrideMigrationDowntimeEditor = new EntityModelCheckBoxOnlyEditor(new ModeSwitchingVisibilityRenderer(), false);
    migrationDowntimeEditor = new IntegerEntityModelTextBoxOnlyEditor(new ModeSwitchingVisibilityRenderer());
    autoConvergeEditor = new ListModelListBoxEditor<Boolean>(new BooleanRendererWithNullText(constants.autoConverge(), constants.dontAutoConverge(), constants.inheritFromCluster()), new ModeSwitchingVisibilityRenderer());
    migrateCompressedEditor = new ListModelListBoxEditor<Boolean>(new BooleanRendererWithNullText(constants.compress(), constants.dontCompress(), constants.inheritFromCluster()), new ModeSwitchingVisibilityRenderer());
    // Resource Allocation
    provisioningThinEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    provisioningCloneEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    secondBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    cdImageEditor = new ListModelListBoxEditor<String>(new NullSafeRenderer<String>() {

        @Override
        public String renderNullSafe(String object) {
            return object;
        }
    }, new ModeSwitchingVisibilityRenderer());
    cpuProfilesEditor = new ListModelListBoxEditor<CpuProfile>(new NullSafeRenderer<CpuProfile>() {

        @Override
        protected String renderNullSafe(CpuProfile object) {
            return object.getName();
        }
    });
    cpuSharesAmountSelectionEditor = new ListModelListBoxOnlyEditor<UnitVmModel.CpuSharesAmount>(new EnumRenderer<UnitVmModel.CpuSharesAmount>(), new ModeSwitchingVisibilityRenderer());
    numaTuneMode = new ListModelListBoxEditor<NumaTuneMode>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
}
#end_block

#method_before
private void updateEditorStyle(AbstractValidatedWidgetWithLabel editor, String contentStyle) {
    editor.setContentWidgetContainerStyleName(contentStyle);
    // $NON-NLS-1$
    editor.addContentWidgetContainerStyleName("avw_contentWidget_pfly_fix");
    editor.addWrapperStyleName(style.editorWrapper());
    editor.setLabelStyleName(style.editorLabel());
}
#method_after
private void updateEditorStyle(AbstractValidatedWidgetWithLabel editor, String contentStyle) {
    editor.setContentWidgetContainerStyleName(contentStyle);
    // $NON-NLS-1$
    editor.addContentWidgetContainerStyleName("avw_contentWidgetContainer_pfly_fix");
    editor.addWrapperStyleName(style.editorWrapper());
    editor.setLabelStyleName(style.editorLabel());
}
#end_block

#method_before
public void setupContentWidgetContainerLayout(Align attachedImageAlign) {
    if (attachedImageAlign == Align.LEFT) {
        contentWidgetContainer.getElement().getStyle().setFloat(Float.RIGHT);
    } else if (attachedImageAlign == Align.RIGHT) {
        contentWidgetContainer.getElement().getStyle().setFloat(Float.LEFT);
        contentWidgetContainer.getElement().getStyle().setWidth(AbstractValidatedWidgetWithLabel.LEGACY_CONTENT_WIDTH, Unit.PX);
    }
}
#method_after
public void setupContentWidgetContainerLayout(Align attachedImageAlign) {
    if (attachedImageAlign == Align.LEFT) {
        contentWidgetContainer.getElement().getStyle().setFloat(Float.RIGHT);
    } else if (attachedImageAlign == Align.RIGHT) {
        contentWidgetContainer.getElement().getStyle().setFloat(Float.LEFT);
        contentWidgetContainer.getElement().getStyle().setWidth(AbstractValidatedWidgetWithLabel.CONTENT_WIDTH_LEGACY, Unit.PX);
    }
}
#end_block

#method_before
protected void setStyles() {
    errorMessagePanel.setVisible(false);
    informationMessagePanel.setVisible(false);
    // $NON-NLS-1$
    passwordEditor.setAutoComplete("off");
    userNameEditor.addLabelStyleName(PatternflyConstants.COL_SM_2);
    userNameEditor.addLabelStyleName(PatternflyConstants.COL_MD_2);
    userNameEditor.addLabelStyleName(PatternflyConstants.CONTROL_LABEL);
    // $NON-NLS-1$
    userNameEditor.addLabelStyleName("white");
    userNameEditor.addContentWidgetContainerStyleName(PatternflyConstants.COL_SM_10);
    userNameEditor.addContentWidgetContainerStyleName(PatternflyConstants.COL_MD_10);
    passwordEditor.addLabelStyleName(PatternflyConstants.COL_SM_2);
    passwordEditor.addLabelStyleName(PatternflyConstants.COL_MD_2);
    passwordEditor.addLabelStyleName(PatternflyConstants.CONTROL_LABEL);
    // $NON-NLS-1$
    userNameEditor.addLabelStyleName("white");
    passwordEditor.addContentWidgetContainerStyleName(PatternflyConstants.COL_SM_10);
    passwordEditor.addContentWidgetContainerStyleName(PatternflyConstants.COL_MD_10);
    profileEditor.addLabelStyleName(PatternflyConstants.COL_SM_2);
    profileEditor.addLabelStyleName(PatternflyConstants.COL_MD_2);
    profileEditor.addLabelStyleName(PatternflyConstants.CONTROL_LABEL);
    // $NON-NLS-1$
    userNameEditor.addLabelStyleName("white");
    profileEditor.addContentWidgetContainerStyleName(PatternflyConstants.COL_SM_10);
    profileEditor.addContentWidgetContainerStyleName(PatternflyConstants.COL_MD_10);
}
#method_after
protected void setStyles() {
    errorMessagePanel.setVisible(false);
    informationMessagePanel.setVisible(false);
    // $NON-NLS-1$
    passwordEditor.setAutoComplete("off");
    userNameEditor.addLabelStyleName(ColumnSize.SM_2.getCssName());
    userNameEditor.addLabelStyleName(Styles.CONTROL_LABEL);
    // $NON-NLS-1$
    userNameEditor.addLabelStyleName("white");
    userNameEditor.addContentWidgetContainerStyleName(ColumnSize.SM_10.getCssName());
    passwordEditor.addLabelStyleName(ColumnSize.SM_2.getCssName());
    passwordEditor.addLabelStyleName(Styles.CONTROL_LABEL);
    // $NON-NLS-1$
    userNameEditor.addLabelStyleName("white");
    passwordEditor.addContentWidgetContainerStyleName(ColumnSize.SM_10.getCssName());
    profileEditor.addLabelStyleName(ColumnSize.SM_2.getCssName());
    profileEditor.addLabelStyleName(Styles.CONTROL_LABEL);
    // $NON-NLS-1$
    userNameEditor.addLabelStyleName("white");
    profileEditor.addContentWidgetContainerStyleName(ColumnSize.SM_10.getCssName());
}
#end_block

#method_before
@Override
public void initSelectedProfile(ListModel profileList, VmNetworkInterface networkInterface) {
    List<VnicProfileView> profiles = (List<VnicProfileView>) profileList.getItems();
    profiles = profiles == null ? new ArrayList<VnicProfileView>() : profiles;
    for (VnicProfileView profile : profiles) {
        if (getManagementNetwork() != null && profile != null && getManagementNetwork().getName().equals(profile.getNetworkName())) {
            profileList.setSelectedItem(profile);
            return;
        }
    }
    profileList.setSelectedItem(profiles.size() > 0 ? profiles.get(0) : VnicProfileView.EMPTY);
}
#method_after
@Override
public void initSelectedProfile(ListModel profileList, VmNetworkInterface networkInterface) {
    List<VnicProfileView> profiles = (List<VnicProfileView>) profileList.getItems();
    profiles = profiles == null ? new ArrayList<VnicProfileView>() : profiles;
    for (VnicProfileView profile : profiles) {
        if (getManagementNetworkName() != null && profile != null && getManagementNetworkName().equals(profile.getNetworkName())) {
            profileList.setSelectedItem(profile);
            return;
        }
    }
    profileList.setSelectedItem(profiles.size() > 0 ? profiles.get(0) : VnicProfileView.EMPTY);
}
#end_block

#method_before
public void initProfiles(final boolean hotUpdateSupported, final Guid clusterId, final Guid dcId, final AsyncQuery profilesQuery) {
    profilesQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery asyncQuery) {
            List<Network> clusterNetworks = (ArrayList<Network>) asyncQuery.getModel();
            ProfileBehavior.this.clusterNetworks = clusterNetworks;
            List<VnicProfileView> vnicProfiles = new ArrayList<VnicProfileView>();
            if (hotUpdateSupported) {
                vnicProfiles.add(VnicProfileView.EMPTY);
            }
            if (returnValue == null) {
                return vnicProfiles;
            }
            for (VnicProfileView vnicProfile : (List<VnicProfileView>) returnValue) {
                Network network = findNetworkById(vnicProfile.getNetworkId());
                if (network != null && network.isVmNetwork()) {
                    vnicProfiles.add(vnicProfile);
                }
            }
            Collections.sort(vnicProfiles, new Linq.VnicProfileViewComparator());
            return vnicProfiles;
        }
    };
    AsyncQuery networksQuery = new AsyncQuery();
    networksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model1, Object result1) {
            List<Network> clusterNetworks = (List<Network>) result1;
            managementNetwork = Linq.findManagentNetwork(clusterNetworks);
            profilesQuery.setModel(clusterNetworks);
            AsyncDataProvider.getInstance().getVnicProfilesByDcId(profilesQuery, dcId);
        }
    };
    AsyncDataProvider.getInstance().getClusterNetworkList(networksQuery, clusterId);
}
#method_after
public void initProfiles(final boolean hotUpdateSupported, final Guid clusterId, final Guid dcId, final AsyncQuery profilesQuery) {
    profilesQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object returnValue, AsyncQuery asyncQuery) {
            List<Network> clusterNetworks = (ArrayList<Network>) asyncQuery.getModel();
            ProfileBehavior.this.clusterNetworks = clusterNetworks;
            List<VnicProfileView> vnicProfiles = new ArrayList<VnicProfileView>();
            if (hotUpdateSupported) {
                vnicProfiles.add(VnicProfileView.EMPTY);
            }
            if (returnValue == null) {
                return vnicProfiles;
            }
            for (VnicProfileView vnicProfile : (List<VnicProfileView>) returnValue) {
                Network network = findNetworkById(vnicProfile.getNetworkId());
                if (network != null && network.isVmNetwork()) {
                    vnicProfiles.add(vnicProfile);
                }
            }
            Collections.sort(vnicProfiles, new Linq.VnicProfileViewComparator());
            return vnicProfiles;
        }
    };
    AsyncQuery networksQuery = new AsyncQuery();
    networksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model1, Object result1) {
            List<Network> clusterNetworks = (List<Network>) result1;
            managementNetworkName = Linq.findManagementNetwork(clusterNetworks).getName();
            profilesQuery.setModel(clusterNetworks);
            AsyncDataProvider.getInstance().getVnicProfilesByDcId(profilesQuery, dcId);
        }
    };
    AsyncDataProvider.getInstance().getClusterNetworkList(networksQuery, clusterId);
}
#end_block

#method_before
public void setVmNetwork(Boolean vmNetwork) {
    if (!ObjectUtils.objectsEqual(this.vmNetwork, vmNetwork)) {
        this.vmNetwork = vmNetwork;
        // $NON-NLS-1$
        onPropertyChanged(new PropertyChangedEventArgs("Vm Network"));
    }
}
#method_after
public void setVmNetwork(Boolean vmNetwork) {
    this.vmNetwork = vmNetwork;
}
#end_block

#method_before
public VdsNetworkInterface attach(NetworkInterfaceModel targetNic, boolean createBridge) {
    attachedToNic = targetNic;
    List<LogicalNetworkModel> networksOnTarget = targetNic.getItems();
    networksOnTarget.add(this);
    if (!hasVlan()) {
        restoreNetworkParameters(targetNic.getEntity());
    }
    if (isManagement()) {
        // mark the nic as a management nic
        targetNic.getEntity().setType(2);
    }
    if (!createBridge) {
        return null;
    }
    VdsNetworkInterface targetNicEntity = targetNic.getEntity();
    if (hasVlan()) {
        // create vlan bridge (eth0.1)
        VdsNetworkInterface bridge = new VdsNetworkInterface();
        // $NON-NLS-1$
        bridge.setName(targetNic.getName() + "." + getVlanId());
        bridge.setNetworkName(getName());
        bridge.setBaseInterface(targetNic.getName());
        bridge.setVlanId(getVlanId());
        bridge.setMtu(getEntity().getMtu());
        bridge.setVdsId(targetNicEntity.getVdsId());
        bridge.setVdsName(targetNicEntity.getVdsName());
        bridge.setBridged(getEntity().isVmNetwork());
        restoreNetworkParameters(bridge);
        return bridge;
    } else {
        targetNicEntity.setNetworkName(getName());
        targetNicEntity.setMtu(getEntity().getMtu());
        targetNicEntity.setBridged(getEntity().isVmNetwork());
        return null;
    }
}
#method_after
public VdsNetworkInterface attach(NetworkInterfaceModel targetNic, boolean createBridge) {
    attachedToNic = targetNic;
    List<LogicalNetworkModel> networksOnTarget = targetNic.getItems();
    networksOnTarget.add(this);
    if (!hasVlan()) {
        restoreNetworkParameters(targetNic.getEntity());
    }
    if (isManagement()) {
        // mark the nic as a management nic
        targetNic.getEntity().setType(2);
    }
    if (!createBridge) {
        return null;
    }
    VdsNetworkInterface targetNicEntity = targetNic.getEntity();
    if (hasVlan()) {
        // create vlan bridge (eth0.1)
        VdsNetworkInterface bridge = new Vlan();
        // $NON-NLS-1$
        bridge.setName(targetNic.getName() + "." + getVlanId());
        bridge.setNetworkName(getName());
        bridge.setBaseInterface(targetNic.getName());
        bridge.setVlanId(getVlanId());
        bridge.setMtu(getEntity().getMtu());
        bridge.setVdsId(targetNicEntity.getVdsId());
        bridge.setVdsName(targetNicEntity.getVdsName());
        bridge.setBridged(getEntity().isVmNetwork());
        restoreNetworkParameters(bridge);
        return bridge;
    } else {
        targetNicEntity.setNetworkName(getName());
        targetNicEntity.setMtu(getEntity().getMtu());
        targetNicEntity.setBridged(getEntity().isVmNetwork());
        return null;
    }
}
#end_block

#method_before
public void onEdit(NetworkItemModel<?> item) {
    Model editPopup = null;
    BaseCommandTarget okTarget = null;
    if (item instanceof BondNetworkInterfaceModel) {
        /**
         * **************
         *  Bond Dialog
         * ***************
         */
        final VdsNetworkInterface entity = ((NetworkInterfaceModel) item).getEntity();
        editPopup = new SetupNetworksEditBondModel(entity, getFreeLabels(), labelToIface);
        final SetupNetworksBondModel bondDialogModel = (SetupNetworksBondModel) editPopup;
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void executeCommand(UICommand command) {
                if (!bondDialogModel.validate()) {
                    return;
                }
                sourceListModel.setConfirmWindow(null);
                Collection<LogicalNetworkModel> potentialNetworks = computeLabelChanges(bondDialogModel.getLabelsModel(), nicMap.get(entity.getName()).getItems());
                if (validateLabelChanges(potentialNetworks)) {
                    setBondOptions(entity, bondDialogModel);
                    commitLabelChanges(bondDialogModel.getLabelsModel(), entity, potentialNetworks);
                    redraw();
                }
            }
        };
    } else if (item instanceof NetworkInterfaceModel) {
        /**
         * ****************
         *  Interface Dialog
         * *****************
         */
        final VdsNetworkInterface entity = ((NetworkInterfaceModel) item).getEntity();
        final HostNicModel interfacePopupModel = new HostNicModel(entity, getFreeLabels(), labelToIface);
        editPopup = interfacePopupModel;
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void executeCommand(UICommand uiCommand) {
                if (!interfacePopupModel.validate()) {
                    return;
                }
                sourceListModel.setConfirmWindow(null);
                Collection<LogicalNetworkModel> potentialNetworks = computeLabelChanges(interfacePopupModel.getLabelsModel(), nicMap.get(entity.getName()).getItems());
                if (validateLabelChanges(potentialNetworks)) {
                    commitLabelChanges(interfacePopupModel.getLabelsModel(), entity, potentialNetworks);
                    redraw();
                }
            }
        };
    } else if (item instanceof LogicalNetworkModel) {
        /**
         * **************
         *  Network Dialog
         * ***************
         */
        final LogicalNetworkModel logicalNetwork = (LogicalNetworkModel) item;
        final VdsNetworkInterface entity = logicalNetwork.hasVlan() ? logicalNetwork.getVlanNicModel().getEntity() : logicalNetwork.getAttachedToNic().getEntity();
        final HostInterfaceModel networkDialogModel;
        String version = getEntity().getVdsGroupCompatibilityVersion().getValue();
        if (logicalNetwork.isManagement()) {
            networkDialogModel = new HostManagementNetworkModel(true);
            networkDialogModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
            networkDialogModel.setEntity(logicalNetwork.getEntity());
            networkDialogModel.setNoneBootProtocolAvailable(false);
            networkDialogModel.getInterface().setIsAvailable(false);
        } else {
            networkDialogModel = new HostInterfaceModel(true);
            networkDialogModel.setTitle(ConstantsManager.getInstance().getMessages().editNetworkTitle(logicalNetwork.getName()));
            networkDialogModel.getName().setIsAvailable(false);
            networkDialogModel.getNetwork().setIsChangable(false);
            networkDialogModel.getGateway().setIsAvailable((Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MultipleGatewaysSupported, version));
        }
        networkDialogModel.getNetwork().setSelectedItem(logicalNetwork.getEntity());
        networkDialogModel.setOriginalNetParams(netToBeforeSyncParams.get(logicalNetwork.getName()));
        networkDialogModel.getAddress().setEntity(entity.getAddress());
        networkDialogModel.getSubnet().setEntity(entity.getSubnet());
        networkDialogModel.getGateway().setEntity(entity.getGateway());
        networkDialogModel.setStaticIpChangeAllowed(!getEntity().getHostName().equals(entity.getAddress()));
        networkDialogModel.getBondingOptions().setIsAvailable(false);
        networkDialogModel.setBootProtocol(entity.getBootProtocol());
        if ((Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.HostNetworkQosSupported, version)) {
            networkDialogModel.getQosOverridden().setIsAvailable(true);
            networkDialogModel.getQosModel().setIsAvailable(true);
            networkDialogModel.getQosOverridden().setEntity(entity.isQosOverridden());
            networkDialogModel.getQosModel().init(entity.getQos());
        }
        if ((Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.NetworkCustomPropertiesSupported, version)) {
            KeyValueModel customPropertiesModel = networkDialogModel.getCustomPropertiesModel();
            customPropertiesModel.setIsAvailable(true);
            Map<String, String> validProperties = KeyValueModel.convertProperties((String) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.PreDefinedNetworkCustomProperties, version));
            // to backend and frontend (lvernia)
            if (!logicalNetwork.getEntity().isVmNetwork()) {
                // $NON-NLS-1$
                validProperties.remove("bridge_opts");
            }
            validProperties.putAll(KeyValueModel.convertProperties((String) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.UserDefinedNetworkCustomProperties, version)));
            customPropertiesModel.setKeyValueMap(validProperties);
            customPropertiesModel.deserialize(KeyValueModel.convertProperties(entity.getCustomProperties()));
        }
        networkDialogModel.getIsToSync().setIsChangable(!logicalNetwork.isInSync());
        networkDialogModel.getIsToSync().setEntity(networksToSync.contains(logicalNetwork.getName()));
        editPopup = networkDialogModel;
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void executeCommand(UICommand command) {
                if (!networkDialogModel.validate()) {
                    return;
                }
                entity.setBootProtocol(networkDialogModel.getBootProtocol());
                if (networkDialogModel.getIsStaticAddress()) {
                    entity.setAddress(networkDialogModel.getAddress().getEntity());
                    entity.setSubnet(networkDialogModel.getSubnet().getEntity());
                    entity.setGateway(networkDialogModel.getGateway().getEntity());
                }
                if (networkDialogModel.getQosModel().getIsAvailable()) {
                    entity.setQosOverridden(networkDialogModel.getQosOverridden().getEntity());
                    entity.setQos(networkDialogModel.getQosModel().flush());
                }
                if (networkDialogModel.getCustomPropertiesModel().getIsAvailable()) {
                    entity.setCustomProperties(KeyValueModel.convertProperties(networkDialogModel.getCustomPropertiesModel().serialize()));
                }
                if (networkDialogModel.getIsToSync().getEntity()) {
                    networksToSync.add(logicalNetwork.getName());
                } else {
                    networksToSync.remove(logicalNetwork.getName());
                }
                sourceListModel.setConfirmWindow(null);
            }
        };
    }
    // ok command
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OK", okTarget);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    // cancel command
    UICommand cancelCommand = new UICommand("Cancel", new // $NON-NLS-1$
    BaseCommandTarget() {

        @Override
        public void executeCommand(UICommand command) {
            sourceListModel.setConfirmWindow(null);
        }
    });
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    if (editPopup != null) {
        editPopup.getCommands().add(okCommand);
        editPopup.getCommands().add(cancelCommand);
    }
    sourceListModel.setConfirmWindow(editPopup);
}
#method_after
public void onEdit(NetworkItemModel<?> item) {
    Model editPopup = null;
    BaseCommandTarget okTarget = null;
    if (item instanceof BondNetworkInterfaceModel) {
        /**
         * **************
         *  Bond Dialog
         * ***************
         */
        final VdsNetworkInterface entity = ((NetworkInterfaceModel) item).getEntity();
        editPopup = new SetupNetworksEditBondModel(entity, getFreeLabels(), labelToIface);
        final SetupNetworksBondModel bondDialogModel = (SetupNetworksBondModel) editPopup;
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void executeCommand(UICommand command) {
                if (!bondDialogModel.validate()) {
                    return;
                }
                sourceListModel.setConfirmWindow(null);
                Collection<LogicalNetworkModel> potentialNetworks = computeLabelChanges(bondDialogModel.getLabelsModel(), nicMap.get(entity.getName()).getItems());
                if (validateLabelChanges(potentialNetworks)) {
                    setBondOptions(entity, bondDialogModel);
                    commitLabelChanges(bondDialogModel.getLabelsModel(), entity, potentialNetworks);
                    redraw();
                }
            }
        };
    } else if (item instanceof NetworkInterfaceModel) {
        /**
         * ****************
         *  Interface Dialog
         * *****************
         */
        final VdsNetworkInterface entity = ((NetworkInterfaceModel) item).getEntity();
        final HostNicModel interfacePopupModel = new HostNicModel(entity, getFreeLabels(), labelToIface);
        editPopup = interfacePopupModel;
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void executeCommand(UICommand uiCommand) {
                if (!interfacePopupModel.validate()) {
                    return;
                }
                sourceListModel.setConfirmWindow(null);
                Collection<LogicalNetworkModel> potentialNetworks = computeLabelChanges(interfacePopupModel.getLabelsModel(), nicMap.get(entity.getName()).getItems());
                if (validateLabelChanges(potentialNetworks)) {
                    commitLabelChanges(interfacePopupModel.getLabelsModel(), entity, potentialNetworks);
                    redraw();
                }
            }
        };
    } else if (item instanceof LogicalNetworkModel) {
        /**
         * **************
         *  Network Dialog
         * ***************
         */
        final LogicalNetworkModel logicalNetwork = (LogicalNetworkModel) item;
        final VdsNetworkInterface entity = logicalNetwork.hasVlan() ? logicalNetwork.getVlanNicModel().getEntity() : logicalNetwork.getAttachedToNic().getEntity();
        final HostInterfaceModel networkDialogModel;
        String version = getEntity().getVdsGroupCompatibilityVersion().getValue();
        if (logicalNetwork.isManagement()) {
            networkDialogModel = new HostManagementNetworkModel(true);
            networkDialogModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
            networkDialogModel.setEntity(logicalNetwork.getEntity());
            networkDialogModel.setNoneBootProtocolAvailable(false);
            networkDialogModel.getInterface().setIsAvailable(false);
        } else {
            networkDialogModel = new HostInterfaceModel(true);
            networkDialogModel.setTitle(ConstantsManager.getInstance().getMessages().editNetworkTitle(logicalNetwork.getName()));
            networkDialogModel.getName().setIsAvailable(false);
            networkDialogModel.getNetwork().setIsChangable(false);
            networkDialogModel.getGateway().setIsAvailable((Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MultipleGatewaysSupported, version));
        }
        networkDialogModel.getNetwork().setSelectedItem(logicalNetwork.getEntity());
        networkDialogModel.setOriginalNetParams(netToBeforeSyncParams.get(logicalNetwork.getName()));
        networkDialogModel.getAddress().setEntity(entity.getAddress());
        networkDialogModel.getSubnet().setEntity(entity.getSubnet());
        networkDialogModel.getGateway().setEntity(entity.getGateway());
        networkDialogModel.setStaticIpChangeAllowed(!getEntity().getHostName().equals(entity.getAddress()));
        networkDialogModel.getBondingOptions().setIsAvailable(false);
        networkDialogModel.setBootProtocol(entity.getBootProtocol());
        if ((Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.HostNetworkQosSupported, version)) {
            networkDialogModel.getQosOverridden().setIsAvailable(true);
            networkDialogModel.getQosModel().setIsAvailable(true);
            networkDialogModel.getQosOverridden().setEntity(entity.isQosOverridden());
            if (entity.isQosOverridden()) {
                networkDialogModel.getQosModel().init(entity.getQos());
            } else {
                Guid qosId = logicalNetwork.getEntity().getQosId();
                if (qosId != null) {
                    networkDialogModel.startProgress(null);
                    Frontend.getInstance().runQuery(VdcQueryType.GetQosById, new IdQueryParameters(qosId), new AsyncQuery(new INewAsyncCallback() {

                        @Override
                        public void onSuccess(Object model, Object returnValue) {
                            networkDialogModel.getQosModel().init((HostNetworkQos) ((VdcQueryReturnValue) returnValue).getReturnValue());
                            networkDialogModel.stopProgress();
                        }
                    }));
                }
            }
        }
        if ((Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.NetworkCustomPropertiesSupported, version)) {
            KeyValueModel customPropertiesModel = networkDialogModel.getCustomPropertiesModel();
            customPropertiesModel.setIsAvailable(true);
            Map<String, String> validProperties = KeyValueModel.convertProperties((String) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.PreDefinedNetworkCustomProperties, version));
            // to backend and frontend (lvernia)
            if (!logicalNetwork.getEntity().isVmNetwork()) {
                // $NON-NLS-1$
                validProperties.remove("bridge_opts");
            }
            validProperties.putAll(KeyValueModel.convertProperties((String) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.UserDefinedNetworkCustomProperties, version)));
            customPropertiesModel.setKeyValueMap(validProperties);
            customPropertiesModel.deserialize(KeyValueModel.convertProperties(entity.getCustomProperties()));
        }
        networkDialogModel.getIsToSync().setIsChangable(!logicalNetwork.isInSync());
        networkDialogModel.getIsToSync().setEntity(networksToSync.contains(logicalNetwork.getName()));
        editPopup = networkDialogModel;
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void executeCommand(UICommand command) {
                if (!networkDialogModel.validate()) {
                    return;
                }
                entity.setBootProtocol(networkDialogModel.getBootProtocol());
                if (networkDialogModel.getIsStaticAddress()) {
                    entity.setAddress(networkDialogModel.getAddress().getEntity());
                    entity.setSubnet(networkDialogModel.getSubnet().getEntity());
                    entity.setGateway(networkDialogModel.getGateway().getEntity());
                }
                if (networkDialogModel.getQosModel().getIsAvailable()) {
                    boolean qosOverridden = networkDialogModel.getQosOverridden().getEntity();
                    HostNetworkQos qos = null;
                    entity.setQosOverridden(qosOverridden);
                    if (qosOverridden) {
                        qos = new HostNetworkQos();
                        networkDialogModel.getQosModel().flush(qos);
                    }
                    entity.setQos(qos);
                }
                if (networkDialogModel.getCustomPropertiesModel().getIsAvailable()) {
                    entity.setCustomProperties(KeyValueModel.convertProperties(networkDialogModel.getCustomPropertiesModel().serialize()));
                }
                if (networkDialogModel.getIsToSync().getEntity()) {
                    networksToSync.add(logicalNetwork.getName());
                } else {
                    networksToSync.remove(logicalNetwork.getName());
                }
                sourceListModel.setConfirmWindow(null);
            }
        };
    }
    // ok command
    // $NON-NLS-1$
    UICommand okCommand = UICommand.createDefaultOkUiCommand("OK", okTarget);
    // cancel command
    UICommand cancelCommand = new UICommand("Cancel", new // $NON-NLS-1$
    BaseCommandTarget() {

        @Override
        public void executeCommand(UICommand command) {
            sourceListModel.setConfirmWindow(null);
        }
    });
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    if (editPopup != null) {
        editPopup.getCommands().add(okCommand);
        editPopup.getCommands().add(cancelCommand);
    }
    sourceListModel.setConfirmWindow(editPopup);
}
#end_block

#method_before
private void initNetworkModels() {
    Map<String, LogicalNetworkModel> networkModels = new HashMap<String, LogicalNetworkModel>();
    networkLabelMap = new HashMap<String, NetworkLabelModel>();
    for (Network network : allNetworks) {
        LogicalNetworkModel networkModel = new LogicalNetworkModel(network, this);
        networkModels.put(network.getName(), networkModel);
        if (!network.isExternal()) {
            NetworkLabelModel labelModel = networkLabelMap.get(network.getLabel());
            if (labelModel == null) {
                labelModel = new NetworkLabelModel(network.getLabel(), this);
                networkLabelMap.put(network.getLabel(), labelModel);
            }
            // The network model is candidate to be drawn as part of the label.
            // This doesn't yet consider whether it actually exists on the interface.
            labelModel.getNetworks().add(networkModel);
        }
    }
    setNetworks(networkModels);
}
#method_after
private void initNetworkModels() {
    Map<String, LogicalNetworkModel> networkModels = new HashMap<>();
    networkLabelMap = new HashMap<>();
    for (Network network : allNetworks) {
        LogicalNetworkModel networkModel = new LogicalNetworkModel(network, this);
        networkModels.put(network.getName(), networkModel);
        if (networkModel.isManagement()) {
            managementNetworkModel = networkModel;
        }
        if (!network.isExternal()) {
            NetworkLabelModel labelModel = networkLabelMap.get(network.getLabel());
            if (labelModel == null) {
                labelModel = new NetworkLabelModel(network.getLabel(), this);
                networkLabelMap.put(network.getLabel(), labelModel);
            }
            // The network model is candidate to be drawn as part of the label.
            // This doesn't yet consider whether it actually exists on the interface.
            labelModel.getNetworks().add(networkModel);
        }
    }
    setNetworks(networkModels);
}
#end_block

#method_before
private void initNicModels() {
    Map<String, NetworkInterfaceModel> nicModels = new HashMap<String, NetworkInterfaceModel>();
    Map<String, VdsNetworkInterface> nicMap = new HashMap<String, VdsNetworkInterface>();
    List<VdsNetworkInterface> physicalNics = new ArrayList<VdsNetworkInterface>();
    Map<String, List<VdsNetworkInterface>> bondToNic = new HashMap<String, List<VdsNetworkInterface>>();
    Map<String, Set<LogicalNetworkModel>> nicToNetwork = new HashMap<String, Set<LogicalNetworkModel>>();
    List<LogicalNetworkModel> errorLabelNetworks = new ArrayList<LogicalNetworkModel>();
    labelToIface = new HashMap<String, String>();
    // map all nics
    for (VdsNetworkInterface nic : allNics) {
        nicMap.put(nic.getName(), nic);
    }
    // pass over all nics
    for (VdsNetworkInterface nic : allNics) {
        // is this a management nic? (comes from backend)
        final boolean isNicManagement = nic.getIsManagement();
        final String nicName = nic.getName();
        final String networkName = nic.getNetworkName();
        final String bondName = nic.getBondName();
        final boolean isVlan = nic.getVlanId() != null;
        if (!isVlan) {
            // physical interface (rather than virtual VLAN interface)
            physicalNics.add(nic);
        }
        // is the nic bonded?
        if (bondName != null) {
            if (bondToNic.containsKey(bondName)) {
                bondToNic.get(bondName).add(nicMap.get(nicName));
            } else {
                List<VdsNetworkInterface> bondedNics = new ArrayList<VdsNetworkInterface>();
                bondedNics.add(nicMap.get(nicName));
                bondToNic.put(bondName, bondedNics);
            }
        }
        // bridge name is either <nic>, <nic.vlanid> or <bond.vlanid>
        String ifName;
        if (isVlan) {
            ifName = nic.getBaseInterface();
        } else {
            ifName = nicName;
        }
        // initialize this nic's network list if it hadn't been initialized
        if (!nicToNetwork.containsKey(ifName)) {
            nicToNetwork.put(ifName, new HashSet<LogicalNetworkModel>());
        }
        // does this nic have a network?
        if (networkName != null) {
            LogicalNetworkModel networkModel = networkMap.get(networkName);
            if (networkModel == null) {
                networkModel = createUnmanagedNetworkModel(networkName, nic);
            } else {
                // The real vlanId, isBridged and mtu configured on the host can be not synced with the values
                // configured in the networks table (dc networks).
                // The real values configured on the host should be displayed.
                networkModel.getEntity().setVlanId(nic.getVlanId());
                networkModel.getEntity().setMtu(nic.getMtu());
                networkModel.getEntity().setVmNetwork(nic.isBridged());
            }
            // is this a management network (from backend)?
            if (isNicManagement) {
                networkModel.setManagement(true);
            }
            Collection<LogicalNetworkModel> nicNetworks = new ArrayList<LogicalNetworkModel>();
            nicNetworks.add(networkModel);
            // set vlan device on the network
            if (networkModel.hasVlan()) {
                NetworkInterfaceModel existingEridge = networkModel.getVlanNicModel();
                // $NON-NLS-1$
                assert existingEridge == null : "should have only one bridge, but found " + existingEridge;
                networkModel.setVlanNicModel(new NetworkInterfaceModel(nic, nicNetworks, null, this));
            }
            nicToNetwork.get(ifName).add(networkModel);
            if (!networkModel.isInSync() && networkModel.isManaged()) {
                netToBeforeSyncParams.put(networkName, new NetworkParameters(nic));
            }
        }
    }
    // calculate the next available bond name
    List<String> bondNames = new ArrayList<String>(bondToNic.keySet());
    Collections.sort(bondNames, new LexoNumericComparator());
    nextBondName = BusinessEntitiesDefinitions.BOND_NAME_PREFIX + 0;
    for (int i = 0; i < bondNames.size(); ++i) {
        if (nextBondName.equals(bondNames.get(i))) {
            nextBondName = BusinessEntitiesDefinitions.BOND_NAME_PREFIX + (i + 1);
        } else {
            break;
        }
    }
    // build models
    for (VdsNetworkInterface nic : physicalNics) {
        // dont show bonded nics
        if (nic.getBondName() != null) {
            continue;
        }
        String nicName = nic.getName();
        Collection<LogicalNetworkModel> nicNetworks = nicToNetwork.get(nicName);
        List<NetworkLabelModel> nicLabels = new ArrayList<NetworkLabelModel>();
        // does this nic have any labels?
        Set<String> labels = nic.getLabels();
        if (labels != null) {
            for (String label : labels) {
                labelToIface.put(label, nicName);
                NetworkLabelModel labelModel = networkLabelMap.get(label);
                if (labelModel != null) {
                    // attach label networks to nic
                    for (Iterator<LogicalNetworkModel> iter = labelModel.getNetworks().iterator(); iter.hasNext(); ) {
                        LogicalNetworkModel networkModel = iter.next();
                        if (nicNetworks.contains(networkModel)) {
                            networkModel.attachViaLabel();
                        } else {
                            // The network has the same label as the nic but not attached to the nic.
                            iter.remove();
                            errorLabelNetworks.add(networkModel);
                        }
                    }
                    // attach label itself to nic
                    if (!labelModel.getNetworks().isEmpty()) {
                        nicLabels.add(labelModel);
                    }
                }
            }
        }
        List<VdsNetworkInterface> bondedNics = bondToNic.get(nicName);
        NetworkInterfaceModel nicModel;
        if (bondedNics != null) {
            List<NetworkInterfaceModel> bondedModels = new ArrayList<NetworkInterfaceModel>();
            for (VdsNetworkInterface bonded : bondedNics) {
                NetworkInterfaceModel bondedModel = new NetworkInterfaceModel(bonded, this);
                bondedModel.setBonded(true);
                bondedModels.add(bondedModel);
            }
            nicModel = new BondNetworkInterfaceModel(nic, nicNetworks, nicLabels, bondedModels, this);
        } else {
            nicModel = new NetworkInterfaceModel(nic, nicNetworks, nicLabels, this);
        }
        nicModels.put(nicName, nicModel);
    }
    initLabeledNetworksErrorMessages(errorLabelNetworks, nicModels);
    setNics(nicModels);
}
#method_after
private void initNicModels() {
    Map<String, NetworkInterfaceModel> nicModels = new HashMap<String, NetworkInterfaceModel>();
    Map<String, VdsNetworkInterface> nicMap = new HashMap<String, VdsNetworkInterface>();
    List<VdsNetworkInterface> physicalNics = new ArrayList<VdsNetworkInterface>();
    Map<String, List<VdsNetworkInterface>> bondToNic = new HashMap<String, List<VdsNetworkInterface>>();
    Map<String, Set<LogicalNetworkModel>> nicToNetwork = new HashMap<String, Set<LogicalNetworkModel>>();
    List<LogicalNetworkModel> errorLabelNetworks = new ArrayList<LogicalNetworkModel>();
    labelToIface = new HashMap<String, String>();
    // map all nics
    for (VdsNetworkInterface nic : allNics) {
        nicMap.put(nic.getName(), nic);
    }
    // pass over all nics
    for (VdsNetworkInterface nic : allNics) {
        // is this a management nic? (comes from backend)
        final boolean isNicManagement = nic.getIsManagement();
        final String nicName = nic.getName();
        final String networkName = nic.getNetworkName();
        final String bondName = nic.getBondName();
        final boolean isVlan = nic.getVlanId() != null;
        if (!isVlan) {
            // physical interface (rather than virtual VLAN interface)
            physicalNics.add(nic);
        }
        // is the nic bonded?
        if (bondName != null) {
            if (bondToNic.containsKey(bondName)) {
                bondToNic.get(bondName).add(nicMap.get(nicName));
            } else {
                List<VdsNetworkInterface> bondedNics = new ArrayList<VdsNetworkInterface>();
                bondedNics.add(nicMap.get(nicName));
                bondToNic.put(bondName, bondedNics);
            }
        }
        // bridge name is either <nic>, <nic.vlanid> or <bond.vlanid>
        String ifName;
        if (isVlan) {
            ifName = nic.getBaseInterface();
        } else {
            ifName = nicName;
        }
        // initialize this nic's network list if it hadn't been initialized
        if (!nicToNetwork.containsKey(ifName)) {
            nicToNetwork.put(ifName, new HashSet<LogicalNetworkModel>());
        }
        // does this nic have a network?
        if (networkName != null) {
            LogicalNetworkModel networkModel = networkMap.get(networkName);
            if (networkModel == null) {
                networkModel = createUnmanagedNetworkModel(networkName, nic);
            } else {
                // The real vlanId, isBridged and mtu configured on the host can be not synced with the values
                // configured in the networks table (dc networks).
                // The real values configured on the host should be displayed.
                networkModel.getEntity().setVlanId(nic.getVlanId());
                networkModel.getEntity().setMtu(nic.getMtu());
                networkModel.getEntity().setVmNetwork(nic.isBridged());
            }
            Collection<LogicalNetworkModel> nicNetworks = new ArrayList<LogicalNetworkModel>();
            nicNetworks.add(networkModel);
            // set vlan device on the network
            if (networkModel.hasVlan()) {
                NetworkInterfaceModel existingEridge = networkModel.getVlanNicModel();
                // $NON-NLS-1$
                assert existingEridge == null : "should have only one bridge, but found " + existingEridge;
                networkModel.setVlanNicModel(new NetworkInterfaceModel(nic, nicNetworks, null, this));
            }
            nicToNetwork.get(ifName).add(networkModel);
            if (!networkModel.isInSync() && networkModel.isManaged()) {
                netToBeforeSyncParams.put(networkName, new NetworkParameters(nic));
            }
        }
    }
    // calculate the next available bond name
    List<String> bondNames = new ArrayList<String>(bondToNic.keySet());
    Collections.sort(bondNames, new LexoNumericComparator());
    nextBondName = BusinessEntitiesDefinitions.BOND_NAME_PREFIX + 0;
    for (int i = 0; i < bondNames.size(); ++i) {
        if (nextBondName.equals(bondNames.get(i))) {
            nextBondName = BusinessEntitiesDefinitions.BOND_NAME_PREFIX + (i + 1);
        } else {
            break;
        }
    }
    // build models
    for (VdsNetworkInterface nic : physicalNics) {
        // dont show bonded nics
        if (nic.getBondName() != null) {
            continue;
        }
        String nicName = nic.getName();
        Collection<LogicalNetworkModel> nicNetworks = nicToNetwork.get(nicName);
        List<NetworkLabelModel> nicLabels = new ArrayList<NetworkLabelModel>();
        // does this nic have any labels?
        Set<String> labels = nic.getLabels();
        if (labels != null) {
            for (String label : labels) {
                labelToIface.put(label, nicName);
                NetworkLabelModel labelModel = networkLabelMap.get(label);
                if (labelModel != null) {
                    // attach label networks to nic
                    for (Iterator<LogicalNetworkModel> iter = labelModel.getNetworks().iterator(); iter.hasNext(); ) {
                        LogicalNetworkModel networkModel = iter.next();
                        if (nicNetworks.contains(networkModel)) {
                            networkModel.attachViaLabel();
                        } else {
                            // The network has the same label as the nic but not attached to the nic.
                            iter.remove();
                            errorLabelNetworks.add(networkModel);
                        }
                    }
                    // attach label itself to nic
                    if (!labelModel.getNetworks().isEmpty()) {
                        nicLabels.add(labelModel);
                    }
                }
            }
        }
        List<VdsNetworkInterface> bondedNics = bondToNic.get(nicName);
        NetworkInterfaceModel nicModel;
        if (bondedNics != null) {
            List<NetworkInterfaceModel> bondedModels = new ArrayList<NetworkInterfaceModel>();
            for (VdsNetworkInterface bonded : bondedNics) {
                NetworkInterfaceModel bondedModel = new NetworkInterfaceModel(bonded, this);
                bondedModel.setBonded(true);
                bondedModels.add(bondedModel);
            }
            nicModel = new BondNetworkInterfaceModel(nic, nicNetworks, nicLabels, bondedModels, this);
        } else {
            nicModel = new NetworkInterfaceModel(nic, nicNetworks, nicLabels, this);
        }
        nicModels.put(nicName, nicModel);
    }
    initLabeledNetworksErrorMessages(errorLabelNetworks, nicModels);
    setNics(nicModels);
}
#end_block

#method_before
private void queryNetworks() {
    // query for networks
    AsyncQuery asyncQuery = new AsyncQuery();
    asyncQuery.setModel(this);
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            List<Network> networks = (List<Network>) returnValue;
            allNetworks = networks;
            managentNetwork = Linq.findManagentNetwork(allNetworks);
            initNetworkModels();
            initDcNetworkParams();
            // chain the nic query
            queryInterfaces();
        }
    };
    VDS vds = getEntity();
    AsyncDataProvider.getInstance().getClusterNetworkList(asyncQuery, vds.getVdsGroupId());
}
#method_after
private void queryNetworks() {
    // query for networks
    AsyncQuery asyncQuery = new AsyncQuery();
    asyncQuery.setModel(this);
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            List<Network> networks = (List<Network>) returnValue;
            allNetworks = networks;
            initNetworkModels();
            initDcNetworkParams();
            // chain the nic query
            queryInterfaces();
        }
    };
    VDS vds = getEntity();
    AsyncDataProvider.getInstance().getClusterNetworkList(asyncQuery, vds.getVdsGroupId());
}
#end_block

#method_before
private void validate() {
    // check if management network is attached
    final LogicalNetworkModel mgmtNetwork = networkMap.get(managentNetwork.getName());
    if (!mgmtNetwork.isAttached()) {
        okCommand.getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().mgmtNotAttachedToolTip());
        okCommand.setIsExecutionAllowed(false);
    } else {
        okCommand.setIsExecutionAllowed(true);
    }
}
#method_after
private void validate() {
    // check if management network is attached
    if (!managementNetworkModel.isAttached()) {
        okCommand.getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().mgmtNotAttachedToolTip());
        okCommand.setIsExecutionAllowed(false);
    } else {
        okCommand.setIsExecutionAllowed(true);
    }
}
#end_block

#method_before
public void edit() {
    if (getWindow() != null) {
        return;
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networksByCluster = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            ArrayList<Network> networksToAdd = new ArrayList<Network>();
            Network selectedNetwork = null;
            if (item.getVlanId() != null) {
                for (Network network : networksByCluster) {
                    if (ObjectUtils.objectsEqual(network.getName(), item.getNetworkName())) {
                        networksToAdd.add(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
            } else {
                // creating dictionary of networks by name
                HashMap<String, Network> networkDictionary = new HashMap<String, Network>();
                for (Network network : networksByCluster) {
                    networkDictionary.put(network.getName(), network);
                }
                // creating list of attached networks.
                ArrayList<Network> attachedNetworks = new ArrayList<Network>();
                for (VdsNetworkInterface nic : hostInterfaceListModel.getAllItems()) {
                    if (nic.getNetworkName() != null && networkDictionary.containsKey(nic.getNetworkName())) {
                        attachedNetworks.add(networkDictionary.get(nic.getNetworkName()));
                    }
                }
                ArrayList<Network> unAttachedNetworks = Linq.except(networksByCluster, attachedNetworks);
                // adding selected network names to list.
                boolean isVlanSelected = false;
                boolean isManagementSelected = false;
                ArrayList<VdsNetworkInterface> selectedItems = hostInterfaceListModel.getSelectedItemsWithVlans();
                ArrayList<String> selectedNicsNetworks = new ArrayList<String>();
                for (VdsNetworkInterface nic : selectedItems) {
                    if (!StringHelper.isNullOrEmpty(nic.getNetworkName())) {
                        if (nic.getIsManagement()) {
                            isManagementSelected = true;
                        }
                        selectedNicsNetworks.add(nic.getNetworkName());
                        if (!isVlanSelected && nic.getVlanId() != null) {
                            isVlanSelected = true;
                        }
                    }
                }
                for (String selectedNetworkName : selectedNicsNetworks) {
                    if (networkDictionary.containsKey(selectedNetworkName)) {
                        Network network = networkDictionary.get(selectedNetworkName);
                        networksToAdd.add(network);
                        attachedNetworks.remove(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
                if (!isManagementSelected || isVlanSelected) {
                    for (Network unAttachedNetwork : unAttachedNetworks) {
                        if (isVlanSelected) {
                            if (unAttachedNetwork.getVlanId() != null) {
                                networksToAdd.add(unAttachedNetwork);
                            }
                        } else {
                            networksToAdd.add(unAttachedNetwork);
                        }
                    }
                }
            }
            Collections.sort(networksToAdd, new NameableComparator());
            // Add a 'none' option to networks.
            if (!StringHelper.isNullOrEmpty(item.getNetworkName())) {
                Network tempVar = new Network();
                tempVar.setId(Guid.Empty);
                // $NON-NLS-1$
                tempVar.setName("None");
                networksToAdd.add(0, tempVar);
            }
            HostInterfaceModel hostInterfaceModel = new HostInterfaceModel();
            hostInterfaceListModel.setWindow(hostInterfaceModel);
            hostInterfaceModel.setEntity(item.getName());
            hostInterfaceModel.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
            hostInterfaceModel.setHelpTag(HelpTag.edit_network_interface_hosts);
            // $NON-NLS-1$
            hostInterfaceModel.setHashName("edit_network_interface_hosts");
            hostInterfaceModel.setNetworks(hostInterfaceListModel.getSelectedItemsWithVlans());
            hostInterfaceModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            hostInterfaceModel.setBootProtocol(!hostInterfaceModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : item.getBootProtocol());
            hostInterfaceModel.getAddress().setEntity(item.getAddress());
            hostInterfaceModel.getSubnet().setEntity(item.getSubnet());
            hostInterfaceModel.getNetwork().setItems(networksToAdd);
            hostInterfaceModel.getName().setEntity(item.getName());
            hostInterfaceModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                hostInterfaceModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel<String>> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel<String>>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel<String>>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel<String>>> list = AsyncDataProvider.getInstance().getBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel<String>> selectBondingOpt = new KeyValuePairCompat<String, EntityModel<String>>();
                boolean containsSelectBondingOpt = false;
                hostInterfaceModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (ObjectUtils.objectsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (ObjectUtils.objectsEqual(item.getBondOptions(), AsyncDataProvider.getInstance().getDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel<String> entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                hostInterfaceModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            if (selectedNetwork == null && networksToAdd.size() > 0) {
                selectedNetwork = networksToAdd.get(0);
            }
            hostInterfaceModel.getNetwork().setSelectedItem(selectedNetwork);
            hostInterfaceModel.getCheckConnectivity().setIsAvailable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setIsChangable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setEntity(item.getIsManagement());
            if (networksToAdd.isEmpty()) {
                hostInterfaceModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
                // $NON-NLS-1$
                UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar2.setIsDefault(true);
                tempVar2.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar2);
            } else {
                // $NON-NLS-1$
                UICommand tempVar3 = new UICommand("OnSave", hostInterfaceListModel);
                tempVar3.setTitle(ConstantsManager.getInstance().getConstants().ok());
                tempVar3.setIsDefault(true);
                hostInterfaceModel.getCommands().add(tempVar3);
                // $NON-NLS-1$
                UICommand tempVar4 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar4.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                tempVar4.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar4);
            }
        }
    };
    AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
}
#method_after
public void edit() {
    if (getWindow() != null) {
        return;
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networksByCluster = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            ArrayList<Network> networksToAdd = new ArrayList<Network>();
            Network selectedNetwork = null;
            if (item.getVlanId() != null) {
                for (Network network : networksByCluster) {
                    if (ObjectUtils.objectsEqual(network.getName(), item.getNetworkName())) {
                        networksToAdd.add(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
            } else {
                // creating dictionary of networks by name
                HashMap<String, Network> networkDictionary = new HashMap<String, Network>();
                for (Network network : networksByCluster) {
                    networkDictionary.put(network.getName(), network);
                }
                // creating list of attached networks.
                ArrayList<Network> attachedNetworks = new ArrayList<Network>();
                for (VdsNetworkInterface nic : hostInterfaceListModel.getAllItems()) {
                    if (nic.getNetworkName() != null && networkDictionary.containsKey(nic.getNetworkName())) {
                        attachedNetworks.add(networkDictionary.get(nic.getNetworkName()));
                    }
                }
                ArrayList<Network> unAttachedNetworks = Linq.except(networksByCluster, attachedNetworks);
                // adding selected network names to list.
                boolean isVlanSelected = false;
                boolean isManagementSelected = false;
                ArrayList<VdsNetworkInterface> selectedItems = hostInterfaceListModel.getSelectedItemsWithVlans();
                ArrayList<String> selectedNicsNetworks = new ArrayList<String>();
                for (VdsNetworkInterface nic : selectedItems) {
                    if (!StringHelper.isNullOrEmpty(nic.getNetworkName())) {
                        if (nic.getIsManagement()) {
                            isManagementSelected = true;
                        }
                        selectedNicsNetworks.add(nic.getNetworkName());
                        if (!isVlanSelected && nic.getVlanId() != null) {
                            isVlanSelected = true;
                        }
                    }
                }
                for (String selectedNetworkName : selectedNicsNetworks) {
                    if (networkDictionary.containsKey(selectedNetworkName)) {
                        Network network = networkDictionary.get(selectedNetworkName);
                        networksToAdd.add(network);
                        attachedNetworks.remove(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
                if (!isManagementSelected || isVlanSelected) {
                    for (Network unAttachedNetwork : unAttachedNetworks) {
                        if (isVlanSelected) {
                            if (unAttachedNetwork.getVlanId() != null) {
                                networksToAdd.add(unAttachedNetwork);
                            }
                        } else {
                            networksToAdd.add(unAttachedNetwork);
                        }
                    }
                }
            }
            Collections.sort(networksToAdd, new NameableComparator());
            // Add a 'none' option to networks.
            if (!StringHelper.isNullOrEmpty(item.getNetworkName())) {
                Network tempVar = new Network();
                tempVar.setId(Guid.Empty);
                // $NON-NLS-1$
                tempVar.setName("None");
                networksToAdd.add(0, tempVar);
            }
            HostInterfaceModel hostInterfaceModel = new HostInterfaceModel();
            hostInterfaceListModel.setWindow(hostInterfaceModel);
            hostInterfaceModel.setEntity(item.getName());
            hostInterfaceModel.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
            hostInterfaceModel.setHelpTag(HelpTag.edit_network_interface_hosts);
            // $NON-NLS-1$
            hostInterfaceModel.setHashName("edit_network_interface_hosts");
            hostInterfaceModel.setNetworks(hostInterfaceListModel.getSelectedItemsWithVlans());
            hostInterfaceModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            hostInterfaceModel.setBootProtocol(!hostInterfaceModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : item.getBootProtocol());
            hostInterfaceModel.getAddress().setEntity(item.getAddress());
            hostInterfaceModel.getSubnet().setEntity(item.getSubnet());
            hostInterfaceModel.getNetwork().setItems(networksToAdd);
            hostInterfaceModel.getName().setEntity(item.getName());
            hostInterfaceModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                hostInterfaceModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel<String>> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel<String>>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel<String>>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel<String>>> list = AsyncDataProvider.getInstance().getBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel<String>> selectBondingOpt = new KeyValuePairCompat<String, EntityModel<String>>();
                boolean containsSelectBondingOpt = false;
                hostInterfaceModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (ObjectUtils.objectsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (ObjectUtils.objectsEqual(item.getBondOptions(), AsyncDataProvider.getInstance().getDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel<String> entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                hostInterfaceModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            if (selectedNetwork == null && networksToAdd.size() > 0) {
                selectedNetwork = networksToAdd.get(0);
            }
            hostInterfaceModel.getNetwork().setSelectedItem(selectedNetwork);
            hostInterfaceModel.getCheckConnectivity().setIsAvailable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setIsChangable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setEntity(item.getIsManagement());
            if (networksToAdd.isEmpty()) {
                hostInterfaceModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
                // $NON-NLS-1$
                UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar2.setIsDefault(true);
                tempVar2.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar2);
            } else {
                // $NON-NLS-1$
                UICommand tempVar3 = UICommand.createDefaultOkUiCommand("OnSave", hostInterfaceListModel);
                hostInterfaceModel.getCommands().add(tempVar3);
                // $NON-NLS-1$
                UICommand tempVar4 = UICommand.createCancelUiCommand("Cancel", hostInterfaceListModel);
                hostInterfaceModel.getCommands().add(tempVar4);
            }
        }
    };
    AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
}
#end_block

#method_before
public void editManagementNetwork() {
    if (getWindow() != null) {
        return;
    }
    HostManagementNetworkModel managementNicModel = new HostManagementNetworkModel();
    setWindow(managementNicModel);
    managementNicModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
    managementNicModel.setHelpTag(HelpTag.edit_management_network);
    // $NON-NLS-1$
    managementNicModel.setHashName("edit_management_network");
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            final HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> clusterNetworks = (ArrayList<Network>) ReturnValue;
            final VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            final HostManagementNetworkModel managementModel = (HostManagementNetworkModel) hostInterfaceListModel.getWindow();
            Network networkToEdit = Linq.findNetworkByName(clusterNetworks, item.getNetworkName());
            managementModel.setEntity(networkToEdit);
            managementModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            managementModel.setBootProtocol(!managementModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : item.getBootProtocol());
            managementModel.getAddress().setEntity(item.getAddress());
            managementModel.getSubnet().setEntity(item.getSubnet());
            managementModel.getGateway().setEntity(item.getGateway());
            final StringBuilder tmpDefaultInterfaceName = new StringBuilder();
            AsyncDataProvider.getInstance().getInterfaceOptionsForEditNetwork(new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    ArrayList<VdsNetworkInterface> interfaces = (ArrayList<VdsNetworkInterface>) returnValue;
                    String defaultInterfaceName = tmpDefaultInterfaceName.toString();
                    managementModel.getInterface().setItems(interfaces);
                    managementModel.getInterface().setSelectedItem(Linq.findInterfaceByNetworkName(interfaces, defaultInterfaceName));
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getInterface().setTitle(ConstantsManager.getInstance().getConstants().interfaceListTitle());
                        managementModel.getInterface().getSelectedItemChangedEvent().addListener(hostInterfaceListModel);
                    }
                    managementModel.getCheckConnectivity().setIsAvailable(true);
                    managementModel.getCheckConnectivity().setIsChangable(true);
                    // currently, always
                    managementModel.getCheckConnectivity().setEntity(item.getIsManagement());
                    // should be
                    // true
                    managementModel.getBondingOptions().setIsAvailable(false);
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getBondingOptions().setIsAvailable(true);
                        Map.Entry<String, EntityModel<String>> defaultItem = null;
                        RefObject<Map.Entry<String, EntityModel<String>>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel<String>>>(defaultItem);
                        ArrayList<Map.Entry<String, EntityModel<String>>> list = AsyncDataProvider.getInstance().getBondingOptionList(tempRef_defaultItem);
                        defaultItem = tempRef_defaultItem.argvalue;
                        Map.Entry<String, EntityModel<String>> selectBondingOpt = new KeyValuePairCompat<String, EntityModel<String>>();
                        boolean containsSelectBondingOpt = false;
                        managementModel.getBondingOptions().setItems(list);
                        for (int i = 0; i < list.size(); i++) {
                            if (ObjectUtils.objectsEqual(list.get(i).getKey(), item.getBondOptions())) {
                                selectBondingOpt = list.get(i);
                                containsSelectBondingOpt = true;
                                break;
                            }
                        }
                        if (containsSelectBondingOpt == false) {
                            if (ObjectUtils.objectsEqual(item.getBondOptions(), AsyncDataProvider.getInstance().getDefaultBondingOption())) {
                                selectBondingOpt = defaultItem;
                            } else {
                                selectBondingOpt = list.get(list.size() - 1);
                                EntityModel<String> entityModel = selectBondingOpt.getValue();
                                entityModel.setEntity(item.getBondOptions());
                            }
                        }
                        managementModel.getBondingOptions().setSelectedItem(selectBondingOpt);
                    }
                    UICommand tempVar = // $NON-NLS-1$
                    new UICommand("OnEditManagementNetworkConfirmation", hostInterfaceListModel);
                    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
                    tempVar.setIsDefault(true);
                    managementModel.getCommands().add(tempVar);
                    // $NON-NLS-1$
                    UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                    tempVar2.setIsCancel(true);
                    managementModel.getCommands().add(tempVar2);
                }
            }), getOriginalItems(), item, networkToEdit, getEntity().getId(), tmpDefaultInterfaceName);
        }
    };
    AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
}
#method_after
public void editManagementNetwork() {
    if (getWindow() != null) {
        return;
    }
    HostManagementNetworkModel managementNicModel = new HostManagementNetworkModel();
    setWindow(managementNicModel);
    managementNicModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
    managementNicModel.setHelpTag(HelpTag.edit_management_network);
    // $NON-NLS-1$
    managementNicModel.setHashName("edit_management_network");
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            final HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> clusterNetworks = (ArrayList<Network>) ReturnValue;
            final VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            final HostManagementNetworkModel managementModel = (HostManagementNetworkModel) hostInterfaceListModel.getWindow();
            Network networkToEdit = Linq.findNetworkByName(clusterNetworks, item.getNetworkName());
            managementModel.setEntity(networkToEdit);
            managementModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            managementModel.setBootProtocol(!managementModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : item.getBootProtocol());
            managementModel.getAddress().setEntity(item.getAddress());
            managementModel.getSubnet().setEntity(item.getSubnet());
            managementModel.getGateway().setEntity(item.getGateway());
            final StringBuilder tmpDefaultInterfaceName = new StringBuilder();
            AsyncDataProvider.getInstance().getInterfaceOptionsForEditNetwork(new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    ArrayList<VdsNetworkInterface> interfaces = (ArrayList<VdsNetworkInterface>) returnValue;
                    String defaultInterfaceName = tmpDefaultInterfaceName.toString();
                    managementModel.getInterface().setItems(interfaces);
                    managementModel.getInterface().setSelectedItem(Linq.findInterfaceByNetworkName(interfaces, defaultInterfaceName));
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getInterface().setTitle(ConstantsManager.getInstance().getConstants().interfaceListTitle());
                        managementModel.getInterface().getSelectedItemChangedEvent().addListener(hostInterfaceListModel);
                    }
                    managementModel.getCheckConnectivity().setIsAvailable(true);
                    managementModel.getCheckConnectivity().setIsChangable(true);
                    // currently, always
                    managementModel.getCheckConnectivity().setEntity(item.getIsManagement());
                    // should be
                    // true
                    managementModel.getBondingOptions().setIsAvailable(false);
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getBondingOptions().setIsAvailable(true);
                        Map.Entry<String, EntityModel<String>> defaultItem = null;
                        RefObject<Map.Entry<String, EntityModel<String>>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel<String>>>(defaultItem);
                        ArrayList<Map.Entry<String, EntityModel<String>>> list = AsyncDataProvider.getInstance().getBondingOptionList(tempRef_defaultItem);
                        defaultItem = tempRef_defaultItem.argvalue;
                        Map.Entry<String, EntityModel<String>> selectBondingOpt = new KeyValuePairCompat<String, EntityModel<String>>();
                        boolean containsSelectBondingOpt = false;
                        managementModel.getBondingOptions().setItems(list);
                        for (int i = 0; i < list.size(); i++) {
                            if (ObjectUtils.objectsEqual(list.get(i).getKey(), item.getBondOptions())) {
                                selectBondingOpt = list.get(i);
                                containsSelectBondingOpt = true;
                                break;
                            }
                        }
                        if (containsSelectBondingOpt == false) {
                            if (ObjectUtils.objectsEqual(item.getBondOptions(), AsyncDataProvider.getInstance().getDefaultBondingOption())) {
                                selectBondingOpt = defaultItem;
                            } else {
                                selectBondingOpt = list.get(list.size() - 1);
                                EntityModel<String> entityModel = selectBondingOpt.getValue();
                                entityModel.setEntity(item.getBondOptions());
                            }
                        }
                        managementModel.getBondingOptions().setSelectedItem(selectBondingOpt);
                    }
                    UICommand tempVar = // $NON-NLS-1$
                    UICommand.createDefaultOkUiCommand("OnEditManagementNetworkConfirmation", hostInterfaceListModel);
                    managementModel.getCommands().add(tempVar);
                    // $NON-NLS-1$
                    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", hostInterfaceListModel);
                    managementModel.getCommands().add(tempVar2);
                }
            }), getOriginalItems(), item, networkToEdit, getEntity().getId(), tmpDefaultInterfaceName);
        }
    };
    AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
}
#end_block

#method_before
public void onEditManagementNetworkConfirmation(boolean isBond) {
    if (!isBond) {
        HostManagementNetworkModel model = (HostManagementNetworkModel) getWindow();
        if (!model.validate()) {
            return;
        }
        if (model.getCheckConnectivity().getEntity() == true) {
            onEditManagementNetwork();
            return;
        }
    } else {
        HostBondInterfaceModel model = (HostBondInterfaceModel) getWindow();
        if (!model.validate()) {
            return;
        }
        if (model.getCheckConnectivity().getEntity() == true) {
            onBond();
            return;
        }
    }
    ConfirmationModel confirmModel = new ConfirmationModel();
    setConfirmWindow(confirmModel);
    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().confirmTitle());
    confirmModel.getLatch().setEntity(true);
    confirmModel.getLatch().setIsAvailable(true);
    confirmModel.getLatch().setIsChangable(true);
    if (!isBond) {
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnEditManagementNetwork", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        confirmModel.getCommands().add(tempVar);
    } else {
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("OnBond", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar2.setIsDefault(true);
        confirmModel.getCommands().add(tempVar2);
    }
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("CancelConfirm", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar3.setIsCancel(true);
    confirmModel.getCommands().add(tempVar3);
}
#method_after
public void onEditManagementNetworkConfirmation(boolean isBond) {
    if (!isBond) {
        HostManagementNetworkModel model = (HostManagementNetworkModel) getWindow();
        if (!model.validate()) {
            return;
        }
        if (model.getCheckConnectivity().getEntity() == true) {
            onEditManagementNetwork();
            return;
        }
    } else {
        HostBondInterfaceModel model = (HostBondInterfaceModel) getWindow();
        if (!model.validate()) {
            return;
        }
        if (model.getCheckConnectivity().getEntity() == true) {
            onBond();
            return;
        }
    }
    ConfirmationModel confirmModel = new ConfirmationModel();
    setConfirmWindow(confirmModel);
    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().confirmTitle());
    confirmModel.getLatch().setEntity(true);
    confirmModel.getLatch().setIsAvailable(true);
    confirmModel.getLatch().setIsChangable(true);
    if (!isBond) {
        // $NON-NLS-1$
        UICommand tempVar = UICommand.createDefaultOkUiCommand("OnEditManagementNetwork", this);
        confirmModel.getCommands().add(tempVar);
    } else {
        // $NON-NLS-1$
        UICommand tempVar2 = UICommand.createDefaultOkUiCommand("OnBond", this);
        confirmModel.getCommands().add(tempVar2);
    }
    // $NON-NLS-1$
    UICommand tempVar3 = UICommand.createCancelUiCommand("CancelConfirm", this);
    confirmModel.getCommands().add(tempVar3);
}
#end_block

#method_before
public void postBond(HostInterfaceListModel hostInterfaceListModel, HostBondInterfaceModel innerBondModel, ArrayList<Network> networksToAdd, boolean isAnyManagement) {
    VdsNetworkInterface interfaceWithNetwork = Linq.findInterfaceNetworkNameNotEmpty(getSelectedItemsWithVlans());
    innerBondModel.getCheckConnectivity().setIsChangable(interfaceWithNetwork != null);
    innerBondModel.getCheckConnectivity().setIsAvailable(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement());
    innerBondModel.getCheckConnectivity().setEntity(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement());
    innerBondModel.setNoneBootProtocolAvailable(!(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement()));
    if (interfaceWithNetwork != null) {
        innerBondModel.setBootProtocol(!innerBondModel.getNoneBootProtocolAvailable() && interfaceWithNetwork.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : interfaceWithNetwork.getBootProtocol());
        innerBondModel.getAddress().setEntity(interfaceWithNetwork.getAddress());
        innerBondModel.getSubnet().setEntity(interfaceWithNetwork.getSubnet());
        innerBondModel.getGateway().setEntity(interfaceWithNetwork.getGateway());
    } else {
        innerBondModel.setBootProtocol(NetworkBootProtocol.NONE);
    }
    innerBondModel.getGateway().setIsAvailable(isAnyManagement);
    if (networksToAdd.isEmpty()) {
        innerBondModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("Cancel", hostInterfaceListModel);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
        tempVar.setIsDefault(true);
        tempVar.setIsCancel(true);
        innerBondModel.getCommands().add(tempVar);
    } else {
        if (interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement()) {
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("OnEditManagementNetworkConfirmation_Bond", hostInterfaceListModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar2.setIsDefault(true);
            innerBondModel.getCommands().add(tempVar2);
            // $NON-NLS-1$
            UICommand tempVar3 = new UICommand("Cancel", hostInterfaceListModel);
            tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar3.setIsCancel(true);
            innerBondModel.getCommands().add(tempVar3);
        } else {
            // $NON-NLS-1$
            UICommand tempVar4 = new UICommand("OnBond", hostInterfaceListModel);
            tempVar4.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar4.setIsDefault(true);
            innerBondModel.getCommands().add(tempVar4);
            // $NON-NLS-1$
            UICommand tempVar5 = new UICommand("Cancel", hostInterfaceListModel);
            tempVar5.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar5.setIsCancel(true);
            innerBondModel.getCommands().add(tempVar5);
        }
    }
}
#method_after
public void postBond(HostInterfaceListModel hostInterfaceListModel, HostBondInterfaceModel innerBondModel, ArrayList<Network> networksToAdd, boolean isAnyManagement) {
    VdsNetworkInterface interfaceWithNetwork = Linq.findInterfaceNetworkNameNotEmpty(getSelectedItemsWithVlans());
    innerBondModel.getCheckConnectivity().setIsChangable(interfaceWithNetwork != null);
    innerBondModel.getCheckConnectivity().setIsAvailable(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement());
    innerBondModel.getCheckConnectivity().setEntity(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement());
    innerBondModel.setNoneBootProtocolAvailable(!(interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement()));
    if (interfaceWithNetwork != null) {
        innerBondModel.setBootProtocol(!innerBondModel.getNoneBootProtocolAvailable() && interfaceWithNetwork.getBootProtocol() == NetworkBootProtocol.NONE ? NetworkBootProtocol.DHCP : interfaceWithNetwork.getBootProtocol());
        innerBondModel.getAddress().setEntity(interfaceWithNetwork.getAddress());
        innerBondModel.getSubnet().setEntity(interfaceWithNetwork.getSubnet());
        innerBondModel.getGateway().setEntity(interfaceWithNetwork.getGateway());
    } else {
        innerBondModel.setBootProtocol(NetworkBootProtocol.NONE);
    }
    innerBondModel.getGateway().setIsAvailable(isAnyManagement);
    if (networksToAdd.isEmpty()) {
        innerBondModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("Cancel", hostInterfaceListModel);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
        tempVar.setIsDefault(true);
        tempVar.setIsCancel(true);
        innerBondModel.getCommands().add(tempVar);
    } else {
        if (interfaceWithNetwork != null && interfaceWithNetwork.getIsManagement()) {
            // $NON-NLS-1$
            UICommand tempVar2 = UICommand.createDefaultOkUiCommand("OnEditManagementNetworkConfirmation_Bond", hostInterfaceListModel);
            innerBondModel.getCommands().add(tempVar2);
            // $NON-NLS-1$
            UICommand tempVar3 = UICommand.createCancelUiCommand("Cancel", hostInterfaceListModel);
            innerBondModel.getCommands().add(tempVar3);
        } else {
            // $NON-NLS-1$
            UICommand tempVar4 = UICommand.createDefaultOkUiCommand("OnBond", hostInterfaceListModel);
            innerBondModel.getCommands().add(tempVar4);
            // $NON-NLS-1$
            UICommand tempVar5 = UICommand.createCancelUiCommand("Cancel", hostInterfaceListModel);
            innerBondModel.getCommands().add(tempVar5);
        }
    }
}
#end_block

#method_before
public void detach() {
    if (getWindow() != null) {
        return;
    }
    HostInterfaceModel model = new HostInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().detachNetworkInterfacesTitle());
    model.setHelpTag(HelpTag.detach_network_interfaces);
    // $NON-NLS-1$
    model.setHashName("detach_network_interfaces");
    VdsNetworkInterface nic = (VdsNetworkInterface) getSelectedItem();
    model.getName().setEntity(nic.getName());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnDetach", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void detach() {
    if (getWindow() != null) {
        return;
    }
    HostInterfaceModel model = new HostInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().detachNetworkInterfacesTitle());
    model.setHelpTag(HelpTag.detach_network_interfaces);
    // $NON-NLS-1$
    model.setHashName("detach_network_interfaces");
    VdsNetworkInterface nic = (VdsNetworkInterface) getSelectedItem();
    model.getName().setEntity(nic.getName());
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnDetach", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
public void onSave() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (!model.validate()) {
        return;
    }
    String nicName = (String) model.getEntity();
    final VdsNetworkInterface nic = (VdsNetworkInterface) Linq.findInterfaceByName(getAllItems(), nicName);
    if (nic == null) {
        cancel();
        return;
    }
    Network network = model.getNetwork().getSelectedItem();
    // Save changes.
    if (network.getId().equals(Guid.Empty)) {
        if (nic.getIsManagement()) {
            // We are trying to disconnect the management interface from its
            // network -> ask for the user's confirmation before doing that.
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkInterfaceTitle());
            confirmModel.setHelpTag(HelpTag.edit_management_network_interface);
            // $NON-NLS-1$
            confirmModel.setHashName("edit_management_network_interface");
            confirmModel.setMessage(ConstantsManager.getInstance().getMessages().youAreAboutToDisconnectHostInterfaceMsg(nic.getName()));
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnConfirmManagementDetach", this);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", this);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            AsyncQuery _asyncQuery = new AsyncQuery();
            _asyncQuery.setModel(this);
            _asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object ReturnValue) {
                    final HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
                    HostInterfaceModel hostInterfaceModel = (HostInterfaceModel) hostInterfaceListModel.getWindow();
                    ArrayList<Network> networks = (ArrayList<Network>) ReturnValue;
                    Network defaultNetwork = new Network();
                    defaultNetwork.setName(nic.getNetworkName());
                    Network tempVar3 = Linq.findNetworkByName(networks, nic.getNetworkName());
                    Network net = (tempVar3 != null) ? tempVar3 : defaultNetwork;
                    hostInterfaceModel.startProgress(null);
                    setcurrentModel(hostInterfaceModel);
                    Frontend.getInstance().runAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                        @Override
                        public void executed(FrontendActionAsyncResult result) {
                            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                            VdcReturnValueBase returnValueBase = result.getReturnValue();
                            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                                EntityModel<Boolean> commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                                if (commitChanges.getEntity()) {
                                    new SaveNetworkConfigAction(HostInterfaceListModel.this, getcurrentModel(), getEntity()).execute();
                                } else {
                                    hostInterfaceListModel.getcurrentModel().stopProgress();
                                    hostInterfaceListModel.cancel();
                                    hostInterfaceListModel.search();
                                }
                            } else {
                                hostInterfaceListModel.getcurrentModel().stopProgress();
                            }
                        }
                    }, hostInterfaceListModel);
                }
            };
            AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        AttachNetworkToVdsParameters parameters;
        VdcActionType actionType;
        boolean vLanAttached = false;
        boolean bondWithVlans = false;
        boolean isUpdateVlan = false;
        if (nic.getBonded() != null && nic.getBonded()) {
            for (HostInterfaceLineModel item : (ArrayList<HostInterfaceLineModel>) getItems()) {
                if (item.getInterface() != null && item.getInterface().getId().equals(nic.getId())) {
                    if (item.getVLans() != null && item.getVLans().size() > 0) {
                        bondWithVlans = true;
                        for (HostVLan vLan : item.getVLans()) {
                            if (ObjectUtils.objectsEqual(network.getName(), vLan.getNetworkName())) {
                                vLanAttached = true;
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        } else {
            for (VdsNetworkInterface item : getSelectedItemsWithVlans()) {
                if (item.getVlanId() != null && ObjectUtils.objectsEqual(item.getNetworkName(), network.getName())) {
                    isUpdateVlan = true;
                    break;
                }
            }
        }
        // and the selected network in the dialog is a new vlan, attach selected network.
        if ((StringHelper.isNullOrEmpty(nic.getNetworkName()) && (nic.getBonded() == null || !nic.getBonded()) && !isUpdateVlan) || (bondWithVlans && (!vLanAttached && network.getVlanId() != null))) {
            parameters = new AttachNetworkToVdsParameters(getEntity().getId(), network, nic);
            actionType = VdcActionType.AttachNetworkToVdsInterface;
        } else {
            parameters = new UpdateNetworkToVdsParameters(getEntity().getId(), network, new ArrayList<VdsNetworkInterface>(Arrays.asList(new VdsNetworkInterface[] { nic })));
            parameters.setOldNetworkName((nic.getNetworkName() != null ? nic.getNetworkName() : network.getName()));
            parameters.setCheckConnectivity(model.getCheckConnectivity().getEntity());
            actionType = VdcActionType.UpdateNetworkToVdsInterface;
        }
        Map.Entry<String, EntityModel<String>> bondingOption;
        if (model.getBondingOptions().getSelectedItem() != null) {
            bondingOption = model.getBondingOptions().getSelectedItem();
            if (// $NON-NLS-1$
            !bondingOption.getKey().equals("custom")) {
                parameters.setBondingOptions((StringHelper.isNullOrEmpty(bondingOption.getKey()) ? null : bondingOption.getKey()));
            } else {
                EntityModel entityModel = bondingOption.getValue();
                if (entityModel.getEntity() != null) {
                    parameters.setBondingOptions(entityModel.getEntity().toString());
                }
            }
        }
        parameters.setBootProtocol(model.getBootProtocol());
        if (model.getIsStaticAddress()) {
            parameters.setAddress(model.getAddress().getEntity());
            parameters.setSubnet(model.getSubnet().getEntity());
        }
        model.startProgress(null);
        setcurrentModel(model);
        Frontend.getInstance().runAction(actionType, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void executed(FrontendActionAsyncResult result) {
                HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    EntityModel<Boolean> commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                    if (commitChanges.getEntity()) {
                        new SaveNetworkConfigAction(HostInterfaceListModel.this, hostInterfaceListModel.getcurrentModel(), getEntity()).execute();
                    } else {
                        hostInterfaceListModel.getcurrentModel().stopProgress();
                        hostInterfaceListModel.cancel();
                        hostInterfaceListModel.search();
                    }
                } else {
                    hostInterfaceListModel.getcurrentModel().stopProgress();
                }
            }
        }, this);
    }
}
#method_after
public void onSave() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (!model.validate()) {
        return;
    }
    String nicName = (String) model.getEntity();
    final VdsNetworkInterface nic = (VdsNetworkInterface) Linq.findInterfaceByName(getAllItems(), nicName);
    if (nic == null) {
        cancel();
        return;
    }
    Network network = model.getNetwork().getSelectedItem();
    // Save changes.
    if (network.getId().equals(Guid.Empty)) {
        if (nic.getIsManagement()) {
            // We are trying to disconnect the management interface from its
            // network -> ask for the user's confirmation before doing that.
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkInterfaceTitle());
            confirmModel.setHelpTag(HelpTag.edit_management_network_interface);
            // $NON-NLS-1$
            confirmModel.setHashName("edit_management_network_interface");
            confirmModel.setMessage(ConstantsManager.getInstance().getMessages().youAreAboutToDisconnectHostInterfaceMsg(nic.getName()));
            // $NON-NLS-1$
            UICommand tempVar = UICommand.createDefaultOkUiCommand("OnConfirmManagementDetach", this);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            AsyncQuery _asyncQuery = new AsyncQuery();
            _asyncQuery.setModel(this);
            _asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object ReturnValue) {
                    final HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
                    HostInterfaceModel hostInterfaceModel = (HostInterfaceModel) hostInterfaceListModel.getWindow();
                    ArrayList<Network> networks = (ArrayList<Network>) ReturnValue;
                    Network defaultNetwork = new Network();
                    defaultNetwork.setName(nic.getNetworkName());
                    Network tempVar3 = Linq.findNetworkByName(networks, nic.getNetworkName());
                    Network net = (tempVar3 != null) ? tempVar3 : defaultNetwork;
                    hostInterfaceModel.startProgress(null);
                    setcurrentModel(hostInterfaceModel);
                    Frontend.getInstance().runAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                        @Override
                        public void executed(FrontendActionAsyncResult result) {
                            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                            VdcReturnValueBase returnValueBase = result.getReturnValue();
                            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                                EntityModel<Boolean> commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                                if (commitChanges.getEntity()) {
                                    new SaveNetworkConfigAction(HostInterfaceListModel.this, getcurrentModel(), getEntity()).execute();
                                } else {
                                    hostInterfaceListModel.getcurrentModel().stopProgress();
                                    hostInterfaceListModel.cancel();
                                    hostInterfaceListModel.search();
                                }
                            } else {
                                hostInterfaceListModel.getcurrentModel().stopProgress();
                            }
                        }
                    }, hostInterfaceListModel);
                }
            };
            AsyncDataProvider.getInstance().getClusterNetworkList(_asyncQuery, getEntity().getVdsGroupId());
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        AttachNetworkToVdsParameters parameters;
        VdcActionType actionType;
        boolean vLanAttached = false;
        boolean bondWithVlans = false;
        boolean isUpdateVlan = false;
        if (nic.getBonded() != null && nic.getBonded()) {
            for (HostInterfaceLineModel item : (ArrayList<HostInterfaceLineModel>) getItems()) {
                if (item.getInterface() != null && item.getInterface().getId().equals(nic.getId())) {
                    if (item.getVLans() != null && item.getVLans().size() > 0) {
                        bondWithVlans = true;
                        for (HostVLan vLan : item.getVLans()) {
                            if (ObjectUtils.objectsEqual(network.getName(), vLan.getNetworkName())) {
                                vLanAttached = true;
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        } else {
            for (VdsNetworkInterface item : getSelectedItemsWithVlans()) {
                if (item.getVlanId() != null && ObjectUtils.objectsEqual(item.getNetworkName(), network.getName())) {
                    isUpdateVlan = true;
                    break;
                }
            }
        }
        // and the selected network in the dialog is a new vlan, attach selected network.
        if ((StringHelper.isNullOrEmpty(nic.getNetworkName()) && (nic.getBonded() == null || !nic.getBonded()) && !isUpdateVlan) || (bondWithVlans && (!vLanAttached && network.getVlanId() != null))) {
            parameters = new AttachNetworkToVdsParameters(getEntity().getId(), network, nic);
            actionType = VdcActionType.AttachNetworkToVdsInterface;
        } else {
            parameters = new UpdateNetworkToVdsParameters(getEntity().getId(), network, new ArrayList<VdsNetworkInterface>(Arrays.asList(new VdsNetworkInterface[] { nic })));
            parameters.setOldNetworkName((nic.getNetworkName() != null ? nic.getNetworkName() : network.getName()));
            parameters.setCheckConnectivity(model.getCheckConnectivity().getEntity());
            actionType = VdcActionType.UpdateNetworkToVdsInterface;
        }
        Map.Entry<String, EntityModel<String>> bondingOption;
        if (model.getBondingOptions().getSelectedItem() != null) {
            bondingOption = model.getBondingOptions().getSelectedItem();
            if (// $NON-NLS-1$
            !bondingOption.getKey().equals("custom")) {
                parameters.setBondingOptions((StringHelper.isNullOrEmpty(bondingOption.getKey()) ? null : bondingOption.getKey()));
            } else {
                EntityModel entityModel = bondingOption.getValue();
                if (entityModel.getEntity() != null) {
                    parameters.setBondingOptions(entityModel.getEntity().toString());
                }
            }
        }
        parameters.setBootProtocol(model.getBootProtocol());
        if (model.getIsStaticAddress()) {
            parameters.setAddress(model.getAddress().getEntity());
            parameters.setSubnet(model.getSubnet().getEntity());
        }
        model.startProgress(null);
        setcurrentModel(model);
        Frontend.getInstance().runAction(actionType, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void executed(FrontendActionAsyncResult result) {
                HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    EntityModel<Boolean> commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                    if (commitChanges.getEntity()) {
                        new SaveNetworkConfigAction(HostInterfaceListModel.this, hostInterfaceListModel.getcurrentModel(), getEntity()).execute();
                    } else {
                        hostInterfaceListModel.getcurrentModel().stopProgress();
                        hostInterfaceListModel.cancel();
                        hostInterfaceListModel.search();
                    }
                } else {
                    hostInterfaceListModel.getcurrentModel().stopProgress();
                }
            }
        }, this);
    }
}
#end_block

#method_before
public void saveNetworkConfig() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().saveNetworkConfigurationTitle());
    model.setHelpTag(HelpTag.save_network_configuration);
    // $NON-NLS-1$
    model.setHashName("save_network_configuration");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToMakeTheChangesPersistentMsg());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSaveNetworkConfig", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void saveNetworkConfig() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().saveNetworkConfigurationTitle());
    model.setHelpTag(HelpTag.save_network_configuration);
    // $NON-NLS-1$
    model.setHashName("save_network_configuration");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToMakeTheChangesPersistentMsg());
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnSaveNetworkConfig", this);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
public static Version getMinVersionByClusters(List<VDSGroup> source) {
    Version minVersion = source != null && source.size() > 0 ? source.get(0).getcompatibility_version() : null;
    if (minVersion != null) {
        for (VDSGroup cluster : source) {
            minVersion = cluster.getcompatibility_version().compareTo(minVersion) < 0 ? (Version) cluster.getcompatibility_version() : minVersion;
        }
    }
    return minVersion;
}
#method_after
public static Version getMinVersionByClusters(List<VDSGroup> source) {
    Version minVersion = source != null && source.size() > 0 ? source.get(0).getCompatibilityVersion() : null;
    if (minVersion != null) {
        for (VDSGroup cluster : source) {
            minVersion = cluster.getCompatibilityVersion().compareTo(minVersion) < 0 ? (Version) cluster.getCompatibilityVersion() : minVersion;
        }
    }
    return minVersion;
}
#end_block

#method_before
public static ArrayList<VDS> findAllVDSByPmEnabled(ArrayList<VDS> items) {
    ArrayList<VDS> ret = new ArrayList<VDS>();
    for (VDS i : items) {
        if (i.getpm_enabled()) {
            ret.add(i);
        }
    }
    return ret;
}
#method_after
public static ArrayList<VDS> findAllVDSByPmEnabled(ArrayList<VDS> items) {
    ArrayList<VDS> ret = new ArrayList<VDS>();
    for (VDS i : items) {
        if (i.isPmEnabled()) {
            ret.add(i);
        }
    }
    return ret;
}
#end_block

#method_before
public static <TSource> List<TSource> where(Collection<? extends TSource> source, IPredicate<? super TSource> predicate) {
    List<TSource> list = new ArrayList<TSource>();
    for (TSource item : source) {
        if (predicate.match(item)) {
            list.add(item);
        }
    }
    return list;
}
#method_after
public static <TSource> Collection<TSource> where(Collection<TSource> source, IPredicate<TSource> predicate) {
    ArrayList<TSource> list = new ArrayList<TSource>();
    for (TSource item : source) {
        if (predicate.match(item)) {
            list.add(item);
        }
    }
    return list;
}
#end_block

#method_before
public static ArrayList<StorageDomain> getStorageDomainsByIds(ArrayList<Guid> storageIds, ArrayList<StorageDomain> storageDomains) {
    ArrayList<StorageDomain> list = new ArrayList<StorageDomain>();
    for (Guid storageId : storageIds) {
        StorageDomain storageDomain = getStorageById(storageId, storageDomains);
        if (storageDomain != null) {
            list.add(getStorageById(storageId, storageDomains));
        }
    }
    return list;
}
#method_after
public static ArrayList<StorageDomain> getStorageDomainsByIds(ArrayList<Guid> storageIds, ArrayList<StorageDomain> storageDomains) {
    ArrayList<StorageDomain> list = new ArrayList<StorageDomain>();
    for (Guid storageId : storageIds) {
        StorageDomain storageDomain = getStorageById(storageId, storageDomains);
        if (storageDomain != null) {
            list.add(storageDomain);
        }
    }
    return list;
}
#end_block

#method_before
@Override
public boolean match(DbGroup source) {
    String groupName = source.getName().toLowerCase();
    String targetName = target.getName();
    if (!StringHelper.isNullOrEmpty(targetName)) {
        targetName = targetName.toLowerCase();
    }
    // $NON-NLS-1$
    int lastIndex = groupName.lastIndexOf("/");
    if (lastIndex != -1) {
        groupName = groupName.substring(lastIndex + 1);
    }
    return ObjectUtils.objectsEqual(source.getDomain(), target.getDomain()) && (StringHelper.isNullOrEmpty(target.getName()) || // $NON-NLS-1$
    "*".equals(target.getName()) || groupName.startsWith(targetName)) || source.getName().toLowerCase().startsWith(targetName);
}
#method_after
@Override
public boolean match(DbGroup source) {
    String groupName = source.getName().toLowerCase();
    String targetName = target.getName();
    if (!StringHelper.isNullOrEmpty(targetName)) {
        targetName = targetName.toLowerCase();
    } else if (targetName == null) {
        targetName = "";
    }
    // $NON-NLS-1$
    int lastIndex = groupName.lastIndexOf("/");
    if (lastIndex != -1) {
        groupName = groupName.substring(lastIndex + 1);
    }
    return ObjectUtils.objectsEqual(source.getDomain(), target.getDomain()) && (StringHelper.isNullOrEmpty(target.getName()) || // $NON-NLS-1$
    "*".equals(target.getName()) || groupName.startsWith(targetName)) || source.getName().toLowerCase().startsWith(targetName);
}
#end_block

#method_before
private void initManagement() {
    startProgress(null);
    final AsyncQuery callback = new AsyncQuery(new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            management = (Boolean) returnValue;
            stopProgress();
        }
    });
    AsyncDataProvider.getInstance().isManagementNetwork(callback, getNetwork().getId());
}
#method_after
private void initManagement() {
    final AsyncQuery callback = new AsyncQuery(new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            management = (Boolean) returnValue;
        }
    });
    AsyncDataProvider.getInstance().isManagementNetwork(callback, getNetwork().getId());
}
#end_block

#method_before
private void initExternalProviderList() {
    startProgress(null);
    AsyncQuery getProvidersQuery = new AsyncQuery();
    getProvidersQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            List<Provider> providers = (List<Provider>) result;
            getExternalProviders().setItems(providers);
            selectExternalProvider();
            stopProgress();
        }
    };
    AsyncDataProvider.getInstance().getAllNetworkProviders(getProvidersQuery);
}
#method_after
private void initExternalProviderList() {
    AsyncQuery getProvidersQuery = new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            List<Provider> providers = (List<Provider>) result;
            getExternalProviders().setItems(providers);
            selectExternalProvider();
        }
    });
    AsyncDataProvider.getInstance().getAllNetworkProviders(getProvidersQuery);
}
#end_block

#method_before
public ListModel<NetworkQoS> getQos() {
    return qos;
}
#method_after
public ListModel<HostNetworkQos> getQos() {
    return qos;
}
#end_block

#method_before
private void setQos(ListModel<NetworkQoS> qos) {
    this.qos = qos;
}
#method_after
private void setQos(ListModel<HostNetworkQos> qos) {
    this.qos = qos;
}
#end_block

#method_before
public void setSupportBridgesReportByVDSM(boolean isSupportBridgesReportByVDSM) {
    if (!isSupportBridgesReportByVDSM) {
        getIsVmNetwork().setEntity(true);
        getIsVmNetwork().setChangeProhibitionReason(ConstantsManager.getInstance().getMessages().bridlessNetworkNotSupported(getSelectedDc().getcompatibility_version().toString()));
        getIsVmNetwork().setIsChangable(false);
    } else {
        if (this.isSupportBridgesReportByVDSM != isSupportBridgesReportByVDSM) {
            initIsVm();
        }
        getIsVmNetwork().setIsChangable(true);
    }
    this.isSupportBridgesReportByVDSM = isSupportBridgesReportByVDSM;
}
#method_after
public void setSupportBridgesReportByVDSM(boolean isSupportBridgesReportByVDSM) {
    if (!isSupportBridgesReportByVDSM) {
        getIsVmNetwork().setEntity(true);
        getIsVmNetwork().setChangeProhibitionReason(ConstantsManager.getInstance().getMessages().bridlessNetworkNotSupported(getSelectedDc().getCompatibilityVersion().toString()));
        getIsVmNetwork().setIsChangable(false);
    } else {
        if (this.isSupportBridgesReportByVDSM != isSupportBridgesReportByVDSM) {
            initIsVm();
        }
        getIsVmNetwork().setIsChangable(true);
    }
    this.isSupportBridgesReportByVDSM = isSupportBridgesReportByVDSM;
}
#end_block

#method_before
public void syncWithBackend() {
    final StoragePool dc = getSelectedDc();
    if (dc == null) {
        return;
    }
    // Get IsSupportBridgesReportByVDSM
    boolean isSupportBridgesReportByVDSM = (Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.SupportBridgesReportByVDSM, dc.getcompatibility_version().toString());
    setSupportBridgesReportByVDSM(isSupportBridgesReportByVDSM);
    // Get IsMTUOverrideSupported
    boolean isMTUOverrideSupported = (Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MTUOverrideSupported, dc.getcompatibility_version().toString());
    setMTUOverrideSupported(isMTUOverrideSupported);
    AsyncQuery query = new AsyncQuery();
    query.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            Collection<NetworkQoS> qos = (Collection<NetworkQoS>) returnValue;
            getQos().setItems(qos);
            getQos().setSelectedItem(Linq.findNetworkQosById(qos, getNetwork().getQosId()));
        }
    };
    AsyncDataProvider.getInstance().getAllNetworkQos(dc.getId(), query);
    updateDcLabels();
    onExportChanged();
    getProfiles().updateDcId(dc.getId());
}
#method_after
public void syncWithBackend() {
    final StoragePool dc = getSelectedDc();
    if (dc == null) {
        return;
    }
    // Get IsSupportBridgesReportByVDSM
    boolean isSupportBridgesReportByVDSM = (Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.SupportBridgesReportByVDSM, dc.getCompatibilityVersion().toString());
    setSupportBridgesReportByVDSM(isSupportBridgesReportByVDSM);
    // Get IsMTUOverrideSupported
    boolean isMTUOverrideSupported = (Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MTUOverrideSupported, dc.getCompatibilityVersion().toString());
    setMTUOverrideSupported(isMTUOverrideSupported);
    AsyncQuery query = new AsyncQuery();
    query.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            Collection<HostNetworkQos> qos = (Collection<HostNetworkQos>) returnValue;
            getQos().setItems(qos);
            getQos().setSelectedItem(Linq.findHostNetworkQosById(qos, getNetwork().getQosId()));
        }
    };
    AsyncDataProvider.getInstance().getAllHostNetworkQos(dc.getId(), query);
    updateDcLabels();
    onExportChanged();
    getProfiles().updateDcId(dc.getId());
}
#end_block

#method_before
private void addCommands() {
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("OnSave", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar2.setIsDefault(true);
    getCommands().add(tempVar2);
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("Cancel", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar3.setIsCancel(true);
    getCommands().add(tempVar3);
    // $NON-NLS-1$
    addQosCommand = new UICommand("AddQos", this);
    addQosCommand.setTitle(ConstantsManager.getInstance().getConstants().newNetworkQosButton());
}
#method_after
private void addCommands() {
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createDefaultOkUiCommand("OnSave", this);
    getCommands().add(tempVar2);
    // $NON-NLS-1$
    UICommand tempVar3 = UICommand.createCancelUiCommand("Cancel", this);
    getCommands().add(tempVar3);
    // $NON-NLS-1$
    addQosCommand = new UICommand("AddQos", this);
    addQosCommand.setTitle(ConstantsManager.getInstance().getConstants().newNetworkQosButton());
}
#end_block

#method_before
public void flush() {
    network.setDataCenterId(getSelectedDc().getId());
    network.setName(getName().getEntity());
    network.setStp(getIsStpEnabled().getEntity());
    network.setDescription(getDescription().getEntity());
    network.setComment(getComment().getEntity());
    network.setVmNetwork(getIsVmNetwork().getEntity());
    String label = getExport().getEntity() ? getNeutronPhysicalNetwork().getEntity() : getNetworkLabel().getSelectedItem();
    network.setLabel(label == null || !label.isEmpty() ? label : null);
    network.setMtu(0);
    if (getMtu().getIsChangable()) {
        network.setMtu(Integer.parseInt(getMtu().getEntity().toString()));
    }
    network.setVlanId(null);
    if (getHasVLanTag().getEntity()) {
        network.setVlanId(Integer.parseInt(getVLanTag().getEntity().toString()));
    }
    for (VnicProfileModel profileModel : getProfiles().getItems()) {
        profileModel.flush();
    }
    if (getQos().getIsChangable()) {
        NetworkQoS qos = getQos().getSelectedItem();
        network.setQosId(qos == NetworkQoSModel.EMPTY_QOS ? null : qos.getId());
    }
}
#method_after
public void flush() {
    network.setDataCenterId(getSelectedDc().getId());
    network.setName(getName().getEntity());
    network.setStp(getIsStpEnabled().getEntity());
    network.setDescription(getDescription().getEntity());
    network.setComment(getComment().getEntity());
    network.setVmNetwork(getIsVmNetwork().getEntity());
    String label = getExport().getEntity() ? getNeutronPhysicalNetwork().getEntity() : getNetworkLabel().getSelectedItem();
    network.setLabel(label == null || !label.isEmpty() ? label : null);
    network.setMtu(0);
    if (getMtu().getIsChangable()) {
        network.setMtu(Integer.parseInt(getMtu().getEntity().toString()));
    }
    network.setVlanId(null);
    if (getHasVLanTag().getEntity()) {
        network.setVlanId(Integer.parseInt(getVLanTag().getEntity().toString()));
    }
    for (VnicProfileModel profileModel : getProfiles().getItems()) {
        profileModel.flush();
    }
    if (getQos().getIsChangable()) {
        HostNetworkQos qos = getQos().getSelectedItem();
        network.setQosId(qos == EMPTY_HOST_NETWORK_QOS ? null : qos.getId());
    }
}
#end_block

#method_before
private void addQos() {
    NewNetworkQoSModel qosModel = new NewNetworkQoSModel(this, getSelectedDc()) {

        @Override
        protected void postSaveAction(boolean succeeded) {
            if (succeeded) {
                List<NetworkQoS> qosItems = new ArrayList<NetworkQoS>(getQos().getItems());
                qosItems.add(1, networkQoS);
                getQos().setItems(qosItems);
                getQos().setSelectedItem(networkQoS);
            }
            super.postSaveAction(succeeded);
        }

        @Override
        protected void cancel() {
            sourceListModel.setConfirmWindow(null);
        }
    };
    qosModel.getDataCenters().setIsChangable(false);
    sourceListModel.setConfirmWindow(qosModel);
}
#method_after
private void addQos() {
    NewHostNetworkQosModel qosModel = new NewHostNetworkQosModel(this, getSelectedDc()) {

        @Override
        protected void postSaveAction(boolean succeeded) {
            if (succeeded) {
                List<HostNetworkQos> qosItems = new ArrayList<HostNetworkQos>(NetworkModel.this.getQos().getItems());
                qosItems.add(1, getQos());
                NetworkModel.this.getQos().setItems(qosItems);
                NetworkModel.this.getQos().setSelectedItem(getQos());
            }
            super.postSaveAction(succeeded);
        }

        @Override
        protected void cancel() {
            sourceListModel.setConfirmWindow(null);
        }
    };
    qosModel.getDataCenters().setIsChangable(false);
    sourceListModel.setConfirmWindow(qosModel);
}
#end_block

#method_before
public void onSave() {
    if (!validate()) {
        return;
    }
    if (isManagement()) {
        ConfirmationModel confirmationModel = new ConfirmationModel();
        confirmationModel.setMessage(ConstantsManager.getInstance().getConstants().updateManagementNetworkWarning());
        UICommand cmdOk = new UICommand(CMD_APPROVE, this);
        cmdOk.setTitle(ConstantsManager.getInstance().getConstants().ok());
        cmdOk.setIsDefault(true);
        confirmationModel.getCommands().add(cmdOk);
        UICommand cmdCancel = new UICommand(CMD_ABORT, this);
        cmdCancel.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        cmdCancel.setIsCancel(true);
        confirmationModel.getCommands().add(cmdCancel);
        sourceListModel.setConfirmWindow(confirmationModel);
    } else {
        onApprove();
    }
}
#method_after
public void onSave() {
    if (!validate()) {
        return;
    }
    if (isManagement()) {
        ConfirmationModel confirmationModel = new ConfirmationModel();
        confirmationModel.setMessage(ConstantsManager.getInstance().getConstants().updateManagementNetworkWarning());
        UICommand cmdOk = UICommand.createDefaultOkUiCommand(CMD_APPROVE, this);
        confirmationModel.getCommands().add(cmdOk);
        // $NON-NLS-1$
        UICommand cmdCancel = UICommand.createCancelUiCommand(CMD_ABORT, this);
        confirmationModel.getCommands().add(cmdCancel);
        sourceListModel.setConfirmWindow(confirmationModel);
    } else {
        onApprove();
    }
}
#end_block

#method_before
private void updateDcLabels() {
    startProgress(null);
    AsyncDataProvider.getInstance().getNetworkLabelsByDataCenterId(getSelectedDc().getId(), new AsyncQuery(new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            String label = getNetworkLabel().getSelectedItem();
            getNetworkLabel().setItems((Collection<String>) returnValue);
            getNetworkLabel().setSelectedItem(label);
            stopProgress();
            onExportChanged();
        }
    }));
}
#method_after
private void updateDcLabels() {
    AsyncDataProvider.getInstance().getNetworkLabelsByDataCenterId(getSelectedDc().getId(), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            String label = getNetworkLabel().getSelectedItem();
            getNetworkLabel().setItems((Collection<String>) returnValue);
            getNetworkLabel().setSelectedItem(label);
            onExportChanged();
        }
    }));
}
#end_block

#method_before
protected void updateMtuSelectorsChangeability() {
    if (getSelectedDc() != null && !isMTUOverrideSupported()) {
        setMtuSelectorsChangeability(false, ConstantsManager.getInstance().getMessages().mtuOverrideNotSupported(getSelectedDc().getcompatibility_version().toString()));
        return;
    }
    if (getExport().getEntity()) {
        setMtuSelectorsChangeability(false, null);
        return;
    }
    setMtuSelectorsChangeability(true, null);
}
#method_after
protected void updateMtuSelectorsChangeability() {
    if (getSelectedDc() != null && !isMTUOverrideSupported()) {
        setMtuSelectorsChangeability(false, ConstantsManager.getInstance().getMessages().mtuOverrideNotSupported(getSelectedDc().getCompatibilityVersion().toString()));
        return;
    }
    if (getExport().getEntity()) {
        setMtuSelectorsChangeability(false, null);
        return;
    }
    setMtuSelectorsChangeability(true, null);
}
#end_block

#method_before
public void isManagementNetwork(AsyncQuery aQuery, Guid networkId) {
    runBooleanQueryByEntityId(VdcQueryType.IsManagementNetwork, aQuery, networkId);
}
#method_after
public void isManagementNetwork(AsyncQuery aQuery, Guid networkId) {
    runQueryByIdParameter(VdcQueryType.IsManagementNetwork, aQuery, networkId);
}
#end_block

#method_before
public void isClusterEmpty(AsyncQuery aQuery, Guid clusterId) {
    runBooleanQueryByEntityId(VdcQueryType.IsClusterEmpty, aQuery, clusterId);
}
#method_after
public void isClusterEmpty(AsyncQuery aQuery, Guid clusterId) {
    runQueryByIdParameter(VdcQueryType.IsClusterEmpty, aQuery, clusterId);
}
#end_block

#method_before
public void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#method_after
public void getHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((List<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.Search, new // $NON-NLS-1$ //$NON-NLS-2$
    SearchParameters(// $NON-NLS-1$ //$NON-NLS-2$
    "Host: cluster = " + clusterName + " sortby name", SearchType.VDS), aQuery);
}
#end_block

#method_before
public void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#method_after
public void getHostListByDataCenter(AsyncQuery aQuery, Guid spId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                return Linq.<VDS>cast((List<?>) source);
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetAllVdsByStoragePool, new IdQueryParameters(spId), aQuery);
}
#end_block

#method_before
public void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (ArrayList<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#method_after
public void getLocalStorageHost(AsyncQuery aQuery, String dataCenterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                for (IVdcQueryable item : (List<IVdcQueryable>) source) {
                    return item;
                }
            }
            return null;
        }
    };
    // $NON-NLS-1$
    SearchParameters sp = new SearchParameters("hosts: datacenter=" + dataCenterName, SearchType.VDS);
    Frontend.getInstance().runQuery(VdcQueryType.Search, sp, aQuery);
}
#end_block

#method_before
public void getUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    getUpHostListByCluster(aQuery, clusterName, null);
}
#method_after
public void getUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : Collections.emptyList();
        }
    };
    getUpHostListByCluster(aQuery, clusterName, null);
}
#end_block

#method_before
public void getProviderCertificateChain(AsyncQuery aQuery, Provider provider) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetProviderCertificateChainText, new ProviderQueryParameters(provider), aQuery);
}
#method_after
public void getProviderCertificateChain(AsyncQuery aQuery, Provider provider) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return Collections.<CertificateInfo>emptyList();
            }
            return source;
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.GetProviderCertificateChain, new ProviderQueryParameters(provider), aQuery);
}
#end_block

#method_before
public boolean hasSpiceSupport(int osId, Version version) {
    List<DisplayType> osDisplayTypes = getDisplayTypes(osId, version);
    return osDisplayTypes == null ? false : osDisplayTypes.contains(DisplayType.qxl);
}
#method_after
public boolean hasSpiceSupport(int osId, Version version) {
    for (Pair<GraphicsType, DisplayType> graphicsDisplayPair : getGraphicsAndDisplays(osId, version)) {
        if (graphicsDisplayPair.getFirst() == GraphicsType.SPICE) {
            return true;
        }
    }
    return false;
}
#end_block

#method_before
private void initDisplayTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            displayTypes = ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetDisplayTypes), callback);
}
#method_after
private void initDisplayTypes() {
    AsyncQuery callback = new AsyncQuery();
    callback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            graphicsAndDisplays = ((VdcQueryReturnValue) returnValue).getReturnValue();
        }
    };
    Frontend.getInstance().runQuery(VdcQueryType.OsRepository, new OsQueryParameters(OsRepositoryVerb.GetDisplayTypes), callback);
}
#end_block

#method_before
@Override
protected void onExportChanged() {
    boolean externalNetwork = (Boolean) getExport().getEntity();
    getExternalProviders().setIsChangable(externalNetwork);
    getIsVmNetwork().setIsChangable(!externalNetwork && isSupportBridgesReportByVDSM());
    if (externalNetwork) {
        getIsVmNetwork().setEntity(true);
    }
    Iterable<NetworkClusterModel> networkClusters = getNetworkClusterList().getItems();
    if (networkClusters != null) {
        for (NetworkClusterModel networkCluster : networkClusters) {
            if (!(Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.SupportCustomDeviceProperties, networkCluster.getEntity().getcompatibility_version().getValue())) {
                networkCluster.setIsChangable(!externalNetwork);
                networkCluster.setAttached(!externalNetwork);
            }
            networkCluster.setRequired(!externalNetwork);
        }
    }
    super.onExportChanged();
}
#method_after
@Override
protected void onExportChanged() {
    boolean externalNetwork = (Boolean) getExport().getEntity();
    getExternalProviders().setIsChangable(externalNetwork);
    getIsVmNetwork().setIsChangable(!externalNetwork && isSupportBridgesReportByVDSM());
    if (externalNetwork) {
        getIsVmNetwork().setEntity(true);
    }
    Iterable<NetworkClusterModel> networkClusters = getNetworkClusterList().getItems();
    if (networkClusters != null) {
        for (NetworkClusterModel networkCluster : networkClusters) {
            if (!(Boolean) AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.SupportCustomDeviceProperties, networkCluster.getEntity().getCompatibilityVersion().getValue())) {
                networkCluster.setIsChangable(!externalNetwork);
                networkCluster.setAttached(!externalNetwork);
            }
            networkCluster.setRequired(!externalNetwork);
        }
    }
    super.onExportChanged();
}
#end_block

#method_before
@Override
protected void postSaveAction(Guid networkGuid, boolean succeeded) {
    super.postSaveAction(networkGuid, succeeded);
    if (!succeeded) {
        return;
    }
    Guid networkId = getNetwork().getId() == null ? networkGuid : getNetwork().getId();
    List<NetworkCluster> networkAttachments = new ArrayList<>();
    for (NetworkClusterModel networkClusterModel : getClustersToAttach()) {
        // Init default NetworkCluster values (required, display, status)
        NetworkCluster networkCluster = new NetworkCluster();
        networkCluster.setNetworkId(networkId);
        networkCluster.setClusterId(networkClusterModel.getEntity().getId());
        networkCluster.setRequired(networkClusterModel.isRequired());
        networkAttachments.add(networkCluster);
    }
    Frontend.getInstance().runAction(VdcActionType.ManageNetworkClusters, new ManageNetworkClustersParameters(networkAttachments));
    if (getExport().getEntity() && getCreateSubnet().getEntity()) {
        getSubnetModel().setExternalNetwork(getNetwork().getProvidedBy());
        getSubnetModel().flush();
        Frontend.getInstance().runAction(VdcActionType.AddSubnetToProvider, new AddExternalSubnetParameters(getSubnetModel().getSubnet(), networkId));
    }
}
#method_after
@Override
protected void postSaveAction(Guid networkGuid, boolean succeeded) {
    super.postSaveAction(networkGuid, succeeded);
    if (!succeeded) {
        return;
    }
    Guid networkId = getNetwork().getId() == null ? networkGuid : getNetwork().getId();
    List<NetworkCluster> networkAttachments = new ArrayList<>();
    for (NetworkClusterModel networkClusterModel : getClustersToAttach()) {
        // Init default NetworkCluster values (required, display, status)
        NetworkCluster networkCluster = new NetworkCluster();
        networkCluster.setNetworkId(networkId);
        networkCluster.setClusterId(networkClusterModel.getEntity().getId());
        networkCluster.setRequired(networkClusterModel.isRequired());
        networkAttachments.add(networkCluster);
    }
    Frontend.getInstance().runAction(VdcActionType.ManageNetworkClusters, new ManageNetworkClustersParameters(networkAttachments));
    ProviderNetwork providedBy = getNetwork().getProvidedBy();
    if (getExport().getEntity() && getCreateSubnet().getEntity() && providedBy != null) {
        getSubnetModel().setExternalNetwork(providedBy);
        getSubnetModel().flush();
        Frontend.getInstance().runAction(VdcActionType.AddSubnetToProvider, new AddExternalSubnetParameters(getSubnetModel().getSubnet(), providedBy.getProviderId(), providedBy.getExternalId()));
    }
}
#end_block

#method_before
public void manage() {
    if (getWindow() != null) {
        return;
    }
    Guid storagePoolId = (getEntity().getStoragePoolId() != null) ? getEntity().getStoragePoolId() : Guid.Empty;
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterNetworkListModel clusterNetworkListModel = (ClusterNetworkListModel) model;
            final List<Network> dcNetworks = (ArrayList<Network>) result;
            ClusterNetworkManageModel networkToManage = createNetworkList(dcNetworks);
            clusterNetworkListModel.setWindow(networkToManage);
            networkToManage.setTitle(ConstantsManager.getInstance().getConstants().assignDetachNetworksTitle());
            networkToManage.setHelpTag(HelpTag.assign_networks);
            // $NON-NLS-1$
            networkToManage.setHashName("assign_networks");
        }
    };
    // fetch the list of DC Networks
    AsyncDataProvider.getInstance().getNetworkList(_asyncQuery, storagePoolId);
}
#method_after
public void manage() {
    if (getWindow() != null) {
        return;
    }
    Guid storagePoolId = (getEntity().getStoragePoolId() != null) ? getEntity().getStoragePoolId() : Guid.Empty;
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            ClusterNetworkListModel clusterNetworkListModel = (ClusterNetworkListModel) model;
            final List<Network> dcNetworks = (List<Network>) result;
            ClusterNetworkManageModel networkToManage = createNetworkList(dcNetworks);
            clusterNetworkListModel.setWindow(networkToManage);
            networkToManage.setTitle(ConstantsManager.getInstance().getConstants().assignDetachNetworksTitle());
            networkToManage.setHelpTag(HelpTag.assign_networks);
            // $NON-NLS-1$
            networkToManage.setHashName("assign_networks");
        }
    };
    // fetch the list of DC Networks
    AsyncDataProvider.getInstance().getNetworkList(_asyncQuery, storagePoolId);
}
#end_block

#method_before
void initTable() {
    getTable().enableColumnResizing();
    TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>> nameColumn = new TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>>() {

        @Override
        public String getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            return object.getFirst().getName();
        }
    };
    nameColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameCluster(), "400px");
    TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>> versionColumn = new TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>>() {

        @Override
        public String getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            return object.getFirst().getCompatibilityVersion().getValue();
        }
    };
    versionColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(versionColumn, constants.comptVersCluster(), "130px");
    CheckboxColumn<PairQueryable<VDSGroup, NetworkCluster>> attachedColumn = new CheckboxColumn<PairQueryable<VDSGroup, NetworkCluster>>(true) {

        @Override
        public Boolean getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            return object.getSecond() != null;
        }

        @Override
        protected boolean canEdit(PairQueryable<VDSGroup, NetworkCluster> object) {
            return false;
        }
    };
    attachedColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(attachedColumn, constants.attachedNetworkCluster(), "120px");
    NetworkClusterStatusColumn statusColumn = new NetworkClusterStatusColumn();
    statusColumn.makeSortable(new SimpleStatusColumnComparator<>(statusColumn));
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.networkStatus(), "120px");
    CheckboxColumn<PairQueryable<VDSGroup, NetworkCluster>> netRequiredColumn = new CheckboxColumn<PairQueryable<VDSGroup, NetworkCluster>>(true) {

        @Override
        public Boolean getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            if (object.getSecond() != null) {
                return object.getSecond().isRequired();
            }
            return false;
        }

        @Override
        protected boolean canEdit(PairQueryable<VDSGroup, NetworkCluster> object) {
            return false;
        }
    };
    netRequiredColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(netRequiredColumn, constants.requiredNetCluster(), "120px");
    SafeHtmlWithSafeHtmlTooltipColumn<PairQueryable<VDSGroup, NetworkCluster>> netRoleColumn = new SafeHtmlWithSafeHtmlTooltipColumn<PairQueryable<VDSGroup, NetworkCluster>>() {

        @Override
        public SafeHtml getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            List<SafeHtml> images = new LinkedList<>();
            if (object.getSecond() != null) {
                if (object.getSecond().isDisplay()) {
                    images.add(displayImage);
                } else {
                    images.add(emptyImage);
                }
                if (object.getSecond().isMigration()) {
                    images.add(migrationImage);
                } else {
                    images.add(emptyImage);
                }
                if (object.getSecond().isManagement()) {
                    images.add(managementImage);
                } else {
                    images.add(emptyImage);
                }
            }
            return NetworkRoleColumnHelper.getValue(images);
        }

        @Override
        public SafeHtml getTooltip(PairQueryable<VDSGroup, NetworkCluster> object) {
            Map<SafeHtml, String> imagesToText = new LinkedHashMap<>();
            if (object.getSecond() != null) {
                if (object.getSecond().isDisplay()) {
                    imagesToText.put(displayImage, constants.displayItemInfo());
                }
                if (object.getSecond().isMigration()) {
                    imagesToText.put(migrationImage, constants.migrationItemInfo());
                }
                if (object.getSecond().isManagement()) {
                    imagesToText.put(managementImage, constants.managementItemInfo());
                }
            }
            return NetworkRoleColumnHelper.getTooltip(imagesToText);
        }
    };
    netRoleColumn.makeSortable(new Comparator<PairQueryable<VDSGroup, NetworkCluster>>() {

        private int calculateValue(NetworkCluster networkCluster) {
            int res = 0;
            if (networkCluster != null) {
                if (networkCluster.isDisplay()) {
                    res += 2;
                }
                if (networkCluster.isMigration()) {
                    res += 1;
                }
            }
            return res;
        }

        @Override
        public int compare(PairQueryable<VDSGroup, NetworkCluster> o1, PairQueryable<VDSGroup, NetworkCluster> o2) {
            return calculateValue(o1.getSecond()) - calculateValue(o2.getSecond());
        }
    });
    // $NON-NLS-1$
    getTable().addColumn(netRoleColumn, constants.roleNetCluster(), "120px");
    TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>> descriptionColumn = new TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>>() {

        @Override
        public String getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            return object.getFirst().getDescription();
        }
    };
    descriptionColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(descriptionColumn, constants.descriptionCluster(), "400px");
    getTable().addActionButton(new WebAdminButtonDefinition<PairQueryable<VDSGroup, NetworkCluster>>(constants.assignUnassignNetwork()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getManageCommand();
        }
    });
}
#method_after
void initTable() {
    getTable().enableColumnResizing();
    TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>> nameColumn = new TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>>() {

        @Override
        public String getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            return object.getFirst().getName();
        }
    };
    nameColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameCluster(), "400px");
    TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>> versionColumn = new TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>>() {

        @Override
        public String getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            return object.getFirst().getCompatibilityVersion().getValue();
        }
    };
    versionColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(versionColumn, constants.comptVersCluster(), "130px");
    CheckboxColumn<PairQueryable<VDSGroup, NetworkCluster>> attachedColumn = new CheckboxColumn<PairQueryable<VDSGroup, NetworkCluster>>(true) {

        @Override
        public Boolean getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            return object.getSecond() != null;
        }

        @Override
        protected boolean canEdit(PairQueryable<VDSGroup, NetworkCluster> object) {
            return false;
        }
    };
    attachedColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(attachedColumn, constants.attachedNetworkCluster(), "120px");
    NetworkClusterStatusColumn statusColumn = new NetworkClusterStatusColumn();
    statusColumn.makeSortable(new SimpleStatusColumnComparator<>(statusColumn));
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.networkStatus(), "120px");
    CheckboxColumn<PairQueryable<VDSGroup, NetworkCluster>> netRequiredColumn = new CheckboxColumn<PairQueryable<VDSGroup, NetworkCluster>>(true) {

        @Override
        public Boolean getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            if (object.getSecond() != null) {
                return object.getSecond().isRequired();
            }
            return false;
        }

        @Override
        protected boolean canEdit(PairQueryable<VDSGroup, NetworkCluster> object) {
            return false;
        }
    };
    netRequiredColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(netRequiredColumn, constants.requiredNetCluster(), "120px");
    SafeHtmlWithSafeHtmlTooltipColumn<PairQueryable<VDSGroup, NetworkCluster>> netRoleColumn = new SafeHtmlWithSafeHtmlTooltipColumn<PairQueryable<VDSGroup, NetworkCluster>>() {

        @Override
        public SafeHtml getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            List<SafeHtml> images = new LinkedList<>();
            if (object.getSecond() != null) {
                if (object.getSecond().isManagement()) {
                    images.add(managementImage);
                } else {
                    images.add(emptyImage);
                }
                if (object.getSecond().isDisplay()) {
                    images.add(displayImage);
                } else {
                    images.add(emptyImage);
                }
                if (object.getSecond().isMigration()) {
                    images.add(migrationImage);
                } else {
                    images.add(emptyImage);
                }
            }
            return NetworkRoleColumnHelper.getValue(images);
        }

        @Override
        public SafeHtml getTooltip(PairQueryable<VDSGroup, NetworkCluster> object) {
            Map<SafeHtml, String> imagesToText = new LinkedHashMap<>();
            if (object.getSecond() != null) {
                if (object.getSecond().isManagement()) {
                    imagesToText.put(managementImage, constants.managementItemInfo());
                }
                if (object.getSecond().isDisplay()) {
                    imagesToText.put(displayImage, constants.displayItemInfo());
                }
                if (object.getSecond().isMigration()) {
                    imagesToText.put(migrationImage, constants.migrationItemInfo());
                }
            }
            return NetworkRoleColumnHelper.getTooltip(imagesToText);
        }
    };
    netRoleColumn.makeSortable(new Comparator<PairQueryable<VDSGroup, NetworkCluster>>() {

        private int calculateValue(NetworkCluster networkCluster) {
            int res = 0;
            if (networkCluster != null) {
                if (networkCluster.isManagement()) {
                    res += 10;
                }
                if (networkCluster.isDisplay()) {
                    res += 2;
                }
                if (networkCluster.isMigration()) {
                    res += 1;
                }
            }
            return res;
        }

        @Override
        public int compare(PairQueryable<VDSGroup, NetworkCluster> o1, PairQueryable<VDSGroup, NetworkCluster> o2) {
            return calculateValue(o1.getSecond()) - calculateValue(o2.getSecond());
        }
    });
    // $NON-NLS-1$
    getTable().addColumn(netRoleColumn, constants.roleNetCluster(), "120px");
    TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>> descriptionColumn = new TextColumnWithTooltip<PairQueryable<VDSGroup, NetworkCluster>>() {

        @Override
        public String getValue(PairQueryable<VDSGroup, NetworkCluster> object) {
            return object.getFirst().getDescription();
        }
    };
    descriptionColumn.makeSortable();
    // $NON-NLS-1$
    getTable().addColumn(descriptionColumn, constants.descriptionCluster(), "400px");
    getTable().addActionButton(new WebAdminButtonDefinition<PairQueryable<VDSGroup, NetworkCluster>>(constants.assignUnassignNetwork()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getManageCommand();
        }
    });
}
#end_block

#method_before
private void testIsManagementNetworkNameInGivenClusterCommon(String managementNetworkName, Guid clusterId, boolean expected) {
    when(mockNetworkDao.getManagementNetwork(TEST_CLUSTER_ID)).thenReturn(mockNetwork);
    when(mockNetwork.getName()).thenReturn(TEST_NETWORK_NAME);
    final boolean actual = underTest.isManagementNetwork(managementNetworkName, clusterId);
    verify(mockNetworkDao).getManagementNetwork(clusterId);
    assertEquals(expected, actual);
}
#method_after
private void testIsManagementNetworkNameInGivenClusterCommon(String networkName, Guid clusterId, boolean expected) {
    when(mockNetworkDao.getManagementNetwork(TEST_CLUSTER_ID)).thenReturn(mockNetwork);
    when(mockNetwork.getName()).thenReturn(TEST_NETWORK_NAME);
    final boolean actual = underTest.isManagementNetwork(networkName, clusterId);
    verify(mockNetworkDao).getManagementNetwork(clusterId);
    assertEquals(expected, actual);
}
#end_block

#method_before
@Override
public String getDefaultManagementNetworkName() {
    return Config.<String>getValue(ConfigValues.DefaultManagementNetwork);
}
#method_after
@Override
public String getDefaultManagementNetworkName() {
    return Config.getValue(ConfigValues.DefaultManagementNetwork);
}
#end_block

#method_before
@Test
public void calculateNetworkImplementationDetailsNetworkQosOutOfSync() throws Exception {
    VdsNetworkInterface iface = createNetworkDevice();
    NetworkQoS qos = createQos();
    qos.setOutboundAverage(30);
    qos.setOutboundPeak(30);
    qos.setOutboundBurst(30);
    calculateNetworkImplementationDetailsAndAssertSync(iface, false, iface.isBridged(), iface.getMtu(), iface.getVlanId(), qos);
}
#method_after
@Test
public void calculateNetworkImplementationDetailsNetworkQosOutOfSync() throws Exception {
    VdsNetworkInterface iface = createNetworkDevice();
    HostNetworkQos qos = new HostNetworkQos();
    qos.setOutAverageLinkshare(60);
    qos.setOutAverageUpperlimit(60);
    qos.setOutAverageRealtime(60);
    calculateNetworkImplementationDetailsAndAssertSync(iface, false, iface.isBridged(), iface.getMtu(), iface.getVlanId(), qos);
}
#end_block

#method_before
@Test
public void calculateNetworkImplementationDetailsNetworkQosOverridden() throws Exception {
    VdsNetworkInterface iface = createNetworkDevice();
    iface.setQosOverridden(true);
    calculateNetworkImplementationDetailsAndAssertSync(iface, true, iface.isBridged(), iface.getMtu(), iface.getVlanId(), new NetworkQoS());
}
#method_after
@Test
public void calculateNetworkImplementationDetailsNetworkQosOverridden() throws Exception {
    VdsNetworkInterface iface = createNetworkDevice();
    iface.setQosOverridden(true);
    calculateNetworkImplementationDetailsAndAssertSync(iface, true, iface.isBridged(), iface.getMtu(), iface.getVlanId(), new HostNetworkQos());
}
#end_block

#method_before
private void calculateNetworkImplementationDetailsAndAssertSync(VdsNetworkInterface iface, boolean expectSync, boolean vmNet, int mtu, int vlanId, NetworkQoS qos) {
    Network network = createNetwork(vmNet, mtu, vlanId);
    NetworkImplementationDetails networkImplementationDetails = NetworkUtils.calculateNetworkImplementationDetails(network, qos, iface);
    assertNotNull("Network implementation details should be filled.", networkImplementationDetails);
    assertEquals("Network implementation details should be " + (expectSync ? "in" : "out of") + " sync.", expectSync, networkImplementationDetails.isInSync());
}
#method_after
private void calculateNetworkImplementationDetailsAndAssertSync(VdsNetworkInterface iface, boolean expectSync, boolean vmNet, int mtu, int vlanId, HostNetworkQos qos) {
    Network network = createNetwork(vmNet, mtu, vlanId);
    NetworkImplementationDetails networkImplementationDetails = NetworkUtils.calculateNetworkImplementationDetails(network, qos, iface);
    assertNotNull("Network implementation details should be filled.", networkImplementationDetails);
    assertEquals("Network implementation details should be " + (expectSync ? "in" : "out of") + " sync.", expectSync, networkImplementationDetails.isInSync());
}
#end_block

#method_before
private NetworkQoS createQos() {
    NetworkQoS qos = new NetworkQoS();
    qos.setInboundAverage(30);
    qos.setInboundPeak(30);
    qos.setInboundBurst(30);
    return qos;
}
#method_after
private HostNetworkQos createQos() {
    HostNetworkQos qos = new HostNetworkQos();
    qos.setOutAverageLinkshare(30);
    qos.setOutAverageUpperlimit(30);
    qos.setOutAverageRealtime(30);
    return qos;
}
#end_block

#method_before
public static VdsNetworkInterface.NetworkImplementationDetails calculateNetworkImplementationDetails(Network network, NetworkQoS qos, VdsNetworkInterface iface) {
    if (StringUtils.isEmpty(iface.getNetworkName())) {
        return null;
    }
    if (network != null) {
        if (isNetworkInSync(iface, network, qos)) {
            return new VdsNetworkInterface.NetworkImplementationDetails(true, true);
        } else {
            return new VdsNetworkInterface.NetworkImplementationDetails(false, true);
        }
    } else {
        return new VdsNetworkInterface.NetworkImplementationDetails();
    }
}
#method_after
public static VdsNetworkInterface.NetworkImplementationDetails calculateNetworkImplementationDetails(Network network, HostNetworkQos qos, VdsNetworkInterface iface) {
    if (StringUtils.isEmpty(iface.getNetworkName())) {
        return null;
    }
    if (network != null) {
        if (isNetworkInSync(iface, network, qos)) {
            return new VdsNetworkInterface.NetworkImplementationDetails(true, true);
        } else {
            return new VdsNetworkInterface.NetworkImplementationDetails(false, true);
        }
    } else {
        return new VdsNetworkInterface.NetworkImplementationDetails();
    }
}
#end_block

#method_before
public static boolean isNetworkInSync(VdsNetworkInterface iface, Network network, NetworkQoS qos) {
    return ((network.getMtu() == 0 && iface.getMtu() == getDefaultMtu()) || iface.getMtu() == network.getMtu()) && Objects.equals(iface.getVlanId(), network.getVlanId()) && iface.isBridged() == network.isVmNetwork() && (isQosInSync(iface, qos) || iface.isQosOverridden());
}
#method_after
public static boolean isNetworkInSync(VdsNetworkInterface iface, Network network, HostNetworkQos qos) {
    return ((network.getMtu() == 0 && iface.getMtu() == getDefaultMtu()) || iface.getMtu() == network.getMtu()) && Objects.equals(iface.getVlanId(), network.getVlanId()) && iface.isBridged() == network.isVmNetwork() && (isQosInSync(iface, qos) || iface.isQosOverridden());
}
#end_block

#method_before
private static boolean isQosInSync(VdsNetworkInterface iface, NetworkQoS networkQos) {
    NetworkQoS ifaceQos = iface.getQos();
    if (ifaceQos == networkQos) {
        return true;
    } else if (ifaceQos == null || networkQos == null) {
        return false;
    } else {
        return ifaceQos.equalValues(networkQos);
    }
}
#method_after
private static boolean isQosInSync(VdsNetworkInterface iface, HostNetworkQos networkQos) {
    HostNetworkQos ifaceQos = iface.getQos();
    return qosParametersEqual(ifaceQos, networkQos);
}
#end_block

#method_before
private void setDataCenterDetails() {
    StoragePool dc = getParameters().getStoragePool();
    setCompatibilityVersion(dc.getcompatibility_version().toString());
    setQuotaEnforcementType(dc.getQuotaEnforcementType().name());
}
#method_after
private void setDataCenterDetails() {
    StoragePool dc = getParameters().getStoragePool();
    setCompatibilityVersion(dc.getCompatibilityVersion().toString());
    setQuotaEnforcementType(dc.getQuotaEnforcementType().name());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean result = true;
    // set version to latest supported version if not given
    if (getStoragePool().getcompatibility_version().isNotValid()) {
        getStoragePool().setcompatibility_version(Version.getLast());
    }
    if (result && !(isStoragePoolUnique(getStoragePool().getName()))) {
        result = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NAME_ALREADY_EXIST);
    } else if (!checkStoragePoolNameLengthValid()) {
        result = false;
    } else if (!VersionSupport.checkVersionSupported(getStoragePool().getcompatibility_version())) {
        addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
        result = false;
    }
    return result;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean result = true;
    // set version to latest supported version if not given
    if (getStoragePool().getCompatibilityVersion().isNotValid()) {
        getStoragePool().setCompatibilityVersion(Version.getLast());
    }
    if (result && !(isStoragePoolUnique(getStoragePool().getName()))) {
        result = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NAME_ALREADY_EXIST);
    } else if (!checkStoragePoolNameLengthValid()) {
        result = false;
    } else if (!VersionSupport.checkVersionSupported(getStoragePool().getCompatibilityVersion())) {
        addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
        result = false;
    }
    return result;
}
#end_block

#method_before
void initEntityModelCellTable(final ApplicationConstants constants, final ApplicationTemplates templates) {
    networks.enableColumnResizing();
    boolean multipleSelectionAllowed = networks.asEditor().flush().isMultiCluster();
    // $NON-NLS-1$
    networks.addColumn(new NetworkNameTextColumnWithTooltip(), constants.nameNetwork(), "85px");
    networks.addColumn(new AttachedIndicatorCheckboxColumn(new AttachedIndicatorFieldUpdater()), new AttachedIndicatorCheckboxHeader(templates.textForCheckBoxHeader(constants.assignAll())), // $NON-NLS-1$
    "90px");
    networks.addColumn(new RequiredIndicatorCheckboxColumn(new RequiredIndicatorFieldUpdater()), new RequiredAllCheckboxHeader(templates.textForCheckBoxHeader(constants.requiredAll())), // $NON-NLS-1$
    "110px");
    networks.addColumn(new VmNetworkImageSafeHtmlWithSafeHtmlTooltipColumn(constants), constants.vmNetwork(), // $NON-NLS-1$
    "80px");
    networks.addColumn(new ManagementNetworkIndicatorCheckboxColumn(multipleSelectionAllowed, new ManagementNetworkIndicatorFieldUpdater()), constants.managementItemInfo(), // $NON-NLS-1$
    "80px");
    final SafeHtml displayNetworkColumnHeader = templates.textWithTooltip(constants.displayNetwork(), constants.changeDisplayNetworkWarning());
    networks.addColumn(new DisplayNetworkIndicatorCheckboxColumn(multipleSelectionAllowed, new DisplayNetworkIndicatorFieldUpdater()), displayNetworkColumnHeader, // $NON-NLS-1$
    "100px");
    networks.addColumn(new MigrationNetworkIndicatorCheckboxColumn(multipleSelectionAllowed, new MigrationNetworkIndicatorFieldUpdater()), constants.migrationNetwork(), // $NON-NLS-1$
    "105px");
}
#method_after
void initEntityModelCellTable(final ApplicationConstants constants, final ApplicationTemplates templates) {
    networks.enableColumnResizing();
    boolean multiCluster = networks.asEditor().flush().isMultiCluster();
    // $NON-NLS-1$
    networks.addColumn(new NetworkNameTextColumnWithTooltip(), constants.nameNetwork(), "85px");
    networks.addColumn(new AttachedIndicatorCheckboxColumn(new AttachedIndicatorFieldUpdater()), new AttachedIndicatorCheckboxHeader(templates.textForCheckBoxHeader(constants.assignAll())), // $NON-NLS-1$
    "90px");
    networks.addColumn(new RequiredIndicatorCheckboxColumn(new RequiredIndicatorFieldUpdater()), new RequiredAllCheckboxHeader(templates.textForCheckBoxHeader(constants.requiredAll())), // $NON-NLS-1$
    "110px");
    networks.addColumn(new VmNetworkImageSafeHtmlWithSafeHtmlTooltipColumn(constants), constants.vmNetwork(), // $NON-NLS-1$
    "80px");
    networks.addColumn(new ManagementNetworkIndicatorCheckboxColumn(multiCluster, new ManagementNetworkIndicatorFieldUpdater()), constants.managementItemInfo(), // $NON-NLS-1$
    "80px");
    final SafeHtml displayNetworkColumnHeader = templates.textWithTooltip(constants.displayNetwork(), constants.changeDisplayNetworkWarning());
    networks.addColumn(new DisplayNetworkIndicatorCheckboxColumn(multiCluster, new DisplayNetworkIndicatorFieldUpdater()), displayNetworkColumnHeader, // $NON-NLS-1$
    "100px");
    networks.addColumn(new MigrationNetworkIndicatorCheckboxColumn(multiCluster, new MigrationNetworkIndicatorFieldUpdater()), constants.migrationNetwork(), // $NON-NLS-1$
    "105px");
}
#end_block

#method_before
@Override
protected boolean canEdit(ClusterNetworkModel clusterNetworkModel) {
    // TODO
    return clusterNetworkModel.isAttached() && !clusterNetworkModel.isExternal();
}
#method_after
@Override
protected boolean canEdit(ClusterNetworkModel clusterNetworkModel) {
    return clusterNetworkModel.isAttached() && !clusterNetworkModel.isExternal() && !(multiCluster && isManagementOriginally(clusterNetworkModel));
}
#end_block

#method_before
public void setDisplayNetwork(ClusterNetworkModel model, boolean value) {
    if (!isMultiCluster()) {
        if (value) {
            // Reset the old display
            if (getDisplayNetwork() != null) {
                getDisplayNetwork().setDisplayNetwork(false);
            }
        } else {
            // Set the management network as display
            managementNetwork.setDisplayNetwork(true);
        }
    }
    model.setDisplayNetwork(value);
}
#method_after
public void setDisplayNetwork(ClusterNetworkModel model, boolean value) {
    if (!isMultiCluster()) {
        if (value) {
            // Reset the old display
            if (getDisplayNetwork() != null) {
                getDisplayNetwork().setDisplayNetwork(false);
            }
        } else {
            // Set the management network as display
            getManagementNetwork().setDisplayNetwork(true);
        }
    }
    model.setDisplayNetwork(value);
}
#end_block

#method_before
public void setMigrationNetwork(ClusterNetworkModel model, boolean value) {
    if (!isMultiCluster()) {
        if (value) {
            // Reset the old migration
            if (getMigrationNetwork() != null) {
                getMigrationNetwork().setMigrationNetwork(false);
            }
        } else {
            // Set the management network as migration
            managementNetwork.setMigrationNetwork(true);
        }
    }
    model.setMigrationNetwork(value);
}
#method_after
public void setMigrationNetwork(ClusterNetworkModel model, boolean value) {
    if (!isMultiCluster()) {
        if (value) {
            // Reset the old migration
            if (getMigrationNetwork() != null) {
                getMigrationNetwork().setMigrationNetwork(false);
            }
        } else {
            // Set the management network as migration
            getManagementNetwork().setMigrationNetwork(true);
        }
    }
    model.setMigrationNetwork(value);
}
#end_block

#method_before
private ClusterNetworkModel getManagementNetwork() {
    if (!isMultiCluster()) {
        for (ClusterNetworkModel clusterNetworkManageModel : getItems()) {
            if (clusterNetworkManageModel.isManagement()) {
                return clusterNetworkManageModel;
            }
        }
    }
    return null;
}
#method_after
private ClusterNetworkModel getManagementNetwork() {
    return managementNetwork;
}
#end_block

#method_before
public void setManagementNetwork(ClusterNetworkModel model, boolean value) {
    if (!isMultiCluster()) {
        if (value) {
            // Unset the old management network
            if (getManagementNetwork() != null) {
                getManagementNetwork().setManagement(false);
            }
        }
    }
    model.setManagement(value);
}
#method_after
public void setManagementNetwork(ClusterNetworkModel model, boolean value) {
    if (!isMultiCluster()) {
        if (value) {
            // Unset the old management network
            if (getManagementNetwork() != null) {
                getManagementNetwork().setManagement(false);
            }
            managementNetwork = model;
        }
    }
    model.setManagement(value);
}
#end_block

#method_before
private NetworkCluster createNetworkCluster(ClusterNetworkModel manageModel) {
    final NetworkCluster networkCluster = new NetworkCluster();
    networkCluster.setClusterId(manageModel.getCluster().getId());
    networkCluster.setNetworkId(manageModel.getEntity().getId());
    // networkCluster.setStatus(NetworkStatus.OPERATIONAL); // ???
    copyRoles(manageModel, networkCluster);
    return networkCluster;
}
#method_after
private NetworkCluster createNetworkCluster(ClusterNetworkModel manageModel) {
    final NetworkCluster networkCluster = new NetworkCluster();
    networkCluster.setClusterId(manageModel.getCluster().getId());
    networkCluster.setNetworkId(manageModel.getEntity().getId());
    copyRoles(manageModel, networkCluster);
    return networkCluster;
}
#end_block

#method_before
private void addErrataForHostsFeature(Features features) {
    Feature feature = new Feature();
    feature.setName("Host Errata");
    feature.setDescription("View available errata for hosts.");
    features.getFeature().add(feature);
}
#method_after
private void addErrataForHostsFeature(Features features) {
    Feature feature = new Feature();
    feature.setName("Katello Host Errata");
    feature.setDescription("View available Katello Errata for hosts.");
    features.getFeature().add(feature);
}
#end_block

#method_before
@Override
public KatelloErratum get() {
    return performGet(VdcQueryType.GetErratumByIdForHost, new HostErratumQueryParameters(asGuid(hostId), id));
}
#method_after
@Override
public KatelloErratum get() {
    return performGet(VdcQueryType.GetErratumByIdForHost, new HostErratumQueryParameters(asGuid(hostId), hex2string(id)));
}
#end_block

#method_before
@Override
protected void verifyModel(KatelloErratum model, int index) {
    assertEquals(GUIDS[index].toString(), model.getId());
    assertEquals(DESCRIPTIONS[index], model.getDescription());
    verifyLinks(model);
}
#method_after
@Override
protected void verifyModel(KatelloErratum model, int index) {
    assertEquals(GUIDS[index].toString(), hex2string(model.getId()));
    assertEquals(DESCRIPTIONS[index], model.getDescription());
    verifyLinks(model);
}
#end_block

#method_before
@Override
protected void verifyModel(KatelloErratum model, int index) {
    assertEquals(NAMES[index], model.getId());
    assertEquals(DESCRIPTIONS[index], model.getDescription());
    verifyLinks(model);
}
#method_after
@Override
protected void verifyModel(KatelloErratum model, int index) {
    assertEquals(NAMES[index], hex2string(model.getId()));
    assertEquals(DESCRIPTIONS[index], model.getDescription());
    verifyLinks(model);
}
#end_block

#method_before
protected void updateDefaultDisplayRelatedFields(final VmBase vmBase) {
    // Update display protocol selected item
    Collection<DisplayType> displayTypes = model.getDisplayType().getItems();
    if (displayTypes == null) {
        return;
    }
    // select display protocol
    // first by default
    DisplayType displayProtocol = displayTypes.iterator().next();
    if (displayTypes.contains(vmBase.getDefaultDisplayType())) {
        // if display types contain DT of a vm, pick this one
        displayProtocol = vmBase.getDefaultDisplayType();
    }
    maybeSetSelectedItem(model.getDisplayType(), displayProtocol);
    maybeSetSelectedItem(model.getNumOfMonitors(), vmBase.getNumOfMonitors());
    maybeSetSelectedItem(model.getUsbPolicy(), vmBase.getUsbPolicy());
    maybeSetEntity(model.getIsSmartcardEnabled(), vmBase.isSmartcardEnabled());
    maybeSetSingleQxlPci(vmBase);
    // graphics
    AsyncDataProvider.getInstance().isSoundcardEnabled(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            deactivate();
            getModel().getIsSoundcardEnabled().setEntity((Boolean) returnValue);
            activate();
            Frontend.getInstance().runQuery(VdcQueryType.GetGraphicsDevices, new IdQueryParameters(vmBase.getId()), new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    deactivate();
                    Set<GraphicsType> graphicsTypes = new HashSet<GraphicsType>();
                    List<GraphicsDevice> graphicsDevices = ((VdcQueryReturnValue) returnValue).getReturnValue();
                    for (GraphicsDevice graphicsDevice : graphicsDevices) {
                        graphicsTypes.add(graphicsDevice.getGraphicsType());
                    }
                    UnitVmModel.GraphicsTypes selected = UnitVmModel.GraphicsTypes.fromGraphicsTypes(graphicsTypes);
                    if (selected != null && getModel().getGraphicsType().getItems().contains(selected)) {
                        maybeSetSelectedItem(getModel().getGraphicsType(), selected);
                    }
                    activate();
                }
            }));
        }
    }), vmBase.getId());
}
#method_after
protected void updateDefaultDisplayRelatedFields(final VmBase vmBase) {
    // Update display protocol selected item
    Collection<DisplayType> displayTypes = model.getDisplayType().getItems();
    if (displayTypes == null || displayTypes.isEmpty()) {
        return;
    }
    // select display protocol
    // first by default
    DisplayType displayProtocol = displayTypes.iterator().next();
    if (displayTypes.contains(vmBase.getDefaultDisplayType())) {
        // if display types contain DT of a vm, pick this one
        displayProtocol = vmBase.getDefaultDisplayType();
    }
    maybeSetSelectedItem(model.getDisplayType(), displayProtocol);
    maybeSetSelectedItem(model.getNumOfMonitors(), vmBase.getNumOfMonitors());
    maybeSetSelectedItem(model.getUsbPolicy(), vmBase.getUsbPolicy());
    maybeSetEntity(model.getIsSmartcardEnabled(), vmBase.isSmartcardEnabled());
    maybeSetSingleQxlPci(vmBase);
    // graphics
    AsyncDataProvider.getInstance().isSoundcardEnabled(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            deactivate();
            getModel().getIsSoundcardEnabled().setEntity((Boolean) returnValue);
            activate();
            Frontend.getInstance().runQuery(VdcQueryType.GetGraphicsDevices, new IdQueryParameters(vmBase.getId()), new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void onSuccess(Object model, Object returnValue) {
                    deactivate();
                    Set<GraphicsType> graphicsTypes = new HashSet<GraphicsType>();
                    List<GraphicsDevice> graphicsDevices = ((VdcQueryReturnValue) returnValue).getReturnValue();
                    for (GraphicsDevice graphicsDevice : graphicsDevices) {
                        graphicsTypes.add(graphicsDevice.getGraphicsType());
                    }
                    UnitVmModel.GraphicsTypes selected = UnitVmModel.GraphicsTypes.fromGraphicsTypes(graphicsTypes);
                    if (selected != null && getModel().getGraphicsType().getItems().contains(selected)) {
                        maybeSetSelectedItem(getModel().getGraphicsType(), selected);
                    }
                    activate();
                }
            }));
        }
    }), vmBase.getId());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    if (!getVm().isDown()) {
        if (FeatureSupported.liveMerge(getVm().getVdsGroupCompatibilityVersion())) {
            if (!getVm().isQualifiedForSnapshotMerge()) {
                log.error("Cannot remove VM snapshot. Vm is not Down, Up or Paused");
                throw new VdcBLLException(VdcBllErrors.VM_NOT_QUALIFIED_FOR_SNAPSHOT_MERGE);
            } else if (getVm().getRunOnVds() == null || !getVdsDAO().get(getVm().getRunOnVds()).getLiveMergeSupport()) {
                log.error("Cannot remove VM snapshot. The host on which VM is running does not support Live Merge");
                throw new VdcBLLException(VdcBllErrors.VM_HOST_CANNOT_LIVE_MERGE);
            }
        } else {
            log.error("Cannot remove VM snapshot. Vm is not Down and cluster version does not support Live Merge");
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
    }
    final Snapshot snapshot = getSnapshotDao().get(getParameters().getSnapshotId());
    boolean snapshotHasImages = hasImages();
    boolean removeSnapshotMemory = isMemoryVolumeRemoveable(snapshot.getMemoryVolume());
    // No need for locking, VDSM tasks, and all that jazz.
    if (!snapshotHasImages && !removeSnapshotMemory) {
        getSnapshotDao().remove(getParameters().getSnapshotId());
        setSucceeded(true);
        return;
    }
    lockSnapshot(snapshot);
    freeLock();
    getParameters().setEntityInfo(new EntityInfo(VdcObjectType.VM, getVmId()));
    boolean useTaskManagerToRemoveMemory = false;
    if (snapshotHasImages) {
        removeImages();
        if (getSnapshotActionType() == VdcActionType.RemoveSnapshotSingleDiskLive) {
            persistCommand(getParameters().getParentCommand(), true);
            useTaskManagerToRemoveMemory = true;
        }
    }
    if (removeSnapshotMemory) {
        removeMemory(snapshot, useTaskManagerToRemoveMemory, snapshotHasImages);
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    if (!getVm().isDown()) {
        if (FeatureSupported.liveMerge(getVm().getVdsGroupCompatibilityVersion())) {
            if (!getVm().isQualifiedForSnapshotMerge()) {
                log.error("Cannot remove VM snapshot. Vm is not Down, Up or Paused");
                throw new VdcBLLException(VdcBllErrors.VM_NOT_QUALIFIED_FOR_SNAPSHOT_MERGE);
            } else if (getVm().getRunOnVds() == null || !getVdsDAO().get(getVm().getRunOnVds()).getLiveMergeSupport()) {
                log.error("Cannot remove VM snapshot. The host on which VM is running does not support Live Merge");
                throw new VdcBLLException(VdcBllErrors.VM_HOST_CANNOT_LIVE_MERGE);
            }
        } else {
            log.error("Cannot remove VM snapshot. Vm is not Down and cluster version does not support Live Merge");
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
    }
    final Snapshot snapshot = getSnapshotDao().get(getParameters().getSnapshotId());
    boolean snapshotHasImages = hasImages();
    boolean removeSnapshotMemory = isMemoryVolumeRemoveable(snapshot.getMemoryVolume());
    // No need for locking, VDSM tasks, and all that jazz.
    if (!snapshotHasImages && !removeSnapshotMemory) {
        getSnapshotDao().remove(getParameters().getSnapshotId());
        setSucceeded(true);
        return;
    }
    lockSnapshot(snapshot);
    freeLock();
    getParameters().setEntityInfo(new EntityInfo(VdcObjectType.VM, getVmId()));
    boolean useTaskManagerToRemoveMemory = false;
    if (snapshotHasImages) {
        removeImages();
        if (getSnapshotActionType() == VdcActionType.RemoveSnapshotSingleDiskLive) {
            persistCommand(getParameters().getParentCommand(), true);
            useTaskManagerToRemoveMemory = true;
        }
    }
    if (removeSnapshotMemory) {
        removeMemory(snapshot, useTaskManagerToRemoveMemory);
        if (!snapshotHasImages) {
            // no async tasks - ending command manually
            endVmCommand();
        }
    }
    setSucceeded(true);
}
#end_block

#method_before
private void removeMemory(final Snapshot snapshot, boolean useTaskManager, boolean snapshotHasImages) {
    RemoveMemoryVolumesParameters parameters = new RemoveMemoryVolumesParameters(snapshot.getMemoryVolume(), getVmId());
    if (useTaskManager) {
        CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveMemoryVolumes, parameters, cloneContextAndDetachFromParent());
    } else {
        VdcReturnValueBase ret = runInternalAction(VdcActionType.RemoveMemoryVolumes, parameters);
        if (!ret.getSucceeded()) {
            log.error("Cannot remove memory volumes for snapshot '{}'", snapshot.getId());
        } else if (!snapshotHasImages) {
            // no async tasks - ending command manually
            endVmCommand();
        }
    }
}
#method_after
private void removeMemory(final Snapshot snapshot, boolean useTaskManager) {
    RemoveMemoryVolumesParameters parameters = new RemoveMemoryVolumesParameters(snapshot.getMemoryVolume(), getVmId());
    if (useTaskManager) {
        CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveMemoryVolumes, parameters, cloneContextAndDetachFromParent());
    } else {
        VdcReturnValueBase ret = runInternalAction(VdcActionType.RemoveMemoryVolumes, parameters);
        if (!ret.getSucceeded()) {
            log.error("Cannot remove memory volumes for snapshot '{}'", snapshot.getId());
        }
    }
}
#end_block

#method_before
@Override
public void setSanStorageModel(SanStorageModel sanStorageModel) {
    super.setSanStorageModel(sanStorageModel);
    sanStorageModel.getLunSelectionChangedEvent().getListeners().clear();
    sanStorageModel.getLunSelectionChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String description = getDescription().getEntity();
            if (description == null || description.isEmpty() || (!description.isEmpty() && descriptionDerivedFromLunId)) {
                LunModel selectedLunModel = ((ValueEventArgs<LunModel>) args).getValue();
                if (selectedLunModel.getLunId() != null) {
                    String newDescription = selectedLunModel.getLunId().substring(selectedLunModel.getLunId().length() - 4);
                    getDescription().setEntity(newDescription);
                    descriptionDerivedFromLunId = true;
                }
            }
        }
    });
}
#method_after
@Override
public void setSanStorageModel(SanStorageModel sanStorageModel) {
    super.setSanStorageModel(sanStorageModel);
    if (!sanStorageModel.getLunSelectionChangedEvent().getListeners().contains(lunSelectionChangedEventListener)) {
        sanStorageModel.getLunSelectionChangedEvent().addListener(lunSelectionChangedEventListener);
    }
}
#end_block

#method_before
@Override
protected void executeVdsBrokerCommand() {
    GlusterVolumeGeoRepSessionVDSParameters parameter = getParameters();
    result = getBroker().glusterVolumeGeoRepStatusDetail(parameter.getVolumeName(), parameter.getSlaveHost(), parameter.getSlaveVolume());
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        setReturnValue(result.getGeoRepDetails());
    }
}
#method_after
@Override
protected void executeVdsBrokerCommand() {
    GlusterVolumeGeoRepSessionVDSParameters parameter = getParameters();
    result = getBroker().glusterVolumeGeoRepSessionStatus(parameter.getVolumeName(), parameter.getSlaveHost(), parameter.getSlaveVolume());
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        setReturnValue(result.getGeoRepDetails());
    }
}
#end_block

#method_before
@Override
protected void executeVdsBrokerCommand() {
    GlusterVolumeGeoRepSessionVDSParameters parameter = getParameters();
    if (parameter.getVolumeName() == null) {
        result = getBroker().glusterVolumeGeoRepStatus();
    } else if (parameter.getSlaveHost() == null || parameter.getSlaveVolume() == null) {
        result = getBroker().glusterVolumeGeoRepStatus(parameter.getVolumeName());
    } else {
        result = getBroker().glusterVolumeGeoRepStatus(parameter.getVolumeName(), parameter.getSlaveHost(), parameter.getSlaveVolume());
    }
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        setReturnValue(result.getGeoRepSessions());
    }
}
#method_after
@Override
protected void executeVdsBrokerCommand() {
    GlusterVolumeGeoRepSessionVDSParameters parameter = getParameters();
    if (parameter.getVolumeName() == null) {
        result = getBroker().glusterVolumeGeoRepSessionList();
    } else if (parameter.getSlaveHost() == null || parameter.getSlaveVolume() == null) {
        result = getBroker().glusterVolumeGeoRepSessionList(parameter.getVolumeName());
    } else {
        result = getBroker().glusterVolumeGeoRepSessionList(parameter.getVolumeName(), parameter.getSlaveHost(), parameter.getSlaveVolume());
    }
    proceedProxyReturnValue();
    if (getVDSReturnValue().getSucceeded()) {
        setReturnValue(result.getGeoRepSessions());
    }
}
#end_block

#method_before
private void updateStoragePoolFormatType() {
    final StoragePool storagePool = getStoragePool();
    final Guid spId = storagePool.getId();
    final Version spVersion = storagePool.getcompatibility_version();
    final Version oldSpVersion = getOldStoragePool().getcompatibility_version();
    if (oldSpVersion.equals(spVersion)) {
        return;
    }
    final StorageFormatType targetFormat = VersionStorageFormatUtil.getPreferredForVersion(spVersion, getMasterDomain() == null ? null : getMasterDomain().getStorageType());
    storagePool.setStoragePoolFormatType(targetFormat);
    TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

        @Override
        public Object runInTransaction() {
            getStoragePoolDAO().updatePartial(storagePool);
            updateMemberDomainsFormat(targetFormat);
            if (FeatureSupported.ovfStoreOnAnyDomain(spVersion)) {
                getVmStaticDAO().incrementDbGenerationForAllInStoragePool(spId);
            }
            return null;
        }
    });
    if (getOldStoragePool().getStatus() == StoragePoolStatus.Up) {
        try {
            // No need to worry about "reupgrading" as VDSM will silently ignore
            // the request.
            runVdsCommand(VDSCommandType.UpgradeStoragePool, new UpgradeStoragePoolVDSCommandParameters(spId, targetFormat));
        } catch (VdcBLLException e) {
            log.warn("Upgrade process of Storage Pool '{}' has encountered a problem due to following reason: {}", spId, e.getMessage());
            AuditLogDirector.log(this, AuditLogType.UPGRADE_STORAGE_POOL_ENCOUNTERED_PROBLEMS);
        }
    }
    runSynchronizeOperation(new RefreshPoolSingleAsyncOperationFactory(), new ArrayList<Guid>());
}
#method_after
private void updateStoragePoolFormatType() {
    final StoragePool storagePool = getStoragePool();
    final Guid spId = storagePool.getId();
    final Version spVersion = storagePool.getCompatibilityVersion();
    final Version oldSpVersion = getOldStoragePool().getCompatibilityVersion();
    if (oldSpVersion.equals(spVersion)) {
        return;
    }
    final StorageFormatType targetFormat = VersionStorageFormatUtil.getPreferredForVersion(spVersion, getMasterDomain() == null ? null : getMasterDomain().getStorageType());
    storagePool.setStoragePoolFormatType(targetFormat);
    TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

        @Override
        public Object runInTransaction() {
            getStoragePoolDAO().updatePartial(storagePool);
            updateMemberDomainsFormat(targetFormat);
            if (FeatureSupported.ovfStoreOnAnyDomain(spVersion)) {
                getVmStaticDAO().incrementDbGenerationForAllInStoragePool(spId);
            }
            return null;
        }
    });
    if (getOldStoragePool().getStatus() == StoragePoolStatus.Up) {
        try {
            // No need to worry about "reupgrading" as VDSM will silently ignore
            // the request.
            runVdsCommand(VDSCommandType.UpgradeStoragePool, new UpgradeStoragePoolVDSCommandParameters(spId, targetFormat));
        } catch (VdcBLLException e) {
            log.warn("Upgrade process of Storage Pool '{}' has encountered a problem due to following reason: {}", spId, e.getMessage());
            AuditLogDirector.log(this, AuditLogType.UPGRADE_STORAGE_POOL_ENCOUNTERED_PROBLEMS);
        }
    }
    runSynchronizeOperation(new RefreshPoolSingleAsyncOperationFactory(), new ArrayList<Guid>());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!checkStoragePool()) {
        return false;
    }
    if (!StringUtils.equals(getOldStoragePool().getName(), getStoragePool().getName()) && !isStoragePoolUnique(getStoragePool().getName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NAME_ALREADY_EXIST);
        return false;
    }
    List<StorageDomainStatic> poolDomains = getStorageDomainStaticDAO().getAllForStoragePool(getStoragePool().getId());
    if (getOldStoragePool().isLocal() != getStoragePool().isLocal() && !poolDomains.isEmpty()) {
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ERROR_CANNOT_CHANGE_STORAGE_POOL_TYPE_WITH_DOMAINS.toString());
        return false;
    }
    if (!checkStoragePoolNameLengthValid()) {
        return false;
    }
    if (!getOldStoragePool().getcompatibility_version().equals(getStoragePool().getcompatibility_version())) {
        if (!isStoragePoolVersionSupported()) {
            addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
            return false;
        } else // decreasing of compatibility version is allowed under conditions
        if (getStoragePool().getcompatibility_version().compareTo(getOldStoragePool().getcompatibility_version()) < 0) {
            if (!poolDomains.isEmpty() && isDowngradeChangesFormats(poolDomains)) {
                return false;
            }
            List<Network> networks = getNetworkDAO().getAllForDataCenter(getStoragePoolId());
            if (networks.size() == 1) {
                Network network = networks.get(0);
                NetworkValidator validator = getNetworkValidator(network);
                validator.setDataCenter(getStoragePool());
                if (!NetworkUtils.isManagementNetwork(network) || !validator.canNetworkCompatabilityBeDecreased()) {
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION);
                    return false;
                }
            } else if (networks.size() > 1) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION);
                return false;
            }
        } else {
            // Check all clusters has at least the same compatibility version.
            if (!checkAllClustersLevel()) {
                return false;
            }
        }
    }
    StoragePoolValidator validator = createStoragePoolValidator();
    return validate(validator.isNotLocalfsWithDefaultCluster());
}
#method_after
@Override
protected boolean canDoAction() {
    if (!checkStoragePool()) {
        return false;
    }
    // Name related validations
    if (!StringUtils.equals(getOldStoragePool().getName(), getStoragePool().getName()) && !isStoragePoolUnique(getStoragePool().getName())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NAME_ALREADY_EXIST);
    }
    if (!checkStoragePoolNameLengthValid()) {
        return false;
    }
    List<StorageDomainStatic> poolDomains = getStorageDomainStaticDAO().getAllForStoragePool(getStoragePool().getId());
    if (getOldStoragePool().isLocal() != getStoragePool().isLocal() && !poolDomains.isEmpty()) {
        return failCanDoAction(VdcBllMessages.ERROR_CANNOT_CHANGE_STORAGE_POOL_TYPE_WITH_DOMAINS);
    }
    if (!getOldStoragePool().getCompatibilityVersion().equals(getStoragePool().getCompatibilityVersion())) {
        if (!isStoragePoolVersionSupported()) {
            return failCanDoAction(VersionSupport.getUnsupportedVersionMessage());
        } else // decreasing of compatibility version is allowed under conditions
        if (getStoragePool().getCompatibilityVersion().compareTo(getOldStoragePool().getCompatibilityVersion()) < 0) {
            if (!poolDomains.isEmpty() && !isCompatibilityVersionChangeAllowedForDomains(poolDomains)) {
                return false;
            }
            List<Network> networks = getNetworkDAO().getAllForDataCenter(getStoragePoolId());
            if (networks.size() == 1) {
                Network network = networks.get(0);
                NetworkValidator validator = getNetworkValidator(network);
                validator.setDataCenter(getStoragePool());
                if (!NetworkUtils.isManagementNetwork(network) || !validator.canNetworkCompatabilityBeDecreased()) {
                    return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION);
                }
            } else if (networks.size() > 1) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION);
            }
        } else if (!checkAllClustersLevel()) {
            // Check all clusters has at least the same compatibility version.
            return false;
        }
    }
    StoragePoolValidator validator = createStoragePoolValidator();
    return validate(validator.isNotLocalfsWithDefaultCluster());
}
#end_block

#method_before
protected boolean checkAllClustersLevel() {
    boolean returnValue = true;
    List<VDSGroup> clusters = getVdsGroupDAO().getAllForStoragePool(getStoragePool().getId());
    List<String> lowLevelClusters = new ArrayList<String>();
    for (VDSGroup cluster : clusters) {
        if (getStoragePool().getcompatibility_version().compareTo(cluster.getcompatibility_version()) > 0) {
            lowLevelClusters.add(cluster.getName());
        }
    }
    if (!lowLevelClusters.isEmpty()) {
        returnValue = false;
        getReturnValue().getCanDoActionMessages().add(String.format("$ClustersList %1$s", StringUtils.join(lowLevelClusters, ",")));
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS.toString());
    }
    return returnValue;
}
#method_after
protected boolean checkAllClustersLevel() {
    boolean returnValue = true;
    List<VDSGroup> clusters = getVdsGroupDAO().getAllForStoragePool(getStoragePool().getId());
    List<String> lowLevelClusters = new ArrayList<String>();
    for (VDSGroup cluster : clusters) {
        if (getStoragePool().getCompatibilityVersion().compareTo(cluster.getCompatibilityVersion()) > 0) {
            lowLevelClusters.add(cluster.getName());
        }
    }
    if (!lowLevelClusters.isEmpty()) {
        returnValue = false;
        getReturnValue().getCanDoActionMessages().add(String.format("$ClustersList %1$s", StringUtils.join(lowLevelClusters, ",")));
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS.toString());
    }
    return returnValue;
}
#end_block

#method_before
protected boolean isStoragePoolVersionSupported() {
    return VersionSupport.checkVersionSupported(getStoragePool().getcompatibility_version());
}
#method_after
protected boolean isStoragePoolVersionSupported() {
    return VersionSupport.checkVersionSupported(getStoragePool().getCompatibilityVersion());
}
#end_block

#method_before
protected void spyCommand(StoragePoolManagementParameter params) {
    UpdateStoragePoolCommand<StoragePoolManagementParameter> realCommand = new UpdateStoragePoolCommand<StoragePoolManagementParameter>(params);
    StoragePoolValidator validator = spy(realCommand.createStoragePoolValidator());
    doReturn(vdsGroupDao).when(validator).getVdsGroupDao();
    cmd = spy(realCommand);
    doReturn(10).when(cmd).getStoragePoolNameSizeLimit();
    doReturn(createVersionSet().contains(cmd.getStoragePool().getcompatibility_version())).when(cmd).isStoragePoolVersionSupported();
    doReturn(spDao).when(cmd).getStoragePoolDAO();
    doReturn(sdDao).when(cmd).getStorageDomainStaticDAO();
    doReturn(vdsGroupDao).when(cmd).getVdsGroupDAO();
    doReturn(vdsDao).when(cmd).getVdsDAO();
    doReturn(networkDao).when(cmd).getNetworkDAO();
    doReturn(validator).when(cmd).createStoragePoolValidator();
    doReturn(true).when(sdList).isEmpty();
    mcr.mockConfigValue(ConfigValues.AutoRegistrationDefaultVdsGroupID, DEFAULT_VDS_GROUP_ID);
    mcr.mockConfigValue(ConfigValues.ManagementNetwork, "test_mgmt");
    mcr.mockConfigValue(ConfigValues.NonVmNetworkSupported, false);
    mcr.mockConfigValue(ConfigValues.MTUOverrideSupported, false);
}
#method_after
protected void spyCommand(StoragePoolManagementParameter params) {
    UpdateStoragePoolCommand<StoragePoolManagementParameter> realCommand = new UpdateStoragePoolCommand<StoragePoolManagementParameter>(params);
    StoragePoolValidatorForTesting poolValidator = spy(new StoragePoolValidatorForTesting(params.getStoragePool()));
    doReturn(vdsGroupDao).when(poolValidator).getVdsGroupDao();
    cmd = spy(realCommand);
    doReturn(10).when(cmd).getStoragePoolNameSizeLimit();
    doReturn(createVersionSet().contains(cmd.getStoragePool().getCompatibilityVersion())).when(cmd).isStoragePoolVersionSupported();
    doReturn(spDao).when(cmd).getStoragePoolDAO();
    doReturn(sdDao).when(cmd).getStorageDomainStaticDAO();
    doReturn(vdsGroupDao).when(cmd).getVdsGroupDAO();
    doReturn(vdsDao).when(cmd).getVdsDAO();
    doReturn(networkDao).when(cmd).getNetworkDAO();
    doReturn(poolValidator).when(cmd).createStoragePoolValidator();
    doReturn(true).when(sdList).isEmpty();
    mcr.mockConfigValue(ConfigValues.AutoRegistrationDefaultVdsGroupID, DEFAULT_VDS_GROUP_ID);
    mcr.mockConfigValue(ConfigValues.ManagementNetwork, "test_mgmt");
    mcr.mockConfigValue(ConfigValues.NonVmNetworkSupported, false);
    mcr.mockConfigValue(ConfigValues.MTUOverrideSupported, false);
    mcr.mockConfigValue(ConfigValues.MixedDomainTypesInDataCenter, Version.v3_0, false);
    mcr.mockConfigValue(ConfigValues.MixedDomainTypesInDataCenter, Version.v3_1, false);
    mcr.mockConfigValue(ConfigValues.MixedDomainTypesInDataCenter, Version.v3_2, false);
    mcr.mockConfigValue(ConfigValues.MixedDomainTypesInDataCenter, Version.v3_3, false);
    mcr.mockConfigValue(ConfigValues.MixedDomainTypesInDataCenter, Version.v3_4, true);
    mcr.mockConfigValue(ConfigValues.MixedDomainTypesInDataCenter, Version.v3_5, true);
    mcr.mockConfigValue(ConfigValues.PosixStorageEnabled, Version.v3_1, false);
    mcr.mockConfigValue(ConfigValues.GlusterFsStorageEnabled, Version.v3_1, false);
}
#end_block

#method_before
@Test
public void testValidateAllClustersLevel() {
    storagePoolWithVersionHigherThanCluster();
    List<VDSGroup> clusterList = createClusterList();
    // Create new supported cluster.
    VDSGroup secondCluster = new VDSGroup();
    secondCluster.setcompatibility_version(VERSION_1_2);
    secondCluster.setName("secondCluster");
    clusterList.add(secondCluster);
    // Create new unsupported cluster.
    VDSGroup thirdCluster = new VDSGroup();
    thirdCluster.setcompatibility_version(VERSION_1_1);
    thirdCluster.setName("thirdCluster");
    clusterList.add(thirdCluster);
    // Test upgrade
    when(vdsGroupDao.getAllForStoragePool(any(Guid.class))).thenReturn(clusterList);
    assertFalse(cmd.checkAllClustersLevel());
    List<String> messages = cmd.getReturnValue().getCanDoActionMessages();
    assertTrue(messages.contains(VdcBllMessages.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS.toString()));
    assertTrue(messages.get(0).contains("firstCluster"));
    assertFalse(messages.get(0).contains("secondCluster"));
    assertTrue(messages.get(0).contains("thirdCluster"));
}
#method_after
@Test
public void testValidateAllClustersLevel() {
    storagePoolWithVersionHigherThanCluster();
    List<VDSGroup> clusterList = createClusterList();
    // Create new supported cluster.
    VDSGroup secondCluster = new VDSGroup();
    secondCluster.setCompatibilityVersion(VERSION_1_2);
    secondCluster.setName("secondCluster");
    clusterList.add(secondCluster);
    // Create new unsupported cluster.
    VDSGroup thirdCluster = new VDSGroup();
    thirdCluster.setCompatibilityVersion(VERSION_1_1);
    thirdCluster.setName("thirdCluster");
    clusterList.add(thirdCluster);
    // Test upgrade
    when(vdsGroupDao.getAllForStoragePool(any(Guid.class))).thenReturn(clusterList);
    assertFalse(cmd.checkAllClustersLevel());
    List<String> messages = cmd.getReturnValue().getCanDoActionMessages();
    assertTrue(messages.contains(VdcBllMessages.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS.toString()));
    assertTrue(messages.get(0).contains("firstCluster"));
    assertFalse(messages.get(0).contains("secondCluster"));
    assertTrue(messages.get(0).contains("thirdCluster"));
}
#end_block

#method_before
@Test
public void cantDowngradeIfImpliesFormatDowngrading() {
    // Set the current compatibility to be 3.5, and the new to be 3.0. downgrading to 3.0 will cause format downgrading.
    cmd.getStoragePool().setcompatibility_version(Version.v3_0);
    StoragePool pool = createBasicPool();
    pool.setcompatibility_version(Version.v3_5);
    when(spDao.get(any(Guid.class))).thenReturn(pool);
    // Add domains to the storage domains list. (cancel the mock)
    StorageDomainStatic sdStatic = new StorageDomainStatic();
    sdStatic.setStorageFormat(StorageFormatType.V3);
    List<StorageDomainStatic> sdListWithDomains = new ArrayList<>();
    sdListWithDomains.add(sdStatic);
    when(sdDao.getAllForStoragePool(any(Guid.class))).thenReturn(sdListWithDomains);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void cantDowngradeIfImpliesFormatDowngrading() {
    storagePoolVersion35();
    // Set the current compatibility to be 3.5, and the new to be 3.0. downgrading to 3.0 will cause format downgrading.
    cmd.getStoragePool().setCompatibilityVersion(Version.v3_0);
    // Add domains to the storage domains list. (cancel the mock)
    StorageDomain sd = createStorageDomain(StorageFormatType.V3, StorageType.UNKNOWN);
    setAttachedDomains(sd);
    canDoActionFailed(VdcBllMessages.ACTION_TYPE_FAILED_DECREASING_COMPATIBILITY_VERSION_CAUSES_STORAGE_FORMAT_DOWNGRADING);
}
#end_block

#method_before
private static StoragePool createNewStoragePool() {
    StoragePool pool = createBasicPool();
    pool.setIsLocal(false);
    pool.setcompatibility_version(VERSION_1_1);
    return pool;
}
#method_after
private static StoragePool createNewStoragePool() {
    StoragePool pool = createBasicPool();
    pool.setIsLocal(false);
    pool.setCompatibilityVersion(VERSION_1_1);
    return pool;
}
#end_block

#method_before
private static StoragePool createDefaultStoragePool() {
    StoragePool pool = createBasicPool();
    pool.setIsLocal(true);
    pool.setcompatibility_version(VERSION_1_1);
    return pool;
}
#method_after
private static StoragePool createDefaultStoragePool() {
    StoragePool pool = createBasicPool();
    pool.setIsLocal(true);
    pool.setCompatibilityVersion(VERSION_1_1);
    return pool;
}
#end_block

#method_before
private static StoragePool createLowerVersionStoragePool() {
    StoragePool pool = createBasicPool();
    pool.setIsLocal(true);
    pool.setcompatibility_version(VERSION_1_0);
    return pool;
}
#method_after
private static StoragePool createLowerVersionStoragePool() {
    StoragePool pool = createBasicPool();
    pool.setIsLocal(true);
    pool.setCompatibilityVersion(VERSION_1_0);
    return pool;
}
#end_block

#method_before
private static StoragePool createBasicPool() {
    StoragePool pool = new StoragePool();
    pool.setId(Guid.newGuid());
    pool.setName("Default");
    return pool;
}
#method_after
private static StoragePool createBasicPool() {
    StoragePool pool = new StoragePool();
    pool.setId(Guid.newGuid());
    pool.setName("Default");
    pool.setCompatibilityVersion(Version.v3_5);
    return pool;
}
#end_block

#method_before
private static StoragePool createHigherVersionStoragePool() {
    StoragePool pool = createBasicPool();
    pool.setIsLocal(true);
    pool.setcompatibility_version(VERSION_1_2);
    return pool;
}
#method_after
private static StoragePool createHigherVersionStoragePool() {
    StoragePool pool = createBasicPool();
    pool.setIsLocal(true);
    pool.setCompatibilityVersion(VERSION_1_2);
    return pool;
}
#end_block

#method_before
private static StoragePool createInvalidVersionStoragePool() {
    StoragePool pool = createBasicPool();
    pool.setIsLocal(true);
    pool.setcompatibility_version(VERSION_2_0);
    return pool;
}
#method_after
private static StoragePool createInvalidVersionStoragePool() {
    StoragePool pool = createBasicPool();
    pool.setIsLocal(true);
    pool.setCompatibilityVersion(VERSION_2_0);
    return pool;
}
#end_block

#method_before
private static List<VDSGroup> createClusterList() {
    List<VDSGroup> clusters = new ArrayList<VDSGroup>();
    VDSGroup cluster = new VDSGroup();
    cluster.setcompatibility_version(VERSION_1_0);
    cluster.setName("firstCluster");
    clusters.add(cluster);
    return clusters;
}
#method_after
private static List<VDSGroup> createClusterList() {
    List<VDSGroup> clusters = new ArrayList<VDSGroup>();
    VDSGroup cluster = new VDSGroup();
    cluster.setCompatibilityVersion(VERSION_1_0);
    cluster.setName("firstCluster");
    clusters.add(cluster);
    return clusters;
}
#end_block

#method_before
private void addDefaultClusterToPool() {
    VDSGroup defaultCluster = new VDSGroup();
    defaultCluster.setcompatibility_version(VERSION_1_1);
    defaultCluster.setId(DEFAULT_VDS_GROUP_ID);
    List<VDSGroup> clusters = new ArrayList<VDSGroup>();
    clusters.add(defaultCluster);
    when(vdsGroupDao.getAllForStoragePool(any(Guid.class))).thenReturn(clusters);
}
#method_after
private void addDefaultClusterToPool() {
    VDSGroup defaultCluster = new VDSGroup();
    defaultCluster.setCompatibilityVersion(VERSION_1_1);
    defaultCluster.setId(DEFAULT_VDS_GROUP_ID);
    List<VDSGroup> clusters = new ArrayList<VDSGroup>();
    clusters.add(defaultCluster);
    when(vdsGroupDao.getAllForStoragePool(any(Guid.class))).thenReturn(clusters);
}
#end_block

#method_before
private void addNonDefaultClusterToPool() {
    VDSGroup defaultCluster = new VDSGroup();
    defaultCluster.setcompatibility_version(VERSION_1_1);
    defaultCluster.setId(NON_DEFAULT_VDS_GROUP_ID);
    List<VDSGroup> clusters = new ArrayList<VDSGroup>();
    clusters.add(defaultCluster);
    when(vdsGroupDao.getAllForStoragePool(any(Guid.class))).thenReturn(clusters);
}
#method_after
private void addNonDefaultClusterToPool() {
    VDSGroup defaultCluster = new VDSGroup();
    defaultCluster.setCompatibilityVersion(VERSION_1_1);
    defaultCluster.setId(NON_DEFAULT_VDS_GROUP_ID);
    List<VDSGroup> clusters = new ArrayList<VDSGroup>();
    clusters.add(defaultCluster);
    when(vdsGroupDao.getAllForStoragePool(any(Guid.class))).thenReturn(clusters);
}
#end_block

#method_before
private static StoragePool getStoragePool() {
    StoragePool storagePool = new StoragePool();
    storagePool.setId(Guid.newGuid());
    storagePool.setcompatibility_version(Version.v3_5);
    return storagePool;
}
#method_after
private static StoragePool getStoragePool() {
    StoragePool storagePool = new StoragePool();
    storagePool.setId(Guid.newGuid());
    storagePool.setCompatibilityVersion(Version.v3_5);
    return storagePool;
}
#end_block

#method_before
@Before
public void setUp() {
    Guid vdsId = Guid.newGuid();
    spId = Guid.newGuid();
    connId = Guid.newGuid();
    sd = new StorageDomainStatic();
    sd.setId(Guid.newGuid());
    sd.setStorageType(StorageType.NFS);
    sd.setStorageDomainType(StorageDomainType.Data);
    sd.setStorageName("newStorage");
    sd.setStorageFormat(StorageFormatType.V3);
    sd.setStorage(connId.toString());
    vds = new VDS();
    vds.setId(vdsId);
    vds.setStatus(VDSStatus.Up);
    vds.setStoragePoolId(spId);
    when(vdsDao.get(vdsId)).thenReturn(vds);
    sp = new StoragePool();
    sp.setId(spId);
    sp.setcompatibility_version(Version.v3_5);
    when(spDao.get(spId)).thenReturn(sp);
    StorageServerConnections conn = new StorageServerConnections();
    conn.setid(connId.toString());
    conn.setstorage_type(StorageType.NFS);
    when(sscDao.get(connId.toString())).thenReturn(conn);
    params = new StorageDomainManagementParameter(sd);
    params.setVdsId(vdsId);
    cmd = spy(new AddStorageDomainCommon<>(params));
    doReturn(vdsDao).when(cmd).getVdsDAO();
    doReturn(sdDao).when(cmd).getStorageDomainDAO();
    doReturn(sdsDao).when(cmd).getStorageDomainStaticDAO();
    doReturn(spDao).when(cmd).getStoragePoolDAO();
    doReturn(sscDao).when(cmd).getStorageServerConnectionDAO();
}
#method_after
@Before
public void setUp() {
    Guid vdsId = Guid.newGuid();
    spId = Guid.newGuid();
    connId = Guid.newGuid();
    sd = new StorageDomainStatic();
    sd.setId(Guid.newGuid());
    sd.setStorageType(StorageType.NFS);
    sd.setStorageDomainType(StorageDomainType.Data);
    sd.setStorageName("newStorage");
    sd.setStorageFormat(StorageFormatType.V3);
    sd.setStorage(connId.toString());
    vds = new VDS();
    vds.setId(vdsId);
    vds.setStatus(VDSStatus.Up);
    vds.setStoragePoolId(spId);
    when(vdsDao.get(vdsId)).thenReturn(vds);
    sp = new StoragePool();
    sp.setId(spId);
    sp.setCompatibilityVersion(Version.v3_5);
    when(spDao.get(spId)).thenReturn(sp);
    StorageServerConnections conn = new StorageServerConnections();
    conn.setid(connId.toString());
    conn.setstorage_type(StorageType.NFS);
    when(sscDao.get(connId.toString())).thenReturn(conn);
    params = new StorageDomainManagementParameter(sd);
    params.setVdsId(vdsId);
    cmd = spy(new AddStorageDomainCommon<>(params));
    doReturn(vdsDao).when(cmd).getVdsDAO();
    doReturn(sdDao).when(cmd).getStorageDomainDAO();
    doReturn(sdsDao).when(cmd).getStorageDomainStaticDAO();
    doReturn(spDao).when(cmd).getStoragePoolDAO();
    doReturn(sscDao).when(cmd).getStorageServerConnectionDAO();
}
#end_block

#method_before
@Test
public void canDoActionSucceedsInitFormatDataDomain30() {
    sd.setStorageFormat(null);
    sp.setcompatibility_version(Version.v3_0);
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(cmd);
    assertEquals("Format not initialized correctly", StorageFormatType.V1, sd.getStorageFormat());
}
#method_after
@Test
public void canDoActionSucceedsInitFormatDataDomain30() {
    sd.setStorageFormat(null);
    sp.setCompatibilityVersion(Version.v3_0);
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(cmd);
    assertEquals("Format not initialized correctly", StorageFormatType.V1, sd.getStorageFormat());
}
#end_block

#method_before
@Test
public void canDoActionFailsBlockIso() {
    sd.setStorageDomainType(StorageDomainType.ISO);
    sd.setStorageType(StorageType.FCP);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
}
#method_after
@Test
public void canDoActionFailsBlockIso() {
    sd.setStorageDomainType(StorageDomainType.ISO);
    sd.setStorageType(StorageType.FCP);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_DOMAIN_TYPE_CAN_BE_CREATED_ONLY_ON_SPECIFIC_STORAGE_DOMAINS);
}
#end_block

#method_before
@Test
public void canDoActionFailsUnsupportedFormat() {
    sp.setcompatibility_version(Version.v3_0);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL);
}
#method_after
@Test
public void canDoActionFailsUnsupportedFormat() {
    sp.setCompatibilityVersion(Version.v3_0);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL);
}
#end_block

#method_before
private static StoragePool createStoragePool(Version compatibilityVersion) {
    StoragePool pool = new StoragePool();
    pool.setName("DefaultStoragePool");
    pool.setId(Guid.newGuid());
    pool.setIsLocal(false);
    pool.setcompatibility_version(compatibilityVersion);
    return pool;
}
#method_after
private static StoragePool createStoragePool(Version compatibilityVersion) {
    StoragePool pool = new StoragePool();
    pool.setName("DefaultStoragePool");
    pool.setId(Guid.newGuid());
    pool.setIsLocal(false);
    pool.setCompatibilityVersion(compatibilityVersion);
    return pool;
}
#end_block

#method_before
protected void updateStoragePoolMasterDomainVersionInDiffTransaction() {
    executeInScope(TransactionScopeOption.Suppress, new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            int master_domain_version = getStoragePoolDAO().increaseStoragePoolMasterVersion(getStoragePool().getId());
            getStoragePool().setmaster_domain_version(master_domain_version);
            return null;
        }
    });
}
#method_after
protected void updateStoragePoolMasterDomainVersionInDiffTransaction() {
    executeInScope(TransactionScopeOption.Suppress, new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            int master_domain_version = getStoragePoolDAO().increaseStoragePoolMasterVersion(getStoragePool().getId());
            getStoragePool().setMasterDomainVersion(master_domain_version);
            return null;
        }
    });
}
#end_block

#method_before
private void removeEntitiesFromStorageDomain(final List<VM> vmsForStorageDomain, final List<VmTemplate> vmTemplatesForStorageDomain, final List<DiskImage> disksForStorageDomain, final Guid storageDomainId) {
    if (!vmsForStorageDomain.isEmpty() || !vmTemplatesForStorageDomain.isEmpty() || !disksForStorageDomain.isEmpty()) {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Object>() {

            @Override
            public Object runInTransaction() {
                for (VM vm : vmsForStorageDomain) {
                    removeEntityLeftOver(vm.getId(), vm.getName(), storageDomainId);
                    getUnregisteredOVFDataDao().saveOVFData(new OvfEntityData(vm.getId(), vm.getName(), VmEntityType.VM, vm.getClusterArch(), vm.getVdsGroupCompatibilityVersion(), storageDomainId, null, null));
                }
                for (VmTemplate vmTemplate : vmTemplatesForStorageDomain) {
                    removeEntityLeftOver(vmTemplate.getId(), vmTemplate.getName(), storageDomainId);
                    getUnregisteredOVFDataDao().saveOVFData(new OvfEntityData(vmTemplate.getId(), vmTemplate.getName(), VmEntityType.TEMPLATE, vmTemplate.getClusterArch(), getVdsGroupDAO().get(vmTemplate.getVdsGroupId()).getcompatibility_version(), storageDomainId, null, null));
                }
                getStorageDomainDAO().removeEntitesFromStorageDomain(storageDomainId);
                return null;
            }
        });
    }
}
#method_after
private void removeEntitiesFromStorageDomain(final List<VM> vmsForStorageDomain, final List<VmTemplate> vmTemplatesForStorageDomain, final List<DiskImage> disksForStorageDomain, final Guid storageDomainId) {
    if (!vmsForStorageDomain.isEmpty() || !vmTemplatesForStorageDomain.isEmpty() || !disksForStorageDomain.isEmpty()) {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Object>() {

            @Override
            public Object runInTransaction() {
                for (VM vm : vmsForStorageDomain) {
                    removeEntityLeftOver(vm.getId(), vm.getName(), storageDomainId);
                    getUnregisteredOVFDataDao().saveOVFData(new OvfEntityData(vm.getId(), vm.getName(), VmEntityType.VM, vm.getClusterArch(), vm.getVdsGroupCompatibilityVersion(), storageDomainId, null, null));
                }
                for (VmTemplate vmTemplate : vmTemplatesForStorageDomain) {
                    removeEntityLeftOver(vmTemplate.getId(), vmTemplate.getName(), storageDomainId);
                    getUnregisteredOVFDataDao().saveOVFData(new OvfEntityData(vmTemplate.getId(), vmTemplate.getName(), VmEntityType.TEMPLATE, vmTemplate.getClusterArch(), getVdsGroupDAO().get(vmTemplate.getVdsGroupId()).getCompatibilityVersion(), storageDomainId, null, null));
                }
                getStorageDomainDAO().removeEntitesFromStorageDomain(storageDomainId);
                return null;
            }
        });
    }
}
#end_block

#method_before
protected void calcStoragePoolStatusByDomainsStatus() {
    List<StorageDomain> domains = getStorageDomainDAO().getAllForStoragePool(getStoragePool().getId());
    // set masterDomain to the first element of domains with type=master, or null if non have this type.
    StorageDomain masterDomain = LinqUtils.firstOrNull(domains, new Predicate<StorageDomain>() {

        @Override
        public boolean eval(StorageDomain a) {
            return a.getStorageDomainType() == StorageDomainType.Master;
        }
    });
    // if no master then Uninitialized
    // if master not active maintenance
    StoragePoolStatus newStatus = (masterDomain == null) ? StoragePoolStatus.Uninitialized : (masterDomain.getStatus() != null && masterDomain.getStatus() == StorageDomainStatus.Maintenance) ? StoragePoolStatus.Maintenance : (masterDomain.getStatus() != null && masterDomain.getStatus() == StorageDomainStatus.Active) ? StoragePoolStatus.Up : StoragePoolStatus.NonResponsive;
    if (newStatus != getStoragePool().getStatus()) {
        getCompensationContext().snapshotEntity(getStoragePool());
        getStoragePool().setStatus(newStatus);
        StoragePool poolFromDb = getStoragePoolDAO().get(getStoragePool().getId());
        if ((getStoragePool().getspm_vds_id() == null && poolFromDb.getspm_vds_id() != null) || (getStoragePool().getspm_vds_id() != null && !getStoragePool().getspm_vds_id().equals(poolFromDb.getspm_vds_id()))) {
            getStoragePool().setspm_vds_id(poolFromDb.getspm_vds_id());
        }
        if (getStoragePool().getStatus() == StoragePoolStatus.Uninitialized) {
            getStoragePool().setspm_vds_id(null);
        }
        executeInScope(TransactionScopeOption.Required, new TransactionMethod<StoragePool>() {

            @Override
            public StoragePool runInTransaction() {
                getStoragePoolDAO().update(getStoragePool());
                return null;
            }
        });
        StoragePoolStatusHandler.poolStatusChanged(getStoragePool().getId(), getStoragePool().getStatus());
    }
}
#method_after
protected void calcStoragePoolStatusByDomainsStatus() {
    List<StorageDomain> domains = getStorageDomainDAO().getAllForStoragePool(getStoragePool().getId());
    // set masterDomain to the first element of domains with type=master, or null if non have this type.
    StorageDomain masterDomain = LinqUtils.firstOrNull(domains, new Predicate<StorageDomain>() {

        @Override
        public boolean eval(StorageDomain a) {
            return a.getStorageDomainType() == StorageDomainType.Master;
        }
    });
    // if no master then Uninitialized
    // if master not active maintenance
    StoragePoolStatus newStatus = (masterDomain == null) ? StoragePoolStatus.Uninitialized : (masterDomain.getStatus() != null && masterDomain.getStatus() == StorageDomainStatus.Maintenance) ? StoragePoolStatus.Maintenance : (masterDomain.getStatus() != null && masterDomain.getStatus() == StorageDomainStatus.Active) ? StoragePoolStatus.Up : StoragePoolStatus.NonResponsive;
    if (newStatus != getStoragePool().getStatus()) {
        getCompensationContext().snapshotEntity(getStoragePool());
        getStoragePool().setStatus(newStatus);
        StoragePool poolFromDb = getStoragePoolDAO().get(getStoragePool().getId());
        if ((getStoragePool().getSpmVdsId() == null && poolFromDb.getSpmVdsId() != null) || (getStoragePool().getSpmVdsId() != null && !getStoragePool().getSpmVdsId().equals(poolFromDb.getSpmVdsId()))) {
            getStoragePool().setSpmVdsId(poolFromDb.getSpmVdsId());
        }
        if (getStoragePool().getStatus() == StoragePoolStatus.Uninitialized) {
            getStoragePool().setSpmVdsId(null);
        }
        executeInScope(TransactionScopeOption.Required, new TransactionMethod<StoragePool>() {

            @Override
            public StoragePool runInTransaction() {
                getStoragePoolDAO().update(getStoragePool());
                return null;
            }
        });
        StoragePoolStatusHandler.poolStatusChanged(getStoragePool().getId(), getStoragePool().getStatus());
    }
}
#end_block

#method_before
private void networksUsedTest(Network net, boolean vmsNotUsingNetwork, boolean templatesNotUsingNetwork, Matcher<ValidationResult> matcher) {
    NetworkValidator networkValidator = mock(NetworkValidator.class);
    when(validator.getValidator(net)).thenReturn(networkValidator);
    when(networkValidator.networkNotUsedByVms()).thenReturn(createValidationResult(vmsNotUsingNetwork));
    when(networkValidator.networkNotUsedByTemplates()).thenReturn(createValidationResult(templatesNotUsingNetwork));
    assertThat(validator.providerNetworksNotUsed(), matcher);
}
#method_after
private void networksUsedTest(boolean vmsNotUsingNetwork, boolean templatesNotUsingNetwork, Matcher<ValidationResult> matcher) {
    NetworkValidator networkValidator = mock(NetworkValidator.class);
    for (Network network : networks) {
        when(validator.getValidator(network)).thenReturn(networkValidator);
    }
    when(networkValidator.networkNotUsedByVms()).thenReturn(createValidationResult(vmsNotUsingNetwork));
    when(networkValidator.networkNotUsedByTemplates()).thenReturn(createValidationResult(templatesNotUsingNetwork));
    assertThat(validator.providerNetworksNotUsed(), matcher);
}
#end_block

#method_before
@Test
public void networksNotUsedByVmsNorTemplates() throws Exception {
    Network net = mockNetwork();
    networksUsedTest(net, true, true, isValid());
}
#method_after
@Test
public void networksNotUsedByVmsNorTemplates() throws Exception {
    mockNetwork();
    networksUsedTest(true, true, isValid());
}
#end_block

#method_before
@Test
public void networksUsedByAVm() throws Exception {
    Network net = mockNetwork();
    networksUsedTest(net, false, true, both(failsWith(VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_NETWORKS_USED_ONCE)).and(replacements(hasItem(containsString(net.getName())))));
}
#method_after
@Test
public void networksUsedByAVm() throws Exception {
    Network net = mockNetwork();
    networksUsedTest(false, true, both(failsWith(VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_NETWORKS_USED_ONCE)).and(replacements(hasItem(containsString(net.getName())))));
}
#end_block

#method_before
@Test
public void networksUsedByATemplate() throws Exception {
    Network net = mockNetwork();
    networksUsedTest(net, false, true, both(failsWith(VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_NETWORKS_USED_ONCE)).and(replacements(hasItem(containsString(net.getName())))));
}
#method_after
@Test
public void networksUsedByATemplate() throws Exception {
    Network net = mockNetwork();
    networksUsedTest(false, true, both(failsWith(VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_NETWORKS_USED_ONCE)).and(replacements(hasItem(containsString(net.getName())))));
}
#end_block

#method_before
@Before
public void setup() {
    // spy on attempts to access the database
    validator = spy(new VnicProfileValidator(vnicProfile));
    doReturn(dbFacade).when(validator).getDbFacade();
    // mock some commonly used DAOs
    when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao);
    when(dbFacade.getNetworkDao()).thenReturn(networkDao);
    when(dbFacade.getQosDao()).thenReturn(networkQosDao);
    when(dbFacade.getVmDao()).thenReturn(vmDao);
    // mock their getters
    when(vnicProfileDao.get(any(Guid.class))).thenReturn(vnicProfile);
    when(vnicProfileDao.getAllForNetwork(any(Guid.class))).thenReturn(vnicProfiles);
}
#method_after
@Before
public void setup() {
    // spy on attempts to access the database
    validator = spy(new VnicProfileValidator(vnicProfile));
    doReturn(dbFacade).when(validator).getDbFacade();
    // mock some commonly used DAOs
    when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao);
    when(dbFacade.getNetworkDao()).thenReturn(networkDao);
    when(dbFacade.getNetworkQosDao()).thenReturn(networkQosDao);
    when(dbFacade.getVmDao()).thenReturn(vmDao);
    // mock their getters
    when(vnicProfileDao.get(any(Guid.class))).thenReturn(vnicProfile);
    when(vnicProfileDao.getAllForNetwork(any(Guid.class))).thenReturn(vnicProfiles);
}
#end_block

#method_before
public ValidationResult providerNetworksNotUsed() {
    List<Network> networksInUse = new ArrayList<Network>();
    List<Network> networks = getNetworkDao().getAllForProvider(provider.getId());
    for (Network network : networks) {
        NetworkValidator networkValidator = getValidator(network);
        if (!networkValidator.networkNotUsedByVms().isValid() || !networkValidator.networkNotUsedByTemplates().isValid()) {
            networksInUse.add(network);
        }
    }
    return networksInUse.isEmpty() ? ValidationResult.VALID : new ValidationResult(providerNetworkUsedValidationMessage(networksInUse.size()), ReplacementUtils.replaceWithNameable("NETWORK_NAMES", networksInUse));
}
#method_after
public ValidationResult providerNetworksNotUsed() {
    List<Network> networksInUse = new ArrayList<>();
    List<Network> networks = getNetworkDao().getAllForProvider(provider.getId());
    for (Network network : networks) {
        NetworkValidator networkValidator = getValidator(network);
        if (!networkValidator.networkNotUsedByVms().isValid() || !networkValidator.networkNotUsedByTemplates().isValid()) {
            networksInUse.add(network);
        }
    }
    return networksInUse.isEmpty() ? ValidationResult.VALID : new ValidationResult(getProviderNetworkUsedValidationMessage(networksInUse.size()), ReplacementUtils.replaceWithNameable("NETWORK_NAMES", networksInUse));
}
#end_block

#method_before
public ValidationResult vmNetworkSetCorrectly() {
    return network.isVmNetwork() || FeatureSupported.nonVmNetwork(getDataCenter().getcompatibility_version()) ? ValidationResult.VALID : new ValidationResult(VdcBllMessages.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL);
}
#method_after
public ValidationResult vmNetworkSetCorrectly() {
    return ValidationResult.failWith(VdcBllMessages.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL).unless(network.isVmNetwork() || FeatureSupported.nonVmNetwork(getDataCenter().getCompatibilityVersion()));
}
#end_block

#method_before
public ValidationResult stpForVmNetworkOnly() {
    return network.isVmNetwork() || !network.getStp() ? ValidationResult.VALID : new ValidationResult(VdcBllMessages.NON_VM_NETWORK_CANNOT_SUPPORT_STP);
}
#method_after
public ValidationResult stpForVmNetworkOnly() {
    return ValidationResult.failWith(VdcBllMessages.NON_VM_NETWORK_CANNOT_SUPPORT_STP).unless(network.isVmNetwork() || !network.getStp());
}
#end_block

#method_before
public ValidationResult mtuValid() {
    return network.getMtu() == 0 || FeatureSupported.mtuSpecification(getDataCenter().getcompatibility_version()) ? ValidationResult.VALID : new ValidationResult(VdcBllMessages.NETWORK_MTU_OVERRIDE_NOT_SUPPORTED);
}
#method_after
public ValidationResult mtuValid() {
    return ValidationResult.failWith(VdcBllMessages.NETWORK_MTU_OVERRIDE_NOT_SUPPORTED).unless(network.getMtu() == 0 || FeatureSupported.mtuSpecification(getDataCenter().getCompatibilityVersion()));
}
#end_block

#method_before
public ValidationResult networkPrefixValid() {
    return network.getName().toLowerCase().startsWith("bond") ? new ValidationResult(VdcBllMessages.NETWORK_CANNOT_CONTAIN_BOND_NAME) : ValidationResult.VALID;
}
#method_after
public ValidationResult networkPrefixValid() {
    return ValidationResult.failWith(VdcBllMessages.NETWORK_CANNOT_CONTAIN_BOND_NAME).when(network.getName().toLowerCase().startsWith("bond"));
}
#end_block

#method_before
public ValidationResult dataCenterExists() {
    return getDataCenter() == null ? new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST) : ValidationResult.VALID;
}
#method_after
public ValidationResult dataCenterExists() {
    return ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST).when(getDataCenter() == null);
}
#end_block

#method_before
public ValidationResult networkIsSet() {
    return network == null ? new ValidationResult(VdcBllMessages.NETWORK_NOT_EXISTS) : ValidationResult.VALID;
}
#method_after
public ValidationResult networkIsSet() {
    return ValidationResult.failWith(VdcBllMessages.NETWORK_NOT_EXISTS).when(network == null);
}
#end_block

#method_before
public ValidationResult networkNameNotUsed() {
    for (Network otherNetwork : getNetworks()) {
        if (otherNetwork.getName().equals(network.getName()) && !otherNetwork.getId().equals(network.getId())) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NAME_IN_USE);
        }
    }
    return ValidationResult.VALID;
}
#method_after
public ValidationResult networkNameNotUsed() {
    for (Network otherNetwork : getNetworks()) {
        if (otherNetwork.getName().equals(network.getName()) && !otherNetwork.getId().equals(network.getId())) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NAME_IN_USE, getNetworkNameReplacement());
        }
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
public ValidationResult notManagementNetwork() {
    return NetworkUtils.isManagementNetwork(network) ? new ValidationResult(VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK, String.format("$NetworkName %s", network.getName())) : ValidationResult.VALID;
}
#method_after
public ValidationResult notManagementNetwork() {
    return NetworkUtils.isManagementNetwork(network) ? new ValidationResult(VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK, getNetworkNameReplacement()) : ValidationResult.VALID;
}
#end_block

#method_before
protected ValidationResult networkNotUsed(List<? extends Nameable> entities, VdcBllMessages entitiesReplacement) {
    if (entities.isEmpty()) {
        return ValidationResult.VALID;
    }
    Collection<String> replacements = ReplacementUtils.replaceWithNameable("ENTITIES_USING_NETWORK", entities);
    replacements.add(entitiesReplacement.name());
    return new ValidationResult(networkInUseValidationMessage(entities.size()), replacements);
}
#method_after
protected ValidationResult networkNotUsed(List<? extends Nameable> entities, VdcBllMessages entitiesReplacementPlural, VdcBllMessages entitiesReplacementSingular) {
    if (entities.isEmpty()) {
        return ValidationResult.VALID;
    }
    Collection<String> replacements = ReplacementUtils.replaceWithNameable("ENTITIES_USING_NETWORK", entities);
    VdcBllMessages replacementMessageToUse = entities.size() == 1 ? entitiesReplacementSingular : entitiesReplacementPlural;
    replacements.add(replacementMessageToUse.name());
    return new ValidationResult(getNetworkInUseValidationMessage(entities.size()), replacements);
}
#end_block

#method_before
public ValidationResult networkNotUsedByVms() {
    return networkNotUsed(getVms(), VdcBllMessages.VAR__ENTITIES__VMS);
}
#method_after
public ValidationResult networkNotUsedByVms() {
    return networkNotUsed(getVms(), VdcBllMessages.VAR__ENTITIES__VMS, VdcBllMessages.VAR__ENTITIES__VM);
}
#end_block

#method_before
public ValidationResult networkNotUsedByHosts() {
    return networkNotUsed(getDbFacade().getVdsDao().getAllForNetwork(network.getId()), VdcBllMessages.VAR__ENTITIES__HOSTS);
}
#method_after
public ValidationResult networkNotUsedByHosts() {
    return networkNotUsed(getDbFacade().getVdsDao().getAllForNetwork(network.getId()), VdcBllMessages.VAR__ENTITIES__HOSTS, VdcBllMessages.VAR__ENTITIES__HOST);
}
#end_block

#method_before
public ValidationResult networkNotUsedByTemplates() {
    return networkNotUsed(getTemplates(), VdcBllMessages.VAR__ENTITIES__VM_TEMPLATES);
}
#method_after
public ValidationResult networkNotUsedByTemplates() {
    return networkNotUsed(getTemplates(), VdcBllMessages.VAR__ENTITIES__VM_TEMPLATES, VdcBllMessages.VAR__ENTITIES__VM_TEMPLATE);
}
#end_block

#method_before
public ValidationResult qosExistsInDc() {
    NetworkQosValidator qosValidator = new NetworkQosValidator(getDbFacade().getQosDao().get(network.getQosId()));
    ValidationResult res = qosValidator.qosExists();
    return (res == ValidationResult.VALID) ? qosValidator.consistentDataCenter() : res;
}
#method_after
public ValidationResult qosExistsInDc() {
    HostNetworkQosValidator qosValidator = new HostNetworkQosValidator(getDbFacade().getHostNetworkQosDao().get(network.getQosId()));
    ValidationResult res = qosValidator.qosExists();
    return (res == ValidationResult.VALID) ? qosValidator.consistentDataCenter() : res;
}
#end_block

#method_before
public ValidationResult notLabeled() {
    return !NetworkUtils.isLabeled(network) ? ValidationResult.VALID : new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED);
}
#method_after
public ValidationResult notLabeled() {
    return ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED).when(NetworkUtils.isLabeled(network));
}
#end_block

#method_before
@Before
public void setup() {
    // spy on attempts to access the database
    validator = spy(new NetworkValidator(network));
    doReturn(dbFacade).when(validator).getDbFacade();
    // mock some commonly used DAOs
    when(dbFacade.getStoragePoolDao()).thenReturn(dataCenterDao);
    when(dbFacade.getNetworkDao()).thenReturn(networkDao);
    // mock their getters
    when(dataCenterDao.get(any(Guid.class))).thenReturn(dataCenter);
    when(networkDao.getAllForDataCenter(any(Guid.class))).thenReturn(networks);
    // mock version checking
    Version version = mock(Version.class);
    when(dataCenter.getcompatibility_version()).thenReturn(version);
}
#method_after
@Before
public void setup() {
    // spy on attempts to access the database
    validator = spy(new NetworkValidator(network));
    doReturn(dbFacade).when(validator).getDbFacade();
    // mock some commonly used DAOs
    when(dbFacade.getStoragePoolDao()).thenReturn(dataCenterDao);
    when(dbFacade.getNetworkDao()).thenReturn(networkDao);
    // mock their getters
    when(dataCenterDao.get(any(Guid.class))).thenReturn(dataCenter);
    when(networkDao.getAllForDataCenter(any(Guid.class))).thenReturn(networks);
    // mock version checking
    Version version = mock(Version.class);
    when(dataCenter.getCompatibilityVersion()).thenReturn(version);
}
#end_block

#method_before
private void vmNetworkSetupTest(Matcher<ValidationResult> matcher, boolean vmNetwork, boolean featureSupported) {
    mockConfigRule.mockConfigValue(ConfigValues.NonVmNetworkSupported, dataCenter.getcompatibility_version(), featureSupported);
    when(network.isVmNetwork()).thenReturn(vmNetwork);
    assertThat(validator.vmNetworkSetCorrectly(), matcher);
}
#method_after
private void vmNetworkSetupTest(Matcher<ValidationResult> matcher, boolean vmNetwork, boolean featureSupported) {
    mockConfigRule.mockConfigValue(ConfigValues.NonVmNetworkSupported, dataCenter.getCompatibilityVersion(), featureSupported);
    when(network.isVmNetwork()).thenReturn(vmNetwork);
    assertThat(validator.vmNetworkSetCorrectly(), matcher);
}
#end_block

#method_before
private void mtuValidTest(Matcher<ValidationResult> matcher, int mtu, boolean featureSupported) {
    mockConfigRule.mockConfigValue(ConfigValues.MTUOverrideSupported, dataCenter.getcompatibility_version(), featureSupported);
    when(network.getMtu()).thenReturn(mtu);
    assertThat(validator.mtuValid(), matcher);
}
#method_after
private void mtuValidTest(Matcher<ValidationResult> matcher, int mtu, boolean featureSupported) {
    mockConfigRule.mockConfigValue(ConfigValues.MTUOverrideSupported, dataCenter.getCompatibilityVersion(), featureSupported);
    when(network.getMtu()).thenReturn(mtu);
    assertThat(validator.mtuValid(), matcher);
}
#end_block

#method_before
public ValidationResult networkQosExistsOrNull() {
    return vnicProfile.getNetworkQosId() == null || getDbFacade().getQosDao().get(vnicProfile.getNetworkQosId()) != null ? ValidationResult.VALID : new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_NOT_EXISTS);
}
#method_after
public ValidationResult networkQosExistsOrNull() {
    return vnicProfile.getNetworkQosId() == null || getDbFacade().getNetworkQosDao().get(vnicProfile.getNetworkQosId()) != null ? ValidationResult.VALID : new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_NOT_EXISTS);
}
#end_block

#method_before
public ValidationResult vnicProfileNotUsedByVms() {
    return vnicProfileNotUsed(getVmsUsingProfile(), VdcBllMessages.VAR__ENTITIES__VMS);
}
#method_after
public ValidationResult vnicProfileNotUsedByVms() {
    return vnicProfileNotUsed(getVmsUsingProfile(), VdcBllMessages.VAR__ENTITIES__VMS, VdcBllMessages.VAR__ENTITIES__VM);
}
#end_block

#method_before
public ValidationResult vnicProfileNotUsedByTemplates() {
    return vnicProfileNotUsed(getDbFacade().getVmTemplateDao().getAllForVnicProfile(vnicProfile.getId()), VdcBllMessages.VAR__ENTITIES__VM_TEMPLATES);
}
#method_after
public ValidationResult vnicProfileNotUsedByTemplates() {
    return vnicProfileNotUsed(getDbFacade().getVmTemplateDao().getAllForVnicProfile(vnicProfile.getId()), VdcBllMessages.VAR__ENTITIES__VM_TEMPLATES, VdcBllMessages.VAR__ENTITIES__VM_TEMPLATE);
}
#end_block

#method_before
protected ValidationResult vnicProfileNotUsed(List<? extends Nameable> entities, VdcBllMessages entitiesReplacement) {
    if (entities.isEmpty()) {
        return ValidationResult.VALID;
    }
    Collection<String> replacements = ReplacementUtils.replaceWithNameable("ENTITIES_USING_VNIC_PROFILE", entities);
    replacements.add(entitiesReplacement.name());
    return new ValidationResult(vNicProfileInUseValidationMessage(entities.size()), replacements);
}
#method_after
protected ValidationResult vnicProfileNotUsed(List<? extends Nameable> entities, VdcBllMessages entitiesReplacementPlural, VdcBllMessages entitiesReplacementSingular) {
    if (entities.isEmpty()) {
        return ValidationResult.VALID;
    }
    Collection<String> replacements = ReplacementUtils.replaceWithNameable("ENTITIES_USING_VNIC_PROFILE", entities);
    VdcBllMessages replacementMessageToUse = entities.size() == 1 ? entitiesReplacementSingular : entitiesReplacementPlural;
    replacements.add(replacementMessageToUse.name());
    return new ValidationResult(getVNicProfileInUseValidationMessage(entities.size()), replacements);
}
#end_block

#method_before
public boolean validateCustomProperties(List<String> messages) {
    StoragePool dataCenter = getDbFacade().getStoragePoolDao().get(getNetwork().getDataCenterId());
    List<ValidationError> errors = DevicePropertiesUtils.getInstance().validateProperties(dataCenter.getcompatibility_version(), VmDeviceGeneralType.INTERFACE, vnicProfile.getCustomProperties());
    if (!errors.isEmpty()) {
        DevicePropertiesUtils.getInstance().handleCustomPropertiesError(errors, messages);
        return false;
    }
    return true;
}
#method_after
public boolean validateCustomProperties(List<String> messages) {
    StoragePool dataCenter = getDbFacade().getStoragePoolDao().get(getNetwork().getDataCenterId());
    List<ValidationError> errors = DevicePropertiesUtils.getInstance().validateProperties(dataCenter.getCompatibilityVersion(), VmDeviceGeneralType.INTERFACE, vnicProfile.getCustomProperties());
    if (!errors.isEmpty()) {
        DevicePropertiesUtils.getInstance().handleCustomPropertiesError(errors, messages);
        return false;
    }
    return true;
}
#end_block

#method_before
private static Collection getCollection(BaseResource model, Class<? extends BaseResource> suggestedParentType) {
    ParentToCollectionMap collections = TYPES.get(model.getClass());
    if (collections == null) {
        log.error("Map 'describing every possible collection' does not contain rather possible key for resource " + "%1$s, returning 'null' instead.", model.getClass());
        return null;
    }
    if (suggestedParentType != null) {
        for (Entry<Class<? extends BaseResource>, Collection> entry : collections.entrySet()) {
            if (entry.getKey().equals(suggestedParentType)) {
                return entry.getValue();
            }
        }
    }
    for (Entry<Class<? extends BaseResource>, Collection> parentTypeEntry : collections.entrySet()) {
        if (parentTypeEntry.getKey() != NO_PARENT && getParentModel(model, parentTypeEntry.getKey()) != null) {
            return parentTypeEntry.getValue();
        }
    }
    return collections.get(NO_PARENT);
}
#method_after
private static Collection getCollection(BaseResource model, Class<? extends BaseResource> suggestedParentType) {
    ParentToCollectionMap collections = TYPES.get(model.getClass());
    if (collections == null) {
        return null;
    }
    if (suggestedParentType != null) {
        for (Entry<Class<? extends BaseResource>, Collection> entry : collections.entrySet()) {
            if (entry.getKey().equals(suggestedParentType)) {
                return entry.getValue();
            }
        }
    }
    for (Entry<Class<? extends BaseResource>, Collection> parentTypeEntry : collections.entrySet()) {
        if (parentTypeEntry.getKey() != NO_PARENT && getParentModel(model, parentTypeEntry.getKey()) != null) {
            return parentTypeEntry.getValue();
        }
    }
    return collections.get(NO_PARENT);
}
#end_block

#method_before
public void fireChangeEventsOnFields() {
    NativeEvent event = Document.get().createChangeEvent();
    DomEvent.fireNativeEvent(event, userNameEditor.asValueBox());
    event = Document.get().createChangeEvent();
    DomEvent.fireNativeEvent(event, passwordEditor.asValueBox());
}
#method_after
public void fireChangeEventsOnFields() {
    userNameEditor.fireChangeEvent();
    passwordEditor.fireChangeEvent();
    profileEditor.fireChangeEvent();
}
#end_block

#method_before
@Before
public void setup() {
    mockVds();
    fenceProxyLocator = new FenceProxyLocator(vds);
    when(dbFacade.getVdsDao()).thenReturn(vdsDao);
    DbFacadeLocator.setDbFacade(dbFacade);
}
#method_after
@Before
public void setup() {
    when(fencedVds.getName()).thenReturn(HOST_NAME);
    when(fencedVds.getId()).thenReturn(FENCECD_HOST_ID);
    when(fencedVds.getVdsGroupId()).thenReturn(FENCED_HOST_CLUSTER_ID);
    when(fencedVds.getStoragePoolId()).thenReturn(FENCED_HOST_DATACENTER_ID);
    fenceProxyLocator = new FenceProxyLocator(fencedVds);
    when(dbFacade.getVdsDao()).thenReturn(vdsDao);
    DbFacadeLocator.setDbFacade(dbFacade);
}
#end_block

#method_before
@Test
public void findProxyHost() {
    List<VDS> hosts = new LinkedList<>();
    VDS vds = new VDS();
    vds.setId(OTHER_HOST_ID_2);
    vds.setVdsGroupId(FENCED_HOST_CLUSTER_ID);
    vds.setVdsGroupCompatibilityVersion(Version.v3_0);
    hosts.add(vds);
    when(vdsDao.getAll()).thenReturn(hosts);
    VDS proxyHost = fenceProxyLocator.findProxyHost();
    assertNotNull(proxyHost);
}
#method_after
@Test
public void findProxyHost() {
    List<VDS> hosts = new LinkedList<>();
    VDS vds = createProxyCandidate();
    hosts.add(vds);
    when(vdsDao.getAll()).thenReturn(hosts);
    VDS proxyHost = fenceProxyLocator.findProxyHost();
    assertNotNull(proxyHost);
    assertEquals(proxyHost.getId(), OTHER_HOST_ID_1);
}
#end_block

#method_before
private List<VDS> createHosts() {
    List<VDS> hosts = new LinkedList<>();
    VDS vds = new VDS();
    vds.setId(OTHER_HOST_ID_1);
    vds.setVdsGroupId(OTHER_CLUSTER_ID);
    vds.setStoragePoolId(OTHER_DATACENTER_ID);
    vds.setVdsGroupCompatibilityVersion(Version.v3_5);
    hosts.add(vds);
    vds = new VDS();
    vds.setId(OTHER_HOST_ID_2);
    vds.setVdsGroupId(OTHER_CLUSTER_ID);
    vds.setStoragePoolId(FENCED_HOST_DATACENTER_ID);
    vds.setVdsGroupCompatibilityVersion(Version.v3_5);
    hosts.add(vds);
    return hosts;
}
#method_after
private List<VDS> createHosts() {
    List<VDS> hosts = new LinkedList<>();
    VDS vds = new VDS();
    vds.setId(OTHER_HOST_ID_1);
    vds.setVdsGroupId(OTHER_CLUSTER_ID);
    vds.setStoragePoolId(OTHER_DATACENTER_ID);
    vds.setVdsGroupCompatibilityVersion(Version.v3_5);
    hosts.add(vds);
    vds = new VDS();
    vds.setId(OTHER_HOST_ID_2);
    vds.setVdsGroupId(OTHER_CLUSTER_ID_2);
    vds.setStoragePoolId(FENCED_HOST_DATACENTER_ID);
    vds.setVdsGroupCompatibilityVersion(Version.v3_5);
    hosts.add(vds);
    return hosts;
}
#end_block

#method_before
private boolean isPathEditable(StorageDomain storage) {
    if (storage.getStorageType().isFileDomain() && !storage.getStorageType().equals(StorageType.GLUSTERFS)) {
        return isDomainTypeValidForPathEditing(storage) && isStorageStatusValidForPathEditing(storage);
    }
    return false;
}
#method_after
private boolean isPathEditable(StorageDomain storage) {
    if (storage.getStorageType().isFileDomain() && !storage.getStorageType().equals(StorageType.GLUSTERFS)) {
        StorageDomainType storageDomainType = storage.getStorageDomainType();
        return storageDomainType.isInternalDomain() && isStorageStatusValidForPathEditing(storage);
    }
    return false;
}
#end_block

#method_before
private boolean isEditAvailable(StorageDomain storageDomain) {
    if (storageDomain == null || storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Locked) {
        return false;
    }
    boolean isEditAvailable;
    boolean isActive = storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Active || storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Mixed;
    boolean isInMaintenance = (storageDomain.getStatus() == StorageDomainStatus.Maintenance || storageDomain.getStatus() == StorageDomainStatus.PreparingForMaintenance);
    boolean isUnattached = (storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Unattached || storageDomain.getStatus() == StorageDomainStatus.Detaching);
    boolean isDataISOorExportDomain = storageDomain.getStorageDomainType().isDataDomain() || storageDomain.getStorageDomainType().isIsoOrImportExportDomain();
    boolean isBlockStorage = storageDomain.getStorageType().isBlockDomain();
    isEditAvailable = isActive || isBlockStorage || ((isInMaintenance || isUnattached) && isDataISOorExportDomain);
    return isEditAvailable;
}
#method_after
private boolean isEditAvailable(StorageDomain storageDomain) {
    if (storageDomain == null || storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Locked) {
        return false;
    }
    boolean isEditAvailable;
    boolean isActive = storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Active || storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Mixed;
    boolean isInMaintenance = (storageDomain.getStatus() == StorageDomainStatus.Maintenance || storageDomain.getStatus() == StorageDomainStatus.PreparingForMaintenance);
    boolean isUnattached = (storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Unattached || storageDomain.getStatus() == StorageDomainStatus.Detaching);
    boolean isInternalDomain = storageDomain.getStorageDomainType().isInternalDomain();
    boolean isBlockStorage = storageDomain.getStorageType().isBlockDomain();
    isEditAvailable = isActive || isBlockStorage || ((isInMaintenance || isUnattached) && isInternalDomain);
    return isEditAvailable;
}
#end_block

#method_before
private void spySdValidator() {
    Set<Guid> sdIds = new HashSet<>(Arrays.asList(STORAGE_DOMAIN_ID, STORAGE_DOMAIN_ID2));
    storageDomainsValidator = spy(new MultipleStorageDomainsValidator(STORAGE_POOL_ID, sdIds));
    doReturn(storageDomainsValidator).when(cmd).getStorageDomainsValidator(any(Guid.class), anySet());
    doReturn(ValidationResult.VALID).when(storageDomainsValidator).allDomainsExistAndActive();
    doReturn(sdDAO).when(storageDomainsValidator).getStorageDomainDAO();
    doReturn(sdIds).when(cmd).getStorageDomainsIds();
    doReturn(ValidationResult.VALID).when(storageDomainsValidator).allDomainsExistAndActive();
    doReturn(ValidationResult.VALID).when(storageDomainsValidator).allDomainsWithinThresholds();
    doReturn(ValidationResult.VALID).when(storageDomainsValidator).allDomainsHaveSpaceForClonedDisks(anyList());
}
#method_after
private void spySdValidator() {
    Set<Guid> sdIds = new HashSet<>(Arrays.asList(STORAGE_DOMAIN_ID));
    storageDomainsValidator = spy(new MultipleStorageDomainsValidator(STORAGE_POOL_ID, sdIds));
    doReturn(storageDomainsValidator).when(cmd).getStorageDomainsValidator(any(Guid.class), anySet());
    doReturn(sdDAO).when(storageDomainsValidator).getStorageDomainDAO();
    doReturn(sdIds).when(cmd).getStorageDomainsIds();
    doReturn(ValidationResult.VALID).when(storageDomainsValidator).allDomainsExistAndActive();
    doReturn(ValidationResult.VALID).when(storageDomainsValidator).allDomainsWithinThresholds();
    doReturn(ValidationResult.VALID).when(storageDomainsValidator).allDomainsHaveSpaceForClonedDisks(anyList());
}
#end_block

#method_before
@Test
public void testCanDoActionEnoughSpace() {
    prepareForVmValidatorTests();
    spySdValidator();
    cmd.getVm().setStatus(VMStatus.Up);
    doReturn(ValidationResult.VALID).when(vmValidator).vmHostCanLiveMerge();
    mockMultipleSourceImagesForDomain(4, STORAGE_DOMAIN_ID);
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(cmd);
}
#method_after
@Test
public void testCanDoActionEnoughSpace() {
    prepareForVmValidatorTests();
    spySdValidator();
    cmd.getVm().setStatus(VMStatus.Up);
    doReturn(ValidationResult.VALID).when(vmValidator).vmHostCanLiveMerge();
    mockDisksList(4);
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(cmd);
}
#end_block

#method_before
@Test
public void testCanDoActionNotEnoughSpace() {
    prepareForVmValidatorTests();
    spySdValidator();
    cmd.getVm().setStatus(VMStatus.Up);
    doReturn(ValidationResult.VALID).when(vmValidator).vmHostCanLiveMerge();
    List<DiskImage> imagesDisks = mockMultipleSourceImagesForDomain(4, STORAGE_DOMAIN_ID);
    when(storageDomainsValidator.allDomainsHaveSpaceForClonedDisks(imagesDisks)).thenReturn(new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN));
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN);
}
#method_after
@Test
public void testCanDoActionNotEnoughSpace() {
    prepareForVmValidatorTests();
    spySdValidator();
    cmd.getVm().setStatus(VMStatus.Up);
    doReturn(ValidationResult.VALID).when(vmValidator).vmHostCanLiveMerge();
    List<DiskImage> imagesDisks = mockDisksList(4);
    when(storageDomainsValidator.allDomainsHaveSpaceForClonedDisks(imagesDisks)).thenReturn(new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN));
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN);
}
#end_block

#method_before
public static void fillImagesMapBasedOnTemplate(VmTemplate template, List<StorageDomain> domains, Map<Guid, DiskImage> diskInfoDestinationMap, Map<Guid, StorageDomain> destStorages, boolean notCheckSize) {
    Map<Guid, StorageDomain> storageDomainsMap = new HashMap<Guid, StorageDomain>();
    for (StorageDomain storageDomain : domains) {
        StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
        if (validator.isDomainExistAndActive().isValid() && validator.domainIsValidDestination().isValid() && (notCheckSize || validator.isDomainWithinThresholds().isValid())) {
            storageDomainsMap.put(storageDomain.getId(), storageDomain);
        }
    }
    for (DiskImage image : template.getDiskTemplateMap().values()) {
        for (Guid storageId : image.getStorageIds()) {
            if (storageDomainsMap.containsKey(storageId)) {
                ArrayList<Guid> storageIds = new ArrayList<Guid>();
                storageIds.add(storageId);
                image.setStorageIds(storageIds);
                diskInfoDestinationMap.put(image.getId(), image);
                break;
            }
        }
    }
    if (destStorages != null) {
        for (DiskImage diskImage : diskInfoDestinationMap.values()) {
            Guid storageDomainId = diskImage.getStorageIds().get(0);
            destStorages.put(storageDomainId, storageDomainsMap.get(storageDomainId));
        }
    }
}
#method_after
public static void fillImagesMapBasedOnTemplate(VmTemplate template, Map<Guid, DiskImage> diskInfoDestinationMap, Map<Guid, StorageDomain> destStorages) {
    List<StorageDomain> domains = DbFacade.getInstance().getStorageDomainDao().getAllForStoragePool(template.getStoragePoolId());
    fillImagesMapBasedOnTemplate(template, domains, diskInfoDestinationMap, destStorages);
}
#end_block

#method_before
private void initializeItems() {
    List<IStorageModel> items = AsyncDataProvider.getIsoStorageModels();
    items.addAll(AsyncDataProvider.getInstance().getExportStorageModels());
    items.addAll(AsyncDataProvider.getFileDataStorageModels());
    items.addAll(AsyncDataProvider.getImportBlockDataStorageModels());
    getModel().setItems(items);
}
#method_after
private void initializeItems() {
    List<IStorageModel> items = AsyncDataProvider.getIsoStorageModels();
    items.addAll(AsyncDataProvider.getExportStorageModels());
    items.addAll(AsyncDataProvider.getFileDataStorageModels());
    items.addAll(AsyncDataProvider.getImportBlockDataStorageModels());
    getModel().setItems(items);
}
#end_block

#method_before
@OnTimerMethodAnnotation("onTimer")
public void onTimer() {
    if (LockManagerFactory.getLockManager().acquireLock(monitoringLock).getFirst()) {
        try {
            setIsSetNonOperationalExecuted(false);
            Guid storagePoolId = null;
            ArrayList<VDSDomainsData> domainsList = null;
            synchronized (getLockObj()) {
                refreshCachedVds();
                if (cachedVds == null) {
                    log.error("VdsManager::refreshVdsRunTimeInfo - onTimer is NULL for '{}'", getVdsId());
                    return;
                }
                try {
                    if (refreshIteration == numberRefreshesBeforeSave) {
                        refreshIteration = 1;
                    } else {
                        refreshIteration++;
                    }
                    if (isMonitoringNeeded()) {
                        setStartTime();
                        hostMonitoring = new HostMonitoring(VdsManager.this, cachedVds, monitoringStrategy);
                        hostMonitoring.refresh();
                        mUnrespondedAttempts.set(0);
                        sshSoftFencingExecuted.set(false);
                        setLastUpdate();
                    }
                    if (!isInitialized() && cachedVds.getStatus() != VDSStatus.NonResponsive && cachedVds.getStatus() != VDSStatus.PendingApproval && cachedVds.getStatus() != VDSStatus.InstallingOS) {
                        log.info("Initializing Host: '{}'", cachedVds.getName());
                        ResourceManager.getInstance().HandleVdsFinishedInit(cachedVds.getId());
                        setInitialized(true);
                    }
                } catch (VDSNetworkException e) {
                    logNetworkException(e);
                } catch (VDSRecoveringException ex) {
                    handleVdsRecoveringException(ex);
                } catch (RuntimeException ex) {
                    logFailureMessage(ex);
                }
                try {
                    if (hostMonitoring != null) {
                        hostMonitoring.afterRefreshTreatment();
                        // the storage anymore (so there is no sense in updating the domains list in that case).
                        if (cachedVds != null && cachedVds.getStatus() != VDSStatus.Maintenance) {
                            storagePoolId = cachedVds.getStoragePoolId();
                            domainsList = cachedVds.getDomains();
                        }
                    }
                    hostMonitoring = null;
                } catch (IRSErrorException ex) {
                    logAfterRefreshFailureMessage(ex);
                    if (log.isDebugEnabled()) {
                        logException(ex);
                    }
                } catch (RuntimeException ex) {
                    logAfterRefreshFailureMessage(ex);
                    logException(ex);
                }
            }
            // synchronized part of code
            if (domainsList != null) {
                IrsBrokerCommand.updateVdsDomainsData(cachedVds, storagePoolId, domainsList);
            }
        } catch (Exception e) {
            log.error("Timer update runtimeinfo failed. Exception:", e);
        } finally {
            LockManagerFactory.getLockManager().releaseLock(monitoringLock);
        }
    }
}
#method_after
@OnTimerMethodAnnotation("onTimer")
public void onTimer() {
    if (LockManagerFactory.getLockManager().acquireLock(monitoringLock).getFirst()) {
        try {
            setIsSetNonOperationalExecuted(false);
            Guid storagePoolId = null;
            ArrayList<VDSDomainsData> domainsList = null;
            synchronized (getLockObj()) {
                refreshCachedVds();
                if (cachedVds == null) {
                    log.error("VdsManager::refreshVdsRunTimeInfo - onTimer is NULL for '{}'", getVdsId());
                    return;
                }
                try {
                    if (refreshIteration == numberRefreshesBeforeSave) {
                        refreshIteration = 1;
                    } else {
                        refreshIteration++;
                    }
                    if (isMonitoringNeeded()) {
                        setStartTime();
                        hostMonitoring = new HostMonitoring(VdsManager.this, cachedVds, monitoringStrategy);
                        hostMonitoring.refresh();
                        mUnrespondedAttempts.set(0);
                        setLastUpdate();
                    }
                    if (!isInitialized() && cachedVds.getStatus() != VDSStatus.NonResponsive && cachedVds.getStatus() != VDSStatus.PendingApproval && cachedVds.getStatus() != VDSStatus.InstallingOS) {
                        log.info("Initializing Host: '{}'", cachedVds.getName());
                        ResourceManager.getInstance().HandleVdsFinishedInit(cachedVds.getId());
                        setInitialized(true);
                    }
                } catch (VDSNetworkException e) {
                    logNetworkException(e);
                } catch (VDSRecoveringException ex) {
                    handleVdsRecoveringException(ex);
                } catch (RuntimeException ex) {
                    logFailureMessage(ex);
                }
                try {
                    if (hostMonitoring != null) {
                        hostMonitoring.afterRefreshTreatment();
                        // the storage anymore (so there is no sense in updating the domains list in that case).
                        if (cachedVds != null && cachedVds.getStatus() != VDSStatus.Maintenance) {
                            storagePoolId = cachedVds.getStoragePoolId();
                            domainsList = cachedVds.getDomains();
                        }
                    }
                    hostMonitoring = null;
                } catch (IRSErrorException ex) {
                    logAfterRefreshFailureMessage(ex);
                    if (log.isDebugEnabled()) {
                        logException(ex);
                    }
                } catch (RuntimeException ex) {
                    logAfterRefreshFailureMessage(ex);
                    logException(ex);
                }
            }
            // synchronized part of code
            if (domainsList != null) {
                IrsBrokerCommand.updateVdsDomainsData(cachedVds, storagePoolId, domainsList);
            }
        } catch (Exception e) {
            log.error("Timer update runtime info failed. Exception:", e);
        } finally {
            LockManagerFactory.getLockManager().releaseLock(monitoringLock);
        }
    }
}
#end_block

#method_before
private long calcTimeoutToFence(int vmCount, VdsSpmStatus spmStatus) {
    int spmIndicator = 0;
    if (spmStatus != VdsSpmStatus.None) {
        spmIndicator = 1;
    }
    int secToFence = (int) (// delay time can be fracture number, casting it to int should be enough
    Config.<Integer>getValue(ConfigValues.TimeoutToResetVdsInSeconds) + (Config.<Double>getValue(ConfigValues.DelayResetForSpmInSeconds) * spmIndicator) + (Config.<Double>getValue(ConfigValues.DelayResetPerVmInSeconds) * vmCount));
    if (sshSoftFencingExecuted.get()) {
        // VDSM restart by SSH has been executed, wait more to see if host is OK
        secToFence = 2 * secToFence;
    }
    return TimeUnit.SECONDS.toMillis(secToFence);
}
#method_after
private long calcTimeoutToFence(int vmCount, VdsSpmStatus spmStatus) {
    int spmIndicator = spmStatus == VdsSpmStatus.None ? 0 : 1;
    int secToFence = (int) (// delay time can be fracture number, casting it to int should be enough
    Config.<Integer>getValue(ConfigValues.TimeoutToResetVdsInSeconds) + Config.<Double>getValue(ConfigValues.DelayResetForSpmInSeconds) * spmIndicator + Config.<Double>getValue(ConfigValues.DelayResetPerVmInSeconds) * vmCount);
    return TimeUnit.SECONDS.toMillis(secToFence);
}
#end_block

#method_before
public void handleNetworkException(VDSNetworkException ex) {
    boolean saveToDb = true;
    if (cachedVds.getStatus() != VDSStatus.Down) {
        long timeoutToFence = calcTimeoutToFence(cachedVds.getVmCount(), cachedVds.getSpmStatus());
        if (inGracePeriod(timeoutToFence)) {
            if (cachedVds.getStatus() != VDSStatus.Connecting && cachedVds.getStatus() != VDSStatus.PreparingForMaintenance && cachedVds.getStatus() != VDSStatus.NonResponsive) {
                setStatus(VDSStatus.Connecting, cachedVds);
                logChangeStatusToConnecting(timeoutToFence);
            } else {
                saveToDb = false;
            }
            mUnrespondedAttempts.incrementAndGet();
        } else {
            if (cachedVds.getStatus() == VDSStatus.Maintenance) {
                saveToDb = false;
            } else {
                if (cachedVds.getStatus() != VDSStatus.NonResponsive) {
                    setStatus(VDSStatus.NonResponsive, cachedVds);
                    moveVMsToUnknown();
                    logHostFailToResponde(ex, timeoutToFence);
                    ResourceManager.getInstance().getEventListener().vdsNotResponding(cachedVds, !sshSoftFencingExecuted.getAndSet(true), lastUpdate);
                } else {
                    setStatus(VDSStatus.NonResponsive, cachedVds);
                }
            }
        }
    }
    if (saveToDb) {
        updateDynamicData(cachedVds.getDynamicData());
        updateStatisticsData(cachedVds.getStatisticsData());
    }
}
#method_after
public void handleNetworkException(VDSNetworkException ex) {
    boolean saveToDb = true;
    if (cachedVds.getStatus() != VDSStatus.Down) {
        long timeoutToFence = calcTimeoutToFence(cachedVds.getVmCount(), cachedVds.getSpmStatus());
        if (isHostInGracePeriod(false)) {
            if (cachedVds.getStatus() != VDSStatus.Connecting && cachedVds.getStatus() != VDSStatus.PreparingForMaintenance && cachedVds.getStatus() != VDSStatus.NonResponsive) {
                setStatus(VDSStatus.Connecting, cachedVds);
                logChangeStatusToConnecting(timeoutToFence);
            } else {
                saveToDb = false;
            }
            mUnrespondedAttempts.incrementAndGet();
        } else {
            if (cachedVds.getStatus() == VDSStatus.Maintenance) {
                saveToDb = false;
            } else {
                if (cachedVds.getStatus() != VDSStatus.NonResponsive) {
                    setStatus(VDSStatus.NonResponsive, cachedVds);
                    moveVMsToUnknown();
                    logHostFailToRespond(ex, timeoutToFence);
                    ResourceManager.getInstance().getEventListener().vdsNotResponding(cachedVds);
                } else {
                    setStatus(VDSStatus.NonResponsive, cachedVds);
                }
            }
        }
    }
    if (saveToDb) {
        updateDynamicData(cachedVds.getDynamicData());
        updateStatisticsData(cachedVds.getStatisticsData());
    }
}
#end_block

#method_before
private void proceedStorageDomain(StorageDomain data, int dataMasterVersion, StoragePool storagePool) {
    StorageDomain storage_domain = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(data.getId(), _storagePoolId);
    StorageDomainStatic domainFromDb = null;
    StoragePoolIsoMap domainPoolMap = null;
    if (storage_domain != null) {
        domainFromDb = storage_domain.getStorageStaticData();
        domainPoolMap = storage_domain.getStoragePoolIsoMapData();
        // If the domain is master in the DB
        if (domainFromDb.getStorageDomainType() == StorageDomainType.Master && domainPoolMap != null && domainPoolMap.getStatus() != StorageDomainStatus.Locked) {
            // and the domain is not master in the VDSM
            if (!((data.getStorageDomainType() == StorageDomainType.Master) || (data.getStorageDomainType() == StorageDomainType.Unknown))) {
                reconstructMasterDomainNotInSync(data.getStoragePoolId(), domainFromDb.getId(), "Mismatch between master in DB and VDSM", MessageFormat.format("Master domain is not in sync between DB and VDSM. " + "Domain {0} marked as master in DB and not in the storage", domainFromDb.getStorageName()));
            } else // mismatch
            if (dataMasterVersion != storagePool.getMasterDomainVersion()) {
                reconstructMasterDomainNotInSync(data.getStoragePoolId(), domainFromDb.getId(), "Mismatch between master version in DB and VDSM", MessageFormat.format("Master domain version is not in sync between DB and VDSM. " + "Domain {0} marked as master, but the version in DB: {1} and in VDSM: {2}", domainFromDb.getStorageName(), storagePool.getMasterDomainVersion(), dataMasterVersion));
            }
        }
        boolean statusChanged = false;
        if (domainPoolMap == null) {
            data.setStoragePoolId(_storagePoolId);
            DbFacade.getInstance().getStoragePoolIsoMapDao().save(data.getStoragePoolIsoMapData());
            statusChanged = true;
        } else if (domainPoolMap.getStatus() != StorageDomainStatus.Locked && domainPoolMap.getStatus() != data.getStatus()) {
            if (domainPoolMap.getStatus() != StorageDomainStatus.Inactive && data.getStatus() != StorageDomainStatus.Inactive) {
                DbFacade.getInstance().getStoragePoolIsoMapDao().update(data.getStoragePoolIsoMapData());
                statusChanged = true;
            }
            if (data.getStatus() != null && data.getStatus() == StorageDomainStatus.Inactive && domainFromDb.getStorageDomainType() == StorageDomainType.Master) {
                StoragePool pool = DbFacade.getInstance().getStoragePoolDao().get(domainPoolMap.getstorage_pool_id());
                if (pool != null) {
                    DbFacade.getInstance().getStoragePoolDao().updateStatus(pool.getId(), StoragePoolStatus.Maintenance);
                    pool.setStatus(StoragePoolStatus.Maintenance);
                    ResourceManager.getInstance().getEventListener().storagePoolStatusChanged(pool.getId(), StoragePoolStatus.Maintenance);
                }
            }
        }
        // For block domains, synchronize LUN details comprising the storage domain with the DB
        if (statusChanged && data.getStatus() == StorageDomainStatus.Active && storage_domain.getStorageType().isBlockDomain()) {
            ResourceManager.getInstance().getEventListener().syncLunsInfoForBlockStorageDomain(data.getId(), getCurrentVdsId());
        }
        // update dynamic data
        if (statusChanged || (domainPoolMap.getStatus() != StorageDomainStatus.Inactive && data.getStatus() == StorageDomainStatus.Active)) {
            DbFacade.getInstance().getStorageDomainDynamicDao().update(data.getStorageDynamicData());
            if (data.getAvailableDiskSize() != null && data.getUsedDiskSize() != null) {
                double freePercent = data.getStorageDynamicData().getfreeDiskPercent();
                int freeDiskInGB = data.getStorageDynamicData().getfreeDiskInGB();
                AuditLogType type = AuditLogType.UNASSIGNED;
                boolean spaceThresholdMet = freeDiskInGB < Config.<Integer>getValue(ConfigValues.FreeSpaceCriticalLowInGB);
                boolean percentThresholdMet = freePercent < Config.<Integer>getValue(ConfigValues.FreeSpaceLow);
                if (spaceThresholdMet && percentThresholdMet) {
                    type = AuditLogType.IRS_DISK_SPACE_LOW_ERROR;
                } else {
                    if (spaceThresholdMet || percentThresholdMet) {
                        type = AuditLogType.IRS_DISK_SPACE_LOW;
                    }
                }
                if (type != AuditLogType.UNASSIGNED) {
                    AuditLogableBase logable = new AuditLogableBase();
                    logable.setStorageDomain(data);
                    logable.setStoragePoolId(_storagePoolId);
                    logable.addCustomValue("DiskSpace", (data.getAvailableDiskSize()).toString());
                    data.setStorageName(domainFromDb.getStorageName());
                    AuditLogDirector.log(logable, type);
                }
            }
            Set<VdcBllErrors> alerts = data.getAlerts();
            if (alerts != null && !alerts.isEmpty()) {
                AuditLogableBase logable = new AuditLogableBase();
                logable.setStorageDomain(data);
                data.setStorageName(domainFromDb.getStorageName());
                logable.setStoragePoolId(_storagePoolId);
                for (VdcBllErrors alert : alerts) {
                    switch(alert) {
                        case VG_METADATA_CRITICALLY_FULL:
                            AuditLogDirector.log(logable, AuditLogType.STORAGE_ALERT_VG_METADATA_CRITICALLY_FULL);
                            break;
                        case SMALL_VG_METADATA:
                            AuditLogDirector.log(logable, AuditLogType.STORAGE_ALERT_SMALL_VG_METADATA);
                            break;
                        default:
                            log.error("Unrecognized alert for domain {}(id = {}): {}", data.getStorageName(), data.getId(), alert);
                            break;
                    }
                }
            }
        }
    } else {
        log.debug("The domain with id '{}' was not found in DB", data.getId());
    }
}
#method_after
private void proceedStorageDomain(StorageDomain data, int dataMasterVersion, StoragePool storagePool) {
    StorageDomain storage_domain = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(data.getId(), _storagePoolId);
    StorageDomainStatic domainFromDb = null;
    StoragePoolIsoMap domainPoolMap = null;
    if (storage_domain != null) {
        domainFromDb = storage_domain.getStorageStaticData();
        domainPoolMap = storage_domain.getStoragePoolIsoMapData();
        // If the domain is master in the DB
        if (domainFromDb.getStorageDomainType() == StorageDomainType.Master && domainPoolMap != null && domainPoolMap.getStatus() != StorageDomainStatus.Locked) {
            // and the domain is not master in the VDSM
            if (!((data.getStorageDomainType() == StorageDomainType.Master) || (data.getStorageDomainType() == StorageDomainType.Unknown))) {
                reconstructMasterDomainNotInSync(data.getStoragePoolId(), domainFromDb.getId(), "Mismatch between master in DB and VDSM", MessageFormat.format("Master domain is not in sync between DB and VDSM. " + "Domain {0} marked as master in DB and not in the storage", domainFromDb.getStorageName()));
            } else // mismatch
            if (dataMasterVersion != storagePool.getMasterDomainVersion()) {
                reconstructMasterDomainNotInSync(data.getStoragePoolId(), domainFromDb.getId(), "Mismatch between master version in DB and VDSM", MessageFormat.format("Master domain version is not in sync between DB and VDSM. " + "Domain {0} marked as master, but the version in DB: {1} and in VDSM: {2}", domainFromDb.getStorageName(), storagePool.getMasterDomainVersion(), dataMasterVersion));
            }
        }
        boolean statusChanged = false;
        if (domainPoolMap == null) {
            data.setStoragePoolId(_storagePoolId);
            DbFacade.getInstance().getStoragePoolIsoMapDao().save(data.getStoragePoolIsoMapData());
            statusChanged = true;
        } else if (domainPoolMap.getStatus() != StorageDomainStatus.Locked && domainPoolMap.getStatus() != data.getStatus()) {
            if (domainPoolMap.getStatus() != StorageDomainStatus.Inactive && data.getStatus() != StorageDomainStatus.Inactive) {
                DbFacade.getInstance().getStoragePoolIsoMapDao().update(data.getStoragePoolIsoMapData());
                statusChanged = true;
            }
            if (data.getStatus() != null && data.getStatus() == StorageDomainStatus.Inactive && domainFromDb.getStorageDomainType() == StorageDomainType.Master) {
                StoragePool pool = DbFacade.getInstance().getStoragePoolDao().get(domainPoolMap.getstorage_pool_id());
                if (pool != null) {
                    DbFacade.getInstance().getStoragePoolDao().updateStatus(pool.getId(), StoragePoolStatus.Maintenance);
                    pool.setStatus(StoragePoolStatus.Maintenance);
                    ResourceManager.getInstance().getEventListener().storagePoolStatusChanged(pool.getId(), StoragePoolStatus.Maintenance);
                }
            }
        }
        // For block domains, synchronize LUN details comprising the storage domain with the DB
        if (statusChanged && data.getStatus() == StorageDomainStatus.Active && storage_domain.getStorageType().isBlockDomain()) {
            ResourceManager.getInstance().getEventListener().syncLunsInfoForBlockStorageDomain(data.getId(), getCurrentVdsId());
        }
        // update dynamic data
        if (statusChanged || (domainPoolMap.getStatus() != StorageDomainStatus.Inactive && data.getStatus() == StorageDomainStatus.Active)) {
            DbFacade.getInstance().getStorageDomainDynamicDao().update(data.getStorageDynamicData());
            if (data.getAvailableDiskSize() != null && data.getUsedDiskSize() != null) {
                double freePercent = data.getStorageDynamicData().getfreeDiskPercent();
                AuditLogType type = AuditLogType.UNASSIGNED;
                Integer freeDiskInGB = data.getStorageDynamicData().getAvailableDiskSize();
                if (freeDiskInGB != null) {
                    boolean spaceThresholdMet = freeDiskInGB < Config.<Integer>getValue(ConfigValues.FreeSpaceCriticalLowInGB);
                    boolean percentThresholdMet = freePercent < Config.<Integer>getValue(ConfigValues.FreeSpaceLow);
                    if (spaceThresholdMet && percentThresholdMet) {
                        type = AuditLogType.IRS_DISK_SPACE_LOW_ERROR;
                    } else {
                        if (spaceThresholdMet || percentThresholdMet) {
                            type = AuditLogType.IRS_DISK_SPACE_LOW;
                        }
                    }
                }
                if (type != AuditLogType.UNASSIGNED) {
                    AuditLogableBase logable = new AuditLogableBase();
                    logable.setStorageDomain(data);
                    logable.setStoragePoolId(_storagePoolId);
                    logable.addCustomValue("DiskSpace", (data.getAvailableDiskSize()).toString());
                    data.setStorageName(domainFromDb.getStorageName());
                    AuditLogDirector.log(logable, type);
                }
            }
            Set<VdcBllErrors> alerts = data.getAlerts();
            if (alerts != null && !alerts.isEmpty()) {
                AuditLogableBase logable = new AuditLogableBase();
                logable.setStorageDomain(data);
                data.setStorageName(domainFromDb.getStorageName());
                logable.setStoragePoolId(_storagePoolId);
                for (VdcBllErrors alert : alerts) {
                    switch(alert) {
                        case VG_METADATA_CRITICALLY_FULL:
                            AuditLogDirector.log(logable, AuditLogType.STORAGE_ALERT_VG_METADATA_CRITICALLY_FULL);
                            break;
                        case SMALL_VG_METADATA:
                            AuditLogDirector.log(logable, AuditLogType.STORAGE_ALERT_SMALL_VG_METADATA);
                            break;
                        default:
                            log.error("Unrecognized alert for domain {}(id = {}): {}", data.getStorageName(), data.getId(), alert);
                            break;
                    }
                }
            }
        }
    } else {
        log.debug("The domain with id '{}' was not found in DB", data.getId());
    }
}
#end_block

#method_before
private void endActionIfNecessary() {
    CommandMultiAsyncTasks entityInfo = getCommandMultiAsyncTasks();
    if (entityInfo == null) {
        log.warn("CommandAsyncTask::endActionIfNecessary: No info is available for entity '{}', current" + " task ('{}') was probably created while other tasks were in progress, clearing task.", getCommandId(), getVdsmTaskId());
        clearAsyncTask();
    } else if (entityInfo.ShouldEndAction() && !hasRunningChildCoCoCommands()) {
        log.info("CommandAsyncTask::endActionIfNecessary: All tasks of command '{}' has ended -> executing 'endAction'", getCommandId());
        log.info("CommandAsyncTask::endAction: Ending action for '{}' tasks (command ID: '{}'): calling endAction '.", entityInfo.getTasksCountCurrentActionType(), entityInfo.getCommandId());
        entityInfo.MarkAllWithAttemptingEndAction();
        ThreadPoolUtil.execute(new Runnable() {

            @SuppressWarnings("synthetic-access")
            @Override
            public void run() {
                endCommandAction();
            }
        });
    }
}
#method_after
private void endActionIfNecessary() {
    CommandMultiAsyncTasks entityInfo = getCommandMultiAsyncTasks();
    if (entityInfo == null) {
        log.warn("CommandAsyncTask::endActionIfNecessary: No info is available for entity '{}', current" + " task ('{}') was probably created while other tasks were in progress, clearing task.", getCommandId(), getVdsmTaskId());
        clearAsyncTask();
    } else if (entityInfo.ShouldEndAction() && !hasRunningChildCommands()) {
        log.info("CommandAsyncTask::endActionIfNecessary: All tasks of command '{}' has ended -> executing 'endAction'", getCommandId());
        log.info("CommandAsyncTask::endAction: Ending action for '{}' tasks (command ID: '{}'): calling endAction '.", entityInfo.getTasksCountCurrentActionType(), entityInfo.getCommandId());
        entityInfo.MarkAllWithAttemptingEndAction();
        ThreadPoolUtil.execute(new Runnable() {

            @SuppressWarnings("synthetic-access")
            @Override
            public void run() {
                endCommandAction();
            }
        });
    }
}
#end_block

#method_before
protected VdcReturnValueBase executeChildCommand(Guid idInCommandsMap) {
    CommandBase<?> command = childCommandsMap.get(idInCommandsMap);
    return BackendUtils.getBackendCommandObjectsHandler(log).runAction(command, getExecutionContext());
}
#method_after
protected VdcReturnValueBase executeChildCommand(Guid idInCommandsMap) {
    CommandBase<?> command = childCommandsMap.get(idInCommandsMap);
    return commandObjectsHandlerProvider.get().runAction(command, getExecutionContext());
}
#end_block

#method_before
protected BackendInternal getBackend() {
    return Backend.getInstance();
}
#method_after
protected BackendInternal getBackend() {
    return Injector.get(BackendInternal.class);
}
#end_block

#method_before
private CompensationContext createCompensationContext(TransactionScopeOption transactionScopeOption, boolean forceCompensation) {
    if (transactionScopeOption == TransactionScopeOption.Suppress && !forceCompensation) {
        return NoOpCompensationContext.getInstance();
    }
    DefaultCompensationContext defaultContext = new DefaultCompensationContext();
    defaultContext.setCommandId(commandId);
    defaultContext.setCommandType(getClass().getName());
    defaultContext.setBusinessEntitySnapshotDAO(getBusinessEntitySnapshotDAO());
    defaultContext.setSnapshotSerializer(SerializationFactory.getSerializer());
    return defaultContext;
}
#method_after
private CompensationContext createCompensationContext(TransactionScopeOption transactionScopeOption, boolean forceCompensation) {
    if (transactionScopeOption == TransactionScopeOption.Suppress && !forceCompensation) {
        return NoOpCompensationContext.getInstance();
    }
    return createDefaultCompensationContext(commandId);
}
#end_block

#method_before
public VdcReturnValueBase endAction() {
    if (!hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) {
        ExecutionHandler.startFinalizingStep(getExecutionContext());
    }
    try {
        initiateLockEndAction();
        setActionState();
        handleTransactivity();
        TransactionSupport.executeInScope(endActionScope, this);
    } catch (TransactionRolledbackLocalException e) {
        log.info("endAction: Transaction was aborted in {}", this.getClass().getName());
    } finally {
        freeLockEndAction();
        if (getCommandShouldBeLogged()) {
            logCommand();
        }
    }
    return getReturnValue();
}
#method_after
public VdcReturnValueBase endAction() {
    if (!hasTaskHandlers() || getExecutionIndex() == getTaskHandlers().size() - 1) {
        startFinalizingStep();
    }
    try {
        initiateLockEndAction();
        setActionState();
        handleTransactivity();
        TransactionSupport.executeInScope(endActionScope, this);
    } catch (TransactionRolledbackLocalException e) {
        log.info("endAction: Transaction was aborted in {}", this.getClass().getName());
    } finally {
        freeLockEndAction();
        if (getCommandShouldBeLogged()) {
            logCommand();
        }
    }
    return getReturnValue();
}
#end_block

#method_before
public void endActionInTransactionScope() {
    boolean exceptionOccurred = false;
    try {
        if (isEndSuccessfully()) {
            setCommandStatus(CommandStatus.SUCCEEDED);
            internalEndSuccessfully();
        } else {
            setCommandStatus(CommandStatus.FAILED);
            internalEndWithFailure();
        }
    } catch (RuntimeException e) {
        exceptionOccurred = true;
        throw e;
    } finally {
        freeLockEndAction();
        if (TransactionSupport.current() == null) {
            // cleanup fails (probably since the transaction is aborted) then try to compensate.
            try {
                cleanUpCompensationData();
            } catch (RuntimeException e) {
                logExceptionAndCompensate(e);
            }
        } else {
            try {
                if (!exceptionOccurred && TransactionSupport.current().getStatus() == Status.STATUS_ACTIVE) {
                    cleanUpCompensationData();
                } else {
                    compensate();
                }
            } catch (SystemException e) {
                logExceptionAndCompensate(e);
            }
        }
    }
}
#method_after
public void endActionInTransactionScope() {
    boolean exceptionOccurred = false;
    try {
        if (isEndSuccessfully()) {
            if (getCallBack() == null) {
                setCommandStatus(CommandStatus.SUCCEEDED);
            }
            internalEndSuccessfully();
        } else {
            if (getCallBack() == null) {
                setCommandStatus(CommandStatus.FAILED);
            }
            internalEndWithFailure();
        }
    } catch (RuntimeException e) {
        exceptionOccurred = true;
        throw e;
    } finally {
        freeLockEndAction();
        if (TransactionSupport.current() == null) {
            // cleanup fails (probably since the transaction is aborted) then try to compensate.
            try {
                cleanUpCompensationData();
            } catch (RuntimeException e) {
                logExceptionAndCompensate(e);
            }
        } else {
            try {
                if (!exceptionOccurred && TransactionSupport.current().getStatus() == Status.STATUS_ACTIVE) {
                    cleanUpCompensationData();
                } else {
                    compensate();
                }
            } catch (SystemException e) {
                logExceptionAndCompensate(e);
            }
        }
    }
}
#end_block

#method_before
private boolean isCanDoActionSupportsTransaction() {
    CanDoActionSupportsTransaction annotation = getClass().getAnnotation(CanDoActionSupportsTransaction.class);
    return annotation != null;
}
#method_after
private boolean isCanDoActionSupportsTransaction() {
    return getClass().isAnnotationPresent(CanDoActionSupportsTransaction.class);
}
#end_block

#method_before
private boolean internalCanDoAction() {
    boolean returnValue = false;
    try {
        Transaction transaction = null;
        if (!isCanDoActionSupportsTransaction()) {
            transaction = TransactionSupport.suspend();
        }
        try {
            returnValue = isUserAuthorizedToRunAction() && isBackwardsCompatible() && validateInputs() && acquireLock() && canDoAction() && internalValidateAndSetQuota();
            if (!returnValue && getReturnValue().getCanDoActionMessages().size() > 0) {
                log.warn("CanDoAction of action '{}' failed. Reasons: {}", getActionType(), StringUtils.join(getReturnValue().getCanDoActionMessages(), ','));
            }
        } finally {
            if (transaction != null) {
                TransactionSupport.resume(transaction);
            }
        }
    } catch (DataAccessException dataAccessEx) {
        log.error("Data access error during CanDoActionFailure.", dataAccessEx);
        addCanDoActionMessage(VdcBllMessages.CAN_DO_ACTION_DATABASE_CONNECTION_FAILURE);
    } catch (RuntimeException ex) {
        log.error("Error during CanDoActionFailure.", ex);
        addCanDoActionMessage(VdcBllMessages.CAN_DO_ACTION_GENERAL_FAILURE);
    } finally {
        if (!returnValue) {
            freeLock();
        }
    }
    return returnValue;
}
#method_after
private boolean internalCanDoAction() {
    boolean returnValue = false;
    try {
        Transaction transaction = null;
        if (!isCanDoActionSupportsTransaction()) {
            transaction = TransactionSupport.suspend();
        }
        try {
            returnValue = isUserAuthorizedToRunAction() && isBackwardsCompatible() && validateInputs() && acquireLock() && canDoAction() && internalValidateAndSetQuota();
            if (!returnValue && getReturnValue().getCanDoActionMessages().size() > 0) {
                log.warn("CanDoAction of action '{}' failed for user {}. Reasons: {}", getActionType(), getUserName(), StringUtils.join(getReturnValue().getCanDoActionMessages(), ','));
            }
        } finally {
            if (transaction != null) {
                TransactionSupport.resume(transaction);
            }
        }
    } catch (DataAccessException dataAccessEx) {
        log.error("Data access error during CanDoActionFailure.", dataAccessEx);
        addCanDoActionMessage(VdcBllMessages.CAN_DO_ACTION_DATABASE_CONNECTION_FAILURE);
    } catch (RuntimeException ex) {
        log.error("Error during CanDoActionFailure.", ex);
        addCanDoActionMessage(VdcBllMessages.CAN_DO_ACTION_GENERAL_FAILURE);
    } finally {
        if (!returnValue) {
            freeLock();
        }
    }
    return returnValue;
}
#end_block

#method_before
protected boolean isBackwardsCompatible() {
    boolean result = true;
    ActionVersionMap actionVersionMap = DbFacade.getInstance().getActionGroupDao().getActionVersionMapByActionType(getActionType());
    // cluster level ok check storage_pool level
    if (actionVersionMap != null && ((getVdsGroup() != null && getVdsGroup().getcompatibility_version().compareTo(new Version(actionVersionMap.getcluster_minimal_version())) < 0) || (!"*".equals(actionVersionMap.getstorage_pool_minimal_version()) && getStoragePool() != null && getStoragePool().getcompatibility_version().compareTo(new Version(actionVersionMap.getstorage_pool_minimal_version())) < 0))) {
        result = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
    }
    return result;
}
#method_after
protected boolean isBackwardsCompatible() {
    boolean result = true;
    ActionVersionMap actionVersionMap = DbFacade.getInstance().getActionGroupDao().getActionVersionMapByActionType(getActionType());
    // cluster level ok check storage_pool level
    if (actionVersionMap != null && ((getVdsGroup() != null && getVdsGroup().getCompatibilityVersion().compareTo(new Version(actionVersionMap.getcluster_minimal_version())) < 0) || (!"*".equals(actionVersionMap.getstorage_pool_minimal_version()) && getStoragePool() != null && getStoragePool().getCompatibilityVersion().compareTo(new Version(actionVersionMap.getstorage_pool_minimal_version())) < 0))) {
        result = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
    }
    return result;
}
#end_block

#method_before
final public boolean checkSinglePermission(PermissionSubject permSubject, Collection<String> messages) {
    final Guid objectId = permSubject.getObjectId();
    final VdcObjectType objectType = permSubject.getObjectType();
    final ActionGroup objectActionGroup = permSubject.getActionGroup();
    // if objectId is null we can't check permission
    if (objectId == null) {
        if (log.isDebugEnabled()) {
            log.debug("The object to check is null for action '{}'.", getActionType());
        }
        messages.add(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION.name());
        return false;
    }
    // Check that an action group is defined for this action;
    if (objectActionGroup == null) {
        if (log.isDebugEnabled()) {
            log.debug("No action group is defined for action '{}'.", getActionType());
        }
        return false;
    }
    // Check the authorization:
    if (!checkUserAuthorization(getCurrentUser().getId(), objectActionGroup, objectId, objectType)) {
        messages.add(permSubject.getMessage().name());
        return false;
    }
    return true;
}
#method_after
final protected boolean checkSinglePermission(PermissionSubject permSubject, Collection<String> messages) {
    final Guid objectId = permSubject.getObjectId();
    final VdcObjectType objectType = permSubject.getObjectType();
    final ActionGroup objectActionGroup = permSubject.getActionGroup();
    // if objectId is null we can't check permission
    if (objectId == null) {
        if (log.isDebugEnabled()) {
            log.debug("The object to check is null for action '{}'.", getActionType());
        }
        messages.add(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION.name());
        return false;
    }
    // Check that an action group is defined for this action;
    if (objectActionGroup == null) {
        if (log.isDebugEnabled()) {
            log.debug("No action group is defined for action '{}'.", getActionType());
        }
        return false;
    }
    // Check the authorization:
    if (!checkUserAuthorization(getCurrentUser().getId(), objectActionGroup, objectId, objectType)) {
        messages.add(permSubject.getMessage().name());
        return false;
    }
    return true;
}
#end_block

#method_before
protected void insertAsyncTaskPlaceHolders() {
    TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            buildChildCommandInfos();
            for (Map.Entry<Guid, Pair<VdcActionType, VdcActionParametersBase>> entry : childCommandInfoMap.entrySet()) {
                CommandBase<?> command = BackendUtils.getBackendCommandObjectsHandler(log).createAction(entry.getValue().getFirst(), entry.getValue().getSecond(), context);
                log.info("Command '{}' persisting async task placeholder for child command '{}'", getCommandId(), command.getCommandId());
                command.insertAsyncTaskPlaceHolders();
                childCommandsMap.put(entry.getKey(), command);
            }
            return null;
        }
    });
}
#method_after
protected void insertAsyncTaskPlaceHolders() {
    TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            buildChildCommandInfos();
            for (Map.Entry<Guid, Pair<VdcActionType, VdcActionParametersBase>> entry : childCommandInfoMap.entrySet()) {
                CommandBase<?> command = commandObjectsHandlerProvider.get().createAction(entry.getValue().getFirst(), entry.getValue().getSecond(), context);
                log.info("Command '{}' persisting async task placeholder for child command '{}'", getCommandId(), command.getCommandId());
                command.insertAsyncTaskPlaceHolders();
                childCommandsMap.put(entry.getKey(), command);
            }
            return null;
        }
    });
}
#end_block

#method_before
protected boolean validate(ValidationResult validationResult) {
    if (!validationResult.isValid()) {
        addCanDoActionMessage(validationResult.getMessage());
        if (validationResult.getVariableReplacements() != null) {
            for (String variableReplacement : validationResult.getVariableReplacements()) {
                addCanDoActionMessage(variableReplacement);
            }
        }
    }
    return validationResult.isValid();
}
#method_after
protected boolean validate(ValidationResult validationResult) {
    if (!validationResult.isValid()) {
        addCanDoActionMessage(validationResult.getMessage());
        for (String variableReplacement : validationResult.getVariableReplacements()) {
            addCanDoActionMessage(variableReplacement);
        }
    }
    return validationResult.isValid();
}
#end_block

#method_before
private JobDetail createJobWithBasicMapValues(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams) {
    String jobName = generateUniqueNameForInstance(instance, methodName);
    JobDetail job = newJob().withIdentity(jobName, Scheduler.DEFAULT_GROUP).ofType(JobWrapper.class).build();
    setBasicMapValues(job.getJobDataMap(), instance, methodName, inputTypes, inputParams);
    return job;
}
#method_after
@Override
protected JobDetail createJobWithBasicMapValues(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams) {
    String jobName = generateUniqueNameForInstance(instance, methodName);
    JobDetail job = newJob().withIdentity(jobName, Scheduler.DEFAULT_GROUP).ofType(JobWrapper.class).build();
    setBasicMapValues(job.getJobDataMap(), instance, methodName, inputTypes, inputParams);
    return job;
}
#end_block

#method_before
@Override
protected void addJNDIBeans() {
    addBeanJNDIName(BeanType.BACKEND, ENGINE_CONTEXT_PREFIX.concat("bll/Backend"));
    addBeanJNDIName(BeanType.SCHEDULER, ENGINE_CONTEXT_PREFIX.concat("scheduler/Scheduler"));
    addBeanJNDIName(BeanType.SCHEDULERDB, ENGINE_CONTEXT_PREFIX.concat("scheduler/SchedulerDB"));
    addBeanJNDIName(BeanType.VDS_EVENT_LISTENER, ENGINE_CONTEXT_PREFIX.concat("bll/VdsEventListener"));
    addBeanJNDIName(BeanType.LOCK_MANAGER, ENGINE_CONTEXT_PREFIX.concat("bll/LockManager"));
    addBeanJNDIName(BeanType.EVENTQUEUE_MANAGER, ENGINE_CONTEXT_PREFIX.concat("bll/EventQueue"));
    addBeanJNDIName(BeanType.CACHE_CONTAINER, "java:jboss/infinispan/ovirt-engine");
}
#method_after
@Override
protected void addJNDIBeans() {
    addBeanJNDIName(BeanType.BACKEND, ENGINE_CONTEXT_PREFIX.concat("bll/Backend"));
    addBeanJNDIName(BeanType.SCHEDULER, ENGINE_CONTEXT_PREFIX.concat("scheduler/Scheduler"));
    addBeanJNDIName(BeanType.PERSISTENT_SCHEDULER, ENGINE_CONTEXT_PREFIX.concat("scheduler/PersistentScheduler"));
    addBeanJNDIName(BeanType.VDS_EVENT_LISTENER, ENGINE_CONTEXT_PREFIX.concat("bll/VdsEventListener"));
    addBeanJNDIName(BeanType.LOCK_MANAGER, ENGINE_CONTEXT_PREFIX.concat("bll/LockManager"));
    addBeanJNDIName(BeanType.EVENTQUEUE_MANAGER, ENGINE_CONTEXT_PREFIX.concat("bll/EventQueue"));
    addBeanJNDIName(BeanType.CACHE_CONTAINER, "java:jboss/infinispan/ovirt-engine");
}
#end_block

#method_before
protected boolean isConnectionEditable(StorageServerConnections connection) {
    if (connection.getstorage_type().isFileDomain()) {
        boolean isConnectionEditable = isDomainInEditState(domains.get(0));
        if (!isConnectionEditable) {
            addCanDoActionMessageVariable("domainNames", domains.get(0).getStorageName());
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_UNSUPPORTED_ACTION_DOMAIN_MUST_BE_IN_MAINTENANCE_OR_UNATTACHED);
        }
        return isConnectionEditable;
    }
    if (!getLuns().isEmpty()) {
        List<String> problematicVMNames = new ArrayList<>();
        List<String> problematicDomainNames = new ArrayList<>();
        for (LUNs lun : getLuns()) {
            Guid diskId = lun.getDiskId();
            if (diskId != null) {
                Map<Boolean, List<VM>> vmsMap = getVmDAO().getForDisk(diskId, true);
                List<VM> pluggedVms = vmsMap.get(Boolean.TRUE);
                if (pluggedVms != null && !pluggedVms.isEmpty()) {
                    for (VM vm : pluggedVms) {
                        if (!vm.getStatus().equals(VMStatus.Down)) {
                            problematicVMNames.add(vm.getName());
                        }
                    }
                }
            }
            Guid storageDomainId = lun.getStorageDomainId();
            if (storageDomainId != null) {
                StorageDomain domain = getStorageDomainDao().get(storageDomainId);
                if (!domain.getStorageDomainSharedStatus().equals(StorageDomainSharedStatus.Unattached)) {
                    for (StoragePoolIsoMap map : getStoragePoolIsoMap(domain)) {
                        if (!map.getStatus().equals(StorageDomainStatus.Maintenance)) {
                            String domainName = domain.getStorageName();
                            problematicDomainNames.add(domainName);
                        } else {
                            domains.add(domain);
                        }
                    }
                } else {
                    // unattached domain, edit allowed
                    domains.add(domain);
                }
            }
        }
        if (!problematicVMNames.isEmpty()) {
            if (problematicDomainNames.isEmpty()) {
                addCanDoActionMessageVariable("vmNames", prepareEntityNamesForMessage(problematicVMNames));
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_RUNNING_VMS);
            } else {
                addCanDoActionMessageVariable("vmNames", prepareEntityNamesForMessage(problematicVMNames));
                addCanDoActionMessageVariable("domainNames", prepareEntityNamesForMessage(problematicDomainNames));
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_RUNNING_VMS_AND_DOMAINS_STATUS);
            }
            return false;
        }
        if (!problematicDomainNames.isEmpty()) {
            addCanDoActionMessageVariable("domainNames", prepareEntityNamesForMessage(problematicDomainNames));
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_UNSUPPORTED_ACTION_DOMAIN_MUST_BE_IN_MAINTENANCE_OR_UNATTACHED);
            return false;
        }
    }
    return true;
}
#method_after
protected boolean isConnectionEditable(StorageServerConnections connection) {
    if (connection.getstorage_type().isFileDomain()) {
        boolean isConnectionEditable = isFileDomainInEditState(domains.get(0));
        if (!isConnectionEditable) {
            addCanDoActionMessageVariable("domainNames", domains.get(0).getStorageName());
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_UNSUPPORTED_ACTION_DOMAIN_MUST_BE_IN_MAINTENANCE_OR_UNATTACHED);
        }
        return isConnectionEditable;
    }
    if (!getLuns().isEmpty()) {
        List<String> problematicVMNames = new ArrayList<>();
        List<String> problematicDomainNames = new ArrayList<>();
        for (LUNs lun : getLuns()) {
            Guid diskId = lun.getDiskId();
            if (diskId != null) {
                Map<Boolean, List<VM>> vmsMap = getVmDAO().getForDisk(diskId, true);
                List<VM> pluggedVms = vmsMap.get(Boolean.TRUE);
                if (pluggedVms != null && !pluggedVms.isEmpty()) {
                    for (VM vm : pluggedVms) {
                        if (!vm.getStatus().equals(VMStatus.Down)) {
                            problematicVMNames.add(vm.getName());
                        }
                    }
                }
            }
            Guid storageDomainId = lun.getStorageDomainId();
            if (storageDomainId != null) {
                StorageDomain domain = getStorageDomainDao().get(storageDomainId);
                if (!domain.getStorageDomainSharedStatus().equals(StorageDomainSharedStatus.Unattached)) {
                    for (StoragePoolIsoMap map : getStoragePoolIsoMap(domain)) {
                        if (!map.getStatus().equals(StorageDomainStatus.Maintenance)) {
                            String domainName = domain.getStorageName();
                            problematicDomainNames.add(domainName);
                        } else {
                            domains.add(domain);
                        }
                    }
                } else {
                    // unattached domain, edit allowed
                    domains.add(domain);
                }
            }
        }
        if (!problematicVMNames.isEmpty()) {
            if (problematicDomainNames.isEmpty()) {
                addCanDoActionMessageVariable("vmNames", prepareEntityNamesForMessage(problematicVMNames));
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_RUNNING_VMS);
            } else {
                addCanDoActionMessageVariable("vmNames", prepareEntityNamesForMessage(problematicVMNames));
                addCanDoActionMessageVariable("domainNames", prepareEntityNamesForMessage(problematicDomainNames));
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_RUNNING_VMS_AND_DOMAINS_STATUS);
            }
            return false;
        }
        if (!problematicDomainNames.isEmpty()) {
            addCanDoActionMessageVariable("domainNames", prepareEntityNamesForMessage(problematicDomainNames));
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_UNSUPPORTED_ACTION_DOMAIN_MUST_BE_IN_MAINTENANCE_OR_UNATTACHED);
            return false;
        }
    }
    return true;
}
#end_block

#method_before
protected void disconnectFromStorage() {
    StorageServerConnectionManagementVDSParameters connectionParametersForVdsm = createParametersForVdsm(getParameters().getVdsId(), Guid.Empty, getConnection().getstorage_type(), getConnection());
    boolean isDisconnectSucceeded = runVdsCommand(VDSCommandType.DisconnectStorageServer, connectionParametersForVdsm).getSucceeded();
    if (!isDisconnectSucceeded) {
        log.warn("Failed to disconnect storage connection " + getConnection());
    }
}
#method_after
protected void disconnectFromStorage() {
    StorageServerConnectionManagementVDSParameters connectionParametersForVdsm = createParametersForVdsm(getParameters().getVdsId(), Guid.Empty, getConnection().getstorage_type(), getConnection());
    boolean isDisconnectSucceeded = runVdsCommand(VDSCommandType.DisconnectStorageServer, connectionParametersForVdsm).getSucceeded();
    if (!isDisconnectSucceeded) {
        log.warn("Failed to disconnect storage connection {}", getConnection());
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    final ClusterValidator validator = new ClusterValidator(getDbFacade(), getVdsGroup());
    if (!validateClusterPolicy()) {
        return false;
    }
    return validate(validator.nameNotUsed()) && validate(validator.cpuTypeSupportsVirtService()) && validate(validator.versionSupported()) && validate(validator.dataCenterVersionMismatch()) && validate(validator.dataCenterExists()) && validate(validator.localStoragePoolAttachedToSingleCluster()) && validate(validator.qosBaloonSupported()) && validate(validator.glusterServiceSupported()) && validate(validator.clusterServiceDefined()) && validate(validator.mixedClusterServicesSupported()) && validate(validator.attestationServerConfigured()) && validate(validator.migrationSupported(getArchitecture())) && validate(validator.virtIoRngSupported());
}
#method_after
@Override
protected boolean canDoAction() {
    final ClusterValidator validator = new ClusterValidator(getDbFacade(), getVdsGroup());
    return validate(validator.nameNotUsed()) && validate(validator.cpuTypeSupportsVirtService()) && validate(validator.versionSupported()) && validate(validator.dataCenterVersionMismatch()) && validate(validator.dataCenterExists()) && validate(validator.localStoragePoolAttachedToSingleCluster()) && validate(validator.qosBaloonSupported()) && validate(validator.glusterServiceSupported()) && validate(validator.clusterServiceDefined()) && validate(validator.mixedClusterServicesSupported()) && validate(validator.attestationServerConfigured()) && validate(validator.migrationSupported(getArchitecture())) && validateClusterPolicy() && validate(validator.virtIoRngSupported());
}
#end_block

#method_before
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    for (LiveMigrateDiskParameters parameters : getParameters().getParametersList()) {
        DiskImage diskImage = getDiskImageDao().get(parameters.getImageId());
        if (diskImage != null) {
            permissionList.add(new PermissionSubject(diskImage.getId(), VdcObjectType.Disk, ActionGroup.CONFIGURE_DISK_STORAGE));
            permissionList.add(new PermissionSubject(diskImage.getId(), VdcObjectType.Disk, ActionGroup.DISK_LIVE_STORAGE_MIGRATION));
        }
        permissionList.add(new PermissionSubject(parameters.getTargetStorageDomainId(), VdcObjectType.Storage, ActionGroup.CREATE_DISK));
    }
    return permissionList;
}
#method_after
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    for (LiveMigrateDiskParameters parameters : getParameters().getParametersList()) {
        DiskImage diskImage = getDiskImageDao().get(parameters.getImageId());
        if (diskImage != null) {
            permissionList.add(new PermissionSubject(diskImage.getId(), VdcObjectType.Disk, ActionGroup.DISK_LIVE_STORAGE_MIGRATION));
        }
    }
    return permissionList;
}
#end_block

#method_before
private ArrayList<StorageDomain> getDestinationDomains(ArrayList<StorageDomain> activeStorageDomains, ArrayList<StorageDomain> sourceStorageDomainsToExclude, DiskModel diskModel, boolean isDiskBasedOnTemplate) {
    boolean shouldFilterBySourceType = isFilterDestinationDomainsBySourceType(diskModel);
    DiskImage diskImage = ((DiskImage) diskModel.getDisk());
    DiskModel templateDisk = null;
    if (isDiskBasedOnTemplate) {
        templateDisk = getTemplateDiskByVmDisk(diskModel);
    }
    ArrayList<StorageDomain> destinationDomains = new ArrayList<>();
    for (StorageDomain sd : activeStorageDomains) {
        // Storage domain destination should not be a domain which the disk is attached to.
        if (!sourceStorageDomainsToExclude.contains(sd)) {
            // Destination should be in the same pool as the disk.
            boolean connectedToSamePool = sd.getStoragePoolId().equals(diskImage.getStoragePoolId());
            if (connectedToSamePool) {
                boolean hasSameSubType = sd.getStorageType().getStorageSubtype() == diskImage.getStorageTypes().get(0).getStorageSubtype();
                if (!shouldFilterBySourceType || (shouldFilterBySourceType && hasSameSubType)) {
                    boolean isDomainValidForDiskTemplate = true;
                    if (templateDisk != null) {
                        isDomainValidForDiskTemplate = ((DiskImage) templateDisk.getDisk()).getStorageIds().contains(sd.getId());
                    }
                    if (isDomainValidForDiskTemplate) {
                        destinationDomains.add(sd);
                    }
                }
            }
        }
    }
    return destinationDomains;
}
#method_after
private ArrayList<StorageDomain> getDestinationDomains(ArrayList<StorageDomain> activeStorageDomains, ArrayList<StorageDomain> sourceActiveStorageDomains, DiskModel diskModel, boolean isDiskBasedOnTemplate) {
    boolean shouldFilterBySourceType = isFilterDestinationDomainsBySourceType(diskModel);
    DiskImage diskImage = ((DiskImage) diskModel.getDisk());
    DiskModel templateDisk = null;
    if (isDiskBasedOnTemplate) {
        templateDisk = getTemplateDiskByVmDisk(diskModel);
    }
    ArrayList<StorageDomain> destinationDomains = new ArrayList<>();
    for (StorageDomain sd : activeStorageDomains) {
        // Storage domain destination should not be a domain which the disk is attached to.
        if (sourceActiveStorageDomains.contains(sd)) {
            continue;
        }
        // Destination should be in the same pool as the disk.
        boolean connectedToSamePool = sd.getStoragePoolId().equals(diskImage.getStoragePoolId());
        if (!connectedToSamePool) {
            continue;
        }
        boolean hasSameSubType = sd.getStorageType().getStorageSubtype() == diskImage.getStorageTypes().get(0).getStorageSubtype();
        if (shouldFilterBySourceType && !hasSameSubType) {
            continue;
        }
        if (!isDomainValidForDiskTemplate(templateDisk, sd)) {
            continue;
        }
        if (!isDiskValidForStorage(diskImage, sd)) {
            continue;
        }
        // All conditions are valid for moving the current disk to this domain.
        destinationDomains.add(sd);
    }
    return destinationDomains;
}
#end_block

#method_before
protected void onInitStorageDomains(ArrayList<StorageDomain> storages, Disk disk) {
    for (StorageDomain storage : storages) {
        if (Linq.isDataActiveStorageDomain(storage) && isDiskValidForStorage(disk, storage)) {
            getActiveStorageDomains().add(storage);
        }
    }
    Collections.sort(getActiveStorageDomains(), new NameableComparator());
    if (!storages.isEmpty()) {
        AsyncDataProvider.getInstance().getDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                MoveOrCopyDiskModel model = (MoveOrCopyDiskModel) target;
                StoragePool dataCenter = (StoragePool) returnValue;
                model.setQuotaEnforcementType(dataCenter.getQuotaEnforcementType());
                model.postInitStorageDomains();
            }
        }), storages.get(0).getStoragePoolId());
    } else {
        postInitStorageDomains();
    }
}
#method_after
protected void onInitStorageDomains(ArrayList<StorageDomain> storages) {
    for (StorageDomain storage : storages) {
        if (Linq.isDataActiveStorageDomain(storage)) {
            getActiveStorageDomains().add(storage);
        }
    }
    Collections.sort(getActiveStorageDomains(), new NameableComparator());
    if (!storages.isEmpty()) {
        AsyncDataProvider.getInstance().getDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                MoveOrCopyDiskModel model = (MoveOrCopyDiskModel) target;
                StoragePool dataCenter = (StoragePool) returnValue;
                model.setQuotaEnforcementType(dataCenter.getQuotaEnforcementType());
                model.postInitStorageDomains();
            }
        }), storages.get(0).getStoragePoolId());
    } else {
        postInitStorageDomains();
    }
}
#end_block

#method_before
private boolean isDiskValidForStorage(Disk disk, StorageDomain storage) {
    if (disk.isShareable() && storage.getStorageType().equals(StorageType.GLUSTERFS)) {
        return false;
    }
    return true;
}
#method_after
private boolean isDiskValidForStorage(DiskImage disk, StorageDomain storage) {
    if (disk.isShareable() && storage.getStorageType() == StorageType.GLUSTERFS) {
        return false;
    }
    return true;
}
#end_block

#method_before
protected void postInitStorageDomains() {
    for (DiskModel disk : getDisks()) {
        DiskImage diskImage = ((DiskImage) disk.getDisk());
        // Source storage domains
        ArrayList<Guid> diskStorageIds = diskImage.getStorageIds();
        ArrayList<StorageDomain> sourceStorageDomains = Linq.getStorageDomainsByIds(diskStorageIds, getActiveStorageDomains());
        // Destination storage domains
        ArrayList<StorageDomain> destStorageDomains = Linq.except(getActiveStorageDomains(), sourceStorageDomains);
        destStorageDomains = filterStoragesByDatacenterId(destStorageDomains, diskImage.getStoragePoolId());
        if (isFilterDestinationDomainsBySourceType(disk)) {
            destStorageDomains = filterDestinationDomainsByDiskStorageSubtype(destStorageDomains, diskImage);
        }
        // Filter storage domains with missing template disk
        boolean isDiskBasedOnTemplate = !diskImage.getParentId().equals(Guid.Empty);
        if (isDiskBasedOnTemplate) {
            destStorageDomains = Linq.except(destStorageDomains, getMissingStorages(destStorageDomains, disk));
        }
        // Add prohibition reasons
        if (sourceStorageDomains.isEmpty() || destStorageDomains.isEmpty()) {
            problematicDisks.add(disk.getAlias().getEntity());
            updateChangeability(disk, isDiskBasedOnTemplate, sourceStorageDomains.isEmpty(), destStorageDomains.isEmpty());
        }
        // Sort and add storage domains
        Collections.sort(destStorageDomains, new NameableComparator());
        Collections.sort(sourceStorageDomains, new NameableComparator());
        disk.getStorageDomain().setItems(destStorageDomains);
        disk.getSourceStorageDomain().setItems(sourceStorageDomains);
        addSourceStorageDomainName(disk, sourceStorageDomains);
    }
    sortDisks();
    postCopyOrMoveInit();
}
#method_after
protected void postInitStorageDomains() {
    for (DiskModel disk : getDisks()) {
        DiskImage diskImage = ((DiskImage) disk.getDisk());
        // Source storage domains
        ArrayList<Guid> diskStorageIds = diskImage.getStorageIds();
        ArrayList<StorageDomain> sourceStorageDomains = Linq.getStorageDomainsByIds(diskStorageIds, getActiveStorageDomains());
        // Destination storage domains
        ArrayList<StorageDomain> destStorageDomains = Linq.except(getActiveStorageDomains(), sourceStorageDomains);
        destStorageDomains = filterStoragesByDatacenterId(destStorageDomains, diskImage.getStoragePoolId());
        destStorageDomains = filterValidStoragesForDisk(destStorageDomains, diskImage);
        if (isFilterDestinationDomainsBySourceType(disk)) {
            destStorageDomains = filterDestinationDomainsByDiskStorageSubtype(destStorageDomains, diskImage);
        }
        // Filter storage domains with missing template disk
        boolean isDiskBasedOnTemplate = !diskImage.getParentId().equals(Guid.Empty);
        if (isDiskBasedOnTemplate) {
            destStorageDomains = Linq.except(destStorageDomains, getMissingStorages(destStorageDomains, disk));
        }
        // Add prohibition reasons
        if (sourceStorageDomains.isEmpty() || destStorageDomains.isEmpty()) {
            problematicDisks.add(disk.getAlias().getEntity());
            updateChangeability(disk, isDiskBasedOnTemplate, sourceStorageDomains.isEmpty(), destStorageDomains.isEmpty());
        }
        // Sort and add storage domains
        Collections.sort(destStorageDomains, new NameableComparator());
        Collections.sort(sourceStorageDomains, new NameableComparator());
        disk.getStorageDomain().setItems(destStorageDomains);
        disk.getSourceStorageDomain().setItems(sourceStorageDomains);
        addSourceStorageDomainName(disk, sourceStorageDomains);
    }
    sortDisks();
    postCopyOrMoveInit();
}
#end_block

#method_before
private void init() {
    setMasterVolume(new EntityModel<String>());
    setSlaveVolume(new EntityModel<String>());
    setSlaveHost(new EntityModel<String>());
    setForce(new EntityModel<Boolean>());
    // $NON-NLS-1$
    setMessage("");
    getForce().setEntity(false);
}
#method_after
private void init() {
    setMasterVolume(new EntityModel<String>());
    setSlaveVolume(new EntityModel<String>());
    setSlaveHost(new EntityModel<String>());
    setForce(new EntityModel<Boolean>());
}
#end_block

#method_before
private void initEditors() {
    forceEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
}
#method_after
private void initEditors() {
    forceEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    geoRepForceHelpIcon = new InfoIcon(templates.italicText(constants.notAvailableLabel()), resources);
}
#end_block

#method_before
@Override
public void edit(final GlusterVolumeGeoRepActionConfirmationModel object) {
    driver.edit(object);
    forceEditor.setLabel(object.getForceLabel() == null ? constants.notAvailableLabel() : object.getMessage());
    messageLabel.setText(object.getMessage() == null ? constants.notAvailableLabel() : object.getMessage());
}
#method_after
@Override
public void edit(final GlusterVolumeGeoRepActionConfirmationModel object) {
    driver.edit(object);
}
#end_block

#method_before
private void initDetachableFields() {
    detachableMemSizeEditor = new EntityModelDetachableWidgetWithLabel(memSizeEditor);
    isHighlyAvailableEditorWithDetachable = new EntityModelDetachableWidget(isHighlyAvailableEditor, Align.RIGHT);
    overrideMigrationDowntimeEditorWithDetachable = new EntityModelDetachableWidget(overrideMigrationDowntimeEditor, Align.RIGHT);
    overrideMigrationDowntimeEditor.getContentWidgetContainer().getElement().getStyle().setWidth(20, Unit.PX);
    migrationModeEditorWithDetachable = new EntityModelDetachableWidget(migrationModeEditor, Align.RIGHT);
    migrationModeEditor.getContentWidgetContainer().getElement().getStyle().setWidth(300, Unit.PX);
    StringEntityModelLabel rnglabel = new StringEntityModelLabel();
    rnglabel.setText(constants.rngDevEnabled());
    isRngEnabledCheckboxWithInfoIcon = new EntityModelWidgetWithInfo<String>(rnglabel, isRngEnabledEditor);
    isRngEnabledCheckboxWithInfoIcon.setExplanation(SafeHtmlUtils.fromTrustedString(constants.rngDevExplanation()));
}
#method_after
private void initDetachableFields() {
    detachableMemSizeEditor = new EntityModelDetachableWidgetWithLabel(memSizeEditor);
    isHighlyAvailableEditorWithDetachable = new EntityModelDetachableWidget(isHighlyAvailableEditor, Align.RIGHT);
    overrideMigrationDowntimeEditorWithDetachable = new EntityModelDetachableWidget(overrideMigrationDowntimeEditor, Align.IGNORE);
    overrideMigrationDowntimeEditorWithDetachable.setupContentWrapper(Align.RIGHT);
    overrideMigrationDowntimeEditor.getContentWidgetContainer().getElement().getStyle().setWidth(20, Unit.PX);
    migrationModeEditorWithDetachable = new EntityModelDetachableWidget(migrationModeEditor, Align.IGNORE);
    migrationModeEditorWithDetachable.setupContentWrapper(Align.RIGHT);
    StringEntityModelLabel rnglabel = new StringEntityModelLabel();
    rnglabel.setText(constants.rngDevEnabled());
    isRngEnabledCheckboxWithInfoIcon = new EntityModelWidgetWithInfo<String>(rnglabel, isRngEnabledEditor);
    isRngEnabledCheckboxWithInfoIcon.setExplanation(SafeHtmlUtils.fromTrustedString(constants.rngDevExplanation()));
}
#end_block

#method_before
@Override
public Response doImport(Action action) {
    validateParameters(action, "storageDomain.id|name");
    ImportRepoImageParameters importParameters = new ImportRepoImageParameters();
    importParameters.setSourceRepoImageId(id);
    importParameters.setSourceStorageDomainId(getStorageDomainId());
    importParameters.setStoragePoolId(getDataCenterId(getStorageDomainId(action)));
    importParameters.setStorageDomainId(getStorageDomainId(action));
    if (action.isSetImportAsTemplate()) {
        if (action.isImportAsTemplate()) {
            validateParameters(action, "cluster.id|name");
            importParameters.setClusterId(getClusterId(action));
            if (action.isSetTemplate() && action.getTemplate().isSetName()) {
                importParameters.setTemplateName(action.getTemplate().getName());
            }
        }
        importParameters.setImportAsTemplate(action.isImportAsTemplate());
    }
    if (action.isSetName()) {
        importParameters.setDiskAlias(action.getName());
    }
    return doAction(VdcActionType.ImportRepoImage, importParameters, action);
}
#method_after
@Override
public Response doImport(Action action) {
    validateParameters(action, "storageDomain.id|name");
    ImportRepoImageParameters importParameters = new ImportRepoImageParameters();
    importParameters.setSourceRepoImageId(id);
    importParameters.setSourceStorageDomainId(getStorageDomainId());
    importParameters.setStoragePoolId(getDataCenterId(getStorageDomainId(action)));
    importParameters.setStorageDomainId(getStorageDomainId(action));
    if (action.isSetImportAsTemplate()) {
        if (action.isImportAsTemplate()) {
            validateParameters(action, "cluster.id|name");
            importParameters.setClusterId(getClusterId(action));
            if (action.isSetTemplate() && action.getTemplate().isSetName()) {
                importParameters.setTemplateName(action.getTemplate().getName());
            }
        }
        importParameters.setImportAsTemplate(action.isImportAsTemplate());
    }
    if (action.isSetDisk()) {
        if (action.getDisk().isSetName()) {
            importParameters.setDiskAlias(action.getDisk().getName());
        }
        if (action.getDisk().isSetAlias()) {
            importParameters.setDiskAlias(action.getDisk().getAlias());
        }
    }
    return doAction(VdcActionType.ImportRepoImage, importParameters, action);
}
#end_block

#method_before
private void updateActionAvailability() {
    getEditCommand().setIsExecutionAllowed(getSelectedItems() != null && getSelectedItems().size() == 1);
    boolean removeAllowed = true;
    if (getSelectedItems() == null || getSelectedItems().isEmpty()) {
        removeAllowed = false;
    } else {
        for (MacPool macPool : (Iterable<MacPool>) getSelectedItems()) {
            if (macPool.isDefaultPool()) {
                removeAllowed = false;
            }
        }
    }
    getRemoveCommand().setIsExecutionAllowed(removeAllowed);
}
#method_after
private void updateActionAvailability() {
    getEditCommand().setIsExecutionAllowed(getSelectedItems() != null && getSelectedItems().size() == 1);
    boolean removeAllowed = true;
    if (getSelectedItems() == null || getSelectedItems().isEmpty()) {
        removeAllowed = false;
    } else {
        for (MacPool macPool : (Iterable<MacPool>) getSelectedItems()) {
            if (macPool.isDefaultPool()) {
                removeAllowed = false;
                break;
            }
        }
    }
    getRemoveCommand().setIsExecutionAllowed(removeAllowed);
}
#end_block

#method_before
private void newMacPool() {
    SharedMacPoolModel model = new NewSharedMacPoolModel(this, false);
    model.setEntity(new MacPool());
    setWindow(model);
}
#method_after
private void newMacPool() {
    SharedMacPoolModel model = new NewSharedMacPoolModel(this);
    model.setEntity(new MacPool());
    setWindow(model);
}
#end_block

#method_before
private void editMacPool() {
    SharedMacPoolModel model = new SharedMacPoolModel(this, VdcActionType.UpdateMacPool, false);
    model.setTitle(ConstantsManager.getInstance().getConstants().editSharedMacPoolTitle());
    // $NON-NLS-1$
    model.setHashName("edit_shared_mac_pool");
    model.setHelpTag(HelpTag.edit_shared_mac_pool);
    model.setEntity((MacPool) getSelectedItem());
    setWindow(model);
}
#method_after
private void editMacPool() {
    SharedMacPoolModel model = new SharedMacPoolModel(this, VdcActionType.UpdateMacPool);
    model.setTitle(ConstantsManager.getInstance().getConstants().editSharedMacPoolTitle());
    // $NON-NLS-1$
    model.setHashName("edit_shared_mac_pool");
    model.setHelpTag(HelpTag.edit_shared_mac_pool);
    model.setEntity((MacPool) getSelectedItem());
    setWindow(model);
}
#end_block

#method_before
private void addMacPool(final DataCenterModel dcModel) {
    SharedMacPoolModel macPoolModel = new NewSharedMacPoolModel(this, true) {

        @Override
        protected void onActionSucceeded(Guid macPoolId) {
            MacPool macPool = getEntity();
            macPool.setId(macPoolId);
            Collection<MacPool> macPools = new ArrayList<MacPool>(dcModel.getMacPoolListModel().getItems());
            macPools.add(macPool);
            dcModel.getMacPoolListModel().setItems(macPools);
            dcModel.getMacPoolListModel().setSelectedItem(macPool);
            DataCenterListModel.this.setConfirmWindow(null);
        }
    };
    macPoolModel.setEntity(new MacPool());
    setConfirmWindow(macPoolModel);
}
#method_after
private void addMacPool(final DataCenterModel dcModel) {
    SharedMacPoolModel macPoolModel = new NewSharedMacPoolModel.ClosingWithSetConfirmWindow(this) {

        @Override
        protected void onActionSucceeded(Guid macPoolId) {
            MacPool macPool = getEntity();
            macPool.setId(macPoolId);
            Collection<MacPool> macPools = new ArrayList<MacPool>(dcModel.getMacPoolListModel().getItems());
            macPools.add(macPool);
            dcModel.getMacPoolListModel().setItems(macPools);
            dcModel.getMacPoolListModel().setSelectedItem(macPool);
            DataCenterListModel.this.setConfirmWindow(null);
        }
    };
    macPoolModel.setEntity(new MacPool());
    setConfirmWindow(macPoolModel);
}
#end_block

#method_before
public void onRecover() {
    final ConfirmationModel windowModel = (ConfirmationModel) getWindow();
    if (!windowModel.validate()) {
        return;
    }
    AsyncDataProvider.getInstance().getStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            List<StorageDomain> storageDomainList = (List<StorageDomain>) returnValue;
            for (StorageDomain a : storageDomainList) {
                if (a.getStorageDomainType() == StorageDomainType.Master) {
                    break;
                }
            }
            List<StorageDomain> items = new ArrayList<StorageDomain>();
            for (EntityModel a : Linq.<EntityModel>cast(windowModel.getItems())) {
                if (a.getIsSelected()) {
                    items.add((StorageDomain) a.getEntity());
                }
            }
            if (items.size() > 0) {
                if (windowModel.getProgress() != null) {
                    return;
                }
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                for (StorageDomain a : items) {
                    parameters.add(new RecoveryStoragePoolParameters(((StoragePool) getSelectedItem()).getId(), a.getId()));
                }
                windowModel.startProgress(null);
                Frontend.getInstance().runMultipleAction(VdcActionType.RecoveryStoragePool, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void executed(FrontendMultipleActionAsyncResult result) {
                        ConfirmationModel localModel = (ConfirmationModel) result.getState();
                        localModel.stopProgress();
                        cancel();
                    }
                }, windowModel);
            } else {
                cancel();
            }
        }
    }), ((StoragePool) getSelectedItem()).getId());
}
#method_after
public void onRecover() {
    final ConfirmationModel windowModel = (ConfirmationModel) getWindow();
    if (!windowModel.validate()) {
        return;
    }
    AsyncDataProvider.getInstance().getStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            List<StorageDomain> storageDomainList = (List<StorageDomain>) returnValue;
            for (StorageDomain a : storageDomainList) {
                if (a.getStorageDomainType() == StorageDomainType.Master) {
                    break;
                }
            }
            List<StorageDomain> items = new ArrayList<StorageDomain>();
            for (EntityModel a : Linq.<EntityModel>cast(windowModel.getItems())) {
                if (a.getIsSelected()) {
                    items.add((StorageDomain) a.getEntity());
                }
            }
            if (items.size() > 0) {
                if (windowModel.getProgress() != null) {
                    return;
                }
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                for (StorageDomain a : items) {
                    parameters.add(new ReconstructMasterParameters(((StoragePool) getSelectedItem()).getId(), a.getId()));
                }
                windowModel.startProgress(null);
                Frontend.getInstance().runMultipleAction(VdcActionType.RecoveryStoragePool, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void executed(FrontendMultipleActionAsyncResult result) {
                        ConfirmationModel localModel = (ConfirmationModel) result.getState();
                        localModel.stopProgress();
                        cancel();
                    }
                }, windowModel);
            } else {
                cancel();
            }
        }
    }), ((StoragePool) getSelectedItem()).getId());
}
#end_block

#method_before
protected void cancel() {
    if (closeUsingConfirmWindow) {
        sourceModel.setConfirmWindow(null);
    } else {
        sourceModel.setWindow(null);
    }
}
#method_after
protected void cancel() {
    sourceModel.setWindow(null);
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((snapshotId == null) ? 0 : snapshotId.hashCode());
    result = prime * result + ((clusterId == null) ? 0 : clusterId.hashCode());
    result = prime * result + ((entityId == null) ? 0 : entityId.hashCode());
    result = prime * result + ((snapshotName == null) ? 0 : snapshotName.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    result = prime * result + ((createdAt == null) ? 0 : createdAt.hashCode());
    result = prime * result + ((description == null) ? 0 : description.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((snapshotId == null) ? 0 : snapshotId.hashCode());
    result = prime * result + ((clusterId == null) ? 0 : clusterId.hashCode());
    result = prime * result + ((volumeId == null) ? 0 : volumeId.hashCode());
    result = prime * result + ((snapshotName == null) ? 0 : snapshotName.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    result = prime * result + ((description == null) ? 0 : description.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterVolumeSnapshotEntity)) {
        return false;
    }
    GlusterVolumeSnapshotEntity snapshot = (GlusterVolumeSnapshotEntity) obj;
    if (!(snapshotId.equals(snapshot.getSnapshotId()))) {
        return false;
    }
    if (!(clusterId.equals(snapshot.getClusterId()))) {
        return false;
    }
    if (!(entityId.equals(snapshot.getEntityId()))) {
        return false;
    }
    if (!(snapshotName.equals(snapshot.getSnapshotName()))) {
        return false;
    }
    if (!(createdAt.equals(snapshot.getCreatedAt()))) {
        return false;
    }
    if (!(description.equals(snapshot.getDescription()))) {
        return false;
    }
    if (status != snapshot.getStatus()) {
        return false;
    }
    return true;
}
#method_after
@Override
public boolean equals(Object obj) {
    if (obj == null || !(obj instanceof GlusterVolumeSnapshotEntity)) {
        return false;
    }
    GlusterVolumeSnapshotEntity snapshot = (GlusterVolumeSnapshotEntity) obj;
    if (!(ObjectUtils.objectsEqual(snapshotId, snapshot.getSnapshotId()))) {
        return false;
    }
    if (!(ObjectUtils.objectsEqual(clusterId, snapshot.getClusterId()))) {
        return false;
    }
    if (!(ObjectUtils.objectsEqual(volumeId, snapshot.getVolumeId()))) {
        return false;
    }
    if (!(ObjectUtils.objectsEqual(snapshotName, snapshot.getSnapshotName()))) {
        return false;
    }
    if (!(ObjectUtils.objectsEqual(description, snapshot.getDescription()))) {
        return false;
    }
    if (status != snapshot.getStatus()) {
        return false;
    }
    return true;
}
#end_block

#method_before
protected static RoleNode createDiskRoleTree() {
    return categoryNode(getConstants().diskRoleTree(), categoryNode(getConstants().provisioningOperationsRoleTree(), getConstants().notePermissionsContainingOperationsRoleTreeTooltip(), roleNode(ActionGroup.CREATE_DISK, getConstants().allowToCreateDiskRoleTreeTooltip()), roleNode(ActionGroup.DELETE_DISK, getConstants().allowToDeleteDiskRoleTreeTooltip()), roleNode(ActionGroup.CONFIGURE_DISK_STORAGE, getConstants().allowToMoveDiskToAnotherStorageDomainRoleTreeTooltip()), roleNode(ActionGroup.ATTACH_DISK, getConstants().allowToAttachDiskToVmRoleTreeTooltip()), roleNode(ActionGroup.EDIT_DISK_PROPERTIES, getConstants().allowToChangePropertiesOfTheDiskRoleTreeTooltip()), roleNode(ActionGroup.CONFIGURE_SCSI_GENERIC_IO, getConstants().allowToChangeSGIORoleTreeTooltip()), roleNode(ActionGroup.ACCESS_IMAGE_STORAGE, getConstants().allowAccessImageDomainRoleTreeTooltip())));
}
#method_after
protected static RoleNode createDiskRoleTree() {
    return categoryNode(getConstants().diskRoleTree(), categoryNode(getConstants().provisioningOperationsRoleTree(), getConstants().notePermissionsContainingOperationsRoleTreeTooltip(), roleNode(ActionGroup.CREATE_DISK, getConstants().allowToCreateDiskRoleTreeTooltip()), roleNode(ActionGroup.DELETE_DISK, getConstants().allowToDeleteDiskRoleTreeTooltip()), roleNode(ActionGroup.CONFIGURE_DISK_STORAGE, getConstants().allowToMoveDiskToAnotherStorageDomainRoleTreeTooltip()), roleNode(ActionGroup.ATTACH_DISK, getConstants().allowToAttachDiskToVmRoleTreeTooltip()), roleNode(ActionGroup.EDIT_DISK_PROPERTIES, getConstants().allowToChangePropertiesOfTheDiskRoleTreeTooltip()), roleNode(ActionGroup.CONFIGURE_SCSI_GENERIC_IO, getConstants().allowToChangeSGIORoleTreeTooltip()), roleNode(ActionGroup.ACCESS_IMAGE_STORAGE, getConstants().allowAccessImageDomainRoleTreeTooltip())), categoryNode(getConstants().attachDiskProfileRoleTree(), getConstants().notePermissionsContainingDiskProfileOperationsRoleTreeTooltip(), roleNode(ActionGroup.ATTACH_DISK_PROFILE, getConstants().allowToAttachDiskProfileToDiskRoleTreeTooltip())));
}
#end_block

#method_before
protected static RoleNode createVmRoleTree() {
    return categoryNode(getConstants().vmRoleTree(), categoryNode(getConstants().basicOperationsRoleTree(), roleNode(ActionGroup.VM_BASIC_OPERATIONS, getConstants().allowBasicVmOperationsRoleTreeTooltip()), roleNode(ActionGroup.CHANGE_VM_CD, getConstants().allowToAttachCdToTheVmRoleTreeTooltip()), roleNode(ActionGroup.CONNECT_TO_VM, getConstants().allowViewingTheVmConsoleScreenRoleTreeTooltip())), categoryNode(getConstants().provisioningOperationsRoleTree(), getConstants().notePermissionsContainigTheseOperationsShuoldAssociatSdOrAboveRoleTreeTooltip(), roleNode(ActionGroup.EDIT_VM_PROPERTIES, getConstants().allowChangeVmPropertiesRoleTreeTooltip()), roleNode(ActionGroup.CREATE_VM, getConstants().allowToCreateNewVmsRoleTreeTooltip()), roleNode(ActionGroup.CREATE_INSTANCE, getConstants().allowToCreateNewInstnaceRoleTreeTooltip()), roleNode(ActionGroup.DELETE_VM, getConstants().allowToRemoveVmsFromTheSystemRoleTreeTooltip()), roleNode(ActionGroup.IMPORT_EXPORT_VM, getConstants().allowImportExportOperationsRoleTreeTooltip()), roleNode(ActionGroup.CONFIGURE_VM_STORAGE, getConstants().allowToAddRemoveDiskToTheVmRoleTreeTooltip()), roleNode(ActionGroup.MANIPULATE_VM_SNAPSHOTS, getConstants().allowToCreateDeleteSnapshotsOfTheVmRoleTreeTooltip())), categoryNode(getConstants().administrationOperationsRoleTree(), getConstants().notePermissionsContainigTheseOperationsShuoldAssociatDcOrEqualRoleTreeTooltip(), roleNode(ActionGroup.MOVE_VM, getConstants().allowToMoveVmImageToAnotherStorageDomainRoleTreeTooltip()), roleNode(ActionGroup.MIGRATE_VM, getConstants().allowMigratingVmBetweenHostsInClusterRoleTreeTooltip()), roleNode(ActionGroup.CHANGE_VM_CUSTOM_PROPERTIES, getConstants().allowToChangeVmCustomPropertiesRoleTreeTooltip()), roleNode(ActionGroup.EDIT_ADMIN_VM_PROPERTIES, getConstants().allowChangingVmAdminPropertiesRoleTreeTooltip()), roleNode(ActionGroup.RECONNECT_TO_VM, getConstants().allowReconnectToVmRoleTreeTooltip())));
}
#method_after
protected static RoleNode createVmRoleTree() {
    return categoryNode(getConstants().vmRoleTree(), categoryNode(getConstants().basicOperationsRoleTree(), roleNode(ActionGroup.REBOOT_VM, getConstants().allowBasicVmOperationsRoleTreeTooltip()), roleNode(ActionGroup.STOP_VM, getConstants().allowBasicVmOperationsRoleTreeTooltip()), roleNode(ActionGroup.SHUT_DOWN_VM, getConstants().allowBasicVmOperationsRoleTreeTooltip()), roleNode(ActionGroup.HIBERNATE_VM, getConstants().allowBasicVmOperationsRoleTreeTooltip()), roleNode(ActionGroup.RUN_VM, getConstants().allowBasicVmOperationsRoleTreeTooltip()), roleNode(ActionGroup.CHANGE_VM_CD, getConstants().allowToAttachCdToTheVmRoleTreeTooltip()), roleNode(ActionGroup.CONNECT_TO_VM, getConstants().allowViewingTheVmConsoleScreenRoleTreeTooltip())), categoryNode(getConstants().provisioningOperationsRoleTree(), getConstants().notePermissionsContainigTheseOperationsShuoldAssociatSdOrAboveRoleTreeTooltip(), roleNode(ActionGroup.EDIT_VM_PROPERTIES, getConstants().allowChangeVmPropertiesRoleTreeTooltip()), roleNode(ActionGroup.CREATE_VM, getConstants().allowToCreateNewVmsRoleTreeTooltip()), roleNode(ActionGroup.CREATE_INSTANCE, getConstants().allowToCreateNewInstnaceRoleTreeTooltip()), roleNode(ActionGroup.DELETE_VM, getConstants().allowToRemoveVmsFromTheSystemRoleTreeTooltip()), roleNode(ActionGroup.IMPORT_EXPORT_VM, getConstants().allowImportExportOperationsRoleTreeTooltip()), roleNode(ActionGroup.CONFIGURE_VM_STORAGE, getConstants().allowToAddRemoveDiskToTheVmRoleTreeTooltip()), roleNode(ActionGroup.MANIPULATE_VM_SNAPSHOTS, getConstants().allowToCreateDeleteSnapshotsOfTheVmRoleTreeTooltip())), categoryNode(getConstants().administrationOperationsRoleTree(), getConstants().notePermissionsContainigTheseOperationsShuoldAssociatDcOrEqualRoleTreeTooltip(), roleNode(ActionGroup.MOVE_VM, getConstants().allowToMoveVmImageToAnotherStorageDomainRoleTreeTooltip()), roleNode(ActionGroup.MIGRATE_VM, getConstants().allowMigratingVmBetweenHostsInClusterRoleTreeTooltip()), roleNode(ActionGroup.CHANGE_VM_CUSTOM_PROPERTIES, getConstants().allowToChangeVmCustomPropertiesRoleTreeTooltip()), roleNode(ActionGroup.EDIT_ADMIN_VM_PROPERTIES, getConstants().allowChangingVmAdminPropertiesRoleTreeTooltip()), roleNode(ActionGroup.RECONNECT_TO_VM, getConstants().allowReconnectToVmRoleTreeTooltip())));
}
#end_block

#method_before
protected static RoleNode createStorageDomainRoleTree() {
    return categoryNode(getConstants().storageDomainRoleTree(), categoryNode(getConstants().configureStorageDomainRoleTree(), roleNode(ActionGroup.CREATE_STORAGE_DOMAIN, getConstants().allowToCreateStorageDomainRoleTreeTooltip()), roleNode(ActionGroup.DELETE_STORAGE_DOMAIN, getConstants().allowToDeleteStorageDomainRoleTreeTooltip()), roleNode(ActionGroup.EDIT_STORAGE_DOMAIN_CONFIGURATION, getConstants().allowToModifyStorageDomainPropertiesRoleTreeTooltip()), roleNode(ActionGroup.MANIPULATE_STORAGE_DOMAIN, getConstants().allowToChangeStorageDomainStatusRoleTreeTooltip())));
}
#method_after
protected static RoleNode createStorageDomainRoleTree() {
    return categoryNode(getConstants().storageDomainRoleTree(), categoryNode(getConstants().configureStorageDomainRoleTree(), roleNode(ActionGroup.CREATE_STORAGE_DOMAIN, getConstants().allowToCreateStorageDomainRoleTreeTooltip()), roleNode(ActionGroup.DELETE_STORAGE_DOMAIN, getConstants().allowToDeleteStorageDomainRoleTreeTooltip()), roleNode(ActionGroup.EDIT_STORAGE_DOMAIN_CONFIGURATION, getConstants().allowToModifyStorageDomainPropertiesRoleTreeTooltip()), roleNode(ActionGroup.MANIPULATE_STORAGE_DOMAIN, getConstants().allowToChangeStorageDomainStatusRoleTreeTooltip())), categoryNode(getConstants().configureDiskProfileRoleTree(), roleNode(ActionGroup.CREATE_STORAGE_DISK_PROFILE, getConstants().allowToCreateDiskProfileRoleTreeTooltip()), roleNode(ActionGroup.DELETE_STORAGE_DISK_PROFILE, getConstants().allowToDeleteDiskProfileRoleTreeTooltip()), roleNode(ActionGroup.CONFIGURE_STORAGE_DISK_PROFILE, getConstants().allowToUpdateDiskProfileRoleTreeTooltip())));
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction() || !initializeVds() || !checkStorageDomainNameLengthValid()) {
        return false;
    }
    if (isStorageWithSameNameExists()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NAME_ALREADY_EXIST);
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.ISO && !getStorageDomain().getStorageType().isFileDomain()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DOMAIN_TYPE_CAN_BE_CREATED_ONLY_ON_SPECIFIC_STORAGE_DOMAINS, String.format("$domainType %1$s", "ISO"), String.format("$storageTypes %1$s", "file"));
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.ImportExport && (getStorageDomain().getStorageType() == StorageType.LOCALFS || getStorageDomain().getStorageType().isBlockDomain())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DOMAIN_TYPE_CAN_BE_CREATED_ONLY_ON_SPECIFIC_STORAGE_DOMAINS, String.format("$domainType %1$s", "Export"), String.format("$storageTypes %1$s", "shared file"));
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.Master) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    if (!Guid.isNullOrEmpty(getParameters().getStoragePoolId()) && getTargetStoragePool() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST);
    }
    ensureStorageFormatInitialized();
    if (!isStorageFormatSupportedByStoragePool() || !isStorageFormatCompatibleWithDomain()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL_HOST);
        getReturnValue().getCanDoActionMessages().add(String.format("$storageFormat %1$s", getStorageDomain().getStorageFormat()));
        return false;
    }
    return canAddDomain();
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction() || !initializeVds() || !checkStorageDomainNameLengthValid()) {
        return false;
    }
    if (isStorageWithSameNameExists()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NAME_ALREADY_EXIST);
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.ISO && !getStorageDomain().getStorageType().isFileDomain()) {
        addCanDoActionMessageVariable("domainType", StorageConstants.ISO);
        addCanDoActionMessageVariable("storageTypes", StorageConstants.FILE);
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DOMAIN_TYPE_CAN_BE_CREATED_ONLY_ON_SPECIFIC_STORAGE_DOMAINS);
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.ImportExport && (getStorageDomain().getStorageType() == StorageType.LOCALFS || getStorageDomain().getStorageType().isBlockDomain())) {
        addCanDoActionMessageVariable("domainType", StorageConstants.EXPORT);
        addCanDoActionMessageVariable("storageTypes", StorageConstants.SHARED + " " + StorageConstants.FILE);
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DOMAIN_TYPE_CAN_BE_CREATED_ONLY_ON_SPECIFIC_STORAGE_DOMAINS);
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.Master) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    if (!Guid.isNullOrEmpty(getParameters().getStoragePoolId()) && getTargetStoragePool() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST);
    }
    ensureStorageFormatInitialized();
    StorageDomainToPoolRelationValidator storageDomainToPoolRelationValidator = getAttachDomainValidator();
    StorageDomainValidator sdValidator = getStorageDomainValidator();
    if (!validate(storageDomainToPoolRelationValidator.isStorageDomainFormatCorrectForDC()) || !validate(sdValidator.isStorageFormatCompatibleWithDomain())) {
        return false;
    }
    return canAddDomain();
}
#end_block

#method_before
private void ensureStorageFormatInitialized() {
    StorageDomain sd = getStorageDomain();
    if (sd.getStorageFormat() == null) {
        if (sd.getStorageDomainType().isDataDomain()) {
            StoragePool sp = getTargetStoragePool();
            if (sp != null) {
                sd.setStorageFormat(VersionStorageFormatUtil.getPreferredForVersion(sp.getcompatibility_version(), sd.getStorageType()));
            }
        } else {
            sd.setStorageFormat(StorageFormatType.V1);
        }
    }
}
#method_after
private void ensureStorageFormatInitialized() {
    StorageDomain sd = getStorageDomain();
    if (sd.getStorageFormat() == null) {
        if (sd.getStorageDomainType().isDataDomain()) {
            StoragePool sp = getTargetStoragePool();
            if (sp != null) {
                sd.setStorageFormat(VersionStorageFormatUtil.getPreferredForVersion(sp.getCompatibilityVersion(), sd.getStorageType()));
            }
        } else {
            sd.setStorageFormat(StorageFormatType.V1);
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction() || !initializeVds() || !checkStorageDomainNameLengthValid()) {
        return false;
    }
    if (isStorageWithSameNameExists()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NAME_ALREADY_EXIST);
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.ISO && !getStorageDomain().getStorageType().isFileDomain()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.ImportExport && (getStorageDomain().getStorageType() == StorageType.LOCALFS || getStorageDomain().getStorageType().isBlockDomain())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_EXPORT_DOMAIN_CANNOT_BE_APPLIED_ON_BLOCK_STORAGE);
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.Master) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    if (!Guid.isNullOrEmpty(getParameters().getStoragePoolId()) && getTargetStoragePool() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST);
    }
    ensureStorageFormatInitialized();
    if (!isStorageFormatSupportedByStoragePool() || !isStorageFormatCompatibleWithDomain()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL_HOST);
        getReturnValue().getCanDoActionMessages().add(String.format("$storageFormat %1$s", getStorageDomain().getStorageFormat()));
        return false;
    }
    return canAddDomain();
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction() || !initializeVds() || !checkStorageDomainNameLengthValid()) {
        return false;
    }
    if (isStorageWithSameNameExists()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NAME_ALREADY_EXIST);
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.ISO && !getStorageDomain().getStorageType().isFileDomain()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.ImportExport && (getStorageDomain().getStorageType() == StorageType.LOCALFS || getStorageDomain().getStorageType().isBlockDomain())) {
        addCanDoActionMessageVariable("domainType", StorageConstants.EXPORT);
        addCanDoActionMessageVariable("storageTypes", StorageConstants.SHARED + " " + StorageConstants.FILE);
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DOMAIN_TYPE_CAN_BE_CREATED_ONLY_ON_SPECIFIC_STORAGE_DOMAINS);
    }
    if (getStorageDomain().getStorageDomainType() == StorageDomainType.Master) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    if (!Guid.isNullOrEmpty(getParameters().getStoragePoolId()) && getTargetStoragePool() == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST);
    }
    ensureStorageFormatInitialized();
    StorageDomainToPoolRelationValidator storageDomainToPoolRelationValidator = getAttachDomainValidator();
    StorageDomainValidator sdValidator = getStorageDomainValidator();
    if (!validate(storageDomainToPoolRelationValidator.isStorageDomainFormatCorrectForDC()) || !validate(sdValidator.isStorageFormatCompatibleWithDomain())) {
        return false;
    }
    return canAddDomain();
}
#end_block

#method_before
private void ensureStorageFormatInitialized() {
    StorageDomain sd = getStorageDomain();
    if (sd.getStorageFormat() == null) {
        if (sd.getStorageDomainType().isDataDomain()) {
            StoragePool sp = getTargetStoragePool();
            if (sp != null) {
                sd.setStorageFormat(VersionStorageFormatUtil.getPreferredForVersion(sp.getcompatibility_version(), sd.getStorageType()));
            }
        } else {
            sd.setStorageFormat(StorageFormatType.V1);
        }
    }
}
#method_after
private void ensureStorageFormatInitialized() {
    StorageDomain sd = getStorageDomain();
    if (sd.getStorageFormat() == null) {
        if (sd.getStorageDomainType().isDataDomain()) {
            StoragePool sp = getTargetStoragePool();
            if (sp != null) {
                sd.setStorageFormat(VersionStorageFormatUtil.getPreferredForVersion(sp.getCompatibilityVersion(), sd.getStorageType()));
            }
        } else {
            sd.setStorageFormat(StorageFormatType.V1);
        }
    }
}
#end_block

#method_before
public void save(GlusterVolumeSnapshotConfigParam config) {
    getCallsHandler().executeModification("InsertGlusterVolumeSnapshotConfig", createFullParametersMapper(config));
}
#method_after
public void save(GlusterVolumeSnapshotConfig config) {
    getCallsHandler().executeModification("InsertGlusterVolumeSnapshotConfig", createFullParametersMapper(config));
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotConfigParam mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterVolumeSnapshotConfigParam config = new GlusterVolumeSnapshotConfigParam();
    config.setClusterId(getGuidDefaultEmpty(rs, "cluster_id"));
    config.setVolumeId(getGuidDefaultEmpty(rs, "volume_id"));
    config.setParamName(rs.getString("param_name"));
    config.setParamValue(rs.getString("param_value"));
    return config;
}
#method_after
@Override
public GlusterVolumeSnapshotConfig mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterVolumeSnapshotConfig config = new GlusterVolumeSnapshotConfig();
    config.setClusterId(getGuidDefaultEmpty(rs, "cluster_id"));
    config.setVolumeId(getGuidDefaultEmpty(rs, "volume_id"));
    config.setParamName(rs.getString("param_name"));
    config.setParamValue(rs.getString("param_value"));
    return config;
}
#end_block

#method_before
protected MapSqlParameterSource createFullParametersMapper(GlusterVolumeSnapshotConfigParam config) {
    return getCustomMapSqlParameterSource().addValue("cluster_id", config.getClusterId()).addValue("volume_id", config.getVolumeId()).addValue("param_name", config.getParamName()).addValue("param_value", config.getParamValue());
}
#method_after
protected MapSqlParameterSource createFullParametersMapper(GlusterVolumeSnapshotConfig config) {
    return getCustomMapSqlParameterSource().addValue("cluster_id", config.getClusterId()).addValue("volume_id", config.getVolumeId()).addValue("param_name", config.getParamName()).addValue("param_value", config.getParamValue());
}
#end_block

#method_before
@Override
public List<GlusterVolumeSnapshotConfigParam> getAllWithQuery(String query) {
    List<GlusterVolumeSnapshotConfigParam> configs = jdbcTemplate.query(query, snapshotConfigRowMapper);
    return configs;
}
#method_after
@Override
public List<GlusterVolumeSnapshotConfig> getAllWithQuery(String query) {
    List<GlusterVolumeSnapshotConfig> configs = jdbcTemplate.query(query, snapshotConfigRowMapper);
    return configs;
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotEntity getByName(Guid clusterId, String snapshotName) {
    GlusterVolumeSnapshotEntity snapshot = getCallsHandler().executeRead("GetGlusterVolumeSnapshotByName", snapshotRowMapper, getCustomMapSqlParameterSource().addValue("cluster_id", clusterId).addValue("snapshot_name", snapshotName));
    return snapshot;
}
#method_after
@Override
public GlusterVolumeSnapshotEntity getByName(Guid volumeId, String snapshotName) {
    GlusterVolumeSnapshotEntity snapshot = getCallsHandler().executeRead("GetGlusterVolumeSnapshotByName", snapshotRowMapper, getCustomMapSqlParameterSource().addValue("volume_id", volumeId).addValue("snapshot_name", snapshotName));
    return snapshot;
}
#end_block

#method_before
@Override
public void removeByName(Guid clusterId, String snapshotName) {
    getCallsHandler().executeModification("DeleteGlusterVolumeSnapshotByName", getCustomMapSqlParameterSource().addValue("cluster_id", clusterId).addValue("snapshot_name", snapshotName));
}
#method_after
@Override
public void removeByName(Guid volumeId, String snapshotName) {
    getCallsHandler().executeModification("DeleteGlusterVolumeSnapshotByName", getCustomMapSqlParameterSource().addValue("volume_id", volumeId).addValue("snapshot_name", snapshotName));
}
#end_block

#method_before
@Override
public void updateSnapshotStatusByName(Guid clusterId, String snapshotName, GlusterSnapshotStatus status) {
    getCallsHandler().executeModification("UpdateGlusterVolumeSnapshotStatusByName", getCustomMapSqlParameterSource().addValue("cluster_id", clusterId).addValue("snapshot_name", snapshotName).addValue("status", EnumUtils.nameOrNull(status)));
}
#method_after
@Override
public void updateSnapshotStatusByName(Guid volumeId, String snapshotName, GlusterSnapshotStatus status) {
    getCallsHandler().executeModification("UpdateGlusterVolumeSnapshotStatusByName", getCustomMapSqlParameterSource().addValue("volume_id", volumeId).addValue("snapshot_name", snapshotName).addValue("status", EnumUtils.nameOrNull(status)));
}
#end_block

#method_before
@Override
protected MapSqlParameterSource createFullParametersMapper(GlusterVolumeSnapshotEntity snapshot) {
    return getCustomMapSqlParameterSource().addValue("snapshot_id", snapshot.getSnapshotId()).addValue("cluster_id", snapshot.getClusterId()).addValue("snapshot_name", snapshot.getSnapshotName()).addValue("volume_id", snapshot.getVolumeId()).addValue("created_at", snapshot.getCreatedAt()).addValue("description", snapshot.getDescription()).addValue("status", EnumUtils.nameOrNull(snapshot.getStatus()));
}
#method_after
@Override
protected MapSqlParameterSource createFullParametersMapper(GlusterVolumeSnapshotEntity snapshot) {
    return getCustomMapSqlParameterSource().addValue("snapshot_id", snapshot.getSnapshotId()).addValue("snapshot_name", snapshot.getSnapshotName()).addValue("volume_id", snapshot.getVolumeId()).addValue("description", snapshot.getDescription()).addValue("status", EnumUtils.nameOrNull(snapshot.getStatus()));
}
#end_block

#method_before
@Override
public GlusterVolumeSnapshotEntity mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterVolumeSnapshotEntity entity = new GlusterVolumeSnapshotEntity();
    entity.setSnapshotId(getGuidDefaultEmpty(rs, "snapshot_id"));
    entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id"));
    entity.setVolumeId(getGuidDefaultEmpty(rs, "volume_id"));
    entity.setSnapshotName(rs.getString("snapshot_name"));
    entity.setCreatedAt(rs.getTimestamp("created_at"));
    entity.setDescription(rs.getString("description"));
    entity.setStatus(GlusterSnapshotStatus.from(rs.getString("status")));
    return entity;
}
#method_after
@Override
public GlusterVolumeSnapshotEntity mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterVolumeSnapshotEntity entity = new GlusterVolumeSnapshotEntity();
    entity.setSnapshotId(getGuidDefaultEmpty(rs, "snapshot_id"));
    entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id"));
    entity.setVolumeId(getGuidDefaultEmpty(rs, "volume_id"));
    entity.setSnapshotName(rs.getString("snapshot_name"));
    entity.setCreatedAt(rs.getTimestamp("_create_date"));
    entity.setDescription(rs.getString("description"));
    entity.setStatus(GlusterSnapshotStatus.from(rs.getString("status")));
    return entity;
}
#end_block

#method_before
@SuppressWarnings("deprecation")
@Override
public MapSqlParameterMapper<GlusterVolumeSnapshotEntity> getBatchMapper() {
    // TODO: Implement this
    throw new NotImplementedException("Unsupported operation");
}
#method_after
@Override
public MapSqlParameterMapper<GlusterVolumeSnapshotEntity> getBatchMapper() {
    return new MapSqlParameterMapper<GlusterVolumeSnapshotEntity>() {

        @Override
        public MapSqlParameterSource map(GlusterVolumeSnapshotEntity entity) {
            MapSqlParameterSource paramValue = new MapSqlParameterSource().addValue("snapshot_id", entity.getId()).addValue("snapshot_name", entity.getSnapshotName()).addValue("volume_id", entity.getVolumeId()).addValue("description", entity.getDescription()).addValue("status", EnumUtils.nameOrNull(entity.getStatus())).addValue("_create_date", entity.getCreatedAt());
            return paramValue;
        }
    };
}
#end_block

#method_before
@Test
public void testSaveAndGetById() {
    GlusterVolumeSnapshotEntity snapshot = dao.getByName(CLUSTER_ID, NEW_SNAPSHOT_NAME);
    assertNull(snapshot);
    newSnapshot = insertTestSnapshot();
    snapshot = dao.getById(newSnapshot.getId());
    assertNotNull(snapshot);
    assertEquals(newSnapshot, snapshot);
}
#method_after
@Test
public void testSaveAndGetById() {
    GlusterVolumeSnapshotEntity snapshot = dao.getByName(VOLUME_ID, NEW_SNAPSHOT_NAME);
    assertNull(snapshot);
    newSnapshot = insertTestSnapshot();
    snapshot = dao.getById(newSnapshot.getId());
    assertNotNull(snapshot);
    assertEquals(newSnapshot, snapshot);
}
#end_block

#method_before
@Test
public void testGetByName() {
    newSnapshot = insertTestSnapshot();
    GlusterVolumeSnapshotEntity snapshot = dao.getByName(CLUSTER_ID, NEW_SNAPSHOT_NAME);
    assertNotNull(snapshot);
    assertEquals(newSnapshot, snapshot);
}
#method_after
@Test
public void testGetByName() {
    newSnapshot = insertTestSnapshot();
    GlusterVolumeSnapshotEntity snapshot = dao.getByName(VOLUME_ID, NEW_SNAPSHOT_NAME);
    assertNotNull(snapshot);
    assertEquals(newSnapshot, snapshot);
}
#end_block

#method_before
@Test
public void testGetByVolumeId() {
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getByVolumeId(CLUSTER_ID, VOLUME_ID);
    assertTrue(snapshots != null);
    assertTrue(snapshots.size() == 2);
    assertTrue(snapshots.contains(existingSnapshot));
}
#method_after
@Test
public void testGetByVolumeId() {
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getAllByVolumeId(VOLUME_ID);
    assertTrue(snapshots != null);
    assertTrue(snapshots.size() == 2);
    assertTrue(snapshots.contains(existingSnapshot));
}
#end_block

#method_before
@Test
public void testGetByClusterId() {
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getByClusterId(CLUSTER_ID);
    assertTrue(snapshots != null);
    assertTrue(snapshots.size() == 2);
    assertTrue(snapshots.contains(existingSnapshot));
}
#method_after
@Test
public void testGetByClusterId() {
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getAllByClusterId(CLUSTER_ID);
    assertNotNull(snapshots);
    assertTrue(snapshots.size() == 2);
    assertTrue(snapshots.contains(existingSnapshot));
}
#end_block

#method_before
@Test
public void testGetAllWithQuery() {
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getAllWithQuery("select * from gluster_volume_snapshots");
    assertTrue(snapshots != null);
    assertTrue(snapshots.size() == 2);
}
#method_after
@Test
public void testGetAllWithQuery() {
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getAllWithQuery("select * from gluster_volume_snapshots_view");
    assertTrue(snapshots != null);
    assertTrue(snapshots.size() == 2);
}
#end_block

#method_before
@Test
public void testRemove() {
    dao.remove(EXISTING_SNAPSHOT_ID);
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getByVolumeId(CLUSTER_ID, VOLUME_ID);
    assertTrue(snapshots.size() == 1);
    assertFalse(snapshots.contains(existingSnapshot));
}
#method_after
@Test
public void testRemove() {
    dao.remove(EXISTING_SNAPSHOT_ID);
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getAllByVolumeId(VOLUME_ID);
    assertTrue(snapshots.size() == 1);
    assertFalse(snapshots.contains(existingSnapshot));
}
#end_block

#method_before
@Test
public void testRemoveMultiple() {
    List<Guid> idsToRemove = new ArrayList<Guid>();
    idsToRemove.add(EXISTING_SNAPSHOT_ID);
    idsToRemove.add(EXISTING_SNAPSHOT_ID_1);
    dao.removeAll(idsToRemove);
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getByVolumeId(CLUSTER_ID, VOLUME_ID);
    assertTrue(snapshots.isEmpty());
}
#method_after
@Test
public void testRemoveMultiple() {
    List<Guid> idsToRemove = new ArrayList<Guid>();
    idsToRemove.add(EXISTING_SNAPSHOT_ID);
    idsToRemove.add(EXISTING_SNAPSHOT_ID_1);
    dao.removeAll(idsToRemove);
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getAllByVolumeId(VOLUME_ID);
    assertTrue(snapshots.isEmpty());
}
#end_block

#method_before
@Test
public void testRemoveByName() {
    dao.removeByName(CLUSTER_ID, EXISTING_SNAPSHOT_NAME_1);
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getByVolumeId(CLUSTER_ID, VOLUME_ID);
    assertTrue(snapshots.size() == 1);
    assertTrue(snapshots.contains(existingSnapshot));
    assertFalse(snapshots.contains(existingSnapshot1));
}
#method_after
@Test
public void testRemoveByName() {
    dao.removeByName(VOLUME_ID, EXISTING_SNAPSHOT_NAME_1);
    List<GlusterVolumeSnapshotEntity> snapshots = dao.getAllByVolumeId(VOLUME_ID);
    assertTrue(snapshots.size() == 1);
    assertTrue(snapshots.contains(existingSnapshot));
    assertFalse(snapshots.contains(existingSnapshot1));
}
#end_block

#method_before
@Test
public void testUpdateSnapshotStatusByName() {
    dao.updateSnapshotStatusByName(existingSnapshot.getClusterId(), existingSnapshot.getSnapshotName(), GlusterSnapshotStatus.DECOMMISSIONED);
    GlusterVolumeSnapshotEntity snapshot = dao.getById(existingSnapshot.getSnapshotId());
    assertNotNull(snapshot);
    assertFalse(snapshot.equals(existingSnapshot));
    existingSnapshot.setStatus(GlusterSnapshotStatus.DECOMMISSIONED);
    assertEquals(existingSnapshot, snapshot);
}
#method_after
@Test
public void testUpdateSnapshotStatusByName() {
    dao.updateSnapshotStatusByName(existingSnapshot.getVolumeId(), existingSnapshot.getSnapshotName(), GlusterSnapshotStatus.STOPPED);
    GlusterVolumeSnapshotEntity snapshot = dao.getById(existingSnapshot.getSnapshotId());
    assertNotNull(snapshot);
    assertFalse(snapshot.equals(existingSnapshot));
    existingSnapshot.setStatus(GlusterSnapshotStatus.STOPPED);
    assertEquals(existingSnapshot, snapshot);
}
#end_block

#method_before
private GlusterVolumeSnapshotEntity insertTestSnapshot() {
    Guid snapshotId = Guid.newGuid();
    GlusterVolumeSnapshotEntity snapshot = new GlusterVolumeSnapshotEntity();
    snapshot.setSnapshotId(snapshotId);
    snapshot.setClusterId(CLUSTER_ID);
    snapshot.setSnapshotName(NEW_SNAPSHOT_NAME);
    snapshot.setVolumeId(VOLUME_ID);
    snapshot.setCreatedAt(new Date());
    snapshot.setDescription("test-description");
    snapshot.setStatus(GlusterSnapshotStatus.from("IN_USE"));
    dao.save(snapshot);
    return snapshot;
}
#method_after
private GlusterVolumeSnapshotEntity insertTestSnapshot() {
    Guid snapshotId = Guid.newGuid();
    GlusterVolumeSnapshotEntity snapshot = new GlusterVolumeSnapshotEntity();
    snapshot.setSnapshotId(snapshotId);
    snapshot.setClusterId(CLUSTER_ID);
    snapshot.setSnapshotName(NEW_SNAPSHOT_NAME);
    snapshot.setVolumeId(VOLUME_ID);
    snapshot.setDescription("test-description");
    snapshot.setStatus(GlusterSnapshotStatus.STARTED);
    dao.save(snapshot);
    return snapshot;
}
#end_block

