3
#method_before
protected Job getJobLintScssTs(String requirementIdentifier) {
    return new Job("Lint scss ts", new BambooKey("LSTS")).description("Run grunt css, grunt scripts, test git is clean").pluginConfigurations(this.getDefaultJobPluginConfiguration()).tasks(this.getTaskGitCloneRepository(), this.getTaskGitCherryPick(), new ScriptTask().description("yarn install in Build/ dir").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "function yarn() {\n" + "    docker run \\\n" + "        -u ${HOST_UID} \\\n" + "        -v /bamboo-data/${BAMBOO_COMPOSE_PROJECT_NAME}/passwd:/etc/passwd \\\n" + "        -v ${BAMBOO_COMPOSE_PROJECT_NAME}_bamboo-data:/srv/bamboo/xml-data/build-dir/ \\\n" + "        -e HOME=${HOME} \\\n" + "        --name ${BAMBOO_COMPOSE_PROJECT_NAME}sib_adhoc \\\n" + "        --rm \\\n" + "        typo3gmbh/" + requirementIdentifier.toLowerCase() + ":latest \\\n" + "        bin/bash -c \"cd ${PWD}/Build; yarn $*\"\n" + "}\n" + "\n" + "yarn install"), new ScriptTask().description("Run grunt lint").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "function grunt() {\n" + "    docker run \\\n" + "        -u ${HOST_UID} \\\n" + "        -v /bamboo-data/${BAMBOO_COMPOSE_PROJECT_NAME}/passwd:/etc/passwd \\\n" + "        -v ${BAMBOO_COMPOSE_PROJECT_NAME}_bamboo-data:/srv/bamboo/xml-data/build-dir/ \\\n" + "        -e HOME=${HOME} \\\n" + "        --name ${BAMBOO_COMPOSE_PROJECT_NAME}sib_adhoc \\\n" + "        --rm \\\n" + "        typo3gmbh/" + requirementIdentifier.toLowerCase() + ":latest \\\n" + "        bin/bash -c \"cd ${PWD}/Build; ./node_modules/grunt/bin/grunt $*\"\n" + "}\n" + "\n" + "grunt lint"), new ScriptTask().description("Run grunt scripts").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "function grunt() {\n" + "    docker run \\\n" + "        -u ${HOST_UID} \\\n" + "        -v /bamboo-data/${BAMBOO_COMPOSE_PROJECT_NAME}/passwd:/etc/passwd \\\n" + "        -v ${BAMBOO_COMPOSE_PROJECT_NAME}_bamboo-data:/srv/bamboo/xml-data/build-dir/ \\\n" + "        -e HOME=${HOME} \\\n" + "        --name ${BAMBOO_COMPOSE_PROJECT_NAME}sib_adhoc \\\n" + "        --rm \\\n" + "        typo3gmbh/" + requirementIdentifier.toLowerCase() + ":latest \\\n" + "        bin/bash -c \"cd ${PWD}/Build; ./node_modules/grunt/bin/grunt $*\"\n" + "}\n" + "\n" + "grunt scripts"), new ScriptTask().description("Run grunt css").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "function grunt() {\n" + "    docker run \\\n" + "        -u ${HOST_UID} \\\n" + "        -v /bamboo-data/${BAMBOO_COMPOSE_PROJECT_NAME}/passwd:/etc/passwd \\\n" + "        -v ${BAMBOO_COMPOSE_PROJECT_NAME}_bamboo-data:/srv/bamboo/xml-data/build-dir/ \\\n" + "        -e HOME=${HOME} \\\n" + "        --name ${BAMBOO_COMPOSE_PROJECT_NAME}sib_adhoc \\\n" + "        --rm \\\n" + "        typo3gmbh/" + requirementIdentifier.toLowerCase() + ":latest \\\n" + "        bin/bash -c \"cd ${PWD}/Build; ./node_modules/grunt/bin/grunt $*\"\n" + "}\n" + "\n" + "grunt css"), new ScriptTask().description("git status to check for changed files after build-js").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "git status | grep -q \"nothing to commit, working tree clean\"")).requirements(this.getRequirementDocker10()).cleanWorkingDirectory(true);
}
#method_after
protected Job getJobLintScssTs(String requirementIdentifier) {
    return new Job("Lint scss ts", new BambooKey("LSTS")).description("Lint scss and ts, build css and js, test git is clean").pluginConfigurations(this.getDefaultJobPluginConfiguration()).tasks(this.getTaskGitCloneRepository(), this.getTaskGitCherryPick(), new ScriptTask().description("yarn install in Build/ dir").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "function yarn() {\n" + "    docker run \\\n" + "        -u ${HOST_UID} \\\n" + "        -v /bamboo-data/${BAMBOO_COMPOSE_PROJECT_NAME}/passwd:/etc/passwd \\\n" + "        -v ${BAMBOO_COMPOSE_PROJECT_NAME}_bamboo-data:/srv/bamboo/xml-data/build-dir/ \\\n" + "        -e HOME=${HOME} \\\n" + "        --name ${BAMBOO_COMPOSE_PROJECT_NAME}sib_adhoc \\\n" + "        --rm \\\n" + "        typo3gmbh/" + requirementIdentifier.toLowerCase() + ":latest \\\n" + "        bin/bash -c \"cd ${PWD}/Build; yarn $*\"\n" + "}\n" + "\n" + "yarn install"), new ScriptTask().description("Run grunt lint").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "function grunt() {\n" + "    docker run \\\n" + "        -u ${HOST_UID} \\\n" + "        -v /bamboo-data/${BAMBOO_COMPOSE_PROJECT_NAME}/passwd:/etc/passwd \\\n" + "        -v ${BAMBOO_COMPOSE_PROJECT_NAME}_bamboo-data:/srv/bamboo/xml-data/build-dir/ \\\n" + "        -e HOME=${HOME} \\\n" + "        --name ${BAMBOO_COMPOSE_PROJECT_NAME}sib_adhoc \\\n" + "        --rm \\\n" + "        typo3gmbh/" + requirementIdentifier.toLowerCase() + ":latest \\\n" + "        bin/bash -c \"cd ${PWD}/Build; ./node_modules/grunt/bin/grunt $*\"\n" + "}\n" + "\n" + "grunt lint"), new ScriptTask().description("Run grunt scripts").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "function grunt() {\n" + "    docker run \\\n" + "        -u ${HOST_UID} \\\n" + "        -v /bamboo-data/${BAMBOO_COMPOSE_PROJECT_NAME}/passwd:/etc/passwd \\\n" + "        -v ${BAMBOO_COMPOSE_PROJECT_NAME}_bamboo-data:/srv/bamboo/xml-data/build-dir/ \\\n" + "        -e HOME=${HOME} \\\n" + "        --name ${BAMBOO_COMPOSE_PROJECT_NAME}sib_adhoc \\\n" + "        --rm \\\n" + "        typo3gmbh/" + requirementIdentifier.toLowerCase() + ":latest \\\n" + "        bin/bash -c \"cd ${PWD}/Build; ./node_modules/grunt/bin/grunt $*\"\n" + "}\n" + "\n" + "grunt scripts"), new ScriptTask().description("Run grunt css").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "function grunt() {\n" + "    docker run \\\n" + "        -u ${HOST_UID} \\\n" + "        -v /bamboo-data/${BAMBOO_COMPOSE_PROJECT_NAME}/passwd:/etc/passwd \\\n" + "        -v ${BAMBOO_COMPOSE_PROJECT_NAME}_bamboo-data:/srv/bamboo/xml-data/build-dir/ \\\n" + "        -e HOME=${HOME} \\\n" + "        --name ${BAMBOO_COMPOSE_PROJECT_NAME}sib_adhoc \\\n" + "        --rm \\\n" + "        typo3gmbh/" + requirementIdentifier.toLowerCase() + ":latest \\\n" + "        bin/bash -c \"cd ${PWD}/Build; ./node_modules/grunt/bin/grunt $*\"\n" + "}\n" + "\n" + "grunt css"), new ScriptTask().description("git status to check for changed files after build-js").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "git status | grep -q \"nothing to commit, working tree clean\"")).requirements(this.getRequirementDocker10()).cleanWorkingDirectory(true);
}
#end_block

#method_before
Plan createPlan() {
    // PREPARATION stage
    ArrayList<Job> jobsPreparationStage = new ArrayList<Job>();
    jobsPreparationStage.add(this.getJobBuildLabels());
    jobsPreparationStage.add(this.getJobCglCheckGitCommit());
    jobsPreparationStage.add(this.getJobCglCheckAnnotations());
    jobsPreparationStage.add(this.getJobComposerValidate());
    Stage stagePreparation = new Stage("Preparation").jobs(jobsPreparationStage.toArray(new Job[jobsPreparationStage.size()]));
    // MAIN stage
    ArrayList<Job> jobsMainStage = new ArrayList<Job>();
    jobsMainStage.add(this.getJobAcceptanceTestInstallMysql(this.getRequirementPhpVersion70Or71Or72(), "PHP707172"));
    jobsMainStage.add(this.getJobAcceptanceTestInstallPgsql(this.getRequirementPhpVersion70Or71Or72(), "PHP707172"));
    jobsMainStage.addAll(this.getJobsAcceptanceTestsMysql(this.numberOfAcceptanceTestJobs, this.getRequirementPhpVersion70Or71Or72(), "PHP707172"));
    jobsMainStage.add(this.getJobIntegrationVarious());
    jobsMainStage.addAll(this.getJobsFunctionalTestsMysql(this.numberOfFunctionalMysqlJobs, this.getRequirementPhpVersion70Or71Or72(), "PHP707172"));
    jobsMainStage.addAll(this.getJobsFunctionalTestsMssql(this.numberOfFunctionalMssqlJobs, this.getRequirementPhpVersion70Or71Or72(), "PHP707172"));
    jobsMainStage.addAll(this.getJobsFunctionalTestsPgsql(this.numberOfFunctionalPgsqlJobs, this.getRequirementPhpVersion70Or71Or72(), "PHP707172"));
    jobsMainStage.add(this.getJobUnitJavaScript());
    jobsMainStage.add(this.getJobLintPhp(this.getRequirementPhpVersion70(), "PHP70"));
    jobsMainStage.add(this.getJobLintPhp(this.getRequirementPhpVersion71(), "PHP71"));
    jobsMainStage.add(this.getJobLintPhp(this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.add(this.getJobLintScssTs());
    jobsMainStage.add(this.getJobUnitPhp(this.getRequirementPhpVersion70(), "PHP70"));
    jobsMainStage.add(this.getJobUnitPhp(this.getRequirementPhpVersion71(), "PHP71"));
    jobsMainStage.add(this.getJobUnitPhp(this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.add(this.getJobUnitDeprecatedPhp(this.getRequirementPhpVersion70(), "PHP70"));
    jobsMainStage.add(this.getJobUnitDeprecatedPhp(this.getRequirementPhpVersion71(), "PHP71"));
    jobsMainStage.add(this.getJobUnitDeprecatedPhp(this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.addAll(this.getJobUnitPhpRandom(this.numberOfUnitRandomOrderJobs, this.getRequirementPhpVersion70(), "PHP70"));
    jobsMainStage.addAll(this.getJobUnitPhpRandom(this.numberOfUnitRandomOrderJobs, this.getRequirementPhpVersion71(), "PHP71"));
    jobsMainStage.addAll(this.getJobUnitPhpRandom(this.numberOfUnitRandomOrderJobs, this.getRequirementPhpVersion72(), "PHP72"));
    Stage stageMainStage = new Stage("Main stage").jobs(jobsMainStage.toArray(new Job[jobsMainStage.size()]));
    // Compile plan
    return new Plan(project(), planName, planKey).description("Execute TYPO3 core master pre-merge tests. Auto generated! See Build/bamboo of core git repository.").pluginConfigurations(this.getDefaultPlanPluginConfiguration()).stages(stagePreparation, stageMainStage).linkedRepositories("git.typo3.org Core").triggers(new RepositoryPollingTrigger().name("Repository polling for post-merge builds"), new RemoteTrigger().name("Remote trigger for pre-merge builds").description("Gerrit").triggerIPAddresses("5.10.165.218,91.184.35.13")).variables(new Variable("changeUrl", ""), new Variable("patchset", "")).planBranchManagement(new PlanBranchManagement().delete(new BranchCleanup()).notificationForCommitters()).notifications(new Notification().type(new PlanCompletedNotification()).recipients(new AnyNotificationRecipient(new AtlassianModule("com.atlassian.bamboo.plugins.bamboo-slack:recipient.slack")).recipientString("https://intercept.typo3.com/index.php")));
}
#method_after
Plan createPlan() {
    // PREPARATION stage
    ArrayList<Job> jobsPreparationStage = new ArrayList<Job>();
    jobsPreparationStage.add(this.getJobBuildLabels());
    jobsPreparationStage.add(this.getJobCglCheckGitCommit());
    jobsPreparationStage.add(this.getJobComposerValidate());
    Stage stagePreparation = new Stage("Preparation").jobs(jobsPreparationStage.toArray(new Job[jobsPreparationStage.size()]));
    // MAIN stage
    ArrayList<Job> jobsMainStage = new ArrayList<Job>();
    jobsMainStage.add(this.getJobAcceptanceTestInstallMysql(this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.add(this.getJobAcceptanceTestInstallPgsql(this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.addAll(this.getJobsAcceptanceTestsMysql(this.numberOfAcceptanceTestJobs, this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.add(this.getJobIntegrationAnnotations());
    jobsMainStage.add(this.getJobIntegrationVarious());
    jobsMainStage.addAll(this.getJobsFunctionalTestsMysql(this.numberOfFunctionalMysqlJobs, this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.addAll(this.getJobsFunctionalTestsMssql(this.numberOfFunctionalMssqlJobs, this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.addAll(this.getJobsFunctionalTestsPgsql(this.numberOfFunctionalPgsqlJobs, this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.add(this.getJobUnitJavaScript());
    jobsMainStage.add(this.getJobLintPhp(this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.add(this.getJobLintScssTs());
    jobsMainStage.add(this.getJobUnitPhp(this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.add(this.getJobUnitDeprecatedPhp(this.getRequirementPhpVersion72(), "PHP72"));
    jobsMainStage.addAll(this.getJobUnitPhpRandom(this.numberOfUnitRandomOrderJobs, this.getRequirementPhpVersion72(), "PHP72"));
    Stage stageMainStage = new Stage("Main stage").jobs(jobsMainStage.toArray(new Job[jobsMainStage.size()]));
    // Compile plan
    return new Plan(project(), planName, planKey).description("Execute TYPO3 core master pre-merge tests. Auto generated! See Build/bamboo of core git repository.").pluginConfigurations(this.getDefaultPlanPluginConfiguration()).stages(stagePreparation, stageMainStage).linkedRepositories("git.typo3.org Core").triggers(new RepositoryPollingTrigger().name("Repository polling for post-merge builds"), new RemoteTrigger().name("Remote trigger for pre-merge builds").description("Gerrit").triggerIPAddresses("5.10.165.218,91.184.35.13")).variables(new Variable("changeUrl", ""), new Variable("patchset", "")).planBranchManagement(new PlanBranchManagement().delete(new BranchCleanup()).notificationForCommitters()).notifications(new Notification().type(new PlanCompletedNotification()).recipients(new AnyNotificationRecipient(new AtlassianModule("com.atlassian.bamboo.plugins.bamboo-slack:recipient.slack")).recipientString("https://intercept.typo3.com/index.php")));
}
#end_block

#method_before
protected Job getJobCglCheckGitCommit() {
    return new Job("Integration CGL", new BambooKey("CGLCHECK")).description("Check coding guidelines by executing Build/Scripts/cglFixMyCommit.sh script").pluginConfigurations(this.getDefaultJobPluginConfiguration()).tasks(this.getTaskGitCloneRepository(), this.getTaskGitCherryPick(), this.getTaskComposerInstall(), new ScriptTask().description("Execute cgl check script").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "./Build/Scripts/cglFixMyCommit.sh dryrun\n")).requirements(this.getRequirementPhpVersion70Or71Or72()).cleanWorkingDirectory(true);
}
#method_after
protected Job getJobCglCheckGitCommit() {
    return new Job("Integration CGL", new BambooKey("CGLCHECK")).description("Check coding guidelines by executing Build/Scripts/cglFixMyCommit.sh script").pluginConfigurations(this.getDefaultJobPluginConfiguration()).tasks(this.getTaskGitCloneRepository(), this.getTaskGitCherryPick(), this.getTaskComposerInstall(), new ScriptTask().description("Execute cgl check script").interpreter(ScriptTaskProperties.Interpreter.BINSH_OR_CMDEXE).inlineBody(this.getScriptTaskBashInlineBody() + "./Build/Scripts/cglFixMyCommit.sh dryrun\n")).requirements(this.getRequirementPhpVersion72()).cleanWorkingDirectory(true);
}
#end_block

